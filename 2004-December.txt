From sforstner at sheep.berlios.de  Wed Dec  1 10:47:10 2004
From: sforstner at sheep.berlios.de (Stefan at BerliOS)
Date: Wed, 1 Dec 2004 10:47:10 +0100
Subject: [Provirent-svn-commit] r185 - /
Message-ID: <200412010947.iB19lAGT011824@sheep.berlios.de>

Author: sforstner
Date: 2004-12-01 10:47:06 +0100 (Wed, 01 Dec 2004)
New Revision: 185

Modified:
   VIDEO
Log:
- Video geleert

Modified: VIDEO
===================================================================
(Binary files differ)



From sforstner at sheep.berlios.de  Wed Dec  1 11:23:58 2004
From: sforstner at sheep.berlios.de (Stefan at BerliOS)
Date: Wed, 1 Dec 2004 11:23:58 +0100
Subject: [Provirent-svn-commit] r186 - in project_src/provirent_hibernate/src: de/hsharz/provirent/management/gui de/hsharz/provirent/management/gui/language de/hsharz/provirent/objects de/hsharz/provirent/persistence test/provirent/hibernate
Message-ID: <200412011023.iB1ANwn4012951@sheep.berlios.de>

Author: sforstner
Date: 2004-12-01 11:23:57 +0100 (Wed, 01 Dec 2004)
New Revision: 186

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeCustomer.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/main.properties
   project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Customer.hbm.xml
   project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Person.hbm.xml
   project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java
   project_src/provirent_hibernate/src/test/provirent/hibernate/TestCustomer.java
   project_src/provirent_hibernate/src/test/provirent/hibernate/TestHibernate.java
Log:


Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeCustomer.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeCustomer.java	2004-12-01 09:47:06 UTC (rev 185)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeCustomer.java	2004-12-01 10:23:57 UTC (rev 186)
@@ -781,6 +781,19 @@
             textBirthday.setEnabled(false);
         }
         {
+            labelRegistrationDate = new Label(groupCustomerDetail,
+                    SWT.NONE);
+            labelRegistrationDate.setText(l
+                    .getString("Customer.groupdetail.regdatelabel")
+                    + ":");
+            labelRegistrationDate.setSize(125, 15);
+            GridData label1LData1 = new GridData();
+            label1LData1.widthHint = 125;
+            label1LData1.heightHint = 15;
+            label1LData1.horizontalSpan = 2;
+            labelRegistrationDate.setLayoutData(label1LData1);
+        }
+        {
             textRegistrationDate = new Text(groupCustomerDetail,
                     SWT.READ_ONLY | SWT.BORDER);
             GridData text1LData3 = new GridData();
@@ -1259,6 +1272,9 @@
         for (int i = 0; i < Customerlist.size(); i++) {
 
             Customer o = (Customer) Customerlist.get(i);
+            
+            logger.debug("Customer " + i + " aus DB:"+o+" Person: "+o.getPerson());
+            
             item = new TableItem(tableCustomer, SWT.NONE);
             Calendar regdate = Calendar.getInstance();
             regdate.setTime(o.getDayOfRegistration());

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java	2004-12-01 09:47:06 UTC (rev 185)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java	2004-12-01 10:23:57 UTC (rev 186)
@@ -110,6 +110,7 @@
     private CTabItem tabItemActor;
     private CTabItem tabItemDirector;
     private CTabItem tabItemLanguage;
+    private CTabItem tabItemCustomer;
     private CTabItem tabItemGenre;
     private CTabItem tabItemImage;
     private CTabItem tabItemMovie;
@@ -124,7 +125,8 @@
     private CompositeImage compositeImage;
     private CompositeMovie compositeMovie;
     private CompositePayment compositePayment;
-    private CompositeStatus compositeStatus;   
+    private CompositeStatus compositeStatus;
+    private CompositeCustomer compositeCustomer;
 
     private Menu rootMenu;
     
@@ -141,6 +143,7 @@
     private MenuItem viewDirectorMenuItem;
     private MenuItem viewVideoFormatMenuItem;
     private MenuItem viewActorMenuItem;
+    private MenuItem viewCustomerMenuItem;
     private MenuItem viewGenreMenuItem;
     private MenuItem viewLanguageMenuItem;
     private MenuItem viewStatusMenuItem;
@@ -333,7 +336,8 @@
             
             //initFormatTab();
             //initMovieTab();
-            initImageTab();
+            //initImageTab();
+            initCustomerTab();
 
         } catch (Exception e) {
             e.printStackTrace();
@@ -439,8 +443,25 @@
 				cTabFolderMain.showSelection();				
             
             }
-        });         
+        });  
         
+        viewCustomerMenuItem = new MenuItem(viewMenu, SWT.CHECK);
+        viewCustomerMenuItem.setText(l.getString("menu.view.customer"));
+        viewCustomerMenuItem.setSelection(false);
+        viewCustomerMenuItem.addSelectionListener(new SelectionAdapter() {
+            public void widgetSelected(SelectionEvent evt) {
+				if(tabItemCustomer == null || tabItemCustomer.isDisposed()){
+				    initCustomerTab();
+				    return;   
+				}
+				
+				cTabFolderMain.setSelection(tabItemCustomer);
+				viewCustomerMenuItem.setSelection(true);
+				cTabFolderMain.showSelection();				
+            
+            }
+        });
+        
         viewGenreMenuItem = new MenuItem(viewMenu, SWT.CHECK);
         viewGenreMenuItem.setText(l.getString("menu.view.genre"));
         viewGenreMenuItem.setSelection(false);
@@ -650,7 +671,30 @@
         
     }
     
+    private void initCustomerTab() {
+        tabItemCustomer = new CTabItem(cTabFolderMain, SWT.NONE);        
+        tabItemCustomer.setText(l.getString("tab.customer.title"));
+        tabItemCustomer.addDisposeListener(new DisposeListener() {
+            public void widgetDisposed(DisposeEvent evt) {
+
+                if (!viewCustomerMenuItem.isDisposed()){
+                    viewCustomerMenuItem.setSelection(false);
+                }
+            }
+        });
+
+        {
+            compositeCustomer = new CompositeCustomer(
+                cTabFolderMain,
+                SWT.NONE, statusLine, locale);
+            
+            tabItemCustomer.setControl(compositeCustomer);
+        }
+        cTabFolderMain.setSelection(tabItemCustomer);
+        
+    }
     
+    
     private void initDirectorTab() {
         tabItemDirector = new CTabItem(cTabFolderMain, SWT.NONE);
         tabItemDirector.setText(l.getString("tab.director.title"));

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/main.properties
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/main.properties	2004-12-01 09:47:06 UTC (rev 185)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/main.properties	2004-12-01 10:23:57 UTC (rev 186)
@@ -15,6 +15,8 @@
 
 menu.view.director=Regie
 
+menu.view.customer=Kunden
+
 menu.view.payment=Preisklassen
 
 menu.view.genre=Genre
@@ -36,6 +38,7 @@
 
 tab.format.title=Video-/AudioFormate
 tab.actor.title=Darsteller
+tab.customer.title=Kunden
 tab.director.title=Regie
 tab.genre.title=Genre
 tab.language.title=Sprache/Untertitel

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Customer.hbm.xml
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Customer.hbm.xml	2004-12-01 09:47:06 UTC (rev 185)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Customer.hbm.xml	2004-12-01 10:23:57 UTC (rev 186)
@@ -23,7 +23,9 @@
  				<meta attribute="use-in-tostring">true</meta>
  			</timestamp>
  
- 			<one-to-one name="person" class="de.hsharz.provirent.objects.Person" cascade="all"/>
+	  <property name="person" type="int" not-null="true">
+		<meta attribute="use-in-tostring">true</meta>
+	  </property>
       
       <property name="userName" type="string" not-null="true">
       	<meta attribute="use-in-tostring">true</meta>

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Person.hbm.xml
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Person.hbm.xml	2004-12-01 09:47:06 UTC (rev 185)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Person.hbm.xml	2004-12-01 10:23:57 UTC (rev 186)
@@ -18,6 +18,10 @@
         <meta attribute="use-in-equals">true</meta>
         <generator class="native"/>
       </id>
+	  
+	  <one-to-one name="customer" cascade="all" constrained="true" foreign-key="">
+		
+	  </one-to-one>
  
  			
  

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java	2004-12-01 09:47:06 UTC (rev 185)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java	2004-12-01 10:23:57 UTC (rev 186)
@@ -54,6 +54,7 @@
 import de.hsharz.provirent.objects.Language;
 import de.hsharz.provirent.objects.Movie;
 import de.hsharz.provirent.objects.Payment;
+import de.hsharz.provirent.objects.Person;
 import de.hsharz.provirent.objects.Status;
 import de.hsharz.provirent.objects.Subtitle;
 import de.hsharz.provirent.objects.VideoFormat;
@@ -1626,14 +1627,14 @@
 	            Criteria criteria = s.createCriteria(Customer.class);
 	            //any of the criteria 
 	            Disjunction any = Expression.disjunction();
+	            //Disjunction any2 = Expression.disjunction();
 
-
 	            if (filter != null && !filter.equalsIgnoreCase("")) {
 	                any.add(Expression.like("userName", "%"+filter+"%"));
 	                any.add(Expression.like("dayOfRegistration", "%"+filter+"%"));
-	                any.add(Expression.like("duration2", "%"+filter+"%"));
-	                any.add(Expression.like("duration3", "%"+filter+"%"));
-	                any.add(Expression.like("startdate", "%"+filter+"%"));
+	                //any2.add(Expression.like("lastName", "%"+filter+"%"));
+	                //any2.add(Expression.like("firstName", "%"+filter+"%"));
+	                //any2.add(Expression.like("dayOfBirth", "%"+filter+"%"));
 	                //maybe we are searching for the id?
 	                try {
 	                    any.add(Expression.eq("CustomerId", new Integer(Integer.parseInt(filter))));
@@ -1643,11 +1644,14 @@
 	            }
 	            
 	            //add all criteria
+	            
 	            criteria.add(any);
+	            //criteria.createCriteria("person").add(any2);
+	            
 	            //get the results
 	            returnlist = criteria.list();
 	            
-	            
+	            logger.debug("Anzahl der Elemente in R?ckgabeliste: " + returnlist.size());
 	            int i = 0;
 	
 	
@@ -1784,7 +1788,7 @@
 	}
 	
 	
-	public static Movie getSingleMovie(final int id){
+	public static Movie getSingleMovie(final int id) {
 	    if (logger.isDebugEnabled()) {
 	        logger.debug("getSingleMovie() - start. int filter= "+id);
 	    }

Modified: project_src/provirent_hibernate/src/test/provirent/hibernate/TestCustomer.java
===================================================================
--- project_src/provirent_hibernate/src/test/provirent/hibernate/TestCustomer.java	2004-12-01 09:47:06 UTC (rev 185)
+++ project_src/provirent_hibernate/src/test/provirent/hibernate/TestCustomer.java	2004-12-01 10:23:57 UTC (rev 186)
@@ -176,7 +176,7 @@
                         "Select: Customer aus DB nicht gleich meiner. DB: "
                                 + dbc + " My:" + c, c, dbc); 
 
-                //Update
+                logger.debug("Customer: "+dbc+ "Person: "+dbc.getPerson());
 
                 //delete the object
                 s.delete(c);
@@ -357,6 +357,8 @@
                         }
                         return;
                     }
+                    logger.debug("Customer: "+dbc+" Person:"+dbc.getPerson());
+                    
                     Customer myc = (Customer)customer.get(i);
                     //are both equal?
                     assertEquals(

Modified: project_src/provirent_hibernate/src/test/provirent/hibernate/TestHibernate.java
===================================================================
--- project_src/provirent_hibernate/src/test/provirent/hibernate/TestHibernate.java	2004-12-01 09:47:06 UTC (rev 185)
+++ project_src/provirent_hibernate/src/test/provirent/hibernate/TestHibernate.java	2004-12-01 10:23:57 UTC (rev 186)
@@ -182,10 +182,10 @@
             s.save(l5);
             s.flush();
 
-            movie.setLanguages(new ArrayList());
-            movie.getLanguages().add(l1);
-            movie.getLanguages().add(l2);
             
+            
+            
+            
             Subtitle s1 = new Subtitle("Deutsch", "de");
             Subtitle s2 = new Subtitle("Englisch", "en");
             Subtitle s3 = new Subtitle("Franzoesisch", "fr");
@@ -198,9 +198,6 @@
             s.save(s5);
             s.flush();
 
-            movie.setSubtitles(new ArrayList());
-            movie.getSubtitles().add(s1);
-            movie.getSubtitles().add(s2);
             
             Genre g1 = new Genre("Action","");
             Genre g2 = new Genre("Abenteuer","");
@@ -223,17 +220,11 @@
             s.save(a4);
             s.flush();
              
-            movie.setAudioFormats(new ArrayList());
-            movie.getAudioFormats().add(a1);
-            movie.getAudioFormats().add(a4);
             
             VideoFormat v1 = new VideoFormat("2.35:1","");
             s.save(v1);
             s.flush();
           
-            movie.setVideoFormats(new ArrayList());
-            movie.getVideoFormats().add(v1);
-            
           
             s.save(movie);
 



From pschneider at sheep.berlios.de  Wed Dec  1 16:24:33 2004
From: pschneider at sheep.berlios.de (Philipp Schneider at BerliOS)
Date: Wed, 1 Dec 2004 16:24:33 +0100
Subject: [Provirent-svn-commit] r187 - in project_src/provirent_hibernate/src: de/hsharz/provirent/objects test/provirent/hibernate
Message-ID: <200412011524.iB1FOXam011967@sheep.berlios.de>

Author: pschneider
Date: 2004-12-01 16:24:32 +0100 (Wed, 01 Dec 2004)
New Revision: 187

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Customer.hbm.xml
   project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Person.hbm.xml
   project_src/provirent_hibernate/src/test/provirent/hibernate/TestCustomer.java
Log:
- Mapping von Person und Customer ver?\195?\164ndert
- Customer genau eine Person, bei loeschen von Customer wird auch Person geloescht
- Ant neu ausfuehren

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Customer.hbm.xml
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Customer.hbm.xml	2004-12-01 10:23:57 UTC (rev 186)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Customer.hbm.xml	2004-12-01 15:24:32 UTC (rev 187)
@@ -23,9 +23,8 @@
  				<meta attribute="use-in-tostring">true</meta>
  			</timestamp>
  
-	  <property name="person" type="int" not-null="true">
-		<meta attribute="use-in-tostring">true</meta>
-	  </property>
+	<many-to-one name="person" class="de.hsharz.provirent.objects.Person" column="person_id" unique="true" cascade="all"/>
+ 
       
       <property name="userName" type="string" not-null="true">
       	<meta attribute="use-in-tostring">true</meta>

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Person.hbm.xml
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Person.hbm.xml	2004-12-01 10:23:57 UTC (rev 186)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Person.hbm.xml	2004-12-01 15:24:32 UTC (rev 187)
@@ -19,9 +19,7 @@
         <generator class="native"/>
       </id>
 	  
-	  <one-to-one name="customer" cascade="all" constrained="true" foreign-key="">
-		
-	  </one-to-one>
+
  
  			
  

Modified: project_src/provirent_hibernate/src/test/provirent/hibernate/TestCustomer.java
===================================================================
--- project_src/provirent_hibernate/src/test/provirent/hibernate/TestCustomer.java	2004-12-01 10:23:57 UTC (rev 186)
+++ project_src/provirent_hibernate/src/test/provirent/hibernate/TestCustomer.java	2004-12-01 15:24:32 UTC (rev 187)
@@ -6,13 +6,18 @@
 import java.util.List;
 
 import junit.framework.TestCase;
+import net.sf.hibernate.Criteria;
 import net.sf.hibernate.Session;
 import net.sf.hibernate.Transaction;
+import net.sf.hibernate.expression.Disjunction;
+import net.sf.hibernate.expression.Expression;
 
 import org.apache.log4j.Logger;
 
 import de.hsharz.provirent.objects.Customer;
 import de.hsharz.provirent.objects.Person;
+import de.hsharz.provirent.objects.Subtitle;
+import de.hsharz.provirent.persistence.HibernateUtil;
 /*
  * Created on 09.10.2004
  *
@@ -96,6 +101,9 @@
     
 
     
+
+    
+    
     public void testCustomer() throws Exception{
         if (logger.isDebugEnabled()) {
             logger.debug("testCustomer() - start");
@@ -400,4 +408,37 @@
     
   
     
+    public void testSelectCustomer() throws Exception {
+        if (logger.isDebugEnabled()) {
+            logger.debug("testSelectCustomer() - start");
+        }
+
+	    Session s = HibernateUtil.currentSession();
+	
+	    
+        Criteria criteria = s.createCriteria(Customer.class);
+        List returnlist = criteria.list();
+	    
+        
+        for (int i = 0; i < returnlist.size(); i++) {
+            Customer customer = (Customer)returnlist.get(i);
+            assertNotNull("Customer "+i+" Objekt ist null",customer);
+            assertNotNull("Customer "+i+" Person ist null",customer.getPerson());
+            logger.debug("Customer "+i+": "+customer+" Person: "+customer.getPerson());
+            s.delete(customer);
+        }
+	    s.flush();
+	    returnlist = criteria.list();
+	    logger.debug("Anzahl Customer nach L?schen: "+returnlist.size());
+	    
+	    criteria = s.createCriteria(Person.class);
+	    returnlist = criteria.list();
+	    logger.debug("Anzahl Personen nach L?schen: "+returnlist.size());
+	    
+	
+        if (logger.isDebugEnabled()) {
+            logger.debug("testSelectCustomer() - end");
+        }
+    }
+    
 }



From sforstner at sheep.berlios.de  Wed Dec  1 19:28:32 2004
From: sforstner at sheep.berlios.de (Stefan at BerliOS)
Date: Wed, 1 Dec 2004 19:28:32 +0100
Subject: [Provirent-svn-commit] r188 - project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language
Message-ID: <200412011828.iB1ISWt9006742@sheep.berlios.de>

Author: sforstner
Date: 2004-12-01 19:28:31 +0100 (Wed, 01 Dec 2004)
New Revision: 188

Added:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/customer.properties
Log:
noch keine Werte d?\195?\188r die properties

Added: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/customer.properties
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/customer.properties	2004-12-01 15:24:32 UTC (rev 187)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/customer.properties	2004-12-01 18:28:31 UTC (rev 188)
@@ -0,0 +1,53 @@
+
+error=Fehler
+button.new=Neu
+button.edit=Bearbeiten
+button.delete=L?schen
+button.save=Speichern
+button.cancel=Abbruch
+
+Customer.group.label=Preisklassen
+Customer.groupoverview.label=?berblick
+Customer.groupoverview.columnid=Id
+Customer.groupoverview.columnusername=Name
+Customer.groupoverview.columnlastname=Nachname
+Customer.groupoverview.columnfirstname=Vorname
+Customer.groupoverview.columnbirthday=Geburtsdatum
+Customer.groupoverview.columnregdate=Registrierungsdatum
+
+Customer.groupoverview.searchlabel=Suche nach
+Customer.groupdetail.label=Detail
+Customer.groupdetail.idlabel=
+Customer.groupdetail.usernamelabel=
+Customer.groupdetail.lastnamelabel=
+Customer.groupdetail.firstnamelabel=
+Customer.groupdetail.middlenamelabel=
+Customer.groupdetail.emaillabel=
+Customer.groupdetail.birthdaylabel=
+Customer.groupdetail.questionlabel=
+Customer.groupdetail.answerlabel=
+Customer.groupdetail.salutationlabel=
+Customer.groupdetail.titlelabel=
+Customer.groupdetail.streetlabel=
+Customer.groupdetail.numberlabel=
+Customer.groupdetail.citylabel=
+Customer.groupdetail.zipcodelabel=
+Customer.groupdetail.countrylabel=
+Customer.groupdetail.passwordlabel=
+Customer.groupdetail.regdatelabel=
+Customer.groupdetail.registrationdatebuttonchange=?ndern
+Customer.groupdetail.registrationdatebuttonfinish=Fertig
+
+Customer.groupdetail.savebutton.warn.noname.title=Datensatz speichern
+Customer.groupdetail.savebutton.warn.noname.msg=Der Datensatz kann nicht gespeichert werden. \n Bitte geben Sie einen Namen an
+Customer.groupdetail.savebutton.newok=Speichern der neuen Preisklasse erfolgreich.
+Customer.groupdetail.savebutton.editok=?ndern der Preisklasse erfolgreich.
+
+Customer.groupdetail.savebutton.errorsave=Datenbankfehler beim Speichern.
+Customer.groupdetail.savebutton.errordb=Datenbankfehler beim Herstellen der Verbindung.(save).
+
+Customer.groupdetail.deletebutton.question.header=Wirklich l?schen?
+Customer.groupdetail.deletebutton.question.text=Wollen Sie den Datensatz {0} wirklich l?schen?
+Customer.groupdetail.deletebutton.newok=Datensatz wurde erfolgreich gel?scht.
+Customer.groupdetail.deletebutton.errorsave=Datenbankfehler beim L?schen.
+Customer.groupdetail.deletebutton.errordb=Datenbankfehler beim Herstellen der Verbindung(del).



From pschneider at sheep.berlios.de  Wed Dec  1 22:42:55 2004
From: pschneider at sheep.berlios.de (Philipp Schneider at BerliOS)
Date: Wed, 1 Dec 2004 22:42:55 +0100
Subject: [Provirent-svn-commit] r189 - project_src/provirent_hibernate/src/test/provirent/hibernate
Message-ID: <200412012142.iB1Lgtc8019123@sheep.berlios.de>

Author: pschneider
Date: 2004-12-01 22:42:53 +0100 (Wed, 01 Dec 2004)
New Revision: 189

Modified:
   project_src/provirent_hibernate/src/test/provirent/hibernate/TestMovie.java
Log:
- TestKlasse verbessert und aktualisiert

Modified: project_src/provirent_hibernate/src/test/provirent/hibernate/TestMovie.java
===================================================================
--- project_src/provirent_hibernate/src/test/provirent/hibernate/TestMovie.java	2004-12-01 18:28:31 UTC (rev 188)
+++ project_src/provirent_hibernate/src/test/provirent/hibernate/TestMovie.java	2004-12-01 21:42:53 UTC (rev 189)
@@ -270,7 +270,7 @@
                 assertTrue("Db Open? ", s.isOpen());
 
                 
-                
+                logger.debug("Erstelle Movie Objekt");
                 //create new movie objects
                 Movie movie = new Movie();
                 //set simple properties
@@ -280,8 +280,6 @@
                 movie.setRuntime(96);
                 movie.setTitle("The Forgotten");
                 movie.setReleaseDate(Calendar.getInstance());
-                movie.setImages(new ArrayList());
-                movie.setMainImage(new Image());                
                 
                 
                 //try to get Actors from db
@@ -291,9 +289,8 @@
                 
                 int anzahl =2;
                 List movieprops = new ArrayList();
-                random = new RandomRange(0,dbactors.size());
+                random = new RandomRange(0, (dbactors.size()-1) );
                 randomNum = random.getNumbers(anzahl);
-
                 for (int i = 0; i < anzahl; i++) {
                     Actor actor = (Actor)dbactors.get( ((Integer)randomNum.get(i)).intValue() );
                     movieprops.add(actor);
@@ -310,7 +307,7 @@
                 
                 anzahl =1;
                 movieprops = new ArrayList();
-                random = new RandomRange(0,dbprops.size());
+                random = new RandomRange(0,(dbprops.size()-1));
                 randomNum = random.getNumbers(anzahl);
 
                 for (int i = 0; i < anzahl; i++) {
@@ -326,7 +323,7 @@
                 
                 anzahl =1;
                 movieprops = new ArrayList();
-                random = new RandomRange(0,dbprops.size());
+                random = new RandomRange(0, (dbprops.size()-1) );
                 randomNum = random.getNumbers(anzahl);
 
                 for (int i = 0; i < anzahl; i++) {
@@ -335,6 +332,40 @@
                 }
                 movie.setGenres(movieprops);
                 
+                
+                //try to get Images from db
+                dbprops =  s.find("from Image as image");
+                assertNotNull("testCreateDBMovie(): Can't get Image from DB. Null", dbprops);
+                assertTrue("testCreateDBMovie(): Can not find Image in DB", dbprops.size() >0);
+
+                //set Mainimage
+                anzahl =1;
+                movieprops = new ArrayList();
+                random = new RandomRange(0, (dbprops.size()-1) );
+                randomNum = random.getNumbers(anzahl);
+
+                for (int i = 0; i < anzahl; i++) {
+                    Image prop = (Image)dbprops.get( ((Integer)randomNum.get(i)).intValue() );
+                    movie.setMainImage(prop);
+
+                }
+
+                //set images
+                anzahl =2;
+                movieprops = new ArrayList();
+                random = new RandomRange(0, (dbprops.size()-1) );
+                randomNum = random.getNumbers(anzahl);
+
+                for (int i = 0; i < anzahl; i++) {
+                    Image prop = (Image)dbprops.get( ((Integer)randomNum.get(i)).intValue() );
+                    movie.setMainImage(prop);
+
+                }
+                movie.setImages(movieprops);
+                
+
+                
+                
                 /*
                 //try to get Language from db
                 dbprops =  s.find("from Language as language");
@@ -403,28 +434,30 @@
                 movie.setVideoFormats(movieprops);
                 */
                 
+                logger.debug("Speichere Movie Objekt");
+                
                 int id = ((Integer)s.save(movie)).intValue();
                 s.flush();
+                logger.debug("Gespeichert unter id: "+id+" movieid:"+movie.getMovieId());
 
                 
                    
-                    //get Condition from Hibernate
-                    Movie dbc = (Movie) s.get(Movie.class, new Integer(id));
-                    assertNotNull("Can't get Movie" + id + " from DB", dbc);
-                    if (dbc == null) {
-                        if (logger.isDebugEnabled()) {
-                            logger.debug("testCreateCompleteNewMovie() Kein object mit id "
-                                    + id + "gefunden.");
-                        }
-                        return;
-                    }
-                    //are both equal?
-                    assertEquals(
-                            "Select: Customer aus DB nicht gleich meiner. DB: "
-                                    + dbc + " My:" + movie, movie, dbc); 
-                
+
+
                 tx.commit();
+
+                dbprops =  s.find("from Movie as Movie");
+                assertNotNull("testCreateDBMovie(): Can't get Movie from DB. Null", dbprops);
+                assertTrue("testCreateDBMovie(): Can not find Movie in DB", dbprops.size() >0);
                 
+                for (int i = 0; i < dbprops.size(); i++) {
+                    Movie m = (Movie)dbprops.get(i);
+                    logger.debug(i+" Movie:"+m + " Actors: "+m.getActors()+" Director: "+m.getDirector()+" Images: "+m.getImages()+ " Genre: "+m.getGenres());
+                }
+                
+                
+           
+                
             } catch (Exception e) {
                 if (tx != null) {
                     logger
@@ -463,4 +496,8 @@
         super(arg0);
     }
 
+    
+    
+    
+    
 }



From rgriesch at sheep.berlios.de  Wed Dec  1 22:53:03 2004
From: rgriesch at sheep.berlios.de (Remo Griesch at BerliOS)
Date: Wed, 1 Dec 2004 22:53:03 +0100
Subject: [Provirent-svn-commit] r190 - project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui
Message-ID: <200412012153.iB1Lr3k7021062@sheep.berlios.de>

Author: rgriesch
Date: 2004-12-01 22:53:02 +0100 (Wed, 01 Dec 2004)
New Revision: 190

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java
Log:
Composite Movie   - Funktionalit?\195?\164t erweitert
                  - L?\195?\182schen,Speichern funktioniert noch                     net
                 

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java	2004-12-01 21:42:53 UTC (rev 189)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java	2004-12-01 21:53:02 UTC (rev 190)
@@ -2,6 +2,7 @@
 
 import java.text.MessageFormat;
 import java.util.ArrayList;
+import java.util.GregorianCalendar;
 import java.util.Locale;
 import java.util.PropertyResourceBundle;
 import java.util.ResourceBundle;
@@ -23,7 +24,6 @@
 import org.eclipse.swt.widgets.Event;
 import org.eclipse.swt.widgets.Group;
 import org.eclipse.swt.widgets.Label;
-import org.eclipse.swt.widgets.List;
 import org.eclipse.swt.widgets.Listener;
 import org.eclipse.swt.widgets.Shell;
 import org.eclipse.swt.widgets.Table;
@@ -75,7 +75,6 @@
     private final static int MODE_EDIT = 2;
     
     private Table tableMoviesOverview;
-    private Table tableMoviesOverviewDetail;
     private Table tableMoviesDirectorsDetail;
     private Table tableMoviesActorsDetail;
     private Table tableMoviesGenresDetail;
@@ -84,13 +83,7 @@
     private TableColumn tableMoviesDetail_ColumnName;
     private TableColumn tableMoviesOverview_ColumnID;
     private TableColumn tableMoviesOverview_ColumnTitle;
-    private TableColumn tableMoviesOverview_ColumnSubtitles;
     private TableColumn tableMoviesOverview_ColumnDate;
-    private TableColumn tableMoviesOverviewDetail_ColumnGenres;
-    private TableColumn tableMoviesOverviewDetail_ColumnActors;
-    private TableColumn tableMoviesOverviewDetail_ColumnDirectors;   
-    private TableColumn tableMoviesOverviewDetail_ColumnDescription;
-    private TableColumn tableMoviesOverviewDetail_ColumnImages;
        
     private Group groupMovie;
     private Group groupMoviesOverview;
@@ -338,14 +331,6 @@
                     tableMoviesOverview_ColumnTitle.setWidth(120);
                 }
                 {
-                    tableMoviesOverview_ColumnSubtitles = new TableColumn(
-                        tableMoviesOverview,
-                        SWT.CENTER);
-                    tableMoviesOverview_ColumnSubtitles.setText(l
-                        .getString("movies.groupoverview.columnsubtitles"));
-                    tableMoviesOverview_ColumnSubtitles.setWidth(120);
-                }
-                {
                     tableMoviesOverview_ColumnDate = new TableColumn(
                         tableMoviesOverview,
                         SWT.CENTER);
@@ -354,104 +339,7 @@
                     tableMoviesOverview_ColumnDate.setWidth(120);
                 }
             }// table Movies Overview
-            //Table Movies Overview Detail
-            tableMoviesOverviewDetail = new Table(
-                    groupMoviesOverview,
-                    SWT.SINGLE
-                        | SWT.FULL_SELECTION
-                        | SWT.V_SCROLL | SWT.BORDER);
-                GridData tableMoviesOverviewLData = new GridData();
-                tableMoviesOverviewDetail.setHeaderVisible(true);
-                tableMoviesOverviewDetail.setLinesVisible(true);
-                tableMoviesOverviewLData.horizontalAlignment = GridData.FILL;
-                tableMoviesOverviewLData.verticalAlignment = GridData.FILL;
-                tableMoviesOverviewLData.horizontalSpan = 8;
-                tableMoviesOverviewLData.grabExcessHorizontalSpace = true;
-                tableMoviesOverviewLData.grabExcessVerticalSpace = true;
-                tableMoviesOverviewDetail.setLayoutData(tableMoviesOverviewLData);
-                tableMoviesOverviewDetail.addFocusListener(new FocusAdapter() {
-                        public void focusLost(FocusEvent evt) {
-                            System.out
-                                .println("tableMoviesOverviewDetail.focusLost, event="
-                                    + evt);
-                        }
-                        public void focusGained(FocusEvent evt) {
-                            System.out
-                                .println("tableMoviesOverviewDetail.focusGained, event="
-                                    + evt);
-                        }
-                    });
-                tableMoviesOverviewDetail.addSelectionListener(new SelectionAdapter() {
-                        public void widgetSelected(SelectionEvent evt) {
-                            if (logger.isDebugEnabled()) {
-                                logger
-                                    .debug("widgetSelected(SelectionEvent evt = "
-                                        + evt
-                                        + ") - start");
-                            }
-
-                            int index = tableMoviesOverview
-                                .getSelectionIndex();
-
-                            System.out.println("Table select. id: "
-                                + index
-                                + " TableItem:"
-                                + tableMoviesOverviewDetail.getItem(index)
-                                + " id: "
-                                + tableMoviesOverviewDetail.getItem(index)
-                                    .getText(0));
-
-                            //es wurde ein Element aus Tabelle ausgewaehlt jetzt muss die
-                            //Detailansicht aktualisiert werden
-                            //folgende Zeile nicht notwendig
-                            //refreshMoviesDetail(tableMoviesOverview.getItem(index).getText(0));
-
-                            if (logger.isDebugEnabled()) {
-                                logger
-                                    .debug("widgetSelected(SelectionEvent) - end");
-                            }
-                        }
-                    });
-                {
-                    tableMoviesOverviewDetail_ColumnDirectors = new TableColumn(
-                        tableMoviesOverviewDetail,
-                        SWT.CENTER);
-                    tableMoviesOverviewDetail_ColumnDirectors.setText(l
-                        .getString("movies.groupoverviewdetail.columndirectors"));
-                    tableMoviesOverviewDetail_ColumnDirectors.setWidth(80);
-                }
-                {
-                    tableMoviesOverviewDetail_ColumnGenres = new TableColumn(
-                        tableMoviesOverviewDetail,
-                        SWT.CENTER);
-                    tableMoviesOverviewDetail_ColumnGenres.setText(l
-                        .getString("movies.groupoverviewdetail.columngenres"));
-                    tableMoviesOverviewDetail_ColumnGenres.setWidth(80);
-                }
-                {
-                    tableMoviesOverviewDetail_ColumnActors = new TableColumn(
-                        tableMoviesOverviewDetail,
-                        SWT.CENTER);
-                    tableMoviesOverviewDetail_ColumnActors.setText(l
-                        .getString("movies.groupoverviewdetail.columnactors"));
-                    tableMoviesOverviewDetail_ColumnActors.setWidth(80);
-                }
-                {
-                    tableMoviesOverviewDetail_ColumnDescription = new TableColumn(
-                        tableMoviesOverviewDetail,
-                        SWT.CENTER);
-                    tableMoviesOverviewDetail_ColumnDescription.setText(l
-                        .getString("movies.groupoverviewdetail.columndescription"));
-                    tableMoviesOverviewDetail_ColumnDescription.setWidth(80);
-                }
-                {
-                    tableMoviesOverviewDetail_ColumnImages = new TableColumn(
-                        tableMoviesOverviewDetail,
-                        SWT.CENTER);
-                    tableMoviesOverviewDetail_ColumnImages.setText(l
-                        .getString("movies.groupoverviewdetail.columnimages"));
-                    tableMoviesOverviewDetail_ColumnImages.setWidth(80);
-                }
+           
             // Search
             {
                 //label for Search
@@ -647,6 +535,7 @@
         	    buttonMoviesAddDirectors.setLayoutData(text1LData2);        
         	    buttonMoviesAddDirectors.addSelectionListener(new SelectionAdapter() {
         	        public void widgetSelected(SelectionEvent evt) {
+        	            //open responsible Dialog and insert objects into table
         	            DialogMovie dialog = new DialogMovie(getShell(),0,locale,movie,DialogMovie.TYPE_DIRECTOR);
         	            dialog.open();
                     
@@ -655,7 +544,8 @@
         	            for(int i =0; i< movie.getDirector().size(); i++){
         	                item = new TableItem(tableMoviesDirectorsDetail, SWT.NONE);
         	                item.setText(new String[] { ((Director)movie.getDirector().get(i)).getDirectorId()+ ""
-        	                        ,((Director)movie.getDirector().get(i)).getLastName() + ""});
+        	                        ,((Director)movie.getDirector().get(i)).getLastName() + " , "
+        	                        + ((Director)movie.getDirector().get(i)).getFirstName()});
         	            }                    
         	            
         	        }
@@ -673,16 +563,31 @@
         	    buttonMoviesDeleteDirectors.setLayoutData(text1LData2);        
         	    buttonMoviesDeleteDirectors.addSelectionListener(new SelectionAdapter() {
         	        public void widgetSelected(SelectionEvent evt) {
-        	            // TODO
-                    
+        	            //get selected Item
+        	            //get id from object 
+        	            //search for id in list and delete object
+        	            //remove table entry
+        	            int index=tableMoviesDirectorsDetail.getSelectionIndex();
+        	            if(index>=0)  {
+        	                String strid=tableMoviesDirectorsDetail.getItem(index).getText(0);
+        	                int id = Integer.parseInt(strid);
+        	                for (int i=0;i<movie.getDirector().size();i++)  {
+        	                    Director o =(Director)movie.getDirector().get(i);    
+        	                    if (o.getDirectorId().intValue()==id) {
+        	                        movie.getDirector().remove(o);
+        	                        break;
+        	                    }
+        	                }
+        	                tableMoviesDirectorsDetail.remove(index);
+        	            }
         	        }
         	    });  
         	}
         {
             tableMoviesDirectorsDetail = new Table(groupMoviesDetail,SWT.SINGLE
-                    | SWT.V_SCROLL | SWT.BORDER);
-            tableMoviesDirectorsDetail.setHeaderVisible(true);
-            tableMoviesDirectorsDetail.setLinesVisible(true);
+                    | SWT.FULL_SELECTION | SWT.V_SCROLL | SWT.BORDER);
+            //tableMoviesDirectorsDetail.setHeaderVisible(true);
+            //tableMoviesDirectorsDetail.setLinesVisible(true);
             GridData tableMoviesDirectorsDetailLData = new GridData();
             tableMoviesDirectorsDetailLData.horizontalAlignment = GridData.FILL;
             tableMoviesDirectorsDetailLData.horizontalSpan = 5;
@@ -700,7 +605,7 @@
             {
                 tableMoviesDetail_ColumnName = new TableColumn(
                         tableMoviesDirectorsDetail,
-                     SWT.CENTER);              
+                        SWT.LEFT);              
                 tableMoviesDetail_ColumnName.setText(
                         l.getString("movies.groupoverviewdetail.columndirectors"));
                 tableMoviesDetail_ColumnName.setWidth(200);            
@@ -739,6 +644,7 @@
         	    buttonMoviesAddActors.setLayoutData(text1LData2);        
         	    buttonMoviesAddActors.addSelectionListener(new SelectionAdapter() {
         	        public void widgetSelected(SelectionEvent evt) {
+        	            //open responsible Dialog and insert objects into table
         	            DialogMovie dialog = new DialogMovie(getShell(),0,locale,movie,DialogMovie.TYPE_ACTOR);
         	            dialog.open();
 
@@ -764,8 +670,23 @@
         	    buttonMoviesDeleteActors.setLayoutData(text1LData2);        
         	    buttonMoviesDeleteActors.addSelectionListener(new SelectionAdapter() {
         	        public void widgetSelected(SelectionEvent evt) {
-        	            // TODO
-                    
+        	            //get selected Item
+        	            //get id from object 
+        	            //search for id in list and delete object
+        	            //remove table entry
+        	            int index=tableMoviesActorsDetail.getSelectionIndex();
+        	            if(index>=0)  {
+        	                String strid=tableMoviesActorsDetail.getItem(index).getText(0);
+        	                int id = Integer.parseInt(strid);
+        	                for (int i=0;i<movie.getActors().size();i++)  {
+        	                    Actor o =(Actor)movie.getActors().get(i);    
+        	                    if (o.getActorId().intValue()==id) {
+        	                        movie.getActors().remove(o);
+        	                        break;
+        	                    }
+        	                }
+        	                tableMoviesActorsDetail.remove(index);
+        	            }
         	        }
         	    });  
         	}
@@ -829,6 +750,7 @@
         	    buttonMoviesAddGenres.setLayoutData(text1LData2);        
         	    buttonMoviesAddGenres.addSelectionListener(new SelectionAdapter() {
         	        public void widgetSelected(SelectionEvent evt) {
+        	            //open responsible Dialog and insert objects into table
         	            DialogMovie dialog = new DialogMovie(getShell(),0,locale,movie,DialogMovie.TYPE_GENRE);
         	            dialog.open();
 
@@ -854,16 +776,31 @@
         	    buttonMoviesDeleteGenres.setLayoutData(text1LData2);        
         	    buttonMoviesDeleteGenres.addSelectionListener(new SelectionAdapter() {
         	        public void widgetSelected(SelectionEvent evt) {
-        	            // TODO
-                    
+        	            //get selected Item
+        	            //get id from object 
+        	            //search for id in list and delete object
+        	            //remove table entry
+        	            int index=tableMoviesGenresDetail.getSelectionIndex();
+        	            if(index>=0)  {
+        	                String strid=tableMoviesGenresDetail.getItem(index).getText(0);
+        	                int id = Integer.parseInt(strid);
+        	                for (int i=0;i<movie.getGenres().size();i++)  {
+        	                    Genre o =(Genre)movie.getGenres().get(i);    
+        	                    if (o.getGenreId().intValue()==id) {
+        	                        movie.getGenres().remove(o);
+        	                        break;
+        	                    }
+        	                }
+        	                tableMoviesGenresDetail.remove(index);
+        	            }
         	        }
         	    });  
         	}
         	{
                 tableMoviesGenresDetail = new Table(groupMoviesDetail,SWT.SINGLE
-                        | SWT.V_SCROLL | SWT.BORDER);
-                tableMoviesGenresDetail.setHeaderVisible(true);
-                tableMoviesGenresDetail.setLinesVisible(true);
+                        | SWT.FULL_SELECTION | SWT.V_SCROLL | SWT.BORDER);
+                //tableMoviesGenresDetail.setHeaderVisible(true);
+                //tableMoviesGenresDetail.setLinesVisible(true);
                 GridData tableMoviesGenresDetailLData = new GridData();
                 tableMoviesGenresDetailLData.horizontalAlignment = GridData.FILL;
                 tableMoviesGenresDetailLData.horizontalSpan = 5;
@@ -881,7 +818,7 @@
                 {
                     tableMoviesDetail_ColumnName = new TableColumn(
                             tableMoviesGenresDetail,
-                         SWT.CENTER);              
+                            SWT.LEFT);              
                     tableMoviesDetail_ColumnName.setText(
                             l.getString("movies.groupoverviewdetail.columngenres"));
                     tableMoviesDetail_ColumnName.setWidth(200);            
@@ -920,6 +857,7 @@
         	    buttonMoviesAddImages.setLayoutData(text1LData2);        
         	    buttonMoviesAddImages.addSelectionListener(new SelectionAdapter() {
         	        public void widgetSelected(SelectionEvent evt) {
+        	            //open responsible Dialog and insert objects into table
         	            DialogMovie dialog = new DialogMovie(getShell(),0,locale,movie,DialogMovie.TYPE_IMAGE);
         	            dialog.open();
 
@@ -945,23 +883,38 @@
         	    buttonMoviesDeleteImages.setLayoutData(text1LData2);        
         	    buttonMoviesDeleteImages.addSelectionListener(new SelectionAdapter() {
         	        public void widgetSelected(SelectionEvent evt) {
-        	            // TODO
+        	            //get selected Item
+        	            //get id from object 
+        	            //search for id in list and delete object
+        	            //remove table entry
+        	            int index=tableMoviesImagesDetail.getSelectionIndex();
+        	            if(index>=0)  {
+        	                String strid=tableMoviesImagesDetail.getItem(index).getText(0);
+        	                int id = Integer.parseInt(strid);
+        	                for (int i=0;i<movie.getImages().size();i++)  {
+        	                    Image o =(Image)movie.getImages().get(i);    
+        	                    if (o.getImageId().intValue()==id) {
+        	                        movie.getImages().remove(o);
+        	                        break;
+        	                    }
+        	                }
+        	                tableMoviesImagesDetail.remove(index);
+        	            }
                     
         	        }
         	    });  
         	}
         	{
                 tableMoviesImagesDetail = new Table(groupMoviesDetail,SWT.SINGLE
-                        | SWT.V_SCROLL | SWT.BORDER);
-                tableMoviesImagesDetail.setHeaderVisible(true);
-                tableMoviesImagesDetail.setLinesVisible(true);
+                        | SWT.FULL_SELECTION | SWT.V_SCROLL | SWT.BORDER);
+                //tableMoviesImagesDetail.setHeaderVisible(true);
+                //tableMoviesImagesDetail.setLinesVisible(true);
                 GridData tableMoviesImagesDetailLData = new GridData();
                 tableMoviesImagesDetailLData.horizontalAlignment = GridData.FILL;
                 tableMoviesImagesDetailLData.horizontalSpan = 5;
                 tableMoviesImagesDetailLData.grabExcessVerticalSpace = true;
                 tableMoviesImagesDetailLData.verticalAlignment = GridData.FILL;
-                tableMoviesImagesDetail.setLayoutData(tableMoviesImagesDetailLData);
-                
+                tableMoviesImagesDetail.setLayoutData(tableMoviesImagesDetailLData);               
                 {
                     tableMoviesDetail_ColumnID = new TableColumn(
                             tableMoviesImagesDetail,
@@ -972,7 +925,7 @@
                 {
                     tableMoviesDetail_ColumnName = new TableColumn(
                             tableMoviesImagesDetail,
-                         SWT.CENTER);              
+                            SWT.LEFT);              
                     tableMoviesDetail_ColumnName.setText(
                             l.getString("movies.groupoverviewdetail.columnimages"));
                     tableMoviesDetail_ColumnName.setWidth(200);            
@@ -1051,16 +1004,28 @@
                 textMoviesTitle.setEditable(true);
                 textMoviesTitle.setFocus();
                 textMoviesDate.setEditable(true);
+                textMoviesDescription.setEditable(true);
                 
                 buttonMoviesCancel.setEnabled(true);
                 buttonMoviesSave.setEnabled(true);
                 buttonMoviesNew.setEnabled(false);
                 buttonMoviesEdit.setEnabled(false);
                 buttonMoviesDelete.setEnabled(false);
-
+                buttonMoviesAddDirectors.setEnabled(true);
+                buttonMoviesDeleteDirectors.setEnabled(true);
+                buttonMoviesAddActors.setEnabled(true);
+                buttonMoviesDeleteActors.setEnabled(true);
+                buttonMoviesAddGenres.setEnabled(true);
+                buttonMoviesDeleteGenres.setEnabled(true);
+                buttonMoviesAddImages.setEnabled(true);
+                buttonMoviesDeleteImages.setEnabled(true);
+                
                 tableMoviesOverview.setEnabled(false);
                 textMoviesSearch.setEnabled(false);
                 
+                java.util.List Movielist = Database.getMovie(textMoviesID.getText());
+                //only one element because of ID
+                movie = (Movie)Movielist.get(0);
             }
         });
 
@@ -1088,17 +1053,11 @@
                    return;
                }
                 
-                Movie o = new Movie();
-                o.setMovieId(new Integer(Integer.parseInt(textMoviesID.getText())));
-                o.setTitle(textMoviesTitle.getText());
-                //TODO
-                //entsprechendes Objekt erzeugen
-                //o.setReleaseDate(textMoviesDate.getText());
                 
                 try {
                     //object speichern
                     // Fehlerbehandlung
-                    Database.deleteObject(o);
+                    Database.deleteObject(movie);
 
                     //?bersichtsTabelle aktualisieren
                     refreshMoviesOverviewTable(textMoviesSearch.getText());
@@ -1107,7 +1066,6 @@
                     textMoviesID.setText("");
                     textMoviesTitle.setText("");
                     textMoviesDate.setText("");
-                    tableMoviesOverviewDetail.removeAll();
                     //in Tabelle n?chsten ausw?hlen
                     try {
                         tableMoviesOverview.select(0);
@@ -1140,8 +1098,7 @@
 
                 }
 
-            }
-    	    );
+            });
 
     	    //leerer nicht sichtbarer Button
     	    buttonMoviesFill = new Button(compositeButtons, SWT.PUSH | SWT.CENTER);
@@ -1161,62 +1118,59 @@
                         .println("buttonMoviesSave.widgetSelected, event="
                                 + evt);
 
-                
-                //testen ob Name leer ist
-                //TODO
-                //komplette Speichervorgan muss erweitert werden da
-                //Ausma? von Film gr??er als bei anderen Composite
-                /*
-                if (textActorsFName.getText().trim().equalsIgnoreCase("") 
-                    ||  textActorsLName.getText().trim().equalsIgnoreCase("")   ) {
+                if (textMoviesTitle.getText().trim().equalsIgnoreCase("") 
+                    ||  textMoviesDescription.getText().trim().equalsIgnoreCase("")
+                    ||  textMoviesDate.getText().trim().equalsIgnoreCase("")
+                    ||  movie.getDirector().size() == 0
+                    ||  movie.getActors().size() == 0
+                    ||  movie.getGenres().size() == 0
+                    ||  movie.getImages().size() == 0) {
                     
-                    showMsg(l.getString("actors.groupdetail.savebutton.warn.noname.msg"),
-                            l.getString("actors.groupdetail.savebutton.warn.noname.title"),
+                    showMsg(l.getString("movies.groupdetail.savebutton.warn.noname.msg"),
+                            l.getString("movies.groupdetail.savebutton.warn.noname.title"),
                             SWT.ICON_WARNING | SWT.YES);
 
                     	return;
                 }
                 
                 //testen welcher mode
-                
-                if (mode_actor == ManagementGui.MODE_ADD) {
-                */    
+                if(mode_movie == ManagementGui.MODE_ADD)  {
+                    movie.setTitle(textMoviesTitle.getText());
+                    movie.setDescription(textMoviesDescription.getText());
+                    movie.setReleaseDate(new GregorianCalendar());
+                }
                     /**
                      * @todo eine Exception bekommen wieder leider NOCH nicht mit
                      * d.h. es muss noch ein r?ckgabewert kommen oder eine Exception 
                      * ?bermitteln werden (aus der DB Klasse)
                      */
                     //neues Objekt erzeugen
-                /*
-                	Actor tmp = new Actor(textActorsFName.getText(),
-                            textActorsLName.getText());
+                
                     
                     try {
                         //object speichern
                         // Fehlerbehandlung
-                        Object o = Database.saveObject(
-                                new Actor(textActorsFName.getText(),
-                                        textActorsLName.getText()));
+                        Object o = Database.saveObject(movie);
                         
                         // in ?bersichtstabelle einf?gen
-                        insertIntoActorsOverviewTable((Actor)o);
-                        textActorsID.setText( ((Actor)o).getActorId()+"" );
+                        insertIntoMoviesOverviewTable((Movie)o);
+                        textMoviesID.setText( ((Movie)o).getMovieId()+"" );
                         
                         
                         //Statusline Nachricht sezten
-                        statusLine.setStatus(1,l.getString("actors.groupdetail.savebutton.newok"));
+                        statusLine.setStatus(1,l.getString("movies.groupdetail.savebutton.newok"));
 
                     } catch (DataBaseException e) {
                         if (e.getMessage().equalsIgnoreCase("1")) {
                             //Fehler beim Speichern des Objectes
 
-                            statusLine.setStatus(3,l.getString("actors.groupdetail.savebutton.errorsave"));
-                            showMsg(l.getString("actors.groupdetail.savebutton.errorsave"),"Fehler", SWT.ICON_ERROR | SWT.OK);
+                            statusLine.setStatus(3,l.getString("movies.groupdetail.savebutton.errorsave"));
+                            showMsg(l.getString("movies.groupdetail.savebutton.errorsave"),"Fehler", SWT.ICON_ERROR | SWT.OK);
                             
                         } else if (e.getMessage().equalsIgnoreCase("2")) {
                             //fehler beim db aufbau
-                            statusLine.setStatus(3,l.getString("actors.groupdetail.savebutton.errordb"));
-                            showMsg(l.getString("actors.groupdetail.savebutton.errordb"),"Fehler", SWT.ICON_ERROR | SWT.OK);
+                            statusLine.setStatus(3,l.getString("movies.groupdetail.savebutton.errordb"));
+                            showMsg(l.getString("movies.groupdetail.savebutton.errordb"),"Fehler", SWT.ICON_ERROR | SWT.OK);
                             
                         } else {
                             //@todo
@@ -1226,56 +1180,11 @@
                     }
                     
                     
-                    //alle Buttons auf aktiv setzen
-                    setActorsGroupButtonSaveCancel();
+                    //activate buttons
+                    setMoviesGroupButtonSaveCancel();
                     
-                } else if (mode_actor == ManagementGui.MODE_EDIT) {
-                    
-                    Actor tmp = new Actor(textActorsFName.getText(),
-                                    textActorsLName.getText());
-        		tmp.setActorId( new Integer (Integer.parseInt(textActorsID.getText())) );
-                try {
-                    //object speichern
-                    // Fehlerbehandlung
-                    Database.saveObject(tmp);
-                    //?bersichtstabelle aktualisieren
-                    refreshActorsOverviewTable(textActorsSearch.getText());
-                    
-                    //Statusline Nachricht sezten
-                    statusLine.setStatus(1,l.getString("actors.groupdetail.savebutton.editok"));
-                   
-
-                } catch (DataBaseException e) {
-                    if (e.getMessage().equalsIgnoreCase("1")) {
-                        //Fehler beim Speichern des Objectes
-
-                        statusLine.setStatus(3,l.getString("actors.groupdetail.savebutton.errorsave"));
-                        showMsg(l.getString("actors.groupdetail.savebutton.errorsave"),"Fehler", SWT.ICON_ERROR | SWT.OK);
-                        
-                    } else if (e.getMessage().equalsIgnoreCase("2")) {
-                        //fehler beim db aufbau
-                        statusLine.setStatus(3,l.getString("actors.groupdetail.savebutton.errordb"));
-                        showMsg(l.getString("actors.groupdetail.savebutton.errordb"),"Fehler", SWT.ICON_ERROR | SWT.OK);
-                        
-                    } else {
-                        //@todo
-                        e.printStackTrace();
-                    }
-                    
-                }
-                    
- 
-                    //alle Buttons auf aktiv setzen
-                    setActorsGroupButtonSaveCancel();
-                    
-                }
-                
-                
-                
-                
-                 // @todo Exception werfen, da nur die zwei Modes sein d?rfen
-                 
-            */   
+                    //Execption because only 2 modes posiibel
+              
             }
         
         });
@@ -1296,6 +1205,14 @@
   }
 
     /**
+     * @param movie2
+     */
+    protected void insertIntoMoviesOverviewTable(Movie movie2) {
+        // TODO Auto-generated method stub
+        
+    }
+
+    /**
      * 
      */
     protected void setMoviesGroupButtonSaveCancel() {
@@ -1303,6 +1220,7 @@
         textMoviesTitle.setEditable(false);
         textMoviesDate.setEditable(false);
         textMoviesDescription.setEditable(false);
+        textMoviesSearch.setEnabled(true);
         buttonMoviesCancel.setEnabled(false);
         buttonMoviesSave.setEnabled(false);
         buttonMoviesNew.setEnabled(true);
@@ -1321,9 +1239,27 @@
     /**
      * @param text
      */
-    protected void refreshMoviesOverviewTable(String text) {
+    protected void refreshMoviesOverviewTable(String filter) {
         // TODO Auto-generated method stub
-        
+        if (tableMoviesOverview == null) {
+            System.out
+                    .println("Konnte MoviesOverviewtable nicht refreshen, da diese null ist!");
+            return;
+        }
+        System.out.println("Versuche nun MoviesOverviewtable zu refreshen. Filter: "
+                + filter);
+        tableMoviesOverview.removeAll();
+        TableItem item;
+        java.util.List Movielist = Database.getMovie(filter);
+
+        for (int i = 0; i < Movielist.size(); i++) {
+
+            Movie o = (Movie) Movielist.get(i);
+            item = new TableItem(tableMoviesOverview, SWT.NONE);
+            item.setText(new String[] { o.getMovieId() + "", o.getTitle(),
+                    o.getReleaseDate().getTime().toString() });
+
+        }
     }
 
     /**
@@ -1353,15 +1289,47 @@
 
         textMoviesID.setText(object.getMovieId() + "");
         textMoviesTitle.setText(object.getTitle());
-        textMoviesDate.setText(object.getReleaseDate().toString());
+        textMoviesDate.setText(object.getReleaseDate().getTime().toString());
         textMoviesDescription.setText(object.getDescription());
-        //listMoviesImages.
-
-        //Buttons zum l?schen und editieren aktivieren
+        
+        TableItem item;
+        // Fill Directorstable
+        for (int i=0;i<object.getDirector().size();i++)  {
+            Director o=(Director)object.getDirector().get(i);
+            item = new TableItem(tableMoviesDirectorsDetail , SWT.NONE);
+            item.setText(new String[] {o.getDirectorId() 
+                    + " ",o.getLastName() + " , " + o.getFirstName()});
+        }
+        
+        //Fill Actorstable
+        for (int i=0;i<object.getActors().size();i++)  {
+            Actor o=(Actor)object.getActors().get(i);
+            item = new TableItem(tableMoviesActorsDetail , SWT.NONE);
+            item.setText(new String[] {o.getActorId() 
+                    + " ",o.getLastName() + " , " + o.getFirstName()});
+        }
+        
+        //Fill Genretable
+        for (int i=0;i<object.getGenres().size();i++)  {
+            Genre o=(Genre)object.getGenres().get(i);
+            item = new TableItem(tableMoviesGenresDetail , SWT.NONE);
+            item.setText(new String[] {o.getGenreId() 
+                    + " ",o.getName()});
+        }
+        
+        //Fill Imagetable
+        for (int i=0;i<object.getImages().size();i++)  {
+            Image o=(Image)object.getImages().get(i);
+            item = new TableItem(tableMoviesImagesDetail , SWT.NONE);
+            item.setText(new String[] {o.getImageId() 
+                    + " ",o.getImageFileName()});
+        }
+        
+        //Enable Buttons for Delete and Edit
         buttonMoviesEdit.setEnabled(true);
         buttonMoviesDelete.setEnabled(true);
 
-        //Mode auf view setzen
+        //Change mode to view
         mode_movie = ManagementGui.MODE_VIEW;
           
     }



From pschneider at sheep.berlios.de  Wed Dec  1 23:25:28 2004
From: pschneider at sheep.berlios.de (Philipp Schneider at BerliOS)
Date: Wed, 1 Dec 2004 23:25:28 +0100
Subject: [Provirent-svn-commit] r191 - in project_src/provirent_hibernate/src: de/hsharz/provirent/management/gui test/provirent/hibernate
Message-ID: <200412012225.iB1MPSGY022087@sheep.berlios.de>

Author: pschneider
Date: 2004-12-01 23:25:27 +0100 (Wed, 01 Dec 2004)
New Revision: 191

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java
   project_src/provirent_hibernate/src/test/provirent/hibernate/TestImage.java
   project_src/provirent_hibernate/src/test/provirent/hibernate/TestMovie.java
Log:


Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java	2004-12-01 21:53:02 UTC (rev 190)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java	2004-12-01 22:25:27 UTC (rev 191)
@@ -1286,7 +1286,7 @@
             //id ist keine Zahl
             return;
         }
-
+        movie = object;
         textMoviesID.setText(object.getMovieId() + "");
         textMoviesTitle.setText(object.getTitle());
         textMoviesDate.setText(object.getReleaseDate().getTime().toString());
@@ -1294,6 +1294,7 @@
         
         TableItem item;
         // Fill Directorstable
+        tableMoviesDirectorsDetail.removeAll();
         for (int i=0;i<object.getDirector().size();i++)  {
             Director o=(Director)object.getDirector().get(i);
             item = new TableItem(tableMoviesDirectorsDetail , SWT.NONE);
@@ -1302,6 +1303,7 @@
         }
         
         //Fill Actorstable
+        tableMoviesActorsDetail.removeAll();
         for (int i=0;i<object.getActors().size();i++)  {
             Actor o=(Actor)object.getActors().get(i);
             item = new TableItem(tableMoviesActorsDetail , SWT.NONE);
@@ -1310,7 +1312,12 @@
         }
         
         //Fill Genretable
-        for (int i=0;i<object.getGenres().size();i++)  {
+        tableMoviesGenresDetail.removeAll();
+        logger.debug("Anzahl der Genres: "+object.getGenres().size());
+        TableItem testitem = new TableItem(tableMoviesGenresDetail , SWT.NONE);
+        testitem.setText(new String[] {"0","Hallo"});
+        
+        for (int i=0; i<object.getGenres().size();i++ )  {
             Genre o=(Genre)object.getGenres().get(i);
             item = new TableItem(tableMoviesGenresDetail , SWT.NONE);
             item.setText(new String[] {o.getGenreId() 
@@ -1318,6 +1325,8 @@
         }
         
         //Fill Imagetable
+        tableMoviesGenresDetail.removeAll();
+        logger.debug("Anzahl der Bilder: "+object.getImages().size());
         for (int i=0;i<object.getImages().size();i++)  {
             Image o=(Image)object.getImages().get(i);
             item = new TableItem(tableMoviesImagesDetail , SWT.NONE);

Modified: project_src/provirent_hibernate/src/test/provirent/hibernate/TestImage.java
===================================================================
--- project_src/provirent_hibernate/src/test/provirent/hibernate/TestImage.java	2004-12-01 21:53:02 UTC (rev 190)
+++ project_src/provirent_hibernate/src/test/provirent/hibernate/TestImage.java	2004-12-01 22:25:27 UTC (rev 191)
@@ -91,6 +91,7 @@
         if (logger.isDebugEnabled()) {
             logger.debug("testCreating() - start");
         }
+        /*
 
         //get new Session and begin Transaction
         Session s = HibernateUtil.currentSession();
@@ -214,6 +215,7 @@
             // No matter what, close the session
             HibernateUtil.closeSession();
         }
+        */
 
         if (logger.isDebugEnabled()) {
             logger.debug("testCreating() - end");

Modified: project_src/provirent_hibernate/src/test/provirent/hibernate/TestMovie.java
===================================================================
--- project_src/provirent_hibernate/src/test/provirent/hibernate/TestMovie.java	2004-12-01 21:53:02 UTC (rev 190)
+++ project_src/provirent_hibernate/src/test/provirent/hibernate/TestMovie.java	2004-12-01 22:25:27 UTC (rev 191)
@@ -88,7 +88,7 @@
         if (logger.isDebugEnabled()) {
             logger.debug("testCreateCompleteNewMovie() - start");
         }
-
+/*
         //get new Session and begin Transaction
         Session s = HibernateUtil.currentSession();
         Transaction tx = null;
@@ -142,7 +142,7 @@
                     s.save( iter.next() );
                 }
                 movie.setGenres(objects);
-              /*  
+              
                 objects = new ArrayList();
                 objects.add(new Language("Deutsch","de"));
                 objects.add(new Language("Englisch","en"));
@@ -175,7 +175,7 @@
                     s.save( iter.next() );
                 }
                 movie.setVideoFormats(new ArrayList());
-                */
+                
                 //add movie to movie List
                 movies.add(movie);
 
@@ -236,8 +236,8 @@
             HibernateUtil.closeSession();
         }
         
+        */
         
-        
         if (logger.isDebugEnabled()) {
             logger.debug("testCreateCompleteNewMovie() - end");
         }
@@ -283,16 +283,16 @@
                 
                 
                 //try to get Actors from db
-                List  dbactors =  s.find("from Actor as actor");
-                assertNotNull("testCreateDBMovie(): Can't get Actors from DB. Null", dbactors);
-                assertTrue("testCreateDBMovie(): Can not find Actors in DB", dbactors.size() >0);
+                List  dbprops =  s.find("from Actor as actor");
+                assertNotNull("testCreateDBMovie(): Can't get Actors from DB. Null", dbprops);
+                assertTrue("testCreateDBMovie(): Can not find Actors in DB", dbprops.size() >0);
                 
                 int anzahl =2;
                 List movieprops = new ArrayList();
-                random = new RandomRange(0, (dbactors.size()-1) );
+                random = new RandomRange(0, (dbprops.size()-1) );
                 randomNum = random.getNumbers(anzahl);
                 for (int i = 0; i < anzahl; i++) {
-                    Actor actor = (Actor)dbactors.get( ((Integer)randomNum.get(i)).intValue() );
+                    Actor actor = (Actor)dbprops.get( ((Integer)randomNum.get(i)).intValue() );
                     movieprops.add(actor);
                 }
                 movie.setActors(movieprops);
@@ -301,7 +301,7 @@
                 List objects = new ArrayList();
 
                 //try to get Directors from db
-                List  dbprops =  s.find("from Director as director");
+                dbprops =  s.find("from Director as director");
                 assertNotNull("testCreateDBMovie(): Can't get Directors from DB. Null", dbprops);
                 assertTrue("testCreateDBMovie(): Can not find Directors in DB", dbprops.size() >0);
                 
@@ -321,7 +321,9 @@
                 assertNotNull("testCreateDBMovie(): Can't get Genre from DB. Null", dbprops);
                 assertTrue("testCreateDBMovie(): Can not find Genre in DB", dbprops.size() >0);
                 
-                anzahl =1;
+                logger.debug("Anzahl Genres: "+dbprops.size());
+                
+                anzahl =3;
                 movieprops = new ArrayList();
                 random = new RandomRange(0, (dbprops.size()-1) );
                 randomNum = random.getNumbers(anzahl);
@@ -338,6 +340,7 @@
                 assertNotNull("testCreateDBMovie(): Can't get Image from DB. Null", dbprops);
                 assertTrue("testCreateDBMovie(): Can not find Image in DB", dbprops.size() >0);
 
+                logger.debug("Anzahl Bilder: "+dbprops.size());
                 //set Mainimage
                 anzahl =1;
                 movieprops = new ArrayList();
@@ -351,14 +354,14 @@
                 }
 
                 //set images
-                anzahl =2;
+                anzahl =3;
                 movieprops = new ArrayList();
                 random = new RandomRange(0, (dbprops.size()-1) );
                 randomNum = random.getNumbers(anzahl);
 
                 for (int i = 0; i < anzahl; i++) {
                     Image prop = (Image)dbprops.get( ((Integer)randomNum.get(i)).intValue() );
-                    movie.setMainImage(prop);
+                    movieprops.add(prop);
 
                 }
                 movie.setImages(movieprops);



From sforstner at sheep.berlios.de  Thu Dec  2 00:02:26 2004
From: sforstner at sheep.berlios.de (Stefan at BerliOS)
Date: Thu, 2 Dec 2004 00:02:26 +0100
Subject: [Provirent-svn-commit] r192 - in project_src/provirent_hibernate/src: de/hsharz/provirent/management/gui de/hsharz/provirent/management/gui/language de/hsharz/provirent/objects test/provirent/hibernate
Message-ID: <200412012302.iB1N2Q8x023752@sheep.berlios.de>

Author: sforstner
Date: 2004-12-02 00:02:25 +0100 (Thu, 02 Dec 2004)
New Revision: 192

Removed:
   project_src/provirent_hibernate/src/test/provirent/hibernate/TestDvdOld.java
Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeCustomer.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/customer.properties
   project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Customer.hbm.xml
   project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Person.hbm.xml
   project_src/provirent_hibernate/src/test/provirent/hibernate/TestCustomer.java
Log:


Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeCustomer.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeCustomer.java	2004-12-01 22:25:27 UTC (rev 191)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeCustomer.java	2004-12-01 23:02:25 UTC (rev 192)
@@ -4,12 +4,10 @@
 import java.text.MessageFormat;
 import java.text.ParseException;
 import java.util.Calendar;
-import java.util.Enumeration;
 import java.util.Hashtable;
 import java.util.Locale;
 import java.util.PropertyResourceBundle;
 import java.util.ResourceBundle;
-import java.util.Vector;
 
 import org.apache.log4j.Logger;
 import org.eclipse.swt.SWT;
@@ -42,6 +40,7 @@
 
 import de.hsharz.provirent.Util;
 import de.hsharz.provirent.objects.Customer;
+import de.hsharz.provirent.objects.Person;
 import de.hsharz.provirent.persistence.DataBaseException;
 import de.hsharz.provirent.persistence.Database;
 
@@ -100,7 +99,6 @@
     private Label labelstartdate;
     
     private Text textCustomerID;
-    private Text textCustomerName;
     private Text textduration1;
     private Text textduration2;
     private Text textduration3;
@@ -236,6 +234,9 @@
 
 
     private Text textAnswer;
+
+
+    private Button changeBirthdayDateButton;
  
     /*
      * ?ndert die Sprache aller Elemente
@@ -381,7 +382,7 @@
         groupCustomerDetail = new Group(sashFormCustomer, SWT.NONE);
         GridLayout groupCustomerDetailLayout = new GridLayout();
         groupCustomerDetailLayout.marginHeight = 25;
-        groupCustomerDetailLayout.numColumns = 6;
+        groupCustomerDetailLayout.numColumns = 4;
         groupCustomerDetailLayout.verticalSpacing = 15;
         groupCustomerDetail.setText(l
                 .getString("Customer.groupdetail.label"));
@@ -396,11 +397,10 @@
             labelCustomerId.setText(l
                     .getString("Customer.groupdetail.idlabel")
                     + ":");
-            labelCustomerId.setSize(125, 15);
+            labelCustomerId.setSize(90, 15);
             GridData formData2 = new GridData();
-            formData2.widthHint = 125;
+            formData2.widthHint = 90;
             formData2.heightHint = 15;
-            formData2.horizontalSpan = 2;
             labelCustomerId.setLayoutData(formData2);
         }        
         {
@@ -409,7 +409,7 @@
             GridData text1LData1 = new GridData();
             text1LData1.horizontalAlignment = GridData.FILL;
             text1LData1.heightHint = 13;
-            text1LData1.horizontalSpan = 4;
+            text1LData1.horizontalSpan = 3;
             text1LData1.grabExcessHorizontalSpace = true;
             textCustomerID.setLayoutData(text1LData1);
         }
@@ -418,11 +418,10 @@
             labelUserName.setText(l
                     .getString("Customer.groupdetail.usernamelabel")
                     + ":");
-            labelUserName.setSize(125, 15);
+            labelUserName.setSize(90, 15);
             GridData formData2 = new GridData();
-            formData2.widthHint = 125;
+            formData2.widthHint = 90;
             formData2.heightHint = 15;
-            formData2.horizontalSpan = 2;
             labelUserName.setLayoutData(formData2);
         }
         {
@@ -431,7 +430,7 @@
             GridData text1LData1 = new GridData();
             text1LData1.horizontalAlignment = GridData.FILL;
             text1LData1.heightHint = 13;
-            text1LData1.horizontalSpan = 4;
+            text1LData1.horizontalSpan = 3;
             text1LData1.grabExcessHorizontalSpace = true;
             textUserName.setLayoutData(text1LData1);
         }
@@ -440,11 +439,10 @@
             labelLastName.setText(l
                     .getString("Customer.groupdetail.lastnamelabel")
                     + ":");
-            labelLastName.setSize(125, 15);
+            labelLastName.setSize(90, 15);
             GridData labelLastNameLData = new GridData();
-            labelLastNameLData.widthHint = 125;
+            labelLastNameLData.widthHint = 90;
             labelLastNameLData.heightHint = 15;
-            labelLastNameLData.horizontalSpan = 2;
             labelLastName.setLayoutData(labelLastNameLData);
         }
         {
@@ -453,7 +451,7 @@
             GridData text1LData2 = new GridData();
             text1LData2.horizontalAlignment = GridData.FILL;
             text1LData2.heightHint = 13;
-            text1LData2.horizontalSpan = 4;
+            text1LData2.horizontalSpan = 3;
             text1LData2.grabExcessHorizontalSpace = true;
             textLastName.setLayoutData(text1LData2);
         }
@@ -463,11 +461,10 @@
             labelFirstName.setText(l
                     .getString("Customer.groupdetail.firstnamelabel")
                     + ":");
-            labelFirstName.setSize(125, 15);
+            labelFirstName.setSize(90, 15);
             GridData label2LData1 = new GridData();
-            label2LData1.widthHint = 125;
+            label2LData1.widthHint = 90;
             label2LData1.heightHint = 15;
-            label2LData1.horizontalSpan = 2;
             labelFirstName.setLayoutData(label2LData1);
         }
         {
@@ -476,8 +473,7 @@
             GridData text1LData3 = new GridData();
             text1LData3.horizontalAlignment = GridData.FILL;
             text1LData3.heightHint = 13;
-            text1LData3.horizontalSpan = 4;
-            text1LData3.grabExcessHorizontalSpace = true;
+            text1LData3.horizontalSpan = 1;
             textFirstName.setLayoutData(text1LData3);
         }
         {
@@ -486,21 +482,19 @@
             labelMiddleName.setText(l
                     .getString("Customer.groupdetail.middlenamelabel")
                     + ":");
-            labelMiddleName.setSize(125, 15);
-            GridData label1LData1 = new GridData();
-            label1LData1.widthHint = 125;
-            label1LData1.heightHint = 15;
-            label1LData1.horizontalSpan = 2;
-            labelMiddleName.setLayoutData(label1LData1);
+            labelMiddleName.setSize(70, 15);
+            GridData label2LData1 = new GridData();
+            label2LData1.widthHint = 70;
+            label2LData1.heightHint = 15;
+            labelMiddleName.setLayoutData(label2LData1);
         }
         {
             textMiddleName = new Text(groupCustomerDetail,
                     SWT.READ_ONLY | SWT.BORDER);
             GridData text1LData3 = new GridData();
+            text1LData3.heightHint = 13;
             text1LData3.horizontalAlignment = GridData.FILL;
-            text1LData3.heightHint = 13;
-            text1LData3.horizontalSpan = 4;
-            text1LData3.grabExcessHorizontalSpace = true;
+            text1LData3.horizontalSpan = 1;
             textMiddleName.setLayoutData(text1LData3);
         }
         {
@@ -509,11 +503,10 @@
             labelSalutation.setText(l
                     .getString("Customer.groupdetail.salutationlabel")
                     + ":");
-            labelSalutation.setSize(125, 15);
+            labelSalutation.setSize(90, 15);
             GridData label1LData1 = new GridData();
-            label1LData1.widthHint = 125;
+            label1LData1.widthHint = 90;
             label1LData1.heightHint = 15;
-            label1LData1.horizontalSpan = 2;
             labelSalutation.setLayoutData(label1LData1);
         }
         {
@@ -522,8 +515,7 @@
             GridData text1LData3 = new GridData();
             text1LData3.horizontalAlignment = GridData.FILL;
             text1LData3.heightHint = 13;
-            text1LData3.horizontalSpan = 4;
-            text1LData3.grabExcessHorizontalSpace = true;
+            text1LData3.horizontalSpan = 1;
             textSalutation.setLayoutData(text1LData3);
         }
         {
@@ -532,11 +524,10 @@
             labelTitle.setText(l
                     .getString("Customer.groupdetail.titlelabel")
                     + ":");
-            labelTitle.setSize(125, 15);
+            labelTitle.setSize(70, 15);
             GridData label1LData1 = new GridData();
-            label1LData1.widthHint = 125;
+            label1LData1.widthHint = 70;
             label1LData1.heightHint = 15;
-            label1LData1.horizontalSpan = 2;
             labelTitle.setLayoutData(label1LData1);
         }
         {
@@ -545,113 +536,159 @@
             GridData text1LData3 = new GridData();
             text1LData3.horizontalAlignment = GridData.FILL;
             text1LData3.heightHint = 13;
-            text1LData3.horizontalSpan = 4;
-            text1LData3.grabExcessHorizontalSpace = true;
+            text1LData3.horizontalSpan = 1;
             textTitle.setLayoutData(text1LData3);
         }
         {
-            labelStreet = new Label(groupCustomerDetail,
+            labelBirthday = new Label(groupCustomerDetail,
                     SWT.NONE);
-            labelStreet.setText(l
-                    .getString("Customer.groupdetail.streetlabel")
+            labelBirthday.setText(l
+                    .getString("Customer.groupdetail.birthdaylabel")
                     + ":");
-            labelStreet.setSize(125, 15);
+            labelBirthday.setSize(90, 15);
             GridData label1LData1 = new GridData();
-            label1LData1.widthHint = 125;
+            label1LData1.widthHint = 90;
             label1LData1.heightHint = 15;
-            label1LData1.horizontalSpan = 2;
-            labelStreet.setLayoutData(label1LData1);
+            labelBirthday.setLayoutData(label1LData1);
         }
         {
-            textStreet = new Text(groupCustomerDetail,
+            textBirthday = new Text(groupCustomerDetail,
                     SWT.READ_ONLY | SWT.BORDER);
             GridData text1LData3 = new GridData();
             text1LData3.horizontalAlignment = GridData.FILL;
             text1LData3.heightHint = 13;
-            text1LData3.horizontalSpan = 4;
-            text1LData3.grabExcessHorizontalSpace = true;
-            textStreet.setLayoutData(text1LData3);
+            text1LData3.horizontalSpan = 2;
+            textBirthday.setLayoutData(text1LData3);
+            textBirthday.setEnabled(false);
         }
         {
-            labelNumber = new Label(groupCustomerDetail,
+            changeBirthdayDateButton = new Button(groupCustomerDetail, SWT.PUSH
+                | SWT.CENTER);
+            changeBirthdayDateButton.setText(l.getString("Customer.groupdetail.birthdaybuttonchange"));
+            GridData text1LData3 = new GridData();
+            changeBirthdayDateButton.setEnabled(false);
+            changeBirthdayDateButton.addSelectionListener(new SelectionAdapter() {
+                public void widgetSelected(SelectionEvent evt) {
+
+                    final SWTCalendarDialog cal = new SWTCalendarDialog(getDisplay(),l.getString("Customer.groupdetail.birthdaybuttonfinish"));
+
+                    cal.addDateChangedListener(new SWTCalendarListener() {
+
+                        public void dateChanged(SWTCalendarEvent calendarEvent) {
+
+                            textRegistrationDate.setText( DateFormat.getDateInstance(DateFormat.LONG).format(calendarEvent.getCalendar().getTime()));
+
+                        }
+
+                    });
+
+
+
+                    if (textRegistrationDate.getText() != null && textRegistrationDate.getText().length() > 0) {
+
+                        try {
+                               cal.setDate(DateFormat.getDateInstance(DateFormat.LONG).parse(textRegistrationDate.getText()));
+
+                        } catch (ParseException pe) {
+
+
+
+                        }
+
+                    }
+
+                    cal.open();                    
+                    
+                    
+                }
+            });
+            text1LData3.horizontalAlignment = GridData.FILL;          
+            text1LData3.horizontalSpan = 1;
+            changeBirthdayDateButton.setLayoutData(text1LData3);
+        }
+        {
+            labelStreet = new Label(groupCustomerDetail,
                     SWT.NONE);
-            labelNumber.setText(l
-                    .getString("Customer.groupdetail.numberlabel")
+            labelStreet.setText(l
+                    .getString("Customer.groupdetail.streetlabel")
                     + ":");
-            labelNumber.setSize(125, 15);
+            labelStreet.setSize(90, 15);
             GridData label1LData1 = new GridData();
-            label1LData1.widthHint = 125;
+            label1LData1.widthHint = 90;
             label1LData1.heightHint = 15;
-            label1LData1.horizontalSpan = 2;
-            labelNumber.setLayoutData(label1LData1);
+            labelStreet.setLayoutData(label1LData1);
         }
         {
-            textNumber = new Text(groupCustomerDetail,
+            textStreet = new Text(groupCustomerDetail,
                     SWT.READ_ONLY | SWT.BORDER);
             GridData text1LData3 = new GridData();
             text1LData3.horizontalAlignment = GridData.FILL;
             text1LData3.heightHint = 13;
-            text1LData3.horizontalSpan = 4;
-            text1LData3.grabExcessHorizontalSpace = true;
+            text1LData3.horizontalSpan = 2;
+            textStreet.setLayoutData(text1LData3);
+        }
+        {
+            textNumber = new Text(groupCustomerDetail,
+                    SWT.READ_ONLY | SWT.BORDER);
+            GridData text1LData3 = new GridData();
+            text1LData3.horizontalAlignment = GridData.END;
+            text1LData3.heightHint = 13;
+            text1LData3.widthHint = 20;
             textNumber.setLayoutData(text1LData3);
         }
         {
-            labelCity = new Label(groupCustomerDetail,
+            labelZipCode = new Label(groupCustomerDetail,
                     SWT.NONE);
-            labelCity.setText(l
-                    .getString("Customer.groupdetail.citylabel")
+            labelZipCode.setText(l
+                    .getString("Customer.groupdetail.zipcodelabel")
                     + ":");
-            labelCity.setSize(125, 15);
+            labelZipCode.setSize(90, 15);
             GridData label1LData1 = new GridData();
-            label1LData1.widthHint = 125;
+            label1LData1.widthHint = 90;
             label1LData1.heightHint = 15;
-            label1LData1.horizontalSpan = 2;
-            labelCity.setLayoutData(label1LData1);
+            labelZipCode.setLayoutData(label1LData1);
         }
         {
-            textCity = new Text(groupCustomerDetail,
+            textZipCode = new Text(groupCustomerDetail,
                     SWT.READ_ONLY | SWT.BORDER);
             GridData text1LData3 = new GridData();
             text1LData3.horizontalAlignment = GridData.FILL;
             text1LData3.heightHint = 13;
-            text1LData3.horizontalSpan = 4;
-            text1LData3.grabExcessHorizontalSpace = true;
-            textCity.setLayoutData(text1LData3);
+            text1LData3.horizontalSpan = 1;
+            textZipCode.setLayoutData(text1LData3);
         }
         {
-            labelZipCode = new Label(groupCustomerDetail,
+            labelCity = new Label(groupCustomerDetail,
                     SWT.NONE);
-            labelZipCode.setText(l
-                    .getString("Customer.groupdetail.zipcodelabel")
+            labelCity.setText(l
+                    .getString("Customer.groupdetail.citylabel")
                     + ":");
-            labelZipCode.setSize(125, 15);
+            labelCity.setSize(70, 15);
             GridData label1LData1 = new GridData();
-            label1LData1.widthHint = 125;
+            label1LData1.widthHint = 70;
             label1LData1.heightHint = 15;
-            label1LData1.horizontalSpan = 2;
-            labelZipCode.setLayoutData(label1LData1);
+            labelCity.setLayoutData(label1LData1);
         }
         {
-            textZipCode = new Text(groupCustomerDetail,
+            textCity = new Text(groupCustomerDetail,
                     SWT.READ_ONLY | SWT.BORDER);
             GridData text1LData3 = new GridData();
             text1LData3.horizontalAlignment = GridData.FILL;
             text1LData3.heightHint = 13;
-            text1LData3.horizontalSpan = 4;
-            text1LData3.grabExcessHorizontalSpace = true;
-            textZipCode.setLayoutData(text1LData3);
+            text1LData3.horizontalSpan = 1;
+            textCity.setLayoutData(text1LData3);
         }
+        
         {
             labelCountry = new Label(groupCustomerDetail,
                     SWT.NONE);
             labelCountry.setText(l
                     .getString("Customer.groupdetail.countrylabel")
                     + ":");
-            labelCountry.setSize(125, 15);
+            labelCountry.setSize(90, 15);
             GridData label1LData1 = new GridData();
-            label1LData1.widthHint = 125;
+            label1LData1.widthHint = 90;
             label1LData1.heightHint = 15;
-            label1LData1.horizontalSpan = 2;
             labelCountry.setLayoutData(label1LData1);
         }
         {
@@ -660,8 +697,7 @@
             GridData text1LData3 = new GridData();
             text1LData3.horizontalAlignment = GridData.FILL;
             text1LData3.heightHint = 13;
-            text1LData3.horizontalSpan = 4;
-            text1LData3.grabExcessHorizontalSpace = true;
+            text1LData3.horizontalSpan = 3;
             textCountry.setLayoutData(text1LData3);
         }
         {
@@ -670,11 +706,10 @@
             labelPassword.setText(l
                     .getString("Customer.groupdetail.passwordlabel")
                     + ":");
-            labelPassword.setSize(125, 15);
+            labelPassword.setSize(90, 15);
             GridData label1LData1 = new GridData();
-            label1LData1.widthHint = 125;
+            label1LData1.widthHint = 90;
             label1LData1.heightHint = 15;
-            label1LData1.horizontalSpan = 2;
             labelPassword.setLayoutData(label1LData1);
         }
         {
@@ -684,7 +719,6 @@
             text1LData3.horizontalAlignment = GridData.FILL;
             text1LData3.heightHint = 13;
             text1LData3.horizontalSpan = 3;
-            text1LData3.grabExcessHorizontalSpace = true;
             textPassword.setLayoutData(text1LData3);
         }
         {
@@ -693,11 +727,10 @@
             labelEmail.setText(l
                     .getString("Customer.groupdetail.emaillabel")
                     + ":");
-            labelEmail.setSize(125, 15);
+            labelEmail.setSize(90, 15);
             GridData label1LData1 = new GridData();
-            label1LData1.widthHint = 125;
+            label1LData1.widthHint = 90;
             label1LData1.heightHint = 15;
-            label1LData1.horizontalSpan = 2;
             labelEmail.setLayoutData(label1LData1);
         }
         {
@@ -707,7 +740,6 @@
             text1LData3.horizontalAlignment = GridData.FILL;
             text1LData3.heightHint = 13;
             text1LData3.horizontalSpan = 3;
-            text1LData3.grabExcessHorizontalSpace = true;
             textEmail.setLayoutData(text1LData3);
         }
         {
@@ -716,11 +748,10 @@
             labelQuestion.setText(l
                     .getString("Customer.groupdetail.questionlabel")
                     + ":");
-            labelQuestion.setSize(125, 15);
+            labelQuestion.setSize(90, 15);
             GridData label1LData1 = new GridData();
-            label1LData1.widthHint = 125;
+            label1LData1.widthHint = 90;
             label1LData1.heightHint = 15;
-            label1LData1.horizontalSpan = 2;
             labelQuestion.setLayoutData(label1LData1);
         }
         {
@@ -730,7 +761,6 @@
             text1LData3.horizontalAlignment = GridData.FILL;
             text1LData3.heightHint = 13;
             text1LData3.horizontalSpan = 3;
-            text1LData3.grabExcessHorizontalSpace = true;
             textQuestion.setLayoutData(text1LData3);
         }
         {
@@ -739,11 +769,10 @@
             labelAnswer.setText(l
                     .getString("Customer.groupdetail.answerlabel")
                     + ":");
-            labelAnswer.setSize(125, 15);
+            labelAnswer.setSize(90, 15);
             GridData label1LData1 = new GridData();
-            label1LData1.widthHint = 125;
+            label1LData1.widthHint = 90;
             label1LData1.heightHint = 15;
-            label1LData1.horizontalSpan = 2;
             labelAnswer.setLayoutData(label1LData1);
         }
         {
@@ -753,34 +782,9 @@
             text1LData3.horizontalAlignment = GridData.FILL;
             text1LData3.heightHint = 13;
             text1LData3.horizontalSpan = 3;
-            text1LData3.grabExcessHorizontalSpace = true;
             textAnswer.setLayoutData(text1LData3);
-        }
+        }       
         {
-            labelBirthday = new Label(groupCustomerDetail,
-                    SWT.NONE);
-            labelBirthday.setText(l
-                    .getString("Customer.groupdetail.birthdaylabel")
-                    + ":");
-            labelBirthday.setSize(125, 15);
-            GridData label1LData1 = new GridData();
-            label1LData1.widthHint = 125;
-            label1LData1.heightHint = 15;
-            label1LData1.horizontalSpan = 2;
-            labelBirthday.setLayoutData(label1LData1);
-        }
-        {
-            textBirthday = new Text(groupCustomerDetail,
-                    SWT.READ_ONLY | SWT.BORDER);
-            GridData text1LData3 = new GridData();
-            text1LData3.horizontalAlignment = GridData.FILL;
-            text1LData3.heightHint = 13;
-            text1LData3.horizontalSpan = 3;
-            text1LData3.grabExcessHorizontalSpace = true;
-            textBirthday.setLayoutData(text1LData3);
-            textBirthday.setEnabled(false);
-        }
-        {
             labelRegistrationDate = new Label(groupCustomerDetail,
                     SWT.NONE);
             labelRegistrationDate.setText(l
@@ -790,7 +794,7 @@
             GridData label1LData1 = new GridData();
             label1LData1.widthHint = 125;
             label1LData1.heightHint = 15;
-            label1LData1.horizontalSpan = 2;
+            label1LData1.horizontalSpan = 1;
             labelRegistrationDate.setLayoutData(label1LData1);
         }
         {
@@ -799,8 +803,7 @@
             GridData text1LData3 = new GridData();
             text1LData3.horizontalAlignment = GridData.FILL;
             text1LData3.heightHint = 13;
-            text1LData3.horizontalSpan = 3;
-            text1LData3.grabExcessHorizontalSpace = true;
+            text1LData3.horizontalSpan = 2;
             textRegistrationDate.setLayoutData(text1LData3);
             textRegistrationDate.setEnabled(false);
         }
@@ -848,10 +851,9 @@
             text1LData3.horizontalAlignment = GridData.FILL;
             
             text1LData3.horizontalSpan = 1;
-            text1LData3.grabExcessHorizontalSpace = true;
             changeRegistrationDateButton.setLayoutData(text1LData3);
         }
-        /*{
+        {
 
             //die Buttons bekommen ein eigenes Composite
             compositeButtons = new Composite(groupCustomerDetail, SWT.EMBEDDED);
@@ -871,7 +873,7 @@
             //init all the Buttons
             initCustomerDetailButtons();
 
-        }*/
+        }
 
         
     }
@@ -879,7 +881,7 @@
     /**
      * 
      */
-    /*private void initCustomerDetailButtons() {
+    private void initCustomerDetailButtons() {
         buttonCustomerNew = new Button(compositeButtons, SWT.PUSH | SWT.CENTER);
         buttonCustomerNew.setText(l.getString("button.new"));
         buttonCustomerNew.addSelectionListener(new SelectionAdapter() {
@@ -888,18 +890,43 @@
             public void widgetSelected(SelectionEvent evt) {
 
                 textCustomerID.setText("");
-                textCustomerName.setText("");
-                textduration1.setText("");
-                textduration2.setText("");
-                textduration3.setText("");
-                textstartdate.setText("");
+                textUserName.setText("");
+                textLastName.setText("");
+                textFirstName.setText("");
+                textMiddleName.setText("");
+                textSalutation.setText("");
+                textTitle.setText("");
+                textBirthday.setText("");
+                textStreet.setText("");
+                textNumber.setText("");
+                textZipCode.setText("");
+                textCity.setText("");
+                textCountry.setText("");
+                textEmail.setText("");
+                textPassword.setText("");
+                textQuestion.setText("");
+                textAnswer.setText("");
+                textRegistrationDate.setText("");
+                
+                
 
-                textCustomerName.setEditable(true);
-                textduration1.setEditable(true);
-                textduration2.setEditable(true);
-                textduration3.setEditable(true);
-                //textstartdate.setEditable(true);
-                changeStartDateButton.setEnabled(true);
+                textUserName.setEditable(true);
+                textLastName.setEditable(true);
+                textFirstName.setEditable(true);
+                textMiddleName.setEditable(true);
+                textSalutation.setEditable(true);
+                textTitle.setEditable(true);
+                changeBirthdayDateButton.setEnabled(true);
+                textStreet.setEditable(true);
+                textNumber.setEditable(true);
+                textZipCode.setEditable(true);
+                textCity.setEditable(true);
+                textCountry.setEditable(true);
+                textEmail.setEditable(true);
+                textPassword.setEditable(true);
+                textQuestion.setEditable(true);
+                textAnswer.setEditable(true);
+                changeRegistrationDateButton.setEnabled(true);
                 
                 
                 buttonCustomerCancel.setEnabled(true);
@@ -925,27 +952,26 @@
 
                 mode_Customer = ManagementGui.MODE_EDIT;
 
-                textCustomerID.setEditable(false);
-                textCustomerName.setEditable(true);
-                textduration1.setEditable(true);
-                textduration2.setEditable(true);                
-                textduration3.setEditable(true);
-                //textstartdate.setEditable(true);
-                changeStartDateButton.setEnabled(true);
+                textUserName.setEditable(true);
+                textUserName.setFocus();
+                textLastName.setEditable(true);
+                textFirstName.setEditable(true);
+                textMiddleName.setEditable(true);
+                textSalutation.setEditable(true);
+                textTitle.setEditable(true);
+                changeBirthdayDateButton.setEnabled(true);
+                textStreet.setEditable(true);
+                textNumber.setEditable(true);
+                textZipCode.setEditable(true);
+                textCity.setEditable(true);
+                textCountry.setEditable(true);
+                textEmail.setEditable(true);
+                textPassword.setEditable(true);
+                textQuestion.setEditable(true);
+                textAnswer.setEditable(true);
+                changeRegistrationDateButton.setEnabled(true);
                 
-                textduration1.setFocus();
-                
-                buttonCustomerCancel.setEnabled(true);
-                buttonCustomerSave.setEnabled(true);
-                buttonCustomerNew.setEnabled(false);
-                buttonCustomerEdit.setEnabled(false);
-                buttonCustomerDelete.setEnabled(false);
 
-
-                tableCustomer.setEnabled(false);
-                textCustomerSearch.setEnabled(false);
-                
-
             }
         });
 
@@ -961,11 +987,7 @@
                 
                String msg = MessageFormat.format(
                        l.getString("Customer.groupdetail.deletebutton.question.text"),
-                               new Object[]{textCustomerName.getText() + " " + 
-                               				textduration1.getText() + " " + 
-                               				textduration2.getText() + " " + 
-                               				textduration3.getText() + " " +
-                               				textstartdate.getText()});
+                               new Object[]{textUserName.getText()});
                 
                int question = showMsg(msg,
                        l.getString("Customer.groupdetail.deletebutton.question.header"), 
@@ -976,14 +998,28 @@
                }
                 try {
 	                Customer o = new Customer();
+	                Person p = new Person();
 	                o.setCustomerId(new Integer(Integer.parseInt(textCustomerID.getText())));
-	                o.setUserName(textCustomerName.getText());
-	                o.setDuration1(Float.parseFloat(textduration1.getText()));
-	                o.setDuration2(Float.parseFloat(textduration2.getText()));
-	                o.setDuration3(Float.parseFloat(textduration3.getText()));                
-	                o.setStartdate(Util.getDateByText(textstartdate.getText()));
-
-                    //object speichern
+	                o.setUserName(textUserName.getText());
+	                o.setDayOfRegistration(Util.getDateByText(textRegistrationDate.getText()).getTime());
+	                o.setUserPassword(textPassword.getText());
+	                o.setHiddenQuestion(textQuestion.getText());
+	                o.setHiddenAnswer(textAnswer.getText());
+	                p.setLastName(textLastName.getText());
+	                p.setFirstName(textFirstName.getText());
+	                p.setMiddleName(textMiddleName.getText());
+	                p.setSalutation(textSalutation.getText());
+	                p.setTitle(textTitle.getText());
+	                p.setStreet(textStreet.getText());
+	                p.setStreetNumber(textNumber.getText());
+	                p.setZipCode(textZipCode.getText());
+	                p.setCity(textCity.getText());
+	                p.setCountry(textCountry.getText());
+	                p.setEmailAddress(textEmail.getText());
+	                p.setDayOfBirth(Util.getDateByText(textBirthday.getText()));
+	                o.setPerson(p);
+	                
+                    //object l?schen
                     // Fehlerbehandlung
                     Database.deleteObject(o);
 
@@ -992,14 +1028,26 @@
                     
                     //Detailansicht leeren
                     textCustomerID.setText("");
-                    textCustomerName.setText("");
-                    textduration1.setText("");
-                    textduration2.setText("");
-                    textduration3.setText("");
-                    textstartdate.setText("");
+                    textUserName.setText("");
+                    textLastName.setText("");
+                    textFirstName.setText("");
+                    textMiddleName.setText("");
+                    textSalutation.setText("");
+                    textTitle.setText("");
+                    textBirthday.setText("");
+                    textStreet.setText("");
+                    textNumber.setText("");
+                    textZipCode.setText("");
+                    textCity.setText("");
+                    textCountry.setText("");
+                    textEmail.setText("");
+                    textPassword.setText("");
+                    textQuestion.setText("");
+                    textAnswer.setText("");
+                    textRegistrationDate.setText("");
                     buttonCustomerEdit.setEnabled(false);
                     buttonCustomerDelete.setEnabled(false);
-                    //in Tabelle n?chsten ausw?hlen
+                    
                     try {
                         tableCustomer.deselectAll();
                     } catch (Exception ex) {}
@@ -1050,11 +1098,17 @@
             public void widgetSelected(SelectionEvent evt) {
     
                 //testen ob duration leer ist
-                if (   textCustomerName.getText().trim().equalsIgnoreCase("") ||
-                       textduration1.getText().trim().equalsIgnoreCase("") || 
-                       textduration2.getText().trim().equalsIgnoreCase("") || 
-                       textduration3.getText().trim().equalsIgnoreCase("") ||
-                       textstartdate.getText().trim().equalsIgnoreCase("")) {
+                if (   textUserName.getText().trim().equalsIgnoreCase("") ||
+                       textLastName.getText().trim().equalsIgnoreCase("") || 
+                       textFirstName.getText().trim().equalsIgnoreCase("") || 
+                       textStreet.getText().trim().equalsIgnoreCase("") ||
+                       textNumber.getText().trim().equalsIgnoreCase("") || 
+                       textZipCode.getText().trim().equalsIgnoreCase("") ||
+                       textCity.getText().trim().equalsIgnoreCase("") ||
+                       textCountry.getText().trim().equalsIgnoreCase("") || 
+                       textEmail.getText().trim().equalsIgnoreCase("") ||
+                       textQuestion.getText().trim().equalsIgnoreCase("") ||
+                       textAnswer.getText().trim().equalsIgnoreCase("")) {
                     
                     showMsg(l.getString("Customer.groupdetail.savebutton.warn.noname.msg"),
                             l.getString("Customer.groupdetail.savebutton.warn.noname.title"),
@@ -1074,25 +1128,38 @@
                      * @todo eine Exception bekommen wieder leider NOCH nicht mit
                      * d.h. es muss noch ein r?ckgabewert kommen oder eine Exception 
                      * ?bermitteln werden (aus der DB Klasse)
-                     /
+                     */
 	                    
                     try {	
                         
-                        Calendar tmp_cal = Calendar.getInstance();
-                        tmp_cal.setTime(DateFormat.getDateInstance(DateFormat.LONG).parse(textstartdate.getText()));
                     	//neues Objekt erzeugen
-	                    Customer tmp = new Customer(textCustomerName.getText(), 
-                            			Float.parseFloat(textduration1.getText()),
-                            			Float.parseFloat(textduration2.getText()), 
-                            			Float.parseFloat(textduration3.getText()),
-                            			tmp_cal);
+                        Customer o = new Customer();
+    	                Person p = new Person();
+    	                o.setUserName(textUserName.getText());
+    	                o.setDayOfRegistration(Util.getDateByText(textRegistrationDate.getText()).getTime());
+    	                o.setUserPassword(textPassword.getText());
+    	                o.setHiddenQuestion(textQuestion.getText());
+    	                o.setHiddenAnswer(textAnswer.getText());
+    	                p.setLastName(textLastName.getText());
+    	                p.setFirstName(textFirstName.getText());
+    	                p.setMiddleName(textMiddleName.getText());
+    	                p.setSalutation(textSalutation.getText());
+    	                p.setTitle(textTitle.getText());
+    	                p.setStreet(textStreet.getText());
+    	                p.setStreetNumber(textNumber.getText());
+    	                p.setZipCode(textZipCode.getText());
+    	                p.setCity(textCity.getText());
+    	                p.setCountry(textCountry.getText());
+    	                p.setEmailAddress(textEmail.getText());
+    	                p.setDayOfBirth(Util.getDateByText(textBirthday.getText()));
+    	                o.setPerson(p);
                                         
                         //object speichern
                         // Fehlerbehandlung
-                        Object o = Database.saveObject(tmp);
+                        Object newCust = Database.saveObject(o);
                         
                         // in ?bersichtstabelle einf?gen
-                        insertIntoCustomerTable((Customer)o);                        
+                        insertIntoCustomerTable((Customer)newCust);                        
                                                 
                         //Statusline Nachricht sezten
                         statusLine.setStatus(1,l.getString("Customer.groupdetail.savebutton.newok"));
@@ -1114,10 +1181,6 @@
                             e.printStackTrace();
                         }
                         
-                    } catch (ParseException pex){
-                        statusLine.setStatus(3,l.getString("Customer.groupdetail.savebutton.errorsave"));
-                        showMsg(l.getString("Customer.groupdetail.savebutton.errorsave"),"Fehler", SWT.ICON_ERROR | SWT.OK);
-                        
                     }
                     
                     
@@ -1129,19 +1192,32 @@
                 } else if (mode_Customer == ManagementGui.MODE_EDIT) {
                     try {
                         
-                        Calendar tmp_cal = Calendar.getInstance();
-                        tmp_cal.setTime(DateFormat.getDateInstance(DateFormat.LONG).parse(textstartdate.getText()));
-                        
-	                    Customer tmp = new Customer(textCustomerName.getText(), 
-	                            Float.parseFloat(textduration1.getText()),
-	                            Float.parseFloat(textduration2.getText()), 
-	                            Float.parseFloat(textduration3.getText()),
-	                            tmp_cal);
-	                    tmp.setCustomerId(new Integer(Integer.parseInt(textCustomerID.getText())));
+                        Customer o = new Customer();
+    	                Person p = new Person();
+    	                o.setCustomerId(new Integer(Integer.parseInt(textCustomerID.getText())));
+    	                o.setUserName(textUserName.getText());
+    	                o.setDayOfRegistration(Util.getDateByText(textRegistrationDate.getText()).getTime());
+    	                o.setUserPassword(textPassword.getText());
+    	                o.setHiddenQuestion(textQuestion.getText());
+    	                o.setHiddenAnswer(textAnswer.getText());
+    	                p.setLastName(textLastName.getText());
+    	                p.setFirstName(textFirstName.getText());
+    	                p.setMiddleName(textMiddleName.getText());
+    	                p.setSalutation(textSalutation.getText());
+    	                p.setTitle(textTitle.getText());
+    	                p.setStreet(textStreet.getText());
+    	                p.setStreetNumber(textNumber.getText());
+    	                p.setZipCode(textZipCode.getText());
+    	                p.setCity(textCity.getText());
+    	                p.setCountry(textCountry.getText());
+    	                p.setEmailAddress(textEmail.getText());
+    	                p.setDayOfBirth(Util.getDateByText(textBirthday.getText()));
+    	                o.setPerson(p);
+	                    o.setCustomerId(new Integer(Integer.parseInt(textCustomerID.getText())));
 	                
 	                    //object speichern
 	                    // Fehlerbehandlung
-	                    Database.saveObject(tmp);
+	                    Database.saveObject(o);
 	                    //?bersichtstabelle aktualisieren
 	                    refreshCustomerTable(textCustomerSearch.getText());
 	                    
@@ -1166,10 +1242,6 @@
 	                        e.printStackTrace();
 	                    }
                     
-                    } catch (ParseException pex){
-                        statusLine.setStatus(3,l.getString("Customer.groupdetail.savebutton.errorsave"));
-                        showMsg(l.getString("Customer.groupdetail.savebutton.errorsave"),"Fehler", SWT.ICON_ERROR | SWT.OK);
-                        
                     }
                     
                     //alle Buttons auf aktiv setzen
@@ -1182,7 +1254,7 @@
                 
                 /**
                  * @todo Exception werfen, da nur die zwei Modes sein d?rfen
-                 /
+                 */
                 
             }
         });
@@ -1199,18 +1271,18 @@
             }
         });
        
-    }*/
+    }
 
     /**
      * 
      */
-    /*protected void setCustomerGroupButtonSaveCancel() {
+    protected void setCustomerGroupButtonSaveCancel() {
         buttonCustomerSave.setEnabled(false);
         buttonCustomerCancel.setEnabled(false);
         buttonCustomerEdit.setEnabled(true);
         buttonCustomerNew.setEnabled(true);
         buttonCustomerDelete.setEnabled(true);
-        textCustomerName.setEditable(false);
+        textUserName.setEditable(false);
         textduration1.setEditable(false);
         textduration2.setEditable(false);
         textduration3.setEditable(false);
@@ -1224,7 +1296,7 @@
         //CustomerSearch aktivieren
         textCustomerSearch.setEnabled(true);
         
-    }*/
+    }
 
     /**
      * @param Customer
@@ -1278,11 +1350,17 @@
             item = new TableItem(tableCustomer, SWT.NONE);
             Calendar regdate = Calendar.getInstance();
             regdate.setTime(o.getDayOfRegistration());
+            String date = null;
+            if (o.getPerson().getDayOfBirth() == null) {
+                date = "";
+            } else {
+                date = Util.getTextByDate(o.getPerson().getDayOfBirth());
+            }
             item.setText(new String[] { o.getCustomerId() + "", 
                     					o.getUserName(), 
                     					o.getPerson().getLastName(),
                     					o.getPerson().getFirstName(),
-                    					Util.getTextByDate(o.getPerson().getDayOfBirth()),
+                    					date,
                     					Util.getTextByDate(regdate),              					
                     					});
 
@@ -1503,27 +1581,48 @@
 	            //id ist keine Zahl
 	            return;
 	        }
-	
-	        textCustomerID.setText(object.getCustomerId() + "");
-	        textUserName.setText(object.getUserName());
-	        textLastName.setText(object.getPerson().getLastName());
-	        textFirstName.setText(object.getPerson().getFirstName());
-	        textMiddleName.setText(object.getPerson().getMiddleName());
-	        textSalutation.setText(object.getPerson().getSalutation());
-	        textTitle.setText(object.getPerson().getTitle());
-	        textStreet.setText(object.getPerson().getStreet());
-	        textNumber.setText(object.getPerson().getStreetNumber());
-	        textCity.setText(object.getPerson().getCity());
-	        textZipCode.setText(object.getPerson().getZipCode());
-	        textCountry.setText(object.getPerson().getCountry());
-	        textPassword.setText(object.getUserPassword());
-	        textEmail.setText(object.getPerson().getEmailAddress());
-	        textQuestion.setText(object.getHiddenQuestion());
-	        textAnswer.setText(object.getHiddenAnswer());
+	        String temp = null;
+	        textCustomerID.setText(object.getCustomerId().toString());
+	        temp = object.getUserName();
+	        textUserName.setText(temp == null ? "" : temp);
+	        temp = object.getPerson().getLastName();
+	        textLastName.setText(temp == null ? "" : temp);
+	        temp = object.getPerson().getFirstName();
+	        textFirstName.setText(temp == null ? "" : temp);
+	        temp = object.getPerson().getMiddleName();
+	        textMiddleName.setText(temp == null ? "" : temp);
+	        temp = object.getPerson().getSalutation();
+	        textSalutation.setText(temp == null ? "" : temp);
+	        temp = object.getPerson().getTitle();
+	        textTitle.setText(temp == null ? "" : temp);
+	        temp = object.getPerson().getStreet();
+	        textStreet.setText(temp == null ? "" : temp);
+	        temp = object.getPerson().getStreetNumber();
+	        textNumber.setText(temp == null ? "" : temp);
+	        temp = object.getPerson().getCity();
+	        textCity.setText(temp == null ? "" : temp);
+	        temp = object.getPerson().getZipCode();
+	        textZipCode.setText(temp == null ? "" : temp);
+	        temp = object.getPerson().getCountry();
+	        textCountry.setText(temp == null ? "" : temp);
+	        temp = object.getUserPassword();
+	        textPassword.setText(temp == null ? "" : temp);
+	        temp = object.getPerson().getEmailAddress();
+	        textEmail.setText(temp == null ? "" : temp);
+	        temp = object.getHiddenQuestion();
+	        textQuestion.setText(temp == null ? "" : temp);
+	        temp = object.getHiddenAnswer();
+	        textAnswer.setText(temp == null ? "" : temp);
 	        Calendar regdate = Calendar.getInstance();
 	        regdate.setTime(object.getDayOfRegistration());
 	        try {
-                textBirthday.setText(Util.getTextByDate(object.getPerson().getDayOfBirth()));
+	            String date = null;
+	            if (object.getPerson().getDayOfBirth() == null) {
+	                date = "";
+	            } else {
+	                date = Util.getTextByDate(object.getPerson().getDayOfBirth());
+	            }
+                textBirthday.setText(date);
             } catch (DataBaseException e1) {
                 // TODO Auto-generated catch block
                 e1.printStackTrace();
@@ -1549,7 +1648,7 @@
 	        }*/
         } else {
             textCustomerID.setText("");
-            textCustomerName.setText("");
+            textUserName.setText("");
             textduration1.setText("");
             textduration2.setText("");
             textduration3.setText("");

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/customer.properties
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/customer.properties	2004-12-01 22:25:27 UTC (rev 191)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/customer.properties	2004-12-01 23:02:25 UTC (rev 192)
@@ -6,7 +6,7 @@
 button.save=Speichern
 button.cancel=Abbruch
 
-Customer.group.label=Preisklassen
+Customer.group.label=Benutzer
 Customer.groupoverview.label=?berblick
 Customer.groupoverview.columnid=Id
 Customer.groupoverview.columnusername=Name
@@ -17,31 +17,32 @@
 
 Customer.groupoverview.searchlabel=Suche nach
 Customer.groupdetail.label=Detail
-Customer.groupdetail.idlabel=
-Customer.groupdetail.usernamelabel=
-Customer.groupdetail.lastnamelabel=
-Customer.groupdetail.firstnamelabel=
-Customer.groupdetail.middlenamelabel=
-Customer.groupdetail.emaillabel=
-Customer.groupdetail.birthdaylabel=
-Customer.groupdetail.questionlabel=
-Customer.groupdetail.answerlabel=
-Customer.groupdetail.salutationlabel=
-Customer.groupdetail.titlelabel=
-Customer.groupdetail.streetlabel=
-Customer.groupdetail.numberlabel=
-Customer.groupdetail.citylabel=
-Customer.groupdetail.zipcodelabel=
-Customer.groupdetail.countrylabel=
-Customer.groupdetail.passwordlabel=
-Customer.groupdetail.regdatelabel=
+Customer.groupdetail.idlabel=Benutzer ID
+Customer.groupdetail.usernamelabel=Benutzername
+Customer.groupdetail.lastnamelabel=Nachname
+Customer.groupdetail.firstnamelabel=Vorname
+Customer.groupdetail.middlenamelabel=2.Vorname(n)
+Customer.groupdetail.emaillabel=Emailadresse
+Customer.groupdetail.birthdaylabel=Geburtsdatum
+Customer.groupdetail.questionlabel=Geheime Frage
+Customer.groupdetail.answerlabel=Geheime Antwort
+Customer.groupdetail.salutationlabel=Anrede
+Customer.groupdetail.titlelabel=Titel
+Customer.groupdetail.streetlabel=Strasse u. Nummer
+Customer.groupdetail.citylabel=Stadt
+Customer.groupdetail.zipcodelabel=Zip Code
+Customer.groupdetail.countrylabel=Land
+Customer.groupdetail.passwordlabel=Passwort
+Customer.groupdetail.regdatelabel=Registrierdatum
 Customer.groupdetail.registrationdatebuttonchange=?ndern
 Customer.groupdetail.registrationdatebuttonfinish=Fertig
+Customer.groupdetail.birthdaybuttonchange=?ndern
+Customer.groupdetail.birthdaybuttonfinish=Fertig
 
 Customer.groupdetail.savebutton.warn.noname.title=Datensatz speichern
 Customer.groupdetail.savebutton.warn.noname.msg=Der Datensatz kann nicht gespeichert werden. \n Bitte geben Sie einen Namen an
-Customer.groupdetail.savebutton.newok=Speichern der neuen Preisklasse erfolgreich.
-Customer.groupdetail.savebutton.editok=?ndern der Preisklasse erfolgreich.
+Customer.groupdetail.savebutton.newok=Speichern des neuen Benutzers erfolgreich.
+Customer.groupdetail.savebutton.editok=?ndern des Benutzers erfolgreich.
 
 Customer.groupdetail.savebutton.errorsave=Datenbankfehler beim Speichern.
 Customer.groupdetail.savebutton.errordb=Datenbankfehler beim Herstellen der Verbindung.(save).

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Customer.hbm.xml
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Customer.hbm.xml	2004-12-01 22:25:27 UTC (rev 191)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Customer.hbm.xml	2004-12-01 23:02:25 UTC (rev 192)
@@ -16,7 +16,9 @@
       <id name="customerId" type="int" column="CUSTOMERID">
         <meta attribute="scope-set">public</meta>
         <meta attribute="use-in-equals">true</meta>
-        <generator class="native"/>
+        <generator class="sequence">
+			<param name="sequence">customer_id_sequence</param>
+		</generator>
       </id>
  
  			<timestamp	name="dayOfRegistration">

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Person.hbm.xml
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Person.hbm.xml	2004-12-01 22:25:27 UTC (rev 191)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Person.hbm.xml	2004-12-01 23:02:25 UTC (rev 192)
@@ -16,7 +16,9 @@
       <id name="personId" type="int" column="PERSONID">
         <meta attribute="scope-set">public</meta>
         <meta attribute="use-in-equals">true</meta>
-        <generator class="native"/>
+        <generator class="sequence">
+			<param name="sequence">person_id_sequence</param>
+		</generator>
       </id>
 	  
 

Modified: project_src/provirent_hibernate/src/test/provirent/hibernate/TestCustomer.java
===================================================================
--- project_src/provirent_hibernate/src/test/provirent/hibernate/TestCustomer.java	2004-12-01 22:25:27 UTC (rev 191)
+++ project_src/provirent_hibernate/src/test/provirent/hibernate/TestCustomer.java	2004-12-01 23:02:25 UTC (rev 192)
@@ -103,7 +103,7 @@
     
 
     
-    
+    /*
     public void testCustomer() throws Exception{
         if (logger.isDebugEnabled()) {
             logger.debug("testCustomer() - start");
@@ -237,7 +237,7 @@
         if (logger.isDebugEnabled()) {
             logger.debug("testCustomer() - end");
         }
-    }
+    }*/
 
     public void testCreateCustomer() throws Exception{
         if (logger.isDebugEnabled()) {

Deleted: project_src/provirent_hibernate/src/test/provirent/hibernate/TestDvdOld.java
===================================================================
--- project_src/provirent_hibernate/src/test/provirent/hibernate/TestDvdOld.java	2004-12-01 22:25:27 UTC (rev 191)
+++ project_src/provirent_hibernate/src/test/provirent/hibernate/TestDvdOld.java	2004-12-01 23:02:25 UTC (rev 192)
@@ -1,300 +0,0 @@
-/*
- * Created on 07.10.2004
- *
- * Copyright (c) 2004/2005, Remo Griesch/Stefan Forstner/Philipp Schneider
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met:
- *
- * - Redistributions of source code must retain the above copyright notice,
- * this list of conditions and the following disclaimer.
- * - Redistributions in binary form must reproduce the above copyright notice,
- * this list of conditions and the following disclaimer in the documentation
- * and/or other materials provided with the distribution.
- * - Neither the name of the Remo Griesch/Stefan Forstner/Philipp Schneider nor
- * the names of its contributors may be used to endorse or promote products
- * derived from this software without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
- * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
- * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
- * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
- * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
- * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
- * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- * POSSIBILITY OF SUCH DAMAGE.
- *
- */
-package test.provirent.hibernate;
-
-import java.util.ArrayList;
-
-import net.sf.hibernate.Session;
-import net.sf.hibernate.SessionFactory;
-import net.sf.hibernate.Transaction;
-import net.sf.hibernate.cfg.Configuration;
-import de.hsharz.provirent.objects.Actor;
-import de.hsharz.provirent.objects.AudioFormat;
-import de.hsharz.provirent.objects.Condition;
-import de.hsharz.provirent.objects.Director;
-import de.hsharz.provirent.objects.Dvd;
-import de.hsharz.provirent.objects.Genre;
-import de.hsharz.provirent.objects.Language;
-import de.hsharz.provirent.objects.Movie;
-import de.hsharz.provirent.objects.Status;
-import de.hsharz.provirent.objects.Subtitle;
-import de.hsharz.provirent.objects.VideoFormat;
-
-
-/**
- * @author Philipp Schneider
- *  
- */
-public class TestDvdOld {
-
-    public static void main(String args[]) throws Exception {
-        TestDvdOld th = new TestDvdOld();
-        //th.saveObjects();
-        th.getObjects();
-    }
-    
-
-        
-
-
-
-    public void getObjects() throws Exception {
-        Configuration config = new Configuration();
-
-        // Tell it about the classes we want mapped, taking advantage
-        // of
-        // the way we've named their mapping documents.
-        config.addClass(Movie.class).addClass(Actor.class)
-        .addClass(AudioFormat.class).addClass(Condition.class)
-        .addClass(Director.class).addClass(Dvd.class)
-.addClass(Genre.class).addClass(Language.class)
-.addClass(Status.class)
-.addClass(Subtitle.class).addClass(VideoFormat.class);
-
-        // Get the session factory we can use for persistence
-        SessionFactory sessionFactory = config.buildSessionFactory();
-
-        // Ask for a session using the JDBC information we've
-        // configured
-        Session session = sessionFactory.openSession();
-        try {
-            int id = 1;
-            Dvd movie = (Dvd) session.get(Dvd.class, new Integer(id));
-            if (movie == null) {
-                System.out.println("Keine Dvd mit id " + id + "gefunden");
-                return;
-            }
-            System.out.println("DVD gefunden: " + movie.toString());
-            
-
-        } finally {
-            // No matter what, close the session
-            session.close();
-        }
-
-        // Clean up after ourselves
-        sessionFactory.close();
-    }
-
-    public void saveObjects() throws Exception {
-        // Create a configuration based on the properties file we've put
-        // in the standard place.
-        Configuration config = new Configuration();
-
-        // Tell it about the classes we want mapped, taking advantage of
-        // the way we've named their mapping documents.
-        config.addClass(Movie.class).addClass(Actor.class)
-        .addClass(AudioFormat.class).addClass(Condition.class)
-        .addClass(Director.class).addClass(Dvd.class)
-.addClass(Genre.class).addClass(Language.class)
-.addClass(Status.class)
-.addClass(Subtitle.class).addClass(VideoFormat.class);
-
-        // Get the session factory we can use for persistence
-        SessionFactory sessionFactory = config.buildSessionFactory();
-
-        // Ask for a session using the JDBC information we've configured
-        Session s = sessionFactory.openSession();
-        Transaction tx = null;
-        try {
-            // Create some data and persist it
-            tx = s.beginTransaction();
-            
-            Movie movie = new Movie();
-            movie.setTitle("Fluch der Karibik");
-            movie.setDescription("eine interaktive Geschichte eines Piraten");
-
-            Actor actor1 = new Actor("Johnny", "Depp");
-            Actor actor2 = new Actor("Geoffrey", "Rush");
-            Actor actor3 = new Actor("Gore", "Verbinski ");
-            Actor actor4 = new Actor("Julianne", "Moore ");
-            Actor actor5 = new Actor("Anthony", "Edwards ");
-            Actor actor6 = new Actor("Matthew", "Pleszewicz ");
-            Actor actor7 = new Actor("Christopher", "Kovaleski ");
-            s.save(actor1);
-            s.save(actor2);
-            s.save(actor3);
-            s.save(actor4);
-            s.save(actor5);
-            s.save(actor6);
-            s.save(actor7);
-            s.flush();
-
-            ArrayList actors = new ArrayList();
-            actors.add(actor1);
-            actors.add(actor2);
-            movie.setActors(actors);
-            
-            
-
-            Director d1 = new Director("Bibo","Bergeron");
-            Director d2 = new Director("Vicky","Jenson");
-            Director d3 = new Director("Jay","Russell");
-            Director d4 = new Director("Joseph","Ruben");
-            s.save(d1);
-            s.save(d2);
-            s.save(d3);
-            s.save(d4);
-            s.flush();
-
-			movie.setDirector(new ArrayList());
-            movie.getDirector().add(d1);
-
-            Language l1 = new Language("Deutsch", "de");
-            Language l2 = new Language("Englisch", "en");
-            Language l3 = new Language("Franzoesisch", "fr");
-            Language l4 = new Language("Spanisch", "es");
-            Language l5 = new Language("Japanisch", "jp");
-            s.save(l1);
-            s.save(l2);
-            s.save(l3);
-            s.save(l4);
-            s.save(l5);
-            s.flush();
-
-            movie.setLanguages(new ArrayList());
-            movie.getLanguages().add(l1);
-            movie.getLanguages().add(l2);
-            
-            Subtitle s1 = new Subtitle("Deutsch", "de");
-            Subtitle s2 = new Subtitle("Englisch", "en");
-            Subtitle s3 = new Subtitle("Franzoesisch", "fr");
-            Subtitle s4 = new Subtitle("Spanisch", "es");
-            Subtitle s5 = new Subtitle("Japanisch", "jp");        
-            s.save(s1);
-            s.save(s2);
-            s.save(s3);
-            s.save(s4);
-            s.save(s5);
-            s.flush();
-
-            movie.setSubtitles(new ArrayList());
-            movie.getSubtitles().add(s1);
-            movie.getSubtitles().add(s2);
-            
-            Genre g1 = new Genre("Action","");
-            Genre g2 = new Genre("Abenteuer","");
-            Genre g3 = new Genre("Dokumentation","");
-            s.save(g1);
-            s.save(g2);
-            s.save(g3);
-            s.flush();
-       
-            movie.setGenres(new ArrayList());
-            movie.getGenres().add(g1);
-            
-            AudioFormat a1 = new AudioFormat("DTS Surround Sound","");
-            AudioFormat a2 = new AudioFormat("Surround Sound","");
-            AudioFormat a3 = new AudioFormat("Dolby","");
-            AudioFormat a4 = new AudioFormat("Stereo","");
-            s.save(a1);
-            s.save(a2);
-            s.save(a3);
-            s.save(a4);
-            s.flush();
-             
-            movie.setAudioFormats(new ArrayList());
-            movie.getAudioFormats().add(a1);
-            movie.getAudioFormats().add(a4);
-            
-            VideoFormat v1 = new VideoFormat("2.35:1","");
-            s.save(v1);
-            s.flush();
-          
-            movie.setVideoFormats(new ArrayList());
-            movie.getVideoFormats().add(v1);
-            
-          
-            s.save(movie);
-
-            System.out.println("MovieID: " + movie.getMovieId());
-            System.out.println("Movie Actors vor: " + movie.getActors());
-            s.flush();
-            System.out.println("Movie Actors nach: " + movie.getActors());
-
-
-            
-
-            Dvd dvd = new Dvd();
-            dvd.setMovie(movie);
-            
-            Status status1 = new Status("ausleihbar","");
-            Status status2 = new Status("verliehen","");
-            Status status3 = new Status("in Bearbeitung","");
-            s.save(status1);
-            s.save(status2);
-            s.save(status3);
-            s.flush();
-
-            dvd.setStatus(status1);
-            
-            Condition con1 = new Condition("neu","");
-            Condition con2 = new Condition("leichte Kratzer","");
-            Condition con3 = new Condition("mittlere Kratzer","");
-            Condition con4 = new Condition("schwere Kratzer","");
-            Condition con5 = new Condition("nicht lesbar","");
-            s.save(con1);
-            s.save(con2);
-            s.save(con3);
-            s.save(con4);
-            s.save(con5);
-            s.flush();
-            
-            dvd.setCondition(con1);
-            dvd.setBarcode("01246682");
-            
-            s.save(dvd);
-            s.flush();
-            System.out.println("DVD ID: " + dvd.getDvdId());
-
-            
-            
-            // We're done; make our changes permanent
-            tx.commit();
-
-        } catch (Exception e) {
-            if (tx != null) {
-                // Something went wrong; discard all partial changes
-                tx.rollback();
-            }
-            throw e;
-        } finally {
-            // No matter what, close the session
-            HibernateUtil.closeSession();
-        }
-
-        // Clean up after ourselves
-        sessionFactory.close();
-    }
-
-}
\ No newline at end of file



From pschneider at sheep.berlios.de  Thu Dec  2 12:08:53 2004
From: pschneider at sheep.berlios.de (Philipp Schneider at BerliOS)
Date: Thu, 2 Dec 2004 12:08:53 +0100
Subject: [Provirent-svn-commit] r193 - project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui
Message-ID: <200412021108.iB2B8rml020534@sheep.berlios.de>

Author: pschneider
Date: 2004-12-02 12:08:52 +0100 (Thu, 02 Dec 2004)
New Revision: 193

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java
Log:
- Fehler aus Genre beseitigt
- beim f?\195?\188llen von Images wurde nicht die imagetabelle gel?\195?\182scht, sondern die Genre 

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java	2004-12-01 23:02:25 UTC (rev 192)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java	2004-12-02 11:08:52 UTC (rev 193)
@@ -780,13 +780,13 @@
         	            //get id from object 
         	            //search for id in list and delete object
         	            //remove table entry
-        	            int index=tableMoviesGenresDetail.getSelectionIndex();
-        	            if(index>=0)  {
-        	                String strid=tableMoviesGenresDetail.getItem(index).getText(0);
+        	            int index= tableMoviesGenresDetail.getSelectionIndex();
+        	            if(index >= 0)  {
+        	                String strid = tableMoviesGenresDetail.getItem(index).getText(0);
         	                int id = Integer.parseInt(strid);
-        	                for (int i=0;i<movie.getGenres().size();i++)  {
-        	                    Genre o =(Genre)movie.getGenres().get(i);    
-        	                    if (o.getGenreId().intValue()==id) {
+        	                for (int i=0; i < movie.getGenres().size(); i++)  {
+        	                    Genre o = (Genre)movie.getGenres().get(i);    
+        	                    if (o.getGenreId().intValue() == id) {
         	                        movie.getGenres().remove(o);
         	                        break;
         	                    }
@@ -798,7 +798,7 @@
         	}
         	{
                 tableMoviesGenresDetail = new Table(groupMoviesDetail,SWT.SINGLE
-                        | SWT.FULL_SELECTION | SWT.V_SCROLL | SWT.BORDER);
+                        | SWT.FULL_SELECTION | SWT.BORDER);
                 //tableMoviesGenresDetail.setHeaderVisible(true);
                 //tableMoviesGenresDetail.setLinesVisible(true);
                 GridData tableMoviesGenresDetailLData = new GridData();
@@ -861,7 +861,7 @@
         	            DialogMovie dialog = new DialogMovie(getShell(),0,locale,movie,DialogMovie.TYPE_IMAGE);
         	            dialog.open();
 
-        	            tableMoviesActorsDetail.removeAll();
+        	            tableMoviesImagesDetail.removeAll();
         	            TableItem item;
         	            for(int i =0; i< movie.getImages().size(); i++){
         	                item = new TableItem(tableMoviesImagesDetail, SWT.NONE);
@@ -1023,9 +1023,9 @@
                 tableMoviesOverview.setEnabled(false);
                 textMoviesSearch.setEnabled(false);
                 
-                java.util.List Movielist = Database.getMovie(textMoviesID.getText());
+                //java.util.List Movielist = Database.getMovie(textMoviesID.getText());
                 //only one element because of ID
-                movie = (Movie)Movielist.get(0);
+                //movie = (Movie)Movielist.get(0);
             }
         });
 
@@ -1265,7 +1265,7 @@
     /**
      * @param text
      */
-    protected void refreshMoviesDetail(String id) {
+    private void refreshMoviesDetail(String id) {
         // TODO Auto-generated method stub
         Movie object;
         try {
@@ -1314,18 +1314,19 @@
         //Fill Genretable
         tableMoviesGenresDetail.removeAll();
         logger.debug("Anzahl der Genres: "+object.getGenres().size());
-        TableItem testitem = new TableItem(tableMoviesGenresDetail , SWT.NONE);
-        testitem.setText(new String[] {"0","Hallo"});
-        
         for (int i=0; i<object.getGenres().size();i++ )  {
             Genre o=(Genre)object.getGenres().get(i);
-            item = new TableItem(tableMoviesGenresDetail , SWT.NONE);
-            item.setText(new String[] {o.getGenreId() 
-                    + " ",o.getName()});
+            logger.debug(i+" "+o);
+             item = new TableItem(tableMoviesGenresDetail, SWT.NONE);
+             item.setText(new String[] { o.getGenreId() + ""
+                     , o.getName() + ""});
+             
+            //item.setText(new String[] {o.getGenreId() 
+            //        + " ",o.getName()});
         }
         
         //Fill Imagetable
-        tableMoviesGenresDetail.removeAll();
+        tableMoviesImagesDetail.removeAll();
         logger.debug("Anzahl der Bilder: "+object.getImages().size());
         for (int i=0;i<object.getImages().size();i++)  {
             Image o=(Image)object.getImages().get(i);



From rgriesch at sheep.berlios.de  Thu Dec  2 17:54:52 2004
From: rgriesch at sheep.berlios.de (Remo Griesch at BerliOS)
Date: Thu, 2 Dec 2004 17:54:52 +0100
Subject: [Provirent-svn-commit] r194 - in project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui: . language
Message-ID: <200412021654.iB2GsqmQ008864@sheep.berlios.de>

Author: rgriesch
Date: 2004-12-02 17:54:50 +0100 (Thu, 02 Dec 2004)
New Revision: 194

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/movies.properties
Log:
Compsite Movie   - Date wird durch Dialog realisiert
                 Grund:keine falschen Eingaben und                          konform

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java	2004-12-02 11:08:52 UTC (rev 193)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java	2004-12-02 16:54:50 UTC (rev 194)
@@ -1,6 +1,8 @@
 package de.hsharz.provirent.management.gui;
 
+import java.text.DateFormat;
 import java.text.MessageFormat;
+import java.text.ParseException;
 import java.util.ArrayList;
 import java.util.GregorianCalendar;
 import java.util.Locale;
@@ -32,7 +34,9 @@
 import org.eclipse.swt.widgets.Text;
 
 import com.cloudgarden.resource.SWTResourceManager;
-
+import org.vafada.swtcalendar.SWTCalendarEvent;
+import org.vafada.swtcalendar.SWTCalendarListener;
+import de.hsharz.provirent.Util;
 import de.hsharz.provirent.objects.Actor;
 import de.hsharz.provirent.objects.Director;
 import de.hsharz.provirent.objects.Genre;
@@ -119,7 +123,8 @@
     private Button buttonMoviesDeleteGenres;
     private Button buttonMoviesAddImages;
     private Button buttonMoviesDeleteImages;
-     
+    private Button buttonMoviesChangeDate; 
+    
     private SashForm sashForm1;
     
     private Composite parent;
@@ -129,7 +134,7 @@
     private Composite compositeMoviesEditGenres;
     private Composite compositeMoviesEditImages;
     
-    protected int mode_movie;
+    private int mode_movie;
     
     private StatusLineStyledText statusLine;
     
@@ -479,11 +484,42 @@
             GridData text1LData2 = new GridData();
             text1LData2.horizontalAlignment = GridData.FILL;
             text1LData2.heightHint = 13;
-            text1LData2.horizontalSpan = 5;
+            text1LData2.horizontalSpan = 4;
             text1LData2.grabExcessHorizontalSpace = true;
             textMoviesDate.setLayoutData(text1LData2);
             textMoviesDate.setText(l.getString("movies.groupdetail.textdate"));
         }
+        {
+    	    buttonMoviesChangeDate = new Button(groupMoviesDetail, SWT.NONE);
+    	    buttonMoviesChangeDate.setText(l
+    	            .getString("movies.button.changedate"));
+    	    buttonMoviesChangeDate.setEnabled(false);
+    	    GridData text1LData2 = new GridData();
+    	    text1LData2.horizontalAlignment = GridData.FILL;
+    	    text1LData2.heightHint = 20;
+    	    text1LData2.horizontalSpan =1;
+    	    buttonMoviesChangeDate.setLayoutData(text1LData2);        
+    	    buttonMoviesChangeDate.addSelectionListener(new SelectionAdapter() {
+    	        public void widgetSelected(SelectionEvent evt) {
+    	            //open responsible Dialog and insert text
+    	            final SWTCalendarDialog cal = new SWTCalendarDialog(getDisplay(),l.getString("movies.groupdetail.datebuttonfinish"));
+
+                    cal.addDateChangedListener(new SWTCalendarListener() {
+                        public void dateChanged(SWTCalendarEvent calendarEvent) {
+                            textMoviesDate.setText( DateFormat.getDateInstance(DateFormat.LONG).format(calendarEvent.getCalendar().getTime()));
+                        }
+                    });
+
+                    if (textMoviesDate.getText() != null && textMoviesDate.getText().length() > 0) {
+                        try {
+                               cal.setDate(DateFormat.getDateInstance(DateFormat.LONG).parse(textMoviesDate.getText()));
+                        } catch (ParseException pe) {
+                        }
+                    }
+                    cal.open();                                                                	            
+    	        }
+    	    });  
+        }
         //labels and buttons for Detail
         {
     	    labelMoviesDescription = new Label(groupMoviesDetail, SWT.NONE);
@@ -960,8 +996,8 @@
                 textMoviesDate.setText("");
                 textMoviesDescription.setText("");
                 textMoviesTitle.setEditable(true);
-                textMoviesDate.setEditable(true);
                 textMoviesDescription.setEditable(true);
+                textMoviesSearch.setEditable(false);
                 
                 buttonMoviesCancel.setEnabled(true);
                 buttonMoviesSave.setEnabled(true);
@@ -976,8 +1012,8 @@
                 buttonMoviesDeleteGenres.setEnabled(true);
                 buttonMoviesAddImages.setEnabled(true);
                 buttonMoviesDeleteImages.setEnabled(true);
+                buttonMoviesChangeDate.setEnabled(true);
                 
-                textMoviesSearch.setEditable(false);
                 tableMoviesOverview.setEnabled(false);
                 tableMoviesDirectorsDetail.removeAll();
                 tableMoviesActorsDetail.removeAll();
@@ -1003,7 +1039,6 @@
                 textMoviesID.setEditable(false);
                 textMoviesTitle.setEditable(true);
                 textMoviesTitle.setFocus();
-                textMoviesDate.setEditable(true);
                 textMoviesDescription.setEditable(true);
                 
                 buttonMoviesCancel.setEnabled(true);
@@ -1019,6 +1054,7 @@
                 buttonMoviesDeleteGenres.setEnabled(true);
                 buttonMoviesAddImages.setEnabled(true);
                 buttonMoviesDeleteImages.setEnabled(true);
+                buttonMoviesChangeDate.setEnabled(true);
                 
                 tableMoviesOverview.setEnabled(false);
                 textMoviesSearch.setEnabled(false);
@@ -1138,6 +1174,7 @@
                     movie.setTitle(textMoviesTitle.getText());
                     movie.setDescription(textMoviesDescription.getText());
                     movie.setReleaseDate(new GregorianCalendar());
+                    movie.setRuntime(90);
                 }
                     /**
                      * @todo eine Exception bekommen wieder leider NOCH nicht mit
@@ -1207,7 +1244,7 @@
     /**
      * @param movie2
      */
-    protected void insertIntoMoviesOverviewTable(Movie movie2) {
+    private void insertIntoMoviesOverviewTable(Movie movie2) {
         // TODO Auto-generated method stub
         
     }
@@ -1215,12 +1252,11 @@
     /**
      * 
      */
-    protected void setMoviesGroupButtonSaveCancel() {
+    private void setMoviesGroupButtonSaveCancel() {
         tableMoviesOverview.setEnabled(true);
         textMoviesTitle.setEditable(false);
-        textMoviesDate.setEditable(false);
         textMoviesDescription.setEditable(false);
-        textMoviesSearch.setEnabled(true);
+        textMoviesSearch.setEditable(true);
         buttonMoviesCancel.setEnabled(false);
         buttonMoviesSave.setEnabled(false);
         buttonMoviesNew.setEnabled(true);
@@ -1234,12 +1270,13 @@
         buttonMoviesDeleteGenres.setEnabled(false);
         buttonMoviesAddImages.setEnabled(false);
         buttonMoviesDeleteImages.setEnabled(false);
+        buttonMoviesChangeDate.setEnabled(true);
     }
 
     /**
      * @param text
      */
-    protected void refreshMoviesOverviewTable(String filter) {
+    private void refreshMoviesOverviewTable(String filter) {
         // TODO Auto-generated method stub
         if (tableMoviesOverview == null) {
             System.out
@@ -1256,8 +1293,13 @@
 
             Movie o = (Movie) Movielist.get(i);
             item = new TableItem(tableMoviesOverview, SWT.NONE);
-            item.setText(new String[] { o.getMovieId() + "", o.getTitle(),
-                    o.getReleaseDate().getTime().toString() });
+            try {
+                item.setText(new String[] { o.getMovieId() + "", o.getTitle(),
+                        Util.getTextByDate(o.getReleaseDate()) });
+            } catch (DataBaseException e) {
+                // TODO Auto-generated catch block
+                e.printStackTrace();
+            }
 
         }
     }
@@ -1289,7 +1331,12 @@
         movie = object;
         textMoviesID.setText(object.getMovieId() + "");
         textMoviesTitle.setText(object.getTitle());
-        textMoviesDate.setText(object.getReleaseDate().getTime().toString());
+        try {
+            textMoviesDate.setText(Util.getTextByDate(object.getReleaseDate()));
+        } catch (DataBaseException e1) {
+            // TODO Auto-generated catch block
+            e1.printStackTrace();
+        }
         textMoviesDescription.setText(object.getDescription());
         
         TableItem item;
@@ -1344,7 +1391,7 @@
           
     }
 
-    protected void openDialogDescription() {
+    private void openDialogDescription() {
         // TODO Auto-generated method stub
         Shell dialogShell = new Shell();
         //Dialog dialogDescription=new Dialog(dialogShell);

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/movies.properties
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/movies.properties	2004-12-02 11:08:52 UTC (rev 193)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/movies.properties	2004-12-02 16:54:50 UTC (rev 194)
@@ -23,8 +23,8 @@
 movies.groupdetail.labelimages =Liste der Bilder
 movies.groupdetail.labeldescription =Beschreibung
 movies.groupdetail.textdate = (Beispiel: 01.01.2001)
+movies.groupdetail.datebuttonfinish = Fertig
 
-
 button.new =Neu
 button.edit =Bearbeiten
 button.delete =L?schen
@@ -33,8 +33,8 @@
 movies.button.editdescription =Beschreibung
 movies.button.additem =Hinzuf?gen
 movies.button.deleteitem =L?schen
+movies.button.changedate =?ndern
 
-
 movies.groupdetail.savebutton.warn.noname.title =Datensatz speichern
 movies.groupdetail.savebutton.warn.noname.msg =Der Datensatz kann nicht gespeichert werden. \n Bitte geben Sie eine volst?ndigen Namen an
 movies.groupdetail.savebutton.newok =Speichern des neuen Films erfolgreich.



From rgriesch at sheep.berlios.de  Thu Dec  2 18:36:43 2004
From: rgriesch at sheep.berlios.de (Remo Griesch at BerliOS)
Date: Thu, 2 Dec 2004 18:36:43 +0100
Subject: [Provirent-svn-commit] r195 - in project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui: . language
Message-ID: <200412021736.iB2Hahlx031191@sheep.berlios.de>

Author: rgriesch
Date: 2004-12-02 18:36:29 +0100 (Thu, 02 Dec 2004)
New Revision: 195

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/movies.properties
Log:
Composite Movie  - um Runtime erweitert

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java	2004-12-02 16:54:50 UTC (rev 194)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java	2004-12-02 17:36:29 UTC (rev 195)
@@ -96,12 +96,14 @@
     private Text textMoviesSearch;
     private Text textMoviesID;
     private Text textMoviesTitle;
+    private Text textMoviesRuntime;
     private Text textMoviesDescription;
     private Text textMoviesDate;
     
     private Label labelMoviesSearch;
     private Label labelMoviesID;
     private Label labelMoviesTitle;
+    private Label labelMoviesRuntime;
     private Label labelMoviesDate;
     private Label labelMoviesDescription;
     private Label labelMoviesDirectors;
@@ -463,6 +465,30 @@
     	    text1LData2.horizontalSpan = 5;
     	    text1LData2.grabExcessHorizontalSpace = true;
     	    textMoviesTitle.setLayoutData(text1LData2);        
+    	}
+        {
+            labelMoviesRuntime = new Label(
+                groupMoviesDetail,
+                SWT.NONE);
+            labelMoviesRuntime.setText(l
+                .getString("movies.groupdetail.labelruntime")
+                + ":");
+            labelMoviesRuntime.setSize(125, 15);
+            GridData labelRuntimeLData = new GridData();
+            labelRuntimeLData.heightHint = 15;
+            labelRuntimeLData.horizontalAlignment = GridData.FILL;
+            labelRuntimeLData.verticalAlignment = GridData.BEGINNING;
+            labelMoviesRuntime.setLayoutData(labelRuntimeLData);
+        }
+        {
+    	    textMoviesRuntime = new Text(groupMoviesDetail,
+    	            SWT.READ_ONLY | SWT.BORDER);
+    	    GridData text1LData2 = new GridData();
+    	    text1LData2.horizontalAlignment = GridData.FILL;
+    	    text1LData2.heightHint = 13;
+    	    text1LData2.horizontalSpan = 5;
+    	    text1LData2.grabExcessHorizontalSpace = true;
+    	    textMoviesRuntime.setLayoutData(text1LData2);        
     	}     
         {
             labelMoviesDate = new Label(
@@ -993,9 +1019,11 @@
                 
                 textMoviesID.setText("");
                 textMoviesTitle.setText("");
+                textMoviesRuntime.setText("");
                 textMoviesDate.setText("");
                 textMoviesDescription.setText("");
                 textMoviesTitle.setEditable(true);
+                textMoviesRuntime.setEditable(true);
                 textMoviesDescription.setEditable(true);
                 textMoviesSearch.setEditable(false);
                 
@@ -1038,6 +1066,7 @@
 
                 textMoviesID.setEditable(false);
                 textMoviesTitle.setEditable(true);
+                textMoviesRuntime.setEditable(true);
                 textMoviesTitle.setFocus();
                 textMoviesDescription.setEditable(true);
                 
@@ -1102,6 +1131,11 @@
                     textMoviesID.setText("");
                     textMoviesTitle.setText("");
                     textMoviesDate.setText("");
+                    textMoviesDescription.setText("");
+                    tableMoviesDirectorsDetail.removeAll();
+                    tableMoviesActorsDetail.removeAll();
+                    tableMoviesGenresDetail.removeAll();
+                    tableMoviesImagesDetail.removeAll();
                     //in Tabelle n?chsten ausw?hlen
                     try {
                         tableMoviesOverview.select(0);
@@ -1173,8 +1207,13 @@
                 if(mode_movie == ManagementGui.MODE_ADD)  {
                     movie.setTitle(textMoviesTitle.getText());
                     movie.setDescription(textMoviesDescription.getText());
-                    movie.setReleaseDate(new GregorianCalendar());
-                    movie.setRuntime(90);
+                    try {
+                        movie.setReleaseDate(Util.getDateByText(textMoviesDate.getText()));
+                    } catch (DataBaseException e1) {
+                        // TODO Auto-generated catch block
+                        e1.printStackTrace();
+                    }
+                    movie.setRuntime(Integer.parseInt(textMoviesRuntime.getText()));
                 }
                     /**
                      * @todo eine Exception bekommen wieder leider NOCH nicht mit
@@ -1375,11 +1414,12 @@
         //Fill Imagetable
         tableMoviesImagesDetail.removeAll();
         logger.debug("Anzahl der Bilder: "+object.getImages().size());
+        System.out.println(object.getImages().size());
         for (int i=0;i<object.getImages().size();i++)  {
             Image o=(Image)object.getImages().get(i);
             item = new TableItem(tableMoviesImagesDetail , SWT.NONE);
             item.setText(new String[] {o.getImageId() 
-                    + " ",o.getImageFileName()});
+                    + " ",o.getImageFileName()+ ""});
         }
         
         //Enable Buttons for Delete and Edit

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/movies.properties
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/movies.properties	2004-12-02 16:54:50 UTC (rev 194)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/movies.properties	2004-12-02 17:36:29 UTC (rev 195)
@@ -16,6 +16,7 @@
 movies.groupdetail.label =Detail
 movies.groupdetail.labelid =Film ID
 movies.groupdetail.labeltitle =Titel
+movies.groupdetail.labelruntime =Filml?nge (in min)
 movies.groupdetail.labeldate =Erscheinungsdatum
 movies.groupdetail.labeldirectors =Liste der Regisseure
 movies.groupdetail.labelactors =Liste der Darsteller



From sforstner at sheep.berlios.de  Thu Dec  2 19:03:31 2004
From: sforstner at sheep.berlios.de (Stefan at BerliOS)
Date: Thu, 2 Dec 2004 19:03:31 +0100
Subject: [Provirent-svn-commit] r196 - in project_src/provirent_hibernate/src/de/hsharz/provirent: management/gui persistence
Message-ID: <200412021803.iB2I3Ve8028883@sheep.berlios.de>

Author: sforstner
Date: 2004-12-02 19:03:30 +0100 (Thu, 02 Dec 2004)
New Revision: 196

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeCustomer.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/SWTCalendarDialog.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java
Log:


Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeCustomer.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeCustomer.java	2004-12-02 17:36:29 UTC (rev 195)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeCustomer.java	2004-12-02 18:03:30 UTC (rev 196)
@@ -4,6 +4,7 @@
 import java.text.MessageFormat;
 import java.text.ParseException;
 import java.util.Calendar;
+import java.util.Date;
 import java.util.Hashtable;
 import java.util.Locale;
 import java.util.PropertyResourceBundle;
@@ -90,23 +91,7 @@
     private Group groupCustomerOverview;
 
     private Group groupCustomerDetail;
-
-    private Label labelCustomerId;   
-    private Label labelCustomerName;
-    private Label labelduration1;
-    private Label labelduration2;
-    private Label labelduration3;
-    private Label labelstartdate;
     
-    private Text textCustomerID;
-    private Text textduration1;
-    private Text textduration2;
-    private Text textduration3;
-    private Text textstartdate;
-    
-    private Text textCustomerSearch;
-    private Label labelCustomerSearch;
-    
     private Button buttonCustomerCancel;
     private Button buttonCustomerSave;
     private Button buttonCustomerFill;
@@ -117,7 +102,6 @@
     private Table tableCustomer;
     private TableColumn tableColumn;
 
-    Hashtable list = null;
 
     private final static int MODE_EDIT = 2;
     
@@ -125,118 +109,66 @@
 
     private ResourceBundle l;
     
-    protected int mode_Customer;
+    private int mode_Customer;
+    
+    private Text textCustomerSearch;
+    private Label labelCustomerSearch;
+    
+    private Label labelCustomerId;       
+    private Text textCustomerID;
 
-
     private Label labelUserName;
-
-
     private Text textUserName;
 
-
     private Label labelLastName;
-
-
     private Text textLastName;
 
-
     private Label labelFirstName;
-
-
     private Text textFirstName;
 
-
     private Label labelMiddleName;
-
-
     private Text textMiddleName;
 
-
     private Label labelPassword;
-
-
     private Text textPassword;
 
-
     private Label labelRegistrationDate;
-
-
     private Text textRegistrationDate;
-
-
     private Button changeRegistrationDateButton;
-
-
+    
     private Label labelBirthday;
-
-
     private Text textBirthday;
-
-
+    private Button changeBirthdayDateButton;
+    
     private Label labelSalutation;
-
-
     private Text textSalutation;
-
-
+    
     private Label labelTitle;
-
-
     private Text textTitle;
-
-
+    
     private Label labelStreet;
-
-
     private Text textStreet;
-
-
-    private Label labelNumber;
-
-
     private Text textNumber;
 
-
     private Label labelZipCode;
-
-
     private Text textZipCode;
 
-
     private Label labelCountry;
-
-
     private Text textCountry;
 
-
-    private Label labelCityr;
-
-
     private Label labelCity;
-
-
     private Text textCity;
 
-
     private Label labelEmail;
-
-
     private Text textEmail;
 
-
     private Label labelQuestion;
-
-
     private Text textQuestion;
 
-
     private Label labelAnswer;
-
-
     private Text textAnswer;
 
-
-    private Button changeBirthdayDateButton;
+    private Customer localCustomer;
  
     /*
      * ?ndert die Sprache aller Elemente
@@ -575,31 +507,25 @@
                     cal.addDateChangedListener(new SWTCalendarListener() {
 
                         public void dateChanged(SWTCalendarEvent calendarEvent) {
-
-                            textRegistrationDate.setText( DateFormat.getDateInstance(DateFormat.LONG).format(calendarEvent.getCalendar().getTime()));
-
+                            String date;
+                            try {
+                                date = Util.getTextByDate(calendarEvent.getCalendar());
+                                textBirthday.setText(date);
+                            } catch (DataBaseException e) {
+                                // TODO Auto-generated catch block
+                                e.printStackTrace();
+                            }                     
                         }
-
                     });
-
-
-
-                    if (textRegistrationDate.getText() != null && textRegistrationDate.getText().length() > 0) {
-
+                    if (textBirthday.getText() != null && textBirthday.getText().length() > 0) {
                         try {
-                               cal.setDate(DateFormat.getDateInstance(DateFormat.LONG).parse(textRegistrationDate.getText()));
+                            Date date = Util.getDateByText(textBirthday.getText()).getTime();
+                            cal.setDate(date);
+                        } catch (DataBaseException dbe) {
 
-                        } catch (ParseException pe) {
-
-
-
                         }
-
                     }
-
-                    cal.open();                    
-                    
-                    
+                    cal.open();                                                          
                 }
             });
             text1LData3.horizontalAlignment = GridData.FILL;          
@@ -821,31 +747,25 @@
                     cal.addDateChangedListener(new SWTCalendarListener() {
 
                         public void dateChanged(SWTCalendarEvent calendarEvent) {
-
-                            textRegistrationDate.setText( DateFormat.getDateInstance(DateFormat.LONG).format(calendarEvent.getCalendar().getTime()));
-
+                            String date = null;
+                            try {
+                                date = Util.getTextByDate(calendarEvent.getCalendar());
+                                textRegistrationDate.setText(date);
+                            } catch (DataBaseException e) {
+                                // TODO Auto-generated catch block
+                                e.printStackTrace();
+                            }                          
                         }
-
                     });
-
-
-
                     if (textRegistrationDate.getText() != null && textRegistrationDate.getText().length() > 0) {
-
                         try {
-                               cal.setDate(DateFormat.getDateInstance(DateFormat.LONG).parse(textRegistrationDate.getText()));
+                            Date date = Util.getDateByText(textRegistrationDate.getText()).getTime();
+                            cal.setDate(date);
+                        } catch (DataBaseException dbe) {
 
-                        } catch (ParseException pe) {
-
-
-
                         }
-
                     }
-
-                    cal.open();                    
-                    
-                    
+                    cal.open();                                                          
                 }
             });
             text1LData3.horizontalAlignment = GridData.FILL;
@@ -970,7 +890,12 @@
                 textQuestion.setEditable(true);
                 textAnswer.setEditable(true);
                 changeRegistrationDateButton.setEnabled(true);
+                buttonCustomerCancel.setEnabled(true);
+                buttonCustomerSave.setEnabled(true);
+                buttonCustomerDelete.setEnabled(false);
+                buttonCustomerEdit.setEnabled(false);
                 
+                
 
             }
         });
@@ -1001,7 +926,11 @@
 	                Person p = new Person();
 	                o.setCustomerId(new Integer(Integer.parseInt(textCustomerID.getText())));
 	                o.setUserName(textUserName.getText());
-	                o.setDayOfRegistration(Util.getDateByText(textRegistrationDate.getText()).getTime());
+	                Date regdate = null;
+	                if (textRegistrationDate.getText() != null) {
+	                    regdate = Util.getDateByText(textRegistrationDate.getText()).getTime();
+	                }
+	                o.setDayOfRegistration(regdate);
 	                o.setUserPassword(textPassword.getText());
 	                o.setHiddenQuestion(textQuestion.getText());
 	                o.setHiddenAnswer(textAnswer.getText());
@@ -1016,13 +945,19 @@
 	                p.setCity(textCity.getText());
 	                p.setCountry(textCountry.getText());
 	                p.setEmailAddress(textEmail.getText());
-	                p.setDayOfBirth(Util.getDateByText(textBirthday.getText()));
+	                Calendar birthday = null;
+	                if (textBirthday.getText() != "") {
+	                    birthday = Util.getDateByText(textBirthday.getText());
+	                }
+	                p.setDayOfBirth(birthday);
 	                o.setPerson(p);
 	                
                     //object l?schen
                     // Fehlerbehandlung
-                    Database.deleteObject(o);
-
+	                
+                   // Database.deleteObject(o);
+	                Database.deleteObject(localCustomer);
+	                
                     //?bersichtsTabelle aktualisieren
                     refreshCustomerTable(textCustomerSearch.getText());
                     
@@ -1136,7 +1071,11 @@
                         Customer o = new Customer();
     	                Person p = new Person();
     	                o.setUserName(textUserName.getText());
-    	                o.setDayOfRegistration(Util.getDateByText(textRegistrationDate.getText()).getTime());
+    	                Date regdate = null;
+    	                if (textRegistrationDate.getText() != "") {
+    	                    regdate = Util.getDateByText(textRegistrationDate.getText()).getTime();
+    	                }   	          
+    	                o.setDayOfRegistration(regdate);
     	                o.setUserPassword(textPassword.getText());
     	                o.setHiddenQuestion(textQuestion.getText());
     	                o.setHiddenAnswer(textAnswer.getText());
@@ -1151,7 +1090,11 @@
     	                p.setCity(textCity.getText());
     	                p.setCountry(textCountry.getText());
     	                p.setEmailAddress(textEmail.getText());
-    	                p.setDayOfBirth(Util.getDateByText(textBirthday.getText()));
+    	                Calendar birthday = null;
+    	                if (textBirthday.getText() != "") {
+    	                    birthday = Util.getDateByText(textRegistrationDate.getText());
+    	                }
+    	                p.setDayOfBirth(birthday);
     	                o.setPerson(p);
                                         
                         //object speichern
@@ -1192,14 +1135,15 @@
                 } else if (mode_Customer == ManagementGui.MODE_EDIT) {
                     try {
                         
-                        Customer o = new Customer();
-    	                Person p = new Person();
+                        Customer o = localCustomer;
+    	                Person p = o.getPerson();
     	                o.setCustomerId(new Integer(Integer.parseInt(textCustomerID.getText())));
     	                o.setUserName(textUserName.getText());
     	                o.setDayOfRegistration(Util.getDateByText(textRegistrationDate.getText()).getTime());
     	                o.setUserPassword(textPassword.getText());
     	                o.setHiddenQuestion(textQuestion.getText());
     	                o.setHiddenAnswer(textAnswer.getText());
+    	                p.setPersonId(localCustomer.getPerson().getPersonId());
     	                p.setLastName(textLastName.getText());
     	                p.setFirstName(textFirstName.getText());
     	                p.setMiddleName(textMiddleName.getText());
@@ -1213,7 +1157,6 @@
     	                p.setEmailAddress(textEmail.getText());
     	                p.setDayOfBirth(Util.getDateByText(textBirthday.getText()));
     	                o.setPerson(p);
-	                    o.setCustomerId(new Integer(Integer.parseInt(textCustomerID.getText())));
 	                
 	                    //object speichern
 	                    // Fehlerbehandlung
@@ -1283,11 +1226,22 @@
         buttonCustomerNew.setEnabled(true);
         buttonCustomerDelete.setEnabled(true);
         textUserName.setEditable(false);
-        textduration1.setEditable(false);
-        textduration2.setEditable(false);
-        textduration3.setEditable(false);
-        //textstartdate.setEditable(false);
-        changeStartDateButton.setEnabled(false);
+        textLastName.setEditable(false);
+        textFirstName.setEditable(false);
+        textMiddleName.setEditable(false);
+        textSalutation.setEditable(false);
+        textTitle.setEditable(false);
+        changeBirthdayDateButton.setEnabled(false);
+        textStreet.setEditable(false);
+        textNumber.setEditable(false);
+        textZipCode.setEditable(false);
+        textCity.setEditable(false);
+        textCountry.setEditable(false);
+        textEmail.setEditable(false);
+        textPassword.setEditable(false);
+        textQuestion.setEditable(false);
+        textAnswer.setEditable(false);
+        changeRegistrationDateButton.setEnabled(false);
         textCustomerSearch.setEditable(true);
 
         // CustomerTabelle aktivieren
@@ -1302,16 +1256,23 @@
      * @param Customer
      * @throws DataBaseException
      */
-    protected void insertIntoCustomerTable(Customer Customer) throws DataBaseException {
+    protected void insertIntoCustomerTable(Customer customer) throws DataBaseException {
         TableItem item = new TableItem(tableCustomer, SWT.NONE);
-        Calendar regdate = Calendar.getInstance();
-        regdate.setTime(Customer.getDayOfRegistration());
-        item.setText(new String[] { Customer.getCustomerId() + "", 
-                					Customer.getUserName(), 
-                					Customer.getPerson().getLastName(),
-                					Customer.getPerson().getFirstName(),
-                					Util.getTextByDate(Customer.getPerson().getDayOfBirth()),
-                					Util.getTextByDate(regdate),              					
+        String birthday = "";
+        if (customer.getPerson().getDayOfBirth() != null) {
+            birthday = Util.getTextByDate(customer.getPerson().getDayOfBirth());
+        }
+        String regdate = "";
+        if (customer.getDayOfRegistration() != null) {
+            Calendar cal = Calendar.getInstance();
+            cal.setTime(customer.getDayOfRegistration());
+            birthday = Util.getTextByDate(cal);            
+        }
+        item.setText(new String[] { customer.getCustomerId() + "", 
+                					customer.getUserName(), 
+                					customer.getPerson().getLastName(),
+                					customer.getPerson().getFirstName(),
+                					birthday,              					
                 					});
         
         tableCustomer.deselectAll();
@@ -1485,15 +1446,7 @@
         tableCustomer.setHeaderVisible(true);
         tableCustomer.setLinesVisible(true);
         GridData table2LData = new GridData();
-        tableCustomer.addFocusListener(new FocusAdapter() {
-            public void focusLost(FocusEvent evt) {
-                System.out.println("tableCustomer.focusLost, event=" + evt);
-            }
-            public void focusGained(FocusEvent evt) {
-                System.out
-                    .println("tableCustomer.focusGained, event=" + evt);
-            }
-        });
+
         tableCustomer.addSelectionListener(new SelectionAdapter() {
             public void widgetSelected(SelectionEvent evt) {
                 if (logger.isDebugEnabled()) {
@@ -1581,6 +1534,8 @@
 	            //id ist keine Zahl
 	            return;
 	        }
+	        localCustomer = object;
+	        
 	        String temp = null;
 	        textCustomerID.setText(object.getCustomerId().toString());
 	        temp = object.getUserName();
@@ -1613,46 +1568,55 @@
 	        textQuestion.setText(temp == null ? "" : temp);
 	        temp = object.getHiddenAnswer();
 	        textAnswer.setText(temp == null ? "" : temp);
-	        Calendar regdate = Calendar.getInstance();
-	        regdate.setTime(object.getDayOfRegistration());
+	        
 	        try {
 	            String date = null;
+	            String regdate = null;
 	            if (object.getPerson().getDayOfBirth() == null) {
 	                date = "";
 	            } else {
 	                date = Util.getTextByDate(object.getPerson().getDayOfBirth());
 	            }
                 textBirthday.setText(date);
+                if (object.getDayOfRegistration() == null) {
+                    regdate = "";
+                } else {
+                    Calendar cal = Calendar.getInstance();
+        	        cal.setTime(object.getDayOfRegistration());
+        	        regdate = Util.getTextByDate(cal);
+                }
+                textRegistrationDate.setText(regdate);
             } catch (DataBaseException e1) {
                 // TODO Auto-generated catch block
                 e1.printStackTrace();
             }
 	        
 	        //Buttons zum l?schen und editieren aktivieren
-	        /*
-	        buttonCustomerEdit.setEnabled(false);
+	        
+	        buttonCustomerEdit.setEnabled(true);
 	        buttonCustomerDelete.setEnabled(true);
-	        Vector vec = (Vector) list.get(object.getName());
 	        
-	        for (int i = 0; i < vec.size(); i++) {
-	            Calendar date = (Calendar) vec.get(i);
-	            try {
-	                if (Util.getTextByDate(date).equals(Util.getTextByDate(object.getStartdate()))) {
-	                    buttonCustomerEdit.setEnabled(true);
-	                    
-	                }
-	            } catch (DataBaseException e1) {
-	                // TODO Auto-generated catch block
-	                e1.printStackTrace();
-	            }
-	        }*/
         } else {
+//          Detailansicht leeren
             textCustomerID.setText("");
             textUserName.setText("");
-            textduration1.setText("");
-            textduration2.setText("");
-            textduration3.setText("");
-            textstartdate.setText("");
+            textLastName.setText("");
+            textFirstName.setText("");
+            textMiddleName.setText("");
+            textSalutation.setText("");
+            textTitle.setText("");
+            textBirthday.setText("");
+            textStreet.setText("");
+            textNumber.setText("");
+            textZipCode.setText("");
+            textCity.setText("");
+            textCountry.setText("");
+            textEmail.setText("");
+            textPassword.setText("");
+            textQuestion.setText("");
+            textAnswer.setText("");
+            textRegistrationDate.setText("");
+            
             buttonCustomerEdit.setEnabled(false);
             buttonCustomerDelete.setEnabled(false);
         }

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/SWTCalendarDialog.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/SWTCalendarDialog.java	2004-12-02 17:36:29 UTC (rev 195)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/SWTCalendarDialog.java	2004-12-02 18:03:30 UTC (rev 196)
@@ -1,6 +1,6 @@
 package de.hsharz.provirent.management.gui;
 
-import java.text.DateFormat;import java.util.Calendar;import java.util.Date;import org.eclipse.swt.SWT;import org.eclipse.swt.events.SelectionAdapter;import org.eclipse.swt.events.SelectionEvent;import org.eclipse.swt.layout.GridData;import org.eclipse.swt.layout.GridLayout;import org.eclipse.swt.layout.RowLayout;import org.eclipse.swt.widgets.Button;import org.eclipse.swt.widgets.Display;import org.eclipse.swt.widgets.Shell;import org.vafada.swtcalendar.SWTCalendar;import org.vafada.swtcalendar.SWTCalendarEvent;import org.vafada.swtcalendar.SWTCalendarListener;
+import java.util.Calendar;import java.util.Date;import org.eclipse.swt.SWT;import org.eclipse.swt.events.SelectionAdapter;import org.eclipse.swt.events.SelectionEvent;import org.eclipse.swt.layout.GridData;import org.eclipse.swt.layout.GridLayout;import org.eclipse.swt.widgets.Button;import org.eclipse.swt.widgets.Display;import org.eclipse.swt.widgets.Shell;import org.vafada.swtcalendar.SWTCalendar;import org.vafada.swtcalendar.SWTCalendarListener;
 
 /*** This code was generated using CloudGarden's Jigloo* SWT/Swing GUI Builder, which is free for non-commercial* use. If Jigloo is being used commercially (ie, by a corporation,* company or business for any purpose whatever) then you* should purchase a license for each developer using Jigloo.* Please visit www.cloudgarden.com for details.* Use of Jigloo implies acceptance of these licensing terms.* ************************************** A COMMERCIAL LICENSE HAS NOT BEEN PURCHASED* for this machine, so Jigloo or this code cannot be used legally* for any corporate or commercial purpose.* **************************************/public class SWTCalendarDialog {
     private Shell shell;

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java	2004-12-02 17:36:29 UTC (rev 195)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java	2004-12-02 18:03:30 UTC (rev 196)
@@ -314,7 +314,9 @@
                 tx = s.beginTransaction();
                 
                 try{
+                    
                     s.delete(o);
+                    
                 
                 } catch (HibernateException e) {
                     logger.error("deleteObject(). Fehler beim Speichern/Updaten "



From pschneider at sheep.berlios.de  Thu Dec  2 19:14:17 2004
From: pschneider at sheep.berlios.de (Philipp Schneider at BerliOS)
Date: Thu, 2 Dec 2004 19:14:17 +0100
Subject: [Provirent-svn-commit] r197 - in project_src/provirent_hibernate/src/de/hsharz/provirent: . management/gui
Message-ID: <200412021814.iB2IEHQT029386@sheep.berlios.de>

Author: pschneider
Date: 2004-12-02 19:14:16 +0100 (Thu, 02 Dec 2004)
New Revision: 197

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/Util.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositePayment.java
Log:


Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/Util.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/Util.java	2004-12-02 18:03:30 UTC (rev 196)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/Util.java	2004-12-02 18:14:16 UTC (rev 197)
@@ -124,12 +124,11 @@
         }
     }
 
-    
-    public static String formatCalendar(Calendar cal){
-        
+    public static String formatCalendar(Calendar cal) {
+
         return "";
     }
-    
+
     public static void main(String[] args) {
         Util h = new Util();
 
@@ -139,28 +138,23 @@
      * @param text
      * @return
      */
-    public static Calendar getDateByText(String textdate) throws DataBaseException {
-        StringTokenizer tokenizer = new StringTokenizer(textdate, ".");
-        Vector vec = new Vector();
+    public static Calendar getDateByText(String textdate) throws ParseException {
         SimpleDateFormat format = new SimpleDateFormat("dd.MM.yyyy");
         Calendar date = Calendar.getInstance();
-        try {
-            date.setTime(format.parse(textdate));
-        } catch (ParseException e) {
-            // TODO Auto-generated catch block
-            e.printStackTrace();
-        }
+
+        date.setTime(format.parse(textdate));
+
         return date;
     }
-    
-    public static String getTextByDate(Calendar date) throws DataBaseException {
+
+    public static String getTextByDate(Calendar date) {
         SimpleDateFormat format = new SimpleDateFormat("dd.MM.yyyy");
-        
+
         return format.format(date.getTime());
     }
-    
+
     public static int compareDates(Calendar Date1, Calendar Date2) {
-        
+
         return 0;
     }
 }
\ No newline at end of file

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java	2004-12-02 18:03:30 UTC (rev 196)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java	2004-12-02 18:14:16 UTC (rev 197)
@@ -4,6 +4,7 @@
 import java.text.MessageFormat;
 import java.text.ParseException;
 import java.util.ArrayList;
+import java.util.Calendar;
 import java.util.GregorianCalendar;
 import java.util.Locale;
 import java.util.PropertyResourceBundle;
@@ -44,21 +45,20 @@
 import de.hsharz.provirent.objects.Movie;
 import de.hsharz.provirent.persistence.DataBaseException;
 import de.hsharz.provirent.persistence.Database;
+
 /**
-* This code was generated using CloudGarden's Jigloo
-* SWT/Swing GUI Builder, which is free for non-commercial
-* use. If Jigloo is being used commercially (ie, by a corporation,
-* company or business for any purpose whatever) then you
-* should purchase a license for each developer using Jigloo.
-* Please visit www.cloudgarden.com for details.
-* Use of Jigloo implies acceptance of these licensing terms.
-* *************************************
-* A COMMERCIAL LICENSE HAS NOT BEEN PURCHASED
-* for this machine, so Jigloo or this code cannot be used legally
-* for any corporate or commercial purpose.
-* *************************************
-*/
-public class CompositeMovie extends de.hsharz.provirent.management.gui.AbstractComposite {
+ * This code was generated using CloudGarden's Jigloo SWT/Swing GUI Builder,
+ * which is free for non-commercial use. If Jigloo is being used commercially
+ * (ie, by a corporation, company or business for any purpose whatever) then you
+ * should purchase a license for each developer using Jigloo. Please visit
+ * www.cloudgarden.com for details. Use of Jigloo implies acceptance of these
+ * licensing terms. ************************************* A COMMERCIAL LICENSE
+ * HAS NOT BEEN PURCHASED for this machine, so Jigloo or this code cannot be
+ * used legally for any corporate or commercial purpose.
+ * *************************************
+ */
+public class CompositeMovie extends
+        de.hsharz.provirent.management.gui.AbstractComposite {
 
     {
         //Register as a resource user - SWTResourceManager will
@@ -66,85 +66,130 @@
         SWTResourceManager.registerResourceUser(this);
     }
 
-
     /**
      * Logger for this class
      */
     private static final Logger logger = Logger
             .getLogger(CompositeActors.class);
-    
-    
+
     private final static int MODE_VIEW = 0;
+
     private final static int MODE_ADD = 1;
+
     private final static int MODE_EDIT = 2;
-    
+
     private Table tableMoviesOverview;
+
     private Table tableMoviesDirectorsDetail;
+
     private Table tableMoviesActorsDetail;
+
     private Table tableMoviesGenresDetail;
+
     private Table tableMoviesImagesDetail;
+
     private TableColumn tableMoviesDetail_ColumnID;
+
     private TableColumn tableMoviesDetail_ColumnName;
+
     private TableColumn tableMoviesOverview_ColumnID;
+
     private TableColumn tableMoviesOverview_ColumnTitle;
+
     private TableColumn tableMoviesOverview_ColumnDate;
-       
+
     private Group groupMovie;
+
     private Group groupMoviesOverview;
+
     private Group groupMoviesDetail;
-    
+
     private Text textMoviesSearch;
+
     private Text textMoviesID;
+
     private Text textMoviesTitle;
+
     private Text textMoviesRuntime;
+
     private Text textMoviesDescription;
+
     private Text textMoviesDate;
-    
+
     private Label labelMoviesSearch;
+
     private Label labelMoviesID;
+
     private Label labelMoviesTitle;
+
     private Label labelMoviesRuntime;
+
     private Label labelMoviesDate;
+
     private Label labelMoviesDescription;
+
     private Label labelMoviesDirectors;
+
     private Label labelMoviesActors;
+
     private Label labelMoviesGenres;
+
     private Label labelMoviesImages;
-    
+
     private Button buttonMoviesNew;
+
     private Button buttonMoviesSave;
+
     private Button buttonMoviesEdit;
+
     private Button buttonMoviesCancel;
+
     private Button buttonMoviesDelete;
+
     private Button buttonMoviesFill;
+
     private Button buttonMoviesAddActors;
+
     private Button buttonMoviesDeleteActors;
+
     private Button buttonMoviesAddDirectors;
+
     private Button buttonMoviesDeleteDirectors;
+
     private Button buttonMoviesAddGenres;
+
     private Button buttonMoviesDeleteGenres;
+
     private Button buttonMoviesAddImages;
+
     private Button buttonMoviesDeleteImages;
-    private Button buttonMoviesChangeDate; 
-    
+
+    private Button buttonMoviesChangeDate;
+
     private SashForm sashForm1;
-    
+
     private Composite parent;
+
     private Composite compositeButtons;
+
     private Composite compositeMoviesEditDirectors;
+
     private Composite compositeMoviesEditActors;
+
     private Composite compositeMoviesEditGenres;
+
     private Composite compositeMoviesEditImages;
-    
+
     private int mode_movie;
-    
+
     private StatusLineStyledText statusLine;
-    
+
     private ResourceBundle l;
+
     private Locale locale;
-    
+
     private Movie movie;
-    
+
     /*
      * ?ndert die Sprache aller Elemente
      * 
@@ -154,8 +199,9 @@
 
     }
 
-    /* 
+    /*
      * Init die Sprache (properties Datei)
+     * 
      * @see de.hsharz.provirent.managment.gui.AbstractComposite#initLanguage(java.util.Locale)
      */
     public void initLanguage(Locale locale) {
@@ -164,53 +210,49 @@
                 "de.hsharz.provirent.management.gui.language.movies", locale);
 
     }
-    
-    
-    
-	/**
-	* Auto-generated main method to display this 
-	* de.hsharz.provirent.management.gui.AbstractComposite inside a new Shell.
-	*/
-	public static void main(String[] args) {
-		showGUI();
-	}
-		
-	/**
-	* Auto-generated method to display this 
-	* de.hsharz.provirent.management.gui.AbstractComposite inside a new Shell.
-	*/
-	/**
-	* Auto-generated method to display this 
-	* org.eclipse.swt.widgets.Composite inside a new Shell.
-	*/
-	public static void showGUI() {
-		Display display = Display.getDefault();
-		Shell shell = new Shell(display);
 
-		shell.open();
-		while (!shell.isDisposed()) {
-			if (!display.readAndDispatch())
-				display.sleep();
-		}
-	}
+    /**
+     * Auto-generated main method to display this
+     * de.hsharz.provirent.management.gui.AbstractComposite inside a new Shell.
+     */
+    public static void main(String[] args) {
+        showGUI();
+    }
 
-	public CompositeMovie(Composite p, int style,
-            StatusLineStyledText status, Locale l) {
-	    super(p, style, status, l);
+    /**
+     * Auto-generated method to display this
+     * de.hsharz.provirent.management.gui.AbstractComposite inside a new Shell.
+     */
+    /**
+     * Auto-generated method to display this org.eclipse.swt.widgets.Composite
+     * inside a new Shell.
+     */
+    public static void showGUI() {
+        Display display = Display.getDefault();
+        Shell shell = new Shell(display);
+
+        shell.open();
+        while (!shell.isDisposed()) {
+            if (!display.readAndDispatch())
+                display.sleep();
+        }
+    }
+
+    public CompositeMovie(Composite p, int style, StatusLineStyledText status,
+            Locale l) {
+        super(p, style, status, l);
         parent = p;
         //Statusline wird gestzt
         statusLine = status;
-        
+
         locale = l;
         //sprache wird init
         initLanguage(locale);
-	    
-	    
-		initGUI();
-	}
 
+        initGUI();
+    }
 
-	private void initGUI() {
+    private void initGUI() {
         if (logger.isDebugEnabled()) {
             logger.debug("initGUI() - start");
         }
@@ -237,8 +279,7 @@
                 sashForm1LData.grabExcessHorizontalSpace = true;
                 sashForm1LData.grabExcessVerticalSpace = true;
                 sashForm1.setLayoutData(sashForm1LData);
-                
-               
+
             }
             // init the rest of the layout
             initMoviesOverview();
@@ -248,27 +289,27 @@
 
         this.layout();
 
-
-        
         if (logger.isDebugEnabled()) {
             logger.debug("initGUI() - end");
         }
-	}
+    }
 
     /**
-     * 
+     *  
      */
     private void initMoviesOverview() {
-	    //	  Group Movies Overview 
+        //	  Group Movies Overview
         {
-            groupMoviesOverview = new Group(sashForm1,SWT.NONE);
+            groupMoviesOverview = new Group(sashForm1, SWT.NONE);
             GridLayout group1Layout = new GridLayout();
             group1Layout.numColumns = 8;
             groupMoviesOverview.setLayout(group1Layout);
-            groupMoviesOverview.setText(l.getString("movies.groupoverview.label"));
-            
+            groupMoviesOverview.setText(l
+                    .getString("movies.groupoverview.label"));
+
             {// table Actors Overview
-                tableMoviesOverview = new Table(groupMoviesOverview, SWT.SINGLE | SWT.FULL_SELECTION | SWT.V_SCROLL | SWT.BORDER);
+                tableMoviesOverview = new Table(groupMoviesOverview, SWT.SINGLE
+                        | SWT.FULL_SELECTION | SWT.V_SCROLL | SWT.BORDER);
                 GridData tableMoviesOverviewLData = new GridData();
                 tableMoviesOverview.setHeaderVisible(true);
                 tableMoviesOverview.setLinesVisible(true);
@@ -279,74 +320,73 @@
                 tableMoviesOverviewLData.grabExcessVerticalSpace = true;
                 tableMoviesOverview.setLayoutData(tableMoviesOverviewLData);
                 tableMoviesOverview.addFocusListener(new FocusAdapter() {
-                        public void focusLost(FocusEvent evt) {
-                            System.out
+                    public void focusLost(FocusEvent evt) {
+                        System.out
                                 .println("tableMoviesOverview.focusLost, event="
-                                    + evt);
-                        }
-                        public void focusGained(FocusEvent evt) {
-                            System.out
+                                        + evt);
+                    }
+
+                    public void focusGained(FocusEvent evt) {
+                        System.out
                                 .println("tableMoviesOverview.focusGained, event="
-                                    + evt);
-                        }
-                    });
-                tableMoviesOverview.addSelectionListener(new SelectionAdapter() {
-                        public void widgetSelected(SelectionEvent evt) {
-                            if (logger.isDebugEnabled()) {
-                                logger
-                                    .debug("widgetSelected(SelectionEvent evt = "
-                                        + evt
-                                        + ") - start");
-                            }
+                                        + evt);
+                    }
+                });
+                tableMoviesOverview
+                        .addSelectionListener(new SelectionAdapter() {
+                            public void widgetSelected(SelectionEvent evt) {
+                                if (logger.isDebugEnabled()) {
+                                    logger
+                                            .debug("widgetSelected(SelectionEvent evt = "
+                                                    + evt + ") - start");
+                                }
 
-                            int index = tableMoviesOverview
-                                .getSelectionIndex();
+                                int index = tableMoviesOverview
+                                        .getSelectionIndex();
 
-                            System.out.println("Table select. id: "
-                                + index
-                                + " TableItem:"
-                                + tableMoviesOverview.getItem(index)
-                                + " id: "
-                                + tableMoviesOverview.getItem(index)
-                                    .getText(0));
+                                System.out.println("Table select. id: "
+                                        + index
+                                        + " TableItem:"
+                                        + tableMoviesOverview.getItem(index)
+                                        + " id: "
+                                        + tableMoviesOverview.getItem(index)
+                                                .getText(0));
 
-                            //es wurde ein Element aus Tabelle ausgewaehlt jetzt muss die
-                            //Detailansicht aktualisiert werden
-                            refreshMoviesDetail(tableMoviesOverview.getItem(index)
-                                                              .getText(0));
+                                //es wurde ein Element aus Tabelle ausgewaehlt
+                                // jetzt muss die
+                                //Detailansicht aktualisiert werden
+                                refreshMoviesDetail(tableMoviesOverview
+                                        .getItem(index).getText(0));
 
-                            if (logger.isDebugEnabled()) {
-                                logger
-                                    .debug("widgetSelected(SelectionEvent) - end");
+                                if (logger.isDebugEnabled()) {
+                                    logger
+                                            .debug("widgetSelected(SelectionEvent) - end");
+                                }
                             }
-                        }
-                    });
+                        });
                 {
                     tableMoviesOverview_ColumnID = new TableColumn(
-                        tableMoviesOverview,
-                        SWT.CENTER);
+                            tableMoviesOverview, SWT.CENTER);
                     tableMoviesOverview_ColumnID.setText(l
-                        .getString("movies.groupoverview.columnid"));
+                            .getString("movies.groupoverview.columnid"));
                     tableMoviesOverview_ColumnID.setWidth(40);
                 }
                 {
                     tableMoviesOverview_ColumnTitle = new TableColumn(
-                        tableMoviesOverview,
-                        SWT.CENTER);
+                            tableMoviesOverview, SWT.CENTER);
                     tableMoviesOverview_ColumnTitle.setText(l
-                        .getString("movies.groupoverview.columntitle"));
+                            .getString("movies.groupoverview.columntitle"));
                     tableMoviesOverview_ColumnTitle.setWidth(120);
                 }
                 {
                     tableMoviesOverview_ColumnDate = new TableColumn(
-                        tableMoviesOverview,
-                        SWT.CENTER);
+                            tableMoviesOverview, SWT.CENTER);
                     tableMoviesOverview_ColumnDate.setText(l
-                        .getString("movies.groupoverview.columndate"));
+                            .getString("movies.groupoverview.columndate"));
                     tableMoviesOverview_ColumnDate.setWidth(120);
                 }
             }// table Movies Overview
-           
+
             // Search
             {
                 //label for Search
@@ -364,8 +404,9 @@
                 textMoviesSearch.addFocusListener(new FocusAdapter() {
                     public void focusLost(FocusEvent evt) {
                         if (logger.isDebugEnabled()) {
-                            logger.debug("focusLost(FocusEvent evt = " + evt + " "
-                                    + textMoviesSearch.getText() + ") - start");
+                            logger.debug("focusLost(FocusEvent evt = " + evt
+                                    + " " + textMoviesSearch.getText()
+                                    + ") - start");
                         }
 
                         refreshMoviesOverviewTable(textMoviesSearch.getText());
@@ -375,32 +416,34 @@
                         }
                     }
                 });
-                textMoviesSearch.addListener(SWT.DefaultSelection, new Listener() {
-                    public void handleEvent(Event e) {
-                        if (logger.isDebugEnabled()) {
-                            logger.debug("handleEvent(Event e = " + e + " "
-                                    + textMoviesSearch.getText() + ") - start");
-                        }
+                textMoviesSearch.addListener(SWT.DefaultSelection,
+                        new Listener() {
+                            public void handleEvent(Event e) {
+                                if (logger.isDebugEnabled()) {
+                                    logger.debug("handleEvent(Event e = " + e
+                                            + " " + textMoviesSearch.getText()
+                                            + ") - start");
+                                }
 
-                        refreshMoviesOverviewTable(textMoviesSearch.getText());
+                                refreshMoviesOverviewTable(textMoviesSearch
+                                        .getText());
 
-                        if (logger.isDebugEnabled()) {
-                            logger.debug("handleEvent(Event) - end");
-                        }
-                    }
-                    
-                });
+                                if (logger.isDebugEnabled()) {
+                                    logger.debug("handleEvent(Event) - end");
+                                }
+                            }
+
+                        });
                 text2LData.horizontalAlignment = GridData.FILL;
                 text2LData.horizontalSpan = 5;
                 text2LData.grabExcessHorizontalSpace = true;
                 textMoviesSearch.setLayoutData(text2LData);
-            }// Search                    
+            }// Search
         }
     }
 
-
     /**
-     * 
+     *  
      */
     private void initMoviesDetail() {
         // Group Actors Detail
@@ -410,7 +453,7 @@
             GridData group2LData = new GridData();
             group2Layout.verticalSpacing = 15;
             group2Layout.numColumns = 6;
-            groupMoviesDetail.setText(l.getString("movies.groupdetail.label"));   
+            groupMoviesDetail.setText(l.getString("movies.groupdetail.label"));
             FormData formData = new FormData();
             groupMoviesDetail.setLayout(group2Layout);
             formData.right = new FormAttachment(100, 100, -5);
@@ -418,37 +461,33 @@
             formData.bottom = new FormAttachment(100, 100, -5);
             groupMoviesDetail.setLayoutData(formData);
         }
-//      labels and text for detail
-    	{
-    	    labelMoviesID = new Label(groupMoviesDetail, SWT.NONE);
-    	    labelMoviesID.setText(l
-    	            .getString("movies.groupdetail.labelid")
-    	            + ":");
-    	    labelMoviesID.setSize(125, 15);
-    	    GridData formData2 = new GridData();
-    	    formData2.heightHint = 15;
-    	    formData2.horizontalAlignment = GridData.FILL;
-    	    formData2.verticalAlignment = GridData.BEGINNING;
-    	    labelMoviesID.setLayoutData(formData2);
-    	}
-    	{
-    	    textMoviesID = new Text(
-    	            groupMoviesDetail,
-    	            SWT.READ_ONLY | SWT.BORDER);
-    	    GridData text1LData1 = new GridData();
-    	    text1LData1.horizontalAlignment = GridData.FILL;
-    	    text1LData1.heightHint = 13;
-    	    text1LData1.horizontalSpan = 5;
-    	    text1LData1.grabExcessHorizontalSpace = true;
-    	    textMoviesID.setLayoutData(text1LData1);
-    	}
-    	{
-            labelMoviesTitle = new Label(
-                groupMoviesDetail,
-                SWT.NONE);
+        //      labels and text for detail
+        {
+            labelMoviesID = new Label(groupMoviesDetail, SWT.NONE);
+            labelMoviesID.setText(l.getString("movies.groupdetail.labelid")
+                    + ":");
+            labelMoviesID.setSize(125, 15);
+            GridData formData2 = new GridData();
+            formData2.heightHint = 15;
+            formData2.horizontalAlignment = GridData.FILL;
+            formData2.verticalAlignment = GridData.BEGINNING;
+            labelMoviesID.setLayoutData(formData2);
+        }
+        {
+            textMoviesID = new Text(groupMoviesDetail, SWT.READ_ONLY
+                    | SWT.BORDER);
+            GridData text1LData1 = new GridData();
+            text1LData1.horizontalAlignment = GridData.FILL;
+            text1LData1.heightHint = 13;
+            text1LData1.horizontalSpan = 5;
+            text1LData1.grabExcessHorizontalSpace = true;
+            textMoviesID.setLayoutData(text1LData1);
+        }
+        {
+            labelMoviesTitle = new Label(groupMoviesDetail, SWT.NONE);
             labelMoviesTitle.setText(l
-                .getString("movies.groupdetail.labeltitle")
-                + ":");
+                    .getString("movies.groupdetail.labeltitle")
+                    + ":");
             labelMoviesTitle.setSize(125, 15);
             GridData labelActorNameLData = new GridData();
             labelActorNameLData.heightHint = 15;
@@ -457,22 +496,20 @@
             labelMoviesTitle.setLayoutData(labelActorNameLData);
         }
         {
-    	    textMoviesTitle = new Text(groupMoviesDetail,
-    	            SWT.READ_ONLY | SWT.BORDER);
-    	    GridData text1LData2 = new GridData();
-    	    text1LData2.horizontalAlignment = GridData.FILL;
-    	    text1LData2.heightHint = 13;
-    	    text1LData2.horizontalSpan = 5;
-    	    text1LData2.grabExcessHorizontalSpace = true;
-    	    textMoviesTitle.setLayoutData(text1LData2);        
-    	}
+            textMoviesTitle = new Text(groupMoviesDetail, SWT.READ_ONLY
+                    | SWT.BORDER);
+            GridData text1LData2 = new GridData();
+            text1LData2.horizontalAlignment = GridData.FILL;
+            text1LData2.heightHint = 13;
+            text1LData2.horizontalSpan = 5;
+            text1LData2.grabExcessHorizontalSpace = true;
+            textMoviesTitle.setLayoutData(text1LData2);
+        }
         {
-            labelMoviesRuntime = new Label(
-                groupMoviesDetail,
-                SWT.NONE);
+            labelMoviesRuntime = new Label(groupMoviesDetail, SWT.NONE);
             labelMoviesRuntime.setText(l
-                .getString("movies.groupdetail.labelruntime")
-                + ":");
+                    .getString("movies.groupdetail.labelruntime")
+                    + ":");
             labelMoviesRuntime.setSize(125, 15);
             GridData labelRuntimeLData = new GridData();
             labelRuntimeLData.heightHint = 15;
@@ -481,22 +518,19 @@
             labelMoviesRuntime.setLayoutData(labelRuntimeLData);
         }
         {
-    	    textMoviesRuntime = new Text(groupMoviesDetail,
-    	            SWT.READ_ONLY | SWT.BORDER);
-    	    GridData text1LData2 = new GridData();
-    	    text1LData2.horizontalAlignment = GridData.FILL;
-    	    text1LData2.heightHint = 13;
-    	    text1LData2.horizontalSpan = 5;
-    	    text1LData2.grabExcessHorizontalSpace = true;
-    	    textMoviesRuntime.setLayoutData(text1LData2);        
-    	}     
+            textMoviesRuntime = new Text(groupMoviesDetail, SWT.READ_ONLY
+                    | SWT.BORDER);
+            GridData text1LData2 = new GridData();
+            text1LData2.horizontalAlignment = GridData.FILL;
+            text1LData2.heightHint = 13;
+            text1LData2.horizontalSpan = 5;
+            text1LData2.grabExcessHorizontalSpace = true;
+            textMoviesRuntime.setLayoutData(text1LData2);
+        }
         {
-            labelMoviesDate = new Label(
-                groupMoviesDetail,
-                SWT.NONE);
-            labelMoviesDate.setText(l
-                .getString("movies.groupdetail.labeldate")
-                + ":");
+            labelMoviesDate = new Label(groupMoviesDetail, SWT.NONE);
+            labelMoviesDate.setText(l.getString("movies.groupdetail.labeldate")
+                    + ":");
             labelMoviesDate.setSize(125, 15);
             GridData labelActorNameLData = new GridData();
             labelActorNameLData.heightHint = 15;
@@ -506,7 +540,7 @@
         }
         {
             textMoviesDate = new Text(groupMoviesDetail, SWT.READ_ONLY
-                | SWT.BORDER);
+                    | SWT.BORDER);
             GridData text1LData2 = new GridData();
             text1LData2.horizontalAlignment = GridData.FILL;
             text1LData2.heightHint = 13;
@@ -516,58 +550,68 @@
             textMoviesDate.setText(l.getString("movies.groupdetail.textdate"));
         }
         {
-    	    buttonMoviesChangeDate = new Button(groupMoviesDetail, SWT.NONE);
-    	    buttonMoviesChangeDate.setText(l
-    	            .getString("movies.button.changedate"));
-    	    buttonMoviesChangeDate.setEnabled(false);
-    	    GridData text1LData2 = new GridData();
-    	    text1LData2.horizontalAlignment = GridData.FILL;
-    	    text1LData2.heightHint = 20;
-    	    text1LData2.horizontalSpan =1;
-    	    buttonMoviesChangeDate.setLayoutData(text1LData2);        
-    	    buttonMoviesChangeDate.addSelectionListener(new SelectionAdapter() {
-    	        public void widgetSelected(SelectionEvent evt) {
-    	            //open responsible Dialog and insert text
-    	            final SWTCalendarDialog cal = new SWTCalendarDialog(getDisplay(),l.getString("movies.groupdetail.datebuttonfinish"));
+            buttonMoviesChangeDate = new Button(groupMoviesDetail, SWT.NONE);
+            buttonMoviesChangeDate.setText(l
+                    .getString("movies.button.changedate"));
+            buttonMoviesChangeDate.setEnabled(false);
+            GridData text1LData2 = new GridData();
+            text1LData2.horizontalAlignment = GridData.FILL;
+            text1LData2.heightHint = 20;
+            text1LData2.horizontalSpan = 1;
+            buttonMoviesChangeDate.setLayoutData(text1LData2);
+            buttonMoviesChangeDate.addSelectionListener(new SelectionAdapter() {
+                public void widgetSelected(SelectionEvent evt) {
+                    //open responsible Dialog and insert text
+                    final SWTCalendarDialog cal = new SWTCalendarDialog(
+                            getDisplay(),
+                            l.getString("movies.groupdetail.datebuttonfinish"));
 
                     cal.addDateChangedListener(new SWTCalendarListener() {
                         public void dateChanged(SWTCalendarEvent calendarEvent) {
-                            textMoviesDate.setText( DateFormat.getDateInstance(DateFormat.LONG).format(calendarEvent.getCalendar().getTime()));
+                            textMoviesDate.setText(DateFormat.getDateInstance(
+                                    DateFormat.LONG).format(
+                                    calendarEvent.getCalendar().getTime()));
                         }
                     });
 
-                    if (textMoviesDate.getText() != null && textMoviesDate.getText().length() > 0) {
+                    if (textMoviesDate.getText() != null
+                            && textMoviesDate.getText().length() > 0) {
                         try {
-                               cal.setDate(DateFormat.getDateInstance(DateFormat.LONG).parse(textMoviesDate.getText()));
+                            cal.setDate(DateFormat.getDateInstance(
+                                    DateFormat.LONG).parse(
+                                    textMoviesDate.getText()));
                         } catch (ParseException pe) {
                         }
                     }
-                    cal.open();                                                                	            
-    	        }
-    	    });  
+                    cal.open();
+                }
+            });
         }
         //labels and buttons for Detail
         {
-    	    labelMoviesDescription = new Label(groupMoviesDetail, SWT.NONE);
-    	    labelMoviesDescription.setText(l.getString("movies.groupdetail.labeldescription"));
-    	    GridData formData2 = new GridData();
-    	    formData2.verticalSpan = 5;
-    	    formData2.verticalAlignment = GridData.BEGINNING;
-    	    labelMoviesDescription.setLayoutData(formData2);
-    	}
+            labelMoviesDescription = new Label(groupMoviesDetail, SWT.NONE);
+            labelMoviesDescription.setText(l
+                    .getString("movies.groupdetail.labeldescription"));
+            GridData formData2 = new GridData();
+            formData2.verticalSpan = 5;
+            formData2.verticalAlignment = GridData.BEGINNING;
+            labelMoviesDescription.setLayoutData(formData2);
+        }
         {
-            textMoviesDescription = new Text(groupMoviesDetail, SWT.MULTI | SWT.READ_ONLY | SWT.V_SCROLL | SWT.BORDER);
+            textMoviesDescription = new Text(groupMoviesDetail, SWT.MULTI
+                    | SWT.READ_ONLY | SWT.V_SCROLL | SWT.BORDER);
             GridData formData2 = new GridData();
-    	    formData2.horizontalSpan = 5;
-    	    formData2.verticalSpan = 5;
-    	    formData2.verticalAlignment = GridData.FILL;
-    	    formData2.horizontalAlignment = GridData.FILL;
-    	    textMoviesDescription.setLayoutData(formData2);
+            formData2.horizontalSpan = 5;
+            formData2.verticalSpan = 5;
+            formData2.verticalAlignment = GridData.FILL;
+            formData2.horizontalAlignment = GridData.FILL;
+            textMoviesDescription.setLayoutData(formData2);
         }
         //      EditDirectors
         {
 
-            compositeMoviesEditDirectors = new Composite(groupMoviesDetail, SWT.NONE);
+            compositeMoviesEditDirectors = new Composite(groupMoviesDetail,
+                    SWT.NONE);
             GridLayout composite1Layout = new GridLayout();
             GridData composite1LData = new GridData();
             composite1LData.horizontalAlignment = GridData.FILL;
@@ -576,78 +620,96 @@
             composite1Layout.numColumns = 2;
             compositeMoviesEditDirectors.setLayout(composite1Layout);
         }
-        	{
-        	    labelMoviesDirectors = new Label(compositeMoviesEditDirectors, SWT.NONE);
-        	    labelMoviesDirectors.setText(l.getString("movies.groupdetail.labeldirectors"));
-        	    GridData formData2 = new GridData();
-        	    formData2.horizontalSpan = 2;
-        	    formData2.verticalSpan = 1;
-        	    labelMoviesDirectors.setLayoutData(formData2);
-        	}
-        	{
-        	    buttonMoviesAddDirectors = new Button(compositeMoviesEditDirectors
-        	            , SWT.NONE);
-        	    buttonMoviesAddDirectors.setText(l
-        	            .getString("movies.button.additem"));
-        	    buttonMoviesAddDirectors.setEnabled(false);
-        	    GridData text1LData2 = new GridData();
-        	    text1LData2.heightHint = 20;
-        	    text1LData2.horizontalSpan =1;
-        	    text1LData2.horizontalAlignment = GridData.BEGINNING;
-        	    buttonMoviesAddDirectors.setLayoutData(text1LData2);        
-        	    buttonMoviesAddDirectors.addSelectionListener(new SelectionAdapter() {
-        	        public void widgetSelected(SelectionEvent evt) {
-        	            //open responsible Dialog and insert objects into table
-        	            DialogMovie dialog = new DialogMovie(getShell(),0,locale,movie,DialogMovie.TYPE_DIRECTOR);
-        	            dialog.open();
-                    
-        	            tableMoviesDirectorsDetail.removeAll();
-        	            TableItem item;
-        	            for(int i =0; i< movie.getDirector().size(); i++){
-        	                item = new TableItem(tableMoviesDirectorsDetail, SWT.NONE);
-        	                item.setText(new String[] { ((Director)movie.getDirector().get(i)).getDirectorId()+ ""
-        	                        ,((Director)movie.getDirector().get(i)).getLastName() + " , "
-        	                        + ((Director)movie.getDirector().get(i)).getFirstName()});
-        	            }                    
-        	            
-        	        }
-        	    });  
-        	}
-        	{
-        	    buttonMoviesDeleteDirectors = new Button(compositeMoviesEditDirectors, SWT.NONE);
-        	    buttonMoviesDeleteDirectors.setText(l
-        	            .getString("movies.button.deleteitem"));
-        	    buttonMoviesDeleteDirectors.setEnabled(false);
-        	    GridData text1LData2 = new GridData();
-        	    text1LData2.horizontalAlignment = GridData.BEGINNING;
-        	    text1LData2.heightHint = 20;
-        	    text1LData2.horizontalSpan =1;
-        	    buttonMoviesDeleteDirectors.setLayoutData(text1LData2);        
-        	    buttonMoviesDeleteDirectors.addSelectionListener(new SelectionAdapter() {
-        	        public void widgetSelected(SelectionEvent evt) {
-        	            //get selected Item
-        	            //get id from object 
-        	            //search for id in list and delete object
-        	            //remove table entry
-        	            int index=tableMoviesDirectorsDetail.getSelectionIndex();
-        	            if(index>=0)  {
-        	                String strid=tableMoviesDirectorsDetail.getItem(index).getText(0);
-        	                int id = Integer.parseInt(strid);
-        	                for (int i=0;i<movie.getDirector().size();i++)  {
-        	                    Director o =(Director)movie.getDirector().get(i);    
-        	                    if (o.getDirectorId().intValue()==id) {
-        	                        movie.getDirector().remove(o);
-        	                        break;
-        	                    }
-        	                }
-        	                tableMoviesDirectorsDetail.remove(index);
-        	            }
-        	        }
-        	    });  
-        	}
         {
-            tableMoviesDirectorsDetail = new Table(groupMoviesDetail,SWT.SINGLE
-                    | SWT.FULL_SELECTION | SWT.V_SCROLL | SWT.BORDER);
+            labelMoviesDirectors = new Label(compositeMoviesEditDirectors,
+                    SWT.NONE);
+            labelMoviesDirectors.setText(l
+                    .getString("movies.groupdetail.labeldirectors"));
+            GridData formData2 = new GridData();
+            formData2.horizontalSpan = 2;
+            formData2.verticalSpan = 1;
+            labelMoviesDirectors.setLayoutData(formData2);
+        }
+        {
+            buttonMoviesAddDirectors = new Button(compositeMoviesEditDirectors,
+                    SWT.NONE);
+            buttonMoviesAddDirectors.setText(l
+                    .getString("movies.button.additem"));
+            buttonMoviesAddDirectors.setEnabled(false);
+            GridData text1LData2 = new GridData();
+            text1LData2.heightHint = 20;
+            text1LData2.horizontalSpan = 1;
+            text1LData2.horizontalAlignment = GridData.BEGINNING;
+            buttonMoviesAddDirectors.setLayoutData(text1LData2);
+            buttonMoviesAddDirectors
+                    .addSelectionListener(new SelectionAdapter() {
+                        public void widgetSelected(SelectionEvent evt) {
+                            //open responsible Dialog and insert objects into
+                            // table
+                            DialogMovie dialog = new DialogMovie(getShell(), 0,
+                                    locale, movie, DialogMovie.TYPE_DIRECTOR);
+                            dialog.open();
+
+                            tableMoviesDirectorsDetail.removeAll();
+                            TableItem item;
+                            for (int i = 0; i < movie.getDirector().size(); i++) {
+                                item = new TableItem(
+                                        tableMoviesDirectorsDetail, SWT.NONE);
+                                item.setText(new String[] {
+                                        ((Director) movie.getDirector().get(i))
+                                                .getDirectorId()
+                                                + "",
+                                        ((Director) movie.getDirector().get(i))
+                                                .getLastName()
+                                                + " , "
+                                                + ((Director) movie
+                                                        .getDirector().get(i))
+                                                        .getFirstName() });
+                            }
+
+                        }
+                    });
+        }
+        {
+            buttonMoviesDeleteDirectors = new Button(
+                    compositeMoviesEditDirectors, SWT.NONE);
+            buttonMoviesDeleteDirectors.setText(l
+                    .getString("movies.button.deleteitem"));
+            buttonMoviesDeleteDirectors.setEnabled(false);
+            GridData text1LData2 = new GridData();
+            text1LData2.horizontalAlignment = GridData.BEGINNING;
+            text1LData2.heightHint = 20;
+            text1LData2.horizontalSpan = 1;
+            buttonMoviesDeleteDirectors.setLayoutData(text1LData2);
+            buttonMoviesDeleteDirectors
+                    .addSelectionListener(new SelectionAdapter() {
+                        public void widgetSelected(SelectionEvent evt) {
+                            //get selected Item
+                            //get id from object
+                            //search for id in list and delete object
+                            //remove table entry
+                            int index = tableMoviesDirectorsDetail
+                                    .getSelectionIndex();
+                            if (index >= 0) {
+                                String strid = tableMoviesDirectorsDetail
+                                        .getItem(index).getText(0);
+                                int id = Integer.parseInt(strid);
+                                for (int i = 0; i < movie.getDirector().size(); i++) {
+                                    Director o = (Director) movie.getDirector()
+                                            .get(i);
+                                    if (o.getDirectorId().intValue() == id) {
+                                        movie.getDirector().remove(o);
+                                        break;
+                                    }
+                                }
+                                tableMoviesDirectorsDetail.remove(index);
+                            }
+                        }
+                    });
+        }
+        {
+            tableMoviesDirectorsDetail = new Table(groupMoviesDetail,
+                    SWT.SINGLE | SWT.FULL_SELECTION | SWT.V_SCROLL | SWT.BORDER);
             //tableMoviesDirectorsDetail.setHeaderVisible(true);
             //tableMoviesDirectorsDetail.setLinesVisible(true);
             GridData tableMoviesDirectorsDetailLData = new GridData();
@@ -655,27 +717,28 @@
             tableMoviesDirectorsDetailLData.horizontalSpan = 5;
             tableMoviesDirectorsDetailLData.grabExcessVerticalSpace = true;
             tableMoviesDirectorsDetailLData.verticalAlignment = GridData.FILL;
-            tableMoviesDirectorsDetail.setLayoutData(tableMoviesDirectorsDetailLData);
-            
+            tableMoviesDirectorsDetail
+                    .setLayoutData(tableMoviesDirectorsDetailLData);
+
             {
                 tableMoviesDetail_ColumnID = new TableColumn(
-                        tableMoviesDirectorsDetail,
-                     SWT.CENTER);
+                        tableMoviesDirectorsDetail, SWT.CENTER);
                 tableMoviesDetail_ColumnID.setWidth(0);
                 tableMoviesDetail_ColumnID.setResizable(false);
             }
             {
                 tableMoviesDetail_ColumnName = new TableColumn(
-                        tableMoviesDirectorsDetail,
-                        SWT.LEFT);              
-                tableMoviesDetail_ColumnName.setText(
-                        l.getString("movies.groupoverviewdetail.columndirectors"));
-                tableMoviesDetail_ColumnName.setWidth(200);            
+                        tableMoviesDirectorsDetail, SWT.LEFT);
+                tableMoviesDetail_ColumnName
+                        .setText(l
+                                .getString("movies.groupoverviewdetail.columndirectors"));
+                tableMoviesDetail_ColumnName.setWidth(200);
             }
         }// EditDirectors
         // Edit Actors
         {
-            compositeMoviesEditActors = new Composite(groupMoviesDetail, SWT.NONE);
+            compositeMoviesEditActors = new Composite(groupMoviesDetail,
+                    SWT.NONE);
             GridLayout composite1Layout = new GridLayout();
             GridData composite1LData = new GridData();
             composite1LData.horizontalAlignment = GridData.FILL;
@@ -685,103 +748,114 @@
             compositeMoviesEditActors.setLayout(composite1Layout);
         }
 
-        	{
-        	    labelMoviesActors = new Label(compositeMoviesEditActors, SWT.NONE);
-        	    labelMoviesActors.setText(l.getString("movies.groupdetail.labelactors"));
-        	    GridData formData2 = new GridData();
-        	    formData2.horizontalSpan = 2;
-        	    formData2.verticalSpan = 1;
-        	    labelMoviesActors.setLayoutData(formData2);
-        	}
-        	{
-        	    buttonMoviesAddActors = new Button(compositeMoviesEditActors
-        	            , SWT.NONE);
-        	    buttonMoviesAddActors.setText(l
-        	            .getString("movies.button.additem"));
-        	    buttonMoviesAddActors.setEnabled(false);
-        	    GridData text1LData2 = new GridData();
-        	    text1LData2.heightHint = 20;
-        	    text1LData2.horizontalSpan =1;
-        	    text1LData2.horizontalAlignment = GridData.BEGINNING;
-        	    buttonMoviesAddActors.setLayoutData(text1LData2);        
-        	    buttonMoviesAddActors.addSelectionListener(new SelectionAdapter() {
-        	        public void widgetSelected(SelectionEvent evt) {
-        	            //open responsible Dialog and insert objects into table
-        	            DialogMovie dialog = new DialogMovie(getShell(),0,locale,movie,DialogMovie.TYPE_ACTOR);
-        	            dialog.open();
+        {
+            labelMoviesActors = new Label(compositeMoviesEditActors, SWT.NONE);
+            labelMoviesActors.setText(l
+                    .getString("movies.groupdetail.labelactors"));
+            GridData formData2 = new GridData();
+            formData2.horizontalSpan = 2;
+            formData2.verticalSpan = 1;
+            labelMoviesActors.setLayoutData(formData2);
+        }
+        {
+            buttonMoviesAddActors = new Button(compositeMoviesEditActors,
+                    SWT.NONE);
+            buttonMoviesAddActors.setText(l.getString("movies.button.additem"));
+            buttonMoviesAddActors.setEnabled(false);
+            GridData text1LData2 = new GridData();
+            text1LData2.heightHint = 20;
+            text1LData2.horizontalSpan = 1;
+            text1LData2.horizontalAlignment = GridData.BEGINNING;
+            buttonMoviesAddActors.setLayoutData(text1LData2);
+            buttonMoviesAddActors.addSelectionListener(new SelectionAdapter() {
+                public void widgetSelected(SelectionEvent evt) {
+                    //open responsible Dialog and insert objects into table
+                    DialogMovie dialog = new DialogMovie(getShell(), 0, locale,
+                            movie, DialogMovie.TYPE_ACTOR);
+                    dialog.open();
 
-        	            tableMoviesActorsDetail.removeAll();
-        	            TableItem item;
-        	            for(int i =0; i< movie.getActors().size(); i++){
-        	                item = new TableItem(tableMoviesActorsDetail, SWT.NONE);
-        	                item.setText(new String[] { ((Actor)movie.getActors().get(i)).getActorId() + ""
-        	                        , ((Actor)movie.getActors().get(i)).getLastName() + ", "+((Actor)movie.getActors().get(i)).getFirstName()});
-        	            }                    
-        	        }
-        	    });  
-        	}
-        	{
-        	    buttonMoviesDeleteActors = new Button(compositeMoviesEditActors, SWT.NONE);
-        	    buttonMoviesDeleteActors.setText(l
-        	            .getString("movies.button.deleteitem"));
-        	    buttonMoviesDeleteActors.setEnabled(false);
-        	    GridData text1LData2 = new GridData();
-        	    text1LData2.horizontalAlignment = GridData.BEGINNING;
-        	    text1LData2.heightHint = 20;
-        	    text1LData2.horizontalSpan =1;
-        	    buttonMoviesDeleteActors.setLayoutData(text1LData2);        
-        	    buttonMoviesDeleteActors.addSelectionListener(new SelectionAdapter() {
-        	        public void widgetSelected(SelectionEvent evt) {
-        	            //get selected Item
-        	            //get id from object 
-        	            //search for id in list and delete object
-        	            //remove table entry
-        	            int index=tableMoviesActorsDetail.getSelectionIndex();
-        	            if(index>=0)  {
-        	                String strid=tableMoviesActorsDetail.getItem(index).getText(0);
-        	                int id = Integer.parseInt(strid);
-        	                for (int i=0;i<movie.getActors().size();i++)  {
-        	                    Actor o =(Actor)movie.getActors().get(i);    
-        	                    if (o.getActorId().intValue()==id) {
-        	                        movie.getActors().remove(o);
-        	                        break;
-        	                    }
-        	                }
-        	                tableMoviesActorsDetail.remove(index);
-        	            }
-        	        }
-        	    });  
-        	}
-        	{
-                tableMoviesActorsDetail = new Table(groupMoviesDetail, SWT.SINGLE | SWT.FULL_SELECTION | SWT.V_SCROLL | SWT.BORDER);
-                //tableMoviesActorsDetail.setHeaderVisible(true);
-                //tableMoviesActorsDetail.setLinesVisible(true);
-                GridData tableMoviesActorsDetailLData = new GridData();
-                tableMoviesActorsDetailLData.horizontalAlignment = GridData.FILL;
-                tableMoviesActorsDetailLData.horizontalSpan = 5;
-                tableMoviesActorsDetailLData.grabExcessVerticalSpace = true;
-                tableMoviesActorsDetailLData.verticalAlignment = GridData.FILL;
-                tableMoviesActorsDetail.setLayoutData(tableMoviesActorsDetailLData);
-                
-                {
-                    tableMoviesDetail_ColumnID = new TableColumn(
-                            tableMoviesActorsDetail,
-                         SWT.CENTER);
-                    tableMoviesDetail_ColumnID.setWidth(0);
-                    tableMoviesDetail_ColumnID.setResizable(false);              
+                    tableMoviesActorsDetail.removeAll();
+                    TableItem item;
+                    for (int i = 0; i < movie.getActors().size(); i++) {
+                        item = new TableItem(tableMoviesActorsDetail, SWT.NONE);
+                        item.setText(new String[] {
+                                ((Actor) movie.getActors().get(i)).getActorId()
+                                        + "",
+                                ((Actor) movie.getActors().get(i))
+                                        .getLastName()
+                                        + ", "
+                                        + ((Actor) movie.getActors().get(i))
+                                                .getFirstName() });
+                    }
                 }
-                {
-                    tableMoviesDetail_ColumnName = new TableColumn(
-                            tableMoviesActorsDetail,
-                         SWT.LEFT);              
-                    tableMoviesDetail_ColumnName.setText(
-                            l.getString("movies.groupoverviewdetail.columnactors"));
-                    tableMoviesDetail_ColumnName.setWidth(200);            
-                }
+            });
+        }
+        {
+            buttonMoviesDeleteActors = new Button(compositeMoviesEditActors,
+                    SWT.NONE);
+            buttonMoviesDeleteActors.setText(l
+                    .getString("movies.button.deleteitem"));
+            buttonMoviesDeleteActors.setEnabled(false);
+            GridData text1LData2 = new GridData();
+            text1LData2.horizontalAlignment = GridData.BEGINNING;
+            text1LData2.heightHint = 20;
+            text1LData2.horizontalSpan = 1;
+            buttonMoviesDeleteActors.setLayoutData(text1LData2);
+            buttonMoviesDeleteActors
+                    .addSelectionListener(new SelectionAdapter() {
+                        public void widgetSelected(SelectionEvent evt) {
+                            //get selected Item
+                            //get id from object
+                            //search for id in list and delete object
+                            //remove table entry
+                            int index = tableMoviesActorsDetail
+                                    .getSelectionIndex();
+                            if (index >= 0) {
+                                String strid = tableMoviesActorsDetail.getItem(
+                                        index).getText(0);
+                                int id = Integer.parseInt(strid);
+                                for (int i = 0; i < movie.getActors().size(); i++) {
+                                    Actor o = (Actor) movie.getActors().get(i);
+                                    if (o.getActorId().intValue() == id) {
+                                        movie.getActors().remove(o);
+                                        break;
+                                    }
+                                }
+                                tableMoviesActorsDetail.remove(index);
+                            }
+                        }
+                    });
+        }
+        {
+            tableMoviesActorsDetail = new Table(groupMoviesDetail, SWT.SINGLE
+                    | SWT.FULL_SELECTION | SWT.V_SCROLL | SWT.BORDER);
+            //tableMoviesActorsDetail.setHeaderVisible(true);
+            //tableMoviesActorsDetail.setLinesVisible(true);
+            GridData tableMoviesActorsDetailLData = new GridData();
+            tableMoviesActorsDetailLData.horizontalAlignment = GridData.FILL;
+            tableMoviesActorsDetailLData.horizontalSpan = 5;
+            tableMoviesActorsDetailLData.grabExcessVerticalSpace = true;
+            tableMoviesActorsDetailLData.verticalAlignment = GridData.FILL;
+            tableMoviesActorsDetail.setLayoutData(tableMoviesActorsDetailLData);
+
+            {
+                tableMoviesDetail_ColumnID = new TableColumn(
+                        tableMoviesActorsDetail, SWT.CENTER);
+                tableMoviesDetail_ColumnID.setWidth(0);
+                tableMoviesDetail_ColumnID.setResizable(false);
+            }
+            {
+                tableMoviesDetail_ColumnName = new TableColumn(
+                        tableMoviesActorsDetail, SWT.LEFT);
+                tableMoviesDetail_ColumnName.setText(l
+                        .getString("movies.groupoverviewdetail.columnactors"));
+                tableMoviesDetail_ColumnName.setWidth(200);
+            }
         }//Edit Actors
         //Edit Genres
         {
-            compositeMoviesEditGenres = new Composite(groupMoviesDetail, SWT.NONE);
+            compositeMoviesEditGenres = new Composite(groupMoviesDetail,
+                    SWT.NONE);
             GridLayout composite1Layout = new GridLayout();
             GridData composite1LData = new GridData();
             composite1LData.horizontalAlignment = GridData.FILL;
@@ -791,104 +865,111 @@
             compositeMoviesEditGenres.setLayout(composite1Layout);
         }
 
-        	{
-        	    labelMoviesGenres = new Label(compositeMoviesEditGenres, SWT.NONE);
-        	    labelMoviesGenres.setText(l.getString("movies.groupdetail.labelgenres"));
-        	    GridData formData2 = new GridData();
-        	    formData2.horizontalSpan = 2;
-        	    formData2.verticalSpan = 1;
-        	    labelMoviesGenres.setLayoutData(formData2);
-        	}
-        	{
-        	    buttonMoviesAddGenres = new Button(compositeMoviesEditGenres
-        	            , SWT.NONE);
-        	    buttonMoviesAddGenres.setText(l
-        	            .getString("movies.button.additem"));
-        	    buttonMoviesAddGenres.setEnabled(false);
-        	    GridData text1LData2 = new GridData();
-        	    text1LData2.heightHint = 20;
-        	    text1LData2.horizontalSpan =1;
-        	    text1LData2.horizontalAlignment = GridData.BEGINNING;
-        	    buttonMoviesAddGenres.setLayoutData(text1LData2);        
-        	    buttonMoviesAddGenres.addSelectionListener(new SelectionAdapter() {
-        	        public void widgetSelected(SelectionEvent evt) {
-        	            //open responsible Dialog and insert objects into table
-        	            DialogMovie dialog = new DialogMovie(getShell(),0,locale,movie,DialogMovie.TYPE_GENRE);
-        	            dialog.open();
+        {
+            labelMoviesGenres = new Label(compositeMoviesEditGenres, SWT.NONE);
+            labelMoviesGenres.setText(l
+                    .getString("movies.groupdetail.labelgenres"));
+            GridData formData2 = new GridData();
+            formData2.horizontalSpan = 2;
+            formData2.verticalSpan = 1;
+            labelMoviesGenres.setLayoutData(formData2);
+        }
+        {
+            buttonMoviesAddGenres = new Button(compositeMoviesEditGenres,
+                    SWT.NONE);
+            buttonMoviesAddGenres.setText(l.getString("movies.button.additem"));
+            buttonMoviesAddGenres.setEnabled(false);
+            GridData text1LData2 = new GridData();
+            text1LData2.heightHint = 20;
+            text1LData2.horizontalSpan = 1;
+            text1LData2.horizontalAlignment = GridData.BEGINNING;
+            buttonMoviesAddGenres.setLayoutData(text1LData2);
+            buttonMoviesAddGenres.addSelectionListener(new SelectionAdapter() {
+                public void widgetSelected(SelectionEvent evt) {
+                    //open responsible Dialog and insert objects into table
+                    DialogMovie dialog = new DialogMovie(getShell(), 0, locale,
+                            movie, DialogMovie.TYPE_GENRE);
+                    dialog.open();
 
-        	            tableMoviesGenresDetail.removeAll();
-        	            TableItem item;
-        	            for(int i =0; i< movie.getGenres().size(); i++){
-        	                item = new TableItem(tableMoviesGenresDetail, SWT.NONE);
-        	                item.setText(new String[] { ((Genre)movie.getGenres().get(i)).getGenreId() + ""
-        	                        , ((Genre)movie.getGenres().get(i)).getName() + ""});
-        	            }         	                           
-        	        }
-        	    });  
-        	}
-        	{
-        	    buttonMoviesDeleteGenres = new Button(compositeMoviesEditGenres, SWT.NONE);
-        	    buttonMoviesDeleteGenres.setText(l
-        	            .getString("movies.button.deleteitem"));
-        	    buttonMoviesDeleteGenres.setEnabled(false);
-        	    GridData text1LData2 = new GridData();
-        	    text1LData2.horizontalAlignment = GridData.BEGINNING;
-        	    text1LData2.heightHint = 20;
-        	    text1LData2.horizontalSpan =1;
-        	    buttonMoviesDeleteGenres.setLayoutData(text1LData2);        
-        	    buttonMoviesDeleteGenres.addSelectionListener(new SelectionAdapter() {
-        	        public void widgetSelected(SelectionEvent evt) {
-        	            //get selected Item
-        	            //get id from object 
-        	            //search for id in list and delete object
-        	            //remove table entry
-        	            int index= tableMoviesGenresDetail.getSelectionIndex();
-        	            if(index >= 0)  {
-        	                String strid = tableMoviesGenresDetail.getItem(index).getText(0);
-        	                int id = Integer.parseInt(strid);
-        	                for (int i=0; i < movie.getGenres().size(); i++)  {
-        	                    Genre o = (Genre)movie.getGenres().get(i);    
-        	                    if (o.getGenreId().intValue() == id) {
-        	                        movie.getGenres().remove(o);
-        	                        break;
-        	                    }
-        	                }
-        	                tableMoviesGenresDetail.remove(index);
-        	            }
-        	        }
-        	    });  
-        	}
-        	{
-                tableMoviesGenresDetail = new Table(groupMoviesDetail,SWT.SINGLE
-                        | SWT.FULL_SELECTION | SWT.BORDER);
-                //tableMoviesGenresDetail.setHeaderVisible(true);
-                //tableMoviesGenresDetail.setLinesVisible(true);
-                GridData tableMoviesGenresDetailLData = new GridData();
-                tableMoviesGenresDetailLData.horizontalAlignment = GridData.FILL;
-                tableMoviesGenresDetailLData.horizontalSpan = 5;
-                tableMoviesGenresDetailLData.grabExcessVerticalSpace = true;
-                tableMoviesGenresDetailLData.verticalAlignment = GridData.FILL;
-                tableMoviesGenresDetail.setLayoutData(tableMoviesGenresDetailLData);
-                
-                {
-                    tableMoviesDetail_ColumnID = new TableColumn(
-                            tableMoviesGenresDetail,
-                         SWT.CENTER);
-                    tableMoviesDetail_ColumnID.setWidth(0);
-                    tableMoviesDetail_ColumnID.setResizable(false);              
+                    tableMoviesGenresDetail.removeAll();
+                    TableItem item;
+                    for (int i = 0; i < movie.getGenres().size(); i++) {
+                        item = new TableItem(tableMoviesGenresDetail, SWT.NONE);
+                        item.setText(new String[] {
+                                ((Genre) movie.getGenres().get(i)).getGenreId()
+                                        + "",
+                                ((Genre) movie.getGenres().get(i)).getName()
+                                        + "" });
+                    }
                 }
-                {
-                    tableMoviesDetail_ColumnName = new TableColumn(
-                            tableMoviesGenresDetail,
-                            SWT.LEFT);              
-                    tableMoviesDetail_ColumnName.setText(
-                            l.getString("movies.groupoverviewdetail.columngenres"));
-                    tableMoviesDetail_ColumnName.setWidth(200);            
-                }
+            });
+        }
+        {
+            buttonMoviesDeleteGenres = new Button(compositeMoviesEditGenres,
+                    SWT.NONE);
+            buttonMoviesDeleteGenres.setText(l
+                    .getString("movies.button.deleteitem"));
+            buttonMoviesDeleteGenres.setEnabled(false);
+            GridData text1LData2 = new GridData();
+            text1LData2.horizontalAlignment = GridData.BEGINNING;
+            text1LData2.heightHint = 20;
+            text1LData2.horizontalSpan = 1;
+            buttonMoviesDeleteGenres.setLayoutData(text1LData2);
+            buttonMoviesDeleteGenres
+                    .addSelectionListener(new SelectionAdapter() {
+                        public void widgetSelected(SelectionEvent evt) {
+                            //get selected Item
+                            //get id from object
+                            //search for id in list and delete object
+                            //remove table entry
+                            int index = tableMoviesGenresDetail
+                                    .getSelectionIndex();
+                            if (index >= 0) {
+                                String strid = tableMoviesGenresDetail.getItem(
+                                        index).getText(0);
+                                int id = Integer.parseInt(strid);
+                                for (int i = 0; i < movie.getGenres().size(); i++) {
+                                    Genre o = (Genre) movie.getGenres().get(i);
+                                    if (o.getGenreId().intValue() == id) {
+                                        movie.getGenres().remove(o);
+                                        break;
+                                    }
+                                }
+                                tableMoviesGenresDetail.remove(index);
+                            }
+                        }
+                    });
+        }
+        {
+            tableMoviesGenresDetail = new Table(groupMoviesDetail, SWT.SINGLE
+                    | SWT.FULL_SELECTION | SWT.BORDER);
+            //tableMoviesGenresDetail.setHeaderVisible(true);
+            //tableMoviesGenresDetail.setLinesVisible(true);
+            GridData tableMoviesGenresDetailLData = new GridData();
+            tableMoviesGenresDetailLData.horizontalAlignment = GridData.FILL;
+            tableMoviesGenresDetailLData.horizontalSpan = 5;
+            tableMoviesGenresDetailLData.grabExcessVerticalSpace = true;
+            tableMoviesGenresDetailLData.verticalAlignment = GridData.FILL;
+            tableMoviesGenresDetail.setLayoutData(tableMoviesGenresDetailLData);
+
+            {
+                tableMoviesDetail_ColumnID = new TableColumn(
+                        tableMoviesGenresDetail, SWT.CENTER);
+                tableMoviesDetail_ColumnID.setWidth(0);
+                tableMoviesDetail_ColumnID.setResizable(false);
+            }
+            {
+                tableMoviesDetail_ColumnName = new TableColumn(
+                        tableMoviesGenresDetail, SWT.LEFT);
+                tableMoviesDetail_ColumnName.setText(l
+                        .getString("movies.groupoverviewdetail.columngenres"));
+                tableMoviesDetail_ColumnName.setWidth(200);
+            }
         }// Edit Genre
         // Edit Images
         {
-            compositeMoviesEditImages = new Composite(groupMoviesDetail, SWT.NONE);
+            compositeMoviesEditImages = new Composite(groupMoviesDetail,
+                    SWT.NONE);
             GridLayout composite1Layout = new GridLayout();
             GridData composite1LData = new GridData();
             composite1LData.horizontalAlignment = GridData.FILL;
@@ -898,398 +979,463 @@
             compositeMoviesEditImages.setLayout(composite1Layout);
         }
 
-        	{
-        	    labelMoviesImages = new Label(compositeMoviesEditImages, SWT.NONE);
-        	    labelMoviesImages.setText(l.getString("movies.groupdetail.labelimages"));
-        	    GridData formData2 = new GridData();
-        	    formData2.horizontalSpan = 2;
-        	    formData2.verticalSpan = 1;
-        	    labelMoviesImages.setLayoutData(formData2);
-        	}
-        	{
-        	    buttonMoviesAddImages = new Button(compositeMoviesEditImages
-        	            , SWT.NONE);
-        	    buttonMoviesAddImages.setText(l
-        	            .getString("movies.button.additem"));
-        	    buttonMoviesAddImages.setEnabled(false);
-        	    GridData text1LData2 = new GridData();
-        	    text1LData2.heightHint = 20;
-        	    text1LData2.horizontalSpan =1;
-        	    text1LData2.horizontalAlignment = GridData.BEGINNING;
-        	    buttonMoviesAddImages.setLayoutData(text1LData2);        
-        	    buttonMoviesAddImages.addSelectionListener(new SelectionAdapter() {
-        	        public void widgetSelected(SelectionEvent evt) {
-        	            //open responsible Dialog and insert objects into table
-        	            DialogMovie dialog = new DialogMovie(getShell(),0,locale,movie,DialogMovie.TYPE_IMAGE);
-        	            dialog.open();
+        {
+            labelMoviesImages = new Label(compositeMoviesEditImages, SWT.NONE);
+            labelMoviesImages.setText(l
+                    .getString("movies.groupdetail.labelimages"));
+            GridData formData2 = new GridData();
+            formData2.horizontalSpan = 2;
+            formData2.verticalSpan = 1;
+            labelMoviesImages.setLayoutData(formData2);
+        }
+        {
+            buttonMoviesAddImages = new Button(compositeMoviesEditImages,
+                    SWT.NONE);
+            buttonMoviesAddImages.setText(l.getString("movies.button.additem"));
+            buttonMoviesAddImages.setEnabled(false);
+            GridData text1LData2 = new GridData();
+            text1LData2.heightHint = 20;
+            text1LData2.horizontalSpan = 1;
+            text1LData2.horizontalAlignment = GridData.BEGINNING;
+            buttonMoviesAddImages.setLayoutData(text1LData2);
+            buttonMoviesAddImages.addSelectionListener(new SelectionAdapter() {
+                public void widgetSelected(SelectionEvent evt) {
+                    //open responsible Dialog and insert objects into table
+                    DialogMovie dialog = new DialogMovie(getShell(), 0, locale,
+                            movie, DialogMovie.TYPE_IMAGE);
+                    dialog.open();
 
-        	            tableMoviesImagesDetail.removeAll();
-        	            TableItem item;
-        	            for(int i =0; i< movie.getImages().size(); i++){
-        	                item = new TableItem(tableMoviesImagesDetail, SWT.NONE);
-        	                item.setText(new String[] { ((Image)movie.getImages().get(i)).getImageId() + ""
-        	                        , ((Image)movie.getImages().get(i)).getImageFileName() + ""});
-        	            }
-        	        }
-        	    });  
-        	}
-        	{
-        	    buttonMoviesDeleteImages = new Button(compositeMoviesEditImages, SWT.NONE);
-        	    buttonMoviesDeleteImages.setText(l
-        	            .getString("movies.button.deleteitem"));
-        	    buttonMoviesDeleteImages.setEnabled(false);
-        	    GridData text1LData2 = new GridData();
-        	    text1LData2.horizontalAlignment = GridData.BEGINNING;
-        	    text1LData2.heightHint = 20;
-        	    text1LData2.horizontalSpan =1;
-        	    buttonMoviesDeleteImages.setLayoutData(text1LData2);        
-        	    buttonMoviesDeleteImages.addSelectionListener(new SelectionAdapter() {
-        	        public void widgetSelected(SelectionEvent evt) {
-        	            //get selected Item
-        	            //get id from object 
-        	            //search for id in list and delete object
-        	            //remove table entry
-        	            int index=tableMoviesImagesDetail.getSelectionIndex();
-        	            if(index>=0)  {
-        	                String strid=tableMoviesImagesDetail.getItem(index).getText(0);
-        	                int id = Integer.parseInt(strid);
-        	                for (int i=0;i<movie.getImages().size();i++)  {
-        	                    Image o =(Image)movie.getImages().get(i);    
-        	                    if (o.getImageId().intValue()==id) {
-        	                        movie.getImages().remove(o);
-        	                        break;
-        	                    }
-        	                }
-        	                tableMoviesImagesDetail.remove(index);
-        	            }
-                    
-        	        }
-        	    });  
-        	}
-        	{
-                tableMoviesImagesDetail = new Table(groupMoviesDetail,SWT.SINGLE
-                        | SWT.FULL_SELECTION | SWT.V_SCROLL | SWT.BORDER);
-                //tableMoviesImagesDetail.setHeaderVisible(true);
-                //tableMoviesImagesDetail.setLinesVisible(true);
-                GridData tableMoviesImagesDetailLData = new GridData();
-                tableMoviesImagesDetailLData.horizontalAlignment = GridData.FILL;
-                tableMoviesImagesDetailLData.horizontalSpan = 5;
-                tableMoviesImagesDetailLData.grabExcessVerticalSpace = true;
-                tableMoviesImagesDetailLData.verticalAlignment = GridData.FILL;
-                tableMoviesImagesDetail.setLayoutData(tableMoviesImagesDetailLData);               
-                {
-                    tableMoviesDetail_ColumnID = new TableColumn(
-                            tableMoviesImagesDetail,
-                         SWT.CENTER);
-                    tableMoviesDetail_ColumnID.setWidth(0);
-                    tableMoviesDetail_ColumnID.setResizable(false);              
+                    tableMoviesImagesDetail.removeAll();
+                    TableItem item;
+                    for (int i = 0; i < movie.getImages().size(); i++) {
+                        item = new TableItem(tableMoviesImagesDetail, SWT.NONE);
+                        item.setText(new String[] {
+                                ((Image) movie.getImages().get(i)).getImageId()
+                                        + "",
+                                ((Image) movie.getImages().get(i))
+                                        .getImageFileName()
+                                        + "" });
+                    }
                 }
-                {
-                    tableMoviesDetail_ColumnName = new TableColumn(
-                            tableMoviesImagesDetail,
-                            SWT.LEFT);              
-                    tableMoviesDetail_ColumnName.setText(
-                            l.getString("movies.groupoverviewdetail.columnimages"));
-                    tableMoviesDetail_ColumnName.setWidth(200);            
-                }
-        }// Edit Images
+            });
+        }
+        {
+            buttonMoviesDeleteImages = new Button(compositeMoviesEditImages,
+                    SWT.NONE);
+            buttonMoviesDeleteImages.setText(l
+                    .getString("movies.button.deleteitem"));
+            buttonMoviesDeleteImages.setEnabled(false);
+            GridData text1LData2 = new GridData();
+            text1LData2.horizontalAlignment = GridData.BEGINNING;
+            text1LData2.heightHint = 20;
+            text1LData2.horizontalSpan = 1;
+            buttonMoviesDeleteImages.setLayoutData(text1LData2);
+            buttonMoviesDeleteImages
+                    .addSelectionListener(new SelectionAdapter() {
+                        public void widgetSelected(SelectionEvent evt) {
+                            //get selected Item
+                            //get id from object
+                            //search for id in list and delete object
+                            //remove table entry
+                            int index = tableMoviesImagesDetail
+                                    .getSelectionIndex();
+                            if (index >= 0) {
+                                String strid = tableMoviesImagesDetail.getItem(
+                                        index).getText(0);
+                                int id = Integer.parseInt(strid);
+                                for (int i = 0; i < movie.getImages().size(); i++) {
+                                    Image o = (Image) movie.getImages().get(i);
+                                    if (o.getImageId().intValue() == id) {
+                                        movie.getImages().remove(o);
+                                        break;
+                                    }
+                                }
+                                tableMoviesImagesDetail.remove(index);
+                            }
 
+                        }
+                    });
+        }
         {
-    	    compositeButtons = new Composite(groupMoviesDetail, SWT.EMBEDDED);
-    	    GridLayout composite2Layout = new GridLayout();
-    	    composite2Layout.numColumns = 6;
-    	    GridData composite2LData = new GridData();
-    	    compositeButtons.setLayout(composite2Layout);
-    	    composite2LData.verticalAlignment = GridData.END;
-    	    composite2LData.horizontalAlignment = GridData.CENTER;
-    	    composite2LData.widthHint = 391;
-    	    composite2LData.horizontalSpan = 6;
-    	    composite2LData.grabExcessHorizontalSpace = true;
-        	composite2LData.grabExcessVerticalSpace = true;
-        	composite2LData.heightHint = 35;
-        	compositeButtons.setLayoutData(composite2LData);
-    	}
-    	{
-    	    buttonMoviesNew = new Button(compositeButtons, SWT.PUSH | SWT.CENTER);
-    	    buttonMoviesNew.setText(l.getString("button.new"));
-    	    buttonMoviesNew.addSelectionListener(new SelectionAdapter() {
-            public void widgetSelected(SelectionEvent evt) {
-                
-                mode_movie = ManagementGui.MODE_ADD;
-                
-                textMoviesID.setText("");
-                textMoviesTitle.setText("");
-                textMoviesRuntime.setText("");
-                textMoviesDate.setText("");
-                textMoviesDescription.setText("");
-                textMoviesTitle.setEditable(true);
-                textMoviesRuntime.setEditable(true);
-                textMoviesDescription.setEditable(true);
-                textMoviesSearch.setEditable(false);
-                
-                buttonMoviesCancel.setEnabled(true);
-                buttonMoviesSave.setEnabled(true);
-                buttonMoviesNew.setEnabled(false);
-                buttonMoviesEdit.setEnabled(false);
-                buttonMoviesDelete.setEnabled(false);
-                buttonMoviesAddDirectors.setEnabled(true);
-                buttonMoviesDeleteDirectors.setEnabled(true);
-                buttonMoviesAddActors.setEnabled(true);
-                buttonMoviesDeleteActors.setEnabled(true);
-                buttonMoviesAddGenres.setEnabled(true);
-                buttonMoviesDeleteGenres.setEnabled(true);
-                buttonMoviesAddImages.setEnabled(true);
-                buttonMoviesDeleteImages.setEnabled(true);
-                buttonMoviesChangeDate.setEnabled(true);
-                
-                tableMoviesOverview.setEnabled(false);
-                tableMoviesDirectorsDetail.removeAll();
-                tableMoviesActorsDetail.removeAll();
-                tableMoviesImagesDetail.removeAll();
-                tableMoviesGenresDetail.removeAll();
-                
-                movie = new Movie();
-                movie.setActors(new ArrayList());
-                movie.setDirector(new ArrayList());
-                movie.setGenres(new ArrayList());
-                movie.setImages(new ArrayList());
+            tableMoviesImagesDetail = new Table(groupMoviesDetail, SWT.SINGLE
+                    | SWT.FULL_SELECTION | SWT.V_SCROLL | SWT.BORDER);
+            //tableMoviesImagesDetail.setHeaderVisible(true);
+            //tableMoviesImagesDetail.setLinesVisible(true);
+            GridData tableMoviesImagesDetailLData = new GridData();
+            tableMoviesImagesDetailLData.horizontalAlignment = GridData.FILL;
+            tableMoviesImagesDetailLData.horizontalSpan = 5;
+            tableMoviesImagesDetailLData.grabExcessVerticalSpace = true;
+            tableMoviesImagesDetailLData.verticalAlignment = GridData.FILL;
+            tableMoviesImagesDetail.setLayoutData(tableMoviesImagesDetailLData);
+            {
+                tableMoviesDetail_ColumnID = new TableColumn(
+                        tableMoviesImagesDetail, SWT.CENTER);
+                tableMoviesDetail_ColumnID.setWidth(0);
+                tableMoviesDetail_ColumnID.setResizable(false);
             }
-        });
+            {
+                tableMoviesDetail_ColumnName = new TableColumn(
+                        tableMoviesImagesDetail, SWT.LEFT);
+                tableMoviesDetail_ColumnName.setText(l
+                        .getString("movies.groupoverviewdetail.columnimages"));
+                tableMoviesDetail_ColumnName.setWidth(200);
+            }
+        }// Edit Images
 
-    	    buttonMoviesEdit = new Button(compositeButtons, SWT.PUSH | SWT.CENTER);
-    	    buttonMoviesEdit.setText(l.getString("button.edit"));
-    	    buttonMoviesEdit.setEnabled(false);
-    	    buttonMoviesEdit.addSelectionListener(new SelectionAdapter() {
-            public void widgetSelected(SelectionEvent evt) {
+        {
+            compositeButtons = new Composite(groupMoviesDetail, SWT.EMBEDDED);
+            GridLayout composite2Layout = new GridLayout();
+            composite2Layout.numColumns = 6;
+            GridData composite2LData = new GridData();
+            compositeButtons.setLayout(composite2Layout);
+            composite2LData.verticalAlignment = GridData.END;
+            composite2LData.horizontalAlignment = GridData.CENTER;
+            composite2LData.widthHint = 391;
+            composite2LData.horizontalSpan = 6;
+            composite2LData.grabExcessHorizontalSpace = true;
+            composite2LData.grabExcessVerticalSpace = true;
+            composite2LData.heightHint = 35;
+            compositeButtons.setLayoutData(composite2LData);
+        }
+        {
+            buttonMoviesNew = new Button(compositeButtons, SWT.PUSH
+                    | SWT.CENTER);
+            buttonMoviesNew.setText(l.getString("button.new"));
+            buttonMoviesNew.addSelectionListener(new SelectionAdapter() {
+                public void widgetSelected(SelectionEvent evt) {
 
-                mode_movie = ManagementGui.MODE_EDIT;
+                    mode_movie = ManagementGui.MODE_ADD;
 
-                textMoviesID.setEditable(false);
-                textMoviesTitle.setEditable(true);
-                textMoviesRuntime.setEditable(true);
-                textMoviesTitle.setFocus();
-                textMoviesDescription.setEditable(true);
-                
-                buttonMoviesCancel.setEnabled(true);
-                buttonMoviesSave.setEnabled(true);
-                buttonMoviesNew.setEnabled(false);
-                buttonMoviesEdit.setEnabled(false);
-                buttonMoviesDelete.setEnabled(false);
-                buttonMoviesAddDirectors.setEnabled(true);
-                buttonMoviesDeleteDirectors.setEnabled(true);
-                buttonMoviesAddActors.setEnabled(true);
-                buttonMoviesDeleteActors.setEnabled(true);
-                buttonMoviesAddGenres.setEnabled(true);
-                buttonMoviesDeleteGenres.setEnabled(true);
-                buttonMoviesAddImages.setEnabled(true);
-                buttonMoviesDeleteImages.setEnabled(true);
-                buttonMoviesChangeDate.setEnabled(true);
-                
-                tableMoviesOverview.setEnabled(false);
-                textMoviesSearch.setEnabled(false);
-                
-                //java.util.List Movielist = Database.getMovie(textMoviesID.getText());
-                //only one element because of ID
-                //movie = (Movie)Movielist.get(0);
-            }
-        });
-
-    	    buttonMoviesDelete = new Button(compositeButtons, SWT.PUSH | SWT.CENTER);
-    	    buttonMoviesDelete.setText(l.getString("button.delete"));
-    	    buttonMoviesDelete.setEnabled(false);
-    	    buttonMoviesDelete.addSelectionListener(new SelectionAdapter() {
-            public void widgetSelected(SelectionEvent evt) {
-                System.out
-                        .println("buttonMoviesDelete.widgetSelected, event="
-                                + evt);
-                
-                
-               String msg = MessageFormat.format(
-                       l.getString("movies.groupdetail.deletebutton.question.text"),
-                               new Object[]{textMoviesTitle.getText()+" "
-                               +l.getString("movies.groupdetail.deletebutton.question.gap")
-                               +" "+textMoviesDate.getText()});
-                
-               int question = showMsg(msg,
-                       l.getString("movies.groupdetail.deletebutton.question.header"), 
-                       SWT.ICON_QUESTION | SWT.YES | SWT.NO);
-               
-               if (question != SWT.YES){
-                   return;
-               }
-                
-                
-                try {
-                    //object speichern
-                    // Fehlerbehandlung
-                    Database.deleteObject(movie);
-
-                    //?bersichtsTabelle aktualisieren
-                    refreshMoviesOverviewTable(textMoviesSearch.getText());
-                    
-                    //Detailansicht leeren
                     textMoviesID.setText("");
                     textMoviesTitle.setText("");
+                    textMoviesRuntime.setText("");
                     textMoviesDate.setText("");
                     textMoviesDescription.setText("");
+                    textMoviesTitle.setEditable(true);
+                    textMoviesRuntime.setEditable(true);
+                    textMoviesDescription.setEditable(true);
+                    textMoviesSearch.setEditable(false);
+
+                    buttonMoviesCancel.setEnabled(true);
+                    buttonMoviesSave.setEnabled(true);
+                    buttonMoviesNew.setEnabled(false);
+                    buttonMoviesEdit.setEnabled(false);
+                    buttonMoviesDelete.setEnabled(false);
+                    buttonMoviesAddDirectors.setEnabled(true);
+                    buttonMoviesDeleteDirectors.setEnabled(true);
+                    buttonMoviesAddActors.setEnabled(true);
+                    buttonMoviesDeleteActors.setEnabled(true);
+                    buttonMoviesAddGenres.setEnabled(true);
+                    buttonMoviesDeleteGenres.setEnabled(true);
+                    buttonMoviesAddImages.setEnabled(true);
+                    buttonMoviesDeleteImages.setEnabled(true);
+                    buttonMoviesChangeDate.setEnabled(true);
+
+                    tableMoviesOverview.setEnabled(false);
                     tableMoviesDirectorsDetail.removeAll();
                     tableMoviesActorsDetail.removeAll();
+                    tableMoviesImagesDetail.removeAll();
                     tableMoviesGenresDetail.removeAll();
-                    tableMoviesImagesDetail.removeAll();
-                    //in Tabelle n?chsten ausw?hlen
+
+                    movie = new Movie();
+                    movie.setActors(new ArrayList());
+                    movie.setDirector(new ArrayList());
+                    movie.setGenres(new ArrayList());
+                    movie.setImages(new ArrayList());
+                }
+            });
+
+            buttonMoviesEdit = new Button(compositeButtons, SWT.PUSH
+                    | SWT.CENTER);
+            buttonMoviesEdit.setText(l.getString("button.edit"));
+            buttonMoviesEdit.setEnabled(false);
+            buttonMoviesEdit.addSelectionListener(new SelectionAdapter() {
+                public void widgetSelected(SelectionEvent evt) {
+
+                    mode_movie = ManagementGui.MODE_EDIT;
+
+                    textMoviesID.setEditable(false);
+                    textMoviesTitle.setEditable(true);
+                    textMoviesRuntime.setEditable(true);
+                    textMoviesTitle.setFocus();
+                    textMoviesDescription.setEditable(true);
+
+                    buttonMoviesCancel.setEnabled(true);
+                    buttonMoviesSave.setEnabled(true);
+                    buttonMoviesNew.setEnabled(false);
+                    buttonMoviesEdit.setEnabled(false);
+                    buttonMoviesDelete.setEnabled(false);
+                    buttonMoviesAddDirectors.setEnabled(true);
+                    buttonMoviesDeleteDirectors.setEnabled(true);
+                    buttonMoviesAddActors.setEnabled(true);
+                    buttonMoviesDeleteActors.setEnabled(true);
+                    buttonMoviesAddGenres.setEnabled(true);
+                    buttonMoviesDeleteGenres.setEnabled(true);
+                    buttonMoviesAddImages.setEnabled(true);
+                    buttonMoviesDeleteImages.setEnabled(true);
+                    buttonMoviesChangeDate.setEnabled(true);
+
+                    tableMoviesOverview.setEnabled(false);
+                    textMoviesSearch.setEnabled(false);
+
+                    //java.util.List Movielist =
+                    // Database.getMovie(textMoviesID.getText());
+                    //only one element because of ID
+                    //movie = (Movie)Movielist.get(0);
+                }
+            });
+
+            buttonMoviesDelete = new Button(compositeButtons, SWT.PUSH
+                    | SWT.CENTER);
+            buttonMoviesDelete.setText(l.getString("button.delete"));
+            buttonMoviesDelete.setEnabled(false);
+            buttonMoviesDelete.addSelectionListener(new SelectionAdapter() {
+                public void widgetSelected(SelectionEvent evt) {
+                    System.out
+                            .println("buttonMoviesDelete.widgetSelected, event="
+                                    + evt);
+
+                    String msg = MessageFormat
+                            .format(
+                                    l
+                                            .getString("movies.groupdetail.deletebutton.question.text"),
+                                    new Object[] { textMoviesTitle.getText()
+                                            + " "
+                                            + l
+                                                    .getString("movies.groupdetail.deletebutton.question.gap")
+                                            + " " + textMoviesDate.getText() });
+
+                    int question = showMsg(
+                            msg,
+                            l
+                                    .getString("movies.groupdetail.deletebutton.question.header"),
+                            SWT.ICON_QUESTION | SWT.YES | SWT.NO);
+
+                    if (question != SWT.YES) {
+                        return;
+                    }
+
                     try {
-                        tableMoviesOverview.select(0);
-                    } catch (Exception ex) {}
-                    
-                    //Statusline Nachricht sezten
-                    statusLine.setStatus(1,l.getString("movies.groupdetail.deletebutton.newok"));
+                        //object speichern
+                        // Fehlerbehandlung
+                        Database.deleteObject(movie);
 
-                } catch (DataBaseException e) {
-                    if (e.getMessage().equalsIgnoreCase("1")) {
-                        //Fehler beim Speichern des Objectes
+                        //?bersichtsTabelle aktualisieren
+                        refreshMoviesOverviewTable(textMoviesSearch.getText());
 
-                        statusLine.setStatus(3,l.getString("movies.groupdetail.deletebutton.errorsave"));
-                        showMsg(l.getString("movies.groupdetail.deletebutton.errorsave"),
-                                l.getString("error"), SWT.ICON_ERROR | SWT.OK);
-                        
-                    } else if (e.getMessage().equalsIgnoreCase("2")) {
-                        //fehler beim db aufbau
-                        statusLine.setStatus(3,l.getString("movies.groupdetail.deletebutton.errordb"));
-                        showMsg(l.getString("movies.groupdetail.deletebutton.errordb"),
-                                l.getString("error"), SWT.ICON_ERROR | SWT.OK);
-                        
-                    } else {
-                        //@todo
-                        e.printStackTrace();
+                        //Detailansicht leeren
+                        textMoviesID.setText("");
+                        textMoviesTitle.setText("");
+                        textMoviesDate.setText("");
+                        textMoviesDescription.setText("");
+                        tableMoviesDirectorsDetail.removeAll();
+                        tableMoviesActorsDetail.removeAll();
+                        tableMoviesGenresDetail.removeAll();
+                        tableMoviesImagesDetail.removeAll();
+                        //in Tabelle n?chsten ausw?hlen
+                        try {
+                            tableMoviesOverview.select(0);
+                        } catch (Exception ex) {
+                        }
+
+                        //Statusline Nachricht sezten
+                        statusLine
+                                .setStatus(
+                                        1,
+                                        l
+                                                .getString("movies.groupdetail.deletebutton.newok"));
+
+                    } catch (DataBaseException e) {
+                        if (e.getMessage().equalsIgnoreCase("1")) {
+                            //Fehler beim Speichern des Objectes
+
+                            statusLine
+                                    .setStatus(
+                                            3,
+                                            l
+                                                    .getString("movies.groupdetail.deletebutton.errorsave"));
+                            showMsg(
+                                    l
+                                            .getString("movies.groupdetail.deletebutton.errorsave"),
+                                    l.getString("error"), SWT.ICON_ERROR
+                                            | SWT.OK);
+
+                        } else if (e.getMessage().equalsIgnoreCase("2")) {
+                            //fehler beim db aufbau
+                            statusLine
+                                    .setStatus(
+                                            3,
+                                            l
+                                                    .getString("movies.groupdetail.deletebutton.errordb"));
+                            showMsg(
+                                    l
+                                            .getString("movies.groupdetail.deletebutton.errordb"),
+                                    l.getString("error"), SWT.ICON_ERROR
+                                            | SWT.OK);
+
+                        } else {
+                            //@todo
+                            e.printStackTrace();
+                        }
+
                     }
-                    
-                }                
-                
 
                 }
 
             });
 
-    	    //leerer nicht sichtbarer Button
-    	    buttonMoviesFill = new Button(compositeButtons, SWT.PUSH | SWT.CENTER);
-    	    GridData buttonActorFillLData = new GridData();
-    	    buttonMoviesFill.setVisible(false);
-    	    buttonMoviesFill.setEnabled(false);
-    	    buttonActorFillLData.widthHint = 30;
-    	    buttonActorFillLData.heightHint = 23;
-    	    buttonMoviesFill.setLayoutData(buttonActorFillLData);
+            //leerer nicht sichtbarer Button
+            buttonMoviesFill = new Button(compositeButtons, SWT.PUSH
+                    | SWT.CENTER);
+            GridData buttonActorFillLData = new GridData();
+            buttonMoviesFill.setVisible(false);
+            buttonMoviesFill.setEnabled(false);
+            buttonActorFillLData.widthHint = 30;
+            buttonActorFillLData.heightHint = 23;
+            buttonMoviesFill.setLayoutData(buttonActorFillLData);
 
-    	    buttonMoviesSave = new Button(compositeButtons, SWT.PUSH | SWT.CENTER);
-    	    buttonMoviesSave.setText(l.getString("button.save"));
-    	    buttonMoviesSave.setEnabled(false);
-    	    buttonMoviesSave.addSelectionListener(new SelectionAdapter() {
-            public void widgetSelected(SelectionEvent evt) {
-                System.out
-                        .println("buttonMoviesSave.widgetSelected, event="
-                                + evt);
+            buttonMoviesSave = new Button(compositeButtons, SWT.PUSH
+                    | SWT.CENTER);
+            buttonMoviesSave.setText(l.getString("button.save"));
+            buttonMoviesSave.setEnabled(false);
+            buttonMoviesSave.addSelectionListener(new SelectionAdapter() {
+                public void widgetSelected(SelectionEvent evt) {
+                    System.out
+                            .println("buttonMoviesSave.widgetSelected, event="
+                                    + evt);
 
-                if (textMoviesTitle.getText().trim().equalsIgnoreCase("") 
-                    ||  textMoviesDescription.getText().trim().equalsIgnoreCase("")
-                    ||  textMoviesDate.getText().trim().equalsIgnoreCase("")
-                    ||  movie.getDirector().size() == 0
-                    ||  movie.getActors().size() == 0
-                    ||  movie.getGenres().size() == 0
-                    ||  movie.getImages().size() == 0) {
-                    
-                    showMsg(l.getString("movies.groupdetail.savebutton.warn.noname.msg"),
-                            l.getString("movies.groupdetail.savebutton.warn.noname.title"),
-                            SWT.ICON_WARNING | SWT.YES);
+                    if (textMoviesTitle.getText().trim().equalsIgnoreCase("")
+                            || textMoviesDescription.getText().trim()
+                                    .equalsIgnoreCase("")
+                            || textMoviesDate.getText().trim()
+                                    .equalsIgnoreCase("")
+                            || movie.getDirector().size() == 0
+                            || movie.getActors().size() == 0
+                            || movie.getGenres().size() == 0
+                            || movie.getImages().size() == 0) {
 
-                    	return;
-                }
-                
-                //testen welcher mode
-                if(mode_movie == ManagementGui.MODE_ADD)  {
-                    movie.setTitle(textMoviesTitle.getText());
-                    movie.setDescription(textMoviesDescription.getText());
-                    try {
-                        movie.setReleaseDate(Util.getDateByText(textMoviesDate.getText()));
-                    } catch (DataBaseException e1) {
-                        // TODO Auto-generated catch block
-                        e1.printStackTrace();
+                        showMsg(
+                                l
+                                        .getString("movies.groupdetail.savebutton.warn.noname.msg"),
+                                l
+                                        .getString("movies.groupdetail.savebutton.warn.noname.title"),
+                                SWT.ICON_WARNING | SWT.YES);
+
+                        return;
                     }
-                    movie.setRuntime(Integer.parseInt(textMoviesRuntime.getText()));
-                }
+
+                    //testen welcher mode
+                    if (mode_movie == ManagementGui.MODE_ADD) {
+                        movie.setTitle(textMoviesTitle.getText());
+                        movie.setDescription(textMoviesDescription.getText());
+                        try {
+
+                            movie.setReleaseDate(Calendar.getInstance());
+                            movie.getReleaseDate().setTime(
+                                    DateFormat.getDateInstance(DateFormat.LONG)
+                                            .parse(textMoviesDate.getText()));
+                            logger.debug("Datum: " + movie.getReleaseDate());
+                        } catch (ParseException e1) {
+                            // TODO Auto-generated catch block
+                            //Hier muss noch was gemacht werden, das Datum konnte nicht geparst werden
+                            e1.printStackTrace();
+                            return;
+                        }
+                        movie.setRuntime(Integer.parseInt(textMoviesRuntime
+                                .getText()));
+                    }
                     /**
-                     * @todo eine Exception bekommen wieder leider NOCH nicht mit
-                     * d.h. es muss noch ein r?ckgabewert kommen oder eine Exception 
-                     * ?bermitteln werden (aus der DB Klasse)
+                     * @todo eine Exception bekommen wieder leider NOCH nicht
+                     *       mit d.h. es muss noch ein r?ckgabewert kommen oder
+                     *       eine Exception ?bermitteln werden (aus der DB
+                     *       Klasse)
                      */
                     //neues Objekt erzeugen
-                
-                    
+
                     try {
                         //object speichern
                         // Fehlerbehandlung
                         Object o = Database.saveObject(movie);
-                        
+
                         // in ?bersichtstabelle einf?gen
-                        insertIntoMoviesOverviewTable((Movie)o);
-                        textMoviesID.setText( ((Movie)o).getMovieId()+"" );
-                        
-                        
+                        insertIntoMoviesOverviewTable((Movie) o);
+                        textMoviesID.setText(((Movie) o).getMovieId() + "");
+
                         //Statusline Nachricht sezten
-                        statusLine.setStatus(1,l.getString("movies.groupdetail.savebutton.newok"));
+                        statusLine
+                                .setStatus(
+                                        1,
+                                        l
+                                                .getString("movies.groupdetail.savebutton.newok"));
 
                     } catch (DataBaseException e) {
                         if (e.getMessage().equalsIgnoreCase("1")) {
                             //Fehler beim Speichern des Objectes
 
-                            statusLine.setStatus(3,l.getString("movies.groupdetail.savebutton.errorsave"));
-                            showMsg(l.getString("movies.groupdetail.savebutton.errorsave"),"Fehler", SWT.ICON_ERROR | SWT.OK);
-                            
+                            statusLine
+                                    .setStatus(
+                                            3,
+                                            l
+                                                    .getString("movies.groupdetail.savebutton.errorsave"));
+                            showMsg(
+                                    l
+                                            .getString("movies.groupdetail.savebutton.errorsave"),
+                                    "Fehler", SWT.ICON_ERROR | SWT.OK);
+
                         } else if (e.getMessage().equalsIgnoreCase("2")) {
                             //fehler beim db aufbau
-                            statusLine.setStatus(3,l.getString("movies.groupdetail.savebutton.errordb"));
-                            showMsg(l.getString("movies.groupdetail.savebutton.errordb"),"Fehler", SWT.ICON_ERROR | SWT.OK);
-                            
+                            statusLine
+                                    .setStatus(
+                                            3,
+                                            l
+                                                    .getString("movies.groupdetail.savebutton.errordb"));
+                            showMsg(
+                                    l
+                                            .getString("movies.groupdetail.savebutton.errordb"),
+                                    "Fehler", SWT.ICON_ERROR | SWT.OK);
+
                         } else {
                             //@todo
                             e.printStackTrace();
                         }
-                        
+
                     }
-                    
-                    
+
                     //activate buttons
                     setMoviesGroupButtonSaveCancel();
-                    
+
                     //Execption because only 2 modes posiibel
-              
-            }
-        
-        });
-        
-    	    buttonMoviesCancel = new Button(compositeButtons, SWT.PUSH | SWT.CENTER);
-    	    buttonMoviesCancel.setText(l.getString("button.cancel"));
-    	    buttonMoviesCancel.setEnabled(false);
-    	    buttonMoviesCancel.addSelectionListener(new SelectionAdapter() {
-            public void widgetSelected(SelectionEvent evt) {
-                System.out
-                        .println("buttonMoviesCancel.widgetSelected, event="
-                                + evt);
-                setMoviesGroupButtonSaveCancel();
-            }
-        });
+
+                }
+
+            });
+
+            buttonMoviesCancel = new Button(compositeButtons, SWT.PUSH
+                    | SWT.CENTER);
+            buttonMoviesCancel.setText(l.getString("button.cancel"));
+            buttonMoviesCancel.setEnabled(false);
+            buttonMoviesCancel.addSelectionListener(new SelectionAdapter() {
+                public void widgetSelected(SelectionEvent evt) {
+                    System.out
+                            .println("buttonMoviesCancel.widgetSelected, event="
+                                    + evt);
+                    setMoviesGroupButtonSaveCancel();
+                }
+            });
+        }
+
     }
-    
-  }
 
     /**
      * @param movie2
      */
     private void insertIntoMoviesOverviewTable(Movie movie2) {
         // TODO Auto-generated method stub
-        
+
     }
 
     /**
-     * 
+     *  
      */
     private void setMoviesGroupButtonSaveCancel() {
         tableMoviesOverview.setEnabled(true);
@@ -1322,8 +1468,9 @@
                     .println("Konnte MoviesOverviewtable nicht refreshen, da diese null ist!");
             return;
         }
-        System.out.println("Versuche nun MoviesOverviewtable zu refreshen. Filter: "
-                + filter);
+        System.out
+                .println("Versuche nun MoviesOverviewtable zu refreshen. Filter: "
+                        + filter);
         tableMoviesOverview.removeAll();
         TableItem item;
         java.util.List Movielist = Database.getMovie(filter);
@@ -1332,13 +1479,8 @@
 
             Movie o = (Movie) Movielist.get(i);
             item = new TableItem(tableMoviesOverview, SWT.NONE);
-            try {
-                item.setText(new String[] { o.getMovieId() + "", o.getTitle(),
-                        Util.getTextByDate(o.getReleaseDate()) });
-            } catch (DataBaseException e) {
-                // TODO Auto-generated catch block
-                e.printStackTrace();
-            }
+            item.setText(new String[] { o.getMovieId() + "", o.getTitle(),
+                    Util.getTextByDate(o.getReleaseDate()) });
 
         }
     }
@@ -1370,65 +1512,62 @@
         movie = object;
         textMoviesID.setText(object.getMovieId() + "");
         textMoviesTitle.setText(object.getTitle());
-        try {
-            textMoviesDate.setText(Util.getTextByDate(object.getReleaseDate()));
-        } catch (DataBaseException e1) {
-            // TODO Auto-generated catch block
-            e1.printStackTrace();
-        }
+        textMoviesDate.setText(Util.getTextByDate(object.getReleaseDate()));
+
         textMoviesDescription.setText(object.getDescription());
-        
+
         TableItem item;
         // Fill Directorstable
         tableMoviesDirectorsDetail.removeAll();
-        for (int i=0;i<object.getDirector().size();i++)  {
-            Director o=(Director)object.getDirector().get(i);
-            item = new TableItem(tableMoviesDirectorsDetail , SWT.NONE);
-            item.setText(new String[] {o.getDirectorId() 
-                    + " ",o.getLastName() + " , " + o.getFirstName()});
+        for (int i = 0; i < object.getDirector().size(); i++) {
+            Director o = (Director) object.getDirector().get(i);
+            item = new TableItem(tableMoviesDirectorsDetail, SWT.NONE);
+            item.setText(new String[] { o.getDirectorId() + " ",
+                    o.getLastName() + " , " + o.getFirstName() });
         }
-        
+
         //Fill Actorstable
         tableMoviesActorsDetail.removeAll();
-        for (int i=0;i<object.getActors().size();i++)  {
-            Actor o=(Actor)object.getActors().get(i);
-            item = new TableItem(tableMoviesActorsDetail , SWT.NONE);
-            item.setText(new String[] {o.getActorId() 
-                    + " ",o.getLastName() + " , " + o.getFirstName()});
+        for (int i = 0; i < object.getActors().size(); i++) {
+            Actor o = (Actor) object.getActors().get(i);
+            item = new TableItem(tableMoviesActorsDetail, SWT.NONE);
+            item.setText(new String[] { o.getActorId() + " ",
+                    o.getLastName() + " , " + o.getFirstName() });
         }
-        
+
         //Fill Genretable
         tableMoviesGenresDetail.removeAll();
-        logger.debug("Anzahl der Genres: "+object.getGenres().size());
-        for (int i=0; i<object.getGenres().size();i++ )  {
-            Genre o=(Genre)object.getGenres().get(i);
-            logger.debug(i+" "+o);
-             item = new TableItem(tableMoviesGenresDetail, SWT.NONE);
-             item.setText(new String[] { o.getGenreId() + ""
-                     , o.getName() + ""});
-             
+        logger.debug("Anzahl der Genres: " + object.getGenres().size());
+        for (int i = 0; i < object.getGenres().size(); i++) {
+            Genre o = (Genre) object.getGenres().get(i);
+            logger.debug(i + " " + o);
+            item = new TableItem(tableMoviesGenresDetail, SWT.NONE);
+            item
+                    .setText(new String[] { o.getGenreId() + "",
+                            o.getName() + "" });
+
             //item.setText(new String[] {o.getGenreId() 
             //        + " ",o.getName()});
         }
-        
+
         //Fill Imagetable
         tableMoviesImagesDetail.removeAll();
-        logger.debug("Anzahl der Bilder: "+object.getImages().size());
+        logger.debug("Anzahl der Bilder: " + object.getImages().size());
         System.out.println(object.getImages().size());
-        for (int i=0;i<object.getImages().size();i++)  {
-            Image o=(Image)object.getImages().get(i);
-            item = new TableItem(tableMoviesImagesDetail , SWT.NONE);
-            item.setText(new String[] {o.getImageId() 
-                    + " ",o.getImageFileName()+ ""});
+        for (int i = 0; i < object.getImages().size(); i++) {
+            Image o = (Image) object.getImages().get(i);
+            item = new TableItem(tableMoviesImagesDetail, SWT.NONE);
+            item.setText(new String[] { o.getImageId() + " ",
+                    o.getImageFileName() + "" });
         }
-        
+
         //Enable Buttons for Delete and Edit
         buttonMoviesEdit.setEnabled(true);
         buttonMoviesDelete.setEnabled(true);
 
         //Change mode to view
         mode_movie = ManagementGui.MODE_VIEW;
-          
+
     }
 
     private void openDialogDescription() {
@@ -1441,10 +1580,11 @@
         film.setImages(new ArrayList());
         film.setGenres(new ArrayList());
         film.setDirector(new ArrayList());
-        
-        DialogMovie test= new DialogMovie(dialogShell,1, l.getLocale( ),film,DialogMovie.TYPE_ACTOR);
+
+        DialogMovie test = new DialogMovie(dialogShell, 1, l.getLocale(), film,
+                DialogMovie.TYPE_ACTOR);
         test.open();
 
     }
-    
-}
+
+}
\ No newline at end of file

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositePayment.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositePayment.java	2004-12-02 18:03:30 UTC (rev 196)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositePayment.java	2004-12-02 18:14:16 UTC (rev 197)
@@ -46,20 +46,17 @@
 import de.hsharz.provirent.persistence.Database;
 
 /**
-* This code was generated using CloudGarden's Jigloo
-* SWT/Swing GUI Builder, which is free for non-commercial
-* use. If Jigloo is being used commercially (ie, by a corporation,
-* company or business for any purpose whatever) then you
-* should purchase a license for each developer using Jigloo.
-* Please visit www.cloudgarden.com for details.
-* Use of Jigloo implies acceptance of these licensing terms.
-* *************************************
-* A COMMERCIAL LICENSE HAS NOT BEEN PURCHASED
-* for this machine, so Jigloo or this code cannot be used legally
-* for any corporate or commercial purpose.
-* *************************************
-*/
-public class CompositePayment extends AbstractComposite{
+ * This code was generated using CloudGarden's Jigloo SWT/Swing GUI Builder,
+ * which is free for non-commercial use. If Jigloo is being used commercially
+ * (ie, by a corporation, company or business for any purpose whatever) then you
+ * should purchase a license for each developer using Jigloo. Please visit
+ * www.cloudgarden.com for details. Use of Jigloo implies acceptance of these
+ * licensing terms. ************************************* A COMMERCIAL LICENSE
+ * HAS NOT BEEN PURCHASED for this machine, so Jigloo or this code cannot be
+ * used legally for any corporate or commercial purpose.
+ * *************************************
+ */
+public class CompositePayment extends AbstractComposite {
 
     {
         //Register as a resource user - SWTResourceManager will
@@ -67,23 +64,24 @@
         SWTResourceManager.registerResourceUser(this);
     }
 
-
     /**
      * Logger for this class
      */
     private static final Logger logger = Logger
             .getLogger(CompositePayment.class);
-    
-    
+
     private final static int MODE_VIEW = 0;
 
     private final static int MODE_ADD = 1;
-    
+
     private SashForm sashForm1;
+
     private SashForm sashFormPayment;
-    
+
     private Composite parent;
+
     private Composite compositeButtons;
+
     private Button changeStartDateButton;
 
     private Group groupPayment;
@@ -92,43 +90,60 @@
 
     private Group groupPaymentDetail;
 
-    private Label labelPaymentId;   
+    private Label labelPaymentId;
+
     private Label labelPaymentName;
+
     private Label labelduration1;
+
     private Label labelduration2;
+
     private Label labelduration3;
+
     private Label labelstartdate;
-    
+
     private Text textPaymentID;
+
     private Text textPaymentName;
+
     private Text textduration1;
+
     private Text textduration2;
+
     private Text textduration3;
+
     private Text textstartdate;
-    
+
     private Text textPaymentSearch;
+
     private Label labelPaymentSearch;
-    
+
     private Button buttonPaymentCancel;
+
     private Button buttonPaymentSave;
+
     private Button buttonPaymentFill;
+
     private Button buttonPaymentDelete;
+
     private Button buttonPaymentEdit;
+
     private Button buttonPaymentNew;
-           
+
     private Table tablePayment;
+
     private TableColumn tableColumn;
 
     Hashtable list = null;
 
     private final static int MODE_EDIT = 2;
-    
+
     private StatusLineStyledText statusLine;
 
     private ResourceBundle l;
-    
+
     protected int mode_Payment;
- 
+
     /*
      * ?ndert die Sprache aller Elemente
      * 
@@ -138,8 +153,9 @@
 
     }
 
-    /* 
+    /*
      * Init die Sprache (properties Datei)
+     * 
      * @see de.hsharz.provirent.managment.gui.AbstractComposite#initLanguage(java.util.Locale)
      */
     public void initLanguage(Locale locale) {
@@ -148,47 +164,45 @@
                 "de.hsharz.provirent.management.gui.language.payment", locale);
 
     }
-    
-    
-	/**
-	* Auto-generated main method to display this 
-	* org.eclipse.swt.widgets.Composite inside a new Shell.
-	*/
-	public static void main(String[] args) {
-		showGUI();
-	}
-		
-	/**
-	* Auto-generated method to display this 
-	* org.eclipse.swt.widgets.Composite inside a new Shell.
-	*/
-	public static void showGUI() {
-		Display display = Display.getDefault();
-		Shell shell = new Shell(display);
 
-		shell.open();
-		while (!shell.isDisposed()) {
-			if (!display.readAndDispatch())
-				display.sleep();
-		}
-	}
+    /**
+     * Auto-generated main method to display this
+     * org.eclipse.swt.widgets.Composite inside a new Shell.
+     */
+    public static void main(String[] args) {
+        showGUI();
+    }
 
-	public CompositePayment(Composite p, int style,
+    /**
+     * Auto-generated method to display this org.eclipse.swt.widgets.Composite
+     * inside a new Shell.
+     */
+    public static void showGUI() {
+        Display display = Display.getDefault();
+        Shell shell = new Shell(display);
+
+        shell.open();
+        while (!shell.isDisposed()) {
+            if (!display.readAndDispatch())
+                display.sleep();
+        }
+    }
+
+    public CompositePayment(Composite p, int style,
             StatusLineStyledText status, Locale l) {
-	    super(p, style, status, l);
+        super(p, style, status, l);
         parent = p;
         //Statusline wird gestzt
         statusLine = status;
-        
+
         //sprache wird init
         initLanguage(l);
-	    
-	    
-		initGUI();
-	}
 
-	private void initGUI() {
-	    if (logger.isDebugEnabled()) {
+        initGUI();
+    }
+
+    private void initGUI() {
+        if (logger.isDebugEnabled()) {
             logger.debug("initGUI() - start");
         }
 
@@ -217,10 +231,10 @@
         if (logger.isDebugEnabled()) {
             logger.debug("initGUI() - end");
         }
-    } 
-	
-	/**
-     * 
+    }
+
+    /**
+     *  
      */
     private void initPaymentGroup() {
         {
@@ -233,8 +247,7 @@
             FormData group2LData = new FormData();
             groupPayment.addFocusListener(new FocusAdapter() {
                 public void focusLost(FocusEvent evt) {
-                    System.out.println("groupPayment.focusLost, event="
-                        + evt);
+                    System.out.println("groupPayment.focusLost, event=" + evt);
                     buttonPaymentCancel.setEnabled(false);
                     buttonPaymentDelete.setEnabled(false);
                     buttonPaymentEdit.setEnabled(false);
@@ -264,10 +277,10 @@
             }
         }
 
-	}
+    }
 
     /**
-     * 
+     *  
      */
     private void initPaymentGroupDetail() {
         groupPaymentDetail = new Group(sashFormPayment, SWT.NONE);
@@ -275,8 +288,7 @@
         groupPaymentDetailLayout.marginHeight = 25;
         groupPaymentDetailLayout.numColumns = 6;
         groupPaymentDetailLayout.verticalSpacing = 15;
-        groupPaymentDetail.setText(l
-                .getString("Payment.groupdetail.label"));
+        groupPaymentDetail.setText(l.getString("Payment.groupdetail.label"));
         FormData formData = new FormData();
         groupPaymentDetail.setLayout(groupPaymentDetailLayout);
         formData.right = new FormAttachment(100, 100, -5);
@@ -285,8 +297,7 @@
         groupPaymentDetail.setLayoutData(formData);
         {
             labelPaymentId = new Label(groupPaymentDetail, SWT.NONE);
-            labelPaymentId.setText(l
-                    .getString("Payment.groupdetail.idlabel")
+            labelPaymentId.setText(l.getString("Payment.groupdetail.idlabel")
                     + ":");
             labelPaymentId.setSize(125, 15);
             GridData formData2 = new GridData();
@@ -294,7 +305,7 @@
             formData2.heightHint = 15;
             formData2.horizontalSpan = 2;
             labelPaymentId.setLayoutData(formData2);
-        }        
+        }
         {
             textPaymentID = new Text(groupPaymentDetail, SWT.READ_ONLY
                     | SWT.BORDER);
@@ -340,8 +351,8 @@
             labelduration1.setLayoutData(labelduration1LData);
         }
         {
-            textduration1 = new Text(groupPaymentDetail,
-                    SWT.READ_ONLY | SWT.BORDER);
+            textduration1 = new Text(groupPaymentDetail, SWT.READ_ONLY
+                    | SWT.BORDER);
             GridData text1LData2 = new GridData();
             text1LData2.horizontalAlignment = GridData.FILL;
             text1LData2.heightHint = 13;
@@ -350,8 +361,7 @@
             textduration1.setLayoutData(text1LData2);
         }
         {
-            labelduration2 = new Label(groupPaymentDetail,
-                    SWT.NONE);
+            labelduration2 = new Label(groupPaymentDetail, SWT.NONE);
             labelduration2.setText(l
                     .getString("Payment.groupdetail.duration2label")
                     + ":");
@@ -363,8 +373,8 @@
             labelduration2.setLayoutData(label2LData1);
         }
         {
-            textduration2 = new Text(groupPaymentDetail,
-                    SWT.READ_ONLY | SWT.BORDER);
+            textduration2 = new Text(groupPaymentDetail, SWT.READ_ONLY
+                    | SWT.BORDER);
             GridData text1LData3 = new GridData();
             text1LData3.horizontalAlignment = GridData.FILL;
             text1LData3.heightHint = 13;
@@ -373,8 +383,7 @@
             textduration2.setLayoutData(text1LData3);
         }
         {
-            labelduration3 = new Label(groupPaymentDetail,
-                    SWT.NONE);
+            labelduration3 = new Label(groupPaymentDetail, SWT.NONE);
             labelduration3.setText(l
                     .getString("Payment.groupdetail.duration3label")
                     + ":");
@@ -386,8 +395,8 @@
             labelduration3.setLayoutData(label1LData1);
         }
         {
-            textduration3 = new Text(groupPaymentDetail,
-                    SWT.READ_ONLY | SWT.BORDER);
+            textduration3 = new Text(groupPaymentDetail, SWT.READ_ONLY
+                    | SWT.BORDER);
             GridData text1LData3 = new GridData();
             text1LData3.horizontalAlignment = GridData.FILL;
             text1LData3.heightHint = 13;
@@ -396,8 +405,7 @@
             textduration3.setLayoutData(text1LData3);
         }
         {
-            labelstartdate = new Label(groupPaymentDetail,
-                    SWT.NONE);
+            labelstartdate = new Label(groupPaymentDetail, SWT.NONE);
             labelstartdate.setText(l
                     .getString("Payment.groupdetail.startdatelabel")
                     + ":");
@@ -409,8 +417,8 @@
             labelstartdate.setLayoutData(label1LData1);
         }
         {
-            textstartdate = new Text(groupPaymentDetail,
-                    SWT.READ_ONLY | SWT.BORDER);
+            textstartdate = new Text(groupPaymentDetail, SWT.READ_ONLY
+                    | SWT.BORDER);
             GridData text1LData3 = new GridData();
             text1LData3.horizontalAlignment = GridData.FILL;
             text1LData3.heightHint = 13;
@@ -421,47 +429,51 @@
         }
         {
             changeStartDateButton = new Button(groupPaymentDetail, SWT.PUSH
-                | SWT.CENTER);
-            changeStartDateButton.setText(l.getString("Payment.groupdetail.startdatebuttonchange"));
+                    | SWT.CENTER);
+            changeStartDateButton.setText(l
+                    .getString("Payment.groupdetail.startdatebuttonchange"));
             GridData text1LData3 = new GridData();
             changeStartDateButton.setEnabled(false);
             changeStartDateButton.addSelectionListener(new SelectionAdapter() {
                 public void widgetSelected(SelectionEvent evt) {
 
-                    final SWTCalendarDialog cal = new SWTCalendarDialog(getDisplay(),l.getString("Payment.groupdetail.startdatebuttonfinish"));
+                    final SWTCalendarDialog cal = new SWTCalendarDialog(
+                            getDisplay(),
+                            l
+                                    .getString("Payment.groupdetail.startdatebuttonfinish"));
 
                     cal.addDateChangedListener(new SWTCalendarListener() {
 
                         public void dateChanged(SWTCalendarEvent calendarEvent) {
 
-                            textstartdate.setText( DateFormat.getDateInstance(DateFormat.LONG).format(calendarEvent.getCalendar().getTime()));
+                            textstartdate.setText(DateFormat.getDateInstance(
+                                    DateFormat.LONG).format(
+                                    calendarEvent.getCalendar().getTime()));
 
                         }
 
                     });
 
+                    if (textstartdate.getText() != null
+                            && textstartdate.getText().length() > 0) {
 
-
-                    if (textstartdate.getText() != null && textstartdate.getText().length() > 0) {
-
                         try {
-                               cal.setDate(DateFormat.getDateInstance(DateFormat.LONG).parse(textstartdate.getText()));
+                            cal.setDate(DateFormat.getDateInstance(
+                                    DateFormat.LONG).parse(
+                                    textstartdate.getText()));
 
                         } catch (ParseException pe) {
 
-
-
                         }
 
                     }
 
-                    cal.open();                    
-                    
-                    
+                    cal.open();
+
                 }
             });
             text1LData3.horizontalAlignment = GridData.FILL;
-            
+
             text1LData3.horizontalSpan = 1;
             text1LData3.grabExcessHorizontalSpace = true;
             changeStartDateButton.setLayoutData(text1LData3);
@@ -488,17 +500,15 @@
 
         }
 
-        
     }
 
     /**
-     * 
+     *  
      */
     private void initPaymentDetailButtons() {
         buttonPaymentNew = new Button(compositeButtons, SWT.PUSH | SWT.CENTER);
         buttonPaymentNew.setText(l.getString("button.new"));
         buttonPaymentNew.addSelectionListener(new SelectionAdapter() {
-            
 
             public void widgetSelected(SelectionEvent evt) {
 
@@ -515,15 +525,13 @@
                 textduration3.setEditable(true);
                 //textstartdate.setEditable(true);
                 changeStartDateButton.setEnabled(true);
-                
-                
+
                 buttonPaymentCancel.setEnabled(true);
                 buttonPaymentSave.setEnabled(true);
                 buttonPaymentNew.setEnabled(false);
                 buttonPaymentEdit.setEnabled(false);
                 buttonPaymentDelete.setEnabled(false);
-                
-                
+
                 textPaymentSearch.setEditable(false);
                 tablePayment.setEnabled(false);
 
@@ -543,60 +551,62 @@
                 textPaymentID.setEditable(false);
                 textPaymentName.setEditable(true);
                 textduration1.setEditable(true);
-                textduration2.setEditable(true);                
+                textduration2.setEditable(true);
                 textduration3.setEditable(true);
                 //textstartdate.setEditable(true);
                 changeStartDateButton.setEnabled(true);
-                
+
                 textduration1.setFocus();
-                
+
                 buttonPaymentCancel.setEnabled(true);
                 buttonPaymentSave.setEnabled(true);
                 buttonPaymentNew.setEnabled(false);
                 buttonPaymentEdit.setEnabled(false);
                 buttonPaymentDelete.setEnabled(false);
 
-
                 tablePayment.setEnabled(false);
                 textPaymentSearch.setEnabled(false);
-                
 
             }
         });
 
-        buttonPaymentDelete = new Button(compositeButtons, SWT.PUSH | SWT.CENTER);
+        buttonPaymentDelete = new Button(compositeButtons, SWT.PUSH
+                | SWT.CENTER);
         buttonPaymentDelete.setText(l.getString("button.delete"));
         buttonPaymentDelete.setEnabled(false);
         buttonPaymentDelete.addSelectionListener(new SelectionAdapter() {
             public void widgetSelected(SelectionEvent evt) {
-                System.out
-                        .println("buttonPaymentDelete.widgetSelected, event="
-                                + evt);
-                
-                
-               String msg = MessageFormat.format(
-                       l.getString("Payment.groupdetail.deletebutton.question.text"),
-                               new Object[]{textPaymentName.getText() + " " + 
-                               				textduration1.getText() + " " + 
-                               				textduration2.getText() + " " + 
-                               				textduration3.getText() + " " +
-                               				textstartdate.getText()});
-                
-               int question = showMsg(msg,
-                       l.getString("Payment.groupdetail.deletebutton.question.header"), 
-                       SWT.ICON_QUESTION | SWT.YES | SWT.NO);
-               
-               if (question != SWT.YES){
-                   return;
-               }
+                System.out.println("buttonPaymentDelete.widgetSelected, event="
+                        + evt);
+
+                String msg = MessageFormat
+                        .format(
+                                l
+                                        .getString("Payment.groupdetail.deletebutton.question.text"),
+                                new Object[] { textPaymentName.getText() + " "
+                                        + textduration1.getText() + " "
+                                        + textduration2.getText() + " "
+                                        + textduration3.getText() + " "
+                                        + textstartdate.getText() });
+
+                int question = showMsg(
+                        msg,
+                        l
+                                .getString("Payment.groupdetail.deletebutton.question.header"),
+                        SWT.ICON_QUESTION | SWT.YES | SWT.NO);
+
+                if (question != SWT.YES) {
+                    return;
+                }
                 try {
-	                Payment o = new Payment();
-	                o.setPaymentId(new Integer(Integer.parseInt(textPaymentID.getText())));
-	                o.setName(textPaymentName.getText());
-	                o.setDuration1(Float.parseFloat(textduration1.getText()));
-	                o.setDuration2(Float.parseFloat(textduration2.getText()));
-	                o.setDuration3(Float.parseFloat(textduration3.getText()));                
-	                o.setStartdate(Util.getDateByText(textstartdate.getText()));
+                    Payment o = new Payment();
+                    o.setPaymentId(new Integer(Integer.parseInt(textPaymentID
+                            .getText())));
+                    o.setName(textPaymentName.getText());
+                    o.setDuration1(Float.parseFloat(textduration1.getText()));
+                    o.setDuration2(Float.parseFloat(textduration2.getText()));
+                    o.setDuration3(Float.parseFloat(textduration3.getText()));
+                    o.setStartdate(Util.getDateByText(textstartdate.getText()));
 
                     //object speichern
                     // Fehlerbehandlung
@@ -604,7 +614,7 @@
 
                     //?bersichtsTabelle aktualisieren
                     refreshPaymentTable(textPaymentSearch.getText());
-                    
+
                     //Detailansicht leeren
                     textPaymentID.setText("");
                     textPaymentName.setText("");
@@ -617,38 +627,57 @@
                     //in Tabelle n?chsten ausw?hlen
                     try {
                         tablePayment.deselectAll();
-                    } catch (Exception ex) {}
-                    
+                    } catch (Exception ex) {
+                    }
+
                     //Statusline Nachricht sezten
-                    statusLine.setStatus(1,l.getString("Payment.groupdetail.deletebutton.newok"));
+                    statusLine
+                            .setStatus(
+                                    1,
+                                    l
+                                            .getString("Payment.groupdetail.deletebutton.newok"));
 
                 } catch (DataBaseException e) {
                     if (e.getMessage().equalsIgnoreCase("1")) {
                         //Fehler beim Speichern des Objectes
 
-                        statusLine.setStatus(3,l.getString("Payment.groupdetail.deletebutton.errorsave"));
-                        showMsg(l.getString("Payment.groupdetail.deletebutton.errorsave"),
+                        statusLine
+                                .setStatus(
+                                        3,
+                                        l
+                                                .getString("Payment.groupdetail.deletebutton.errorsave"));
+                        showMsg(
+                                l
+                                        .getString("Payment.groupdetail.deletebutton.errorsave"),
                                 l.getString("error"), SWT.ICON_ERROR | SWT.OK);
-                        
+
                     } else if (e.getMessage().equalsIgnoreCase("2")) {
                         //fehler beim db aufbau
-                        statusLine.setStatus(3,l.getString("Payment.groupdetail.deletebutton.errordb"));
-                        showMsg(l.getString("Payment.groupdetail.deletebutton.errordb"),
+                        statusLine
+                                .setStatus(
+                                        3,
+                                        l
+                                                .getString("Payment.groupdetail.deletebutton.errordb"));
+                        showMsg(
+                                l
+                                        .getString("Payment.groupdetail.deletebutton.errordb"),
                                 l.getString("error"), SWT.ICON_ERROR | SWT.OK);
-                        
+
                     } else {
                         //@todo
                         e.printStackTrace();
                     }
-                    
-                }                
-                
 
+                } catch (ParseException e) {
+                    /**
+                     * @todo Fehler beim Parsen des Datums
+                     */
                 }
 
             }
-        );
 
+        });
+
         //leerer nicht sichtbarer Button
         buttonPaymentFill = new Button(compositeButtons, SWT.PUSH | SWT.CENTER);
         GridData buttonPaymentFillLData = new GridData();
@@ -663,161 +692,218 @@
         buttonPaymentSave.setEnabled(false);
         buttonPaymentSave.addSelectionListener(new SelectionAdapter() {
             public void widgetSelected(SelectionEvent evt) {
-    
+
                 //testen ob duration leer ist
-                if (   textPaymentName.getText().trim().equalsIgnoreCase("") ||
-                       textduration1.getText().trim().equalsIgnoreCase("") || 
-                       textduration2.getText().trim().equalsIgnoreCase("") || 
-                       textduration3.getText().trim().equalsIgnoreCase("") ||
-                       textstartdate.getText().trim().equalsIgnoreCase("")) {
-                    
-                    showMsg(l.getString("Payment.groupdetail.savebutton.warn.noname.msg"),
-                            l.getString("Payment.groupdetail.savebutton.warn.noname.title"),
+                if (textPaymentName.getText().trim().equalsIgnoreCase("")
+                        || textduration1.getText().trim().equalsIgnoreCase("")
+                        || textduration2.getText().trim().equalsIgnoreCase("")
+                        || textduration3.getText().trim().equalsIgnoreCase("")
+                        || textstartdate.getText().trim().equalsIgnoreCase("")) {
+
+                    showMsg(
+                            l
+                                    .getString("Payment.groupdetail.savebutton.warn.noname.msg"),
+                            l
+                                    .getString("Payment.groupdetail.savebutton.warn.noname.title"),
                             SWT.ICON_WARNING | SWT.YES);
 
-                    	return;
+                    return;
                 }
-                
+
                 buttonPaymentEdit.setEnabled(false);
                 buttonPaymentDelete.setEnabled(false);
-                
+
                 //testen welcher mode
-                
+
                 if (mode_Payment == ManagementGui.MODE_ADD) {
-                    
+
                     /**
-                     * @todo eine Exception bekommen wieder leider NOCH nicht mit
-                     * d.h. es muss noch ein r?ckgabewert kommen oder eine Exception 
-                     * ?bermitteln werden (aus der DB Klasse)
+                     * @todo eine Exception bekommen wieder leider NOCH nicht
+                     *       mit d.h. es muss noch ein r?ckgabewert kommen oder
+                     *       eine Exception ?bermitteln werden (aus der DB
+                     *       Klasse)
                      */
-	                    
-                    try {	
-                        
+
+                    try {
+
                         Calendar tmp_cal = Calendar.getInstance();
-                        tmp_cal.setTime(DateFormat.getDateInstance(DateFormat.LONG).parse(textstartdate.getText()));
-                    	//neues Objekt erzeugen
-	                    Payment tmp = new Payment(textPaymentName.getText(), 
-                            			Float.parseFloat(textduration1.getText()),
-                            			Float.parseFloat(textduration2.getText()), 
-                            			Float.parseFloat(textduration3.getText()),
-                            			tmp_cal);
-                                        
+                        tmp_cal
+                                .setTime(DateFormat.getDateInstance(
+                                        DateFormat.LONG).parse(
+                                        textstartdate.getText()));
+                        //neues Objekt erzeugen
+                        Payment tmp = new Payment(textPaymentName.getText(),
+                                Float.parseFloat(textduration1.getText()),
+                                Float.parseFloat(textduration2.getText()),
+                                Float.parseFloat(textduration3.getText()),
+                                tmp_cal);
+
                         //object speichern
                         // Fehlerbehandlung
                         Object o = Database.saveObject(tmp);
-                        
+
                         // in ?bersichtstabelle einf?gen
-                        insertIntoPaymentTable((Payment)o);                        
-                                                
+                        insertIntoPaymentTable((Payment) o);
+
                         //Statusline Nachricht sezten
-                        statusLine.setStatus(1,l.getString("Payment.groupdetail.savebutton.newok"));
+                        statusLine
+                                .setStatus(
+                                        1,
+                                        l
+                                                .getString("Payment.groupdetail.savebutton.newok"));
 
                     } catch (DataBaseException e) {
                         if (e.getMessage().equalsIgnoreCase("1")) {
                             //Fehler beim Speichern des Objectes
 
-                            statusLine.setStatus(3,l.getString("Payment.groupdetail.savebutton.errorsave"));
-                            showMsg(l.getString("Payment.groupdetail.savebutton.errorsave"),"Fehler", SWT.ICON_ERROR | SWT.OK);
-                            
+                            statusLine
+                                    .setStatus(
+                                            3,
+                                            l
+                                                    .getString("Payment.groupdetail.savebutton.errorsave"));
+                            showMsg(
+                                    l
+                                            .getString("Payment.groupdetail.savebutton.errorsave"),
+                                    "Fehler", SWT.ICON_ERROR | SWT.OK);
+
                         } else if (e.getMessage().equalsIgnoreCase("2")) {
                             //fehler beim db aufbau
-                            statusLine.setStatus(3,l.getString("Payment.groupdetail.savebutton.errordb"));
-                            showMsg(l.getString("Payment.groupdetail.savebutton.errordb"),"Fehler", SWT.ICON_ERROR | SWT.OK);
-                            
+                            statusLine
+                                    .setStatus(
+                                            3,
+                                            l
+                                                    .getString("Payment.groupdetail.savebutton.errordb"));
+                            showMsg(
+                                    l
+                                            .getString("Payment.groupdetail.savebutton.errordb"),
+                                    "Fehler", SWT.ICON_ERROR | SWT.OK);
+
                         } else {
                             //@todo
                             e.printStackTrace();
                         }
-                        
-                    } catch (ParseException pex){
-                        statusLine.setStatus(3,l.getString("Payment.groupdetail.savebutton.errorsave"));
-                        showMsg(l.getString("Payment.groupdetail.savebutton.errorsave"),"Fehler", SWT.ICON_ERROR | SWT.OK);
-                        
+
+                    } catch (ParseException pex) {
+                        statusLine
+                                .setStatus(
+                                        3,
+                                        l
+                                                .getString("Payment.groupdetail.savebutton.errorsave"));
+                        showMsg(
+                                l
+                                        .getString("Payment.groupdetail.savebutton.errorsave"),
+                                "Fehler", SWT.ICON_ERROR | SWT.OK);
+
                     }
-                    
-                    
-//                  alle Buttons auf aktiv setzen
+
+                    //                  alle Buttons auf aktiv setzen
                     setPaymentGroupButtonSaveCancel();
                     buttonPaymentDelete.setEnabled(false);
                     buttonPaymentEdit.setEnabled(false);
-                    
+
                 } else if (mode_Payment == ManagementGui.MODE_EDIT) {
                     try {
-                        
+
                         Calendar tmp_cal = Calendar.getInstance();
-                        tmp_cal.setTime(DateFormat.getDateInstance(DateFormat.LONG).parse(textstartdate.getText()));
-                        
-	                    Payment tmp = new Payment(textPaymentName.getText(), 
-	                            Float.parseFloat(textduration1.getText()),
-	                            Float.parseFloat(textduration2.getText()), 
-	                            Float.parseFloat(textduration3.getText()),
-	                            tmp_cal);
-	                    tmp.setPaymentId(new Integer(Integer.parseInt(textPaymentID.getText())));
-	                
-	                    //object speichern
-	                    // Fehlerbehandlung
-	                    Database.saveObject(tmp);
-	                    //?bersichtstabelle aktualisieren
-	                    refreshPaymentTable(textPaymentSearch.getText());
-	                    
-	                    //Statusline Nachricht sezten
-	                    statusLine.setStatus(1,l.getString("Payment.groupdetail.savebutton.editok"));
-	                   
-	
-	                } catch (DataBaseException e) {
-	                    if (e.getMessage().equalsIgnoreCase("1")) {
-	                        //Fehler beim Speichern des Objectes
-	
-	                        statusLine.setStatus(3,l.getString("Payment.groupdetail.savebutton.errorsave"));
-	                        showMsg(l.getString("Payment.groupdetail.savebutton.errorsave"),"Fehler", SWT.ICON_ERROR | SWT.OK);
-	                        
-	                    } else if (e.getMessage().equalsIgnoreCase("2")) {
-	                        //fehler beim db aufbau
-	                        statusLine.setStatus(3,l.getString("Payment.groupdetail.savebutton.errordb"));
-	                        showMsg(l.getString("Payment.groupdetail.savebutton.errordb"),"Fehler", SWT.ICON_ERROR | SWT.OK);
-	                        
-	                    } else {
-	                        //@todo
-	                        e.printStackTrace();
-	                    }
-                    
-                    } catch (ParseException pex){
-                        statusLine.setStatus(3,l.getString("Payment.groupdetail.savebutton.errorsave"));
-                        showMsg(l.getString("Payment.groupdetail.savebutton.errorsave"),"Fehler", SWT.ICON_ERROR | SWT.OK);
-                        
+                        tmp_cal
+                                .setTime(DateFormat.getDateInstance(
+                                        DateFormat.LONG).parse(
+                                        textstartdate.getText()));
+
+                        Payment tmp = new Payment(textPaymentName.getText(),
+                                Float.parseFloat(textduration1.getText()),
+                                Float.parseFloat(textduration2.getText()),
+                                Float.parseFloat(textduration3.getText()),
+                                tmp_cal);
+                        tmp.setPaymentId(new Integer(Integer
+                                .parseInt(textPaymentID.getText())));
+
+                        //object speichern
+                        // Fehlerbehandlung
+                        Database.saveObject(tmp);
+                        //?bersichtstabelle aktualisieren
+                        refreshPaymentTable(textPaymentSearch.getText());
+
+                        //Statusline Nachricht sezten
+                        statusLine
+                                .setStatus(
+                                        1,
+                                        l
+                                                .getString("Payment.groupdetail.savebutton.editok"));
+
+                    } catch (DataBaseException e) {
+                        if (e.getMessage().equalsIgnoreCase("1")) {
+                            //Fehler beim Speichern des Objectes
+
+                            statusLine
+                                    .setStatus(
+                                            3,
+                                            l
+                                                    .getString("Payment.groupdetail.savebutton.errorsave"));
+                            showMsg(
+                                    l
+                                            .getString("Payment.groupdetail.savebutton.errorsave"),
+                                    "Fehler", SWT.ICON_ERROR | SWT.OK);
+
+                        } else if (e.getMessage().equalsIgnoreCase("2")) {
+                            //fehler beim db aufbau
+                            statusLine
+                                    .setStatus(
+                                            3,
+                                            l
+                                                    .getString("Payment.groupdetail.savebutton.errordb"));
+                            showMsg(
+                                    l
+                                            .getString("Payment.groupdetail.savebutton.errordb"),
+                                    "Fehler", SWT.ICON_ERROR | SWT.OK);
+
+                        } else {
+                            //@todo
+                            e.printStackTrace();
+                        }
+
+                    } catch (ParseException pex) {
+                        statusLine
+                                .setStatus(
+                                        3,
+                                        l
+                                                .getString("Payment.groupdetail.savebutton.errorsave"));
+                        showMsg(
+                                l
+                                        .getString("Payment.groupdetail.savebutton.errorsave"),
+                                "Fehler", SWT.ICON_ERROR | SWT.OK);
+
                     }
-                    
+
                     //alle Buttons auf aktiv setzen
                     setPaymentGroupButtonSaveCancel();
                     buttonPaymentDelete.setEnabled(false);
                     buttonPaymentEdit.setEnabled(false);
                 }
-                
-                
-                
+
                 /**
                  * @todo Exception werfen, da nur die zwei Modes sein d?rfen
                  */
-                
+
             }
         });
 
-        buttonPaymentCancel = new Button(compositeButtons, SWT.PUSH | SWT.CENTER);
+        buttonPaymentCancel = new Button(compositeButtons, SWT.PUSH
+                | SWT.CENTER);
         buttonPaymentCancel.setText(l.getString("button.cancel"));
         buttonPaymentCancel.setEnabled(false);
         buttonPaymentCancel.addSelectionListener(new SelectionAdapter() {
             public void widgetSelected(SelectionEvent evt) {
-                System.out
-                        .println("buttonPaymentCancel.widgetSelected, event="
-                                + evt);
+                System.out.println("buttonPaymentCancel.widgetSelected, event="
+                        + evt);
                 setPaymentGroupButtonSaveCancel();
             }
         });
-       
+
     }
 
     /**
-     * 
+     *  
      */
     protected void setPaymentGroupButtonSaveCancel() {
         buttonPaymentSave.setEnabled(false);
@@ -838,25 +924,25 @@
 
         //PaymentSearch aktivieren
         textPaymentSearch.setEnabled(true);
-        
+
     }
 
     /**
      * @param Payment
      * @throws DataBaseException
      */
-    protected void insertIntoPaymentTable(Payment Payment) throws DataBaseException {
+    protected void insertIntoPaymentTable(Payment Payment)
+            throws DataBaseException {
         TableItem item = new TableItem(tablePayment, SWT.NONE);
-        item.setText(new String[] { Payment.getPaymentId() + "", 
-                					Payment.getName(), 
-                					Double.toString(Payment.getDuration1()),
-                					Double.toString(Payment.getDuration2()), 
-                					Double.toString(Payment.getDuration3()),
-                					Util.getTextByDate(Payment.getStartdate()) });
-        
+        item.setText(new String[] { Payment.getPaymentId() + "",
+                Payment.getName(), Double.toString(Payment.getDuration1()),
+                Double.toString(Payment.getDuration2()),
+                Double.toString(Payment.getDuration3()),
+                Util.getTextByDate(Payment.getStartdate()) });
+
         tablePayment.deselectAll();
         refreshPaymentDetail("");
-        
+
         try {
             refreshPaymentTable(textPaymentSearch.getText());
         } catch (DataBaseException e) {
@@ -869,7 +955,8 @@
      * @param text
      * @throws DataBaseException
      */
-    protected void refreshPaymentTable(final String filter) throws DataBaseException {
+    protected void refreshPaymentTable(final String filter)
+            throws DataBaseException {
         if (tablePayment == null) {
             System.out
                     .println("Konnte Paymenttable nicht refreshen, da diese null ist!");
@@ -884,14 +971,14 @@
         for (int i = 0; i < Paymentlist.size(); i++) {
             Payment paym = (Payment) Paymentlist.get(i);
             String name = paym.getName();
-            
+
             if (list.containsKey(name)) {
                 Vector vec = (Vector) list.get(name);
                 vec.add(paym.getStartdate());
             } else {
                 Vector vec = new Vector();
                 vec.add(paym.getStartdate());
-                
+
                 list.put(paym.getName(), vec);
             }
         }
@@ -909,23 +996,23 @@
                         aktDates.add(temp);
                         temp = null;
                         continue;
-                    } else{
-	                    aktDates.add(0, temp);
-	                    continue;
+                    } else {
+                        aktDates.add(0, temp);
+                        continue;
                     }
-                }  
+                }
                 Calendar date = (Calendar) vec.get(i);
-                
+
                 if (!date.after(today)) {
                     if (date.after(temp)) {
                         temp = date;
                         aktDates.set(0, date);
                     }
-                    
+
                 } else {
                     aktDates.add(date);
                 }
-                                    
+
             }
             list.remove(key);
             list.put(key, aktDates);
@@ -935,21 +1022,18 @@
 
             Payment o = (Payment) Paymentlist.get(i);
             item = new TableItem(tablePayment, SWT.NONE);
-            item.setText(new String[] { o.getPaymentId() + "",
-                    					o.getName(),
-                    					Double.toString(o.getDuration1()),
-                    					Double.toString(o.getDuration2()), 
-                    					Double.toString(o.getDuration3()),
-                    					Util.getTextByDate(o.getStartdate())
-                    					});
+            item.setText(new String[] { o.getPaymentId() + "", o.getName(),
+                    Double.toString(o.getDuration1()),
+                    Double.toString(o.getDuration2()),
+                    Double.toString(o.getDuration3()),
+                    Util.getTextByDate(o.getStartdate()) });
 
         }
 
-        
     }
 
     /**
-     * 
+     *  
      */
     private void initPaymentGroupOverview() {
         if (logger.isDebugEnabled()) {
@@ -959,8 +1043,8 @@
         groupPaymentOverview = new Group(sashFormPayment, SWT.NONE);
         GridLayout group5Layout = new GridLayout();
         group5Layout.numColumns = 8;
-        groupPaymentOverview.setText(l
-                .getString("Payment.groupoverview.label"));
+        groupPaymentOverview
+                .setText(l.getString("Payment.groupoverview.label"));
         FormData group5LData = new FormData();
         groupPaymentOverview.setLayout(group5Layout);
         group5LData.left = new FormAttachment(0, 100, 0);
@@ -975,11 +1059,11 @@
         if (logger.isDebugEnabled()) {
             logger.debug("initPaymentGroupOverview() - end");
         }
-        
+
     }
 
     /**
-     * 
+     *  
      */
     private void initPaymentSearch() {
         if (logger.isDebugEnabled()) {
@@ -1043,16 +1127,14 @@
         text2LData.grabExcessHorizontalSpace = true;
         textPaymentSearch.setLayoutData(text2LData);
 
-
-
         if (logger.isDebugEnabled()) {
             logger.debug("initPaymentSearch() - end");
         }
-        
+
     }
 
     /**
-     * 
+     *  
      */
     private void initTablePayment() {
         if (logger.isDebugEnabled()) {
@@ -1068,32 +1150,27 @@
             public void focusLost(FocusEvent evt) {
                 System.out.println("tablePayment.focusLost, event=" + evt);
             }
+
             public void focusGained(FocusEvent evt) {
-                System.out
-                    .println("tablePayment.focusGained, event=" + evt);
+                System.out.println("tablePayment.focusGained, event=" + evt);
             }
         });
         tablePayment.addSelectionListener(new SelectionAdapter() {
             public void widgetSelected(SelectionEvent evt) {
                 if (logger.isDebugEnabled()) {
-                    logger.debug("widgetSelected(SelectionEvent evt = "
-                        + evt
-                        + ") - start");
+                    logger.debug("widgetSelected(SelectionEvent evt = " + evt
+                            + ") - start");
                 }
 
                 int index = tablePayment.getSelectionIndex();
 
-                System.out.println("Table select. id: "
-                    + index
-                    + " TableItem:"
-                    + tablePayment.getItem(index)
-                    + " id: "
-                    + tablePayment.getItem(index).getText(0));
+                System.out.println("Table select. id: " + index + " TableItem:"
+                        + tablePayment.getItem(index) + " id: "
+                        + tablePayment.getItem(index).getText(0));
 
                 //es wurde ein Element aus Tabelle ausgewaehlt jetzt muss die
                 //Detailansicht aktualisiert werden
-                refreshPaymentDetail(tablePayment.getItem(index)
-                    .getText(0));
+                refreshPaymentDetail(tablePayment.getItem(index).getText(0));
 
                 if (logger.isDebugEnabled()) {
                     logger.debug("widgetSelected(SelectionEvent) - end");
@@ -1111,80 +1188,83 @@
         tableColumn = new TableColumn(tablePayment, SWT.CENTER);
         tableColumn.setText(l.getString("Payment.groupoverview.columnid"));
         tableColumn.setWidth(50);
-        
+
         tableColumn = new TableColumn(tablePayment, SWT.CENTER);
         tableColumn.setText(l.getString("Payment.groupoverview.columnname"));
         tableColumn.setWidth(50);
 
         tableColumn = new TableColumn(tablePayment, SWT.CENTER);
-        tableColumn.setText(l.getString("Payment.groupoverview.columnduration1"));
+        tableColumn.setText(l
+                .getString("Payment.groupoverview.columnduration1"));
         tableColumn.setWidth(70);
 
         tableColumn = new TableColumn(tablePayment, SWT.CENTER);
-        tableColumn.setText(l.getString("Payment.groupoverview.columnduration2"));
+        tableColumn.setText(l
+                .getString("Payment.groupoverview.columnduration2"));
         tableColumn.setWidth(70);
-        
+
         tableColumn = new TableColumn(tablePayment, SWT.CENTER);
-        tableColumn.setText(l.getString("Payment.groupoverview.columnduration3"));
+        tableColumn.setText(l
+                .getString("Payment.groupoverview.columnduration3"));
         tableColumn.setWidth(70);
         tableColumn = new TableColumn(tablePayment, SWT.CENTER);
-        tableColumn.setText(l.getString("Payment.groupoverview.columnstartdate"));
+        tableColumn.setText(l
+                .getString("Payment.groupoverview.columnstartdate"));
         tableColumn.setWidth(70);
 
         if (logger.isDebugEnabled()) {
             logger.debug("initTablePayment() - end");
         }
-        
+
     }
 
     /**
      * @param text
      */
     protected void refreshPaymentDetail(final String id) {
-        if (id != null && !id.equals("") ) {
-	        Payment object;
-	        try {
-	            //since we only can get a String value from the table, we
-	            //need to convert this
-	            object = Database.getSinglePayment(Integer.parseInt(id));
-	
-	            if (object == null) {
-	
-	                /*
-	                 * 
-	                 * @TODO Statusbar aktualiseren
-	                 */
-	                return;
-	            }
-	        } catch (Exception e) {
-	            //id ist keine Zahl
-	            return;
-	        }
-	
-	        textPaymentID.setText(object.getPaymentId() + "");
-	        textPaymentName.setText(object.getName());
-	        textduration1.setText(Double.toString(object.getDuration1()));
-	        textduration2.setText(Double.toString(object.getDuration2()));
-	        textduration3.setText(Double.toString(object.getDuration3()));
-	        textstartdate.setText(DateFormat.getDateInstance(DateFormat.LONG).format(object.getStartdate().getTime()));
-	        //Buttons zum l?schen und editieren aktivieren
-	        
-	        buttonPaymentEdit.setEnabled(false);
-	        buttonPaymentDelete.setEnabled(true);
-	        Vector vec = (Vector) list.get(object.getName());
-	        
-	        for (int i = 0; i < vec.size(); i++) {
-	            Calendar date = (Calendar) vec.get(i);
-	            try {
-	                if (Util.getTextByDate(date).equals(Util.getTextByDate(object.getStartdate()))) {
-	                    buttonPaymentEdit.setEnabled(true);
-	                    
-	                }
-	            } catch (DataBaseException e1) {
-	                // TODO Auto-generated catch block
-	                e1.printStackTrace();
-	            }
-	        }
+        if (id != null && !id.equals("")) {
+            Payment object;
+            try {
+                //since we only can get a String value from the table, we
+                //need to convert this
+                object = Database.getSinglePayment(Integer.parseInt(id));
+
+                if (object == null) {
+
+                    /*
+                     * 
+                     * @TODO Statusbar aktualiseren
+                     */
+                    return;
+                }
+            } catch (Exception e) {
+                //id ist keine Zahl
+                return;
+            }
+
+            textPaymentID.setText(object.getPaymentId() + "");
+            textPaymentName.setText(object.getName());
+            textduration1.setText(Double.toString(object.getDuration1()));
+            textduration2.setText(Double.toString(object.getDuration2()));
+            textduration3.setText(Double.toString(object.getDuration3()));
+            textstartdate.setText(DateFormat.getDateInstance(DateFormat.LONG)
+                    .format(object.getStartdate().getTime()));
+            //Buttons zum l?schen und editieren aktivieren
+
+            buttonPaymentEdit.setEnabled(false);
+            buttonPaymentDelete.setEnabled(true);
+            Vector vec = (Vector) list.get(object.getName());
+
+            for (int i = 0; i < vec.size(); i++) {
+                Calendar date = (Calendar) vec.get(i);
+
+                if (Util.getTextByDate(date).equals(
+                        Util.getTextByDate(object.getStartdate()))) {
+                    buttonPaymentEdit.setEnabled(true);
+
+                }
+
+            }
         } else {
             textPaymentID.setText("");
             textPaymentName.setText("");
@@ -1198,9 +1278,7 @@
 
         //Mode auf view setzen
         mode_Payment = ManagementGui.MODE_VIEW;
-        
+
     }
 
-	
-
-}
+}
\ No newline at end of file



From sforstner at sheep.berlios.de  Thu Dec  2 20:49:25 2004
From: sforstner at sheep.berlios.de (Stefan at BerliOS)
Date: Thu, 2 Dec 2004 20:49:25 +0100
Subject: [Provirent-svn-commit] r198 - project_src/provirent_hibernate/src/de/hsharz/provirent
Message-ID: <200412021949.iB2JnPwp001119@sheep.berlios.de>

Author: sforstner
Date: 2004-12-02 20:49:24 +0100 (Thu, 02 Dec 2004)
New Revision: 198

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/Util.java
Log:


Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/Util.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/Util.java	2004-12-02 18:14:16 UTC (rev 197)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/Util.java	2004-12-02 19:49:24 UTC (rev 198)
@@ -34,13 +34,10 @@
 
 import java.io.UnsupportedEncodingException;
 import java.security.MessageDigest;
-import java.text.DateFormatSymbols;
 import java.text.ParseException;
 import java.text.SimpleDateFormat;
 import java.util.Calendar;
 import java.util.Properties;
-import java.util.StringTokenizer;
-import java.util.Vector;
 
 import javax.mail.Address;
 import javax.mail.Message;
@@ -52,8 +49,6 @@
 
 import org.apache.log4j.Logger;
 
-import de.hsharz.provirent.persistence.DataBaseException;
-
 /**
  * @author Philipp Schneider
  *  
@@ -138,19 +133,21 @@
      * @param text
      * @return
      */
-    public static Calendar getDateByText(String textdate) throws ParseException {
+    public static Calendar getDateByText(String textdate) {
         SimpleDateFormat format = new SimpleDateFormat("dd.MM.yyyy");
         Calendar date = Calendar.getInstance();
-
-        date.setTime(format.parse(textdate));
-
+        try {
+            date.setTime(format.parse(textdate));
+        } catch (ParseException e) {
+            date = null;
+            logger.error(e.toString());
+        }
         return date;
     }
-
+    
     public static String getTextByDate(Calendar date) {
-        SimpleDateFormat format = new SimpleDateFormat("dd.MM.yyyy");
-
-        return format.format(date.getTime());
+        SimpleDateFormat format = new SimpleDateFormat("dd.MM.yyyy");       
+        return date != null ? format.format(date.getTime()) : null;
     }
 
     public static int compareDates(Calendar Date1, Calendar Date2) {



From sforstner at sheep.berlios.de  Thu Dec  2 20:57:53 2004
From: sforstner at sheep.berlios.de (Stefan at BerliOS)
Date: Thu, 2 Dec 2004 20:57:53 +0100
Subject: [Provirent-svn-commit] r199 - in project_src/provirent_hibernate/src/de/hsharz/provirent: . management/gui
Message-ID: <200412021957.iB2JvrVh001388@sheep.berlios.de>

Author: sforstner
Date: 2004-12-02 20:57:51 +0100 (Thu, 02 Dec 2004)
New Revision: 199

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/Util.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeCustomer.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositePayment.java
Log:


Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/Util.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/Util.java	2004-12-02 19:49:24 UTC (rev 198)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/Util.java	2004-12-02 19:57:51 UTC (rev 199)
@@ -133,8 +133,8 @@
      * @param text
      * @return
      */
-    public static Calendar getDateByText(String textdate) {
-        SimpleDateFormat format = new SimpleDateFormat("dd.MM.yyyy");
+    public static Calendar getDateByText(String textdate, String format_string) {
+        SimpleDateFormat format = new SimpleDateFormat(format_string);
         Calendar date = Calendar.getInstance();
         try {
             date.setTime(format.parse(textdate));
@@ -145,8 +145,8 @@
         return date;
     }
     
-    public static String getTextByDate(Calendar date) {
-        SimpleDateFormat format = new SimpleDateFormat("dd.MM.yyyy");       
+    public static String getTextByDate(Calendar date, String format_string) {
+        SimpleDateFormat format = new SimpleDateFormat(format_string);       
         return date != null ? format.format(date.getTime()) : null;
     }
 

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeCustomer.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeCustomer.java	2004-12-02 19:49:24 UTC (rev 198)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeCustomer.java	2004-12-02 19:57:51 UTC (rev 199)
@@ -1,11 +1,8 @@
 package de.hsharz.provirent.management.gui;
 
-import java.text.DateFormat;
 import java.text.MessageFormat;
-import java.text.ParseException;
 import java.util.Calendar;
 import java.util.Date;
-import java.util.Hashtable;
 import java.util.Locale;
 import java.util.PropertyResourceBundle;
 import java.util.ResourceBundle;
@@ -508,22 +505,13 @@
 
                         public void dateChanged(SWTCalendarEvent calendarEvent) {
                             String date;
-                            try {
-                                date = Util.getTextByDate(calendarEvent.getCalendar());
-                                textBirthday.setText(date);
-                            } catch (DataBaseException e) {
-                                // TODO Auto-generated catch block
-                                e.printStackTrace();
-                            }                     
+                            date = Util.getTextByDate(calendarEvent.getCalendar(), "dd.MM.YYYY");
+                            textBirthday.setText(date);                     
                         }
                     });
                     if (textBirthday.getText() != null && textBirthday.getText().length() > 0) {
-                        try {
-                            Date date = Util.getDateByText(textBirthday.getText()).getTime();
-                            cal.setDate(date);
-                        } catch (DataBaseException dbe) {
-
-                        }
+                        Date date = Util.getDateByText(textBirthday.getText(), "dd.MM.YYYY").getTime();
+                        cal.setDate(date);
                     }
                     cal.open();                                                          
                 }
@@ -748,22 +736,13 @@
 
                         public void dateChanged(SWTCalendarEvent calendarEvent) {
                             String date = null;
-                            try {
-                                date = Util.getTextByDate(calendarEvent.getCalendar());
-                                textRegistrationDate.setText(date);
-                            } catch (DataBaseException e) {
-                                // TODO Auto-generated catch block
-                                e.printStackTrace();
-                            }                          
+                            date = Util.getTextByDate(calendarEvent.getCalendar(), "dd.MM.YYYY");
+                            textRegistrationDate.setText(date);                          
                         }
                     });
                     if (textRegistrationDate.getText() != null && textRegistrationDate.getText().length() > 0) {
-                        try {
-                            Date date = Util.getDateByText(textRegistrationDate.getText()).getTime();
-                            cal.setDate(date);
-                        } catch (DataBaseException dbe) {
-
-                        }
+                        Date date = Util.getDateByText(textRegistrationDate.getText(), "dd.MM.YYYY").getTime();
+                        cal.setDate(date);
                     }
                     cal.open();                                                          
                 }
@@ -928,7 +907,7 @@
 	                o.setUserName(textUserName.getText());
 	                Date regdate = null;
 	                if (textRegistrationDate.getText() != null) {
-	                    regdate = Util.getDateByText(textRegistrationDate.getText()).getTime();
+	                    regdate = Util.getDateByText(textRegistrationDate.getText(), "dd.MM.YYYY").getTime();
 	                }
 	                o.setDayOfRegistration(regdate);
 	                o.setUserPassword(textPassword.getText());
@@ -947,7 +926,7 @@
 	                p.setEmailAddress(textEmail.getText());
 	                Calendar birthday = null;
 	                if (textBirthday.getText() != "") {
-	                    birthday = Util.getDateByText(textBirthday.getText());
+	                    birthday = Util.getDateByText(textBirthday.getText(), "dd.MM.YYYY");
 	                }
 	                p.setDayOfBirth(birthday);
 	                o.setPerson(p);
@@ -1073,7 +1052,7 @@
     	                o.setUserName(textUserName.getText());
     	                Date regdate = null;
     	                if (textRegistrationDate.getText() != "") {
-    	                    regdate = Util.getDateByText(textRegistrationDate.getText()).getTime();
+    	                    regdate = Util.getDateByText(textRegistrationDate.getText(), "dd.MM.YYYY").getTime();
     	                }   	          
     	                o.setDayOfRegistration(regdate);
     	                o.setUserPassword(textPassword.getText());
@@ -1092,7 +1071,7 @@
     	                p.setEmailAddress(textEmail.getText());
     	                Calendar birthday = null;
     	                if (textBirthday.getText() != "") {
-    	                    birthday = Util.getDateByText(textRegistrationDate.getText());
+    	                    birthday = Util.getDateByText(textRegistrationDate.getText(), "dd.MM.YYYY");
     	                }
     	                p.setDayOfBirth(birthday);
     	                o.setPerson(p);
@@ -1139,7 +1118,7 @@
     	                Person p = o.getPerson();
     	                o.setCustomerId(new Integer(Integer.parseInt(textCustomerID.getText())));
     	                o.setUserName(textUserName.getText());
-    	                o.setDayOfRegistration(Util.getDateByText(textRegistrationDate.getText()).getTime());
+    	                o.setDayOfRegistration(Util.getDateByText(textRegistrationDate.getText(), "dd.MM.YYYY").getTime());
     	                o.setUserPassword(textPassword.getText());
     	                o.setHiddenQuestion(textQuestion.getText());
     	                o.setHiddenAnswer(textAnswer.getText());
@@ -1155,7 +1134,7 @@
     	                p.setCity(textCity.getText());
     	                p.setCountry(textCountry.getText());
     	                p.setEmailAddress(textEmail.getText());
-    	                p.setDayOfBirth(Util.getDateByText(textBirthday.getText()));
+    	                p.setDayOfBirth(Util.getDateByText(textBirthday.getText(), "dd.MM.YYYY"));
     	                o.setPerson(p);
 	                
 	                    //object speichern
@@ -1260,13 +1239,13 @@
         TableItem item = new TableItem(tableCustomer, SWT.NONE);
         String birthday = "";
         if (customer.getPerson().getDayOfBirth() != null) {
-            birthday = Util.getTextByDate(customer.getPerson().getDayOfBirth());
+            birthday = Util.getTextByDate(customer.getPerson().getDayOfBirth(), "dd.MM.YYYY");
         }
         String regdate = "";
         if (customer.getDayOfRegistration() != null) {
             Calendar cal = Calendar.getInstance();
             cal.setTime(customer.getDayOfRegistration());
-            birthday = Util.getTextByDate(cal);            
+            birthday = Util.getTextByDate(cal, "dd.MM.YYYY");            
         }
         item.setText(new String[] { customer.getCustomerId() + "", 
                 					customer.getUserName(), 
@@ -1315,14 +1294,14 @@
             if (o.getPerson().getDayOfBirth() == null) {
                 date = "";
             } else {
-                date = Util.getTextByDate(o.getPerson().getDayOfBirth());
+                date = Util.getTextByDate(o.getPerson().getDayOfBirth(), "dd.MM.YYYY");
             }
             item.setText(new String[] { o.getCustomerId() + "", 
                     					o.getUserName(), 
                     					o.getPerson().getLastName(),
                     					o.getPerson().getFirstName(),
                     					date,
-                    					Util.getTextByDate(regdate),              					
+                    					Util.getTextByDate(regdate, "dd.MM.YYYY"),              					
                     					});
 
         }
@@ -1569,27 +1548,22 @@
 	        temp = object.getHiddenAnswer();
 	        textAnswer.setText(temp == null ? "" : temp);
 	        
-	        try {
-	            String date = null;
-	            String regdate = null;
-	            if (object.getPerson().getDayOfBirth() == null) {
-	                date = "";
-	            } else {
-	                date = Util.getTextByDate(object.getPerson().getDayOfBirth());
-	            }
-                textBirthday.setText(date);
-                if (object.getDayOfRegistration() == null) {
-                    regdate = "";
-                } else {
-                    Calendar cal = Calendar.getInstance();
-        	        cal.setTime(object.getDayOfRegistration());
-        	        regdate = Util.getTextByDate(cal);
-                }
-                textRegistrationDate.setText(regdate);
-            } catch (DataBaseException e1) {
-                // TODO Auto-generated catch block
-                e1.printStackTrace();
+	        String date = null;
+            String regdate = null;
+            if (object.getPerson().getDayOfBirth() == null) {
+                date = "";
+            } else {
+                date = Util.getTextByDate(object.getPerson().getDayOfBirth(), "dd.MM.YYYY");
             }
+            textBirthday.setText(date);
+            if (object.getDayOfRegistration() == null) {
+                regdate = "";
+            } else {
+                Calendar cal = Calendar.getInstance();
+                cal.setTime(object.getDayOfRegistration());
+                regdate = Util.getTextByDate(cal, "dd.MM.YYYY");
+            }
+            textRegistrationDate.setText(regdate);
 	        
 	        //Buttons zum l?schen und editieren aktivieren
 	        

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java	2004-12-02 19:49:24 UTC (rev 198)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java	2004-12-02 19:57:51 UTC (rev 199)
@@ -1480,7 +1480,7 @@
             Movie o = (Movie) Movielist.get(i);
             item = new TableItem(tableMoviesOverview, SWT.NONE);
             item.setText(new String[] { o.getMovieId() + "", o.getTitle(),
-                    Util.getTextByDate(o.getReleaseDate()) });
+                    Util.getTextByDate(o.getReleaseDate(), "dd.MM.YYYY") });
 
         }
     }
@@ -1512,7 +1512,7 @@
         movie = object;
         textMoviesID.setText(object.getMovieId() + "");
         textMoviesTitle.setText(object.getTitle());
-        textMoviesDate.setText(Util.getTextByDate(object.getReleaseDate()));
+        textMoviesDate.setText(Util.getTextByDate(object.getReleaseDate(), "dd.MM.YYYY"));
 
         textMoviesDescription.setText(object.getDescription());
 

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositePayment.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositePayment.java	2004-12-02 19:49:24 UTC (rev 198)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositePayment.java	2004-12-02 19:57:51 UTC (rev 199)
@@ -606,7 +606,7 @@
                     o.setDuration1(Float.parseFloat(textduration1.getText()));
                     o.setDuration2(Float.parseFloat(textduration2.getText()));
                     o.setDuration3(Float.parseFloat(textduration3.getText()));
-                    o.setStartdate(Util.getDateByText(textstartdate.getText()));
+                    o.setStartdate(Util.getDateByText(textstartdate.getText(), "dd.MM.YYYY"));
 
                     //object speichern
                     // Fehlerbehandlung
@@ -668,10 +668,6 @@
                         e.printStackTrace();
                     }
 
-                } catch (ParseException e) {
-                    /**
-                     * @todo Fehler beim Parsen des Datums
-                     */
                 }
 
             }
@@ -938,7 +934,7 @@
                 Payment.getName(), Double.toString(Payment.getDuration1()),
                 Double.toString(Payment.getDuration2()),
                 Double.toString(Payment.getDuration3()),
-                Util.getTextByDate(Payment.getStartdate()) });
+                Util.getTextByDate(Payment.getStartdate(), "dd.MM.YYYY") });
 
         tablePayment.deselectAll();
         refreshPaymentDetail("");
@@ -1026,7 +1022,7 @@
                     Double.toString(o.getDuration1()),
                     Double.toString(o.getDuration2()),
                     Double.toString(o.getDuration3()),
-                    Util.getTextByDate(o.getStartdate()) });
+                    Util.getTextByDate(o.getStartdate(), "dd.MM.YYYY") });
 
         }
 
@@ -1258,8 +1254,8 @@
             for (int i = 0; i < vec.size(); i++) {
                 Calendar date = (Calendar) vec.get(i);
 
-                if (Util.getTextByDate(date).equals(
-                        Util.getTextByDate(object.getStartdate()))) {
+                if (Util.getTextByDate(date, "dd.MM.YYYY").equals(
+                        Util.getTextByDate(object.getStartdate(), "dd.MM.YYYY"))) {
                     buttonPaymentEdit.setEnabled(true);
 
                 }



From pschneider at sheep.berlios.de  Fri Dec  3 11:59:30 2004
From: pschneider at sheep.berlios.de (Philipp Schneider at BerliOS)
Date: Fri, 3 Dec 2004 11:59:30 +0100
Subject: [Provirent-svn-commit] r200 - project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui
Message-ID: <200412031059.iB3AxUXe029735@sheep.berlios.de>

Author: pschneider
Date: 2004-12-03 11:59:29 +0100 (Fri, 03 Dec 2004)
New Revision: 200

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeCustomer.java
Log:


Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeCustomer.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeCustomer.java	2004-12-02 19:57:51 UTC (rev 199)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeCustomer.java	2004-12-03 10:59:29 UTC (rev 200)
@@ -505,12 +505,12 @@
 
                         public void dateChanged(SWTCalendarEvent calendarEvent) {
                             String date;
-                            date = Util.getTextByDate(calendarEvent.getCalendar(), "dd.MM.YYYY");
+                            date = Util.getTextByDate(calendarEvent.getCalendar(), "dd.MM.yyyy");
                             textBirthday.setText(date);                     
                         }
                     });
                     if (textBirthday.getText() != null && textBirthday.getText().length() > 0) {
-                        Date date = Util.getDateByText(textBirthday.getText(), "dd.MM.YYYY").getTime();
+                        Date date = Util.getDateByText(textBirthday.getText(), "dd.MM.yyyy").getTime();
                         cal.setDate(date);
                     }
                     cal.open();                                                          
@@ -736,12 +736,12 @@
 
                         public void dateChanged(SWTCalendarEvent calendarEvent) {
                             String date = null;
-                            date = Util.getTextByDate(calendarEvent.getCalendar(), "dd.MM.YYYY");
+                            date = Util.getTextByDate(calendarEvent.getCalendar(), "dd.MM.yyyy");
                             textRegistrationDate.setText(date);                          
                         }
                     });
                     if (textRegistrationDate.getText() != null && textRegistrationDate.getText().length() > 0) {
-                        Date date = Util.getDateByText(textRegistrationDate.getText(), "dd.MM.YYYY").getTime();
+                        Date date = Util.getDateByText(textRegistrationDate.getText(), "dd.MM.yyyy").getTime();
                         cal.setDate(date);
                     }
                     cal.open();                                                          
@@ -907,7 +907,7 @@
 	                o.setUserName(textUserName.getText());
 	                Date regdate = null;
 	                if (textRegistrationDate.getText() != null) {
-	                    regdate = Util.getDateByText(textRegistrationDate.getText(), "dd.MM.YYYY").getTime();
+	                    regdate = Util.getDateByText(textRegistrationDate.getText(), "dd.MM.yyyy").getTime();
 	                }
 	                o.setDayOfRegistration(regdate);
 	                o.setUserPassword(textPassword.getText());
@@ -926,7 +926,7 @@
 	                p.setEmailAddress(textEmail.getText());
 	                Calendar birthday = null;
 	                if (textBirthday.getText() != "") {
-	                    birthday = Util.getDateByText(textBirthday.getText(), "dd.MM.YYYY");
+	                    birthday = Util.getDateByText(textBirthday.getText(), "dd.MM.yyyy");
 	                }
 	                p.setDayOfBirth(birthday);
 	                o.setPerson(p);
@@ -1052,7 +1052,7 @@
     	                o.setUserName(textUserName.getText());
     	                Date regdate = null;
     	                if (textRegistrationDate.getText() != "") {
-    	                    regdate = Util.getDateByText(textRegistrationDate.getText(), "dd.MM.YYYY").getTime();
+    	                    regdate = Util.getDateByText(textRegistrationDate.getText(), "dd.MM.yyyy").getTime();
     	                }   	          
     	                o.setDayOfRegistration(regdate);
     	                o.setUserPassword(textPassword.getText());
@@ -1071,7 +1071,7 @@
     	                p.setEmailAddress(textEmail.getText());
     	                Calendar birthday = null;
     	                if (textBirthday.getText() != "") {
-    	                    birthday = Util.getDateByText(textRegistrationDate.getText(), "dd.MM.YYYY");
+    	                    birthday = Util.getDateByText(textRegistrationDate.getText(), "dd.MM.yyyy");
     	                }
     	                p.setDayOfBirth(birthday);
     	                o.setPerson(p);
@@ -1114,15 +1114,17 @@
                 } else if (mode_Customer == ManagementGui.MODE_EDIT) {
                     try {
                         
-                        Customer o = localCustomer;
-    	                Person p = o.getPerson();
-    	                o.setCustomerId(new Integer(Integer.parseInt(textCustomerID.getText())));
-    	                o.setUserName(textUserName.getText());
-    	                o.setDayOfRegistration(Util.getDateByText(textRegistrationDate.getText(), "dd.MM.YYYY").getTime());
-    	                o.setUserPassword(textPassword.getText());
-    	                o.setHiddenQuestion(textQuestion.getText());
-    	                o.setHiddenAnswer(textAnswer.getText());
-    	                p.setPersonId(localCustomer.getPerson().getPersonId());
+                        //Customer o = localCustomer;
+    	                //Person p = o.getPerson();
+    	                
+    	                //o.setCustomerId(new Integer(Integer.parseInt(textCustomerID.getText())));
+    	                localCustomer.setUserName(textUserName.getText());
+    	                localCustomer.setDayOfRegistration(Util.getDateByText(textRegistrationDate.getText(), "dd.MM.yyyy").getTime());
+    	                localCustomer.setUserPassword(textPassword.getText());
+    	                localCustomer.setHiddenQuestion(textQuestion.getText());
+    	                localCustomer.setHiddenAnswer(textAnswer.getText());
+    	                //p.setPersonId(localCustomer.getPerson().getPersonId());
+    	                /*
     	                p.setLastName(textLastName.getText());
     	                p.setFirstName(textFirstName.getText());
     	                p.setMiddleName(textMiddleName.getText());
@@ -1134,12 +1136,12 @@
     	                p.setCity(textCity.getText());
     	                p.setCountry(textCountry.getText());
     	                p.setEmailAddress(textEmail.getText());
-    	                p.setDayOfBirth(Util.getDateByText(textBirthday.getText(), "dd.MM.YYYY"));
+    	                p.setDayOfBirth(Util.getDateByText(textBirthday.getText(), "dd.MM.yyyy"));
     	                o.setPerson(p);
-	                
+	                */
 	                    //object speichern
 	                    // Fehlerbehandlung
-	                    Database.saveObject(o);
+	                    Database.saveObject(localCustomer);
 	                    //?bersichtstabelle aktualisieren
 	                    refreshCustomerTable(textCustomerSearch.getText());
 	                    
@@ -1239,13 +1241,13 @@
         TableItem item = new TableItem(tableCustomer, SWT.NONE);
         String birthday = "";
         if (customer.getPerson().getDayOfBirth() != null) {
-            birthday = Util.getTextByDate(customer.getPerson().getDayOfBirth(), "dd.MM.YYYY");
+            birthday = Util.getTextByDate(customer.getPerson().getDayOfBirth(), "dd.MM.yyyy");
         }
         String regdate = "";
         if (customer.getDayOfRegistration() != null) {
             Calendar cal = Calendar.getInstance();
             cal.setTime(customer.getDayOfRegistration());
-            birthday = Util.getTextByDate(cal, "dd.MM.YYYY");            
+            birthday = Util.getTextByDate(cal, "dd.MM.yyyy");            
         }
         item.setText(new String[] { customer.getCustomerId() + "", 
                 					customer.getUserName(), 
@@ -1294,14 +1296,14 @@
             if (o.getPerson().getDayOfBirth() == null) {
                 date = "";
             } else {
-                date = Util.getTextByDate(o.getPerson().getDayOfBirth(), "dd.MM.YYYY");
+                date = Util.getTextByDate(o.getPerson().getDayOfBirth(), "dd.MM.yyyy");
             }
             item.setText(new String[] { o.getCustomerId() + "", 
                     					o.getUserName(), 
                     					o.getPerson().getLastName(),
                     					o.getPerson().getFirstName(),
                     					date,
-                    					Util.getTextByDate(regdate, "dd.MM.YYYY"),              					
+                    					Util.getTextByDate(regdate, "dd.MM.yyyy"),              					
                     					});
 
         }
@@ -1553,7 +1555,7 @@
             if (object.getPerson().getDayOfBirth() == null) {
                 date = "";
             } else {
-                date = Util.getTextByDate(object.getPerson().getDayOfBirth(), "dd.MM.YYYY");
+                date = Util.getTextByDate(object.getPerson().getDayOfBirth(), "dd.MM.yyyy");
             }
             textBirthday.setText(date);
             if (object.getDayOfRegistration() == null) {
@@ -1561,7 +1563,7 @@
             } else {
                 Calendar cal = Calendar.getInstance();
                 cal.setTime(object.getDayOfRegistration());
-                regdate = Util.getTextByDate(cal, "dd.MM.YYYY");
+                regdate = Util.getTextByDate(cal, "dd.MM.yyyy");
             }
             textRegistrationDate.setText(regdate);
 	        



From rgriesch at sheep.berlios.de  Fri Dec  3 14:01:29 2004
From: rgriesch at sheep.berlios.de (Remo Griesch at BerliOS)
Date: Fri, 3 Dec 2004 14:01:29 +0100
Subject: [Provirent-svn-commit] r201 - in project_src/provirent_hibernate/src/de/hsharz/provirent: management/gui management/gui/language persistence
Message-ID: <200412031301.iB3D1TmK019731@sheep.berlios.de>

Author: rgriesch
Date: 2004-12-03 14:01:28 +0100 (Fri, 03 Dec 2004)
New Revision: 201

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/movies.properties
   project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java
Log:
Composite Movie  - speichern m?\195?\182glich
                 - Runtime hinzugef?\195?\188gt
                 - editieren und l?\195?\182schen
                 erzeugen noch Probleme in der Datenbank

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java	2004-12-03 10:59:29 UTC (rev 200)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java	2004-12-03 13:01:28 UTC (rev 201)
@@ -332,12 +332,10 @@
                                         + evt);
                     }
                 });
-                tableMoviesOverview
-                        .addSelectionListener(new SelectionAdapter() {
+                tableMoviesOverview.addSelectionListener(new SelectionAdapter() {
                             public void widgetSelected(SelectionEvent evt) {
                                 if (logger.isDebugEnabled()) {
-                                    logger
-                                            .debug("widgetSelected(SelectionEvent evt = "
+                                    logger.debug("widgetSelected(SelectionEvent evt = "
                                                     + evt + ") - start");
                                 }
 
@@ -359,8 +357,7 @@
                                         .getItem(index).getText(0));
 
                                 if (logger.isDebugEnabled()) {
-                                    logger
-                                            .debug("widgetSelected(SelectionEvent) - end");
+                                    logger.debug("widgetSelected(SelectionEvent) - end");
                                 }
                             }
                         });
@@ -1177,11 +1174,6 @@
 
                     tableMoviesOverview.setEnabled(false);
                     textMoviesSearch.setEnabled(false);
-
-                    //java.util.List Movielist =
-                    // Database.getMovie(textMoviesID.getText());
-                    //only one element because of ID
-                    //movie = (Movie)Movielist.get(0);
                 }
             });
 
@@ -1196,19 +1188,15 @@
                                     + evt);
 
                     String msg = MessageFormat
-                            .format(
-                                    l
-                                            .getString("movies.groupdetail.deletebutton.question.text"),
+                            .format(l.getString("movies.groupdetail.deletebutton.question.text"),
                                     new Object[] { textMoviesTitle.getText()
                                             + " "
-                                            + l
-                                                    .getString("movies.groupdetail.deletebutton.question.gap")
+                                            + l.getString("movies.groupdetail.deletebutton.question.gap")
                                             + " " + textMoviesDate.getText() });
 
                     int question = showMsg(
                             msg,
-                            l
-                                    .getString("movies.groupdetail.deletebutton.question.header"),
+                            l.getString("movies.groupdetail.deletebutton.question.header"),
                             SWT.ICON_QUESTION | SWT.YES | SWT.NO);
 
                     if (question != SWT.YES) {
@@ -1240,36 +1228,21 @@
 
                         //Statusline Nachricht sezten
                         statusLine
-                                .setStatus(
-                                        1,
-                                        l
-                                                .getString("movies.groupdetail.deletebutton.newok"));
+                                .setStatus(1,l.getString("movies.groupdetail.deletebutton.newok"));
 
                     } catch (DataBaseException e) {
                         if (e.getMessage().equalsIgnoreCase("1")) {
                             //Fehler beim Speichern des Objectes
 
-                            statusLine
-                                    .setStatus(
-                                            3,
-                                            l
-                                                    .getString("movies.groupdetail.deletebutton.errorsave"));
-                            showMsg(
-                                    l
-                                            .getString("movies.groupdetail.deletebutton.errorsave"),
+                            statusLine.setStatus(3,l.getString("movies.groupdetail.deletebutton.errorsave"));
+                            showMsg(l.getString("movies.groupdetail.deletebutton.errorsave"),
                                     l.getString("error"), SWT.ICON_ERROR
                                             | SWT.OK);
 
                         } else if (e.getMessage().equalsIgnoreCase("2")) {
                             //fehler beim db aufbau
-                            statusLine
-                                    .setStatus(
-                                            3,
-                                            l
-                                                    .getString("movies.groupdetail.deletebutton.errordb"));
-                            showMsg(
-                                    l
-                                            .getString("movies.groupdetail.deletebutton.errordb"),
+                            statusLine.setStatus(3,l.getString("movies.groupdetail.deletebutton.errordb"));
+                            showMsg(l.getString("movies.groupdetail.deletebutton.errordb"),
                                     l.getString("error"), SWT.ICON_ERROR
                                             | SWT.OK);
 
@@ -1314,36 +1287,40 @@
                             || movie.getGenres().size() == 0
                             || movie.getImages().size() == 0) {
 
-                        showMsg(
-                                l
-                                        .getString("movies.groupdetail.savebutton.warn.noname.msg"),
-                                l
-                                        .getString("movies.groupdetail.savebutton.warn.noname.title"),
+                        showMsg(l.getString("movies.groupdetail.savebutton.warn.noname.msg"),
+                                l.getString("movies.groupdetail.savebutton.warn.noname.title"),
                                 SWT.ICON_WARNING | SWT.YES);
 
                         return;
                     }
 
                     //testen welcher mode
-                    if (mode_movie == ManagementGui.MODE_ADD) {
-                        movie.setTitle(textMoviesTitle.getText());
-                        movie.setDescription(textMoviesDescription.getText());
-                        try {
-
-                            movie.setReleaseDate(Calendar.getInstance());
-                            movie.getReleaseDate().setTime(
-                                    DateFormat.getDateInstance(DateFormat.LONG)
-                                            .parse(textMoviesDate.getText()));
+                    movie.setTitle(textMoviesTitle.getText());
+                    movie.setDescription(textMoviesDescription.getText());
+                    try {
+                        movie.setReleaseDate(Calendar.getInstance());
+                        movie.getReleaseDate().setTime(
+                                DateFormat.getDateInstance(DateFormat.LONG)
+                                .parse(textMoviesDate.getText()));
                             logger.debug("Datum: " + movie.getReleaseDate());
-                        } catch (ParseException e1) {
-                            // TODO Auto-generated catch block
-                            //Hier muss noch was gemacht werden, das Datum konnte nicht geparst werden
-                            e1.printStackTrace();
-                            return;
-                        }
-                        movie.setRuntime(Integer.parseInt(textMoviesRuntime
-                                .getText()));
+                    } catch (ParseException e1) {
+                        // TODO Auto-generated catch block
+                        //Hier muss noch was gemacht werden, das Datum konnte nicht geparst werden
+                        e1.printStackTrace();
+                        return;
                     }
+
+                    try{
+                    movie.setRuntime(Integer.parseInt(textMoviesRuntime
+                            .getText()));
+                    }
+                    catch(Exception ex){
+                        ex.printStackTrace();
+                        showMsg(l.getString("movies.groupdetail.savebutton.warn.noname.msg"),
+                                l.getString("movies.groupdetail.savebutton.warn.noname.title"),
+                                SWT.ICON_WARNING | SWT.YES);
+                        return;
+                    }
                     /**
                      * @todo eine Exception bekommen wieder leider NOCH nicht
                      *       mit d.h. es muss noch ein r?ckgabewert kommen oder
@@ -1365,9 +1342,7 @@
                         statusLine
                                 .setStatus(
                                         1,
-                                        l
-                                                .getString("movies.groupdetail.savebutton.newok"));
-
+                                        l.getString("movies.groupdetail.savebutton.newok"));
                     } catch (DataBaseException e) {
                         if (e.getMessage().equalsIgnoreCase("1")) {
                             //Fehler beim Speichern des Objectes
@@ -1375,11 +1350,9 @@
                             statusLine
                                     .setStatus(
                                             3,
-                                            l
-                                                    .getString("movies.groupdetail.savebutton.errorsave"));
+                                            l.getString("movies.groupdetail.savebutton.errorsave"));
                             showMsg(
-                                    l
-                                            .getString("movies.groupdetail.savebutton.errorsave"),
+                                    l.getString("movies.groupdetail.savebutton.errorsave"),
                                     "Fehler", SWT.ICON_ERROR | SWT.OK);
 
                         } else if (e.getMessage().equalsIgnoreCase("2")) {
@@ -1387,11 +1360,9 @@
                             statusLine
                                     .setStatus(
                                             3,
-                                            l
-                                                    .getString("movies.groupdetail.savebutton.errordb"));
+                                            l.getString("movies.groupdetail.savebutton.errordb"));
                             showMsg(
-                                    l
-                                            .getString("movies.groupdetail.savebutton.errordb"),
+                                    l.getString("movies.groupdetail.savebutton.errordb"),
                                     "Fehler", SWT.ICON_ERROR | SWT.OK);
 
                         } else {
@@ -1431,7 +1402,9 @@
      */
     private void insertIntoMoviesOverviewTable(Movie movie2) {
         // TODO Auto-generated method stub
-
+        TableItem item = new TableItem(tableMoviesOverview,SWT.NONE);
+        item.setText(new String [] {movie2.getMovieId()+ " ",movie2.getTitle()
+                + " ",Util.getTextByDate(movie2.getReleaseDate())});
     }
 
     /**
@@ -1442,6 +1415,7 @@
         textMoviesTitle.setEditable(false);
         textMoviesDescription.setEditable(false);
         textMoviesSearch.setEditable(true);
+        textMoviesRuntime.setEditable(false);
         buttonMoviesCancel.setEnabled(false);
         buttonMoviesSave.setEnabled(false);
         buttonMoviesNew.setEnabled(true);
@@ -1455,7 +1429,7 @@
         buttonMoviesDeleteGenres.setEnabled(false);
         buttonMoviesAddImages.setEnabled(false);
         buttonMoviesDeleteImages.setEnabled(false);
-        buttonMoviesChangeDate.setEnabled(true);
+        buttonMoviesChangeDate.setEnabled(false);
     }
 
     /**
@@ -1513,7 +1487,7 @@
         textMoviesID.setText(object.getMovieId() + "");
         textMoviesTitle.setText(object.getTitle());
         textMoviesDate.setText(Util.getTextByDate(object.getReleaseDate(), "dd.MM.YYYY"));
-
+        textMoviesRuntime.setText(Integer.toString(object.getRuntime()));
         textMoviesDescription.setText(object.getDescription());
 
         TableItem item;
@@ -1542,8 +1516,7 @@
             Genre o = (Genre) object.getGenres().get(i);
             logger.debug(i + " " + o);
             item = new TableItem(tableMoviesGenresDetail, SWT.NONE);
-            item
-                    .setText(new String[] { o.getGenreId() + "",
+            item.setText(new String[] { o.getGenreId() + "",
                             o.getName() + "" });
 
             //item.setText(new String[] {o.getGenreId() 
@@ -1553,7 +1526,6 @@
         //Fill Imagetable
         tableMoviesImagesDetail.removeAll();
         logger.debug("Anzahl der Bilder: " + object.getImages().size());
-        System.out.println(object.getImages().size());
         for (int i = 0; i < object.getImages().size(); i++) {
             Image o = (Image) object.getImages().get(i);
             item = new TableItem(tableMoviesImagesDetail, SWT.NONE);
@@ -1569,22 +1541,4 @@
         mode_movie = ManagementGui.MODE_VIEW;
 
     }
-
-    private void openDialogDescription() {
-        // TODO Auto-generated method stub
-        Shell dialogShell = new Shell();
-        //Dialog dialogDescription=new Dialog(dialogShell);
-        //dialogDescription.open();
-        Movie film = new Movie();
-        film.setActors(new ArrayList());
-        film.setImages(new ArrayList());
-        film.setGenres(new ArrayList());
-        film.setDirector(new ArrayList());
-
-        DialogMovie test = new DialogMovie(dialogShell, 1, l.getLocale(), film,
-                DialogMovie.TYPE_ACTOR);
-        test.open();
-
-    }
-
 }
\ No newline at end of file

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/movies.properties
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/movies.properties	2004-12-03 10:59:29 UTC (rev 200)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/movies.properties	2004-12-03 13:01:28 UTC (rev 201)
@@ -37,7 +37,7 @@
 movies.button.changedate =?ndern
 
 movies.groupdetail.savebutton.warn.noname.title =Datensatz speichern
-movies.groupdetail.savebutton.warn.noname.msg =Der Datensatz kann nicht gespeichert werden. \n Bitte geben Sie eine volst?ndigen Namen an
+movies.groupdetail.savebutton.warn.noname.msg =Der Datensatz kann nicht gespeichert werden. \n Bitte ?berpr?fen Sie auf Korrektheit und Vollst?ndigkeit
 movies.groupdetail.savebutton.newok =Speichern des neuen Films erfolgreich.
 movies.groupdetail.savebutton.editok =?ndern des Films erfolgreich.
 movies.groupdetail.savebutton.errorsave =Datenbankfehler beim Speichern.

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java	2004-12-03 10:59:29 UTC (rev 200)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java	2004-12-03 13:01:28 UTC (rev 201)
@@ -354,10 +354,8 @@
                     HibernateUtil.closeSession();
                 } catch (HibernateException e1) {
                     
-                    logger
-                            .error(
-                                    "deleteObject(Object) - Could not Close the Session",
-                                    e1);
+                    logger.error("deleteObject(Object) - Could not Close the Session",
+                                  e1);
                     
                 }
             }



From pschneider at sheep.berlios.de  Fri Dec  3 16:17:17 2004
From: pschneider at sheep.berlios.de (Philipp Schneider at BerliOS)
Date: Fri, 3 Dec 2004 16:17:17 +0100
Subject: [Provirent-svn-commit] r202 - in project_src/provirent_hibernate/src/de/hsharz/provirent: management/gui objects persistence
Message-ID: <200412031517.iB3FHHAr029973@sheep.berlios.de>

Author: pschneider
Date: 2004-12-03 16:17:16 +0100 (Fri, 03 Dec 2004)
New Revision: 202

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeCustomer.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Customer.hbm.xml
   project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Customer.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Person.hbm.xml
   project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java
Log:
- Customer ver?\195?\164ndert, timestamp entfernt
- Customer Datumsformat ver?\195?\164ndert

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeCustomer.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeCustomer.java	2004-12-03 13:01:28 UTC (rev 201)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeCustomer.java	2004-12-03 15:17:16 UTC (rev 202)
@@ -1,6 +1,8 @@
 package de.hsharz.provirent.management.gui;
 
+import java.text.DateFormat;
 import java.text.MessageFormat;
+import java.text.ParseException;
 import java.util.Calendar;
 import java.util.Date;
 import java.util.Locale;
@@ -735,13 +737,28 @@
                     cal.addDateChangedListener(new SWTCalendarListener() {
 
                         public void dateChanged(SWTCalendarEvent calendarEvent) {
+                            textRegistrationDate.setText(DateFormat.getDateInstance(
+                                    DateFormat.LONG).format(
+                                    calendarEvent.getCalendar().getTime()));
+
+                            
+                            /*
                             String date = null;
                             date = Util.getTextByDate(calendarEvent.getCalendar(), "dd.MM.yyyy");
-                            textRegistrationDate.setText(date);                          
+                            textRegistrationDate.setText(date);
+                            */                          
                         }
                     });
                     if (textRegistrationDate.getText() != null && textRegistrationDate.getText().length() > 0) {
-                        Date date = Util.getDateByText(textRegistrationDate.getText(), "dd.MM.yyyy").getTime();
+                        Date date;
+                        try {
+                            date = DateFormat.getDateInstance(DateFormat.LONG)
+                            .parse(textRegistrationDate.getText());
+                        } catch (ParseException e) {
+                            // TODO Auto-generated catch block
+                            e.printStackTrace();
+                            return;
+                        }
                         cal.setDate(date);
                     }
                     cal.open();                                                          
@@ -901,40 +918,10 @@
                    return;
                }
                 try {
-	                Customer o = new Customer();
-	                Person p = new Person();
-	                o.setCustomerId(new Integer(Integer.parseInt(textCustomerID.getText())));
-	                o.setUserName(textUserName.getText());
-	                Date regdate = null;
-	                if (textRegistrationDate.getText() != null) {
-	                    regdate = Util.getDateByText(textRegistrationDate.getText(), "dd.MM.yyyy").getTime();
-	                }
-	                o.setDayOfRegistration(regdate);
-	                o.setUserPassword(textPassword.getText());
-	                o.setHiddenQuestion(textQuestion.getText());
-	                o.setHiddenAnswer(textAnswer.getText());
-	                p.setLastName(textLastName.getText());
-	                p.setFirstName(textFirstName.getText());
-	                p.setMiddleName(textMiddleName.getText());
-	                p.setSalutation(textSalutation.getText());
-	                p.setTitle(textTitle.getText());
-	                p.setStreet(textStreet.getText());
-	                p.setStreetNumber(textNumber.getText());
-	                p.setZipCode(textZipCode.getText());
-	                p.setCity(textCity.getText());
-	                p.setCountry(textCountry.getText());
-	                p.setEmailAddress(textEmail.getText());
-	                Calendar birthday = null;
-	                if (textBirthday.getText() != "") {
-	                    birthday = Util.getDateByText(textBirthday.getText(), "dd.MM.yyyy");
-	                }
-	                p.setDayOfBirth(birthday);
-	                o.setPerson(p);
 	                
                     //object l?schen
                     // Fehlerbehandlung
 	                
-                   // Database.deleteObject(o);
 	                Database.deleteObject(localCustomer);
 	                
                     //?bersichtsTabelle aktualisieren
@@ -1050,11 +1037,22 @@
                         Customer o = new Customer();
     	                Person p = new Person();
     	                o.setUserName(textUserName.getText());
+    	                
+    	                /*
     	                Date regdate = null;
     	                if (textRegistrationDate.getText() != "") {
     	                    regdate = Util.getDateByText(textRegistrationDate.getText(), "dd.MM.yyyy").getTime();
     	                }   	          
     	                o.setDayOfRegistration(regdate);
+    	                */
+    	                Calendar cal = Calendar.getInstance();
+    	                cal.setTime(DateFormat.getDateInstance(
+                                    DateFormat.LONG).parse(
+                                    textRegistrationDate.getText()));
+    	                o.setDayOfRegistration(cal);
+    	                
+    	                
+    	                
     	                o.setUserPassword(textPassword.getText());
     	                o.setHiddenQuestion(textQuestion.getText());
     	                o.setHiddenAnswer(textAnswer.getText());
@@ -1077,7 +1075,7 @@
     	                o.setPerson(p);
                                         
                         //object speichern
-                        // Fehlerbehandlung
+                        // Fehlerbehandlung 
                         Object newCust = Database.saveObject(o);
                         
                         // in ?bersichtstabelle einf?gen
@@ -1103,6 +1101,8 @@
                             e.printStackTrace();
                         }
                         
+                    } catch (ParseException pex){
+                        pex.printStackTrace();
                     }
                     
                     
@@ -1113,13 +1113,26 @@
                     
                 } else if (mode_Customer == ManagementGui.MODE_EDIT) {
                     try {
-                        
+                        logger.debug("LocalCustomer: "+localCustomer);
+                        logger.debug("LocalPerson: "+localCustomer.getPerson());
                         //Customer o = localCustomer;
     	                //Person p = o.getPerson();
     	                
     	                //o.setCustomerId(new Integer(Integer.parseInt(textCustomerID.getText())));
     	                localCustomer.setUserName(textUserName.getText());
-    	                localCustomer.setDayOfRegistration(Util.getDateByText(textRegistrationDate.getText(), "dd.MM.yyyy").getTime());
+    	                
+    	                
+    	                //localCustomer.setDayOfRegistration(Util.getDateByText(textRegistrationDate.getText(), "dd.MM.yyyy").getTime());
+    	                
+    	                Calendar cal = Calendar.getInstance();
+    	                cal.setTime(DateFormat.getDateInstance(
+                                    DateFormat.LONG).parse(
+                                    textRegistrationDate.getText()));
+    	                localCustomer.setDayOfRegistration(cal);
+
+    	                
+    	                
+    	                
     	                localCustomer.setUserPassword(textPassword.getText());
     	                localCustomer.setHiddenQuestion(textQuestion.getText());
     	                localCustomer.setHiddenAnswer(textAnswer.getText());
@@ -1141,7 +1154,9 @@
 	                */
 	                    //object speichern
 	                    // Fehlerbehandlung
-	                    Database.saveObject(localCustomer);
+    	                logger.debug("Versuche edit zu speichern: "+localCustomer);
+    	                
+	                    Database.updateObject(localCustomer);
 	                    //?bersichtstabelle aktualisieren
 	                    refreshCustomerTable(textCustomerSearch.getText());
 	                    
@@ -1166,6 +1181,8 @@
 	                        e.printStackTrace();
 	                    }
                     
+                    } catch (ParseException pex){
+                        pex.printStackTrace();
                     }
                     
                     //alle Buttons auf aktiv setzen
@@ -1246,7 +1263,7 @@
         String regdate = "";
         if (customer.getDayOfRegistration() != null) {
             Calendar cal = Calendar.getInstance();
-            cal.setTime(customer.getDayOfRegistration());
+            cal = (customer.getDayOfRegistration());
             birthday = Util.getTextByDate(cal, "dd.MM.yyyy");            
         }
         item.setText(new String[] { customer.getCustomerId() + "", 
@@ -1291,7 +1308,7 @@
             
             item = new TableItem(tableCustomer, SWT.NONE);
             Calendar regdate = Calendar.getInstance();
-            regdate.setTime(o.getDayOfRegistration());
+            regdate = (o.getDayOfRegistration());
             String date = null;
             if (o.getPerson().getDayOfBirth() == null) {
                 date = "";
@@ -1550,22 +1567,32 @@
 	        temp = object.getHiddenAnswer();
 	        textAnswer.setText(temp == null ? "" : temp);
 	        
-	        String date = null;
-            String regdate = null;
+
             if (object.getPerson().getDayOfBirth() == null) {
-                date = "";
+                textBirthday.setText("");
             } else {
-                date = Util.getTextByDate(object.getPerson().getDayOfBirth(), "dd.MM.yyyy");
+                
+                textBirthday.setText(DateFormat.getDateInstance(
+                        DateFormat.LONG).format(
+                                object.getPerson().getDayOfBirth().getTime()));
+
+                
+                //date = Util.getTextByDate(object.getPerson().getDayOfBirth(), "dd.MM.yyyy");
             }
-            textBirthday.setText(date);
+            
             if (object.getDayOfRegistration() == null) {
-                regdate = "";
+                textRegistrationDate.setText("");
             } else {
+                textRegistrationDate.setText(DateFormat.getDateInstance(
+                        DateFormat.LONG).format(
+                                object.getDayOfRegistration().getTime()));
+                /*
                 Calendar cal = Calendar.getInstance();
-                cal.setTime(object.getDayOfRegistration());
+                cal = (object.getDayOfRegistration());
                 regdate = Util.getTextByDate(cal, "dd.MM.yyyy");
+                */
             }
-            textRegistrationDate.setText(regdate);
+            
 	        
 	        //Buttons zum l?schen und editieren aktivieren
 	        

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Customer.hbm.xml
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Customer.hbm.xml	2004-12-03 13:01:28 UTC (rev 201)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Customer.hbm.xml	2004-12-03 15:17:16 UTC (rev 202)
@@ -13,20 +13,22 @@
  			<meta attribute="implement-equals">true</meta>
  			<meta attribute="use-in-equals">true</meta>
  
-      <id name="customerId" type="int" column="CUSTOMERID">
+      <id name="customerId" type="int" column="CUSTOMERID" unsaved-value="null">
         <meta attribute="scope-set">public</meta>
         <meta attribute="use-in-equals">true</meta>
         <generator class="sequence">
-			<param name="sequence">customer_id_sequence</param>
-		</generator>
+					<param name="sequence">customer_id_sequence</param>
+				</generator>
       </id>
+
  
- 			<timestamp	name="dayOfRegistration">
- 				<meta attribute="use-in-tostring">true</meta>
- 			</timestamp>
+      <property name="dayOfRegistration" type="calendar" >
+      	<meta attribute="use-in-tostring">true</meta>
+      </property>
  
-	<many-to-one name="person" class="de.hsharz.provirent.objects.Person" column="person_id" unique="true" cascade="all"/>
- 
+	<many-to-one name="person" class="de.hsharz.provirent.objects.Person" column="person_id" unique="true" cascade="all">
+		<meta attribute="use-in-tostring">true</meta>
+	</many-to-one>
       
       <property name="userName" type="string" not-null="true">
       	<meta attribute="use-in-tostring">true</meta>

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Customer.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Customer.java	2004-12-03 13:01:28 UTC (rev 201)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Customer.java	2004-12-03 15:17:16 UTC (rev 202)
@@ -1,7 +1,7 @@
 package de.hsharz.provirent.objects;
 
 import java.io.Serializable;
-import java.util.Date;
+import java.util.Calendar;
 import org.apache.commons.lang.builder.EqualsBuilder;
 import org.apache.commons.lang.builder.HashCodeBuilder;
 import org.apache.commons.lang.builder.ToStringBuilder;
@@ -17,6 +17,9 @@
     /** identifier field */
     private Integer customerId;
 
+    /** nullable persistent field */
+    private Calendar dayOfRegistration;
+
     /** persistent field */
     private String userName;
 
@@ -30,18 +33,15 @@
     private String hiddenAnswer;
 
     /** nullable persistent field */
-    private Date dayOfRegistration;
-
-    /** nullable persistent field */
     private de.hsharz.provirent.objects.Person person;
 
     /** full constructor */
-    public Customer(String userName, String userPassword, String hiddenQuestion, String hiddenAnswer, Date dayOfRegistration, de.hsharz.provirent.objects.Person person) {
+    public Customer(Calendar dayOfRegistration, String userName, String userPassword, String hiddenQuestion, String hiddenAnswer, de.hsharz.provirent.objects.Person person) {
+        this.dayOfRegistration = dayOfRegistration;
         this.userName = userName;
         this.userPassword = userPassword;
         this.hiddenQuestion = hiddenQuestion;
         this.hiddenAnswer = hiddenAnswer;
-        this.dayOfRegistration = dayOfRegistration;
         this.person = person;
     }
 
@@ -63,8 +63,16 @@
 
     public void setCustomerId(Integer customerId) {
         this.customerId = customerId;
+    } 
+
+    public Calendar getDayOfRegistration() {
+        return this.dayOfRegistration;
     }
 
+    public void setDayOfRegistration(Calendar dayOfRegistration) {
+        this.dayOfRegistration = dayOfRegistration;
+    }
+
     public String getUserName() {
         return this.userName;
     }
@@ -97,14 +105,6 @@
         this.hiddenAnswer = hiddenAnswer;
     }
 
-    public Date getDayOfRegistration() {
-        return this.dayOfRegistration;
-    }
-
-    public void setDayOfRegistration(Date dayOfRegistration) {
-        this.dayOfRegistration = dayOfRegistration;
-    }
-
     public de.hsharz.provirent.objects.Person getPerson() {
         return this.person;
     }
@@ -116,11 +116,12 @@
     public String toString() {
         return new ToStringBuilder(this)
             .append("customerId", getCustomerId())
+            .append("dayOfRegistration", getDayOfRegistration())
             .append("userName", getUserName())
             .append("userPassword", getUserPassword())
             .append("hiddenQuestion", getHiddenQuestion())
             .append("hiddenAnswer", getHiddenAnswer())
-            .append("dayOfRegistration", getDayOfRegistration())
+            .append("person", getPerson())
             .toString();
     }
 
@@ -130,11 +131,11 @@
         Customer castOther = (Customer) other;
         return new EqualsBuilder()
             .append(this.getCustomerId(), castOther.getCustomerId())
+            .append(this.getDayOfRegistration(), castOther.getDayOfRegistration())
             .append(this.getUserName(), castOther.getUserName())
             .append(this.getUserPassword(), castOther.getUserPassword())
             .append(this.getHiddenQuestion(), castOther.getHiddenQuestion())
             .append(this.getHiddenAnswer(), castOther.getHiddenAnswer())
-            .append(this.getDayOfRegistration(), castOther.getDayOfRegistration())
             .append(this.getPerson(), castOther.getPerson())
             .isEquals();
     }
@@ -142,11 +143,11 @@
     public int hashCode() {
         return new HashCodeBuilder()
             .append(getCustomerId())
+            .append(getDayOfRegistration())
             .append(getUserName())
             .append(getUserPassword())
             .append(getHiddenQuestion())
             .append(getHiddenAnswer())
-            .append(getDayOfRegistration())
             .append(getPerson())
             .toHashCode();
     }

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Person.hbm.xml
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Person.hbm.xml	2004-12-03 13:01:28 UTC (rev 201)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Person.hbm.xml	2004-12-03 15:17:16 UTC (rev 202)
@@ -13,12 +13,12 @@
  			<meta attribute="implement-equals">true</meta>
  			<meta attribute="use-in-equals">true</meta>
  			
-      <id name="personId" type="int" column="PERSONID">
+      <id name="personId" type="int" column="PERSONID" unsaved-value="null">
         <meta attribute="scope-set">public</meta>
         <meta attribute="use-in-equals">true</meta>
         <generator class="sequence">
-			<param name="sequence">person_id_sequence</param>
-		</generator>
+					<param name="sequence">person_id_sequence</param>
+				</generator>
       </id>
 	  
 

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java	2004-12-03 13:01:28 UTC (rev 201)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java	2004-12-03 15:17:16 UTC (rev 202)
@@ -166,6 +166,7 @@
         
 
     }
+
     public static Object saveObject(Object o) throws DataBaseException{
         if (logger.isDebugEnabled()) {
             logger
@@ -180,7 +181,6 @@
             try {
                 //get new Session and begin Transaction
                 s = HibernateUtil.currentSession();
-                tx = s.beginTransaction();
                 try{
                     s.saveOrUpdate(o);
                 } catch (HibernateException e) {
@@ -190,7 +190,6 @@
                 }
                 s.flush();
                
-                tx.commit();
                 
             } catch (HibernateException e) {
                 //exception = 2;
@@ -229,9 +228,13 @@
         return o;
     }
     
-    public static void deleteObjectWithId(final Class deleteclass, final Integer id) throws DataBaseException{
+
+
+    public static Object updateObject(Object o) throws DataBaseException{
         if (logger.isDebugEnabled()) {
-            logger.debug("deleteObjectWithId(Class = " + deleteclass.getName()+" Id: "+id+ ") - start");
+            logger
+                    .debug("updateObject(Object o = " + o
+                            + ") - start");
         }
         int exception =0;
         
@@ -241,31 +244,24 @@
             try {
                 //get new Session and begin Transaction
                 s = HibernateUtil.currentSession();
-                tx = s.beginTransaction();
-                
                 try{
-                    s.delete("");
-                
+                		logger.debug("Object "+o.getClass().getName() + " String:"+o);
+                    s.update(o);
                 } catch (HibernateException e) {
-                    logger.error("deleteObjectWithId(). Fehler beim Speichern/Updaten "
-                            + "des Objectes:" + deleteclass.getName() + " ID: "+id+" Exception: " + e);
+                    logger.error("updateObject(). Fehler beim Updaten "
+                            +"des Objectes:"+o+" Exception: "+e);
                     exception = 1;
                 }
+                s.flush();
                
                 
-
-                //s.flush();
-                
-                tx.commit();
-                
-                
             } catch (HibernateException e) {
-                exception = 2;
-                logger.error("Message "+  e.getMessages().toString()); 
+                //exception = 2;
                 logger
-                        .error(
-                                "deleteObjectWithId(Object) - Something went wrong here; discard all partial changes",
-                                e);
+                .error(
+                        "updateObject() - Something went wrong here; discard all partial changes",
+                        e);
+                
                 if (tx != null) {
                     try {
                         // Something went wrong; discard all partial changes
@@ -281,10 +277,7 @@
                     HibernateUtil.closeSession();
                 } catch (HibernateException e1) {
                     
-                    logger
-                            .error(
-                                    "deleteObjectWithId(Object) - Could not Close the Session",
-                                    e1);
+                    logger.error("updateObject() - Could not Close the Session", e1);
                     
                 }
             }
@@ -294,10 +287,11 @@
             }
             
         if (logger.isDebugEnabled()) {
-            logger.debug("deleteObjectWithId(Object) - end");
+            logger.debug("updateObject(VideoFormat) - end");
         }
+        return o;
     }
-  
+
     
     public static void deleteObject(Object o) throws DataBaseException{
         if (logger.isDebugEnabled()) {
@@ -319,7 +313,7 @@
                     
                 
                 } catch (HibernateException e) {
-                    logger.error("deleteObject(). Fehler beim Speichern/Updaten "
+                    logger.error("deleteObject(). Fehler beim L?schen "
                             + "des Objectes:" + o + " Exception: " + e);
                     exception = 1;
                 }



From pschneider at sheep.berlios.de  Fri Dec  3 16:27:30 2004
From: pschneider at sheep.berlios.de (Philipp Schneider at BerliOS)
Date: Fri, 3 Dec 2004 16:27:30 +0100
Subject: [Provirent-svn-commit] r203 - project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui
Message-ID: <200412031527.iB3FRUGL030366@sheep.berlios.de>

Author: pschneider
Date: 2004-12-03 16:27:28 +0100 (Fri, 03 Dec 2004)
New Revision: 203

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeCustomer.java
Log:


Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeCustomer.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeCustomer.java	2004-12-03 15:17:16 UTC (rev 202)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeCustomer.java	2004-12-03 15:27:28 UTC (rev 203)
@@ -1566,8 +1566,8 @@
 	        textQuestion.setText(temp == null ? "" : temp);
 	        temp = object.getHiddenAnswer();
 	        textAnswer.setText(temp == null ? "" : temp);
-	        
 
+
             if (object.getPerson().getDayOfBirth() == null) {
                 textBirthday.setText("");
             } else {



From pschneider at sheep.berlios.de  Sun Dec  5 16:23:03 2004
From: pschneider at sheep.berlios.de (Philipp Schneider at BerliOS)
Date: Sun, 5 Dec 2004 16:23:03 +0100
Subject: [Provirent-svn-commit] r204 - in project_src/provirent_hibernate/src/de/hsharz/provirent: management/gui management/gui/language objects
Message-ID: <200412051523.iB5FN3co004956@sheep.berlios.de>

Author: pschneider
Date: 2004-12-05 16:23:02 +0100 (Sun, 05 Dec 2004)
New Revision: 204

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeCustomer.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/DialogMovie.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/SWTCalendarDialog.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/customer.properties
   project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Customer.java
Log:
- datenbankfehler beseitig
- datumsformate korrigiert (ohne Util)
- Validate Methode hinzugef?\195?\188gt

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeCustomer.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeCustomer.java	2004-12-03 15:27:28 UTC (rev 203)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeCustomer.java	2004-12-05 15:23:02 UTC (rev 204)
@@ -3,8 +3,10 @@
 import java.text.DateFormat;
 import java.text.MessageFormat;
 import java.text.ParseException;
+import java.util.ArrayList;
 import java.util.Calendar;
 import java.util.Date;
+import java.util.List;
 import java.util.Locale;
 import java.util.PropertyResourceBundle;
 import java.util.ResourceBundle;
@@ -45,20 +47,17 @@
 import de.hsharz.provirent.persistence.Database;
 
 /**
-* This code was generated using CloudGarden's Jigloo
-* SWT/Swing GUI Builder, which is free for non-commercial
-* use. If Jigloo is being used commercially (ie, by a corporation,
-* company or business for any purpose whatever) then you
-* should purchase a license for each developer using Jigloo.
-* Please visit www.cloudgarden.com for details.
-* Use of Jigloo implies acceptance of these licensing terms.
-* *************************************
-* A COMMERCIAL LICENSE HAS NOT BEEN PURCHASED
-* for this machine, so Jigloo or this code cannot be used legally
-* for any corporate or commercial purpose.
-* *************************************
-*/
-public class CompositeCustomer extends AbstractComposite{
+ * This code was generated using CloudGarden's Jigloo SWT/Swing GUI Builder,
+ * which is free for non-commercial use. If Jigloo is being used commercially
+ * (ie, by a corporation, company or business for any purpose whatever) then you
+ * should purchase a license for each developer using Jigloo. Please visit
+ * www.cloudgarden.com for details. Use of Jigloo implies acceptance of these
+ * licensing terms. ************************************* A COMMERCIAL LICENSE
+ * HAS NOT BEEN PURCHASED for this machine, so Jigloo or this code cannot be
+ * used legally for any corporate or commercial purpose.
+ * *************************************
+ */
+public class CompositeCustomer extends AbstractComposite {
 
     {
         //Register as a resource user - SWTResourceManager will
@@ -66,23 +65,24 @@
         SWTResourceManager.registerResourceUser(this);
     }
 
-
     /**
      * Logger for this class
      */
     private static final Logger logger = Logger
             .getLogger(CompositeCustomer.class);
-    
-    
+
     private final static int MODE_VIEW = 0;
 
     private final static int MODE_ADD = 1;
-    
+
     private SashForm sashForm1;
+
     private SashForm sashFormCustomer;
-    
+
     private Composite parent;
+
     private Composite compositeButtons;
+
     private Button changeStartDateButton;
 
     private Group groupCustomer;
@@ -90,85 +90,111 @@
     private Group groupCustomerOverview;
 
     private Group groupCustomerDetail;
-    
+
     private Button buttonCustomerCancel;
+
     private Button buttonCustomerSave;
+
     private Button buttonCustomerFill;
+
     private Button buttonCustomerDelete;
+
     private Button buttonCustomerEdit;
+
     private Button buttonCustomerNew;
-           
+
     private Table tableCustomer;
+
     private TableColumn tableColumn;
 
+    private final static int MODE_EDIT = 2;
 
-    private final static int MODE_EDIT = 2;
-    
     private StatusLineStyledText statusLine;
 
     private ResourceBundle l;
-    
+
     private int mode_Customer;
-    
+
     private Text textCustomerSearch;
+
     private Label labelCustomerSearch;
-    
-    private Label labelCustomerId;       
+
+    private Label labelCustomerId;
+
     private Text textCustomerID;
 
     private Label labelUserName;
+
     private Text textUserName;
 
     private Label labelLastName;
+
     private Text textLastName;
 
     private Label labelFirstName;
+
     private Text textFirstName;
 
     private Label labelMiddleName;
+
     private Text textMiddleName;
 
     private Label labelPassword;
+
     private Text textPassword;
 
     private Label labelRegistrationDate;
+
     private Text textRegistrationDate;
+
     private Button changeRegistrationDateButton;
-    
+
     private Label labelBirthday;
+
     private Text textBirthday;
+
     private Button changeBirthdayDateButton;
-    
+
     private Label labelSalutation;
+
     private Text textSalutation;
-    
+
     private Label labelTitle;
+
     private Text textTitle;
-    
+
     private Label labelStreet;
+
     private Text textStreet;
+
     private Text textNumber;
 
     private Label labelZipCode;
+
     private Text textZipCode;
 
     private Label labelCountry;
+
     private Text textCountry;
 
     private Label labelCity;
+
     private Text textCity;
 
     private Label labelEmail;
+
     private Text textEmail;
 
     private Label labelQuestion;
+
     private Text textQuestion;
 
     private Label labelAnswer;
+
     private Text textAnswer;
 
     private Customer localCustomer;
- 
+
     /*
      * ?ndert die Sprache aller Elemente
      * 
@@ -178,8 +204,9 @@
 
     }
 
-    /* 
+    /*
      * Init die Sprache (properties Datei)
+     * 
      * @see de.hsharz.provirent.managment.gui.AbstractComposite#initLanguage(java.util.Locale)
      */
     public void initLanguage(Locale locale) {
@@ -188,47 +215,45 @@
                 "de.hsharz.provirent.management.gui.language.Customer", locale);
 
     }
-    
-    
-	/**
-	* Auto-generated main method to display this 
-	* org.eclipse.swt.widgets.Composite inside a new Shell.
-	*/
-	public static void main(String[] args) {
-		showGUI();
-	}
-		
-	/**
-	* Auto-generated method to display this 
-	* org.eclipse.swt.widgets.Composite inside a new Shell.
-	*/
-	public static void showGUI() {
-		Display display = Display.getDefault();
-		Shell shell = new Shell(display);
 
-		shell.open();
-		while (!shell.isDisposed()) {
-			if (!display.readAndDispatch())
-				display.sleep();
-		}
-	}
+    /**
+     * Auto-generated main method to display this
+     * org.eclipse.swt.widgets.Composite inside a new Shell.
+     */
+    public static void main(String[] args) {
+        showGUI();
+    }
 
-	public CompositeCustomer(Composite p, int style,
+    /**
+     * Auto-generated method to display this org.eclipse.swt.widgets.Composite
+     * inside a new Shell.
+     */
+    public static void showGUI() {
+        Display display = Display.getDefault();
+        Shell shell = new Shell(display);
+
+        shell.open();
+        while (!shell.isDisposed()) {
+            if (!display.readAndDispatch())
+                display.sleep();
+        }
+    }
+
+    public CompositeCustomer(Composite p, int style,
             StatusLineStyledText status, Locale l) {
-	    super(p, style, status, l);
+        super(p, style, status, l);
         parent = p;
         //Statusline wird gestzt
         statusLine = status;
-        
+
         //sprache wird init
         initLanguage(l);
-	    
-	    
-		initGUI();
-	}
 
-	private void initGUI() {
-	    if (logger.isDebugEnabled()) {
+        initGUI();
+    }
+
+    private void initGUI() {
+        if (logger.isDebugEnabled()) {
             logger.debug("initGUI() - start");
         }
 
@@ -247,8 +272,9 @@
             try {
                 refreshCustomerTable(textCustomerSearch.getText());
             } catch (DataBaseException e) {
-                // TODO Auto-generated catch block
-                e.printStackTrace();
+                logger
+                        .error("Databaseerror while refreshing Customer Table",
+                                e);
             }
 
         }
@@ -257,10 +283,10 @@
         if (logger.isDebugEnabled()) {
             logger.debug("initGUI() - end");
         }
-    } 
-	
-	/**
-     * 
+    }
+
+    /**
+     *  
      */
     private void initCustomerGroup() {
         {
@@ -273,8 +299,11 @@
             FormData group2LData = new FormData();
             groupCustomer.addFocusListener(new FocusAdapter() {
                 public void focusLost(FocusEvent evt) {
-                    System.out.println("groupCustomer.focusLost, event="
-                        + evt);
+                    if (logger.isDebugEnabled()) {
+                        logger
+                                .debug("focusLost(FocusEvent) - groupCustomer.focusLost, event="
+                                        + evt);
+                    }
                     buttonCustomerCancel.setEnabled(false);
                     buttonCustomerDelete.setEnabled(false);
                     buttonCustomerEdit.setEnabled(false);
@@ -304,10 +333,10 @@
             }
         }
 
-	}
+    }
 
     /**
-     * 
+     *  
      */
     private void initCustomerGroupDetail() {
         groupCustomerDetail = new Group(sashFormCustomer, SWT.NONE);
@@ -315,8 +344,7 @@
         groupCustomerDetailLayout.marginHeight = 25;
         groupCustomerDetailLayout.numColumns = 4;
         groupCustomerDetailLayout.verticalSpacing = 15;
-        groupCustomerDetail.setText(l
-                .getString("Customer.groupdetail.label"));
+        groupCustomerDetail.setText(l.getString("Customer.groupdetail.label"));
         FormData formData = new FormData();
         groupCustomerDetail.setLayout(groupCustomerDetailLayout);
         formData.right = new FormAttachment(100, 100, -5);
@@ -325,15 +353,14 @@
         groupCustomerDetail.setLayoutData(formData);
         {
             labelCustomerId = new Label(groupCustomerDetail, SWT.NONE);
-            labelCustomerId.setText(l
-                    .getString("Customer.groupdetail.idlabel")
+            labelCustomerId.setText(l.getString("Customer.groupdetail.idlabel")
                     + ":");
             labelCustomerId.setSize(90, 15);
             GridData formData2 = new GridData();
             formData2.widthHint = 90;
             formData2.heightHint = 15;
             labelCustomerId.setLayoutData(formData2);
-        }        
+        }
         {
             textCustomerID = new Text(groupCustomerDetail, SWT.READ_ONLY
                     | SWT.BORDER);
@@ -377,8 +404,8 @@
             labelLastName.setLayoutData(labelLastNameLData);
         }
         {
-            textLastName = new Text(groupCustomerDetail,
-                    SWT.READ_ONLY | SWT.BORDER);
+            textLastName = new Text(groupCustomerDetail, SWT.READ_ONLY
+                    | SWT.BORDER);
             GridData text1LData2 = new GridData();
             text1LData2.horizontalAlignment = GridData.FILL;
             text1LData2.heightHint = 13;
@@ -387,8 +414,7 @@
             textLastName.setLayoutData(text1LData2);
         }
         {
-            labelFirstName = new Label(groupCustomerDetail,
-                    SWT.NONE);
+            labelFirstName = new Label(groupCustomerDetail, SWT.NONE);
             labelFirstName.setText(l
                     .getString("Customer.groupdetail.firstnamelabel")
                     + ":");
@@ -399,8 +425,8 @@
             labelFirstName.setLayoutData(label2LData1);
         }
         {
-            textFirstName = new Text(groupCustomerDetail,
-                    SWT.READ_ONLY | SWT.BORDER);
+            textFirstName = new Text(groupCustomerDetail, SWT.READ_ONLY
+                    | SWT.BORDER);
             GridData text1LData3 = new GridData();
             text1LData3.horizontalAlignment = GridData.FILL;
             text1LData3.heightHint = 13;
@@ -408,8 +434,7 @@
             textFirstName.setLayoutData(text1LData3);
         }
         {
-            labelMiddleName = new Label(groupCustomerDetail,
-                    SWT.NONE);
+            labelMiddleName = new Label(groupCustomerDetail, SWT.NONE);
             labelMiddleName.setText(l
                     .getString("Customer.groupdetail.middlenamelabel")
                     + ":");
@@ -420,8 +445,8 @@
             labelMiddleName.setLayoutData(label2LData1);
         }
         {
-            textMiddleName = new Text(groupCustomerDetail,
-                    SWT.READ_ONLY | SWT.BORDER);
+            textMiddleName = new Text(groupCustomerDetail, SWT.READ_ONLY
+                    | SWT.BORDER);
             GridData text1LData3 = new GridData();
             text1LData3.heightHint = 13;
             text1LData3.horizontalAlignment = GridData.FILL;
@@ -429,8 +454,7 @@
             textMiddleName.setLayoutData(text1LData3);
         }
         {
-            labelSalutation = new Label(groupCustomerDetail,
-                    SWT.NONE);
+            labelSalutation = new Label(groupCustomerDetail, SWT.NONE);
             labelSalutation.setText(l
                     .getString("Customer.groupdetail.salutationlabel")
                     + ":");
@@ -441,8 +465,8 @@
             labelSalutation.setLayoutData(label1LData1);
         }
         {
-            textSalutation = new Text(groupCustomerDetail,
-                    SWT.READ_ONLY | SWT.BORDER);
+            textSalutation = new Text(groupCustomerDetail, SWT.READ_ONLY
+                    | SWT.BORDER);
             GridData text1LData3 = new GridData();
             text1LData3.horizontalAlignment = GridData.FILL;
             text1LData3.heightHint = 13;
@@ -450,10 +474,8 @@
             textSalutation.setLayoutData(text1LData3);
         }
         {
-            labelTitle = new Label(groupCustomerDetail,
-                    SWT.NONE);
-            labelTitle.setText(l
-                    .getString("Customer.groupdetail.titlelabel")
+            labelTitle = new Label(groupCustomerDetail, SWT.NONE);
+            labelTitle.setText(l.getString("Customer.groupdetail.titlelabel")
                     + ":");
             labelTitle.setSize(70, 15);
             GridData label1LData1 = new GridData();
@@ -462,8 +484,8 @@
             labelTitle.setLayoutData(label1LData1);
         }
         {
-            textTitle = new Text(groupCustomerDetail,
-                    SWT.READ_ONLY | SWT.BORDER);
+            textTitle = new Text(groupCustomerDetail, SWT.READ_ONLY
+                    | SWT.BORDER);
             GridData text1LData3 = new GridData();
             text1LData3.horizontalAlignment = GridData.FILL;
             text1LData3.heightHint = 13;
@@ -471,8 +493,7 @@
             textTitle.setLayoutData(text1LData3);
         }
         {
-            labelBirthday = new Label(groupCustomerDetail,
-                    SWT.NONE);
+            labelBirthday = new Label(groupCustomerDetail, SWT.NONE);
             labelBirthday.setText(l
                     .getString("Customer.groupdetail.birthdaylabel")
                     + ":");
@@ -483,8 +504,8 @@
             labelBirthday.setLayoutData(label1LData1);
         }
         {
-            textBirthday = new Text(groupCustomerDetail,
-                    SWT.READ_ONLY | SWT.BORDER);
+            textBirthday = new Text(groupCustomerDetail, SWT.READ_ONLY
+                    | SWT.BORDER);
             GridData text1LData3 = new GridData();
             text1LData3.horizontalAlignment = GridData.FILL;
             text1LData3.heightHint = 13;
@@ -494,39 +515,56 @@
         }
         {
             changeBirthdayDateButton = new Button(groupCustomerDetail, SWT.PUSH
-                | SWT.CENTER);
-            changeBirthdayDateButton.setText(l.getString("Customer.groupdetail.birthdaybuttonchange"));
+                    | SWT.CENTER);
+            changeBirthdayDateButton.setText(l
+                    .getString("Customer.groupdetail.birthdaybuttonchange"));
             GridData text1LData3 = new GridData();
             changeBirthdayDateButton.setEnabled(false);
-            changeBirthdayDateButton.addSelectionListener(new SelectionAdapter() {
-                public void widgetSelected(SelectionEvent evt) {
+            changeBirthdayDateButton
+                    .addSelectionListener(new SelectionAdapter() {
+                        public void widgetSelected(SelectionEvent evt) {
 
-                    final SWTCalendarDialog cal = new SWTCalendarDialog(getDisplay(),l.getString("Customer.groupdetail.birthdaybuttonfinish"));
+                            final SWTCalendarDialog cal = new SWTCalendarDialog(
+                                    getDisplay(),
+                                    l
+                                            .getString("Customer.groupdetail.birthdaybuttonfinish"));
 
-                    cal.addDateChangedListener(new SWTCalendarListener() {
+                            cal
+                                    .addDateChangedListener(new SWTCalendarListener() {
 
-                        public void dateChanged(SWTCalendarEvent calendarEvent) {
-                            String date;
-                            date = Util.getTextByDate(calendarEvent.getCalendar(), "dd.MM.yyyy");
-                            textBirthday.setText(date);                     
+                                        public void dateChanged(
+                                                SWTCalendarEvent cE) {
+                                            textBirthday
+                                                    .setText(DateFormat
+                                                            .getDateInstance(
+                                                                    DateFormat.LONG)
+                                                            .format(
+                                                                    cE
+                                                                            .getCalendar()
+                                                                            .getTime()));
+                                        }
+                                    });
+                            if (textBirthday.getText() != null
+                                    && textBirthday.getText().length() > 0) {
+
+                                try {
+                                    cal.setDate(DateFormat.getDateInstance(
+                                            DateFormat.LONG).parse(
+                                            textBirthday.getText()));
+                                } catch (ParseException e) {
+                                    cal.setDate(new Date());
+                                }
+                            }
+                            cal.open();
                         }
                     });
-                    if (textBirthday.getText() != null && textBirthday.getText().length() > 0) {
-                        Date date = Util.getDateByText(textBirthday.getText(), "dd.MM.yyyy").getTime();
-                        cal.setDate(date);
-                    }
-                    cal.open();                                                          
-                }
-            });
-            text1LData3.horizontalAlignment = GridData.FILL;          
+            text1LData3.horizontalAlignment = GridData.FILL;
             text1LData3.horizontalSpan = 1;
             changeBirthdayDateButton.setLayoutData(text1LData3);
         }
         {
-            labelStreet = new Label(groupCustomerDetail,
-                    SWT.NONE);
-            labelStreet.setText(l
-                    .getString("Customer.groupdetail.streetlabel")
+            labelStreet = new Label(groupCustomerDetail, SWT.NONE);
+            labelStreet.setText(l.getString("Customer.groupdetail.streetlabel")
                     + ":");
             labelStreet.setSize(90, 15);
             GridData label1LData1 = new GridData();
@@ -535,8 +573,8 @@
             labelStreet.setLayoutData(label1LData1);
         }
         {
-            textStreet = new Text(groupCustomerDetail,
-                    SWT.READ_ONLY | SWT.BORDER);
+            textStreet = new Text(groupCustomerDetail, SWT.READ_ONLY
+                    | SWT.BORDER);
             GridData text1LData3 = new GridData();
             text1LData3.horizontalAlignment = GridData.FILL;
             text1LData3.heightHint = 13;
@@ -544,8 +582,8 @@
             textStreet.setLayoutData(text1LData3);
         }
         {
-            textNumber = new Text(groupCustomerDetail,
-                    SWT.READ_ONLY | SWT.BORDER);
+            textNumber = new Text(groupCustomerDetail, SWT.READ_ONLY
+                    | SWT.BORDER);
             GridData text1LData3 = new GridData();
             text1LData3.horizontalAlignment = GridData.END;
             text1LData3.heightHint = 13;
@@ -553,8 +591,7 @@
             textNumber.setLayoutData(text1LData3);
         }
         {
-            labelZipCode = new Label(groupCustomerDetail,
-                    SWT.NONE);
+            labelZipCode = new Label(groupCustomerDetail, SWT.NONE);
             labelZipCode.setText(l
                     .getString("Customer.groupdetail.zipcodelabel")
                     + ":");
@@ -565,8 +602,8 @@
             labelZipCode.setLayoutData(label1LData1);
         }
         {
-            textZipCode = new Text(groupCustomerDetail,
-                    SWT.READ_ONLY | SWT.BORDER);
+            textZipCode = new Text(groupCustomerDetail, SWT.READ_ONLY
+                    | SWT.BORDER);
             GridData text1LData3 = new GridData();
             text1LData3.horizontalAlignment = GridData.FILL;
             text1LData3.heightHint = 13;
@@ -574,10 +611,8 @@
             textZipCode.setLayoutData(text1LData3);
         }
         {
-            labelCity = new Label(groupCustomerDetail,
-                    SWT.NONE);
-            labelCity.setText(l
-                    .getString("Customer.groupdetail.citylabel")
+            labelCity = new Label(groupCustomerDetail, SWT.NONE);
+            labelCity.setText(l.getString("Customer.groupdetail.citylabel")
                     + ":");
             labelCity.setSize(70, 15);
             GridData label1LData1 = new GridData();
@@ -586,18 +621,16 @@
             labelCity.setLayoutData(label1LData1);
         }
         {
-            textCity = new Text(groupCustomerDetail,
-                    SWT.READ_ONLY | SWT.BORDER);
+            textCity = new Text(groupCustomerDetail, SWT.READ_ONLY | SWT.BORDER);
             GridData text1LData3 = new GridData();
             text1LData3.horizontalAlignment = GridData.FILL;
             text1LData3.heightHint = 13;
             text1LData3.horizontalSpan = 1;
             textCity.setLayoutData(text1LData3);
         }
-        
+
         {
-            labelCountry = new Label(groupCustomerDetail,
-                    SWT.NONE);
+            labelCountry = new Label(groupCustomerDetail, SWT.NONE);
             labelCountry.setText(l
                     .getString("Customer.groupdetail.countrylabel")
                     + ":");
@@ -608,8 +641,8 @@
             labelCountry.setLayoutData(label1LData1);
         }
         {
-            textCountry = new Text(groupCustomerDetail,
-                    SWT.READ_ONLY | SWT.BORDER);
+            textCountry = new Text(groupCustomerDetail, SWT.READ_ONLY
+                    | SWT.BORDER);
             GridData text1LData3 = new GridData();
             text1LData3.horizontalAlignment = GridData.FILL;
             text1LData3.heightHint = 13;
@@ -617,8 +650,7 @@
             textCountry.setLayoutData(text1LData3);
         }
         {
-            labelPassword = new Label(groupCustomerDetail,
-                    SWT.NONE);
+            labelPassword = new Label(groupCustomerDetail, SWT.NONE);
             labelPassword.setText(l
                     .getString("Customer.groupdetail.passwordlabel")
                     + ":");
@@ -629,8 +661,8 @@
             labelPassword.setLayoutData(label1LData1);
         }
         {
-            textPassword = new Text(groupCustomerDetail,
-                    SWT.READ_ONLY | SWT.BORDER);
+            textPassword = new Text(groupCustomerDetail, SWT.READ_ONLY
+                    | SWT.BORDER);
             GridData text1LData3 = new GridData();
             text1LData3.horizontalAlignment = GridData.FILL;
             text1LData3.heightHint = 13;
@@ -638,10 +670,8 @@
             textPassword.setLayoutData(text1LData3);
         }
         {
-            labelEmail = new Label(groupCustomerDetail,
-                    SWT.NONE);
-            labelEmail.setText(l
-                    .getString("Customer.groupdetail.emaillabel")
+            labelEmail = new Label(groupCustomerDetail, SWT.NONE);
+            labelEmail.setText(l.getString("Customer.groupdetail.emaillabel")
                     + ":");
             labelEmail.setSize(90, 15);
             GridData label1LData1 = new GridData();
@@ -650,8 +680,8 @@
             labelEmail.setLayoutData(label1LData1);
         }
         {
-            textEmail = new Text(groupCustomerDetail,
-                    SWT.READ_ONLY | SWT.BORDER);
+            textEmail = new Text(groupCustomerDetail, SWT.READ_ONLY
+                    | SWT.BORDER);
             GridData text1LData3 = new GridData();
             text1LData3.horizontalAlignment = GridData.FILL;
             text1LData3.heightHint = 13;
@@ -659,8 +689,7 @@
             textEmail.setLayoutData(text1LData3);
         }
         {
-            labelQuestion = new Label(groupCustomerDetail,
-                    SWT.NONE);
+            labelQuestion = new Label(groupCustomerDetail, SWT.NONE);
             labelQuestion.setText(l
                     .getString("Customer.groupdetail.questionlabel")
                     + ":");
@@ -671,8 +700,8 @@
             labelQuestion.setLayoutData(label1LData1);
         }
         {
-            textQuestion = new Text(groupCustomerDetail,
-                    SWT.READ_ONLY | SWT.BORDER);
+            textQuestion = new Text(groupCustomerDetail, SWT.READ_ONLY
+                    | SWT.BORDER);
             GridData text1LData3 = new GridData();
             text1LData3.horizontalAlignment = GridData.FILL;
             text1LData3.heightHint = 13;
@@ -680,10 +709,8 @@
             textQuestion.setLayoutData(text1LData3);
         }
         {
-            labelAnswer = new Label(groupCustomerDetail,
-                    SWT.NONE);
-            labelAnswer.setText(l
-                    .getString("Customer.groupdetail.answerlabel")
+            labelAnswer = new Label(groupCustomerDetail, SWT.NONE);
+            labelAnswer.setText(l.getString("Customer.groupdetail.answerlabel")
                     + ":");
             labelAnswer.setSize(90, 15);
             GridData label1LData1 = new GridData();
@@ -692,17 +719,16 @@
             labelAnswer.setLayoutData(label1LData1);
         }
         {
-            textAnswer = new Text(groupCustomerDetail,
-                    SWT.READ_ONLY | SWT.BORDER);
+            textAnswer = new Text(groupCustomerDetail, SWT.READ_ONLY
+                    | SWT.BORDER);
             GridData text1LData3 = new GridData();
             text1LData3.horizontalAlignment = GridData.FILL;
             text1LData3.heightHint = 13;
             text1LData3.horizontalSpan = 3;
             textAnswer.setLayoutData(text1LData3);
-        }       
+        }
         {
-            labelRegistrationDate = new Label(groupCustomerDetail,
-                    SWT.NONE);
+            labelRegistrationDate = new Label(groupCustomerDetail, SWT.NONE);
             labelRegistrationDate.setText(l
                     .getString("Customer.groupdetail.regdatelabel")
                     + ":");
@@ -714,8 +740,8 @@
             labelRegistrationDate.setLayoutData(label1LData1);
         }
         {
-            textRegistrationDate = new Text(groupCustomerDetail,
-                    SWT.READ_ONLY | SWT.BORDER);
+            textRegistrationDate = new Text(groupCustomerDetail, SWT.READ_ONLY
+                    | SWT.BORDER);
             GridData text1LData3 = new GridData();
             text1LData3.horizontalAlignment = GridData.FILL;
             text1LData3.heightHint = 13;
@@ -724,48 +750,54 @@
             textRegistrationDate.setEnabled(false);
         }
         {
-            changeRegistrationDateButton = new Button(groupCustomerDetail, SWT.PUSH
-                | SWT.CENTER);
-            changeRegistrationDateButton.setText(l.getString("Customer.groupdetail.registrationdatebuttonchange"));
+            changeRegistrationDateButton = new Button(groupCustomerDetail,
+                    SWT.PUSH | SWT.CENTER);
+            changeRegistrationDateButton
+                    .setText(l
+                            .getString("Customer.groupdetail.registrationdatebuttonchange"));
             GridData text1LData3 = new GridData();
             changeRegistrationDateButton.setEnabled(false);
-            changeRegistrationDateButton.addSelectionListener(new SelectionAdapter() {
-                public void widgetSelected(SelectionEvent evt) {
+            changeRegistrationDateButton
+                    .addSelectionListener(new SelectionAdapter() {
+                        public void widgetSelected(SelectionEvent evt) {
 
-                    final SWTCalendarDialog cal = new SWTCalendarDialog(getDisplay(),l.getString("Customer.groupdetail.registrationdatebuttonfinish"));
+                            final SWTCalendarDialog cal = new SWTCalendarDialog(
+                                    getDisplay(),
+                                    l
+                                            .getString("Customer.groupdetail.registrationdatebuttonfinish"));
 
-                    cal.addDateChangedListener(new SWTCalendarListener() {
+                            cal
+                                    .addDateChangedListener(new SWTCalendarListener() {
 
-                        public void dateChanged(SWTCalendarEvent calendarEvent) {
-                            textRegistrationDate.setText(DateFormat.getDateInstance(
-                                    DateFormat.LONG).format(
-                                    calendarEvent.getCalendar().getTime()));
+                                        public void dateChanged(
+                                                SWTCalendarEvent calendarEvent) {
+                                            textRegistrationDate
+                                                    .setText(DateFormat
+                                                            .getDateInstance(
+                                                                    DateFormat.LONG)
+                                                            .format(
+                                                                    calendarEvent
+                                                                            .getCalendar()
+                                                                            .getTime()));
 
-                            
-                            /*
-                            String date = null;
-                            date = Util.getTextByDate(calendarEvent.getCalendar(), "dd.MM.yyyy");
-                            textRegistrationDate.setText(date);
-                            */                          
+                                        }
+                                    });
+                            if (textRegistrationDate.getText() != null
+                                    && textRegistrationDate.getText().length() > 0) {
+
+                                try {
+                                    cal.setDate(DateFormat.getDateInstance(
+                                            DateFormat.LONG).parse(
+                                            textRegistrationDate.getText()));
+                                } catch (ParseException e) {
+                                    cal.setDate(new Date());
+                                }
+                            }
+                            cal.open();
                         }
                     });
-                    if (textRegistrationDate.getText() != null && textRegistrationDate.getText().length() > 0) {
-                        Date date;
-                        try {
-                            date = DateFormat.getDateInstance(DateFormat.LONG)
-                            .parse(textRegistrationDate.getText());
-                        } catch (ParseException e) {
-                            // TODO Auto-generated catch block
-                            e.printStackTrace();
-                            return;
-                        }
-                        cal.setDate(date);
-                    }
-                    cal.open();                                                          
-                }
-            });
             text1LData3.horizontalAlignment = GridData.FILL;
-            
+
             text1LData3.horizontalSpan = 1;
             changeRegistrationDateButton.setLayoutData(text1LData3);
         }
@@ -791,17 +823,15 @@
 
         }
 
-        
     }
 
     /**
-     * 
+     *  
      */
     private void initCustomerDetailButtons() {
         buttonCustomerNew = new Button(compositeButtons, SWT.PUSH | SWT.CENTER);
         buttonCustomerNew.setText(l.getString("button.new"));
         buttonCustomerNew.addSelectionListener(new SelectionAdapter() {
-            
 
             public void widgetSelected(SelectionEvent evt) {
 
@@ -823,8 +853,6 @@
                 textQuestion.setText("");
                 textAnswer.setText("");
                 textRegistrationDate.setText("");
-                
-                
 
                 textUserName.setEditable(true);
                 textLastName.setEditable(true);
@@ -843,15 +871,13 @@
                 textQuestion.setEditable(true);
                 textAnswer.setEditable(true);
                 changeRegistrationDateButton.setEnabled(true);
-                
-                
+
                 buttonCustomerCancel.setEnabled(true);
                 buttonCustomerSave.setEnabled(true);
                 buttonCustomerNew.setEnabled(false);
                 buttonCustomerEdit.setEnabled(false);
                 buttonCustomerDelete.setEnabled(false);
-                
-                
+
                 textCustomerSearch.setEditable(false);
                 tableCustomer.setEnabled(false);
 
@@ -890,43 +916,47 @@
                 buttonCustomerSave.setEnabled(true);
                 buttonCustomerDelete.setEnabled(false);
                 buttonCustomerEdit.setEnabled(false);
-                
-                
 
             }
         });
 
-        buttonCustomerDelete = new Button(compositeButtons, SWT.PUSH | SWT.CENTER);
+        buttonCustomerDelete = new Button(compositeButtons, SWT.PUSH
+                | SWT.CENTER);
         buttonCustomerDelete.setText(l.getString("button.delete"));
         buttonCustomerDelete.setEnabled(false);
         buttonCustomerDelete.addSelectionListener(new SelectionAdapter() {
             public void widgetSelected(SelectionEvent evt) {
-                System.out
-                        .println("buttonCustomerDelete.widgetSelected, event="
-                                + evt);
-                
-                
-               String msg = MessageFormat.format(
-                       l.getString("Customer.groupdetail.deletebutton.question.text"),
-                               new Object[]{textUserName.getText()});
-                
-               int question = showMsg(msg,
-                       l.getString("Customer.groupdetail.deletebutton.question.header"), 
-                       SWT.ICON_QUESTION | SWT.YES | SWT.NO);
-               
-               if (question != SWT.YES){
-                   return;
-               }
+                if (logger.isDebugEnabled()) {
+                    logger
+                            .debug("widgetSelected(SelectionEvent) - buttonCustomerDelete.widgetSelected, event="
+                                    + evt);
+                }
+
+                String msg = MessageFormat
+                        .format(
+                                l
+                                        .getString("Customer.groupdetail.deletebutton.question.text"),
+                                new Object[] { textUserName.getText() });
+
+                int question = showMsg(
+                        msg,
+                        l
+                                .getString("Customer.groupdetail.deletebutton.question.header"),
+                        SWT.ICON_QUESTION | SWT.YES | SWT.NO);
+
+                if (question != SWT.YES) {
+                    return;
+                }
                 try {
-	                
+
                     //object l?schen
                     // Fehlerbehandlung
-	                
-	                Database.deleteObject(localCustomer);
-	                
+
+                    Database.deleteObject(localCustomer);
+
                     //?bersichtsTabelle aktualisieren
                     refreshCustomerTable(textCustomerSearch.getText());
-                    
+
                     //Detailansicht leeren
                     textCustomerID.setText("");
                     textUserName.setText("");
@@ -948,41 +978,56 @@
                     textRegistrationDate.setText("");
                     buttonCustomerEdit.setEnabled(false);
                     buttonCustomerDelete.setEnabled(false);
-                    
+
                     try {
                         tableCustomer.deselectAll();
-                    } catch (Exception ex) {}
-                    
-                    //Statusline Nachricht sezten
-                    statusLine.setStatus(1,l.getString("Customer.groupdetail.deletebutton.newok"));
+                    } catch (Exception ex) {
+                    }
 
+                    //Statusline Nachricht setzen
+                    statusLine
+                            .setStatus(
+                                    1,
+                                    l
+                                            .getString("Customer.groupdetail.deletebutton.newok"));
+
                 } catch (DataBaseException e) {
                     if (e.getMessage().equalsIgnoreCase("1")) {
                         //Fehler beim Speichern des Objectes
 
-                        statusLine.setStatus(3,l.getString("Customer.groupdetail.deletebutton.errorsave"));
-                        showMsg(l.getString("Customer.groupdetail.deletebutton.errorsave"),
+                        statusLine
+                                .setStatus(
+                                        3,
+                                        l
+                                                .getString("Customer.groupdetail.deletebutton.errorsave"));
+                        showMsg(
+                                l
+                                        .getString("Customer.groupdetail.deletebutton.errorsave"),
                                 l.getString("error"), SWT.ICON_ERROR | SWT.OK);
-                        
+
                     } else if (e.getMessage().equalsIgnoreCase("2")) {
                         //fehler beim db aufbau
-                        statusLine.setStatus(3,l.getString("Customer.groupdetail.deletebutton.errordb"));
-                        showMsg(l.getString("Customer.groupdetail.deletebutton.errordb"),
+                        statusLine
+                                .setStatus(
+                                        3,
+                                        l
+                                                .getString("Customer.groupdetail.deletebutton.errordb"));
+                        showMsg(
+                                l
+                                        .getString("Customer.groupdetail.deletebutton.errordb"),
                                 l.getString("error"), SWT.ICON_ERROR | SWT.OK);
-                        
+
                     } else {
                         //@todo
-                        e.printStackTrace();
+                        logger.error("widgetSelected(SelectionEvent)", e);
                     }
-                    
-                }                
-                
 
                 }
 
             }
-        );
 
+        });
+
         //leerer nicht sichtbarer Button
         buttonCustomerFill = new Button(compositeButtons, SWT.PUSH | SWT.CENTER);
         GridData buttonCustomerFillLData = new GridData();
@@ -997,227 +1042,278 @@
         buttonCustomerSave.setEnabled(false);
         buttonCustomerSave.addSelectionListener(new SelectionAdapter() {
             public void widgetSelected(SelectionEvent evt) {
-    
-                //testen ob duration leer ist
-                if (   textUserName.getText().trim().equalsIgnoreCase("") ||
-                       textLastName.getText().trim().equalsIgnoreCase("") || 
-                       textFirstName.getText().trim().equalsIgnoreCase("") || 
-                       textStreet.getText().trim().equalsIgnoreCase("") ||
-                       textNumber.getText().trim().equalsIgnoreCase("") || 
-                       textZipCode.getText().trim().equalsIgnoreCase("") ||
-                       textCity.getText().trim().equalsIgnoreCase("") ||
-                       textCountry.getText().trim().equalsIgnoreCase("") || 
-                       textEmail.getText().trim().equalsIgnoreCase("") ||
-                       textQuestion.getText().trim().equalsIgnoreCase("") ||
-                       textAnswer.getText().trim().equalsIgnoreCase("")) {
-                    
-                    showMsg(l.getString("Customer.groupdetail.savebutton.warn.noname.msg"),
-                            l.getString("Customer.groupdetail.savebutton.warn.noname.title"),
+
+                List errors = validateInput();
+
+                if (errors.size() > 0) {
+                    StringBuffer buf = new StringBuffer();
+
+                    for (int i = 0; i < errors.size(); i++) {
+                        buf.append("- ").append(errors.get(i)).append("\n");
+                    }
+
+                    showMsg(
+                            l
+                                    .getString("Customer.groupdetail.savebutton.warn.noitems.msg")
+                                    + new String(buf),
+                            l
+                                    .getString("Customer.groupdetail.savebutton.warn.noitems.title"),
                             SWT.ICON_WARNING | SWT.YES);
+                    return;
 
-                    	return;
                 }
-                
+
                 buttonCustomerEdit.setEnabled(false);
                 buttonCustomerDelete.setEnabled(false);
-                
+
                 //testen welcher mode
-                
+
                 if (mode_Customer == ManagementGui.MODE_ADD) {
-                    
+
                     /**
-                     * @todo eine Exception bekommen wieder leider NOCH nicht mit
-                     * d.h. es muss noch ein r?ckgabewert kommen oder eine Exception 
-                     * ?bermitteln werden (aus der DB Klasse)
+                     * @todo eine Exception bekommen wieder leider NOCH nicht
+                     *       mit d.h. es muss noch ein r?ckgabewert kommen oder
+                     *       eine Exception ?bermitteln werden (aus der DB
+                     *       Klasse)
                      */
-	                    
-                    try {	
-                        
-                    	//neues Objekt erzeugen
+
+                    try {
+
+                        //neues Objekt erzeugen
                         Customer o = new Customer();
-    	                Person p = new Person();
-    	                o.setUserName(textUserName.getText());
-    	                
-    	                /*
-    	                Date regdate = null;
-    	                if (textRegistrationDate.getText() != "") {
-    	                    regdate = Util.getDateByText(textRegistrationDate.getText(), "dd.MM.yyyy").getTime();
-    	                }   	          
-    	                o.setDayOfRegistration(regdate);
-    	                */
-    	                Calendar cal = Calendar.getInstance();
-    	                cal.setTime(DateFormat.getDateInstance(
+                        Person p = new Person();
+
+                        o.setUserName(textUserName.getText());
+                        Calendar cal = Calendar.getInstance();
+                        try {
+                            cal.setTime(DateFormat.getDateInstance(
                                     DateFormat.LONG).parse(
                                     textRegistrationDate.getText()));
-    	                o.setDayOfRegistration(cal);
-    	                
-    	                
-    	                
-    	                o.setUserPassword(textPassword.getText());
-    	                o.setHiddenQuestion(textQuestion.getText());
-    	                o.setHiddenAnswer(textAnswer.getText());
-    	                p.setLastName(textLastName.getText());
-    	                p.setFirstName(textFirstName.getText());
-    	                p.setMiddleName(textMiddleName.getText());
-    	                p.setSalutation(textSalutation.getText());
-    	                p.setTitle(textTitle.getText());
-    	                p.setStreet(textStreet.getText());
-    	                p.setStreetNumber(textNumber.getText());
-    	                p.setZipCode(textZipCode.getText());
-    	                p.setCity(textCity.getText());
-    	                p.setCountry(textCountry.getText());
-    	                p.setEmailAddress(textEmail.getText());
-    	                Calendar birthday = null;
-    	                if (textBirthday.getText() != "") {
-    	                    birthday = Util.getDateByText(textRegistrationDate.getText(), "dd.MM.yyyy");
-    	                }
-    	                p.setDayOfBirth(birthday);
-    	                o.setPerson(p);
-                                        
+                        } catch (ParseException pex) {
+                            logger
+                                    .warn(
+                                            "Fehler beim Parsen des RegistrierungsDatum, wurde eigentlich vorher ?berpr?ft",
+                                            pex);
+                            return;
+                        }
+                        o.setDayOfRegistration(cal);
+
+                        o.setUserPassword(textPassword.getText());
+                        o.setHiddenQuestion(textQuestion.getText());
+                        o.setHiddenAnswer(textAnswer.getText());
+                        p.setLastName(textLastName.getText());
+                        p.setFirstName(textFirstName.getText());
+                        p.setMiddleName(textMiddleName.getText());
+                        p.setSalutation(textSalutation.getText());
+                        p.setTitle(textTitle.getText());
+                        p.setStreet(textStreet.getText());
+                        p.setStreetNumber(textNumber.getText());
+                        p.setZipCode(textZipCode.getText());
+                        p.setCity(textCity.getText());
+                        p.setCountry(textCountry.getText());
+                        p.setEmailAddress(textEmail.getText());
+                        Calendar birthday = Calendar.getInstance();
+
+                        try {
+                            birthday.setTime(DateFormat.getDateInstance(
+                                    DateFormat.LONG).parse(
+                                    textBirthday.getText()));
+                        } catch (ParseException pex) {
+                            logger
+                                    .warn(
+                                            "Fehler beim Parsen des GeburtsDatum, wurde eigentlich vorher ?berpr?ft",
+                                            pex);
+                            return;
+                        }
+                        p.setDayOfBirth(birthday);
+                        o.setPerson(p);
+
                         //object speichern
-                        // Fehlerbehandlung 
+                        // Fehlerbehandlung
                         Object newCust = Database.saveObject(o);
-                        
-                        // in ?bersichtstabelle einf?gen
-                        insertIntoCustomerTable((Customer)newCust);                        
-                                                
+
+                        //  ?bersichtstabelle aktualisieren
+                        refreshCustomerTable("");
+
                         //Statusline Nachricht sezten
-                        statusLine.setStatus(1,l.getString("Customer.groupdetail.savebutton.newok"));
+                        statusLine
+                                .setStatus(
+                                        1,
+                                        l
+                                                .getString("Customer.groupdetail.savebutton.newok"));
 
                     } catch (DataBaseException e) {
                         if (e.getMessage().equalsIgnoreCase("1")) {
                             //Fehler beim Speichern des Objectes
 
-                            statusLine.setStatus(3,l.getString("Customer.groupdetail.savebutton.errorsave"));
-                            showMsg(l.getString("Customer.groupdetail.savebutton.errorsave"),"Fehler", SWT.ICON_ERROR | SWT.OK);
-                            
+                            statusLine
+                                    .setStatus(
+                                            3,
+                                            l
+                                                    .getString("Customer.groupdetail.savebutton.errorsave"));
+                            showMsg(
+                                    l
+                                            .getString("Customer.groupdetail.savebutton.errorsave"),
+                                    "Fehler", SWT.ICON_ERROR | SWT.OK);
+
                         } else if (e.getMessage().equalsIgnoreCase("2")) {
                             //fehler beim db aufbau
-                            statusLine.setStatus(3,l.getString("Customer.groupdetail.savebutton.errordb"));
-                            showMsg(l.getString("Customer.groupdetail.savebutton.errordb"),"Fehler", SWT.ICON_ERROR | SWT.OK);
-                            
+                            statusLine
+                                    .setStatus(
+                                            3,
+                                            l
+                                                    .getString("Customer.groupdetail.savebutton.errordb"));
+                            showMsg(
+                                    l
+                                            .getString("Customer.groupdetail.savebutton.errordb"),
+                                    "Fehler", SWT.ICON_ERROR | SWT.OK);
+
                         } else {
                             //@todo
-                            e.printStackTrace();
+                            logger.error("widgetSelected(SelectionEvent)", e);
                         }
-                        
-                    } catch (ParseException pex){
-                        pex.printStackTrace();
                     }
-                    
-                    
-//                  alle Buttons auf aktiv setzen
+
+                    // alle Buttons auf aktiv setzen
                     setCustomerGroupButtonSaveCancel();
                     buttonCustomerDelete.setEnabled(false);
                     buttonCustomerEdit.setEnabled(false);
-                    
+
                 } else if (mode_Customer == ManagementGui.MODE_EDIT) {
                     try {
-                        logger.debug("LocalCustomer: "+localCustomer);
-                        logger.debug("LocalPerson: "+localCustomer.getPerson());
-                        //Customer o = localCustomer;
-    	                //Person p = o.getPerson();
-    	                
-    	                //o.setCustomerId(new Integer(Integer.parseInt(textCustomerID.getText())));
-    	                localCustomer.setUserName(textUserName.getText());
-    	                
-    	                
-    	                //localCustomer.setDayOfRegistration(Util.getDateByText(textRegistrationDate.getText(), "dd.MM.yyyy").getTime());
-    	                
-    	                Calendar cal = Calendar.getInstance();
-    	                cal.setTime(DateFormat.getDateInstance(
+
+                        localCustomer.setUserName(textUserName.getText());
+
+                        Calendar cal = Calendar.getInstance();
+                        try {
+                            cal.setTime(DateFormat.getDateInstance(
                                     DateFormat.LONG).parse(
                                     textRegistrationDate.getText()));
-    	                localCustomer.setDayOfRegistration(cal);
+                        } catch (ParseException pex) {
+                            logger
+                                    .warn(
+                                            "Fehler beim Parsen des RegistrierungsDatum, wurde eigentlich vorher ?berpr?ft",
+                                            pex);
+                            return;
+                        }
+                        localCustomer.setDayOfRegistration(cal);
+                        localCustomer.setUserPassword(textPassword.getText());
+                        localCustomer.setHiddenQuestion(textQuestion.getText());
+                        localCustomer.setHiddenAnswer(textAnswer.getText());
 
-    	                
-    	                
-    	                
-    	                localCustomer.setUserPassword(textPassword.getText());
-    	                localCustomer.setHiddenQuestion(textQuestion.getText());
-    	                localCustomer.setHiddenAnswer(textAnswer.getText());
-    	                //p.setPersonId(localCustomer.getPerson().getPersonId());
-    	                /*
-    	                p.setLastName(textLastName.getText());
-    	                p.setFirstName(textFirstName.getText());
-    	                p.setMiddleName(textMiddleName.getText());
-    	                p.setSalutation(textSalutation.getText());
-    	                p.setTitle(textTitle.getText());
-    	                p.setStreet(textStreet.getText());
-    	                p.setStreetNumber(textNumber.getText());
-    	                p.setZipCode(textZipCode.getText());
-    	                p.setCity(textCity.getText());
-    	                p.setCountry(textCountry.getText());
-    	                p.setEmailAddress(textEmail.getText());
-    	                p.setDayOfBirth(Util.getDateByText(textBirthday.getText(), "dd.MM.yyyy"));
-    	                o.setPerson(p);
-	                */
-	                    //object speichern
-	                    // Fehlerbehandlung
-    	                logger.debug("Versuche edit zu speichern: "+localCustomer);
-    	                
-	                    Database.updateObject(localCustomer);
-	                    //?bersichtstabelle aktualisieren
-	                    refreshCustomerTable(textCustomerSearch.getText());
-	                    
-	                    //Statusline Nachricht sezten
-	                    statusLine.setStatus(1,l.getString("Customer.groupdetail.savebutton.editok"));
-	                   
-	
-	                } catch (DataBaseException e) {
-	                    if (e.getMessage().equalsIgnoreCase("1")) {
-	                        //Fehler beim Speichern des Objectes
-	
-	                        statusLine.setStatus(3,l.getString("Customer.groupdetail.savebutton.errorsave"));
-	                        showMsg(l.getString("Customer.groupdetail.savebutton.errorsave"),"Fehler", SWT.ICON_ERROR | SWT.OK);
-	                        
-	                    } else if (e.getMessage().equalsIgnoreCase("2")) {
-	                        //fehler beim db aufbau
-	                        statusLine.setStatus(3,l.getString("Customer.groupdetail.savebutton.errordb"));
-	                        showMsg(l.getString("Customer.groupdetail.savebutton.errordb"),"Fehler", SWT.ICON_ERROR | SWT.OK);
-	                        
-	                    } else {
-	                        //@todo
-	                        e.printStackTrace();
-	                    }
-                    
-                    } catch (ParseException pex){
-                        pex.printStackTrace();
+                        localCustomer.getPerson().setLastName(
+                                textLastName.getText());
+                        localCustomer.getPerson().setFirstName(
+                                textFirstName.getText());
+                        localCustomer.getPerson().setMiddleName(
+                                textMiddleName.getText());
+                        localCustomer.getPerson().setSalutation(
+                                textSalutation.getText());
+                        localCustomer.getPerson().setTitle(textTitle.getText());
+                        localCustomer.getPerson().setStreet(
+                                textStreet.getText());
+                        localCustomer.getPerson().setStreetNumber(
+                                textNumber.getText());
+                        localCustomer.getPerson().setZipCode(
+                                textZipCode.getText());
+                        localCustomer.getPerson().setCity(textCity.getText());
+                        localCustomer.getPerson().setCountry(
+                                textCountry.getText());
+                        localCustomer.getPerson().setEmailAddress(
+                                textEmail.getText());
+                        Calendar birthday = Calendar.getInstance();
+
+                        try {
+                            birthday.setTime(DateFormat.getDateInstance(
+                                    DateFormat.LONG).parse(
+                                    textBirthday.getText()));
+                        } catch (ParseException pex) {
+                            logger
+                                    .warn(
+                                            "Fehler beim Parsen des GeburtsDatum, wurde eigentlich vorher ?berpr?ft",
+                                            pex);
+                            return;
+                        }
+                        localCustomer.getPerson().setDayOfBirth(birthday);
+
+                        Database.updateObject(localCustomer);
+                        //?bersichtstabelle aktualisieren
+                        refreshCustomerTable(textCustomerSearch.getText());
+
+                        //Statusline Nachricht sezten
+                        statusLine
+                                .setStatus(
+                                        1,
+                                        l
+                                                .getString("Customer.groupdetail.savebutton.editok"));
+
+                    } catch (DataBaseException e) {
+                        if (e.getMessage().equalsIgnoreCase("1")) {
+                            //Fehler beim Speichern des Objectes
+
+                            statusLine
+                                    .setStatus(
+                                            3,
+                                            l
+                                                    .getString("Customer.groupdetail.savebutton.errorsave"));
+                            showMsg(
+                                    l
+                                            .getString("Customer.groupdetail.savebutton.errorsave"),
+                                    "Fehler", SWT.ICON_ERROR | SWT.OK);
+
+                        } else if (e.getMessage().equalsIgnoreCase("2")) {
+                            //fehler beim db aufbau
+                            statusLine
+                                    .setStatus(
+                                            3,
+                                            l
+                                                    .getString("Customer.groupdetail.savebutton.errordb"));
+                            showMsg(
+                                    l
+                                            .getString("Customer.groupdetail.savebutton.errordb"),
+                                    "Fehler", SWT.ICON_ERROR | SWT.OK);
+
+                        } else {
+                            //@todo
+                            logger.error("widgetSelected(SelectionEvent)", e);
+                        }
+
                     }
-                    
+
                     //alle Buttons auf aktiv setzen
                     setCustomerGroupButtonSaveCancel();
                     buttonCustomerDelete.setEnabled(false);
                     buttonCustomerEdit.setEnabled(false);
                 }
-                
-                
-                
+
                 /**
                  * @todo Exception werfen, da nur die zwei Modes sein d?rfen
                  */
-                
+
             }
         });
 
-        buttonCustomerCancel = new Button(compositeButtons, SWT.PUSH | SWT.CENTER);
+        buttonCustomerCancel = new Button(compositeButtons, SWT.PUSH
+                | SWT.CENTER);
         buttonCustomerCancel.setText(l.getString("button.cancel"));
         buttonCustomerCancel.setEnabled(false);
         buttonCustomerCancel.addSelectionListener(new SelectionAdapter() {
             public void widgetSelected(SelectionEvent evt) {
-                System.out
-                        .println("buttonCustomerCancel.widgetSelected, event="
-                                + evt);
+                if (logger.isDebugEnabled()) {
+                    logger
+                            .debug("widgetSelected(SelectionEvent) - buttonCustomerCancel.widgetSelected, event="
+                                    + evt);
+                }
                 setCustomerGroupButtonSaveCancel();
             }
         });
-       
+
     }
 
     /**
-     * 
+     *  
      */
-    protected void setCustomerGroupButtonSaveCancel() {
+    private void setCustomerGroupButtonSaveCancel() {
         buttonCustomerSave.setEnabled(false);
         buttonCustomerCancel.setEnabled(false);
         buttonCustomerEdit.setEnabled(true);
@@ -1247,89 +1343,57 @@
 
         //CustomerSearch aktivieren
         textCustomerSearch.setEnabled(true);
-        
-    }
 
-    /**
-     * @param Customer
-     * @throws DataBaseException
-     */
-    protected void insertIntoCustomerTable(Customer customer) throws DataBaseException {
-        TableItem item = new TableItem(tableCustomer, SWT.NONE);
-        String birthday = "";
-        if (customer.getPerson().getDayOfBirth() != null) {
-            birthday = Util.getTextByDate(customer.getPerson().getDayOfBirth(), "dd.MM.yyyy");
-        }
-        String regdate = "";
-        if (customer.getDayOfRegistration() != null) {
-            Calendar cal = Calendar.getInstance();
-            cal = (customer.getDayOfRegistration());
-            birthday = Util.getTextByDate(cal, "dd.MM.yyyy");            
-        }
-        item.setText(new String[] { customer.getCustomerId() + "", 
-                					customer.getUserName(), 
-                					customer.getPerson().getLastName(),
-                					customer.getPerson().getFirstName(),
-                					birthday,              					
-                					});
-        
-        tableCustomer.deselectAll();
-        refreshCustomerDetail("");
-        
-        try {
-            refreshCustomerTable(textCustomerSearch.getText());
-        } catch (DataBaseException e) {
-            // TODO Auto-generated catch block
-            e.printStackTrace();
-        }
     }
 
     /**
      * @param text
      * @throws DataBaseException
      */
-    protected void refreshCustomerTable(final String filter) throws DataBaseException {
+    private void refreshCustomerTable(final String filter)
+            throws DataBaseException {
+        if (logger.isDebugEnabled()) {
+            logger
+                    .debug("refreshCustomerTable(String) - Versuche nun CustomerListe zu refreshen. Filter: "
+                            + filter);
+        }
         if (tableCustomer == null) {
-            System.out
-                    .println("Konnte Customertable nicht refreshen, da diese null ist!");
+            if (logger.isDebugEnabled()) {
+                logger
+                        .debug("refreshCustomerTable(String) - Konnte Customertable nicht refreshen, da diese null ist!");
+            }
             return;
         }
-        System.out.println("Versuche nun CustomerListe zu refreshen. Filter: "
-                + filter);
+
         tableCustomer.removeAll();
         TableItem item;
         java.util.List Customerlist = Database.getCustomer(filter);
-        
+
         for (int i = 0; i < Customerlist.size(); i++) {
 
             Customer o = (Customer) Customerlist.get(i);
-            
-            logger.debug("Customer " + i + " aus DB:"+o+" Person: "+o.getPerson());
-            
+
             item = new TableItem(tableCustomer, SWT.NONE);
-            Calendar regdate = Calendar.getInstance();
-            regdate = (o.getDayOfRegistration());
-            String date = null;
-            if (o.getPerson().getDayOfBirth() == null) {
-                date = "";
-            } else {
-                date = Util.getTextByDate(o.getPerson().getDayOfBirth(), "dd.MM.yyyy");
+            String birthday = "";
+            if (o.getPerson().getDayOfBirth() != null) {
+                birthday = DateFormat.getDateInstance(DateFormat.SHORT).format(
+                        o.getPerson().getDayOfBirth().getTime());
             }
-            item.setText(new String[] { o.getCustomerId() + "", 
-                    					o.getUserName(), 
-                    					o.getPerson().getLastName(),
-                    					o.getPerson().getFirstName(),
-                    					date,
-                    					Util.getTextByDate(regdate, "dd.MM.yyyy"),              					
-                    					});
+            String regdate = "";
+            if (o.getDayOfRegistration() != null) {
+                regdate = DateFormat.getDateInstance(DateFormat.SHORT).format(
+                        o.getDayOfRegistration().getTime());
+            }
+            item.setText(new String[] { o.getCustomerId() + "",
+                    o.getUserName(), o.getPerson().getLastName(),
+                    o.getPerson().getFirstName(), birthday, regdate });
 
         }
 
-        
     }
 
     /**
-     * 
+     *  
      */
     private void initCustomerGroupOverview() {
         if (logger.isDebugEnabled()) {
@@ -1355,11 +1419,11 @@
         if (logger.isDebugEnabled()) {
             logger.debug("initCustomerGroupOverview() - end");
         }
-        
+
     }
 
     /**
-     * 
+     *  
      */
     private void initCustomerSearch() {
         if (logger.isDebugEnabled()) {
@@ -1389,7 +1453,7 @@
                     refreshCustomerTable(textCustomerSearch.getText());
                 } catch (DataBaseException e) {
                     // TODO Auto-generated catch block
-                    e.printStackTrace();
+                    logger.error("focusLost(FocusEvent)", e);
                 }
 
                 if (logger.isDebugEnabled()) {
@@ -1409,7 +1473,7 @@
                     refreshCustomerTable(textCustomerSearch.getText());
                 } catch (DataBaseException e1) {
                     // TODO Auto-generated catch block
-                    e1.printStackTrace();
+                    logger.error("handleEvent(Event)", e1);
                 }
 
                 if (logger.isDebugEnabled()) {
@@ -1423,16 +1487,14 @@
         text2LData.grabExcessHorizontalSpace = true;
         textCustomerSearch.setLayoutData(text2LData);
 
-
-
         if (logger.isDebugEnabled()) {
             logger.debug("initCustomerSearch() - end");
         }
-        
+
     }
 
     /**
-     * 
+     *  
      */
     private void initTableCustomer() {
         if (logger.isDebugEnabled()) {
@@ -1447,29 +1509,13 @@
 
         tableCustomer.addSelectionListener(new SelectionAdapter() {
             public void widgetSelected(SelectionEvent evt) {
-                if (logger.isDebugEnabled()) {
-                    logger.debug("widgetSelected(SelectionEvent evt = "
-                        + evt
-                        + ") - start");
-                }
 
                 int index = tableCustomer.getSelectionIndex();
 
-                System.out.println("Table select. id: "
-                    + index
-                    + " TableItem:"
-                    + tableCustomer.getItem(index)
-                    + " id: "
-                    + tableCustomer.getItem(index).getText(0));
-
                 //es wurde ein Element aus Tabelle ausgewaehlt jetzt muss die
                 //Detailansicht aktualisiert werden
-                refreshCustomerDetail(tableCustomer.getItem(index)
-                    .getText(0));
+                refreshCustomerDetail(tableCustomer.getItem(index).getText(0));
 
-                if (logger.isDebugEnabled()) {
-                    logger.debug("widgetSelected(SelectionEvent) - end");
-                }
             }
         });
         table2LData.verticalAlignment = GridData.FILL;
@@ -1483,124 +1529,119 @@
         tableColumn = new TableColumn(tableCustomer, SWT.CENTER);
         tableColumn.setText(l.getString("Customer.groupoverview.columnid"));
         tableColumn.setWidth(50);
-        
+
         tableColumn = new TableColumn(tableCustomer, SWT.CENTER);
-        tableColumn.setText(l.getString("Customer.groupoverview.columnusername"));
+        tableColumn.setText(l
+                .getString("Customer.groupoverview.columnusername"));
         tableColumn.setWidth(50);
 
         tableColumn = new TableColumn(tableCustomer, SWT.CENTER);
-        tableColumn.setText(l.getString("Customer.groupoverview.columnlastname"));
+        tableColumn.setText(l
+                .getString("Customer.groupoverview.columnlastname"));
         tableColumn.setWidth(70);
 
         tableColumn = new TableColumn(tableCustomer, SWT.CENTER);
-        tableColumn.setText(l.getString("Customer.groupoverview.columnfirstname"));
+        tableColumn.setText(l
+                .getString("Customer.groupoverview.columnfirstname"));
         tableColumn.setWidth(70);
-        
+
         tableColumn = new TableColumn(tableCustomer, SWT.CENTER);
-        tableColumn.setText(l.getString("Customer.groupoverview.columnbirthday"));
+        tableColumn.setText(l
+                .getString("Customer.groupoverview.columnbirthday"));
         tableColumn.setWidth(70);
         tableColumn = new TableColumn(tableCustomer, SWT.CENTER);
-        tableColumn.setText(l.getString("Customer.groupoverview.columnregdate"));
+        tableColumn
+                .setText(l.getString("Customer.groupoverview.columnregdate"));
         tableColumn.setWidth(70);
 
         if (logger.isDebugEnabled()) {
             logger.debug("initTableCustomer() - end");
         }
-        
+
     }
 
     /**
      * @param text
      */
-    protected void refreshCustomerDetail(final String id) {
+    private void refreshCustomerDetail(final String id) {
         if (!id.equals("") && id != null) {
-	        Customer object;
-	        try {
-	            //since we only can get a String value from the table, we
-	            //need to convert this
-	            object = Database.getSingleCustomer(Integer.parseInt(id));
-	
-	            if (object == null) {
-	
-	                /*
-	                 * 
-	                 * @TODO Statusbar aktualiseren
-	                 */
-	                return;
-	            }
-	        } catch (Exception e) {
-	            //id ist keine Zahl
-	            return;
-	        }
-	        localCustomer = object;
-	        
-	        String temp = null;
-	        textCustomerID.setText(object.getCustomerId().toString());
-	        temp = object.getUserName();
-	        textUserName.setText(temp == null ? "" : temp);
-	        temp = object.getPerson().getLastName();
-	        textLastName.setText(temp == null ? "" : temp);
-	        temp = object.getPerson().getFirstName();
-	        textFirstName.setText(temp == null ? "" : temp);
-	        temp = object.getPerson().getMiddleName();
-	        textMiddleName.setText(temp == null ? "" : temp);
-	        temp = object.getPerson().getSalutation();
-	        textSalutation.setText(temp == null ? "" : temp);
-	        temp = object.getPerson().getTitle();
-	        textTitle.setText(temp == null ? "" : temp);
-	        temp = object.getPerson().getStreet();
-	        textStreet.setText(temp == null ? "" : temp);
-	        temp = object.getPerson().getStreetNumber();
-	        textNumber.setText(temp == null ? "" : temp);
-	        temp = object.getPerson().getCity();
-	        textCity.setText(temp == null ? "" : temp);
-	        temp = object.getPerson().getZipCode();
-	        textZipCode.setText(temp == null ? "" : temp);
-	        temp = object.getPerson().getCountry();
-	        textCountry.setText(temp == null ? "" : temp);
-	        temp = object.getUserPassword();
-	        textPassword.setText(temp == null ? "" : temp);
-	        temp = object.getPerson().getEmailAddress();
-	        textEmail.setText(temp == null ? "" : temp);
-	        temp = object.getHiddenQuestion();
-	        textQuestion.setText(temp == null ? "" : temp);
-	        temp = object.getHiddenAnswer();
-	        textAnswer.setText(temp == null ? "" : temp);
+            Customer object;
+            try {
+                //since we only can get a String value from the table, we
+                //need to convert this
+                object = Database.getSingleCustomer(Integer.parseInt(id));
 
+                if (object == null) {
 
+                    // @TODO Statusbar aktualiseren
+                    return;
+                }
+            } catch (Exception e) {
+                //id ist keine Zahl
+                return;
+            }
+            localCustomer = object;
+
+            String temp = null;
+            textCustomerID.setText(object.getCustomerId() + "");
+
+            temp = object.getUserName();
+            textUserName.setText(temp == null ? "" : temp);
+            temp = object.getPerson().getLastName();
+            textLastName.setText(temp == null ? "" : temp);
+            temp = object.getPerson().getFirstName();
+            textFirstName.setText(temp == null ? "" : temp);
+            temp = object.getPerson().getMiddleName();
+            textMiddleName.setText(temp == null ? "" : temp);
+            temp = object.getPerson().getSalutation();
+            textSalutation.setText(temp == null ? "" : temp);
+            temp = object.getPerson().getTitle();
+            textTitle.setText(temp == null ? "" : temp);
+            temp = object.getPerson().getStreet();
+            textStreet.setText(temp == null ? "" : temp);
+            temp = object.getPerson().getStreetNumber();
+            textNumber.setText(temp == null ? "" : temp);
+            temp = object.getPerson().getCity();
+            textCity.setText(temp == null ? "" : temp);
+            temp = object.getPerson().getZipCode();
+            textZipCode.setText(temp == null ? "" : temp);
+            temp = object.getPerson().getCountry();
+            textCountry.setText(temp == null ? "" : temp);
+            temp = object.getUserPassword();
+            textPassword.setText(temp == null ? "" : temp);
+            temp = object.getPerson().getEmailAddress();
+            textEmail.setText(temp == null ? "" : temp);
+            temp = object.getHiddenQuestion();
+            textQuestion.setText(temp == null ? "" : temp);
+            temp = object.getHiddenAnswer();
+            textAnswer.setText(temp == null ? "" : temp);
+
             if (object.getPerson().getDayOfBirth() == null) {
                 textBirthday.setText("");
             } else {
-                
-                textBirthday.setText(DateFormat.getDateInstance(
-                        DateFormat.LONG).format(
+
+                textBirthday.setText(DateFormat
+                        .getDateInstance(DateFormat.LONG).format(
                                 object.getPerson().getDayOfBirth().getTime()));
 
-                
-                //date = Util.getTextByDate(object.getPerson().getDayOfBirth(), "dd.MM.yyyy");
             }
-            
+
             if (object.getDayOfRegistration() == null) {
                 textRegistrationDate.setText("");
             } else {
                 textRegistrationDate.setText(DateFormat.getDateInstance(
                         DateFormat.LONG).format(
-                                object.getDayOfRegistration().getTime()));
-                /*
-                Calendar cal = Calendar.getInstance();
-                cal = (object.getDayOfRegistration());
-                regdate = Util.getTextByDate(cal, "dd.MM.yyyy");
-                */
+                        object.getDayOfRegistration().getTime()));
+
             }
-            
-	        
-	        //Buttons zum l?schen und editieren aktivieren
-	        
-	        buttonCustomerEdit.setEnabled(true);
-	        buttonCustomerDelete.setEnabled(true);
-	        
+
+            //Buttons zum l?schen und editieren aktivieren
+
+            buttonCustomerEdit.setEnabled(true);
+            buttonCustomerDelete.setEnabled(true);
+
         } else {
-//          Detailansicht leeren
+            //          Detailansicht leeren
             textCustomerID.setText("");
             textUserName.setText("");
             textLastName.setText("");
@@ -1619,16 +1660,110 @@
             textQuestion.setText("");
             textAnswer.setText("");
             textRegistrationDate.setText("");
-            
+
             buttonCustomerEdit.setEnabled(false);
             buttonCustomerDelete.setEnabled(false);
         }
 
         //Mode auf view setzen
         mode_Customer = ManagementGui.MODE_VIEW;
-        
+
     }
 
-	
+    private List validateInput() {
 
-}
+        List errors = new ArrayList();
+
+        //testen ob duration leer ist;
+        if (textUserName.getText().trim().equalsIgnoreCase("")) {
+            errors
+                    .add(l
+                            .getString("Customer.groupdetail.savebutton.warn.nousername"));
+        }
+        if (textLastName.getText().trim().equalsIgnoreCase("")) {
+            errors
+                    .add(l
+                            .getString("Customer.groupdetail.savebutton.warn.nolastname"));
+        }
+        if (textFirstName.getText().trim().equalsIgnoreCase("")) {
+            errors
+                    .add(l
+                            .getString("Customer.groupdetail.savebutton.warn.nofirstname"));
+        }
+        if (textStreet.getText().trim().equalsIgnoreCase("")) {
+            errors
+                    .add(l
+                            .getString("Customer.groupdetail.savebutton.warn.nostreet"));
+        }
+        if (textNumber.getText().trim().equalsIgnoreCase("")) {
+            errors
+                    .add(l
+                            .getString("Customer.groupdetail.savebutton.warn.nonumber"));
+        }
+        if (textZipCode.getText().trim().equalsIgnoreCase("")) {
+            errors
+                    .add(l
+                            .getString("Customer.groupdetail.savebutton.warn.nozipcode"));
+        }
+        if (textCity.getText().trim().equalsIgnoreCase("")) {
+            errors.add(l
+                    .getString("Customer.groupdetail.savebutton.warn.nocity"));
+        }
+        if (textCountry.getText().trim().equalsIgnoreCase("")) {
+            errors
+                    .add(l
+                            .getString("Customer.groupdetail.savebutton.warn.nocountry"));
+        }
+        if (textEmail.getText().trim().equalsIgnoreCase("")) {
+            errors.add(l
+                    .getString("Customer.groupdetail.savebutton.warn.noemail"));
+        }
+        if (textQuestion.getText().trim().equalsIgnoreCase("")) {
+            errors
+                    .add(l
+                            .getString("Customer.groupdetail.savebutton.warn.noquestion"));
+        }
+        if (textAnswer.getText().trim().equalsIgnoreCase("")) {
+            errors
+                    .add(l
+                            .getString("Customer.groupdetail.savebutton.warn.noanswer"));
+        }
+        if (textRegistrationDate.getText().trim().equalsIgnoreCase("")) {
+            errors
+                    .add(l
+                            .getString("Customer.groupdetail.savebutton.warn.noregistrationdate"));
+        } else {
+
+            try {
+                DateFormat.getDateInstance(DateFormat.LONG).parse(
+                        textRegistrationDate.getText());
+            } catch (ParseException e) {
+                //konnte Datum nicht parsen,also falsches Format = Fehlereingabe
+                errors
+                        .add(l
+                                .getString("Customer.groupdetail.savebutton.warn.noregistrationdate"));
+            }
+
+        }
+        if (textBirthday.getText().trim().equalsIgnoreCase("")) {
+            errors
+                    .add(l
+                            .getString("Customer.groupdetail.savebutton.warn.nobirthday"));
+        } else {
+
+            try {
+                DateFormat.getDateInstance(DateFormat.LONG).parse(
+                        textBirthday.getText());
+            } catch (ParseException e) {
+                //konnte Datum nicht parsen,also falsches Format = Fehlereingabe
+                errors
+                        .add(l
+                                .getString("Customer.groupdetail.savebutton.warn.nobirthday"));
+            }
+
+        }
+
+        return errors;
+    }
+
+}
\ No newline at end of file

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java	2004-12-03 15:27:28 UTC (rev 203)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java	2004-12-05 15:23:02 UTC (rev 204)
@@ -5,7 +5,7 @@
 import java.text.ParseException;
 import java.util.ArrayList;
 import java.util.Calendar;
-import java.util.GregorianCalendar;
+import java.util.Date;
 import java.util.Locale;
 import java.util.PropertyResourceBundle;
 import java.util.ResourceBundle;
@@ -33,11 +33,11 @@
 import org.eclipse.swt.widgets.TableColumn;
 import org.eclipse.swt.widgets.TableItem;
 import org.eclipse.swt.widgets.Text;
+import org.vafada.swtcalendar.SWTCalendarEvent;
+import org.vafada.swtcalendar.SWTCalendarListener;
 
 import com.cloudgarden.resource.SWTResourceManager;
-import org.vafada.swtcalendar.SWTCalendarEvent;
-import org.vafada.swtcalendar.SWTCalendarListener;
-import de.hsharz.provirent.Util;
+
 import de.hsharz.provirent.objects.Actor;
 import de.hsharz.provirent.objects.Director;
 import de.hsharz.provirent.objects.Genre;
@@ -188,7 +188,7 @@
 
     private Locale locale;
 
-    private Movie movie;
+    private Movie localmovie;
 
     /*
      * ?ndert die Sprache aller Elemente
@@ -319,46 +319,17 @@
                 tableMoviesOverviewLData.grabExcessHorizontalSpace = true;
                 tableMoviesOverviewLData.grabExcessVerticalSpace = true;
                 tableMoviesOverview.setLayoutData(tableMoviesOverviewLData);
-                tableMoviesOverview.addFocusListener(new FocusAdapter() {
-                    public void focusLost(FocusEvent evt) {
-                        System.out
-                                .println("tableMoviesOverview.focusLost, event="
-                                        + evt);
-                    }
-
-                    public void focusGained(FocusEvent evt) {
-                        System.out
-                                .println("tableMoviesOverview.focusGained, event="
-                                        + evt);
-                    }
-                });
-                tableMoviesOverview.addSelectionListener(new SelectionAdapter() {
+                tableMoviesOverview
+                        .addSelectionListener(new SelectionAdapter() {
                             public void widgetSelected(SelectionEvent evt) {
-                                if (logger.isDebugEnabled()) {
-                                    logger.debug("widgetSelected(SelectionEvent evt = "
-                                                    + evt + ") - start");
-                                }
-
                                 int index = tableMoviesOverview
                                         .getSelectionIndex();
 
-                                System.out.println("Table select. id: "
-                                        + index
-                                        + " TableItem:"
-                                        + tableMoviesOverview.getItem(index)
-                                        + " id: "
-                                        + tableMoviesOverview.getItem(index)
-                                                .getText(0));
-
                                 //es wurde ein Element aus Tabelle ausgewaehlt
                                 // jetzt muss die
                                 //Detailansicht aktualisiert werden
                                 refreshMoviesDetail(tableMoviesOverview
                                         .getItem(index).getText(0));
-
-                                if (logger.isDebugEnabled()) {
-                                    logger.debug("widgetSelected(SelectionEvent) - end");
-                                }
                             }
                         });
                 {
@@ -578,6 +549,7 @@
                                     DateFormat.LONG).parse(
                                     textMoviesDate.getText()));
                         } catch (ParseException pe) {
+                            cal.setDate(new Date());
                         }
                     }
                     cal.open();
@@ -644,22 +616,22 @@
                             //open responsible Dialog and insert objects into
                             // table
                             DialogMovie dialog = new DialogMovie(getShell(), 0,
-                                    locale, movie, DialogMovie.TYPE_DIRECTOR);
+                                    locale, localmovie, DialogMovie.TYPE_DIRECTOR);
                             dialog.open();
 
                             tableMoviesDirectorsDetail.removeAll();
                             TableItem item;
-                            for (int i = 0; i < movie.getDirector().size(); i++) {
+                            for (int i = 0; i < localmovie.getDirector().size(); i++) {
                                 item = new TableItem(
                                         tableMoviesDirectorsDetail, SWT.NONE);
                                 item.setText(new String[] {
-                                        ((Director) movie.getDirector().get(i))
+                                        ((Director) localmovie.getDirector().get(i))
                                                 .getDirectorId()
                                                 + "",
-                                        ((Director) movie.getDirector().get(i))
+                                        ((Director) localmovie.getDirector().get(i))
                                                 .getLastName()
                                                 + " , "
-                                                + ((Director) movie
+                                                + ((Director) localmovie
                                                         .getDirector().get(i))
                                                         .getFirstName() });
                             }
@@ -691,11 +663,11 @@
                                 String strid = tableMoviesDirectorsDetail
                                         .getItem(index).getText(0);
                                 int id = Integer.parseInt(strid);
-                                for (int i = 0; i < movie.getDirector().size(); i++) {
-                                    Director o = (Director) movie.getDirector()
+                                for (int i = 0; i < localmovie.getDirector().size(); i++) {
+                                    Director o = (Director) localmovie.getDirector()
                                             .get(i);
                                     if (o.getDirectorId().intValue() == id) {
-                                        movie.getDirector().remove(o);
+                                        localmovie.getDirector().remove(o);
                                         break;
                                     }
                                 }
@@ -768,20 +740,20 @@
                 public void widgetSelected(SelectionEvent evt) {
                     //open responsible Dialog and insert objects into table
                     DialogMovie dialog = new DialogMovie(getShell(), 0, locale,
-                            movie, DialogMovie.TYPE_ACTOR);
+                            localmovie, DialogMovie.TYPE_ACTOR);
                     dialog.open();
 
                     tableMoviesActorsDetail.removeAll();
                     TableItem item;
-                    for (int i = 0; i < movie.getActors().size(); i++) {
+                    for (int i = 0; i < localmovie.getActors().size(); i++) {
                         item = new TableItem(tableMoviesActorsDetail, SWT.NONE);
                         item.setText(new String[] {
-                                ((Actor) movie.getActors().get(i)).getActorId()
+                                ((Actor) localmovie.getActors().get(i)).getActorId()
                                         + "",
-                                ((Actor) movie.getActors().get(i))
+                                ((Actor) localmovie.getActors().get(i))
                                         .getLastName()
                                         + ", "
-                                        + ((Actor) movie.getActors().get(i))
+                                        + ((Actor) localmovie.getActors().get(i))
                                                 .getFirstName() });
                     }
                 }
@@ -811,10 +783,10 @@
                                 String strid = tableMoviesActorsDetail.getItem(
                                         index).getText(0);
                                 int id = Integer.parseInt(strid);
-                                for (int i = 0; i < movie.getActors().size(); i++) {
-                                    Actor o = (Actor) movie.getActors().get(i);
+                                for (int i = 0; i < localmovie.getActors().size(); i++) {
+                                    Actor o = (Actor) localmovie.getActors().get(i);
                                     if (o.getActorId().intValue() == id) {
-                                        movie.getActors().remove(o);
+                                        localmovie.getActors().remove(o);
                                         break;
                                     }
                                 }
@@ -885,17 +857,17 @@
                 public void widgetSelected(SelectionEvent evt) {
                     //open responsible Dialog and insert objects into table
                     DialogMovie dialog = new DialogMovie(getShell(), 0, locale,
-                            movie, DialogMovie.TYPE_GENRE);
+                            localmovie, DialogMovie.TYPE_GENRE);
                     dialog.open();
 
                     tableMoviesGenresDetail.removeAll();
                     TableItem item;
-                    for (int i = 0; i < movie.getGenres().size(); i++) {
+                    for (int i = 0; i < localmovie.getGenres().size(); i++) {
                         item = new TableItem(tableMoviesGenresDetail, SWT.NONE);
                         item.setText(new String[] {
-                                ((Genre) movie.getGenres().get(i)).getGenreId()
+                                ((Genre) localmovie.getGenres().get(i)).getGenreId()
                                         + "",
-                                ((Genre) movie.getGenres().get(i)).getName()
+                                ((Genre) localmovie.getGenres().get(i)).getName()
                                         + "" });
                     }
                 }
@@ -925,10 +897,10 @@
                                 String strid = tableMoviesGenresDetail.getItem(
                                         index).getText(0);
                                 int id = Integer.parseInt(strid);
-                                for (int i = 0; i < movie.getGenres().size(); i++) {
-                                    Genre o = (Genre) movie.getGenres().get(i);
+                                for (int i = 0; i < localmovie.getGenres().size(); i++) {
+                                    Genre o = (Genre) localmovie.getGenres().get(i);
                                     if (o.getGenreId().intValue() == id) {
-                                        movie.getGenres().remove(o);
+                                        localmovie.getGenres().remove(o);
                                         break;
                                     }
                                 }
@@ -999,17 +971,17 @@
                 public void widgetSelected(SelectionEvent evt) {
                     //open responsible Dialog and insert objects into table
                     DialogMovie dialog = new DialogMovie(getShell(), 0, locale,
-                            movie, DialogMovie.TYPE_IMAGE);
+                            localmovie, DialogMovie.TYPE_IMAGE);
                     dialog.open();
 
                     tableMoviesImagesDetail.removeAll();
                     TableItem item;
-                    for (int i = 0; i < movie.getImages().size(); i++) {
+                    for (int i = 0; i < localmovie.getImages().size(); i++) {
                         item = new TableItem(tableMoviesImagesDetail, SWT.NONE);
                         item.setText(new String[] {
-                                ((Image) movie.getImages().get(i)).getImageId()
+                                ((Image) localmovie.getImages().get(i)).getImageId()
                                         + "",
-                                ((Image) movie.getImages().get(i))
+                                ((Image) localmovie.getImages().get(i))
                                         .getImageFileName()
                                         + "" });
                     }
@@ -1040,10 +1012,10 @@
                                 String strid = tableMoviesImagesDetail.getItem(
                                         index).getText(0);
                                 int id = Integer.parseInt(strid);
-                                for (int i = 0; i < movie.getImages().size(); i++) {
-                                    Image o = (Image) movie.getImages().get(i);
+                                for (int i = 0; i < localmovie.getImages().size(); i++) {
+                                    Image o = (Image) localmovie.getImages().get(i);
                                     if (o.getImageId().intValue() == id) {
-                                        movie.getImages().remove(o);
+                                        localmovie.getImages().remove(o);
                                         break;
                                     }
                                 }
@@ -1134,11 +1106,11 @@
                     tableMoviesImagesDetail.removeAll();
                     tableMoviesGenresDetail.removeAll();
 
-                    movie = new Movie();
-                    movie.setActors(new ArrayList());
-                    movie.setDirector(new ArrayList());
-                    movie.setGenres(new ArrayList());
-                    movie.setImages(new ArrayList());
+                    localmovie = new Movie();
+                    localmovie.setActors(new ArrayList());
+                    localmovie.setDirector(new ArrayList());
+                    localmovie.setGenres(new ArrayList());
+                    localmovie.setImages(new ArrayList());
                 }
             });
 
@@ -1183,20 +1155,26 @@
             buttonMoviesDelete.setEnabled(false);
             buttonMoviesDelete.addSelectionListener(new SelectionAdapter() {
                 public void widgetSelected(SelectionEvent evt) {
-                    System.out
-                            .println("buttonMoviesDelete.widgetSelected, event="
-                                    + evt);
+                    if (logger.isDebugEnabled()) {
+                        logger
+                                .debug("widgetSelected(SelectionEvent) - buttonMoviesDelete.widgetSelected, event="
+                                        + evt);
+                    }
 
                     String msg = MessageFormat
-                            .format(l.getString("movies.groupdetail.deletebutton.question.text"),
+                            .format(
+                                    l
+                                            .getString("movies.groupdetail.deletebutton.question.text"),
                                     new Object[] { textMoviesTitle.getText()
                                             + " "
-                                            + l.getString("movies.groupdetail.deletebutton.question.gap")
+                                            + l
+                                                    .getString("movies.groupdetail.deletebutton.question.gap")
                                             + " " + textMoviesDate.getText() });
 
                     int question = showMsg(
                             msg,
-                            l.getString("movies.groupdetail.deletebutton.question.header"),
+                            l
+                                    .getString("movies.groupdetail.deletebutton.question.header"),
                             SWT.ICON_QUESTION | SWT.YES | SWT.NO);
 
                     if (question != SWT.YES) {
@@ -1206,7 +1184,7 @@
                     try {
                         //object speichern
                         // Fehlerbehandlung
-                        Database.deleteObject(movie);
+                        Database.deleteObject(localmovie);
 
                         //?bersichtsTabelle aktualisieren
                         refreshMoviesOverviewTable(textMoviesSearch.getText());
@@ -1228,27 +1206,42 @@
 
                         //Statusline Nachricht sezten
                         statusLine
-                                .setStatus(1,l.getString("movies.groupdetail.deletebutton.newok"));
+                                .setStatus(
+                                        1,
+                                        l
+                                                .getString("movies.groupdetail.deletebutton.newok"));
 
                     } catch (DataBaseException e) {
                         if (e.getMessage().equalsIgnoreCase("1")) {
                             //Fehler beim Speichern des Objectes
 
-                            statusLine.setStatus(3,l.getString("movies.groupdetail.deletebutton.errorsave"));
-                            showMsg(l.getString("movies.groupdetail.deletebutton.errorsave"),
+                            statusLine
+                                    .setStatus(
+                                            3,
+                                            l
+                                                    .getString("movies.groupdetail.deletebutton.errorsave"));
+                            showMsg(
+                                    l
+                                            .getString("movies.groupdetail.deletebutton.errorsave"),
                                     l.getString("error"), SWT.ICON_ERROR
                                             | SWT.OK);
 
                         } else if (e.getMessage().equalsIgnoreCase("2")) {
                             //fehler beim db aufbau
-                            statusLine.setStatus(3,l.getString("movies.groupdetail.deletebutton.errordb"));
-                            showMsg(l.getString("movies.groupdetail.deletebutton.errordb"),
+                            statusLine
+                                    .setStatus(
+                                            3,
+                                            l
+                                                    .getString("movies.groupdetail.deletebutton.errordb"));
+                            showMsg(
+                                    l
+                                            .getString("movies.groupdetail.deletebutton.errordb"),
                                     l.getString("error"), SWT.ICON_ERROR
                                             | SWT.OK);
 
                         } else {
                             //@todo
-                            e.printStackTrace();
+                            logger.error("widgetSelected(SelectionEvent)", e);
                         }
 
                     }
@@ -1273,51 +1266,59 @@
             buttonMoviesSave.setEnabled(false);
             buttonMoviesSave.addSelectionListener(new SelectionAdapter() {
                 public void widgetSelected(SelectionEvent evt) {
-                    System.out
-                            .println("buttonMoviesSave.widgetSelected, event="
-                                    + evt);
+                    if (logger.isDebugEnabled()) {
+                        logger
+                                .debug("widgetSelected(SelectionEvent) - buttonMoviesSave.widgetSelected, event="
+                                        + evt);
+                    }
 
                     if (textMoviesTitle.getText().trim().equalsIgnoreCase("")
                             || textMoviesDescription.getText().trim()
                                     .equalsIgnoreCase("")
                             || textMoviesDate.getText().trim()
                                     .equalsIgnoreCase("")
-                            || movie.getDirector().size() == 0
-                            || movie.getActors().size() == 0
-                            || movie.getGenres().size() == 0
-                            || movie.getImages().size() == 0) {
+                            || localmovie.getDirector().size() == 0
+                            || localmovie.getActors().size() == 0
+                            || localmovie.getGenres().size() == 0
+                            || localmovie.getImages().size() == 0) {
 
-                        showMsg(l.getString("movies.groupdetail.savebutton.warn.noname.msg"),
-                                l.getString("movies.groupdetail.savebutton.warn.noname.title"),
+                        showMsg(
+                                l
+                                        .getString("movies.groupdetail.savebutton.warn.noname.msg"),
+                                l
+                                        .getString("movies.groupdetail.savebutton.warn.noname.title"),
                                 SWT.ICON_WARNING | SWT.YES);
 
                         return;
                     }
 
                     //testen welcher mode
-                    movie.setTitle(textMoviesTitle.getText());
-                    movie.setDescription(textMoviesDescription.getText());
+                    localmovie.setTitle(textMoviesTitle.getText());
+                    localmovie.setDescription(textMoviesDescription.getText());
                     try {
-                        movie.setReleaseDate(Calendar.getInstance());
-                        movie.getReleaseDate().setTime(
+                        localmovie.setReleaseDate(Calendar.getInstance());
+                        localmovie.getReleaseDate().setTime(
                                 DateFormat.getDateInstance(DateFormat.LONG)
-                                .parse(textMoviesDate.getText()));
-                            logger.debug("Datum: " + movie.getReleaseDate());
+                                        .parse(textMoviesDate.getText()));
+                        logger.debug("Datum: " + localmovie.getReleaseDate());
                     } catch (ParseException e1) {
                         // TODO Auto-generated catch block
-                        //Hier muss noch was gemacht werden, das Datum konnte nicht geparst werden
-                        e1.printStackTrace();
+                        //Hier muss noch was gemacht werden, das Datum konnte
+                        // nicht geparst werden
+                        logger.error("widgetSelected(SelectionEvent)", e1);
                         return;
                     }
 
-                    try{
-                    movie.setRuntime(Integer.parseInt(textMoviesRuntime
-                            .getText()));
-                    }
-                    catch(Exception ex){
-                        ex.printStackTrace();
-                        showMsg(l.getString("movies.groupdetail.savebutton.warn.noname.msg"),
-                                l.getString("movies.groupdetail.savebutton.warn.noname.title"),
+                    try {
+                        localmovie.setRuntime(Integer.parseInt(textMoviesRuntime
+                                .getText()));
+                    } catch (Exception ex) {
+                        logger.error("widgetSelected(SelectionEvent)", ex);
+                        showMsg(
+                                l
+                                        .getString("movies.groupdetail.savebutton.warn.noname.msg"),
+                                l
+                                        .getString("movies.groupdetail.savebutton.warn.noname.title"),
                                 SWT.ICON_WARNING | SWT.YES);
                         return;
                     }
@@ -1328,11 +1329,10 @@
                      *       Klasse)
                      */
                     //neues Objekt erzeugen
-
                     try {
                         //object speichern
                         // Fehlerbehandlung
-                        Object o = Database.saveObject(movie);
+                        Object o = Database.saveObject(localmovie);
 
                         // in ?bersichtstabelle einf?gen
                         insertIntoMoviesOverviewTable((Movie) o);
@@ -1342,7 +1342,8 @@
                         statusLine
                                 .setStatus(
                                         1,
-                                        l.getString("movies.groupdetail.savebutton.newok"));
+                                        l
+                                                .getString("movies.groupdetail.savebutton.newok"));
                     } catch (DataBaseException e) {
                         if (e.getMessage().equalsIgnoreCase("1")) {
                             //Fehler beim Speichern des Objectes
@@ -1350,9 +1351,11 @@
                             statusLine
                                     .setStatus(
                                             3,
-                                            l.getString("movies.groupdetail.savebutton.errorsave"));
+                                            l
+                                                    .getString("movies.groupdetail.savebutton.errorsave"));
                             showMsg(
-                                    l.getString("movies.groupdetail.savebutton.errorsave"),
+                                    l
+                                            .getString("movies.groupdetail.savebutton.errorsave"),
                                     "Fehler", SWT.ICON_ERROR | SWT.OK);
 
                         } else if (e.getMessage().equalsIgnoreCase("2")) {
@@ -1360,14 +1363,16 @@
                             statusLine
                                     .setStatus(
                                             3,
-                                            l.getString("movies.groupdetail.savebutton.errordb"));
+                                            l
+                                                    .getString("movies.groupdetail.savebutton.errordb"));
                             showMsg(
-                                    l.getString("movies.groupdetail.savebutton.errordb"),
+                                    l
+                                            .getString("movies.groupdetail.savebutton.errordb"),
                                     "Fehler", SWT.ICON_ERROR | SWT.OK);
 
                         } else {
                             //@todo
-                            e.printStackTrace();
+                            logger.error("widgetSelected(SelectionEvent)", e);
                         }
 
                     }
@@ -1387,9 +1392,11 @@
             buttonMoviesCancel.setEnabled(false);
             buttonMoviesCancel.addSelectionListener(new SelectionAdapter() {
                 public void widgetSelected(SelectionEvent evt) {
-                    System.out
-                            .println("buttonMoviesCancel.widgetSelected, event="
-                                    + evt);
+                    if (logger.isDebugEnabled()) {
+                        logger
+                                .debug("widgetSelected(SelectionEvent) - buttonMoviesCancel.widgetSelected, event="
+                                        + evt);
+                    }
                     setMoviesGroupButtonSaveCancel();
                 }
             });
@@ -1402,9 +1409,12 @@
      */
     private void insertIntoMoviesOverviewTable(Movie movie2) {
         // TODO Auto-generated method stub
-        TableItem item = new TableItem(tableMoviesOverview,SWT.NONE);
-        item.setText(new String [] {movie2.getMovieId()+ " ",movie2.getTitle()
-                + " ",Util.getTextByDate(movie2.getReleaseDate())});
+        TableItem item = new TableItem(tableMoviesOverview, SWT.NONE);
+        item.setText(new String[] {
+                movie2.getMovieId() + " ",
+                movie2.getTitle() + " ",
+                DateFormat.getDateInstance(DateFormat.SHORT).format(
+                        movie2.getReleaseDate()) });
     }
 
     /**
@@ -1438,13 +1448,17 @@
     private void refreshMoviesOverviewTable(String filter) {
         // TODO Auto-generated method stub
         if (tableMoviesOverview == null) {
-            System.out
-                    .println("Konnte MoviesOverviewtable nicht refreshen, da diese null ist!");
+            if (logger.isDebugEnabled()) {
+                logger
+                        .debug("refreshMoviesOverviewTable(String) - Konnte MoviesOverviewtable nicht refreshen, da diese null ist!");
+            }
             return;
         }
-        System.out
-                .println("Versuche nun MoviesOverviewtable zu refreshen. Filter: "
-                        + filter);
+        if (logger.isDebugEnabled()) {
+            logger
+                    .debug("refreshMoviesOverviewTable(String) - Versuche nun MoviesOverviewtable zu refreshen. Filter: "
+                            + filter);
+        }
         tableMoviesOverview.removeAll();
         TableItem item;
         java.util.List Movielist = Database.getMovie(filter);
@@ -1453,8 +1467,11 @@
 
             Movie o = (Movie) Movielist.get(i);
             item = new TableItem(tableMoviesOverview, SWT.NONE);
-            item.setText(new String[] { o.getMovieId() + "", o.getTitle(),
-                    Util.getTextByDate(o.getReleaseDate(), "dd.MM.YYYY") });
+            item.setText(new String[] {
+                    o.getMovieId() + "",
+                    o.getTitle(),
+                    DateFormat.getDateInstance(DateFormat.SHORT).format(
+                            o.getReleaseDate().getTime()) });
 
         }
     }
@@ -1483,10 +1500,11 @@
             //id ist keine Zahl
             return;
         }
-        movie = object;
+        localmovie = object;
         textMoviesID.setText(object.getMovieId() + "");
         textMoviesTitle.setText(object.getTitle());
-        textMoviesDate.setText(Util.getTextByDate(object.getReleaseDate(), "dd.MM.YYYY"));
+        textMoviesDate.setText(DateFormat.getDateInstance(DateFormat.LONG)
+                .format(object.getReleaseDate().getTime()));
         textMoviesRuntime.setText(Integer.toString(object.getRuntime()));
         textMoviesDescription.setText(object.getDescription());
 
@@ -1516,7 +1534,8 @@
             Genre o = (Genre) object.getGenres().get(i);
             logger.debug(i + " " + o);
             item = new TableItem(tableMoviesGenresDetail, SWT.NONE);
-            item.setText(new String[] { o.getGenreId() + "",
+            item
+                    .setText(new String[] { o.getGenreId() + "",
                             o.getName() + "" });
 
             //item.setText(new String[] {o.getGenreId() 

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/DialogMovie.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/DialogMovie.java	2004-12-03 15:27:28 UTC (rev 203)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/DialogMovie.java	2004-12-05 15:23:02 UTC (rev 204)
@@ -134,6 +134,7 @@
             int type, int x, int y, int width, int height) {
         super(parent, style);
         shell = parent;
+        shell.setText("Das soll ein Titel sein");
         this.movie = movie;
         initLanguage(locale);
         this.type = type;

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/SWTCalendarDialog.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/SWTCalendarDialog.java	2004-12-03 15:27:28 UTC (rev 203)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/SWTCalendarDialog.java	2004-12-05 15:23:02 UTC (rev 204)
@@ -15,7 +15,7 @@
 
     public void open() {
         shell.pack();
-        shell.open();
+        shell.open();        shell.setText("Calender Titel");
         while (!shell.isDisposed()) {
             if (!display.readAndDispatch()) display.sleep();
         }

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/customer.properties
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/customer.properties	2004-12-03 15:27:28 UTC (rev 203)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/customer.properties	2004-12-05 15:23:02 UTC (rev 204)
@@ -39,8 +39,22 @@
 Customer.groupdetail.birthdaybuttonchange=?ndern
 Customer.groupdetail.birthdaybuttonfinish=Fertig
 
-Customer.groupdetail.savebutton.warn.noname.title=Datensatz speichern
-Customer.groupdetail.savebutton.warn.noname.msg=Der Datensatz kann nicht gespeichert werden. \n Bitte geben Sie einen Namen an
+Customer.groupdetail.savebutton.warn.noitems.title=Datensatz speichern
+Customer.groupdetail.savebutton.warn.noitems.msg=Der Datensatz kann nicht gespeichert werden, da folgende Werte fehlen:\n
+Customer.groupdetail.savebutton.warn.nousername=Username
+Customer.groupdetail.savebutton.warn.nolastname=Nachname
+Customer.groupdetail.savebutton.warn.nofirstname=Vorname
+Customer.groupdetail.savebutton.warn.nostreet=Strasse
+Customer.groupdetail.savebutton.warn.nonumber=Hausnummer
+Customer.groupdetail.savebutton.warn.nozipcode=PLZ
+Customer.groupdetail.savebutton.warn.nocity=Stadt
+Customer.groupdetail.savebutton.warn.nocountry=Land
+Customer.groupdetail.savebutton.warn.noemail=Emailadresse
+Customer.groupdetail.savebutton.warn.noquestion=Geheimefrage
+Customer.groupdetail.savebutton.warn.noanswer=Geheimeantwort
+Customer.groupdetail.savebutton.warn.noregistrationdate=Registrierungsdatum
+Customer.groupdetail.savebutton.warn.nobirthday=Geburtstag
+
 Customer.groupdetail.savebutton.newok=Speichern des neuen Benutzers erfolgreich.
 Customer.groupdetail.savebutton.editok=?ndern des Benutzers erfolgreich.
 

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Customer.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Customer.java	2004-12-03 15:27:28 UTC (rev 203)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Customer.java	2004-12-05 15:23:02 UTC (rev 204)
@@ -63,7 +63,7 @@
 
     public void setCustomerId(Integer customerId) {
         this.customerId = customerId;
-    } 
+    }
 
     public Calendar getDayOfRegistration() {
         return this.dayOfRegistration;



From pschneider at sheep.berlios.de  Sun Dec  5 19:44:05 2004
From: pschneider at sheep.berlios.de (Philipp Schneider at BerliOS)
Date: Sun, 5 Dec 2004 19:44:05 +0100
Subject: [Provirent-svn-commit] r205 - in project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui: . language
Message-ID: <200412051844.iB5Ii5mm031396@sheep.berlios.de>

Author: pschneider
Date: 2004-12-05 19:44:04 +0100 (Sun, 05 Dec 2004)
New Revision: 205

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeCustomer.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositePayment.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/DialogMovie.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/SWTCalendarDialog.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/customer.properties
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/movies.properties
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/payment.properties
Log:
- Titel bei der Datumsauswahl hinzugef?\195?\188gt
- Validate f?\195?\188r Movie hinzugef?\195?\188gt

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeCustomer.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeCustomer.java	2004-12-05 15:23:02 UTC (rev 204)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeCustomer.java	2004-12-05 18:44:04 UTC (rev 205)
@@ -527,7 +527,8 @@
                             final SWTCalendarDialog cal = new SWTCalendarDialog(
                                     getDisplay(),
                                     l
-                                            .getString("Customer.groupdetail.birthdaybuttonfinish"));
+                                            .getString("Customer.groupdetail.birthdaybuttonfinish"),
+                                            l.getString("Customer.groupdetail.birthday.dialog.title"));
 
                             cal
                                     .addDateChangedListener(new SWTCalendarListener() {
@@ -764,7 +765,8 @@
                             final SWTCalendarDialog cal = new SWTCalendarDialog(
                                     getDisplay(),
                                     l
-                                            .getString("Customer.groupdetail.registrationdatebuttonfinish"));
+                                            .getString("Customer.groupdetail.registrationdatebuttonfinish"),
+                                            l.getString("Customer.groupdetail.registrationdate.dialog.title"));
 
                             cal
                                     .addDateChangedListener(new SWTCalendarListener() {

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java	2004-12-05 15:23:02 UTC (rev 204)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java	2004-12-05 18:44:04 UTC (rev 205)
@@ -6,6 +6,7 @@
 import java.util.ArrayList;
 import java.util.Calendar;
 import java.util.Date;
+import java.util.List;
 import java.util.Locale;
 import java.util.PropertyResourceBundle;
 import java.util.ResourceBundle;
@@ -532,7 +533,8 @@
                     //open responsible Dialog and insert text
                     final SWTCalendarDialog cal = new SWTCalendarDialog(
                             getDisplay(),
-                            l.getString("movies.groupdetail.datebuttonfinish"));
+                            l.getString("movies.groupdetail.datebuttonfinish"),
+                            l.getString("movies.groupdetail.datedialogtitle"));
 
                     cal.addDateChangedListener(new SWTCalendarListener() {
                         public void dateChanged(SWTCalendarEvent calendarEvent) {
@@ -1272,26 +1274,31 @@
                                         + evt);
                     }
 
-                    if (textMoviesTitle.getText().trim().equalsIgnoreCase("")
-                            || textMoviesDescription.getText().trim()
-                                    .equalsIgnoreCase("")
-                            || textMoviesDate.getText().trim()
-                                    .equalsIgnoreCase("")
-                            || localmovie.getDirector().size() == 0
-                            || localmovie.getActors().size() == 0
-                            || localmovie.getGenres().size() == 0
-                            || localmovie.getImages().size() == 0) {
+                    
+                    
+                    List errors = validateInput();
 
+                    if (errors.size() > 0) {
+                        StringBuffer buf = new StringBuffer();
+
+                        for (int i = 0; i < errors.size(); i++) {
+                            buf.append("- ").append(errors.get(i)).append("\n");
+                        }
+
                         showMsg(
                                 l
-                                        .getString("movies.groupdetail.savebutton.warn.noname.msg"),
+                                        .getString("movies.groupdetail.savebutton.warn.noitems.msg")
+                                        + new String(buf),
                                 l
-                                        .getString("movies.groupdetail.savebutton.warn.noname.title"),
+                                        .getString("movies.groupdetail.savebutton.warn.noitems.title"),
                                 SWT.ICON_WARNING | SWT.YES);
-
                         return;
-                    }
 
+                    }                    
+                    
+                    
+
+
                     //testen welcher mode
                     localmovie.setTitle(textMoviesTitle.getText());
                     localmovie.setDescription(textMoviesDescription.getText());
@@ -1560,4 +1567,43 @@
         mode_movie = ManagementGui.MODE_VIEW;
 
     }
+    
+    
+    private List validateInput(){
+        List errors = new ArrayList();
+        
+
+        if( textMoviesTitle.getText().trim().equalsIgnoreCase("") ){
+            errors.add(l.getString("movies.groupdetail.savebutton.warn.notitle"));
+        }
+
+        if( textMoviesDescription.getText().trim().equalsIgnoreCase("") ){
+            errors.add(l.getString("movies.groupdetail.savebutton.warn.nodescription"));
+        }
+        
+        if( textMoviesDate.getText().trim().equalsIgnoreCase("") ){
+            errors.add( l.getString("movies.groupdetail.savebutton.warn.noreleasedate") );
+        }
+        
+        if( localmovie.getDirector().size() == 0 ){
+            errors.add( l.getString("movies.groupdetail.savebutton.warn.nodirector") );
+        }
+        
+        if( localmovie.getActors().size() == 0 ){
+            errors.add( l.getString("movies.groupdetail.savebutton.warn.noactor") );
+        }
+        
+        if( localmovie.getGenres().size() == 0 ){
+            errors.add( l.getString("movies.groupdetail.savebutton.warn.nogenres") );
+        }
+        
+        if( localmovie.getImages().size() == 0 ){
+            errors.add( l.getString("movies.groupdetail.savebutton.warn.noimages") );
+        }
+
+        
+        
+        return errors;
+        
+    }
 }
\ No newline at end of file

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositePayment.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositePayment.java	2004-12-05 15:23:02 UTC (rev 204)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositePayment.java	2004-12-05 18:44:04 UTC (rev 205)
@@ -440,7 +440,8 @@
                     final SWTCalendarDialog cal = new SWTCalendarDialog(
                             getDisplay(),
                             l
-                                    .getString("Payment.groupdetail.startdatebuttonfinish"));
+                                    .getString("Payment.groupdetail.startdatebuttonfinish"),
+                                    l.getString("Payment.groupdetail.startdatedialogtitle"));
 
                     cal.addDateChangedListener(new SWTCalendarListener() {
 

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/DialogMovie.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/DialogMovie.java	2004-12-05 15:23:02 UTC (rev 204)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/DialogMovie.java	2004-12-05 18:44:04 UTC (rev 205)
@@ -125,6 +125,7 @@
             int type) {
         super(parent, style);
         shell = parent;
+
         this.movie = movie;
         initLanguage(locale);
         this.type = type;
@@ -134,7 +135,6 @@
             int type, int x, int y, int width, int height) {
         super(parent, style);
         shell = parent;
-        shell.setText("Das soll ein Titel sein");
         this.movie = movie;
         initLanguage(locale);
         this.type = type;

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/SWTCalendarDialog.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/SWTCalendarDialog.java	2004-12-05 15:23:02 UTC (rev 204)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/SWTCalendarDialog.java	2004-12-05 18:44:04 UTC (rev 205)
@@ -5,17 +5,17 @@
 /*** This code was generated using CloudGarden's Jigloo* SWT/Swing GUI Builder, which is free for non-commercial* use. If Jigloo is being used commercially (ie, by a corporation,* company or business for any purpose whatever) then you* should purchase a license for each developer using Jigloo.* Please visit www.cloudgarden.com for details.* Use of Jigloo implies acceptance of these licensing terms.* ************************************** A COMMERCIAL LICENSE HAS NOT BEEN PURCHASED* for this machine, so Jigloo or this code cannot be used legally* for any corporate or commercial purpose.* **************************************/public class SWTCalendarDialog {
     private Shell shell;
     private SWTCalendar swtcal;
-    private Display display;    
+    private Display display;    private String title ="";
 
-    public SWTCalendarDialog(Display display, String finishbut) {
-        this.display = display;
+    public SWTCalendarDialog(final Display display, final String finishbut, final String dialogtitle) {
+        this.display = display;        title = dialogtitle;
         shell = new Shell(display, SWT.APPLICATION_MODAL | SWT.CLOSE);        GridLayout grid = new GridLayout();        grid.numColumns = 1;        shell.setLayout(grid);
         swtcal = new SWTCalendar(shell);        Button finish = new Button(shell, SWT.PUSH                | SWT.CENTER);        finish.setText(finishbut);        GridData text1LData3 = new GridData();
         text1LData3.horizontalAlignment = GridData.FILL;        text1LData3.horizontalSpan = 1;        text1LData3.grabExcessHorizontalSpace = true;        finish.setLayoutData(text1LData3);                finish.addSelectionListener(new SelectionAdapter() {            public void widgetSelected(SelectionEvent evt) {                shell.close();                }});                        }
 
     public void open() {
         shell.pack();
-        shell.open();        shell.setText("Calender Titel");
+        shell.open();        shell.setText(title);
         while (!shell.isDisposed()) {
             if (!display.readAndDispatch()) display.sleep();
         }

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/customer.properties
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/customer.properties	2004-12-05 15:23:02 UTC (rev 204)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/customer.properties	2004-12-05 18:44:04 UTC (rev 205)
@@ -36,8 +36,10 @@
 Customer.groupdetail.regdatelabel=Registrierdatum
 Customer.groupdetail.registrationdatebuttonchange=?ndern
 Customer.groupdetail.registrationdatebuttonfinish=Fertig
+Customer.groupdetail.registrationdate.dialog.title=Registrierungstag w?hlen
 Customer.groupdetail.birthdaybuttonchange=?ndern
 Customer.groupdetail.birthdaybuttonfinish=Fertig
+Customer.groupdetail.birthday.dialog.title=Geburtstag w?hlen
 
 Customer.groupdetail.savebutton.warn.noitems.title=Datensatz speichern
 Customer.groupdetail.savebutton.warn.noitems.msg=Der Datensatz kann nicht gespeichert werden, da folgende Werte fehlen:\n

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/movies.properties
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/movies.properties	2004-12-05 15:23:02 UTC (rev 204)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/movies.properties	2004-12-05 18:44:04 UTC (rev 205)
@@ -23,8 +23,9 @@
 movies.groupdetail.labelgenres =Liste der Genre
 movies.groupdetail.labelimages =Liste der Bilder
 movies.groupdetail.labeldescription =Beschreibung
-movies.groupdetail.textdate = (Beispiel: 01.01.2001)
-movies.groupdetail.datebuttonfinish = Fertig
+movies.groupdetail.textdate =(Beispiel: 01.01.2001)
+movies.groupdetail.datebuttonfinish=Fertig
+movies.groupdetail.datedialogtitle=Bitte w?hlen Sie ein Datum aus
 
 button.new =Neu
 button.edit =Bearbeiten
@@ -36,8 +37,18 @@
 movies.button.deleteitem =L?schen
 movies.button.changedate =?ndern
 
-movies.groupdetail.savebutton.warn.noname.title =Datensatz speichern
-movies.groupdetail.savebutton.warn.noname.msg =Der Datensatz kann nicht gespeichert werden. \n Bitte ?berpr?fen Sie auf Korrektheit und Vollst?ndigkeit
+movies.groupdetail.savebutton.warn.noitem.title =Datensatz speichern
+movies.groupdetail.savebutton.warn.noitems.msg=Der Datensatz kann nicht gespeichert werden, da folgende Werte fehlen:\n
+movies.groupdetail.savebutton.warn.notitle=Titel
+movies.groupdetail.savebutton.warn.nodescription=Beschreibung
+movies.groupdetail.savebutton.warn.noreleasedate=ErscheinungDatum
+movies.groupdetail.savebutton.warn.noimages=Bilder sind leer
+movies.groupdetail.savebutton.warn.nogenres=Genre
+movies.groupdetail.savebutton.warn.noactor=Schauspieler
+movies.groupdetail.savebutton.warn.nodirector=Regie
+
+
+
 movies.groupdetail.savebutton.newok =Speichern des neuen Films erfolgreich.
 movies.groupdetail.savebutton.editok =?ndern des Films erfolgreich.
 movies.groupdetail.savebutton.errorsave =Datenbankfehler beim Speichern.

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/payment.properties
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/payment.properties	2004-12-05 15:23:02 UTC (rev 204)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/payment.properties	2004-12-05 18:44:04 UTC (rev 205)
@@ -25,6 +25,7 @@
 Payment.groupdetail.startdatelabel=G?ltig ab
 Payment.groupdetail.startdatebuttonchange=?ndern
 Payment.groupdetail.startdatebuttonfinish=Fertig
+Payment.groupdetail.startdatedialogtitle=W?hlen Sie ein Datum aus
 
 Payment.groupdetail.savebutton.warn.noname.title=Datensatz speichern
 Payment.groupdetail.savebutton.warn.noname.msg=Der Datensatz kann nicht gespeichert werden. \n Bitte geben Sie einen Namen an



From sforstner at sheep.berlios.de  Mon Dec  6 21:44:55 2004
From: sforstner at sheep.berlios.de (Stefan at BerliOS)
Date: Mon, 6 Dec 2004 21:44:55 +0100
Subject: [Provirent-svn-commit] r206 - project_src/provirent_hibernate/src/de/hsharz/provirent/persistence
Message-ID: <200412062044.iB6Kitip029964@sheep.berlios.de>

Author: sforstner
Date: 2004-12-06 21:44:53 +0100 (Mon, 06 Dec 2004)
New Revision: 206

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java
Log:


Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java	2004-12-05 18:44:04 UTC (rev 205)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java	2004-12-06 20:44:53 UTC (rev 206)
@@ -1619,19 +1619,20 @@
 	            
 	            //init the criteria
 	            Criteria criteria = s.createCriteria(Customer.class);
+	            Criteria personCriteria = criteria.createCriteria("person");
 	            //any of the criteria 
 	            Disjunction any = Expression.disjunction();
-	            //Disjunction any2 = Expression.disjunction();
+	            Disjunction any2 = Expression.disjunction();
 
 	            if (filter != null && !filter.equalsIgnoreCase("")) {
 	                any.add(Expression.like("userName", "%"+filter+"%"));
-	                any.add(Expression.like("dayOfRegistration", "%"+filter+"%"));
-	                //any2.add(Expression.like("lastName", "%"+filter+"%"));
-	                //any2.add(Expression.like("firstName", "%"+filter+"%"));
+	                //any.add(Expression.like("dayOfRegistration", "%"+filter+"%"));
+	                any2.add(Expression.like("lastName", "%"+filter+"%"));
+	                any2.add(Expression.like("firstName", "%"+filter+"%"));
 	                //any2.add(Expression.like("dayOfBirth", "%"+filter+"%"));
 	                //maybe we are searching for the id?
 	                try {
-	                    any.add(Expression.eq("CustomerId", new Integer(Integer.parseInt(filter))));
+	                    any.add(Expression.eq("customerId", new Integer(Integer.parseInt(filter))));
 	                } catch (Exception e) {
 	                }
 	                
@@ -1639,8 +1640,8 @@
 	            
 	            //add all criteria
 	            
-	            criteria.add(any);
-	            //criteria.createCriteria("person").add(any2);
+	            //criteria.add(any);
+	            personCriteria.add(any2);
 	            
 	            //get the results
 	            returnlist = criteria.list();



From pschneider at sheep.berlios.de  Mon Dec  6 22:25:26 2004
From: pschneider at sheep.berlios.de (Philipp Schneider at BerliOS)
Date: Mon, 6 Dec 2004 22:25:26 +0100
Subject: [Provirent-svn-commit] r207 - project_src/provirent_hibernate/src/de/hsharz/provirent/persistence
Message-ID: <200412062125.iB6LPQ88012167@sheep.berlios.de>

Author: pschneider
Date: 2004-12-06 22:25:25 +0100 (Mon, 06 Dec 2004)
New Revision: 207

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java
Log:
- Suche nach Person Attributen eines Customer hinzugef?\195?\188gt

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java	2004-12-06 20:44:53 UTC (rev 206)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java	2004-12-06 21:25:25 UTC (rev 207)
@@ -1618,18 +1618,22 @@
 	        s = HibernateUtil.currentSession();
 	            
 	            //init the criteria
-	            Criteria criteria = s.createCriteria(Customer.class);
-	            Criteria personCriteria = criteria.createCriteria("person");
+	            Criteria criteria = s.createCriteria(Customer.class).createAlias("person", "p");
+	            //Criteria personCriteria = criteria.createCriteria("person");
 	            //any of the criteria 
 	            Disjunction any = Expression.disjunction();
-	            Disjunction any2 = Expression.disjunction();
+	            
+	            //Disjunction anyPerson = Expression.disjunction();
 
 	            if (filter != null && !filter.equalsIgnoreCase("")) {
 	                any.add(Expression.like("userName", "%"+filter+"%"));
 	                //any.add(Expression.like("dayOfRegistration", "%"+filter+"%"));
-	                any2.add(Expression.like("lastName", "%"+filter+"%"));
-	                any2.add(Expression.like("firstName", "%"+filter+"%"));
-	                //any2.add(Expression.like("dayOfBirth", "%"+filter+"%"));
+	                any.add(Expression.like("p.lastName", "%"+filter+"%"));
+	                any.add(Expression.like("p.firstName", "%"+filter+"%"));
+	                //any.add(Expression.like("p.dayOfBirth", "%"+filter+"%"));
+	                
+	                
+	                
 	                //maybe we are searching for the id?
 	                try {
 	                    any.add(Expression.eq("customerId", new Integer(Integer.parseInt(filter))));
@@ -1640,12 +1644,18 @@
 	            
 	            //add all criteria
 	            
-	            //criteria.add(any);
-	            personCriteria.add(any2);
+	            criteria.add(any);
+	            // personCriteria.add(anyPerson);
 	            
 	            //get the results
 	            returnlist = criteria.list();
 	            
+	            /*
+	            returnlist = s.createCriteria(Customer.class)
+	            .createAlias("person", "p")
+	            .add( Expression.like("p.lastName","%"+filter+"%") )
+	            .list();
+	            */
 	            logger.debug("Anzahl der Elemente in R?ckgabeliste: " + returnlist.size());
 	            int i = 0;
 	



From pschneider at sheep.berlios.de  Mon Dec  6 22:32:17 2004
From: pschneider at sheep.berlios.de (Philipp Schneider at BerliOS)
Date: Mon, 6 Dec 2004 22:32:17 +0100
Subject: [Provirent-svn-commit] r208 - project_src/provirent_hibernate/src/de/hsharz/provirent/persistence
Message-ID: <200412062132.iB6LWH52012500@sheep.berlios.de>

Author: pschneider
Date: 2004-12-06 22:32:16 +0100 (Mon, 06 Dec 2004)
New Revision: 208

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java
Log:


Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java	2004-12-06 21:25:25 UTC (rev 207)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java	2004-12-06 21:32:16 UTC (rev 208)
@@ -41,6 +41,7 @@
 import net.sf.hibernate.Transaction;
 import net.sf.hibernate.expression.Disjunction;
 import net.sf.hibernate.expression.Expression;
+import net.sf.hibernate.type.Type;
 
 import org.apache.log4j.Logger;
 



From rgriesch at sheep.berlios.de  Mon Dec  6 23:50:22 2004
From: rgriesch at sheep.berlios.de (Remo Griesch at BerliOS)
Date: Mon, 6 Dec 2004 23:50:22 +0100
Subject: [Provirent-svn-commit] r209 - in project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui: . language
Message-ID: <200412062250.iB6MoMS1016521@sheep.berlios.de>

Author: rgriesch
Date: 2004-12-06 23:50:18 +0100 (Mon, 06 Dec 2004)
New Revision: 209

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/movies.properties
Log:
Composite Movie  -Fehler bei Datum beseitigt
                 -l?\195?\182schen funktioniert
                 -speichern "erfolgreich"
                  aber film wird nicht in die Datenbank                      eingef?\195?\188gt

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java	2004-12-06 21:32:16 UTC (rev 208)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java	2004-12-06 22:50:18 UTC (rev 209)
@@ -1421,7 +1421,7 @@
                 movie2.getMovieId() + " ",
                 movie2.getTitle() + " ",
                 DateFormat.getDateInstance(DateFormat.SHORT).format(
-                        movie2.getReleaseDate()) });
+                        movie2.getReleaseDate().getTime()) });
     }
 
     /**

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/movies.properties
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/movies.properties	2004-12-06 21:32:16 UTC (rev 208)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/movies.properties	2004-12-06 22:50:18 UTC (rev 209)
@@ -37,7 +37,7 @@
 movies.button.deleteitem =L?schen
 movies.button.changedate =?ndern
 
-movies.groupdetail.savebutton.warn.noitem.title =Datensatz speichern
+movies.groupdetail.savebutton.warn.noitems.title =Datensatz speichern
 movies.groupdetail.savebutton.warn.noitems.msg=Der Datensatz kann nicht gespeichert werden, da folgende Werte fehlen:\n
 movies.groupdetail.savebutton.warn.notitle=Titel
 movies.groupdetail.savebutton.warn.nodescription=Beschreibung



From pschneider at sheep.berlios.de  Tue Dec  7 00:18:35 2004
From: pschneider at sheep.berlios.de (Philipp Schneider at BerliOS)
Date: Tue, 7 Dec 2004 00:18:35 +0100
Subject: [Provirent-svn-commit] r210 - in project_src/provirent_hibernate/src/de/hsharz/provirent: management/gui persistence
Message-ID: <200412062318.iB6NIZ3U017673@sheep.berlios.de>

Author: pschneider
Date: 2004-12-07 00:18:29 +0100 (Tue, 07 Dec 2004)
New Revision: 210

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/DialogMovie.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java
Log:


Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java	2004-12-06 22:50:18 UTC (rev 209)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java	2004-12-06 23:18:29 UTC (rev 210)
@@ -1309,7 +1309,6 @@
                                         .parse(textMoviesDate.getText()));
                         logger.debug("Datum: " + localmovie.getReleaseDate());
                     } catch (ParseException e1) {
-                        // TODO Auto-generated catch block
                         //Hier muss noch was gemacht werden, das Datum konnte
                         // nicht geparst werden
                         logger.error("widgetSelected(SelectionEvent)", e1);
@@ -1339,11 +1338,13 @@
                     try {
                         //object speichern
                         // Fehlerbehandlung
-                        Object o = Database.saveObject(localmovie);
+                        logger.debug("Objektid: "+localmovie.getMovieId()+" vor speichern");
+                        Database.saveObject(localmovie);
+                        logger.debug("Objektid: "+localmovie.getMovieId()+" nach speichern");
 
                         // in ?bersichtstabelle einf?gen
-                        insertIntoMoviesOverviewTable((Movie) o);
-                        textMoviesID.setText(((Movie) o).getMovieId() + "");
+                        insertIntoMoviesOverviewTable(localmovie);
+                        textMoviesID.setText(localmovie.getMovieId() + "");
 
                         //Statusline Nachricht sezten
                         statusLine
@@ -1352,6 +1353,7 @@
                                         l
                                                 .getString("movies.groupdetail.savebutton.newok"));
                     } catch (DataBaseException e) {
+                        logger.debug("DataBaseException: "+e);
                         if (e.getMessage().equalsIgnoreCase("1")) {
                             //Fehler beim Speichern des Objectes
 
@@ -1382,12 +1384,14 @@
                             logger.error("widgetSelected(SelectionEvent)", e);
                         }
 
+                    } catch (Exception ex) {
+                        logger.debug("Unbekannte Exception: ",ex);
                     }
 
                     //activate buttons
                     setMoviesGroupButtonSaveCancel();
 
-                    //Execption because only 2 modes posiibel
+                    
 
                 }
 

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/DialogMovie.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/DialogMovie.java	2004-12-06 22:50:18 UTC (rev 209)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/DialogMovie.java	2004-12-06 23:18:29 UTC (rev 210)
@@ -380,6 +380,9 @@
             }
         });
 
+        //Liste f?llen
+        refreshList("");
+        
         dialogShell.layout();
         dialogShell.pack();
         dialogShell.open();

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java	2004-12-06 22:50:18 UTC (rev 209)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java	2004-12-06 23:18:29 UTC (rev 210)
@@ -32,7 +32,10 @@
  */
 package de.hsharz.provirent.persistence;
 
+import java.text.DateFormat;
+import java.text.ParseException;
 import java.util.ArrayList;
+import java.util.Calendar;
 import java.util.List;
 
 import net.sf.hibernate.Criteria;
@@ -41,7 +44,6 @@
 import net.sf.hibernate.Transaction;
 import net.sf.hibernate.expression.Disjunction;
 import net.sf.hibernate.expression.Expression;
-import net.sf.hibernate.type.Type;
 
 import org.apache.log4j.Logger;
 
@@ -55,7 +57,6 @@
 import de.hsharz.provirent.objects.Language;
 import de.hsharz.provirent.objects.Movie;
 import de.hsharz.provirent.objects.Payment;
-import de.hsharz.provirent.objects.Person;
 import de.hsharz.provirent.objects.Status;
 import de.hsharz.provirent.objects.Subtitle;
 import de.hsharz.provirent.objects.VideoFormat;
@@ -182,15 +183,19 @@
             try {
                 //get new Session and begin Transaction
                 s = HibernateUtil.currentSession();
+                tx = s.beginTransaction();
                 try{
-                    s.saveOrUpdate(o);
+
+                    //s.saveOrUpdate(o);
+                    s.save(o);
                 } catch (HibernateException e) {
                     logger.error("saveObject(). Fehler beim Speichern/Updaten "
                             +"des Objectes:"+o+" Exception: "+e);
                     exception = 1;
                 }
+                tx.commit();
                 s.flush();
-               
+
                 
             } catch (HibernateException e) {
                 //exception = 2;
@@ -1631,10 +1636,15 @@
 	                //any.add(Expression.like("dayOfRegistration", "%"+filter+"%"));
 	                any.add(Expression.like("p.lastName", "%"+filter+"%"));
 	                any.add(Expression.like("p.firstName", "%"+filter+"%"));
-	                //any.add(Expression.like("p.dayOfBirth", "%"+filter+"%"));
+	                try{
+	                    Calendar cal = Calendar.getInstance();
+	                    cal.setTime(DateFormat.getDateInstance(DateFormat.SHORT).parse(filter));
+	                any.add(Expression.like("p.dayOfBirth", cal));
+	                } catch (ParseException pex){
+	                    logger.debug("Fehler beim Parsen des Datums",pex);
+	                }
 	                
 	                
-	                
 	                //maybe we are searching for the id?
 	                try {
 	                    any.add(Expression.eq("customerId", new Integer(Integer.parseInt(filter))));



From pschneider at sheep.berlios.de  Tue Dec  7 11:16:49 2004
From: pschneider at sheep.berlios.de (Philipp Schneider at BerliOS)
Date: Tue, 7 Dec 2004 11:16:49 +0100
Subject: [Provirent-svn-commit] r211 - in project_src/provirent_hibernate/src: de/hsharz/provirent/objects test/provirent/hibernate
Message-ID: <200412071016.iB7AGnUL003761@sheep.berlios.de>

Author: pschneider
Date: 2004-12-07 11:16:46 +0100 (Tue, 07 Dec 2004)
New Revision: 211

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Movie.hbm.xml
   project_src/provirent_hibernate/src/test/provirent/hibernate/TestMovie.java
Log:
- cascade entfernt
- ant erneut ausf?\195?\188hren

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Movie.hbm.xml
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Movie.hbm.xml	2004-12-06 23:18:29 UTC (rev 210)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Movie.hbm.xml	2004-12-07 10:16:46 UTC (rev 211)
@@ -41,13 +41,12 @@
 				<meta attribute="use-in-tostring">true</meta>
       </property>
  
-			<one-to-one name="mainImage" class="de.hsharz.provirent.objects.Image" cascade="all">
+			<one-to-one name="mainImage" class="de.hsharz.provirent.objects.Image">
 					<meta attribute="use-in-tostring">true</meta>
 			</one-to-one>
 
  			<list	name="images"
  						table="MOVIEIMAGES"
- 						cascade="all"
  						>
 				<meta attribute="use-in-tostring">true</meta>
 				<key column="MOVIEID"/>

Modified: project_src/provirent_hibernate/src/test/provirent/hibernate/TestMovie.java
===================================================================
--- project_src/provirent_hibernate/src/test/provirent/hibernate/TestMovie.java	2004-12-06 23:18:29 UTC (rev 210)
+++ project_src/provirent_hibernate/src/test/provirent/hibernate/TestMovie.java	2004-12-07 10:16:46 UTC (rev 211)
@@ -271,6 +271,7 @@
 
                 
                 logger.debug("Erstelle Movie Objekt");
+                
                 //create new movie objects
                 Movie movie = new Movie();
                 //set simple properties
@@ -279,7 +280,12 @@
                         +"9-year-old son. She is stunned...");
                 movie.setRuntime(96);
                 movie.setTitle("The Forgotten");
-                movie.setReleaseDate(Calendar.getInstance());
+                Calendar cal = Calendar.getInstance();
+                cal.set(Calendar.HOUR,0);
+                cal.set(Calendar.MINUTE,0);
+                cal.set(Calendar.SECOND,0);
+                cal.set(Calendar.MILLISECOND,0);
+                movie.setReleaseDate(cal);
                 
                 
                 //try to get Actors from db
@@ -368,77 +374,11 @@
                 
 
                 
-                
-                /*
-                //try to get Language from db
-                dbprops =  s.find("from Language as language");
-                assertNotNull("testCreateDBMovie(): Can't get Language from DB. Null", dbprops);
-                assertTrue("testCreateDBMovie(): Can not find Language in DB", dbprops.size() >0);
-                
-                anzahl =1;
-                movieprops = new ArrayList();
-                random = new RandomRange(0,dbprops.size());
-                randomNum = random.getNumbers(anzahl);
-
-                for (int i = 0; i < anzahl; i++) {
-                    Language prop = (Language) dbprops.get(
-                            ((Integer) randomNum.get(i)).intValue());
-                    movieprops.add(prop);
-                }
-                movie.setLanguages(movieprops);
-
-                //try to get AudioFormat from db
-                dbprops =  s.find("from AudioFormat as audioformat");
-                assertNotNull("testCreateDBMovie(): Can't get AudioFormat from DB. Null", dbprops);
-                assertTrue("testCreateDBMovie(): Can not find AudioFormat in DB", dbprops.size() >0);
-                
-                anzahl =1;
-                movieprops = new ArrayList();
-                random = new RandomRange(0,dbprops.size());
-                randomNum = random.getNumbers(anzahl);
-
-                for (int i = 0; i < anzahl; i++) {
-                    AudioFormat prop = (AudioFormat)dbprops.get( ((Integer)randomNum.get(i)).intValue() );
-                    movieprops.add(prop);
-                }
-                movie.setAudioFormats(movieprops);
-
-
-                //try to get Subtitle from db
-                dbprops =  s.find("from Subtitle as subtitle");
-                assertNotNull("testCreateDBMovie(): Can't get Subtitle from DB. Null", dbprops);
-                assertTrue("testCreateDBMovie(): Can not find Subtitle in DB", dbprops.size() >0);
-                
-                anzahl =1;
-                movieprops = new ArrayList();
-                random = new RandomRange(0,dbprops.size());
-                randomNum = random.getNumbers(anzahl);
-
-                for (int i = 0; i < anzahl; i++) {
-                    Subtitle prop = (Subtitle)dbprops.get( ((Integer)randomNum.get(i)).intValue() );
-                    movieprops.add(prop);
-                }
-                movie.setSubtitles(movieprops);
-
-                //try to get VideoFormat from db
-                dbprops =  s.find("from VideoFormat as videoformat");
-                assertNotNull("testCreateDBMovie(): Can't get VideoFormat from DB. Null", dbprops);
-                assertTrue("testCreateDBMovie(): Can not find VideoFormat in DB", dbprops.size() >0);
-                
-                anzahl =1;
-                movieprops = new ArrayList();
-                random = new RandomRange(0,dbprops.size());
-                randomNum = random.getNumbers(anzahl);
-
-                for (int i = 0; i < anzahl; i++) {
-                    VideoFormat prop = (VideoFormat)dbprops.get( ((Integer)randomNum.get(i)).intValue() );
-                    movieprops.add(prop);
-                }
-                movie.setVideoFormats(movieprops);
-                */
-                
+               
                 logger.debug("Speichere Movie Objekt");
                 
+                
+                //save the new Movie
                 int id = ((Integer)s.save(movie)).intValue();
                 s.flush();
                 logger.debug("Gespeichert unter id: "+id+" movieid:"+movie.getMovieId());



From pschneider at sheep.berlios.de  Tue Dec  7 17:20:54 2004
From: pschneider at sheep.berlios.de (Philipp Schneider at BerliOS)
Date: Tue, 7 Dec 2004 17:20:54 +0100
Subject: [Provirent-svn-commit] r212 - project_src/provirent_hibernate/src/test/provirent/hibernate
Message-ID: <200412071620.iB7GKs7a000851@sheep.berlios.de>

Author: pschneider
Date: 2004-12-07 17:20:53 +0100 (Tue, 07 Dec 2004)
New Revision: 212

Added:
   project_src/provirent_hibernate/src/test/provirent/hibernate/Blade_1.jpg
   project_src/provirent_hibernate/src/test/provirent/hibernate/Blade_2.jpg
   project_src/provirent_hibernate/src/test/provirent/hibernate/Blade_3.jpg
   project_src/provirent_hibernate/src/test/provirent/hibernate/Blade_main.jpg
   project_src/provirent_hibernate/src/test/provirent/hibernate/Forgotten_1.jpg
   project_src/provirent_hibernate/src/test/provirent/hibernate/Forgotten_2.jpg
   project_src/provirent_hibernate/src/test/provirent/hibernate/Forgotten_main.jpg
   project_src/provirent_hibernate/src/test/provirent/hibernate/Incredibles_1.jpg
   project_src/provirent_hibernate/src/test/provirent/hibernate/Incredibles_2.jpg
   project_src/provirent_hibernate/src/test/provirent/hibernate/Incredibles_main.jpg
   project_src/provirent_hibernate/src/test/provirent/hibernate/Kranks_1.jpg
   project_src/provirent_hibernate/src/test/provirent/hibernate/Kranks_2.jpg
   project_src/provirent_hibernate/src/test/provirent/hibernate/Kranks_main.jpg
   project_src/provirent_hibernate/src/test/provirent/hibernate/Polar_1.jpg
   project_src/provirent_hibernate/src/test/provirent/hibernate/Polar_2.jpg
   project_src/provirent_hibernate/src/test/provirent/hibernate/Polar_3.jpg
   project_src/provirent_hibernate/src/test/provirent/hibernate/Polar_main.jpg
   project_src/provirent_hibernate/src/test/provirent/hibernate/Treasure_1.jpg
   project_src/provirent_hibernate/src/test/provirent/hibernate/Treasure_2.jpg
   project_src/provirent_hibernate/src/test/provirent/hibernate/Treasure_3.jpg
   project_src/provirent_hibernate/src/test/provirent/hibernate/Treasure_4.jpg
   project_src/provirent_hibernate/src/test/provirent/hibernate/Treasure_main.jpg
   project_src/provirent_hibernate/src/test/provirent/hibernate/Twelve_1.jpg
   project_src/provirent_hibernate/src/test/provirent/hibernate/Twelve_2.jpg
   project_src/provirent_hibernate/src/test/provirent/hibernate/Twelve_3.jpg
   project_src/provirent_hibernate/src/test/provirent/hibernate/Twelve_main.jpg
   project_src/provirent_hibernate/src/test/provirent/hibernate/closer_1.jpg
   project_src/provirent_hibernate/src/test/provirent/hibernate/closer_2.jpg
   project_src/provirent_hibernate/src/test/provirent/hibernate/closer_3.jpg
   project_src/provirent_hibernate/src/test/provirent/hibernate/closer_main.jpg
Modified:
   project_src/provirent_hibernate/src/test/provirent/hibernate/TestActor.java
   project_src/provirent_hibernate/src/test/provirent/hibernate/TestDirector.java
   project_src/provirent_hibernate/src/test/provirent/hibernate/TestImage.java
   project_src/provirent_hibernate/src/test/provirent/hibernate/TestMovie.java
Log:
TestBilder hinzugef?\195?\188gt

Added: project_src/provirent_hibernate/src/test/provirent/hibernate/Blade_1.jpg
===================================================================
(Binary files differ)


Property changes on: project_src/provirent_hibernate/src/test/provirent/hibernate/Blade_1.jpg
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/provirent_hibernate/src/test/provirent/hibernate/Blade_2.jpg
===================================================================
(Binary files differ)


Property changes on: project_src/provirent_hibernate/src/test/provirent/hibernate/Blade_2.jpg
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/provirent_hibernate/src/test/provirent/hibernate/Blade_3.jpg
===================================================================
(Binary files differ)


Property changes on: project_src/provirent_hibernate/src/test/provirent/hibernate/Blade_3.jpg
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/provirent_hibernate/src/test/provirent/hibernate/Blade_main.jpg
===================================================================
(Binary files differ)


Property changes on: project_src/provirent_hibernate/src/test/provirent/hibernate/Blade_main.jpg
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/provirent_hibernate/src/test/provirent/hibernate/Forgotten_1.jpg
===================================================================
(Binary files differ)


Property changes on: project_src/provirent_hibernate/src/test/provirent/hibernate/Forgotten_1.jpg
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/provirent_hibernate/src/test/provirent/hibernate/Forgotten_2.jpg
===================================================================
(Binary files differ)


Property changes on: project_src/provirent_hibernate/src/test/provirent/hibernate/Forgotten_2.jpg
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/provirent_hibernate/src/test/provirent/hibernate/Forgotten_main.jpg
===================================================================
(Binary files differ)


Property changes on: project_src/provirent_hibernate/src/test/provirent/hibernate/Forgotten_main.jpg
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/provirent_hibernate/src/test/provirent/hibernate/Incredibles_1.jpg
===================================================================
(Binary files differ)


Property changes on: project_src/provirent_hibernate/src/test/provirent/hibernate/Incredibles_1.jpg
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/provirent_hibernate/src/test/provirent/hibernate/Incredibles_2.jpg
===================================================================
(Binary files differ)


Property changes on: project_src/provirent_hibernate/src/test/provirent/hibernate/Incredibles_2.jpg
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/provirent_hibernate/src/test/provirent/hibernate/Incredibles_main.jpg
===================================================================
(Binary files differ)


Property changes on: project_src/provirent_hibernate/src/test/provirent/hibernate/Incredibles_main.jpg
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/provirent_hibernate/src/test/provirent/hibernate/Kranks_1.jpg
===================================================================
(Binary files differ)


Property changes on: project_src/provirent_hibernate/src/test/provirent/hibernate/Kranks_1.jpg
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/provirent_hibernate/src/test/provirent/hibernate/Kranks_2.jpg
===================================================================
(Binary files differ)


Property changes on: project_src/provirent_hibernate/src/test/provirent/hibernate/Kranks_2.jpg
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/provirent_hibernate/src/test/provirent/hibernate/Kranks_main.jpg
===================================================================
(Binary files differ)


Property changes on: project_src/provirent_hibernate/src/test/provirent/hibernate/Kranks_main.jpg
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/provirent_hibernate/src/test/provirent/hibernate/Polar_1.jpg
===================================================================
(Binary files differ)


Property changes on: project_src/provirent_hibernate/src/test/provirent/hibernate/Polar_1.jpg
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/provirent_hibernate/src/test/provirent/hibernate/Polar_2.jpg
===================================================================
(Binary files differ)


Property changes on: project_src/provirent_hibernate/src/test/provirent/hibernate/Polar_2.jpg
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/provirent_hibernate/src/test/provirent/hibernate/Polar_3.jpg
===================================================================
(Binary files differ)


Property changes on: project_src/provirent_hibernate/src/test/provirent/hibernate/Polar_3.jpg
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/provirent_hibernate/src/test/provirent/hibernate/Polar_main.jpg
===================================================================
(Binary files differ)


Property changes on: project_src/provirent_hibernate/src/test/provirent/hibernate/Polar_main.jpg
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Modified: project_src/provirent_hibernate/src/test/provirent/hibernate/TestActor.java
===================================================================
--- project_src/provirent_hibernate/src/test/provirent/hibernate/TestActor.java	2004-12-07 10:16:46 UTC (rev 211)
+++ project_src/provirent_hibernate/src/test/provirent/hibernate/TestActor.java	2004-12-07 16:20:53 UTC (rev 212)
@@ -221,7 +221,7 @@
                 assertTrue("Db Open? ", s.isOpen());
 
                 //cretae new objects
-                List Actors = new ArrayList();
+                List actors = new ArrayList();
 
                 Actor myd1 = new Actor("Johnny", "Depp");
                 Actor myd2 = new Actor("Geoffrey", "Rush");
@@ -231,18 +231,44 @@
                 Actor myd6 = new Actor("Matthew", "Pleszewicz ");
                 Actor myd7 = new Actor("Christopher", "Kovaleski ");
 
-                Actors.add(myd1);
-                Actors.add(myd2);
-                Actors.add(myd3);
-                Actors.add(myd4);
-                Actors.add(myd5);
-                Actors.add(myd6);
-                Actors.add(myd7);
+                actors.add(myd1);
+                actors.add(myd2);
+                actors.add(myd3);
+                actors.add(myd4);
+                actors.add(myd5);
+                actors.add(myd6);
+                actors.add(myd7);
+                actors.add(new Actor("Ben","Stiller"));
+                actors.add(new Actor("Vince","Vaughn"));
+                actors.add(new Actor("Christine","Taylor"));
+                actors.add(new Actor("Matt","Damon"));
+                actors.add(new Actor("Joan","Allen"));
+                actors.add(new Actor("Franka","Potente"));
+                actors.add(new Actor("Julia", "Stiles"));
+                actors.add(new Actor("George Clooney",""));
+                actors.add(new Actor("Brad Pitt",""));
+                actors.add(new Actor("Julia Roberts",""));
+                actors.add(new Actor("Wesley Snipes",""));
+                actors.add(new Actor("Nicolas Cage",""));
+                actors.add(new Actor("Diane Kruger",""));
+                actors.add(new Actor("Sean Bean",""));
+                actors.add(new Actor("Tom","Hanks"));
+                actors.add(new Actor("Colin","Farrell"));
+                actors.add(new Actor("Anthony","Hopkins"));
+                actors.add(new Actor("Angelina","Jolie"));
+                actors.add(new Actor("Johnny","Depp"));
+                actors.add(new Actor("Kate","Winslet"));
+                actors.add(new Actor("Ren?e","Zellweger"));
+                actors.add(new Actor("Jamie","Foxx"));
+                actors.add(new Actor("Regina","King"));
+                actors.add(new Actor("Kerry","Washington"));
+                
+                
 
                 List ids = new ArrayList();
 
                 //save objects
-                for (Iterator iter = Actors.iterator(); iter.hasNext();) {
+                for (Iterator iter = actors.iterator(); iter.hasNext();) {
                     Actor dir = (Actor) iter.next();
                     ids.add((Integer) s.save(dir));
 

Modified: project_src/provirent_hibernate/src/test/provirent/hibernate/TestDirector.java
===================================================================
--- project_src/provirent_hibernate/src/test/provirent/hibernate/TestDirector.java	2004-12-07 10:16:46 UTC (rev 211)
+++ project_src/provirent_hibernate/src/test/provirent/hibernate/TestDirector.java	2004-12-07 16:20:53 UTC (rev 212)
@@ -216,15 +216,24 @@
                 //cretae new objects
                 List directors = new ArrayList();
 
-                Director myd1 = new Director("Bibo", "Bergeron");
-                Director myd2 = new Director("Vicky", "Jenson");
-                Director myd3 = new Director("Jay", "Russell");
-                Director myd4 = new Director("Joseph", "Ruben");
 
-                directors.add(myd1);
-                directors.add(myd2);
-                directors.add(myd3);
-                directors.add(myd4);
+                directors.add(new Director("Bibo", "Bergeron"));
+                directors.add(new Director("Vicky", "Jenson"));
+                directors.add(new Director("Jay", "Russell"));
+                directors.add(new Director("Joseph", "Ruben"));
+                directors.add(new Director("Taylor","Hackford"));
+                directors.add(new Director("Beeban","Kidron"));
+                directors.add(new Director("Marc","Forster"));
+                directors.add(new Director("Oliver","Stone"));
+                directors.add(new Director("Stephen","Hillenburg"));
+                directors.add(new Director("Mike","Nichols"));
+                directors.add(new Director("Brad","Bird"));
+                directors.add(new Director("Robert","Zemeckis"));
+                directors.add(new Director("Joe","Roth"));
+                directors.add(new Director("Jon","Turteltaub"));
+                directors.add(new Director("Steven","Soderbergh"));
+                directors.add(new Director("Brad","Silberling"));
+                directors.add(new Director("Martin","Scorsese"));
 
                 List ids = new ArrayList();
 

Modified: project_src/provirent_hibernate/src/test/provirent/hibernate/TestImage.java
===================================================================
--- project_src/provirent_hibernate/src/test/provirent/hibernate/TestImage.java	2004-12-07 10:16:46 UTC (rev 211)
+++ project_src/provirent_hibernate/src/test/provirent/hibernate/TestImage.java	2004-12-07 16:20:53 UTC (rev 212)
@@ -34,6 +34,7 @@
 
 import java.io.File;
 import java.io.FileInputStream;
+import java.io.FilenameFilter;
 import java.io.InputStream;
 import java.util.ArrayList;
 import java.util.Iterator;
@@ -93,129 +94,129 @@
         }
         /*
 
-        //get new Session and begin Transaction
-        Session s = HibernateUtil.currentSession();
-        Transaction tx = null;
-        try {
-            tx = s.beginTransaction();
+         //get new Session and begin Transaction
+         Session s = HibernateUtil.currentSession();
+         Transaction tx = null;
+         try {
+         tx = s.beginTransaction();
 
-            try {
-                //is DB open and connected
-                assertTrue("Connected to Db? ", s.isConnected());
-                assertTrue("Db Open? ", s.isOpen());
+         try {
+         //is DB open and connected
+         assertTrue("Connected to Db? ", s.isConnected());
+         assertTrue("Db Open? ", s.isOpen());
 
 
 
 
-                //cretae new objects
-                List Images = new ArrayList();
+         //cretae new objects
+         List Images = new ArrayList();
 
-                Image myd1 = new Image();
-                myd1.setImageFile(new byte[] { 1, 2, 3, 4 });
-                myd1.setImageFileDescription("Bild 1");
-                myd1.setImageFileName("image1.jpg");
-                myd1.setImageFileSize(123);
+         Image myd1 = new Image();
+         myd1.setImageFile(new byte[] { 1, 2, 3, 4 });
+         myd1.setImageFileDescription("Bild 1");
+         myd1.setImageFileName("image1.jpg");
+         myd1.setImageFileSize(123);
 
-                Image myd2 = new Image();
-                myd2.setImageFile(new byte[] { 5, 6, 7, 8 });
-                myd2.setImageFileDescription("Bild 2");
-                myd2.setImageFileName("image2.jpg");
-                myd2.setImageFileSize(123);
+         Image myd2 = new Image();
+         myd2.setImageFile(new byte[] { 5, 6, 7, 8 });
+         myd2.setImageFileDescription("Bild 2");
+         myd2.setImageFileName("image2.jpg");
+         myd2.setImageFileSize(123);
 
-                Image myd3 = new Image();
-                myd3.setImageFile(new byte[] { 9, 10, 11, 12 });
-                myd3.setImageFileDescription("Bild 3");
-                myd3.setImageFileName("image3.jpg");
-                myd3.setImageFileSize(123);
+         Image myd3 = new Image();
+         myd3.setImageFile(new byte[] { 9, 10, 11, 12 });
+         myd3.setImageFileDescription("Bild 3");
+         myd3.setImageFileName("image3.jpg");
+         myd3.setImageFileSize(123);
 
-                Image myd4 = new Image();
-                myd4.setImageFile(new byte[] { 13, 14, 15, 16 });
-                myd4.setImageFileDescription("Bild 4");
-                myd4.setImageFileName("image4.jpg");
-                myd4.setImageFileSize(123);
+         Image myd4 = new Image();
+         myd4.setImageFile(new byte[] { 13, 14, 15, 16 });
+         myd4.setImageFileDescription("Bild 4");
+         myd4.setImageFileName("image4.jpg");
+         myd4.setImageFileSize(123);
 
-                Images.add(myd1);
-                Images.add(myd2);
-                Images.add(myd3);
-                Images.add(myd4);
+         Images.add(myd1);
+         Images.add(myd2);
+         Images.add(myd3);
+         Images.add(myd4);
 
-                List ids = new ArrayList();
+         List ids = new ArrayList();
 
-                //save objects
-                for (Iterator iter = Images.iterator(); iter.hasNext();) {
-                    Image dir = (Image) iter.next();
-                    ids.add((Integer) s.save(dir));
+         //save objects
+         for (Iterator iter = Images.iterator(); iter.hasNext();) {
+         Image dir = (Image) iter.next();
+         ids.add((Integer) s.save(dir));
 
-                }
-                s.flush();
+         }
+         s.flush();
 
-                tx.commit();
+         tx.commit();
 
-                for (int i = 0; i < ids.size(); i++) {
-                    int id = ((Integer) ids.get(i)).intValue();
-                    Image myd = (Image) Images.get(i);
+         for (int i = 0; i < ids.size(); i++) {
+         int id = ((Integer) ids.get(i)).intValue();
+         Image myd = (Image) Images.get(i);
 
-                    //get Image from Hibernate
-                    Image dbd = (Image) s.get(Image.class, new Integer(id));
-                    assertNotNull("Can't get Image" + id + " from DB", dbd);
-                    if (dbd == null) {
-                        if (logger.isDebugEnabled()) {
-                            logger.debug("testCreating()Kein object mit id "
-                                    + id + "gefunden.");
-                        }
-                        return;
-                    }
-                    //are both equal?
-                    assertEquals(
-                            "Select: Image aus DB nicht gleich meiner. DB: "
-                                    + dbd + " My:" + myd, myd, dbd);
+         //get Image from Hibernate
+         Image dbd = (Image) s.get(Image.class, new Integer(id));
+         assertNotNull("Can't get Image" + id + " from DB", dbd);
+         if (dbd == null) {
+         if (logger.isDebugEnabled()) {
+         logger.debug("testCreating()Kein object mit id "
+         + id + "gefunden.");
+         }
+         return;
+         }
+         //are both equal?
+         assertEquals(
+         "Select: Image aus DB nicht gleich meiner. DB: "
+         + dbd + " My:" + myd, myd, dbd);
 
-                    //Update
+         //Update
 
-                    //delete the object
-                    s.delete(myd);
-                    s.flush();
+         //delete the object
+         s.delete(myd);
+         s.flush();
 
-                    dbd = myd = null;
+         dbd = myd = null;
 
-                    Object obj = s.get(Image.class, new Integer(id));
+         Object obj = s.get(Image.class, new Integer(id));
 
-                    //should be null, because data deleted
-                    assertNull("Deleted: Image" + id + ", but still in DB", obj);
+         //should be null, because data deleted
+         assertNull("Deleted: Image" + id + ", but still in DB", obj);
 
-                    if (logger.isDebugEnabled()) {
-                        logger
-                                .debug("testCreating() - Image aus DB gleich meiner? DB: "
-                                        + dbd + " My:" + myd);
-                    }
+         if (logger.isDebugEnabled()) {
+         logger
+         .debug("testCreating() - Image aus DB gleich meiner? DB: "
+         + dbd + " My:" + myd);
+         }
 
-                }
+         }
 
-                tx.commit();
+         tx.commit();
 
-            } catch (Exception e) {
-                if (tx != null) {
-                    logger
-                            .error(
-                                    "testCreating() - Something went wrong here; discard all partial changes",
-                                    e);
+         } catch (Exception e) {
+         if (tx != null) {
+         logger
+         .error(
+         "testCreating() - Something went wrong here; discard all partial changes",
+         e);
 
-                    // Something went wrong; discard all partial changes
-                    tx.rollback();
-                }
+         // Something went wrong; discard all partial changes
+         tx.rollback();
+         }
 
-            }
+         }
 
-        } catch (Exception e) {
-            logger.error(
-                    "testCreating() - Error while trying to beginTransaction",
-                    e);
-            throw e;
-        } finally {
-            // No matter what, close the session
-            HibernateUtil.closeSession();
-        }
-        */
+         } catch (Exception e) {
+         logger.error(
+         "testCreating() - Error while trying to beginTransaction",
+         e);
+         throw e;
+         } finally {
+         // No matter what, close the session
+         HibernateUtil.closeSession();
+         }
+         */
 
         if (logger.isDebugEnabled()) {
             logger.debug("testCreating() - end");
@@ -238,69 +239,55 @@
                 assertTrue("Connected to Db? ", s.isConnected());
                 assertTrue("Db Open? ", s.isOpen());
 
-                //cretae new objects
-                List Images = new ArrayList();
-                File file = new File(this.getClass()
+                File oneimage = new File(this.getClass()
                         .getResource("logo.gif").getFile());
-                
-                InputStream is = new  FileInputStream(file);
+                String path = this.getClass().getResource("logo.gif").getPath();
+                path = path.substring(0, path.lastIndexOf("/"));
+                logger.debug("Path: " + path);
+                File dir = new File(path);
 
-                long length = file.length();
-                
-                byte[] bytes = new byte[(int)length];
+                FilenameFilter filter = new FilenameFilter() {
+                    public boolean accept(File dir, String name) {
+                        return (name.endsWith(".gif") || name.endsWith(".jpg"));
+                    }
+                };
+                File[] files = dir.listFiles(filter);
+                for (int i = 0; i < files.length; i++) {
 
-                // Read in the bytes
-                int offset = 0;
-                int numRead = 0;
-                while (offset < bytes.length
-                        && (numRead = is.read(bytes, offset, bytes.length
-                                - offset)) >= 0) {
-                    offset += numRead;
-                }
+                    Image image = new Image();
 
-                is.close();                
-                
-                System.out.println("bytes l?nge "+bytes.length );
-                
-                Image myd1 = new Image();
-                myd1.setImageFile(bytes);
-                myd1.setImageFileDescription("Bild 1");
-                myd1.setImageFileName("image1.jpg");
-                myd1.setImageFileSize(123);
+                    //create new objects
+                    File file = files[i];
 
-                Image myd2 = new Image();
-                myd2.setImageFile(bytes);
-                myd2.setImageFileDescription("Bild 2");
-                myd2.setImageFileName("image2.jpg");
-                myd2.setImageFileSize(123);
+                    InputStream is = new FileInputStream(file);
 
-                Image myd3 = new Image();
-                myd3.setImageFile(bytes);
-                myd3.setImageFileDescription("Bild 3");
-                myd3.setImageFileName("image3.jpg");
-                myd3.setImageFileSize(123);
+                    long length = file.length();
 
-                Image myd4 = new Image();
-                myd4.setImageFile(bytes);
-                myd4.setImageFileDescription("Bild 4");
-                myd4.setImageFileName("image4.jpg");
-                myd4.setImageFileSize(123);
+                    byte[] bytes = new byte[(int) length];
 
-                Images.add(myd1);
-                Images.add(myd2);
-                Images.add(myd3);
-                Images.add(myd4);
+                    // Read in the bytes
+                    int offset = 0;
+                    int numRead = 0;
+                    while (offset < bytes.length
+                            && (numRead = is.read(bytes, offset, bytes.length
+                                    - offset)) >= 0) {
+                        offset += numRead;
+                    }
 
-                List ids = new ArrayList();
+                    is.close();
 
-                //save objects
-                for (Iterator iter = Images.iterator(); iter.hasNext();) {
-                    Image dir = (Image) iter.next();
-                    ids.add((Integer) s.save(dir));
+                    logger.debug("bytes l?nge " + bytes.length);
 
-                }
-                s.flush();
+                    image.setImageFile(bytes);
+                    image.setImageFileDescription(file.getName());
+                    image.setImageFileName(file.getName());
+                    image.setImageFileSize(bytes.length);
 
+                    //Save Image
+                    s.save(image);
+
+                    s.flush();
+                }
                 tx.commit();
 
             } catch (Exception e) {

Modified: project_src/provirent_hibernate/src/test/provirent/hibernate/TestMovie.java
===================================================================
--- project_src/provirent_hibernate/src/test/provirent/hibernate/TestMovie.java	2004-12-07 10:16:46 UTC (rev 211)
+++ project_src/provirent_hibernate/src/test/provirent/hibernate/TestMovie.java	2004-12-07 16:20:53 UTC (rev 212)
@@ -272,14 +272,26 @@
                 
                 logger.debug("Erstelle Movie Objekt");
                 
+                List data = new ArrayList();
+                data.add(new String[]{"The Forgotten","96","A grieving mother, Telly Parada, is struggling to cope with the loss of her 9-year-old son. She is stunned...","Forgotten_main.jpg","Forgotten_1.gif","Forgotten_2.gif" });
+                data.add(new String[]{"Ocean's Twelve","128","With Tess (Roberts) and Rusty (Pitt) at his side, Daniel Ocean (Clooney) must find one more conspirator before he can pull off heists in three different European cities -- Paris, Rome, and Amsterdam.","Twelve_main.gif","Twelve_1.gif","Twelve_2.gif","Twelve_3.gif"});
+                data.add(new String[]{"Blade: Trinity","156","Framed by the Vampire Nation for a series of brutal murders, the Daywalker (Snipes) finds allies in a group of vampire hunters, the Nightstalkers, and together they wage a battle that leads all the way to Dracula himself.","Blade_main.gif","Blade_1.gif","Blade_2.gif","Blade_3.gif"});
+                data.add(new String[]{"National Treasure","126","Benjamin Franklin Gates (Cage) descends from a family of treasure-seekers who've all hunted for the same thing: a war chest hidden by the Founding Fathers prior to the Revolutionary War. Ben's close to discovering its whereabouts, as is his competition, though the FBI is also hip to the hunt.","Treasure_main.gif","Treasure_1.gif","Treasure_2.gif","Treasure_3.gif","Treasure_4.gif"});
+                data.add(new String[]{"Christmas with the Kranks","92","Upon receiving a last-minute call from their daughter, Luther and Nora Krank (Allen and Curtis) ditch their vacation plans and scramble to get their home in shape to celebrate Christmas.","Kranks_main.gif","Kranks_1.gif","Kranks_2.gif"});
+                data.add(new String[]{"The Polar Express","215","A boy's belief in Santa Claus is restored on Christmas Eve when a steam train pulls up in front of his house and whisks him away to the North Pole.","Polar_main.gif","Polar_1.gif","Polar_2.gif","Polar_3.gif"});
+                data.add(new String[]{"The Incredibles","186","Years after their last assignment, a husband and wife superhero team, who currently maintain a ho-hum suburban existence, respond a cryptic communiqu? from a remote island base.","Incredibles_main.gif","Incredibles_1.gif","Incredibles_2.gif"});
+                data.add(new String[]{"Closer","145","Two couples are drawn together by undeniable attraction and a series of chance encounters.","closer_main.gif","closer_1.gif","closer_2.gif","closer_3.gif"});
+                
+                for(int k =0; k< data.size(); k++){
+                    
+                    String[] sdata = (String[])data.get(k);
                 //create new movie objects
                 Movie movie = new Movie();
                 //set simple properties
-                movie.setDescription("A grieving mother, Telly Parada, " +
-                        "is struggling to cope with the loss of her "
-                        +"9-year-old son. She is stunned...");
-                movie.setRuntime(96);
-                movie.setTitle("The Forgotten");
+                movie.setTitle(sdata[0]);
+                movie.setDescription(sdata[2]);
+                movie.setRuntime(Integer.parseInt(sdata[1]));
+                
                 Calendar cal = Calendar.getInstance();
                 cal.set(Calendar.HOUR,0);
                 cal.set(Calendar.MINUTE,0);
@@ -341,6 +353,10 @@
                 movie.setGenres(movieprops);
                 
                 
+                
+                //set MainImage
+                
+                
                 //try to get Images from db
                 dbprops =  s.find("from Image as image");
                 assertNotNull("testCreateDBMovie(): Can't get Image from DB. Null", dbprops);
@@ -393,6 +409,8 @@
                 assertNotNull("testCreateDBMovie(): Can't get Movie from DB. Null", dbprops);
                 assertTrue("testCreateDBMovie(): Can not find Movie in DB", dbprops.size() >0);
                 
+                }
+                
                 for (int i = 0; i < dbprops.size(); i++) {
                     Movie m = (Movie)dbprops.get(i);
                     logger.debug(i+" Movie:"+m + " Actors: "+m.getActors()+" Director: "+m.getDirector()+" Images: "+m.getImages()+ " Genre: "+m.getGenres());

Added: project_src/provirent_hibernate/src/test/provirent/hibernate/Treasure_1.jpg
===================================================================
(Binary files differ)


Property changes on: project_src/provirent_hibernate/src/test/provirent/hibernate/Treasure_1.jpg
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/provirent_hibernate/src/test/provirent/hibernate/Treasure_2.jpg
===================================================================
(Binary files differ)


Property changes on: project_src/provirent_hibernate/src/test/provirent/hibernate/Treasure_2.jpg
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/provirent_hibernate/src/test/provirent/hibernate/Treasure_3.jpg
===================================================================
(Binary files differ)


Property changes on: project_src/provirent_hibernate/src/test/provirent/hibernate/Treasure_3.jpg
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/provirent_hibernate/src/test/provirent/hibernate/Treasure_4.jpg
===================================================================
(Binary files differ)


Property changes on: project_src/provirent_hibernate/src/test/provirent/hibernate/Treasure_4.jpg
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/provirent_hibernate/src/test/provirent/hibernate/Treasure_main.jpg
===================================================================
(Binary files differ)


Property changes on: project_src/provirent_hibernate/src/test/provirent/hibernate/Treasure_main.jpg
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/provirent_hibernate/src/test/provirent/hibernate/Twelve_1.jpg
===================================================================
(Binary files differ)


Property changes on: project_src/provirent_hibernate/src/test/provirent/hibernate/Twelve_1.jpg
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/provirent_hibernate/src/test/provirent/hibernate/Twelve_2.jpg
===================================================================
(Binary files differ)


Property changes on: project_src/provirent_hibernate/src/test/provirent/hibernate/Twelve_2.jpg
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/provirent_hibernate/src/test/provirent/hibernate/Twelve_3.jpg
===================================================================
(Binary files differ)


Property changes on: project_src/provirent_hibernate/src/test/provirent/hibernate/Twelve_3.jpg
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/provirent_hibernate/src/test/provirent/hibernate/Twelve_main.jpg
===================================================================
(Binary files differ)


Property changes on: project_src/provirent_hibernate/src/test/provirent/hibernate/Twelve_main.jpg
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/provirent_hibernate/src/test/provirent/hibernate/closer_1.jpg
===================================================================
(Binary files differ)


Property changes on: project_src/provirent_hibernate/src/test/provirent/hibernate/closer_1.jpg
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/provirent_hibernate/src/test/provirent/hibernate/closer_2.jpg
===================================================================
(Binary files differ)


Property changes on: project_src/provirent_hibernate/src/test/provirent/hibernate/closer_2.jpg
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/provirent_hibernate/src/test/provirent/hibernate/closer_3.jpg
===================================================================
(Binary files differ)


Property changes on: project_src/provirent_hibernate/src/test/provirent/hibernate/closer_3.jpg
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/provirent_hibernate/src/test/provirent/hibernate/closer_main.jpg
===================================================================
(Binary files differ)


Property changes on: project_src/provirent_hibernate/src/test/provirent/hibernate/closer_main.jpg
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream



From sforstner at sheep.berlios.de  Tue Dec  7 17:53:04 2004
From: sforstner at sheep.berlios.de (Stefan at BerliOS)
Date: Tue, 7 Dec 2004 17:53:04 +0100
Subject: [Provirent-svn-commit] r213 - project_src/provirent_hibernate/src/de/hsharz/provirent/persistence
Message-ID: <200412071653.iB7Gr4Mb002136@sheep.berlios.de>

Author: sforstner
Date: 2004-12-07 17:53:02 +0100 (Tue, 07 Dec 2004)
New Revision: 213

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java
Log:


Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java	2004-12-07 16:20:53 UTC (rev 212)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java	2004-12-07 16:53:02 UTC (rev 213)
@@ -44,6 +44,8 @@
 import net.sf.hibernate.Transaction;
 import net.sf.hibernate.expression.Disjunction;
 import net.sf.hibernate.expression.Expression;
+import net.sf.hibernate.expression.Order;
+import net.sf.hibernate.type.Type;
 
 import org.apache.log4j.Logger;
 
@@ -56,6 +58,7 @@
 import de.hsharz.provirent.objects.Image;
 import de.hsharz.provirent.objects.Language;
 import de.hsharz.provirent.objects.Movie;
+import de.hsharz.provirent.objects.MovieOrder;
 import de.hsharz.provirent.objects.Payment;
 import de.hsharz.provirent.objects.Status;
 import de.hsharz.provirent.objects.Subtitle;
@@ -1633,9 +1636,13 @@
 
 	            if (filter != null && !filter.equalsIgnoreCase("")) {
 	                any.add(Expression.like("userName", "%"+filter+"%"));
-	                //any.add(Expression.like("dayOfRegistration", "%"+filter+"%"));
+	                
 	                any.add(Expression.like("p.lastName", "%"+filter+"%"));
 	                any.add(Expression.like("p.firstName", "%"+filter+"%"));
+
+	                // TODO Criteria for Birthday and Registration Date
+	                //any.add(Expression.like("p.dayOfBirth", "%"+filter+"%"));
+
 	                try{
 	                    Calendar cal = Calendar.getInstance();
 	                    cal.setTime(DateFormat.getDateInstance(DateFormat.SHORT).parse(filter));
@@ -1643,6 +1650,7 @@
 	                } catch (ParseException pex){
 	                    logger.debug("Fehler beim Parsen des Datums",pex);
 	                }
+	                //any.add(Expression.like("dayOfRegistration", "%"+filter+"%"));
 	                
 	                
 	                //maybe we are searching for the id?
@@ -1732,8 +1740,114 @@
 	    
 	
 	}
+	
+	/**
+	 * This method gets all Customers from the database
+	 * @param filter 
+	 * @return List of Customer objects, or an empty List
+	 */
+	public static List getOrder(final String filter){
+	    if (logger.isDebugEnabled()) {
+	        logger.debug("getOrder() - start. String filter= "+filter);
+	    }
+	    //init the returnlist
+	    List returnlist = new ArrayList();
+	
+	    Session s = null;
+	    
+	    try {
+	        //get new Session and begin Transaction
+	        s = HibernateUtil.currentSession();
+	            
+	            //init the criteria
+	            Criteria criteria = s.createCriteria(MovieOrder.class).createAlias("customer", "c").createAlias("c.person", "p");
+	            //Criteria personCriteria = criteria.createCriteria("person");
+	            //any of the criteria 
+	            Disjunction any = Expression.disjunction();
 
+	            if (filter != null && !filter.equalsIgnoreCase("")) {	                
+	                any.add(Expression.like("c.userName", "%"+filter+"%"));
+	                any.add(Expression.like("p.lastName", "%"+filter+"%"));
+	                any.add(Expression.like("p.firstName", "%"+filter+"%"));	                
+	                
+	                //maybe we are searching for the id?
+	                try {
+	                    any.add(Expression.eq("movieOrderId", new Integer(Integer.parseInt(filter))));
+	                } catch (Exception e) {
+	                }
+	                
+	            }
+	            
+	            //add all criteria
+	            criteria.addOrder(Order.asc("movieOrderId"));
+	            criteria.add(any);
+	            
+	            //get the results
+	            returnlist = criteria.list();
 
+	            logger.debug("Anzahl der Elemente in R?ckgabeliste: " + returnlist.size());
+	            int i = 0;
+	            
+	    } catch (Exception e) {
+	        logger.error(
+	                "getOrder() - Error while trying to do Transaction",
+	                e);
+	        returnlist = new ArrayList();
+	    } finally {
+	        try {
+	            // No matter what, close the session
+	            HibernateUtil.closeSession();
+	        } catch (HibernateException e1) {
+	            logger.error("getOrder() - Could not Close the Session", e1);
+	        }
+	    }
+	
+	    if (logger.isDebugEnabled()) {
+	        logger.debug("getOrder() - end");
+	    }
+	    return returnlist;	
+	}
+	
+	
+	public static MovieOrder getSingleOrder(final int id){
+	    if (logger.isDebugEnabled()) {
+	        logger.debug("getSingleOrder() - start. int filter= "+id);
+	    }
+	    //init the returnlist
+	    MovieOrder returnobject = null;
+	
+	    Session s = null;
+	    Transaction tx = null;
+	    try {
+	        //get new Session and begin Transaction
+	        s = HibernateUtil.currentSession();
+	
+	            returnobject = (MovieOrder)s.get(MovieOrder.class, new Integer(id));
+	
+	    } catch (Exception e) {
+	        logger.error(
+	                "getSingleOrder() - Error while trying to do Transaction",
+	                e);
+	        
+	    } finally {
+	        try {
+	            // No matter what, close the session
+	            HibernateUtil.closeSession();
+	        } catch (HibernateException e1) {
+	            logger.error("getSingleOrder() - Could not Close the Session", e1);
+	        }
+	    }
+	
+	    if (logger.isDebugEnabled()) {
+	        logger.debug("getSingleOrder() - end");
+	    }
+	    return returnobject;
+	    
+	
+	}
+
+
+
 	/**
 	 * This method gets all Movies from the database.
 	 * searches for ID,Title,Date,Description,Actor,Director...



From sforstner at sheep.berlios.de  Tue Dec  7 17:54:50 2004
From: sforstner at sheep.berlios.de (Stefan at BerliOS)
Date: Tue, 7 Dec 2004 17:54:50 +0100
Subject: [Provirent-svn-commit] r215 - project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui
Message-ID: <200412071654.iB7GsoKe002418@sheep.berlios.de>

Author: sforstner
Date: 2004-12-07 17:54:49 +0100 (Tue, 07 Dec 2004)
New Revision: 215

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java
Log:


Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java	2004-12-07 16:54:01 UTC (rev 214)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java	2004-12-07 16:54:49 UTC (rev 215)
@@ -109,6 +109,7 @@
     private CTabItem tabItemPayment;
     private CTabItem tabItemActor;
     private CTabItem tabItemDirector;
+    private CTabItem tabItemOrder;
     private CTabItem tabItemLanguage;
     private CTabItem tabItemCustomer;
     private CTabItem tabItemGenre;
@@ -121,6 +122,7 @@
     private CompositeActors compositeActor;
     private CompositeDirectors compositeDirector;
     private CompositeGenre compositeGenre;
+    private CompositeOrder compositeOrder;
     private CompositeLanguage compositeLanguage;
     private CompositeImage compositeImage;
     private CompositeMovie compositeMovie;
@@ -143,6 +145,7 @@
     private MenuItem viewDirectorMenuItem;
     private MenuItem viewVideoFormatMenuItem;
     private MenuItem viewActorMenuItem;
+    private MenuItem viewOrderMenuItem;
     private MenuItem viewCustomerMenuItem;
     private MenuItem viewGenreMenuItem;
     private MenuItem viewLanguageMenuItem;
@@ -462,6 +465,23 @@
             }
         });
         
+        viewOrderMenuItem = new MenuItem(viewMenu, SWT.CHECK);
+        viewOrderMenuItem.setText(l.getString("menu.view.order"));
+        viewOrderMenuItem.setSelection(false);
+        viewOrderMenuItem.addSelectionListener(new SelectionAdapter() {
+            public void widgetSelected(SelectionEvent evt) {
+				if(tabItemOrder == null || tabItemOrder.isDisposed()){
+				    initOrderTab();
+				    return;   
+				}
+				
+				cTabFolderMain.setSelection(tabItemOrder);
+				viewOrderMenuItem.setSelection(true);
+				cTabFolderMain.showSelection();				
+            
+            }
+        });
+        
         viewGenreMenuItem = new MenuItem(viewMenu, SWT.CHECK);
         viewGenreMenuItem.setText(l.getString("menu.view.genre"));
         viewGenreMenuItem.setSelection(false);
@@ -694,6 +714,28 @@
         
     }
     
+    private void initOrderTab() {
+        tabItemOrder = new CTabItem(cTabFolderMain, SWT.NONE);        
+        tabItemOrder.setText(l.getString("tab.Order.title"));
+        tabItemOrder.addDisposeListener(new DisposeListener() {
+            public void widgetDisposed(DisposeEvent evt) {
+
+                if (!viewOrderMenuItem.isDisposed()){
+                    viewOrderMenuItem.setSelection(false);
+                }
+            }
+        });
+
+        {
+            compositeOrder = new CompositeOrder(
+                cTabFolderMain,
+                SWT.NONE, statusLine, locale);
+            
+            tabItemOrder.setControl(compositeOrder);
+        }
+        cTabFolderMain.setSelection(tabItemOrder);
+        
+    }    
     
     private void initDirectorTab() {
         tabItemDirector = new CTabItem(cTabFolderMain, SWT.NONE);



From sforstner at sheep.berlios.de  Tue Dec  7 17:54:02 2004
From: sforstner at sheep.berlios.de (Stefan at BerliOS)
Date: Tue, 7 Dec 2004 17:54:02 +0100
Subject: [Provirent-svn-commit] r214 - project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui
Message-ID: <200412071654.iB7Gs2JH002323@sheep.berlios.de>

Author: sforstner
Date: 2004-12-07 17:54:01 +0100 (Tue, 07 Dec 2004)
New Revision: 214

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeCustomer.java
Log:


Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeCustomer.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeCustomer.java	2004-12-07 16:53:02 UTC (rev 213)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeCustomer.java	2004-12-07 16:54:01 UTC (rev 214)
@@ -1384,7 +1384,7 @@
             String regdate = "";
             if (o.getDayOfRegistration() != null) {
                 regdate = DateFormat.getDateInstance(DateFormat.SHORT).format(
-                        o.getDayOfRegistration().getTime());
+                    o.getDayOfRegistration().getTime());
             }
             item.setText(new String[] { o.getCustomerId() + "",
                     o.getUserName(), o.getPerson().getLastName(),



From sforstner at sheep.berlios.de  Tue Dec  7 17:55:16 2004
From: sforstner at sheep.berlios.de (Stefan at BerliOS)
Date: Tue, 7 Dec 2004 17:55:16 +0100
Subject: [Provirent-svn-commit] r216 - project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui
Message-ID: <200412071655.iB7GtGdp002511@sheep.berlios.de>

Author: sforstner
Date: 2004-12-07 17:55:16 +0100 (Tue, 07 Dec 2004)
New Revision: 216

Added:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeOrder.java
Log:


Added: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeOrder.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeOrder.java	2004-12-07 16:54:49 UTC (rev 215)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeOrder.java	2004-12-07 16:55:16 UTC (rev 216)
@@ -0,0 +1,628 @@
+/*
+ * Created on 06.12.2004
+ *
+ * Copyright (c) 2004/2005, Remo Griesch/Stefan Forstner/Philipp Schneider
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * - Redistributions of source code must retain the above copyright notice,
+ * this list of conditions and the following disclaimer.
+ * - Redistributions in binary form must reproduce the above copyright notice,
+ * this list of conditions and the following disclaimer in the documentation
+ * and/or other materials provided with the distribution.
+ * - Neither the name of the Remo Griesch/Stefan Forstner/Philipp Schneider nor
+ * the names of its contributors may be used to endorse or promote products
+ * derived from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+package de.hsharz.provirent.management.gui;
+
+import java.text.DateFormat;
+import java.util.Locale;
+import java.util.PropertyResourceBundle;
+import java.util.ResourceBundle;
+
+import org.apache.log4j.Logger;
+import org.eclipse.swt.SWT;
+import org.eclipse.swt.custom.SashForm;
+import org.eclipse.swt.events.FocusAdapter;
+import org.eclipse.swt.events.FocusEvent;
+import org.eclipse.swt.events.SelectionAdapter;
+import org.eclipse.swt.events.SelectionEvent;
+import org.eclipse.swt.layout.FormAttachment;
+import org.eclipse.swt.layout.FormData;
+import org.eclipse.swt.layout.FormLayout;
+import org.eclipse.swt.layout.GridData;
+import org.eclipse.swt.layout.GridLayout;
+import org.eclipse.swt.widgets.Composite;
+import org.eclipse.swt.widgets.Control;
+import org.eclipse.swt.widgets.Display;
+import org.eclipse.swt.widgets.Event;
+import org.eclipse.swt.widgets.Group;
+import org.eclipse.swt.widgets.Label;
+import org.eclipse.swt.widgets.Listener;
+import org.eclipse.swt.widgets.Shell;
+import org.eclipse.swt.widgets.Table;
+import org.eclipse.swt.widgets.TableColumn;
+import org.eclipse.swt.widgets.TableItem;
+import org.eclipse.swt.widgets.Text;
+
+import com.cloudgarden.resource.SWTResourceManager;
+
+import de.hsharz.provirent.objects.Customer;
+import de.hsharz.provirent.objects.MovieOrder;
+import de.hsharz.provirent.objects.OrderItem;
+import de.hsharz.provirent.persistence.DataBaseException;
+import de.hsharz.provirent.persistence.Database;
+
+/**
+ * @author Stefan Forstner
+ *
+ */
+public class CompositeOrder extends AbstractComposite {
+
+    private final static int MODE_VIEW = 0;
+
+    private final static int MODE_ADD = 1;
+    
+    private final static int MODE_EDIT = 2;
+    
+    private Composite parent;
+    private StatusLineStyledText statusLine;
+    private ResourceBundle l;
+    
+    
+    {
+        //Register as a resource user - SWTResourceManager will
+        //handle the obtaining and disposing of resources
+        SWTResourceManager.registerResourceUser(this);
+    }
+    
+    /**
+     * Logger for this class
+     */
+    private static final Logger logger = Logger
+            .getLogger(CompositeCustomer.class);
+    private SashForm sashForm1;
+
+    private Group groupOrder;
+
+    private SashForm sashFormOrder;
+
+    private Group groupOrderOverview;
+
+    private Label labelOrderSearch;
+
+    private Text textOrderSearch;
+
+    private Table tableOrder;
+
+    private TableColumn tableColumn;
+    
+    private Table tableOrderItems;
+
+    private Group groupOrderDetail;
+
+    private MovieOrder localCustomer;
+    
+    /**
+     * @param p
+     * @param style
+     * @param status
+     * @param l
+     */
+    public CompositeOrder(Composite p, int style, StatusLineStyledText status, Locale l) {
+        super(p, style, status, l);
+        parent = p;
+        //Statusline wird gestzt
+        statusLine = status;
+
+        //sprache wird init
+        initLanguage(l);
+
+        initGUI();
+    }
+    
+    public static void showGUI() {
+        Display display = Display.getDefault();
+        Shell shell = new Shell(display);
+
+        shell.open();
+        while (!shell.isDisposed()) {
+            if (!display.readAndDispatch())
+                display.sleep();
+        }
+    }
+
+    /**
+     * 
+     */
+    private void initGUI() {
+        if (logger.isDebugEnabled()) {
+            logger.debug("initGUI() - start");
+        }
+
+        this.setLayout(new GridLayout());
+        this.setSize(816, 540);
+        {
+            sashForm1 = new SashForm(this, SWT.VERTICAL | SWT.V_SCROLL);
+            GridData sashForm1LData1 = new GridData();
+            sashForm1LData1.grabExcessHorizontalSpace = true;
+            sashForm1LData1.horizontalAlignment = GridData.FILL;
+            sashForm1LData1.grabExcessVerticalSpace = true;
+            sashForm1LData1.verticalAlignment = GridData.FILL;
+            sashForm1.setLayoutData(sashForm1LData1);
+
+            initOrderGroup();
+            
+            refreshOrderTable(textOrderSearch.getText());
+
+        }
+        this.layout();
+
+        if (logger.isDebugEnabled()) {
+            logger.debug("initGUI() - end");
+        }
+    }
+
+    /**
+     * @param text
+     */
+    private void refreshOrderTable(String filter) {
+        if (logger.isDebugEnabled()) {
+            logger.debug("refreshOrderTable(String) - Versuche nun OrderListe zu refreshen. Filter: "
+                            + filter);
+        }
+        if (tableOrder == null) {
+            if (logger.isDebugEnabled()) {
+                logger.debug("refreshOrderTable(String) - Konnte Ordertable nicht refreshen, da diese null ist!");
+            }
+            return;
+        }
+
+        tableOrder.removeAll();
+        TableItem item;
+        java.util.List Orderlist = Database.getOrder(filter);
+
+        for (int i = 0; i < Orderlist.size(); i++) {
+
+            MovieOrder o = (MovieOrder) Orderlist.get(i);
+
+            item = new TableItem(tableOrder, SWT.NONE);
+                        
+            item.setText(new String[] { o.getMovieOrderId() + "",
+                    o.getCustomer().getUserName(), o.getCustomer().getPerson().getLastName(),
+                    o.getCustomer().getPerson().getFirstName()});
+
+        }
+    }
+    
+    /**
+     * @param text
+     */
+    private void refreshOrderItemTable(String id) {
+        if (logger.isDebugEnabled()) {
+            logger.debug("refreshOrderItemTable(String) - Versuche nun OrderItemListe zu refreshen. Filter: "
+                            + id);
+        }
+        if (tableOrder == null) {
+            if (logger.isDebugEnabled()) {
+                logger.debug("refreshOrderItemTable(String) - Konnte OrderItemtable nicht refreshen, da diese null ist!");
+            }
+            return;
+        }
+        
+        if (!id.equals("") && id != null) {
+            MovieOrder object;
+            try {
+                //since we only can get a String value from the table, we
+                //need to convert this
+                object = Database.getSingleOrder(Integer.parseInt(id));
+
+                if (object == null) {
+
+                    // @TODO Statusbar aktualiseren
+                    return;
+                }
+            } catch (Exception e) {
+                //id ist keine Zahl
+                return;
+            }
+            localCustomer = object;            
+            
+            tableOrderItems.removeAll();
+            TableItem item;
+            java.util.List OrderItemlist = localCustomer.getMovieOrderItems();
+
+	        for (int i = 0; i < OrderItemlist.size(); i++) {
+	
+	            OrderItem o = (OrderItem) OrderItemlist.get(i);
+	
+	            item = new TableItem(tableOrderItems, SWT.NONE);
+	            
+	            String orderdate = "";
+	            if (o.getOrderTime() != null) {
+	                orderdate = DateFormat.getDateInstance(DateFormat.SHORT).format(
+	                    o.getOrderTime().getTime());
+	            }
+	            
+	            String senddate = "";
+	            if (o.getSenderTime() != null) {
+	                senddate = DateFormat.getDateInstance(DateFormat.SHORT).format(
+	                    o.getSenderTime().getTime());
+	            }
+	            
+	            String receivingdate = "";
+	            if (o.getReceivingTime() != null) {
+	                receivingdate = DateFormat.getDateInstance(DateFormat.SHORT).format(
+	                    o.getReceivingTime().getTime());
+	            }
+	            
+	            item.setText(new String[] { o.getOrderItemId() + "",
+	                    o.getDvd().getDvdId().toString(), o.getDvd().getMovie().getTitle(),
+	                    orderdate, 
+	                    senddate, 
+	                    receivingdate,
+	                    o.getPayment().getName(),
+	                    Integer.toString(o.getDuration()),
+	                    o.getConditionSend().getConditionName(),
+	                    o.getConditionReceiving().getConditionName()});
+	
+	        }
+        }
+    }
+
+    /**
+     * 
+     */
+    private void initOrderGroup() {
+        {
+            //init a group for the Customer
+            groupOrder = new Group(sashForm1, SWT.NONE);
+            GridLayout group2Layout = new GridLayout();
+            group2Layout.makeColumnsEqualWidth = true;
+            groupOrder.setText(l.getString("Order.group.label"));
+            groupOrder.setSize(758, 284);
+            FormData group2LData = new FormData();
+            groupOrder.addFocusListener(new FocusAdapter() {
+                private Control buttonOrderCancel;
+                private Control buttonOrderDelete;
+                private Control buttonOrderEdit;
+                private Control buttonOrderNew;
+                private Control buttonOrderSave;
+
+                public void focusLost(FocusEvent evt) {
+                    if (logger.isDebugEnabled()) {
+                        logger
+                                .debug("focusLost(FocusEvent) - groupOrder.focusLost, event="
+                                        + evt);
+                    }
+                    buttonOrderCancel.setEnabled(false);
+                    buttonOrderDelete.setEnabled(false);
+                    buttonOrderEdit.setEnabled(false);
+                    buttonOrderNew.setEnabled(false);
+                    buttonOrderSave.setEnabled(false);
+                }
+            });
+            groupOrder.setLayout(group2Layout);
+            groupOrder.setLayoutData(group2LData);
+            {
+                sashFormOrder = new SashForm(groupOrder, SWT.NONE);
+                FormLayout sashForm2Layout = new FormLayout();
+                sashFormOrder.setSize(748, 300);
+                GridData sashForm2LData = new GridData();
+                sashFormOrder.setLayout(sashForm2Layout);
+                sashForm2LData.verticalAlignment = GridData.FILL;
+                sashForm2LData.horizontalAlignment = GridData.FILL;
+                sashForm2LData.grabExcessHorizontalSpace = true;
+                sashForm2LData.grabExcessVerticalSpace = true;
+                sashFormOrder.setLayoutData(sashForm2LData);
+
+                //init die Gruppe f?r Customere ?berblick
+                initOrderGroupOverview();
+                //init die Detailansicht
+                initOrderGroupDetail();
+
+            }
+        }
+    }
+
+    /**
+     * 
+     */
+    private void initOrderGroupDetail() {
+        groupOrderDetail = new Group(sashFormOrder, SWT.NONE);
+        GridLayout groupOrderDetailLayout = new GridLayout();
+        groupOrderDetailLayout.marginHeight = 25;
+        groupOrderDetailLayout.numColumns = 4;
+        groupOrderDetailLayout.verticalSpacing = 15;
+        groupOrderDetail.setText(l.getString("Order.groupdetail.label"));
+        FormData formData = new FormData();
+        groupOrderDetail.setLayout(groupOrderDetailLayout);
+        formData.right = new FormAttachment(100, 100, -5);
+        formData.top = new FormAttachment(0, 100, 5);
+        formData.bottom = new FormAttachment(100, 100, -5);
+        groupOrderDetail.setLayoutData(formData);
+    }
+
+    /**
+     * 
+     */
+    private void initOrderGroupOverview() {
+        if (logger.isDebugEnabled()) {
+            logger.debug("initOrderGroupOverview() - start");
+        }
+
+        groupOrderOverview = new Group(sashFormOrder, SWT.NONE);
+        GridLayout group5Layout = new GridLayout();
+        group5Layout.numColumns = 8;
+        groupOrderOverview.setText(l
+                .getString("Order.groupoverview.label"));
+        FormData group5LData = new FormData();
+        groupOrderOverview.setLayout(group5Layout);
+        group5LData.left = new FormAttachment(0, 100, 0);
+        group5LData.top = new FormAttachment(0, 100, 0);
+        groupOrderOverview.setLayoutData(group5LData);
+
+        //Tabelle anzeigen
+        initTableOrder();
+        //Suche darunter anzeigen
+        initOrderSearch();
+        //Tabelle f?r Orderitems
+        initTableOrderItems();
+
+        if (logger.isDebugEnabled()) {
+            logger.debug("initCustomerGroupOverview() - end");
+        }
+
+        
+    }
+
+    /**
+     * 
+     */
+    private void initTableOrderItems() {
+        if (logger.isDebugEnabled()) {
+            logger.debug("initTableOrderItems() - start");
+        }
+
+        tableOrderItems = new Table(groupOrderOverview, SWT.SINGLE
+                | SWT.FULL_SELECTION | SWT.V_SCROLL | SWT.BORDER);
+        tableOrderItems.setHeaderVisible(true);
+        tableOrderItems.setLinesVisible(true);
+        GridData table2LData = new GridData();
+
+        tableOrderItems.addSelectionListener(new SelectionAdapter() {
+            public void widgetSelected(SelectionEvent evt) {
+
+                int index = tableOrderItems.getSelectionIndex();
+
+                //es wurde ein Element aus Tabelle ausgewaehlt jetzt muss die
+                //Detailansicht aktualisiert werden
+                refreshOrderItemTable(tableOrderItems.getItem(index).getText(0));
+
+            }
+        });
+        table2LData.verticalAlignment = GridData.FILL;
+        table2LData.horizontalAlignment = GridData.FILL;
+        table2LData.horizontalSpan = 8;
+        table2LData.grabExcessHorizontalSpace = true;
+        table2LData.grabExcessVerticalSpace = true;
+        tableOrderItems.setLayoutData(table2LData);
+
+        //einzelne Spalten hinzuf?gen
+        tableColumn = new TableColumn(tableOrderItems, SWT.CENTER);
+        tableColumn.setText(l.getString("OrderItems.groupoverview.columnid"));
+        tableColumn.setWidth(50);
+
+        tableColumn = new TableColumn(tableOrderItems, SWT.CENTER);
+        tableColumn.setText(l
+                .getString("OrderItems.groupoverview.columndvdid"));
+        tableColumn.setWidth(50);
+
+        tableColumn = new TableColumn(tableOrderItems, SWT.CENTER);
+        tableColumn.setText(l
+                .getString("OrderItems.groupoverview.columnmoviename"));
+        tableColumn.setWidth(70);
+        
+        tableColumn = new TableColumn(tableOrderItems, SWT.CENTER);
+        tableColumn.setText(l
+                .getString("OrderItems.groupoverview.columnordertime"));
+        tableColumn.setWidth(70);
+        
+        tableColumn = new TableColumn(tableOrderItems, SWT.CENTER);
+        tableColumn.setText(l
+                .getString("OrderItems.groupoverview.columnsendertime"));
+        tableColumn.setWidth(70);
+        
+        tableColumn = new TableColumn(tableOrderItems, SWT.CENTER);
+        tableColumn.setText(l
+                .getString("OrderItems.groupoverview.columnreceivingtime"));
+        tableColumn.setWidth(70);
+        
+        tableColumn = new TableColumn(tableOrderItems, SWT.CENTER);
+        tableColumn.setText(l
+                .getString("OrderItems.groupoverview.columnpayment"));
+        tableColumn.setWidth(70);
+        
+        tableColumn = new TableColumn(tableOrderItems, SWT.CENTER);
+        tableColumn.setText(l
+                .getString("OrderItems.groupoverview.columnduration"));
+        tableColumn.setWidth(70);
+        
+        tableColumn = new TableColumn(tableOrderItems, SWT.CENTER);
+        tableColumn.setText(l
+                .getString("OrderItems.groupoverview.columnconditionsend"));
+        tableColumn.setWidth(70);
+        
+        tableColumn = new TableColumn(tableOrderItems, SWT.CENTER);
+        tableColumn.setText(l
+                .getString("OrderItems.groupoverview.columnconditionreceiving"));
+        tableColumn.setWidth(70);
+
+        if (logger.isDebugEnabled()) {
+            logger.debug("initTableOrderItems() - end");
+        }
+    }
+
+    /**
+     * 
+     */
+    private void initOrderSearch() {
+        if (logger.isDebugEnabled()) {
+            logger.debug("initOrderSearch() - start");
+        }
+
+        //label f?r die Suche
+        labelOrderSearch = new Label(groupOrderOverview, SWT.NONE);
+        labelOrderSearch.setText(l
+                .getString("Order.groupoverview.searchlabel")
+                + ":");
+        GridData label2LData = new GridData();
+        label2LData.horizontalSpan = 3;
+        labelOrderSearch.setLayoutData(label2LData);
+
+        //das Suchfeld
+        textOrderSearch = new Text(groupOrderOverview, SWT.BORDER);
+        GridData text2LData = new GridData();
+        textOrderSearch.addFocusListener(new FocusAdapter() {
+            public void focusLost(FocusEvent evt) {
+                if (logger.isDebugEnabled()) {
+                    logger.debug("focusLost(FocusEvent evt = " + evt + " "
+                            + textOrderSearch.getText() + ") - start");
+                }
+                
+                /* TODO
+                try {
+                    refreshOrderTable(textOrderSearch.getText());
+                } catch (DataBaseException e) {
+                    logger.error("focusLost(FocusEvent)", e);
+                }*/
+
+                if (logger.isDebugEnabled()) {
+                    logger.debug("focusLost(FocusEvent) - end");
+                }
+            }
+        });
+
+        textOrderSearch.addListener(SWT.DefaultSelection, new Listener() {
+            public void handleEvent(Event e) {
+                if (logger.isDebugEnabled()) {
+                    logger.debug("handleEvent(Event e = " + e + " "
+                            + textOrderSearch.getText() + ") - start");
+                }
+                
+                /* TODO
+                try {
+                    refreshOrderTable(textOrderSearch.getText());
+                } catch (DataBaseException e1) {
+                    logger.error("handleEvent(Event)", e1);
+                }*/
+
+                if (logger.isDebugEnabled()) {
+                    logger.debug("handleEvent(Event) - end");
+                }
+            }
+        });
+
+        text2LData.horizontalAlignment = GridData.FILL;
+        text2LData.horizontalSpan = 5;
+        text2LData.grabExcessHorizontalSpace = true;
+        textOrderSearch.setLayoutData(text2LData);
+
+        if (logger.isDebugEnabled()) {
+            logger.debug("initOrderSearch() - end");
+        }
+    }
+
+    /**
+     * 
+     */
+    private void initTableOrder() {
+        if (logger.isDebugEnabled()) {
+            logger.debug("initTableOrder() - start");
+        }
+
+        tableOrder = new Table(groupOrderOverview, SWT.SINGLE
+                | SWT.FULL_SELECTION | SWT.V_SCROLL | SWT.BORDER);
+        tableOrder.setHeaderVisible(true);
+        tableOrder.setLinesVisible(true);
+        GridData table2LData = new GridData();
+
+        tableOrder.addSelectionListener(new SelectionAdapter() {
+            public void widgetSelected(SelectionEvent evt) {
+
+                int index = tableOrder.getSelectionIndex();
+
+                //es wurde ein Element aus Tabelle ausgewaehlt jetzt muss die
+                //Detailansicht aktualisiert werden
+                refreshOrderItemTable(tableOrder.getItem(index).getText(0));
+
+            }
+        });
+        table2LData.verticalAlignment = GridData.FILL;
+        table2LData.horizontalAlignment = GridData.FILL;
+        table2LData.horizontalSpan = 8;
+        table2LData.grabExcessHorizontalSpace = true;
+        table2LData.grabExcessVerticalSpace = true;
+        tableOrder.setLayoutData(table2LData);
+
+        //einzelne Spalten hinzuf?gen
+        tableColumn = new TableColumn(tableOrder, SWT.CENTER);
+        tableColumn.setText(l.getString("Order.groupoverview.columnid"));
+        tableColumn.setWidth(50);
+
+        tableColumn = new TableColumn(tableOrder, SWT.CENTER);
+        tableColumn.setText(l
+                .getString("Order.groupoverview.columnusername"));
+        tableColumn.setWidth(50);
+
+        tableColumn = new TableColumn(tableOrder, SWT.CENTER);
+        tableColumn.setText(l
+                .getString("Order.groupoverview.columnlastname"));
+        tableColumn.setWidth(70);
+        
+        tableColumn = new TableColumn(tableOrder, SWT.CENTER);
+        tableColumn.setText(l
+                .getString("Order.groupoverview.columnfirstname"));
+        tableColumn.setWidth(70);
+
+        if (logger.isDebugEnabled()) {
+            logger.debug("initTableOrder() - end");
+        }
+    }
+
+    /* (non-Javadoc)
+     * @see de.hsharz.provirent.management.gui.AbstractComposite#changeLanguage(java.util.Locale)
+     */
+    public void changeLanguage(Locale l) {
+        // TODO Auto-generated method stub
+
+    }
+
+    /* (non-Javadoc)
+     * @see de.hsharz.provirent.management.gui.AbstractComposite#initLanguage(java.util.Locale)
+     */
+    public void initLanguage(Locale locale) {
+        l = PropertyResourceBundle.getBundle(
+                "de.hsharz.provirent.management.gui.language.Order", locale);
+    }
+
+    public static void main(String[] args) {
+    }
+}



From sforstner at sheep.berlios.de  Tue Dec  7 17:56:08 2004
From: sforstner at sheep.berlios.de (Stefan at BerliOS)
Date: Tue, 7 Dec 2004 17:56:08 +0100
Subject: [Provirent-svn-commit] r217 - project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language
Message-ID: <200412071656.iB7Gu8de002591@sheep.berlios.de>

Author: sforstner
Date: 2004-12-07 17:56:07 +0100 (Tue, 07 Dec 2004)
New Revision: 217

Added:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/order.properties
Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/main.properties
Log:


Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/main.properties
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/main.properties	2004-12-07 16:55:16 UTC (rev 216)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/main.properties	2004-12-07 16:56:07 UTC (rev 217)
@@ -17,6 +17,8 @@
 
 menu.view.customer=Kunden
 
+menu.view.order=Bestellungen
+
 menu.view.payment=Preisklassen
 
 menu.view.genre=Genre
@@ -40,6 +42,7 @@
 tab.actor.title=Darsteller
 tab.customer.title=Kunden
 tab.director.title=Regie
+tab.Order.title=Bestellungen
 tab.genre.title=Genre
 tab.language.title=Sprache/Untertitel
 tab.Status.title=Status/Zustand

Added: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/order.properties
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/order.properties	2004-12-07 16:55:16 UTC (rev 216)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/order.properties	2004-12-07 16:56:07 UTC (rev 217)
@@ -0,0 +1,79 @@
+
+error=Fehler
+button.new=Neu
+button.edit=Bearbeiten
+button.delete=L?schen
+button.save=Speichern
+button.cancel=Abbruch
+
+Order.group.label=Bestellungen
+Order.groupoverview.label=?berblick
+Order.groupoverview.columnid=Id
+Order.groupoverview.columnusername=Benutzername
+Order.groupoverview.columnlastname=Nachname
+Order.groupoverview.columnfirstname=Vorname
+
+OrderItems.groupoverview.columnid=Id
+OrderItems.groupoverview.columndvdid=DVD Id
+OrderItems.groupoverview.columnmoviename=Filmname
+OrderItems.groupoverview.columnordertime=Bestelldatum
+OrderItems.groupoverview.columnsendertime=Versendet am
+OrderItems.groupoverview.columnreceivingtime=Erhalten am
+OrderItems.groupoverview.columnpayment=Bezahlung
+OrderItems.groupoverview.columnduration=Verleihdauer
+OrderItems.groupoverview.columnconditionsend=Zustand vorher
+OrderItems.groupoverview.columnconditionreceiving=Zustand nachher
+
+Order.groupoverview.searchlabel=Suche nach
+Order.groupdetail.label=Detail
+Order.groupdetail.idlabel=Benutzer ID
+Order.groupdetail.usernamelabel=Benutzername
+Order.groupdetail.lastnamelabel=Nachname
+Order.groupdetail.firstnamelabel=Vorname
+Order.groupdetail.middlenamelabel=2.Vorname(n)
+Order.groupdetail.emaillabel=Emailadresse
+Order.groupdetail.birthdaylabel=Geburtsdatum
+Order.groupdetail.questionlabel=Geheime Frage
+Order.groupdetail.answerlabel=Geheime Antwort
+Order.groupdetail.salutationlabel=Anrede
+Order.groupdetail.titlelabel=Titel
+Order.groupdetail.streetlabel=Strasse u. Nummer
+Order.groupdetail.citylabel=Stadt
+Order.groupdetail.zipcodelabel=Zip Code
+Order.groupdetail.countrylabel=Land
+Order.groupdetail.passwordlabel=Passwort
+Order.groupdetail.regdatelabel=Registrierdatum
+Order.groupdetail.registrationdatebuttonchange=?ndern
+Order.groupdetail.registrationdatebuttonfinish=Fertig
+Order.groupdetail.registrationdate.dialog.title=Registrierungstag w?hlen
+Order.groupdetail.birthdaybuttonchange=?ndern
+Order.groupdetail.birthdaybuttonfinish=Fertig
+Order.groupdetail.birthday.dialog.title=Geburtstag w?hlen
+
+Order.groupdetail.savebutton.warn.noitems.title=Datensatz speichern
+Order.groupdetail.savebutton.warn.noitems.msg=Der Datensatz kann nicht gespeichert werden, da folgende Werte fehlen:\n
+Order.groupdetail.savebutton.warn.nousername=Username
+Order.groupdetail.savebutton.warn.nolastname=Nachname
+Order.groupdetail.savebutton.warn.nofirstname=Vorname
+Order.groupdetail.savebutton.warn.nostreet=Strasse
+Order.groupdetail.savebutton.warn.nonumber=Hausnummer
+Order.groupdetail.savebutton.warn.nozipcode=PLZ
+Order.groupdetail.savebutton.warn.nocity=Stadt
+Order.groupdetail.savebutton.warn.nocountry=Land
+Order.groupdetail.savebutton.warn.noemail=Emailadresse
+Order.groupdetail.savebutton.warn.noquestion=Geheimefrage
+Order.groupdetail.savebutton.warn.noanswer=Geheimeantwort
+Order.groupdetail.savebutton.warn.noregistrationdate=Registrierungsdatum
+Order.groupdetail.savebutton.warn.nobirthday=Geburtstag
+
+Order.groupdetail.savebutton.newok=Speichern des neuen Benutzers erfolgreich.
+Order.groupdetail.savebutton.editok=?ndern des Benutzers erfolgreich.
+
+Order.groupdetail.savebutton.errorsave=Datenbankfehler beim Speichern.
+Order.groupdetail.savebutton.errordb=Datenbankfehler beim Herstellen der Verbindung.(save).
+
+Order.groupdetail.deletebutton.question.header=Wirklich l?schen?
+Order.groupdetail.deletebutton.question.text=Wollen Sie den Datensatz {0} wirklich l?schen?
+Order.groupdetail.deletebutton.newok=Datensatz wurde erfolgreich gel?scht.
+Order.groupdetail.deletebutton.errorsave=Datenbankfehler beim L?schen.
+Order.groupdetail.deletebutton.errordb=Datenbankfehler beim Herstellen der Verbindung(del).



From pschneider at sheep.berlios.de  Tue Dec  7 19:04:44 2004
From: pschneider at sheep.berlios.de (Philipp Schneider at BerliOS)
Date: Tue, 7 Dec 2004 19:04:44 +0100
Subject: [Provirent-svn-commit] r218 - in project_src/provirent_hibernate/src: de/hsharz/provirent/management/gui test/provirent/hibernate
Message-ID: <200412071804.iB7I4iNo022590@sheep.berlios.de>

Author: pschneider
Date: 2004-12-07 19:04:42 +0100 (Tue, 07 Dec 2004)
New Revision: 218

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeImage.java
   project_src/provirent_hibernate/src/test/provirent/hibernate/HibernateUtil.java
   project_src/provirent_hibernate/src/test/provirent/hibernate/TestMovie.java
Log:


Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeImage.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeImage.java	2004-12-07 16:56:07 UTC (rev 217)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeImage.java	2004-12-07 18:04:42 UTC (rev 218)
@@ -1285,20 +1285,36 @@
 
         final int width = imgdata.width;
         final int height = imgdata.height;
-        float scalefactor = 1;
-
-        if (width > maxwidth) {
-            scalefactor = (float) maxwidth / width;
-        }
-        if (height > maxheight) {
-            if (((float) maxheight / height) < scalefactor) {
-                scalefactor = ((float) maxheight / height);
+        
+        int new_width = imgdata.width;
+        int new_height = imgdata.height;
+        
+        
+        float ratio = (float)( (float)width / (float)height);
+        
+        if (width > height){
+            //breiter als h?her
+            logger.debug("breiter Ratio: "+ratio);
+            if(width > maxwidth) {
+               new_width = maxwidth;
+               new_height =(int)( maxwidth /( ratio ));
             }
-
+        } else {
+            //h?her als breiter
+            logger.debug("h?her Ratio: "+ratio);
+            if (height > maxheight){
+                new_height = maxheight;
+                new_width = (int)( (double)new_height * ratio);
+                    
+            }
         }
+        
 
+        
+        logger.debug("w:"+new_width+" h:"+new_height+" r:"+ratio);
+
         return new Image(getDisplay(), imgdata.scaledTo(
-                (int) (width * scalefactor), (int) (height * scalefactor)));
+                (int) (new_width), (int) (new_height)));
 
     }
 }
\ No newline at end of file

Modified: project_src/provirent_hibernate/src/test/provirent/hibernate/HibernateUtil.java
===================================================================
--- project_src/provirent_hibernate/src/test/provirent/hibernate/HibernateUtil.java	2004-12-07 16:56:07 UTC (rev 217)
+++ project_src/provirent_hibernate/src/test/provirent/hibernate/HibernateUtil.java	2004-12-07 18:04:42 UTC (rev 218)
@@ -32,11 +32,14 @@
  */
 package test.provirent.hibernate;
 
+
 import net.sf.hibernate.HibernateException;
 import net.sf.hibernate.Session;
 import net.sf.hibernate.SessionFactory;
 import net.sf.hibernate.cfg.Configuration;
 
+import net.sf.hibernate.expression.Expression;
+
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.apache.log4j.Logger;
@@ -132,6 +135,44 @@
     }
 
     
+	public static Image getImagename(final String filter, Session s){
+        if (logger.isDebugEnabled()) {
+            logger
+                    .debug("getImagename(String filter = " + filter
+                            + ") - start");
+        }
+	    
+	    //init the returnlist
+	    Image returnimg = null;
+
+	    
+	    try {
+
+	            
+
+	        returnimg = (Image) s.createCriteria(Image.class).add(
+                    Expression.eq("imageFileName", filter)).list().get(0);
+            
+            if (logger.isDebugEnabled()) {
+                logger.debug("getImagename(String) - end");
+            }
+	
+
+	
+	
+	    } catch (Exception e) {
+            logger.error("getImagename(String)", e);
+
+	        logger.error(
+	                "getImagename() - Error while trying to do Transaction",
+	                e);
+	        returnimg = null;
+	    }
+	    return returnimg;
+	    	
+	}
+	
+	
     
     
 }
\ No newline at end of file

Modified: project_src/provirent_hibernate/src/test/provirent/hibernate/TestMovie.java
===================================================================
--- project_src/provirent_hibernate/src/test/provirent/hibernate/TestMovie.java	2004-12-07 16:56:07 UTC (rev 217)
+++ project_src/provirent_hibernate/src/test/provirent/hibernate/TestMovie.java	2004-12-07 18:04:42 UTC (rev 218)
@@ -55,7 +55,7 @@
 
 /**
  * @author Philipp Schneider
- *
+ *  
  */
 public class TestMovie extends TestCase {
     /**
@@ -77,180 +77,120 @@
         super.tearDown();
     }
 
-    
-
     /**
-     * Creates a new Movie objects and saves it.
-     * All data will be create new.
+     * Creates a new Movie objects and saves it. All data will be create new.
+     * 
      * @throws Exception
      */
-    public void testCreateCompleteNewMovie() throws Exception{
+    public void testCreateCompleteNewMovie() throws Exception {
         if (logger.isDebugEnabled()) {
             logger.debug("testCreateCompleteNewMovie() - start");
         }
-/*
-        //get new Session and begin Transaction
-        Session s = HibernateUtil.currentSession();
-        Transaction tx = null;
-        try {
-            tx = s.beginTransaction();
+        /*
+         * //get new Session and begin Transaction Session s =
+         * HibernateUtil.currentSession(); Transaction tx = null; try { tx =
+         * s.beginTransaction();
+         * 
+         * try { //is DB open and connected assertTrue("Connected to Db? ",
+         * s.isConnected()); assertTrue("Db Open? ", s.isOpen());
+         * 
+         * List movies = new ArrayList();
+         * 
+         * //create new movie objects Movie movie = new Movie();
+         * movie.setDescription("A grieving mother, Telly Parada, " + "is
+         * struggling to cope with the loss of her " +"9-year-old son. She is
+         * stunned..."); movie.setRuntime(96); movie.setTitle("The Forgotten");
+         * movie.setReleaseDate(Calendar.getInstance());
+         * 
+         * movie.setImages(new ArrayList()); //Image mainImage = new Image();
+         * 
+         * movie.setMainImage(new Image());
+         * 
+         * 
+         * List objects = new ArrayList(); objects.add(new
+         * Actor("Julianne","Moore")); objects.add(new Actor("Christopher",
+         * "Kovaleski")); objects.add(new Actor("Matthew", "Pleszewicz")); for
+         * (Iterator iter = objects.iterator(); iter.hasNext();) { s.save(
+         * iter.next() ); } movie.setActors(objects);
+         * 
+         * objects = new ArrayList(); objects.add(new
+         * Director("Joseph","Ruben")); for (Iterator iter = objects.iterator();
+         * iter.hasNext();) { s.save( iter.next() ); }
+         * movie.setDirector(objects);
+         * 
+         * objects = new ArrayList(); objects.add(new Genre("Thriller",""));
+         * objects.add(new Genre("Drama","")); objects.add(new
+         * Genre("Sci-Fi","")); objects.add(new Genre("Mystery","")); for
+         * (Iterator iter = objects.iterator(); iter.hasNext();) { s.save(
+         * iter.next() ); } movie.setGenres(objects);
+         * 
+         * objects = new ArrayList(); objects.add(new Language("Deutsch","de"));
+         * objects.add(new Language("Englisch","en")); for (Iterator iter =
+         * objects.iterator(); iter.hasNext();) { s.save( iter.next() ); }
+         * movie.setLanguages(objects);
+         * 
+         * objects = new ArrayList(); objects.add( new AudioFormat("DTS Surround
+         * Sound","")); objects.add( new AudioFormat("Surround Sound",""));
+         * objects.add( new AudioFormat("Dolby","")); for (Iterator iter =
+         * objects.iterator(); iter.hasNext();) { s.save( iter.next() ); }
+         * movie.setAudioFormats(new ArrayList());
+         * 
+         * objects = new ArrayList(); objects.add(new Subtitle("Deutsch","de"));
+         * objects.add(new Subtitle("Englisch","en")); for (Iterator iter =
+         * objects.iterator(); iter.hasNext();) { s.save( iter.next() ); }
+         * movie.setSubtitles(objects);
+         * 
+         * objects = new ArrayList(); objects.add( new VideoFormat("9:13",""));
+         * objects.add( new VideoFormat("16:10", "")); for (Iterator iter =
+         * objects.iterator(); iter.hasNext();) { s.save( iter.next() ); }
+         * movie.setVideoFormats(new ArrayList());
+         * 
+         * //add movie to movie List movies.add(movie);
+         * 
+         * 
+         * List ids = new ArrayList();
+         * 
+         * //save objects for (Iterator iter = movies.iterator();
+         * iter.hasNext();) { Movie moviee = (Movie) iter.next();
+         * ids.add((Integer) s.save(moviee));
+         *  } s.flush();
+         * 
+         * for (int i =0;i < ids.size(); i++) {
+         * 
+         * int id = ((Integer)ids.get(i)).intValue();
+         * 
+         * //get Condition from Hibernate Movie dbc = (Movie) s.get(Movie.class,
+         * new Integer(id)); assertNotNull("Can't get Movie" + id + " from DB",
+         * dbc); if (dbc == null) { if (logger.isDebugEnabled()) {
+         * logger.debug("testCreateCompleteNewMovie() Kein object mit id " + id +
+         * "gefunden."); } return; } Movie mym = (Movie)movies.get(i); //are
+         * both equal? assertEquals( "Select: Customer aus DB nicht gleich
+         * meiner. DB: " + dbc + " My:" + mym, mym, dbc);
+         * 
+         * }//for
+         * 
+         * tx.commit();
+         *  } catch (Exception e) { if (tx != null) { logger .error(
+         * "testCreateCompleteNewMovie() - Something went wrong here; discard
+         * all partial changes", e);
+         *  // Something went wrong; discard all partial changes tx.rollback(); } }
+         *  } catch (Exception e) { logger.error( "testCreateCompleteNewMovie() -
+         * Error while trying to beginTransaction", e); throw e; } finally { //
+         * No matter what, close the session HibernateUtil.closeSession(); }
+         *  
+         */
 
-            try {
-                //is DB open and connected
-                assertTrue("Connected to Db? ", s.isConnected());
-                assertTrue("Db Open? ", s.isOpen());
-
-                List movies = new ArrayList();
-                
-                //create new movie objects
-                Movie movie = new Movie();
-                movie.setDescription("A grieving mother, Telly Parada, " +
-                        "is struggling to cope with the loss of her "
-                        +"9-year-old son. She is stunned...");
-                movie.setRuntime(96);
-                movie.setTitle("The Forgotten");
-                movie.setReleaseDate(Calendar.getInstance());
-
-                movie.setImages(new ArrayList());
-                //Image mainImage = new Image();
-
-                movie.setMainImage(new Image());                
-                
-                
-                List objects = new ArrayList();
-                objects.add(new Actor("Julianne","Moore"));
-                objects.add(new Actor("Christopher", "Kovaleski"));
-                objects.add(new Actor("Matthew", "Pleszewicz"));
-                for (Iterator iter = objects.iterator(); iter.hasNext();) {
-                    s.save( iter.next() );
-                }
-                movie.setActors(objects);
-
-                objects = new ArrayList();
-                objects.add(new Director("Joseph","Ruben"));
-                for (Iterator iter = objects.iterator(); iter.hasNext();) {
-                    s.save( iter.next() );
-                }
-                movie.setDirector(objects);
-
-                objects = new ArrayList();
-                objects.add(new Genre("Thriller",""));
-                objects.add(new Genre("Drama",""));
-                objects.add(new Genre("Sci-Fi",""));
-                objects.add(new Genre("Mystery",""));
-                for (Iterator iter = objects.iterator(); iter.hasNext();) {
-                    s.save( iter.next() );
-                }
-                movie.setGenres(objects);
-              
-                objects = new ArrayList();
-                objects.add(new Language("Deutsch","de"));
-                objects.add(new Language("Englisch","en"));
-                for (Iterator iter = objects.iterator(); iter.hasNext();) {
-                    s.save( iter.next() );
-                }
-                movie.setLanguages(objects);
-
-                objects = new ArrayList();
-                objects.add( new AudioFormat("DTS Surround Sound",""));
-                objects.add( new AudioFormat("Surround Sound",""));
-                objects.add( new AudioFormat("Dolby",""));
-                for (Iterator iter = objects.iterator(); iter.hasNext();) {
-                    s.save( iter.next() );
-                }
-                movie.setAudioFormats(new ArrayList());
-                
-                objects = new ArrayList();
-                objects.add(new Subtitle("Deutsch","de"));
-                objects.add(new Subtitle("Englisch","en"));
-                for (Iterator iter = objects.iterator(); iter.hasNext();) {
-                    s.save( iter.next() );
-                }
-                movie.setSubtitles(objects);
-
-                objects = new ArrayList();
-                objects.add( new VideoFormat("9:13",""));
-                objects.add( new VideoFormat("16:10", ""));
-                for (Iterator iter = objects.iterator(); iter.hasNext();) {
-                    s.save( iter.next() );
-                }
-                movie.setVideoFormats(new ArrayList());
-                
-                //add movie to movie List
-                movies.add(movie);
-
-                
-                List ids = new ArrayList();
-
-                //save objects
-                for (Iterator iter = movies.iterator(); iter.hasNext();) {
-                    Movie moviee = (Movie) iter.next();
-                    ids.add((Integer) s.save(moviee));
-
-                }
-                s.flush();
-
-                for (int i =0;i < ids.size(); i++) {
-                    
-                    int id = ((Integer)ids.get(i)).intValue();
-                    
-                    //get Condition from Hibernate
-                    Movie dbc = (Movie) s.get(Movie.class, new Integer(id));
-                    assertNotNull("Can't get Movie" + id + " from DB", dbc);
-                    if (dbc == null) {
-                        if (logger.isDebugEnabled()) {
-                            logger.debug("testCreateCompleteNewMovie() Kein object mit id "
-                                    + id + "gefunden.");
-                        }
-                        return;
-                    }
-                    Movie mym = (Movie)movies.get(i);
-                    //are both equal?
-                    assertEquals(
-                            "Select: Customer aus DB nicht gleich meiner. DB: "
-                                    + dbc + " My:" + mym, mym, dbc); 
-
-                }//for
-                
-                tx.commit();
-                
-            } catch (Exception e) {
-                if (tx != null) {
-                    logger
-                            .error(
-                                    "testCreateCompleteNewMovie() - Something went wrong here; discard all partial changes",
-                                    e);
-
-                    // Something went wrong; discard all partial changes
-                    tx.rollback();
-                }
-            }
-
-        } catch (Exception e) {
-            logger.error(
-                    "testCreateCompleteNewMovie() - Error while trying to beginTransaction",
-                    e);
-            throw e;
-        } finally {
-            // No matter what, close the session
-            HibernateUtil.closeSession();
-        }
-        
-        */
-        
         if (logger.isDebugEnabled()) {
             logger.debug("testCreateCompleteNewMovie() - end");
         }
     }
 
-    
     /**
-     * Creates a new Movie Objects,
-     * tries to get all data like Actor from db
+     * Creates a new Movie Objects, tries to get all data like Actor from db
      * 
      * @throws Exception
      */
-    public void testCreateDBMovie() throws Exception{
+    public void testCreateDBMovie() throws Exception {
         if (logger.isDebugEnabled()) {
             logger.debug("testCreateDBMovie() - start");
         }
@@ -258,7 +198,7 @@
         //get new Session and begin Transaction
         Session s = HibernateUtil.currentSession();
         Transaction tx = null;
-        
+
         RandomRange random;
         List randomNum = new ArrayList();
         try {
@@ -269,186 +209,211 @@
                 assertTrue("Connected to Db? ", s.isConnected());
                 assertTrue("Db Open? ", s.isOpen());
 
-                
                 logger.debug("Erstelle Movie Objekt");
-                
+
                 List data = new ArrayList();
-                data.add(new String[]{"The Forgotten","96","A grieving mother, Telly Parada, is struggling to cope with the loss of her 9-year-old son. She is stunned...","Forgotten_main.jpg","Forgotten_1.gif","Forgotten_2.gif" });
-                data.add(new String[]{"Ocean's Twelve","128","With Tess (Roberts) and Rusty (Pitt) at his side, Daniel Ocean (Clooney) must find one more conspirator before he can pull off heists in three different European cities -- Paris, Rome, and Amsterdam.","Twelve_main.gif","Twelve_1.gif","Twelve_2.gif","Twelve_3.gif"});
-                data.add(new String[]{"Blade: Trinity","156","Framed by the Vampire Nation for a series of brutal murders, the Daywalker (Snipes) finds allies in a group of vampire hunters, the Nightstalkers, and together they wage a battle that leads all the way to Dracula himself.","Blade_main.gif","Blade_1.gif","Blade_2.gif","Blade_3.gif"});
-                data.add(new String[]{"National Treasure","126","Benjamin Franklin Gates (Cage) descends from a family of treasure-seekers who've all hunted for the same thing: a war chest hidden by the Founding Fathers prior to the Revolutionary War. Ben's close to discovering its whereabouts, as is his competition, though the FBI is also hip to the hunt.","Treasure_main.gif","Treasure_1.gif","Treasure_2.gif","Treasure_3.gif","Treasure_4.gif"});
-                data.add(new String[]{"Christmas with the Kranks","92","Upon receiving a last-minute call from their daughter, Luther and Nora Krank (Allen and Curtis) ditch their vacation plans and scramble to get their home in shape to celebrate Christmas.","Kranks_main.gif","Kranks_1.gif","Kranks_2.gif"});
-                data.add(new String[]{"The Polar Express","215","A boy's belief in Santa Claus is restored on Christmas Eve when a steam train pulls up in front of his house and whisks him away to the North Pole.","Polar_main.gif","Polar_1.gif","Polar_2.gif","Polar_3.gif"});
-                data.add(new String[]{"The Incredibles","186","Years after their last assignment, a husband and wife superhero team, who currently maintain a ho-hum suburban existence, respond a cryptic communiqu? from a remote island base.","Incredibles_main.gif","Incredibles_1.gif","Incredibles_2.gif"});
-                data.add(new String[]{"Closer","145","Two couples are drawn together by undeniable attraction and a series of chance encounters.","closer_main.gif","closer_1.gif","closer_2.gif","closer_3.gif"});
-                
-                for(int k =0; k< data.size(); k++){
-                    
-                    String[] sdata = (String[])data.get(k);
-                //create new movie objects
-                Movie movie = new Movie();
-                //set simple properties
-                movie.setTitle(sdata[0]);
-                movie.setDescription(sdata[2]);
-                movie.setRuntime(Integer.parseInt(sdata[1]));
-                
-                Calendar cal = Calendar.getInstance();
-                cal.set(Calendar.HOUR,0);
-                cal.set(Calendar.MINUTE,0);
-                cal.set(Calendar.SECOND,0);
-                cal.set(Calendar.MILLISECOND,0);
-                movie.setReleaseDate(cal);
-                
-                
-                //try to get Actors from db
-                List  dbprops =  s.find("from Actor as actor");
-                assertNotNull("testCreateDBMovie(): Can't get Actors from DB. Null", dbprops);
-                assertTrue("testCreateDBMovie(): Can not find Actors in DB", dbprops.size() >0);
-                
-                int anzahl =2;
-                List movieprops = new ArrayList();
-                random = new RandomRange(0, (dbprops.size()-1) );
-                randomNum = random.getNumbers(anzahl);
-                for (int i = 0; i < anzahl; i++) {
-                    Actor actor = (Actor)dbprops.get( ((Integer)randomNum.get(i)).intValue() );
-                    movieprops.add(actor);
-                }
-                movie.setActors(movieprops);
-                
+                data
+                        .add(new String[] {
+                                "The Forgotten",
+                                "96",
+                                "A grieving mother, Telly Parada, is struggling to cope with the loss of her 9-year-old son. She is stunned...",
+                                "Forgotten_main.jpg", "Forgotten_1.jpg",
+                                "Forgotten_2.jpg" });
+                data
+                        .add(new String[] {
+                                "Ocean's Twelve",
+                                "128",
+                                "With Tess (Roberts) and Rusty (Pitt) at his side, Daniel Ocean (Clooney) must find one more conspirator before he can pull off heists in three different European cities -- Paris, Rome, and Amsterdam.",
+                                "Twelve_main.jpg", "Twelve_1.jpg",
+                                "Twelve_2.jpg", "Twelve_3.jpg" });
+                data
+                        .add(new String[] {
+                                "Blade: Trinity",
+                                "156",
+                                "Framed by the Vampire Nation for a series of brutal murders, the Daywalker (Snipes) finds allies in a group of vampire hunters, the Nightstalkers, and together they wage a battle that leads all the way to Dracula himself.",
+                                "Blade_main.jpg", "Blade_1.jpg", "Blade_2.jpg",
+                                "Blade_3.jpg" });
+                data
+                        .add(new String[] {
+                                "National Treasure",
+                                "126",
+                                "Benjamin Franklin Gates (Cage) descends from a family of treasure-seekers who've all hunted for the same thing: a war chest hidden by the Founding Fathers prior to the Revolutionary War. Ben's close to discovering its whereabouts, as is his competition, though the FBI is also hip to the hunt.",
+                                "Treasure_main.jpg", "Treasure_1.jpg",
+                                "Treasure_2.jpg", "Treasure_3.jpg",
+                                "Treasure_4.jpg" });
+                data
+                        .add(new String[] {
+                                "Christmas with the Kranks",
+                                "92",
+                                "Upon receiving a last-minute call from their daughter, Luther and Nora Krank (Allen and Curtis) ditch their vacation plans and scramble to get their home in shape to celebrate Christmas.",
+                                "Kranks_main.jpg", "Kranks_1.jpg",
+                                "Kranks_2.jpg" });
+                data
+                        .add(new String[] {
+                                "The Polar Express",
+                                "215",
+                                "A boy's belief in Santa Claus is restored on Christmas Eve when a steam train pulls up in front of his house and whisks him away to the North Pole.",
+                                "Polar_main.jpg", "Polar_1.jpg", "Polar_2.jpg",
+                                "Polar_3.jpg" });
+                data
+                        .add(new String[] {
+                                "The Incredibles",
+                                "186",
+                                "Years after their last assignment, a husband and wife superhero team, who currently maintain a ho-hum suburban existence, respond a cryptic communiqu? from a remote island base.",
+                                "Incredibles_main.jpg", "Incredibles_1.jpg",
+                                "Incredibles_2.jpg" });
+                data
+                        .add(new String[] {
+                                "Closer",
+                                "145",
+                                "Two couples are drawn together by undeniable attraction and a series of chance encounters.",
+                                "closer_main.jpg", "closer_1.jpg",
+                                "closer_2.jpg", "closer_3.jpg" });
 
-                List objects = new ArrayList();
+                for (int k = 0; k < data.size(); k++) {
 
-                //try to get Directors from db
-                dbprops =  s.find("from Director as director");
-                assertNotNull("testCreateDBMovie(): Can't get Directors from DB. Null", dbprops);
-                assertTrue("testCreateDBMovie(): Can not find Directors in DB", dbprops.size() >0);
-                
-                anzahl =1;
-                movieprops = new ArrayList();
-                random = new RandomRange(0,(dbprops.size()-1));
-                randomNum = random.getNumbers(anzahl);
+                    String[] sdata = (String[]) data.get(k);
+                    //create new movie objects
+                    Movie movie = new Movie();
+                    //set simple properties
+                    movie.setTitle(sdata[0]);
+                    movie.setDescription(sdata[2]);
+                    movie.setRuntime(Integer.parseInt(sdata[1]));
 
-                for (int i = 0; i < anzahl; i++) {
-                    Director prop = (Director)dbprops.get( ((Integer)randomNum.get(i)).intValue() );
-                    movieprops.add(prop);
-                }
-                movie.setDirector(movieprops);
+                    Calendar cal = Calendar.getInstance();
+                    cal.set(Calendar.HOUR, 0);
+                    cal.set(Calendar.MINUTE, 0);
+                    cal.set(Calendar.SECOND, 0);
+                    cal.set(Calendar.MILLISECOND, 0);
+                    movie.setReleaseDate(cal);
 
-                //try to get Genre from db
-                dbprops =  s.find("from Genre as genre");
-                assertNotNull("testCreateDBMovie(): Can't get Genre from DB. Null", dbprops);
-                assertTrue("testCreateDBMovie(): Can not find Genre in DB", dbprops.size() >0);
-                
-                logger.debug("Anzahl Genres: "+dbprops.size());
-                
-                anzahl =3;
-                movieprops = new ArrayList();
-                random = new RandomRange(0, (dbprops.size()-1) );
-                randomNum = random.getNumbers(anzahl);
+                    //try to get Actors from db
+                    List dbprops = s.find("from Actor as actor");
+                    assertNotNull(
+                            "testCreateDBMovie(): Can't get Actors from DB. Null",
+                            dbprops);
+                    assertTrue(
+                            "testCreateDBMovie(): Can not find Actors in DB",
+                            dbprops.size() > 0);
 
-                for (int i = 0; i < anzahl; i++) {
-                    Genre prop = (Genre)dbprops.get( ((Integer)randomNum.get(i)).intValue() );
-                    movieprops.add(prop);
-                }
-                movie.setGenres(movieprops);
-                
-                
-                
-                //set MainImage
-                
-                
-                //try to get Images from db
-                dbprops =  s.find("from Image as image");
-                assertNotNull("testCreateDBMovie(): Can't get Image from DB. Null", dbprops);
-                assertTrue("testCreateDBMovie(): Can not find Image in DB", dbprops.size() >0);
+                    int anzahl = 2;
+                    List movieprops = new ArrayList();
+                    random = new RandomRange(0, (dbprops.size() - 1));
+                    randomNum = random.getNumbers(anzahl);
+                    for (int i = 0; i < anzahl; i++) {
+                        Actor actor = (Actor) dbprops.get(((Integer) randomNum
+                                .get(i)).intValue());
+                        movieprops.add(actor);
+                    }
+                    movie.setActors(movieprops);
 
-                logger.debug("Anzahl Bilder: "+dbprops.size());
-                //set Mainimage
-                anzahl =1;
-                movieprops = new ArrayList();
-                random = new RandomRange(0, (dbprops.size()-1) );
-                randomNum = random.getNumbers(anzahl);
+                    List objects = new ArrayList();
 
-                for (int i = 0; i < anzahl; i++) {
-                    Image prop = (Image)dbprops.get( ((Integer)randomNum.get(i)).intValue() );
-                    movie.setMainImage(prop);
+                    //try to get Directors from db
+                    dbprops = s.find("from Director as director");
+                    assertNotNull(
+                            "testCreateDBMovie(): Can't get Directors from DB. Null",
+                            dbprops);
+                    assertTrue(
+                            "testCreateDBMovie(): Can not find Directors in DB",
+                            dbprops.size() > 0);
 
-                }
+                    anzahl = 1;
+                    movieprops = new ArrayList();
+                    random = new RandomRange(0, (dbprops.size() - 1));
+                    randomNum = random.getNumbers(anzahl);
 
-                //set images
-                anzahl =3;
-                movieprops = new ArrayList();
-                random = new RandomRange(0, (dbprops.size()-1) );
-                randomNum = random.getNumbers(anzahl);
+                    for (int i = 0; i < anzahl; i++) {
+                        Director prop = (Director) dbprops
+                                .get(((Integer) randomNum.get(i)).intValue());
+                        movieprops.add(prop);
+                    }
+                    movie.setDirector(movieprops);
 
-                for (int i = 0; i < anzahl; i++) {
-                    Image prop = (Image)dbprops.get( ((Integer)randomNum.get(i)).intValue() );
-                    movieprops.add(prop);
+                    //try to get Genre from db
+                    dbprops = s.find("from Genre as genre");
+                    assertNotNull(
+                            "testCreateDBMovie(): Can't get Genre from DB. Null",
+                            dbprops);
+                    assertTrue("testCreateDBMovie(): Can not find Genre in DB",
+                            dbprops.size() > 0);
 
-                }
-                movie.setImages(movieprops);
-                
+                    logger.debug("Anzahl Genres: " + dbprops.size());
 
-                
-               
-                logger.debug("Speichere Movie Objekt");
-                
-                
-                //save the new Movie
-                int id = ((Integer)s.save(movie)).intValue();
-                s.flush();
-                logger.debug("Gespeichert unter id: "+id+" movieid:"+movie.getMovieId());
+                    anzahl = 3;
+                    movieprops = new ArrayList();
+                    random = new RandomRange(0, (dbprops.size() - 1));
+                    randomNum = random.getNumbers(anzahl);
 
-                
-                   
+                    for (int i = 0; i < anzahl; i++) {
+                        Genre prop = (Genre) dbprops.get(((Integer) randomNum
+                                .get(i)).intValue());
+                        movieprops.add(prop);
+                    }
+                    movie.setGenres(movieprops);
 
+                    
+                    //set MainImage
+                    if( HibernateUtil.getImagename(sdata[3],s) != null){
+                        movie.setMainImage(HibernateUtil.getImagename(sdata[3],s));
+                    }
 
-                tx.commit();
+                    //set other Images
+                    movieprops = new ArrayList();
+                    for (int i = 4; i < sdata.length; i++) {
+                        
+                        if(HibernateUtil.getImagename(sdata[i],s) != null) {
+                            movieprops.add(HibernateUtil.getImagename(sdata[i],s));
+                        }
+         
+                    }
+                    movie.setImages(movieprops);
 
-                dbprops =  s.find("from Movie as Movie");
-                assertNotNull("testCreateDBMovie(): Can't get Movie from DB. Null", dbprops);
-                assertTrue("testCreateDBMovie(): Can not find Movie in DB", dbprops.size() >0);
-                
+                    
+                    logger.debug("Speichere Movie Objekt");
+
+
+                    s.save(movie);
+                    s.flush();
+                    logger.debug("ID: "+movie.getMovieId());
+                    tx.commit();
+
+
                 }
-                
-                for (int i = 0; i < dbprops.size(); i++) {
-                    Movie m = (Movie)dbprops.get(i);
-                    logger.debug(i+" Movie:"+m + " Actors: "+m.getActors()+" Director: "+m.getDirector()+" Images: "+m.getImages()+ " Genre: "+m.getGenres());
-                }
-                
-                
-           
-                
+
+
+
             } catch (Exception e) {
                 if (tx != null) {
                     logger
                             .error(
                                     "testCreateCompleteNewMovie() - Something went wrong here; discard all partial changes",
                                     e);
-                    
+
                     // Something went wrong; discard all partial changes
                     tx.rollback();
                 }
             }
 
         } catch (Exception e) {
-            logger.error(
-                    "testCreateCompleteNewMovie() - Error while trying to beginTransaction",
-                    e);
+            logger
+                    .error(
+                            "testCreateCompleteNewMovie() - Error while trying to beginTransaction",
+                            e);
             throw e;
         } finally {
             // No matter what, close the session
             HibernateUtil.closeSession();
         }
-        
-        
-        
+
         if (logger.isDebugEnabled()) {
             logger.debug("testCreateCompleteNewMovie() - end");
         }
     }
 
     
+
+    
     /**
      * Constructor for TestMovie.
      * @param arg0
@@ -457,8 +422,4 @@
         super(arg0);
     }
 
-    
-    
-    
-    
-}
+}
\ No newline at end of file



From pschneider at sheep.berlios.de  Tue Dec  7 19:07:43 2004
From: pschneider at sheep.berlios.de (Philipp Schneider at BerliOS)
Date: Tue, 7 Dec 2004 19:07:43 +0100
Subject: [Provirent-svn-commit] r219 - project_src/provirent_hibernate/src/test/provirent/hibernate
Message-ID: <200412071807.iB7I7hsQ022771@sheep.berlios.de>

Author: pschneider
Date: 2004-12-07 19:07:42 +0100 (Tue, 07 Dec 2004)
New Revision: 219

Modified:
   project_src/provirent_hibernate/src/test/provirent/hibernate/TestMovie.java
Log:


Modified: project_src/provirent_hibernate/src/test/provirent/hibernate/TestMovie.java
===================================================================
--- project_src/provirent_hibernate/src/test/provirent/hibernate/TestMovie.java	2004-12-07 18:04:42 UTC (rev 218)
+++ project_src/provirent_hibernate/src/test/provirent/hibernate/TestMovie.java	2004-12-07 18:07:42 UTC (rev 219)
@@ -372,7 +372,7 @@
                     
                     logger.debug("Speichere Movie Objekt");
 
-
+                    if (k == 3) continue;
                     s.save(movie);
                     s.flush();
                     logger.debug("ID: "+movie.getMovieId());



From rgriesch at sheep.berlios.de  Wed Dec  8 00:21:26 2004
From: rgriesch at sheep.berlios.de (Remo Griesch at BerliOS)
Date: Wed, 8 Dec 2004 00:21:26 +0100
Subject: [Provirent-svn-commit] r220 - in project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui: . language
Message-ID: <200412072321.iB7NLQx7004590@sheep.berlios.de>

Author: rgriesch
Date: 2004-12-08 00:21:25 +0100 (Wed, 08 Dec 2004)
New Revision: 220

Added:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeDVD.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/dvds.properties
Log:


Added: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeDVD.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeDVD.java	2004-12-07 18:07:42 UTC (rev 219)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeDVD.java	2004-12-07 23:21:25 UTC (rev 220)
@@ -0,0 +1,332 @@
+package de.hsharz.provirent.management.gui;
+
+import java.util.Locale;
+import java.util.PropertyResourceBundle;
+import java.util.ResourceBundle;
+
+import org.apache.log4j.Logger;
+import org.eclipse.swt.layout.FillLayout;
+import org.eclipse.swt.layout.GridData;
+import org.eclipse.swt.layout.GridLayout;
+import org.eclipse.swt.widgets.Composite;
+import org.eclipse.swt.widgets.Display;
+import org.eclipse.swt.widgets.Event;
+import org.eclipse.swt.widgets.Group;
+import org.eclipse.swt.widgets.Label;
+import org.eclipse.swt.widgets.Listener;
+import org.eclipse.swt.widgets.Shell;
+import org.eclipse.swt.widgets.Table;
+import org.eclipse.swt.widgets.TableColumn;
+import org.eclipse.swt.widgets.Text;
+import org.eclipse.swt.custom.SashForm;
+import org.eclipse.swt.events.FocusAdapter;
+import org.eclipse.swt.events.FocusEvent;
+import org.eclipse.swt.events.SelectionAdapter;
+import org.eclipse.swt.events.SelectionEvent;
+import org.eclipse.swt.graphics.Point;
+import org.eclipse.swt.graphics.Rectangle;
+import org.eclipse.swt.SWT;
+
+import com.cloudgarden.resource.SWTResourceManager;
+
+
+/**
+* This code was generated using CloudGarden's Jigloo
+* SWT/Swing GUI Builder, which is free for non-commercial
+* use. If Jigloo is being used commercially (ie, by a corporation,
+* company or business for any purpose whatever) then you
+* should purchase a license for each developer using Jigloo.
+* Please visit www.cloudgarden.com for details.
+* Use of Jigloo implies acceptance of these licensing terms.
+* *************************************
+* A COMMERCIAL LICENSE HAS NOT BEEN PURCHASED
+* for this machine, so Jigloo or this code cannot be used legally
+* for any corporate or commercial purpose.
+* *************************************
+*/
+public class CompositeDVD extends AbstractComposite {
+
+    {
+        //Register as a resource user - SWTResourceManager will
+        //handle the obtaining and disposing of resources
+        SWTResourceManager.registerResourceUser(this);
+    }
+    
+    private static final Logger logger = Logger
+    .getLogger(CompositeDVD.class);
+    
+    private Group groupDVD;
+    private Group groupDVDOverview;
+    
+    private Table tableDVDOverview;
+    
+    private TableColumn tableDVDOverview_ColumnID;
+
+    private TableColumn tableDVDOverview_ColumnTitle;
+
+    private TableColumn tableDVDOverview_ColumnDate;
+    
+    private Text textDVDSearch;
+    
+    private Label labelDVDSearch;
+    
+    private Composite parent;
+    
+    private SashForm sashForm1;
+    
+    private int mode_dvd;
+    
+    private Locale locale;
+    
+    private StatusLineStyledText statusLine;
+    
+    private ResourceBundle l;
+    
+    /*
+     * ?ndert die Sprache aller Elemente
+     * 
+     * @see de.hsharz.provirent.managment.gui.AbstractComposite#changeLanguage(java.util.Locale)
+     */
+    public void changeLanguage(Locale locale) {
+
+    }
+
+    /* 
+     * Init die Sprache (properties Datei)
+     * @see de.hsharz.provirent.managment.gui.AbstractComposite#initLanguage(java.util.Locale)
+     */
+    public void initLanguage(Locale locale) {
+
+        l = PropertyResourceBundle.getBundle(
+                "de.hsharz.provirent.management.gui.language.dvds", locale);
+
+    }
+    
+    
+    
+    /**
+     * Auto-generated main method to display this
+     * de.hsharz.provirent.management.gui.AbstractComposite inside a new Shell.
+     */
+    public static void main(String[] args) {
+        showGUI();
+    }
+
+    /**
+     * Auto-generated method to display this
+     * de.hsharz.provirent.management.gui.AbstractComposite inside a new Shell.
+     */
+    /**
+     * Auto-generated method to display this org.eclipse.swt.widgets.Composite
+     * inside a new Shell.
+     */
+    public static void showGUI() {
+        Display display = Display.getDefault();
+        Shell shell = new Shell(display);
+
+        shell.open();
+        while (!shell.isDisposed()) {
+            if (!display.readAndDispatch())
+                display.sleep();
+        }
+    }
+
+    public CompositeDVD(Composite p, int style, StatusLineStyledText status,
+            Locale l) {
+        super(p, style, status, l);
+        parent = p;
+        //Statusline wird gestzt
+        statusLine = status;
+
+        locale = l;
+        //sprache wird init
+        initLanguage(locale);
+
+        initGUI();
+    }
+
+    private void initGUI() {
+        if (logger.isDebugEnabled()) {
+            logger.debug("initGUI() - start");
+        }
+
+        this.setLayout(new GridLayout());
+        this.setSize(830, 650);
+        {
+            groupDVD = new Group(this, SWT.NONE);
+            GridLayout groupDVDLayout = new GridLayout();
+            GridData groupDVDLData = new GridData();
+            groupDVDLData.grabExcessHorizontalSpace = true;
+            groupDVDLData.grabExcessVerticalSpace = true;
+            groupDVDLData.horizontalAlignment = GridData.FILL;
+            groupDVDLData.verticalAlignment = GridData.FILL;
+            groupDVD.setLayoutData(groupDVDLData);
+            groupDVDLayout.makeColumnsEqualWidth = true;
+            groupDVD.setLayout(groupDVDLayout);
+            groupDVD.setText(l.getString("dvd.group.label"));
+            {
+                sashForm1 = new SashForm(groupDVD, SWT.NONE);
+                GridData sashForm1LData = new GridData();
+                sashForm1LData.verticalAlignment = GridData.FILL;
+                sashForm1LData.horizontalAlignment = GridData.FILL;
+                sashForm1LData.grabExcessHorizontalSpace = true;
+                sashForm1LData.grabExcessVerticalSpace = true;
+                sashForm1.setLayoutData(sashForm1LData);
+
+            }
+            // init the rest of the layout
+            initDVDOverview();
+            initDVDDetail();
+            //refreshDVDOverviewTable(textDVDSearch.getText());
+        }
+
+        this.layout();
+
+        if (logger.isDebugEnabled()) {
+            logger.debug("initGUI() - end");
+        }
+    }
+
+    /**
+     * 
+     */
+    private void initDVDOverview() {
+        //	  Group DVD Overview
+        {
+            groupDVDOverview = new Group(sashForm1, SWT.NONE);
+            GridLayout group1Layout = new GridLayout();
+            group1Layout.numColumns = 8;
+            groupDVDOverview.setLayout(group1Layout);
+            groupDVDOverview.setText(l
+                    .getString("dvd.groupoverview.label"));
+
+            {// table Actors Overview
+                tableDVDOverview = new Table(groupDVDOverview, SWT.SINGLE
+                        | SWT.FULL_SELECTION | SWT.V_SCROLL | SWT.BORDER);
+                GridData tableDVDOverviewLData = new GridData();
+                tableDVDOverview.setHeaderVisible(true);
+                tableDVDOverview.setLinesVisible(true);
+                tableDVDOverviewLData.horizontalAlignment = GridData.FILL;
+                tableDVDOverviewLData.verticalAlignment = GridData.FILL;
+                tableDVDOverviewLData.horizontalSpan = 8;
+                tableDVDOverviewLData.grabExcessHorizontalSpace = true;
+                tableDVDOverviewLData.grabExcessVerticalSpace = true;
+                tableDVDOverview.setLayoutData(tableDVDOverviewLData);
+                tableDVDOverview
+                        .addSelectionListener(new SelectionAdapter() {
+                            public void widgetSelected(SelectionEvent evt) {
+                                int index = tableDVDOverview
+                                        .getSelectionIndex();
+
+                                //es wurde ein Element aus Tabelle ausgewaehlt
+                                // jetzt muss die
+                                //Detailansicht aktualisiert werden
+                                refreshDVDDetail(tableDVDOverview
+                                        .getItem(index).getText(0));
+                            }
+                        });
+                {
+                    tableDVDOverview_ColumnID = new TableColumn(
+                            tableDVDOverview, SWT.CENTER);
+                    tableDVDOverview_ColumnID.setText(l
+                            .getString("dvd.groupoverview.columnid"));
+                    tableDVDOverview_ColumnID.setWidth(40);
+                }
+                {
+                    tableDVDOverview_ColumnTitle = new TableColumn(
+                            tableDVDOverview, SWT.CENTER);
+                    tableDVDOverview_ColumnTitle.setText(l
+                            .getString("dvd.groupoverview.columntitle"));
+                    tableDVDOverview_ColumnTitle.setWidth(120);
+                }
+                {
+                    tableDVDOverview_ColumnDate = new TableColumn(
+                            tableDVDOverview, SWT.CENTER);
+                    tableDVDOverview_ColumnDate.setText(l
+                            .getString("dvd.groupoverview.columndate"));
+                    tableDVDOverview_ColumnDate.setWidth(120);
+                }
+            }// table Movies Overview
+
+            // Search
+            {
+                //label for Search
+                labelDVDSearch = new Label(groupDVDOverview, SWT.NONE);
+                labelDVDSearch.setText(l
+                        .getString("dvd.groupoverview.searchlabel")
+                        + ":");
+                GridData label2LData = new GridData();
+                label2LData.horizontalSpan = 3;
+                labelDVDSearch.setLayoutData(label2LData);
+
+                //text Search
+                textDVDSearch = new Text(groupDVDOverview, SWT.BORDER);
+                GridData text2LData = new GridData();
+                textDVDSearch.addFocusListener(new FocusAdapter() {
+                    public void focusLost(FocusEvent evt) {
+                        if (logger.isDebugEnabled()) {
+                            logger.debug("focusLost(FocusEvent evt = " + evt
+                                    + " " + textDVDSearch.getText()
+                                    + ") - start");
+                        }
+
+                        refreshDVDOverviewTable(textDVDSearch.getText());
+
+                        if (logger.isDebugEnabled()) {
+                            logger.debug("focusLost(FocusEvent) - end");
+                        }
+                    }
+                });
+                textDVDSearch.addListener(SWT.DefaultSelection,new Listener() {
+                            public void handleEvent(Event e) {
+                                if (logger.isDebugEnabled()) {
+                                    logger.debug("handleEvent(Event e = " + e
+                                            + " " + textDVDSearch.getText()
+                                            + ") - start");
+                                }
+
+                                refreshDVDOverviewTable(textDVDSearch
+                                        .getText());
+
+                                if (logger.isDebugEnabled()) {
+                                    logger.debug("handleEvent(Event) - end");
+                                }
+                            }
+
+                        });
+                text2LData.horizontalAlignment = GridData.FILL;
+                text2LData.horizontalSpan = 5;
+                text2LData.grabExcessHorizontalSpace = true;
+                textDVDSearch.setLayoutData(text2LData);
+            }// Search
+        } 
+    }
+    
+ 
+    /**
+     * 
+     */
+    private void initDVDDetail() {
+        // TODO Auto-generated method stub
+        
+    }
+
+    
+    /**
+     * @param text
+     */
+    private void refreshDVDOverviewTable(String text) {
+        // TODO Auto-generated method stub
+        
+    }
+  
+    
+    /**
+     * @param text
+     */
+    protected void refreshDVDDetail(String text) {
+        // TODO Auto-generated method stub
+        
+    }
+
+}

Added: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/dvds.properties
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/dvds.properties	2004-12-07 18:07:42 UTC (rev 219)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/dvds.properties	2004-12-07 23:21:25 UTC (rev 220)
@@ -0,0 +1,8 @@
+error =Fehler
+dvd.group.label =DVD
+
+dvd.groupoverview.label =?berblick
+dvd.groupoverview.searchlabel =Suche nach
+dvd.groupoverview.columnid =ID
+dvd.groupoverview.columntitle =Titel
+dvd.groupoverview.columndate =Erscheinungsdatum
\ No newline at end of file



From rgriesch at sheep.berlios.de  Wed Dec  8 00:23:38 2004
From: rgriesch at sheep.berlios.de (Remo Griesch at BerliOS)
Date: Wed, 8 Dec 2004 00:23:38 +0100
Subject: [Provirent-svn-commit] r221 - in project_src/provirent_hibernate/src/de/hsharz/provirent: management/gui management/gui/language persistence
Message-ID: <200412072323.iB7NNcIh004698@sheep.berlios.de>

Author: rgriesch
Date: 2004-12-08 00:23:37 +0100 (Wed, 08 Dec 2004)
New Revision: 221

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeActors.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeDirectors.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/main.properties
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/movies.properties
   project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java
Log:
Composite Movie 
          Actor
          Director  - Fehler beseitigt

Composite DVD       - angefangen
ManagenmentGui      - erweitert

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeActors.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeActors.java	2004-12-07 23:21:25 UTC (rev 220)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeActors.java	2004-12-07 23:23:37 UTC (rev 221)
@@ -634,7 +634,7 @@
                             
                             // in ?bersichtstabelle einf?gen
                             insertIntoActorsOverviewTable((Actor)o);
-                            textActorsID.setText( ((Actor)o).getActorId()+"" );
+                            textActorsID.setText( ((Actor)o).getActorId()+"");
                             
                             
                             //Statusline Nachricht sezten

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeDirectors.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeDirectors.java	2004-12-07 23:21:25 UTC (rev 220)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeDirectors.java	2004-12-07 23:23:37 UTC (rev 221)
@@ -60,7 +60,7 @@
      * Logger for this class
      */
     private static final Logger logger = Logger
-            .getLogger(CompositeActors.class);
+            .getLogger(CompositeDirectors.class);
     
     
     private final static int MODE_VIEW = 0;

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java	2004-12-07 23:21:25 UTC (rev 220)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java	2004-12-07 23:23:37 UTC (rev 221)
@@ -71,7 +71,7 @@
      * Logger for this class
      */
     private static final Logger logger = Logger
-            .getLogger(CompositeActors.class);
+            .getLogger(CompositeMovie.class);
 
     private final static int MODE_VIEW = 0;
 
@@ -385,8 +385,7 @@
                         }
                     }
                 });
-                textMoviesSearch.addListener(SWT.DefaultSelection,
-                        new Listener() {
+                textMoviesSearch.addListener(SWT.DefaultSelection,new Listener() {
                             public void handleEvent(Event e) {
                                 if (logger.isDebugEnabled()) {
                                     logger.debug("handleEvent(Event e = " + e
@@ -1130,7 +1129,8 @@
                     textMoviesRuntime.setEditable(true);
                     textMoviesTitle.setFocus();
                     textMoviesDescription.setEditable(true);
-
+                    textMoviesSearch.setEditable(false);
+                    
                     buttonMoviesCancel.setEnabled(true);
                     buttonMoviesSave.setEnabled(true);
                     buttonMoviesNew.setEnabled(false);
@@ -1145,9 +1145,9 @@
                     buttonMoviesAddImages.setEnabled(true);
                     buttonMoviesDeleteImages.setEnabled(true);
                     buttonMoviesChangeDate.setEnabled(true);
-
+                    
                     tableMoviesOverview.setEnabled(false);
-                    textMoviesSearch.setEnabled(false);
+                    
                 }
             });
 
@@ -1194,6 +1194,7 @@
                         //Detailansicht leeren
                         textMoviesID.setText("");
                         textMoviesTitle.setText("");
+                        textMoviesRuntime.setText("");
                         textMoviesDate.setText("");
                         textMoviesDescription.setText("");
                         tableMoviesDirectorsDetail.removeAll();
@@ -1338,14 +1339,22 @@
                     try {
                         //object speichern
                         // Fehlerbehandlung
+
+                        if (mode_movie == ManagementGui.MODE_ADD)  {
+                        Object o = Database.saveObject(localmovie);
+
                         logger.debug("Objektid: "+localmovie.getMovieId()+" vor speichern");
                         Database.saveObject(localmovie);
                         logger.debug("Objektid: "+localmovie.getMovieId()+" nach speichern");
-
+
+                        
                         // in ?bersichtstabelle einf?gen
                         insertIntoMoviesOverviewTable(localmovie);
                         textMoviesID.setText(localmovie.getMovieId() + "");
-
+                        }
+                        if (mode_movie == ManagementGui.MODE_EDIT)  {
+                            Object o = Database.updateObject(localmovie);
+                        } 
                         //Statusline Nachricht sezten
                         statusLine
                                 .setStatus(
@@ -1433,10 +1442,6 @@
      */
     private void setMoviesGroupButtonSaveCancel() {
         tableMoviesOverview.setEnabled(true);
-        textMoviesTitle.setEditable(false);
-        textMoviesDescription.setEditable(false);
-        textMoviesSearch.setEditable(true);
-        textMoviesRuntime.setEditable(false);
         buttonMoviesCancel.setEnabled(false);
         buttonMoviesSave.setEnabled(false);
         buttonMoviesNew.setEnabled(true);
@@ -1451,6 +1456,10 @@
         buttonMoviesAddImages.setEnabled(false);
         buttonMoviesDeleteImages.setEnabled(false);
         buttonMoviesChangeDate.setEnabled(false);
+        textMoviesTitle.setEditable(false);
+        textMoviesDescription.setEditable(false);
+        textMoviesSearch.setEditable(true);
+        textMoviesRuntime.setEditable(false);
     }
 
     /**
@@ -1525,7 +1534,7 @@
         for (int i = 0; i < object.getDirector().size(); i++) {
             Director o = (Director) object.getDirector().get(i);
             item = new TableItem(tableMoviesDirectorsDetail, SWT.NONE);
-            item.setText(new String[] { o.getDirectorId() + " ",
+            item.setText(new String[] { o.getDirectorId() + "",
                     o.getLastName() + " , " + o.getFirstName() });
         }
 
@@ -1534,7 +1543,7 @@
         for (int i = 0; i < object.getActors().size(); i++) {
             Actor o = (Actor) object.getActors().get(i);
             item = new TableItem(tableMoviesActorsDetail, SWT.NONE);
-            item.setText(new String[] { o.getActorId() + " ",
+            item.setText(new String[] { o.getActorId() + "",
                     o.getLastName() + " , " + o.getFirstName() });
         }
 
@@ -1559,7 +1568,7 @@
         for (int i = 0; i < object.getImages().size(); i++) {
             Image o = (Image) object.getImages().get(i);
             item = new TableItem(tableMoviesImagesDetail, SWT.NONE);
-            item.setText(new String[] { o.getImageId() + " ",
+            item.setText(new String[] { o.getImageId() + "",
                     o.getImageFileName() + "" });
         }
 

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java	2004-12-07 23:21:25 UTC (rev 220)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java	2004-12-07 23:23:37 UTC (rev 221)
@@ -115,6 +115,7 @@
     private CTabItem tabItemGenre;
     private CTabItem tabItemImage;
     private CTabItem tabItemMovie;
+    private CTabItem tabItemDvd;
     private CTabItem tabItemStatus;
     private CTabItem tabStatusLanguage;
         
@@ -126,6 +127,7 @@
     private CompositeLanguage compositeLanguage;
     private CompositeImage compositeImage;
     private CompositeMovie compositeMovie;
+    private CompositeDVD compositeDvd;
     private CompositePayment compositePayment;
     private CompositeStatus compositeStatus;
     private CompositeCustomer compositeCustomer;
@@ -575,7 +577,7 @@
 				}
 				
 				cTabFolderMain.setSelection(tabItemMovie);
-				viewActorMenuItem.setSelection(true);
+				viewMovieMenuItem.setSelection(true);
 				cTabFolderMain.showSelection();				
             
             }
@@ -584,7 +586,20 @@
         viewDvdMenuItem = new MenuItem(viewMenu, SWT.CHECK);
         viewDvdMenuItem.setText(l.getString("menu.view.dvd"));
         viewDvdMenuItem.setSelection(false);
-
+        viewDvdMenuItem.addSelectionListener(new SelectionAdapter() {
+            public void widgetSelected(SelectionEvent evt) {
+				if(tabItemDvd == null || tabItemDvd.isDisposed()){
+				    initDvdTab();
+				    return;   
+				}
+				
+				cTabFolderMain.setSelection(tabItemDvd);
+				viewDvdMenuItem.setSelection(true);
+				cTabFolderMain.showSelection();				
+            
+            }
+        });         
+        
         viewBillMenuItem = new MenuItem(viewMenu, SWT.CHECK);
         viewBillMenuItem.setText(l.getString("menu.view.bill"));
         viewBillMenuItem.setSelection(false);
@@ -890,6 +905,29 @@
         statusLine.setLayoutData(styledText1LData);
     }
 
+    private void initDvdTab() {
+        tabItemDvd = new CTabItem(cTabFolderMain, SWT.NONE);
+        tabItemDvd.setText(l.getString("tab.dvd.title"));
+        tabItemDvd.addDisposeListener(new DisposeListener() {
+
+            public void widgetDisposed(DisposeEvent evt) {
+                if(!viewMovieMenuItem.isDisposed()){
+                viewDvdMenuItem.setSelection(false);
+                }
+            }
+            
+        });
+  
+        {
+            compositeDvd = new CompositeDVD(
+                cTabFolderMain,
+                SWT.NONE, statusLine, locale);
+            
+            tabItemDvd.setControl(compositeDvd);
+        }
+        cTabFolderMain.setSelection(tabItemDvd);
+    }
+    
     /**
      * Sets a message for the Statusline
      * 

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/main.properties
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/main.properties	2004-12-07 23:21:25 UTC (rev 220)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/main.properties	2004-12-07 23:23:37 UTC (rev 221)
@@ -47,6 +47,7 @@
 tab.language.title=Sprache/Untertitel
 tab.Status.title=Status/Zustand
 tab.movie.title=Filme
+tab.dvd.title=DVD
 tab.payment.title=Preisklassen
 tab.image.title=Bilder
 status.resizewarn=Fenster kann Mindestgr??e nicht unterschreiten.
\ No newline at end of file

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/movies.properties
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/movies.properties	2004-12-07 23:21:25 UTC (rev 220)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/movies.properties	2004-12-07 23:23:37 UTC (rev 221)
@@ -5,7 +5,6 @@
 movies.groupoverview.searchlabel =Suche nach
 movies.groupoverview.columnid =ID
 movies.groupoverview.columntitle =Titel
-movies.groupoverview.columnsubtitles =Untertitel
 movies.groupoverview.columndate =Erscheinungsdatum
 movies.groupoverviewdetail.columngenres =Genre
 movies.groupoverviewdetail.columnactors =Dartsteller

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java	2004-12-07 23:21:25 UTC (rev 220)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java	2004-12-07 23:23:37 UTC (rev 221)
@@ -1879,7 +1879,9 @@
 	                any.add(Expression.like("releaseDate", "%"+filter+"%"));
 	                any.add(Expression.like("description", "%"+filter+"%"));
 	                any.add(Expression.like("actors", "%"+filter+"%"));
-	                any.add(Expression.like("directors", "%"+filter+"%"));
+	                any.add(Expression.like("runtime", "%"+filter+"%"));
+	                any.add(Expression.like("director", "%"+filter+"%"));
+	                any.add(Expression.like("genres", "%"+filter+"%"));
 	                //any.add(Expression.like("images", "%"+filter+"%"));
 	                //maybe we are searching for the id?
 	                try {



From sforstner at sheep.berlios.de  Wed Dec  8 10:50:43 2004
From: sforstner at sheep.berlios.de (Stefan at BerliOS)
Date: Wed, 8 Dec 2004 10:50:43 +0100
Subject: [Provirent-svn-commit] r222 - project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui
Message-ID: <200412080950.iB89ohhh022975@sheep.berlios.de>

Author: sforstner
Date: 2004-12-08 10:50:42 +0100 (Wed, 08 Dec 2004)
New Revision: 222

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeOrder.java
Log:


Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeOrder.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeOrder.java	2004-12-07 23:23:37 UTC (rev 221)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeOrder.java	2004-12-08 09:50:42 UTC (rev 222)
@@ -64,10 +64,8 @@
 
 import com.cloudgarden.resource.SWTResourceManager;
 
-import de.hsharz.provirent.objects.Customer;
 import de.hsharz.provirent.objects.MovieOrder;
 import de.hsharz.provirent.objects.OrderItem;
-import de.hsharz.provirent.persistence.DataBaseException;
 import de.hsharz.provirent.persistence.Database;
 
 /**



From pschneider at sheep.berlios.de  Wed Dec  8 19:33:05 2004
From: pschneider at sheep.berlios.de (Philipp Schneider at BerliOS)
Date: Wed, 8 Dec 2004 19:33:05 +0100
Subject: [Provirent-svn-commit] r223 - project_src/provirent_hibernate/src/de/hsharz/provirent/objects
Message-ID: <200412081833.iB8IX5q8013449@sheep.berlios.de>

Author: pschneider
Date: 2004-12-08 19:33:04 +0100 (Wed, 08 Dec 2004)
New Revision: 223

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/objects/OrderItem.hbm.xml
Log:
- timestamp removed und ersetzt

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/objects/OrderItem.hbm.xml
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/objects/OrderItem.hbm.xml	2004-12-08 09:50:42 UTC (rev 222)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/objects/OrderItem.hbm.xml	2004-12-08 18:33:04 UTC (rev 223)
@@ -20,9 +20,9 @@
         <generator class="native"/>
       </id>
 
-			<timestamp	name="orderTime">
+			<property	name="orderTime" type="calendar">
 				<meta attribute="use-in-tostring">true</meta>
-			</timestamp>
+			</property>
 
 
       <property name="senderTime" type="calendar">



From pschneider at sheep.berlios.de  Wed Dec  8 19:41:24 2004
From: pschneider at sheep.berlios.de (Philipp Schneider at BerliOS)
Date: Wed, 8 Dec 2004 19:41:24 +0100
Subject: [Provirent-svn-commit] r224 - in project_src/provirent_hibernate/src/de/hsharz/provirent: management/gui objects
Message-ID: <200412081841.iB8IfOHU013759@sheep.berlios.de>

Author: pschneider
Date: 2004-12-08 19:41:22 +0100 (Wed, 08 Dec 2004)
New Revision: 224

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeOrder.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/objects/OrderItem.java
Log:
- Date durch Calendar ersetzt (wurde schon in der hibernate xml vorgenommen)

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeOrder.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeOrder.java	2004-12-08 18:33:04 UTC (rev 223)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeOrder.java	2004-12-08 18:41:22 UTC (rev 224)
@@ -258,7 +258,7 @@
 	                orderdate = DateFormat.getDateInstance(DateFormat.SHORT).format(
 	                    o.getOrderTime().getTime());
 	            }
-	            
+	           
 	            String senddate = "";
 	            if (o.getSenderTime() != null) {
 	                senddate = DateFormat.getDateInstance(DateFormat.SHORT).format(

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/objects/OrderItem.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/objects/OrderItem.java	2004-12-08 18:33:04 UTC (rev 223)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/objects/OrderItem.java	2004-12-08 18:41:22 UTC (rev 224)
@@ -2,7 +2,6 @@
 
 import java.io.Serializable;
 import java.util.Calendar;
-import java.util.Date;
 import org.apache.commons.lang.builder.EqualsBuilder;
 import org.apache.commons.lang.builder.HashCodeBuilder;
 import org.apache.commons.lang.builder.ToStringBuilder;
@@ -19,6 +18,9 @@
     private Integer orderItemId;
 
     /** nullable persistent field */
+    private Calendar orderTime;
+
+    /** nullable persistent field */
     private Calendar senderTime;
 
     /** nullable persistent field */
@@ -28,9 +30,6 @@
     private int duration;
 
     /** nullable persistent field */
-    private Date orderTime;
-
-    /** nullable persistent field */
     private de.hsharz.provirent.objects.Customer customer;
 
     /** nullable persistent field */
@@ -46,11 +45,11 @@
     private de.hsharz.provirent.objects.Condition conditionReceiving;
 
     /** full constructor */
-    public OrderItem(Calendar senderTime, Calendar receivingTime, int duration, Date orderTime, de.hsharz.provirent.objects.Customer customer, de.hsharz.provirent.objects.Dvd dvd, de.hsharz.provirent.objects.Payment payment, de.hsharz.provirent.objects.Condition conditionSend, de.hsharz.provirent.objects.Condition conditionReceiving) {
+    public OrderItem(Calendar orderTime, Calendar senderTime, Calendar receivingTime, int duration, de.hsharz.provirent.objects.Customer customer, de.hsharz.provirent.objects.Dvd dvd, de.hsharz.provirent.objects.Payment payment, de.hsharz.provirent.objects.Condition conditionSend, de.hsharz.provirent.objects.Condition conditionReceiving) {
+        this.orderTime = orderTime;
         this.senderTime = senderTime;
         this.receivingTime = receivingTime;
         this.duration = duration;
-        this.orderTime = orderTime;
         this.customer = customer;
         this.dvd = dvd;
         this.payment = payment;
@@ -75,6 +74,14 @@
         this.orderItemId = orderItemId;
     }
 
+    public Calendar getOrderTime() {
+        return this.orderTime;
+    }
+
+    public void setOrderTime(Calendar orderTime) {
+        this.orderTime = orderTime;
+    }
+
     public Calendar getSenderTime() {
         return this.senderTime;
     }
@@ -99,14 +106,6 @@
         this.duration = duration;
     }
 
-    public Date getOrderTime() {
-        return this.orderTime;
-    }
-
-    public void setOrderTime(Date orderTime) {
-        this.orderTime = orderTime;
-    }
-
     public de.hsharz.provirent.objects.Customer getCustomer() {
         return this.customer;
     }
@@ -150,10 +149,10 @@
     public String toString() {
         return new ToStringBuilder(this)
             .append("orderItemId", getOrderItemId())
+            .append("orderTime", getOrderTime())
             .append("senderTime", getSenderTime())
             .append("receivingTime", getReceivingTime())
             .append("duration", getDuration())
-            .append("orderTime", getOrderTime())
             .append("customer", getCustomer())
             .append("dvd", getDvd())
             .append("payment", getPayment())
@@ -168,10 +167,10 @@
         OrderItem castOther = (OrderItem) other;
         return new EqualsBuilder()
             .append(this.getOrderItemId(), castOther.getOrderItemId())
+            .append(this.getOrderTime(), castOther.getOrderTime())
             .append(this.getSenderTime(), castOther.getSenderTime())
             .append(this.getReceivingTime(), castOther.getReceivingTime())
             .append(this.getDuration(), castOther.getDuration())
-            .append(this.getOrderTime(), castOther.getOrderTime())
             .append(this.getCustomer(), castOther.getCustomer())
             .append(this.getDvd(), castOther.getDvd())
             .append(this.getPayment(), castOther.getPayment())
@@ -183,10 +182,10 @@
     public int hashCode() {
         return new HashCodeBuilder()
             .append(getOrderItemId())
+            .append(getOrderTime())
             .append(getSenderTime())
             .append(getReceivingTime())
             .append(getDuration())
-            .append(getOrderTime())
             .append(getCustomer())
             .append(getDvd())
             .append(getPayment())



From rgriesch at sheep.berlios.de  Wed Dec  8 19:45:56 2004
From: rgriesch at sheep.berlios.de (Remo Griesch at BerliOS)
Date: Wed, 8 Dec 2004 19:45:56 +0100
Subject: [Provirent-svn-commit] r225 - in project_src/provirent_hibernate/src/de/hsharz/provirent: . management/gui management/gui/language persistence
Message-ID: <200412081845.iB8IjuMe013986@sheep.berlios.de>

Author: rgriesch
Date: 2004-12-08 19:45:55 +0100 (Wed, 08 Dec 2004)
New Revision: 225

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/Util.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeDVD.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeOrder.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositePayment.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/DialogMovie.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/dvds.properties
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/movies.properties
   project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java
Log:
Payment          - Util verworfen
                 - Fehler in Update bereinigt

Composite Movie  - MainImage hinzugef?\195?\188gt
                 
DialogMovie      - Um MainImage erweitert

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/Util.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/Util.java	2004-12-08 18:41:22 UTC (rev 224)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/Util.java	2004-12-08 18:45:55 UTC (rev 225)
@@ -38,6 +38,7 @@
 import java.text.SimpleDateFormat;
 import java.util.Calendar;
 import java.util.Properties;
+import java.text.DateFormat;
 
 import javax.mail.Address;
 import javax.mail.Message;

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeDVD.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeDVD.java	2004-12-08 18:41:22 UTC (rev 224)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeDVD.java	2004-12-08 18:45:55 UTC (rev 225)
@@ -64,8 +64,10 @@
 
     private TableColumn tableDVDOverview_ColumnTitle;
 
-    private TableColumn tableDVDOverview_ColumnDate;
+    private TableColumn tableDVDOverview_ColumnStatus;
     
+    private TableColumn tableDVDOverview_ColumnCondition;
+    
     private Text textDVDSearch;
     
     private Label labelDVDSearch;
@@ -240,12 +242,19 @@
                     tableDVDOverview_ColumnTitle.setWidth(120);
                 }
                 {
-                    tableDVDOverview_ColumnDate = new TableColumn(
+                    tableDVDOverview_ColumnStatus = new TableColumn(
                             tableDVDOverview, SWT.CENTER);
-                    tableDVDOverview_ColumnDate.setText(l
-                            .getString("dvd.groupoverview.columndate"));
-                    tableDVDOverview_ColumnDate.setWidth(120);
+                    tableDVDOverview_ColumnStatus.setText(l
+                            .getString("dvd.groupoverview.columnstatus"));
+                    tableDVDOverview_ColumnStatus.setWidth(120);
                 }
+                {
+                    tableDVDOverview_ColumnCondition = new TableColumn(
+                            tableDVDOverview, SWT.CENTER);
+                    tableDVDOverview_ColumnCondition.setText(l
+                            .getString("dvd.groupoverview.columncondition"));
+                    tableDVDOverview_ColumnCondition.setWidth(120);
+                }
             }// table Movies Overview
 
             // Search

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java	2004-12-08 18:41:22 UTC (rev 224)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java	2004-12-08 18:45:55 UTC (rev 225)
@@ -47,6 +47,7 @@
 import de.hsharz.provirent.persistence.DataBaseException;
 import de.hsharz.provirent.persistence.Database;
 
+import org.eclipse.swt.widgets.Combo;
 /**
  * This code was generated using CloudGarden's Jigloo SWT/Swing GUI Builder,
  * which is free for non-commercial use. If Jigloo is being used commercially
@@ -116,6 +117,8 @@
     private Text textMoviesDescription;
 
     private Text textMoviesDate;
+    
+    private Text textMoviesmainImage;
 
     private Label labelMoviesSearch;
 
@@ -136,6 +139,8 @@
     private Label labelMoviesGenres;
 
     private Label labelMoviesImages;
+        
+    private Label labelMoviesmainImage;
 
     private Button buttonMoviesNew;
 
@@ -166,6 +171,8 @@
     private Button buttonMoviesDeleteImages;
 
     private Button buttonMoviesChangeDate;
+    
+    private Button buttonMoviesChangemainImage;
 
     private SashForm sashForm1;
 
@@ -259,7 +266,7 @@
         }
 
         this.setLayout(new GridLayout());
-        this.setSize(830, 650);
+        this.setSize(824, 634);
         {
             groupMovie = new Group(this, SWT.NONE);
             GridLayout groupMovieLayout = new GridLayout();
@@ -500,11 +507,11 @@
             labelMoviesDate.setText(l.getString("movies.groupdetail.labeldate")
                     + ":");
             labelMoviesDate.setSize(125, 15);
-            GridData labelActorNameLData = new GridData();
-            labelActorNameLData.heightHint = 15;
-            labelActorNameLData.horizontalAlignment = GridData.FILL;
-            labelActorNameLData.verticalAlignment = GridData.BEGINNING;
-            labelMoviesDate.setLayoutData(labelActorNameLData);
+            GridData labelMoviesDateLData = new GridData();
+            labelMoviesDateLData.heightHint = 15;
+            labelMoviesDateLData.horizontalAlignment = GridData.FILL;
+            labelMoviesDateLData.verticalAlignment = GridData.BEGINNING;
+            labelMoviesDate.setLayoutData(labelMoviesDateLData);
         }
         {
             textMoviesDate = new Text(groupMoviesDetail, SWT.READ_ONLY
@@ -1051,8 +1058,52 @@
                 tableMoviesDetail_ColumnName.setWidth(200);
             }
         }// Edit Images
-
         {
+            labelMoviesmainImage = new Label(groupMoviesDetail, SWT.NONE);
+            labelMoviesmainImage.setText(l.getString("movies.groupdetail.labelmainimage")
+                    + ":");
+            labelMoviesmainImage.setSize(125, 15);
+            GridData labelMoviesImageLData = new GridData();
+            labelMoviesImageLData.heightHint = 15;
+            labelMoviesImageLData.horizontalAlignment = GridData.FILL;
+            labelMoviesImageLData.verticalAlignment = GridData.BEGINNING;
+            labelMoviesmainImage.setLayoutData(labelMoviesImageLData);
+        }
+        {
+            textMoviesmainImage = new Text(groupMoviesDetail, SWT.READ_ONLY
+                    | SWT.BORDER);
+            GridData text1LData2 = new GridData();
+            text1LData2.horizontalAlignment = GridData.FILL;
+            text1LData2.heightHint = 13;
+            text1LData2.horizontalSpan = 4;
+            text1LData2.grabExcessHorizontalSpace = true;
+            textMoviesmainImage.setLayoutData(text1LData2);
+            textMoviesmainImage.setText("");
+        }
+        {
+            buttonMoviesChangemainImage = new Button(groupMoviesDetail, SWT.NONE);
+            buttonMoviesChangemainImage.setText(l
+                    .getString("movies.button.changedate"));
+            buttonMoviesChangemainImage.setEnabled(false);
+            GridData text1LData2 = new GridData();
+            text1LData2.horizontalAlignment = GridData.FILL;
+            text1LData2.heightHint = 20;
+            text1LData2.horizontalSpan = 1;
+            buttonMoviesChangemainImage.setLayoutData(text1LData2);
+            buttonMoviesChangemainImage.addSelectionListener(new SelectionAdapter() {
+                public void widgetSelected(SelectionEvent evt) {
+                    //open responsible Dialog and insert text
+                    DialogMovie dialog = new DialogMovie(getShell(), 0, locale,
+                            localmovie, DialogMovie.TYPE_MAINIMAGE);
+                    dialog.open();
+                    if (localmovie.getMainImage() != null)
+                    textMoviesmainImage.setText(localmovie.getMainImage().getImageFileName());                  
+                }
+            });
+        }
+        
+            
+        {
             compositeButtons = new Composite(groupMoviesDetail, SWT.EMBEDDED);
             GridLayout composite2Layout = new GridLayout();
             composite2Layout.numColumns = 6;
@@ -1100,7 +1151,8 @@
                     buttonMoviesAddImages.setEnabled(true);
                     buttonMoviesDeleteImages.setEnabled(true);
                     buttonMoviesChangeDate.setEnabled(true);
-
+                    buttonMoviesChangemainImage.setEnabled(true);
+                    
                     tableMoviesOverview.setEnabled(false);
                     tableMoviesDirectorsDetail.removeAll();
                     tableMoviesActorsDetail.removeAll();
@@ -1145,6 +1197,7 @@
                     buttonMoviesAddImages.setEnabled(true);
                     buttonMoviesDeleteImages.setEnabled(true);
                     buttonMoviesChangeDate.setEnabled(true);
+                    buttonMoviesChangemainImage.setEnabled(true);
                     
                     tableMoviesOverview.setEnabled(false);
                     
@@ -1341,7 +1394,7 @@
                         // Fehlerbehandlung
 
                         if (mode_movie == ManagementGui.MODE_ADD)  {
-                        Object o = Database.saveObject(localmovie);
+
 
                         logger.debug("Objektid: "+localmovie.getMovieId()+" vor speichern");
                         Database.saveObject(localmovie);
@@ -1352,8 +1405,8 @@
                         insertIntoMoviesOverviewTable(localmovie);
                         textMoviesID.setText(localmovie.getMovieId() + "");
                         }
-                        if (mode_movie == ManagementGui.MODE_EDIT)  {
-                            Object o = Database.updateObject(localmovie);
+                        else if (mode_movie == ManagementGui.MODE_EDIT)  {
+                            Database.updateObject(localmovie);
                         } 
                         //Statusline Nachricht sezten
                         statusLine
@@ -1456,6 +1509,7 @@
         buttonMoviesAddImages.setEnabled(false);
         buttonMoviesDeleteImages.setEnabled(false);
         buttonMoviesChangeDate.setEnabled(false);
+        buttonMoviesChangemainImage.setEnabled(false);
         textMoviesTitle.setEditable(false);
         textMoviesDescription.setEditable(false);
         textMoviesSearch.setEditable(true);
@@ -1527,7 +1581,8 @@
                 .format(object.getReleaseDate().getTime()));
         textMoviesRuntime.setText(Integer.toString(object.getRuntime()));
         textMoviesDescription.setText(object.getDescription());
-
+        textMoviesmainImage.setText(object.getMainImage().getImageFileName());
+        
         TableItem item;
         // Fill Directorstable
         tableMoviesDirectorsDetail.removeAll();

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeOrder.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeOrder.java	2004-12-08 18:41:22 UTC (rev 224)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeOrder.java	2004-12-08 18:45:55 UTC (rev 225)
@@ -256,7 +256,7 @@
 	            String orderdate = "";
 	            if (o.getOrderTime() != null) {
 	                orderdate = DateFormat.getDateInstance(DateFormat.SHORT).format(
-	                    o.getOrderTime().getTime());
+	                    o.getOrderTime());
 	            }
 	           
 	            String senddate = "";

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositePayment.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositePayment.java	2004-12-08 18:41:22 UTC (rev 224)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositePayment.java	2004-12-08 18:45:55 UTC (rev 225)
@@ -607,7 +607,17 @@
                     o.setDuration1(Float.parseFloat(textduration1.getText()));
                     o.setDuration2(Float.parseFloat(textduration2.getText()));
                     o.setDuration3(Float.parseFloat(textduration3.getText()));
-                    o.setStartdate(Util.getDateByText(textstartdate.getText(), "dd.MM.YYYY"));
+                    o.setStartdate(Calendar.getInstance());
+                    try {
+                        o.getStartdate().setTime(DateFormat.getDateInstance(DateFormat.LONG).parse(textstartdate.getText()));
+                    } catch (ParseException e1) {
+                        // TODO Auto-generated catch block
+                        e1.printStackTrace();
+                        if (logger.isDebugEnabled()) {
+                            logger.debug("Problem mit Date l?schen wird verworfen ");
+                        }
+                        return;
+                    }
 
                     //object speichern
                     // Fehlerbehandlung
@@ -817,7 +827,7 @@
 
                         //object speichern
                         // Fehlerbehandlung
-                        Database.saveObject(tmp);
+                        Database.updateObject(tmp);
                         //?bersichtstabelle aktualisieren
                         refreshPaymentTable(textPaymentSearch.getText());
 
@@ -935,7 +945,7 @@
                 Payment.getName(), Double.toString(Payment.getDuration1()),
                 Double.toString(Payment.getDuration2()),
                 Double.toString(Payment.getDuration3()),
-                Util.getTextByDate(Payment.getStartdate(), "dd.MM.YYYY") });
+                DateFormat.getDateInstance(DateFormat.SHORT).format(Payment.getStartdate().getTime()) });
 
         tablePayment.deselectAll();
         refreshPaymentDetail("");
@@ -1023,7 +1033,8 @@
                     Double.toString(o.getDuration1()),
                     Double.toString(o.getDuration2()),
                     Double.toString(o.getDuration3()),
-                    Util.getTextByDate(o.getStartdate(), "dd.MM.YYYY") });
+                    DateFormat.getDateInstance(DateFormat.SHORT).format(
+                            o.getStartdate().getTime()) });
 
         }
 
@@ -1255,8 +1266,8 @@
             for (int i = 0; i < vec.size(); i++) {
                 Calendar date = (Calendar) vec.get(i);
 
-                if (Util.getTextByDate(date, "dd.MM.YYYY").equals(
-                        Util.getTextByDate(object.getStartdate(), "dd.MM.YYYY"))) {
+                if (DateFormat.getDateInstance(DateFormat.SHORT).format(date.getTime()).equals(
+                        DateFormat.getDateInstance(DateFormat.SHORT).format(object.getStartdate().getTime()))) {
                     buttonPaymentEdit.setEnabled(true);
 
                 }

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/DialogMovie.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/DialogMovie.java	2004-12-08 18:41:22 UTC (rev 224)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/DialogMovie.java	2004-12-08 18:45:55 UTC (rev 225)
@@ -44,6 +44,8 @@
 
     public final static int TYPE_DIRECTOR = 4;
 
+    public final static int TYPE_MAINIMAGE = 5;
+    
     private int type = 0;
 
     private Shell dialogShell;
@@ -173,7 +175,11 @@
             groupDialogDescription.setText(l
                     .getString("movies.dialog.title.image"));
         }
-
+        else if (type == TYPE_MAINIMAGE) {
+            groupDialogDescription.setText(l
+                    .getString("movies.dialog.title.mainimage"));
+        }
+        
         GridData groupForm1LData = new GridData();
         groupForm1LData.widthHint = 300;
         groupForm1LData.heightHint = 200;
@@ -213,8 +219,12 @@
             } else if (type == TYPE_IMAGE) {
                 labelDescriptionAdvice.setText(l
                         .getString("movies.dialog.labeltable.image"));
+            } else if  (type == TYPE_MAINIMAGE) {
+                labelDescriptionAdvice.setText(l
+                        .getString("movies.dialog.labeltable.mainimage"));
             }
-
+            
+            
             table1 = new Table(groupDialogDescription, SWT.SINGLE
                     | SWT.FULL_SELECTION);
             GridData table1LData = new GridData();
@@ -233,7 +243,7 @@
                 item.setResizable(false);
             }
 
-            if (type == TYPE_IMAGE) {
+            if (type == TYPE_IMAGE || type == TYPE_MAINIMAGE) {
                 TableColumn item = new TableColumn(table1, SWT.CENTER);
                 item.setAlignment(SWT.LEFT);
                 item.setWidth(100);
@@ -256,7 +266,7 @@
                     item
                             .setText(l
                                     .getString("movies.dialog.column.name.genre"));
-                } else if (type == TYPE_IMAGE) {
+                } else if (type == TYPE_IMAGE || type == TYPE_MAINIMAGE) {
                     item
                             .setText(l
                                     .getString("movies.dialog.column.name.image"));
@@ -277,7 +287,7 @@
                 } else if (type == TYPE_GENRE) {
                     item.setText(l
                             .getString("movies.dialog.column.shortname.genre"));
-                } else if (type == TYPE_IMAGE) {
+                } else if (type == TYPE_IMAGE || type == TYPE_MAINIMAGE) {
                     item
                             .setText(l
                                     .getString("movies.dialog.column.description.image"));
@@ -287,8 +297,13 @@
 
             buttonDescriptionAccept = new Button(groupDialogDescription,
                     SWT.PUSH | SWT.CENTER);
-            buttonDescriptionAccept.setText(l
-                    .getString("movies.dialog.buttonadd"));
+            if(type == TYPE_MAINIMAGE)  {            
+                buttonDescriptionAccept.setText(l
+                        .getString("movies.dialog.buttonadd.mainimage"));
+            } else  {
+                buttonDescriptionAccept.setText(l
+                        .getString("movies.dialog.buttonadd"));
+            }                
             GridData buttonDescriptionAcceptLData2 = new GridData();
             buttonDescriptionAcceptLData2.horizontalSpan = 2;
             buttonDescriptionAcceptLData2.horizontalAlignment = GridData.FILL;
@@ -349,8 +364,19 @@
                                                     (Image) valuelist.get(j));
                                             break;
                                         }
+                                    } else if (type == TYPE_MAINIMAGE)  {
+                                        if ((table1.getItem(sel[i]).getText(0))
+                                                .equalsIgnoreCase(((Image) valuelist
+                                                        .get(j)).getImageId()
+                                                        + "")) {
+                                            logger
+                                                    .debug("F?ge Bild zum Movie hinzu:"
+                                                            + (Image) valuelist
+                                                                    .get(j));
+                                            movie.setMainImage((Image) valuelist.get(j));
+                                            dialogShell.close();
+                                        }
                                     }
-
                                 }
 
                                 table1.remove(sel[i]);
@@ -427,7 +453,7 @@
                 item.setText(new String[] { o.getGenreId() + "", o.getName(),
                         o.getShortname() });
             }
-        } else if (type == TYPE_IMAGE) {
+        } else if (type == TYPE_IMAGE || type == TYPE_MAINIMAGE) {
             valuelist = Database
                     .getImagesExcept(filter, this.movie.getImages());
             for (int i = 0; i < valuelist.size(); i++) {

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/dvds.properties
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/dvds.properties	2004-12-08 18:41:22 UTC (rev 224)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/dvds.properties	2004-12-08 18:45:55 UTC (rev 225)
@@ -5,4 +5,5 @@
 dvd.groupoverview.searchlabel =Suche nach
 dvd.groupoverview.columnid =ID
 dvd.groupoverview.columntitle =Titel
-dvd.groupoverview.columndate =Erscheinungsdatum
\ No newline at end of file
+dvd.groupoverview.columnstatus =Status
+dvd.groupoverview.columncondition =Zustand
\ No newline at end of file

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/movies.properties
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/movies.properties	2004-12-08 18:41:22 UTC (rev 224)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/movies.properties	2004-12-08 18:45:55 UTC (rev 225)
@@ -22,6 +22,7 @@
 movies.groupdetail.labelgenres =Liste der Genre
 movies.groupdetail.labelimages =Liste der Bilder
 movies.groupdetail.labeldescription =Beschreibung
+movies.groupdetail.labelmainimage =Hauptbild
 movies.groupdetail.textdate =(Beispiel: 01.01.2001)
 movies.groupdetail.datebuttonfinish=Fertig
 movies.groupdetail.datedialogtitle=Bitte w?hlen Sie ein Datum aus
@@ -65,10 +66,12 @@
 movies.dialog.title.genre=Genre
 movies.dialog.title.image=Bilder
 movies.dialog.title.director=Directors
+movies.dialog.title.mainimage =Hauptbild
 
 movies.dialog.search.tooltip=Geben Sie hier bitte Ihren Suchbegriff ein
 movies.dialog.search.buttonname=Suchen
 movies.dialog.buttonadd=Hinzuf?gen
+movies.dialog.buttonadd.mainimage =Ausw?hlen
 movies.dialog.buttonfinish=Fertig
 movies.dialog.column.id=id
 movies.dialog.column.lastname.actor=Nachname
@@ -85,3 +88,4 @@
 movies.dialog.labeltable.genre=W?hlen Sie ein Genre:
 movies.dialog.labeltable.image=W?hlen Sie ein Bild:
 movies.dialog.labeltable.director=W?hlen Sie einen Director:
+movies.dialog.labeltable.mainimage=W?hlen Sie das Hauptbild:

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java	2004-12-08 18:41:22 UTC (rev 224)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java	2004-12-08 18:45:55 UTC (rev 225)
@@ -1875,13 +1875,19 @@
 	
 	            //if filter not empty
 	            if (filter != null && !filter.equalsIgnoreCase("")) {
+	                criteria.createAlias("actors","a");
+	                criteria.createAlias("director","d");
 	                any.add(Expression.like("title", "%"+filter+"%"));
-	                any.add(Expression.like("releaseDate", "%"+filter+"%"));
+	                //any.add(Expression.like("releaseDate", "%"+filter+"%"));
 	                any.add(Expression.like("description", "%"+filter+"%"));
-	                any.add(Expression.like("actors", "%"+filter+"%"));
-	                any.add(Expression.like("runtime", "%"+filter+"%"));
-	                any.add(Expression.like("director", "%"+filter+"%"));
-	                any.add(Expression.like("genres", "%"+filter+"%"));
+	                //any.add(Expression.like("runtime", "%"+filter+"%"));
+
+	                any.add(Expression.like("a.lastName", "%"+filter+"%"));
+	                any.add(Expression.like("a.firstName", "%"+filter+"%"));
+	                any.add(Expression.like("d.lastName", "%"+filter+"%"));
+	                any.add(Expression.like("d.firstName", "%"+filter+"%"));
+	                //any.add(Expression.like("director", "%"+filter+"%"));
+	                //any.add(Expression.like("genres", "%"+filter+"%"));
 	                //any.add(Expression.like("images", "%"+filter+"%"));
 	                //maybe we are searching for the id?
 	                try {



From pschneider at sheep.berlios.de  Wed Dec  8 19:52:30 2004
From: pschneider at sheep.berlios.de (Philipp Schneider at BerliOS)
Date: Wed, 8 Dec 2004 19:52:30 +0100
Subject: [Provirent-svn-commit] r226 - in project_src/provirent_hibernate/src: de/hsharz/provirent de/hsharz/provirent/management/gui de/hsharz/provirent/objects de/hsharz/provirent/persistence test/provirent/hibernate
Message-ID: <200412081852.iB8IqUOK014235@sheep.berlios.de>

Author: pschneider
Date: 2004-12-08 19:52:28 +0100 (Wed, 08 Dec 2004)
New Revision: 226

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/Util.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeCustomer.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeDVD.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeImage.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositePayment.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CopyOfCompositeMovie.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Dvd.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/objects/OrderItem.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java
   project_src/provirent_hibernate/src/test/provirent/hibernate/TestAudioFormat.java
   project_src/provirent_hibernate/src/test/provirent/hibernate/TestCustomer.java
   project_src/provirent_hibernate/src/test/provirent/hibernate/TestDvd.java
   project_src/provirent_hibernate/src/test/provirent/hibernate/TestImage.java
   project_src/provirent_hibernate/src/test/provirent/hibernate/TestMovie.java
Log:
- unused imports entfernt
- automatisch formatieren lassen

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/Util.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/Util.java	2004-12-08 18:45:55 UTC (rev 225)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/Util.java	2004-12-08 18:52:28 UTC (rev 226)
@@ -38,7 +38,6 @@
 import java.text.SimpleDateFormat;
 import java.util.Calendar;
 import java.util.Properties;
-import java.text.DateFormat;
 
 import javax.mail.Address;
 import javax.mail.Message;

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeCustomer.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeCustomer.java	2004-12-08 18:45:55 UTC (rev 225)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeCustomer.java	2004-12-08 18:52:28 UTC (rev 226)
@@ -40,7 +40,6 @@
 
 import com.cloudgarden.resource.SWTResourceManager;
 
-import de.hsharz.provirent.Util;
 import de.hsharz.provirent.objects.Customer;
 import de.hsharz.provirent.objects.Person;
 import de.hsharz.provirent.persistence.DataBaseException;

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeDVD.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeDVD.java	2004-12-08 18:45:55 UTC (rev 225)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeDVD.java	2004-12-08 18:52:28 UTC (rev 226)
@@ -5,7 +5,12 @@
 import java.util.ResourceBundle;
 
 import org.apache.log4j.Logger;
-import org.eclipse.swt.layout.FillLayout;
+import org.eclipse.swt.SWT;
+import org.eclipse.swt.custom.SashForm;
+import org.eclipse.swt.events.FocusAdapter;
+import org.eclipse.swt.events.FocusEvent;
+import org.eclipse.swt.events.SelectionAdapter;
+import org.eclipse.swt.events.SelectionEvent;
 import org.eclipse.swt.layout.GridData;
 import org.eclipse.swt.layout.GridLayout;
 import org.eclipse.swt.widgets.Composite;
@@ -18,14 +23,6 @@
 import org.eclipse.swt.widgets.Table;
 import org.eclipse.swt.widgets.TableColumn;
 import org.eclipse.swt.widgets.Text;
-import org.eclipse.swt.custom.SashForm;
-import org.eclipse.swt.events.FocusAdapter;
-import org.eclipse.swt.events.FocusEvent;
-import org.eclipse.swt.events.SelectionAdapter;
-import org.eclipse.swt.events.SelectionEvent;
-import org.eclipse.swt.graphics.Point;
-import org.eclipse.swt.graphics.Rectangle;
-import org.eclipse.swt.SWT;
 
 import com.cloudgarden.resource.SWTResourceManager;
 

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeImage.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeImage.java	2004-12-08 18:45:55 UTC (rev 225)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeImage.java	2004-12-08 18:52:28 UTC (rev 226)
@@ -44,7 +44,6 @@
 
 import com.cloudgarden.resource.SWTResourceManager;
 
-import de.hsharz.provirent.objects.Actor;
 import de.hsharz.provirent.persistence.DataBaseException;
 import de.hsharz.provirent.persistence.Database;
 
@@ -61,1260 +60,1255 @@
  */
 public class CompositeImage extends AbstractComposite {
 
-    {
-        //Register as a resource user - SWTResourceManager will
-        //handle the obtaining and disposing of resources
-        SWTResourceManager.registerResourceUser(this);
-    }
+	{
+		//Register as a resource user - SWTResourceManager will
+		//handle the obtaining and disposing of resources
+		SWTResourceManager.registerResourceUser(this);
+	}
 
-    /**
-     * Logger for this class
-     */
-    private static final Logger logger = Logger.getLogger(CompositeImage.class);
+	/**
+	 * Logger for this class
+	 */
+	private static final Logger logger = Logger.getLogger(CompositeImage.class);
 
-    private Label labelImagesResize;
+	private Label labelImagesResize;
 
-    private Scale scaleResize;
+	private Scale scaleResize;
 
-    private Text textFileUrl;
+	private Text textFileUrl;
 
-    private Button buttonSelectFile;
+	private Button buttonSelectFile;
 
-    private Label labelImagesFile;
+	private Label labelImagesFile;
 
-    private SashForm sashForm1;
+	private SashForm sashForm1;
 
-    private SashForm sashForm2;
+	private SashForm sashForm2;
 
-    private de.hsharz.provirent.objects.Image localImage;
+	private de.hsharz.provirent.objects.Image localImage;
 
-    private ImageData original_imagedata;
+	private ImageData original_imagedata;
 
-    private ImageData scaled_imagedata;
+	private ImageData scaled_imagedata;
 
-    private int iy, ix = 0;
+	private int iy, ix = 0;
 
-    private String currentDir = "";
+	private String currentDir = "";
 
-    private Canvas canvasImg;
+	private Canvas canvasImg;
 
-    private final static int MODE_VIEW = 0;
+	private final static int MODE_VIEW = 0;
 
-    private final static int MODE_ADD = 1;
+	private final static int MODE_ADD = 1;
 
-    private Composite compositeButtons;
+	private Composite compositeButtons;
 
-    private Button buttonImageCancel;
+	private Button buttonImageCancel;
 
-    private Button buttonImageSave;
+	private Button buttonImageSave;
 
-    private Button buttonImageFill;
+	private Button buttonImageFill;
 
-    private Button buttonImageDelete;
+	private Button buttonImageDelete;
 
-    private Button buttonImageEdit;
+	private Button buttonImageEdit;
 
-    private Button buttonImageNew;
+	private Button buttonImageNew;
 
-    private final static int MODE_EDIT = 2;
+	private final static int MODE_EDIT = 2;
 
-    private Table tableImagesOverview;
+	private Table tableImagesOverview;
 
-    private TableColumn tableImagesOverview_ColumnID;
+	private TableColumn tableImagesOverview_ColumnID;
 
-    private TableColumn tableImagesOverview_ColumnThumb;
+	private TableColumn tableImagesOverview_ColumnThumb;
 
-    private TableColumn tableImagesOverview_ColumnName;
+	private TableColumn tableImagesOverview_ColumnName;
 
-    private TableColumn tableImagesOverview_ColumnDescription;
+	private TableColumn tableImagesOverview_ColumnDescription;
 
-    private Group groupImage;
+	private Group groupImage;
 
-    private Group groupImagesOverview;
+	private Group groupImagesOverview;
 
-    private Group groupImagesDetail;
+	private Group groupImagesDetail;
 
-    private Text textImagesSearch;
+	private Text textImagesSearch;
 
-    private Text textImagesID;
+	private Text textImagesID;
 
-    private Text textImagesName;
+	private Text textImagesName;
 
-    private Text textImagesDescription;
+	private Text textImagesDescription;
 
-    private Label labelImagesSearch;
+	private Label labelImagesSearch;
 
-    private Label labelImagesID;
+	private Label labelImagesID;
 
-    private Label labelImagesFName;
+	private Label labelImagesFName;
 
-    private Label labelImagesDescription;
+	private Label labelImagesDescription;
 
-    private int mode_image;
+	private int mode_image;
 
-    private StatusLineStyledText statusLine;
+	private StatusLineStyledText statusLine;
 
-    private ResourceBundle l;
+	private ResourceBundle l;
 
-    private Composite parent;
+	private Composite parent;
 
-    /*
-     * ?ndert die Sprache aller Elemente
-     * 
-     * @see de.hsharz.provirent.managment.gui.AbstractComposite#changeLanguage(java.util.Locale)
-     */
-    public void changeLanguage(Locale locale) {
+	/*
+	 * ?ndert die Sprache aller Elemente
+	 * 
+	 * @see de.hsharz.provirent.managment.gui.AbstractComposite#changeLanguage(java.util.Locale)
+	 */
+	public void changeLanguage(Locale locale) {
 
-    }
+	}
 
-    /*
-     * Init die Sprache (properties Datei)
-     * 
-     * @see de.hsharz.provirent.managment.gui.AbstractComposite#initLanguage(java.util.Locale)
-     */
-    public void initLanguage(Locale locale) {
+	/*
+	 * Init die Sprache (properties Datei)
+	 * 
+	 * @see de.hsharz.provirent.managment.gui.AbstractComposite#initLanguage(java.util.Locale)
+	 */
+	public void initLanguage(Locale locale) {
 
-        l = PropertyResourceBundle.getBundle(
-                "de.hsharz.provirent.management.gui.language.images", locale);
+		l = PropertyResourceBundle.getBundle(
+				"de.hsharz.provirent.management.gui.language.images", locale);
 
-    }
+	}
 
-    /**
-     * Auto-generated main method to display this
-     * org.eclipse.swt.widgets.Composite inside a new Shell.
-     */
-    public static void main(String[] args) {
-        showGUI();
-    }
+	/**
+	 * Auto-generated main method to display this
+	 * org.eclipse.swt.widgets.Composite inside a new Shell.
+	 */
+	public static void main(String[] args) {
+		showGUI();
+	}
 
-    /**
-     * Auto-generated method to display this org.eclipse.swt.widgets.Composite
-     * inside a new Shell.
-     */
-    public static void showGUI() {
-        Display display = Display.getDefault();
-        Shell shell = new Shell(display);
+	/**
+	 * Auto-generated method to display this org.eclipse.swt.widgets.Composite
+	 * inside a new Shell.
+	 */
+	public static void showGUI() {
+		Display display = Display.getDefault();
+		Shell shell = new Shell(display);
 
-        CompositeImage p = new CompositeImage(shell, SWT.NONE, null, Locale
-                .getDefault());
+		CompositeImage p = new CompositeImage(shell, SWT.NONE, null, Locale
+				.getDefault());
 
-        shell.open();
-        while (!shell.isDisposed()) {
-            if (!display.readAndDispatch())
-                display.sleep();
-        }
-    }
+		shell.open();
+		while (!shell.isDisposed()) {
+			if (!display.readAndDispatch())
+				display.sleep();
+		}
+	}
 
-    public CompositeImage(Composite p, int style, StatusLineStyledText status,
-            Locale l) {
-        super(p, style, status, l);
-        parent = p;
-        //Statusline wird gestzt
-        statusLine = status;
+	public CompositeImage(Composite p, int style, StatusLineStyledText status,
+			Locale l) {
+		super(p, style, status, l);
+		parent = p;
+		//Statusline wird gestzt
+		statusLine = status;
 
-        //sprache wird init
-        initLanguage(l);
+		//sprache wird init
+		initLanguage(l);
 
-        initGUI();
-    }
+		initGUI();
+	}
 
-    private void initGUI() {
-        {
-        }
-        if (logger.isDebugEnabled()) {
-            logger.debug("initGUI() - start");
-        }
+	private void initGUI() {
+		{
+		}
+		if (logger.isDebugEnabled()) {
+			logger.debug("initGUI() - start");
+		}
 
-        this.setLayout(new GridLayout());
-        this.setSize(816, 540);
-        {
-            groupImage = new Group(this, SWT.NONE);
-            GridLayout groupActorLayout = new GridLayout();
-            GridData groupActorLData = new GridData();
-            groupActorLData.grabExcessHorizontalSpace = true;
-            groupActorLData.grabExcessVerticalSpace = true;
-            groupActorLData.horizontalAlignment = GridData.FILL;
-            groupActorLData.verticalAlignment = GridData.FILL;
-            groupImage.setLayoutData(groupActorLData);
-            groupActorLayout.makeColumnsEqualWidth = true;
-            groupImage.setLayout(groupActorLayout);
-            groupImage.setText(l.getString("images.group.label"));
-            {
-                sashForm2 = new SashForm(groupImage, SWT.NONE);
-                GridData sashForm2LData = new GridData();
-                sashForm2LData.verticalAlignment = GridData.FILL;
-                sashForm2LData.horizontalAlignment = GridData.FILL;
-                sashForm2LData.grabExcessHorizontalSpace = true;
-                sashForm2LData.grabExcessVerticalSpace = true;
-                sashForm2.setLayoutData(sashForm2LData);
+		this.setLayout(new GridLayout());
+		this.setSize(816, 540);
+		{
+			groupImage = new Group(this, SWT.NONE);
+			GridLayout groupActorLayout = new GridLayout();
+			GridData groupActorLData = new GridData();
+			groupActorLData.grabExcessHorizontalSpace = true;
+			groupActorLData.grabExcessVerticalSpace = true;
+			groupActorLData.horizontalAlignment = GridData.FILL;
+			groupActorLData.verticalAlignment = GridData.FILL;
+			groupImage.setLayoutData(groupActorLData);
+			groupActorLayout.makeColumnsEqualWidth = true;
+			groupImage.setLayout(groupActorLayout);
+			groupImage.setText(l.getString("images.group.label"));
+			{
+				sashForm2 = new SashForm(groupImage, SWT.NONE);
+				GridData sashForm2LData = new GridData();
+				sashForm2LData.verticalAlignment = GridData.FILL;
+				sashForm2LData.horizontalAlignment = GridData.FILL;
+				sashForm2LData.grabExcessHorizontalSpace = true;
+				sashForm2LData.grabExcessVerticalSpace = true;
+				sashForm2.setLayoutData(sashForm2LData);
 
-            }
-            // init the rest of the layout
-            initImagesOverview();
-            initImagesDetail();
-            refreshImageOverviewTable(textImagesSearch.getText());
-        }
+			}
+			// init the rest of the layout
+			initImagesOverview();
+			initImagesDetail();
+			refreshImageOverviewTable(textImagesSearch.getText());
+		}
 
-        this.layout();
+		this.layout();
 
-        if (logger.isDebugEnabled()) {
-            logger.debug("initGUI() - end");
-        }
-    }
+		if (logger.isDebugEnabled()) {
+			logger.debug("initGUI() - end");
+		}
+	}
 
-    private void initImagesOverview() {
-        //	  Group Images Overview
+	private void initImagesOverview() {
+		//	  Group Images Overview
 
-        groupImagesOverview = new Group(sashForm2, SWT.NONE);
-        GridLayout group1Layout = new GridLayout();
-        group1Layout.numColumns = 8;
-        groupImagesOverview.setLayout(group1Layout);
-        groupImagesOverview.setText(l.getString("images.groupoverview.label"));
+		groupImagesOverview = new Group(sashForm2, SWT.NONE);
+		GridLayout group1Layout = new GridLayout();
+		group1Layout.numColumns = 8;
+		groupImagesOverview.setLayout(group1Layout);
+		groupImagesOverview.setText(l.getString("images.groupoverview.label"));
 
-        {// table Images Overview
-            tableImagesOverview = new Table(groupImagesOverview, SWT.SINGLE
-                    | SWT.FULL_SELECTION | SWT.V_SCROLL | SWT.BORDER);
-            GridData tableImagesOverviewLData = new GridData();
-            tableImagesOverview.setHeaderVisible(true);
-            tableImagesOverview.setLinesVisible(true);
-            tableImagesOverviewLData.horizontalAlignment = GridData.FILL;
-            tableImagesOverviewLData.verticalAlignment = GridData.FILL;
-            tableImagesOverviewLData.horizontalSpan = 8;
-            tableImagesOverviewLData.grabExcessHorizontalSpace = true;
-            tableImagesOverviewLData.grabExcessVerticalSpace = true;
-            tableImagesOverview.setLayoutData(tableImagesOverviewLData);
-            tableImagesOverview.addSelectionListener(new SelectionAdapter() {
-                public void widgetSelected(SelectionEvent evt) {
-                    if (logger.isDebugEnabled()) {
-                        logger.debug("widgetSelected(SelectionEvent evt = "
-                                + evt + ") - start");
-                    }
+		{// table Images Overview
+			tableImagesOverview = new Table(groupImagesOverview, SWT.SINGLE
+					| SWT.FULL_SELECTION | SWT.V_SCROLL | SWT.BORDER);
+			GridData tableImagesOverviewLData = new GridData();
+			tableImagesOverview.setHeaderVisible(true);
+			tableImagesOverview.setLinesVisible(true);
+			tableImagesOverviewLData.horizontalAlignment = GridData.FILL;
+			tableImagesOverviewLData.verticalAlignment = GridData.FILL;
+			tableImagesOverviewLData.horizontalSpan = 8;
+			tableImagesOverviewLData.grabExcessHorizontalSpace = true;
+			tableImagesOverviewLData.grabExcessVerticalSpace = true;
+			tableImagesOverview.setLayoutData(tableImagesOverviewLData);
+			tableImagesOverview.addSelectionListener(new SelectionAdapter() {
+				public void widgetSelected(SelectionEvent evt) {
+					if (logger.isDebugEnabled()) {
+						logger.debug("widgetSelected(SelectionEvent evt = "
+								+ evt + ") - start");
+					}
 
-                    int index = tableImagesOverview.getSelectionIndex();
+					int index = tableImagesOverview.getSelectionIndex();
 
-                    //es wurde ein Element aus Tabelle ausgewaehlt jetzt muss
-                    // die
-                    //Detailansicht aktualisiert werden
-                    refreshImagesDetail(tableImagesOverview.getItem(index)
-                            .getText(0));
+					//es wurde ein Element aus Tabelle ausgewaehlt jetzt muss
+					// die
+					//Detailansicht aktualisiert werden
+					refreshImagesDetail(tableImagesOverview.getItem(index)
+							.getText(0));
 
-                    buttonImageDelete.setEnabled(true);
-                    buttonImageEdit.setEnabled(true);
+					buttonImageDelete.setEnabled(true);
+					buttonImageEdit.setEnabled(true);
 
-                    if (logger.isDebugEnabled()) {
-                        logger.debug("widgetSelected(SelectionEvent) - end");
-                    }
-                }
-            });
-            {
-                tableImagesOverview_ColumnID = new TableColumn(
-                        tableImagesOverview, SWT.CENTER);
-                tableImagesOverview_ColumnID.setText(l
-                        .getString("images.groupoverview.columnid"));
-                tableImagesOverview_ColumnID.setWidth(0);
-                tableImagesOverview_ColumnID.setResizable(false);
+					if (logger.isDebugEnabled()) {
+						logger.debug("widgetSelected(SelectionEvent) - end");
+					}
+				}
+			});
+			{
+				tableImagesOverview_ColumnID = new TableColumn(
+						tableImagesOverview, SWT.CENTER);
+				tableImagesOverview_ColumnID.setText(l
+						.getString("images.groupoverview.columnid"));
+				tableImagesOverview_ColumnID.setWidth(0);
+				tableImagesOverview_ColumnID.setResizable(false);
 
-                tableImagesOverview_ColumnThumb = new TableColumn(
-                        tableImagesOverview, SWT.CENTER);
-                tableImagesOverview_ColumnThumb.setText(l
-                        .getString("images.groupoverview.thumbnail"));
-                tableImagesOverview_ColumnThumb.setWidth(75);
+				tableImagesOverview_ColumnThumb = new TableColumn(
+						tableImagesOverview, SWT.CENTER);
+				tableImagesOverview_ColumnThumb.setText(l
+						.getString("images.groupoverview.thumbnail"));
+				tableImagesOverview_ColumnThumb.setWidth(75);
 
-                tableImagesOverview_ColumnName = new TableColumn(
-                        tableImagesOverview, SWT.CENTER);
-                tableImagesOverview_ColumnName.setText(l
-                        .getString("images.groupoverview.name"));
-                tableImagesOverview_ColumnName.setWidth(80);
+				tableImagesOverview_ColumnName = new TableColumn(
+						tableImagesOverview, SWT.CENTER);
+				tableImagesOverview_ColumnName.setText(l
+						.getString("images.groupoverview.name"));
+				tableImagesOverview_ColumnName.setWidth(80);
 
-                tableImagesOverview_ColumnDescription = new TableColumn(
-                        tableImagesOverview, SWT.CENTER);
-                tableImagesOverview_ColumnDescription.setText(l
-                        .getString("images.groupoverview.description"));
-                tableImagesOverview_ColumnDescription.setWidth(150);
+				tableImagesOverview_ColumnDescription = new TableColumn(
+						tableImagesOverview, SWT.CENTER);
+				tableImagesOverview_ColumnDescription.setText(l
+						.getString("images.groupoverview.description"));
+				tableImagesOverview_ColumnDescription.setWidth(150);
 
-            }
-        }
-        // table Images Overview
-        // Search
-        {
-            //label for Search
-            labelImagesSearch = new Label(groupImagesOverview, SWT.NONE);
-            labelImagesSearch.setText(l
-                    .getString("images.groupoverview.searchlabel")
-                    + ":");
-            GridData labelImagesResizeLData = new GridData();
-            labelImagesResizeLData.horizontalSpan = 3;
-            labelImagesSearch.setLayoutData(labelImagesResizeLData);
+			}
+		}
+		// table Images Overview
+		// Search
+		{
+			//label for Search
+			labelImagesSearch = new Label(groupImagesOverview, SWT.NONE);
+			labelImagesSearch.setText(l
+					.getString("images.groupoverview.searchlabel")
+					+ ":");
+			GridData labelImagesResizeLData = new GridData();
+			labelImagesResizeLData.horizontalSpan = 3;
+			labelImagesSearch.setLayoutData(labelImagesResizeLData);
 
-            //text Search
-            textImagesSearch = new Text(groupImagesOverview, SWT.BORDER);
-            GridData text2LData = new GridData();
-            textImagesSearch.addFocusListener(new FocusAdapter() {
-                public void focusLost(FocusEvent evt) {
-                    if (logger.isDebugEnabled()) {
-                        logger.debug("focusLost(FocusEvent evt = " + evt + " "
-                                + textImagesSearch.getText() + ") - start");
-                    }
+			//text Search
+			textImagesSearch = new Text(groupImagesOverview, SWT.BORDER);
+			GridData text2LData = new GridData();
+			textImagesSearch.addFocusListener(new FocusAdapter() {
+				public void focusLost(FocusEvent evt) {
+					if (logger.isDebugEnabled()) {
+						logger.debug("focusLost(FocusEvent evt = " + evt + " "
+								+ textImagesSearch.getText() + ") - start");
+					}
 
-                    refreshImageOverviewTable(textImagesSearch.getText());
+					refreshImageOverviewTable(textImagesSearch.getText());
 
-                    if (logger.isDebugEnabled()) {
-                        logger.debug("focusLost(FocusEvent) - end");
-                    }
-                }
-            });
-            textImagesSearch.addListener(SWT.DefaultSelection, new Listener() {
-                public void handleEvent(Event e) {
-                    if (logger.isDebugEnabled()) {
-                        logger.debug("handleEvent(Event e = " + e + " "
-                                + textImagesSearch.getText() + ") - start");
-                    }
+					if (logger.isDebugEnabled()) {
+						logger.debug("focusLost(FocusEvent) - end");
+					}
+				}
+			});
+			textImagesSearch.addListener(SWT.DefaultSelection, new Listener() {
+				public void handleEvent(Event e) {
+					if (logger.isDebugEnabled()) {
+						logger.debug("handleEvent(Event e = " + e + " "
+								+ textImagesSearch.getText() + ") - start");
+					}
 
-                    refreshImageOverviewTable(textImagesSearch.getText());
+					refreshImageOverviewTable(textImagesSearch.getText());
 
-                    if (logger.isDebugEnabled()) {
-                        logger.debug("handleEvent(Event) - end");
-                    }
-                }
-            });
-            text2LData.horizontalAlignment = GridData.FILL;
-            text2LData.horizontalSpan = 5;
-            text2LData.grabExcessHorizontalSpace = true;
-            textImagesSearch.setLayoutData(text2LData);
-        }// Search
+					if (logger.isDebugEnabled()) {
+						logger.debug("handleEvent(Event) - end");
+					}
+				}
+			});
+			text2LData.horizontalAlignment = GridData.FILL;
+			text2LData.horizontalSpan = 5;
+			text2LData.grabExcessHorizontalSpace = true;
+			textImagesSearch.setLayoutData(text2LData);
+		}// Search
 
-    }
+	}
 
-    private void initImagesDetail() {
-        // Group Images Detail
-        {
-            groupImagesDetail = new Group(sashForm2, SWT.NONE);
-            GridLayout group2Layout = new GridLayout();
-            GridData group2LData = new GridData();
-            group2Layout.verticalSpacing = 15;
-            group2Layout.numColumns = 6;
-            groupImagesDetail.setText(l.getString("images.groupdetail.label"));
-            FormData formData = new FormData();
-            groupImagesDetail.setLayout(group2Layout);
-            formData.right = new FormAttachment(100, 100, -5);
-            formData.top = new FormAttachment(0, 100, 5);
-            formData.bottom = new FormAttachment(100, 100, -5);
-            groupImagesDetail.setLayoutData(formData);
+	private void initImagesDetail() {
+		// Group Images Detail
+		{
+			groupImagesDetail = new Group(sashForm2, SWT.NONE);
+			GridLayout group2Layout = new GridLayout();
+			GridData group2LData = new GridData();
+			group2Layout.verticalSpacing = 15;
+			group2Layout.numColumns = 6;
+			groupImagesDetail.setText(l.getString("images.groupdetail.label"));
+			FormData formData = new FormData();
+			groupImagesDetail.setLayout(group2Layout);
+			formData.right = new FormAttachment(100, 100, -5);
+			formData.top = new FormAttachment(0, 100, 5);
+			formData.bottom = new FormAttachment(100, 100, -5);
+			groupImagesDetail.setLayoutData(formData);
 
-            // labels and buttons for detail
+			// labels and buttons for detail
 
-            labelImagesID = new Label(groupImagesDetail, SWT.NONE);
-            labelImagesID.setText(l.getString("images.groupdetail.labelid")
-                    + ":");
-            labelImagesID.setSize(125, 15);
-            GridData formData2 = new GridData();
-            formData2.widthHint = 125;
-            formData2.heightHint = 15;
-            formData2.horizontalSpan = 2;
-            labelImagesID.setLayoutData(formData2);
-        }
-        {
-            textImagesID = new Text(groupImagesDetail, SWT.READ_ONLY
-                    | SWT.BORDER);
-            GridData text1LData1 = new GridData();
-            text1LData1.horizontalAlignment = GridData.FILL;
-            text1LData1.heightHint = 13;
-            text1LData1.horizontalSpan = 4;
-            text1LData1.grabExcessHorizontalSpace = true;
-            textImagesID.setLayoutData(text1LData1);
-        }
-        {
-            labelImagesFName = new Label(groupImagesDetail, SWT.NONE);
-            labelImagesFName.setText(l
-                    .getString("images.groupdetail.labelname")
-                    + ":");
-            labelImagesFName.setSize(125, 15);
-            GridData labelActorNameLData = new GridData();
-            labelActorNameLData.widthHint = 125;
-            labelActorNameLData.heightHint = 15;
-            labelActorNameLData.horizontalSpan = 2;
-            labelImagesFName.setLayoutData(labelActorNameLData);
-        }
-        {
-            textImagesName = new Text(groupImagesDetail, SWT.READ_ONLY
-                    | SWT.BORDER);
-            GridData text1LData2 = new GridData();
-            text1LData2.horizontalAlignment = GridData.FILL;
-            text1LData2.heightHint = 13;
-            text1LData2.horizontalSpan = 4;
-            text1LData2.grabExcessHorizontalSpace = true;
-            textImagesName.setLayoutData(text1LData2);
-        }
-        {
-            labelImagesDescription = new Label(groupImagesDetail, SWT.NONE);
-            labelImagesDescription.setText(l
-                    .getString("images.groupdetail.labeldescription")
-                    + ":");
-            labelImagesDescription.setSize(125, 15);
-            GridData labelImagesFileLData1 = new GridData();
-            labelImagesFileLData1.widthHint = 125;
-            labelImagesFileLData1.heightHint = 15;
-            labelImagesFileLData1.horizontalSpan = 2;
-            labelImagesFileLData1.verticalAlignment = GridData.BEGINNING;
-            labelImagesDescription.setLayoutData(labelImagesFileLData1);
-        }
-        {
-            textImagesDescription = new Text(groupImagesDetail, SWT.MULTI
-                    | SWT.V_SCROLL | SWT.BORDER);
-            textImagesDescription.setEditable(false);
+			labelImagesID = new Label(groupImagesDetail, SWT.NONE);
+			labelImagesID.setText(l.getString("images.groupdetail.labelid")
+					+ ":");
+			labelImagesID.setSize(125, 15);
+			GridData formData2 = new GridData();
+			formData2.widthHint = 125;
+			formData2.heightHint = 15;
+			formData2.horizontalSpan = 2;
+			labelImagesID.setLayoutData(formData2);
+		}
+		{
+			textImagesID = new Text(groupImagesDetail, SWT.READ_ONLY
+					| SWT.BORDER);
+			GridData text1LData1 = new GridData();
+			text1LData1.horizontalAlignment = GridData.FILL;
+			text1LData1.heightHint = 13;
+			text1LData1.horizontalSpan = 4;
+			text1LData1.grabExcessHorizontalSpace = true;
+			textImagesID.setLayoutData(text1LData1);
+		}
+		{
+			labelImagesFName = new Label(groupImagesDetail, SWT.NONE);
+			labelImagesFName.setText(l
+					.getString("images.groupdetail.labelname")
+					+ ":");
+			labelImagesFName.setSize(125, 15);
+			GridData labelActorNameLData = new GridData();
+			labelActorNameLData.widthHint = 125;
+			labelActorNameLData.heightHint = 15;
+			labelActorNameLData.horizontalSpan = 2;
+			labelImagesFName.setLayoutData(labelActorNameLData);
+		}
+		{
+			textImagesName = new Text(groupImagesDetail, SWT.READ_ONLY
+					| SWT.BORDER);
+			GridData text1LData2 = new GridData();
+			text1LData2.horizontalAlignment = GridData.FILL;
+			text1LData2.heightHint = 13;
+			text1LData2.horizontalSpan = 4;
+			text1LData2.grabExcessHorizontalSpace = true;
+			textImagesName.setLayoutData(text1LData2);
+		}
+		{
+			labelImagesDescription = new Label(groupImagesDetail, SWT.NONE);
+			labelImagesDescription.setText(l
+					.getString("images.groupdetail.labeldescription")
+					+ ":");
+			labelImagesDescription.setSize(125, 15);
+			GridData labelImagesFileLData1 = new GridData();
+			labelImagesFileLData1.widthHint = 125;
+			labelImagesFileLData1.heightHint = 15;
+			labelImagesFileLData1.horizontalSpan = 2;
+			labelImagesFileLData1.verticalAlignment = GridData.BEGINNING;
+			labelImagesDescription.setLayoutData(labelImagesFileLData1);
+		}
+		{
+			textImagesDescription = new Text(groupImagesDetail, SWT.MULTI
+					| SWT.V_SCROLL | SWT.BORDER);
+			textImagesDescription.setEditable(false);
 
-            GridData text1LData3 = new GridData();
-            text1LData3.horizontalAlignment = GridData.FILL;
-            text1LData3.heightHint = 36;
-            text1LData3.horizontalSpan = 4;
-            text1LData3.grabExcessHorizontalSpace = true;
-            textImagesDescription.setLayoutData(text1LData3);
-        }// label and buttons for detail
-        {
-            labelImagesFile = new Label(groupImagesDetail, SWT.NONE);
-            labelImagesFile.setText(l
-                    .getString("images.groupdetail.labelselectfile")
-                    + ":");
-            labelImagesFile.setSize(125, 15);
-            GridData labelImagesFileLData = new GridData();
-            labelImagesFileLData.widthHint = 125;
-            labelImagesFileLData.heightHint = 15;
-            labelImagesFileLData.horizontalSpan = 2;
-            labelImagesFile.setLayoutData(labelImagesFileLData);
-        }
-        {
-            textFileUrl = new Text(groupImagesDetail, SWT.NONE);
-            textFileUrl.setEditable(false);
-            GridData text1LData = new GridData();
-            text1LData.widthHint = 105;
-            text1LData.heightHint = 15;
-            text1LData.horizontalSpan = 2;
-            textFileUrl.setLayoutData(text1LData);
-        }
-        {
-            //Button for selecting a new image file from filesystem
-            buttonSelectFile = new Button(groupImagesDetail, SWT.PUSH
-                    | SWT.CENTER);
-            buttonSelectFile.setText(l
-                    .getString("images.groupdetail.buttonselectfile"));
-            currentDir = l.getString("images.groupdetail.fileselect.title");
-            buttonSelectFile.setEnabled(false);
+			GridData text1LData3 = new GridData();
+			text1LData3.horizontalAlignment = GridData.FILL;
+			text1LData3.heightHint = 36;
+			text1LData3.horizontalSpan = 4;
+			text1LData3.grabExcessHorizontalSpace = true;
+			textImagesDescription.setLayoutData(text1LData3);
+		}// label and buttons for detail
+		{
+			labelImagesFile = new Label(groupImagesDetail, SWT.NONE);
+			labelImagesFile.setText(l
+					.getString("images.groupdetail.labelselectfile")
+					+ ":");
+			labelImagesFile.setSize(125, 15);
+			GridData labelImagesFileLData = new GridData();
+			labelImagesFileLData.widthHint = 125;
+			labelImagesFileLData.heightHint = 15;
+			labelImagesFileLData.horizontalSpan = 2;
+			labelImagesFile.setLayoutData(labelImagesFileLData);
+		}
+		{
+			textFileUrl = new Text(groupImagesDetail, SWT.NONE);
+			textFileUrl.setEditable(false);
+			GridData text1LData = new GridData();
+			text1LData.widthHint = 105;
+			text1LData.heightHint = 15;
+			text1LData.horizontalSpan = 2;
+			textFileUrl.setLayoutData(text1LData);
+		}
+		{
+			//Button for selecting a new image file from filesystem
+			buttonSelectFile = new Button(groupImagesDetail, SWT.PUSH
+					| SWT.CENTER);
+			buttonSelectFile.setText(l
+					.getString("images.groupdetail.buttonselectfile"));
+			currentDir = l.getString("images.groupdetail.fileselect.title");
+			buttonSelectFile.setEnabled(false);
 
-            GridData buttonSelectFileLData = new GridData();
-            buttonSelectFile.addSelectionListener(new SelectionAdapter() {
-                public void widgetSelected(SelectionEvent evt) {
+			GridData buttonSelectFileLData = new GridData();
+			buttonSelectFile.addSelectionListener(new SelectionAdapter() {
+				public void widgetSelected(SelectionEvent evt) {
 
-                    //file is selected
+					//file is selected
 
-                    String[] filterExtensions = { "*.gif", "*.jpg", "*.*" };
-                    FileDialog fileDialog = new FileDialog(getShell(), SWT.OPEN);
-                    fileDialog.setText(currentDir);
-                    fileDialog
-                            .setFilterPath(l
-                                    .getString("images.groupdetail.fileselect.filterpath"));
+					String[] filterExtensions = { "*.gif", "*.jpg", "*.*" };
+					FileDialog fileDialog = new FileDialog(getShell(), SWT.OPEN);
+					fileDialog.setText(currentDir);
+					fileDialog
+							.setFilterPath(l
+									.getString("images.groupdetail.fileselect.filterpath"));
 
-                    fileDialog.setFilterExtensions(filterExtensions);
-                    //open the dialog and get the returnvalue
-                    String selectedFile = fileDialog.open();
-                    if (selectedFile != null) {
+					fileDialog.setFilterExtensions(filterExtensions);
+					//open the dialog and get the returnvalue
+					String selectedFile = fileDialog.open();
+					if (selectedFile != null) {
 
-                        original_imagedata = scaled_imagedata = new ImageData(
-                                selectedFile);
+						original_imagedata = scaled_imagedata = new ImageData(
+								selectedFile);
 
-                        canvasImg.redraw();
-                        textFileUrl.setText(fileDialog.getFilterPath()
-                                + System.getProperty("file.separator")
-                                + fileDialog.getFileName());
+						canvasImg.redraw();
+						textFileUrl.setText(fileDialog.getFilterPath()
+								+ System.getProperty("file.separator")
+								+ fileDialog.getFileName());
 
-                        //set the Image Name
-                        textImagesName.setText(fileDialog.getFileName()
-                                .substring(
-                                        0,
-                                        fileDialog.getFileName().lastIndexOf(
-                                                ".")));
-                        //save the selected dir
-                        currentDir = fileDialog.getFilterPath();
+						//set the Image Name
+						textImagesName.setText(fileDialog.getFileName()
+								.substring(
+										0,
+										fileDialog.getFileName().lastIndexOf(
+												".")));
+						//save the selected dir
+						currentDir = fileDialog.getFilterPath();
 
-                        //set the resizescale enable
-                        scaleResize.setEnabled(true);
-                        scaleResize.setSelection(100);
-                        scaleResize.setToolTipText(l
-                                .getString("images.groupdetail.resize.size")
-                                + ": 100%");
+						//set the resizescale enable
+						scaleResize.setEnabled(true);
+						scaleResize.setSelection(100);
+						scaleResize.setToolTipText(l
+								.getString("images.groupdetail.resize.size")
+								+ ": 100%");
 
-                        //reset and resize the scrollbars
-                        resetScrollBars();
-                        resizeScrollBars();
-                    }
-                }
-            });
-            buttonSelectFileLData.horizontalAlignment = GridData.FILL;
-            buttonSelectFileLData.grabExcessHorizontalSpace = true;
-            buttonSelectFileLData.horizontalSpan = 2;
-            buttonSelectFile.setLayoutData(buttonSelectFileLData);
+						//reset and resize the scrollbars
+						resetScrollBars();
+						resizeScrollBars();
+					}
+				}
+			});
+			buttonSelectFileLData.horizontalAlignment = GridData.FILL;
+			buttonSelectFileLData.grabExcessHorizontalSpace = true;
+			buttonSelectFileLData.horizontalSpan = 2;
+			buttonSelectFile.setLayoutData(buttonSelectFileLData);
 
-            canvasImg = new Canvas(groupImagesDetail, SWT.NO_REDRAW_RESIZE
-                    | SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER);
-            GridData canvasImgLData = new GridData();
-            canvasImgLData.grabExcessHorizontalSpace = true;
-            canvasImgLData.horizontalAlignment = GridData.FILL;
-            canvasImgLData.horizontalSpan = 6;
-            canvasImgLData.grabExcessVerticalSpace = true;
-            canvasImgLData.verticalAlignment = GridData.FILL;
-            canvasImg.setLayoutData(canvasImgLData);
-            canvasImg.addPaintListener(new PaintListener() {
-                public void paintControl(PaintEvent e) {
-                    if (scaled_imagedata != null) {
-                        paintImage(e);
-                        //e.gc.drawImage(scaledImage, 0, 0);
-                        e.gc.dispose();
-                    }
-                }
-            });
+			canvasImg = new Canvas(groupImagesDetail, SWT.NO_REDRAW_RESIZE
+					| SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER);
+			GridData canvasImgLData = new GridData();
+			canvasImgLData.grabExcessHorizontalSpace = true;
+			canvasImgLData.horizontalAlignment = GridData.FILL;
+			canvasImgLData.horizontalSpan = 6;
+			canvasImgLData.grabExcessVerticalSpace = true;
+			canvasImgLData.verticalAlignment = GridData.FILL;
+			canvasImg.setLayoutData(canvasImgLData);
+			canvasImg.addPaintListener(new PaintListener() {
+				public void paintControl(PaintEvent e) {
+					if (scaled_imagedata != null) {
+						paintImage(e);
+						//e.gc.drawImage(scaledImage, 0, 0);
+						e.gc.dispose();
+					}
+				}
+			});
 
-            // Set up the image canvas scroll bars.
-            ScrollBar horizontal = canvasImg.getHorizontalBar();
-            horizontal.setVisible(true);
-            horizontal.setMinimum(0);
-            horizontal.setEnabled(false);
-            horizontal.addSelectionListener(new SelectionAdapter() {
-                public void widgetSelected(SelectionEvent event) {
-                    scrollHorizontally((ScrollBar) event.widget);
-                }
-            });
-            ScrollBar vertical = canvasImg.getVerticalBar();
-            vertical.setVisible(true);
-            vertical.setMinimum(0);
-            vertical.setEnabled(false);
-            vertical.addSelectionListener(new SelectionAdapter() {
-                public void widgetSelected(SelectionEvent event) {
-                    scrollVertically((ScrollBar) event.widget);
-                }
-            });
+			// Set up the image canvas scroll bars.
+			ScrollBar horizontal = canvasImg.getHorizontalBar();
+			horizontal.setVisible(true);
+			horizontal.setMinimum(0);
+			horizontal.setEnabled(false);
+			horizontal.addSelectionListener(new SelectionAdapter() {
+				public void widgetSelected(SelectionEvent event) {
+					scrollHorizontally((ScrollBar) event.widget);
+				}
+			});
+			ScrollBar vertical = canvasImg.getVerticalBar();
+			vertical.setVisible(true);
+			vertical.setMinimum(0);
+			vertical.setEnabled(false);
+			vertical.addSelectionListener(new SelectionAdapter() {
+				public void widgetSelected(SelectionEvent event) {
+					scrollVertically((ScrollBar) event.widget);
+				}
+			});
 
-        }
-        {
-            labelImagesResize = new Label(groupImagesDetail, SWT.NONE);
-            labelImagesResize.setText(l
-                    .getString("images.groupdetail.labelresize")
-                    + ":");
-            labelImagesResize.setSize(125, 15);
-            GridData labelImagesResizeLData1 = new GridData();
-            labelImagesResizeLData1.widthHint = 125;
-            labelImagesResizeLData1.heightHint = 15;
-            labelImagesResizeLData1.horizontalSpan = 2;
-            labelImagesResize.setLayoutData(labelImagesResizeLData1);
-        }
-        {
-            scaleResize = new Scale(groupImagesDetail, SWT.NONE);
-            GridData scaleResizeLData = new GridData();
-            scaleResize.setEnabled(false);
-            scaleResize.addSelectionListener(new SelectionAdapter() {
-                public void widgetSelected(SelectionEvent evt) {
+		}
+		{
+			labelImagesResize = new Label(groupImagesDetail, SWT.NONE);
+			labelImagesResize.setText(l
+					.getString("images.groupdetail.labelresize")
+					+ ":");
+			labelImagesResize.setSize(125, 15);
+			GridData labelImagesResizeLData1 = new GridData();
+			labelImagesResizeLData1.widthHint = 125;
+			labelImagesResizeLData1.heightHint = 15;
+			labelImagesResizeLData1.horizontalSpan = 2;
+			labelImagesResize.setLayoutData(labelImagesResizeLData1);
+		}
+		{
+			scaleResize = new Scale(groupImagesDetail, SWT.NONE);
+			GridData scaleResizeLData = new GridData();
+			scaleResize.setEnabled(false);
+			scaleResize.addSelectionListener(new SelectionAdapter() {
+				public void widgetSelected(SelectionEvent evt) {
 
-                    //set new tooltip, so User can see the current size
-                    scaleResize.setToolTipText(l
-                            .getString("images.groupdetail.resize.size")
-                            + ": " + scaleResize.getSelection() + "%");
+					//set new tooltip, so User can see the current size
+					scaleResize.setToolTipText(l
+							.getString("images.groupdetail.resize.size")
+							+ ": " + scaleResize.getSelection() + "%");
 
-                    //skale the image
-                    float scaleFaktor = (float) scaleResize.getSelection() / 100;
+					//skale the image
+					float scaleFaktor = (float) scaleResize.getSelection() / 100;
 
-                    int newwidth = (int) (original_imagedata.width * scaleFaktor);
-                    int newheight = (int) (original_imagedata.height * scaleFaktor);
+					int newwidth = (int) (original_imagedata.width * scaleFaktor);
+					int newheight = (int) (original_imagedata.height * scaleFaktor);
 
-                    if (newwidth == 0) {
-                        newwidth = 1;
-                    }
-                    if (newheight == 0) {
-                        newheight = 1;
-                    }
-                    if (logger.isDebugEnabled()) {
-                        logger
-                                .debug("widgetSelected(SelectionEvent) - newwidth: "
-                                        + newwidth + " newheight: " + newheight);
-                    }
-                    scaled_imagedata = original_imagedata.scaledTo(newwidth,
-                            newheight);
+					if (newwidth == 0) {
+						newwidth = 1;
+					}
+					if (newheight == 0) {
+						newheight = 1;
+					}
+					if (logger.isDebugEnabled()) {
+						logger
+								.debug("widgetSelected(SelectionEvent) - newwidth: "
+										+ newwidth + " newheight: " + newheight);
+					}
+					scaled_imagedata = original_imagedata.scaledTo(newwidth,
+							newheight);
 
-                    //redraw the image
-                    canvasImg.redraw();
-                    resizeScrollBars();
-                }
-            });
-            scaleResizeLData.grabExcessHorizontalSpace = true;
-            scaleResizeLData.horizontalAlignment = GridData.FILL;
-            scaleResizeLData.horizontalSpan = 4;
-            scaleResize.setLayoutData(scaleResizeLData);
+					//redraw the image
+					canvasImg.redraw();
+					resizeScrollBars();
+				}
+			});
+			scaleResizeLData.grabExcessHorizontalSpace = true;
+			scaleResizeLData.horizontalAlignment = GridData.FILL;
+			scaleResizeLData.horizontalSpan = 4;
+			scaleResize.setLayoutData(scaleResizeLData);
 
-            scaleResize.setMaximum(200);
-            scaleResize.setMinimum(1);
-            scaleResize.setIncrement(5);
-            scaleResize.setPageIncrement(5);
-        }
-        {
-            compositeButtons = new Composite(groupImagesDetail, SWT.EMBEDDED);
-            GridLayout composite2Layout = new GridLayout();
-            composite2Layout.numColumns = 6;
-            GridData composite2LData = new GridData();
-            compositeButtons.setLayout(composite2Layout);
-            composite2LData.verticalAlignment = GridData.END;
-            composite2LData.horizontalAlignment = GridData.CENTER;
-            composite2LData.widthHint = 391;
-            composite2LData.heightHint = 35;
-            composite2LData.horizontalSpan = 6;
-            composite2LData.grabExcessHorizontalSpace = true;
-            compositeButtons.setLayoutData(composite2LData);
-            {
-                buttonImageNew = new Button(compositeButtons, SWT.PUSH
-                        | SWT.CENTER);
-                buttonImageNew.setText(l.getString("button.new"));
-                buttonImageNew.addSelectionListener(new SelectionAdapter() {
-                    public void widgetSelected(SelectionEvent evt) {
+			scaleResize.setMaximum(200);
+			scaleResize.setMinimum(1);
+			scaleResize.setIncrement(5);
+			scaleResize.setPageIncrement(5);
+		}
+		{
+			compositeButtons = new Composite(groupImagesDetail, SWT.EMBEDDED);
+			GridLayout composite2Layout = new GridLayout();
+			composite2Layout.numColumns = 6;
+			GridData composite2LData = new GridData();
+			compositeButtons.setLayout(composite2Layout);
+			composite2LData.verticalAlignment = GridData.END;
+			composite2LData.horizontalAlignment = GridData.CENTER;
+			composite2LData.widthHint = 391;
+			composite2LData.heightHint = 35;
+			composite2LData.horizontalSpan = 6;
+			composite2LData.grabExcessHorizontalSpace = true;
+			compositeButtons.setLayoutData(composite2LData);
+			{
+				buttonImageNew = new Button(compositeButtons, SWT.PUSH
+						| SWT.CENTER);
+				buttonImageNew.setText(l.getString("button.new"));
+				buttonImageNew.addSelectionListener(new SelectionAdapter() {
+					public void widgetSelected(SelectionEvent evt) {
 
-                        mode_image = ManagementGui.MODE_ADD;
+						mode_image = ManagementGui.MODE_ADD;
 
-                        tableImagesOverview.deselectAll();
+						tableImagesOverview.deselectAll();
 
-                        textImagesID.setText("");
-                        textImagesName.setText("");
-                        textImagesDescription.setText("");
+						textImagesID.setText("");
+						textImagesName.setText("");
+						textImagesDescription.setText("");
 
-                        textImagesName.setEditable(true);
-                        textImagesDescription.setEditable(true);
+						textImagesName.setEditable(true);
+						textImagesDescription.setEditable(true);
 
-                        buttonSelectFile.setEnabled(true);
+						buttonSelectFile.setEnabled(true);
 
-                        original_imagedata = scaled_imagedata = null;
-                        canvasImg.redraw();
+						original_imagedata = scaled_imagedata = null;
+						canvasImg.redraw();
 
-                        buttonImageCancel.setEnabled(true);
-                        buttonImageSave.setEnabled(true);
-                        buttonImageNew.setEnabled(false);
-                        buttonImageEdit.setEnabled(false);
-                        buttonImageDelete.setEnabled(false);
+						buttonImageCancel.setEnabled(true);
+						buttonImageSave.setEnabled(true);
+						buttonImageNew.setEnabled(false);
+						buttonImageEdit.setEnabled(false);
+						buttonImageDelete.setEnabled(false);
 
-                        textImagesSearch.setEditable(false);
-                        tableImagesOverview.setEnabled(false);
+						textImagesSearch.setEditable(false);
+						tableImagesOverview.setEnabled(false);
 
-                    }
-                });
+					}
+				});
 
-                buttonImageEdit = new Button(compositeButtons, SWT.PUSH
-                        | SWT.CENTER);
-                buttonImageEdit.setText(l.getString("button.edit"));
-                buttonImageEdit.setEnabled(false);
-                buttonImageEdit.addSelectionListener(new SelectionAdapter() {
-                    public void widgetSelected(SelectionEvent evt) {
+				buttonImageEdit = new Button(compositeButtons, SWT.PUSH
+						| SWT.CENTER);
+				buttonImageEdit.setText(l.getString("button.edit"));
+				buttonImageEdit.setEnabled(false);
+				buttonImageEdit.addSelectionListener(new SelectionAdapter() {
+					public void widgetSelected(SelectionEvent evt) {
 
-                        mode_image = ManagementGui.MODE_EDIT;
+						mode_image = ManagementGui.MODE_EDIT;
 
-                        textImagesID.setEditable(false);
-                        textImagesName.setEditable(true);
+						textImagesID.setEditable(false);
+						textImagesName.setEditable(true);
 
-                        textImagesDescription.setEditable(true);
-                        textImagesName.setFocus();
+						textImagesDescription.setEditable(true);
+						textImagesName.setFocus();
 
-                        buttonImageCancel.setEnabled(true);
-                        buttonImageSave.setEnabled(true);
+						buttonImageCancel.setEnabled(true);
+						buttonImageSave.setEnabled(true);
 
-                        buttonImageNew.setEnabled(false);
-                        buttonImageEdit.setEnabled(false);
-                        buttonImageDelete.setEnabled(false);
+						buttonImageNew.setEnabled(false);
+						buttonImageEdit.setEnabled(false);
+						buttonImageDelete.setEnabled(false);
 
-                        tableImagesOverview.setEnabled(false);
-                        textImagesSearch.setEnabled(false);
-                        buttonSelectFile.setEnabled(true);
+						tableImagesOverview.setEnabled(false);
+						textImagesSearch.setEnabled(false);
+						buttonSelectFile.setEnabled(true);
 
-                        scaleResize.setEnabled(true);
-                        scaleResize.setSelection(100);
-                        scaleResize.setToolTipText(l
-                                .getString("images.groupdetail.resize.size")
-                                + ": 100%");
+						scaleResize.setEnabled(true);
+						scaleResize.setSelection(100);
+						scaleResize.setToolTipText(l
+								.getString("images.groupdetail.resize.size")
+								+ ": 100%");
 
-                        //reset and resize the scrollbars
-                        resetScrollBars();
-                        resizeScrollBars();
+						//reset and resize the scrollbars
+						resetScrollBars();
+						resizeScrollBars();
 
-                    }
-                });
+					}
+				});
 
-                buttonImageDelete = new Button(compositeButtons, SWT.PUSH
-                        | SWT.CENTER);
-                buttonImageDelete.setText(l.getString("button.delete"));
-                buttonImageDelete.setEnabled(false);
-                buttonImageDelete.addSelectionListener(new SelectionAdapter() {
-                    public void widgetSelected(SelectionEvent evt) {
-                        logger.debug("buttonImageDelete.widgetSelected, event="
-                                + evt);
-                        deleteImage();
+				buttonImageDelete = new Button(compositeButtons, SWT.PUSH
+						| SWT.CENTER);
+				buttonImageDelete.setText(l.getString("button.delete"));
+				buttonImageDelete.setEnabled(false);
+				buttonImageDelete.addSelectionListener(new SelectionAdapter() {
+					public void widgetSelected(SelectionEvent evt) {
+						logger.debug("buttonImageDelete.widgetSelected, event="
+								+ evt);
+						deleteImage();
 
-                    }
-                });
-            }
-            {
-                buttonImageFill = new Button(compositeButtons, SWT.PUSH
-                        | SWT.CENTER);
-                GridData buttonActorFillLData = new GridData();
-                buttonImageFill.setVisible(false);
-                buttonImageFill.setEnabled(false);
-                buttonActorFillLData.widthHint = 30;
-                buttonActorFillLData.heightHint = 23;
-                buttonImageFill.setLayoutData(buttonActorFillLData);
-            }
-            {
-                buttonImageSave = new Button(compositeButtons, SWT.PUSH
-                        | SWT.CENTER);
-                buttonImageSave.setText(l.getString("button.save"));
-                buttonImageSave.setEnabled(false);
-                buttonImageSave.addSelectionListener(new SelectionAdapter() {
-                    public void widgetSelected(SelectionEvent evt) {
-                        logger.debug("buttonImageSave.widgetSelected, event="
-                                + evt);
+					}
+				});
+			}
+			{
+				buttonImageFill = new Button(compositeButtons, SWT.PUSH
+						| SWT.CENTER);
+				GridData buttonActorFillLData = new GridData();
+				buttonImageFill.setVisible(false);
+				buttonImageFill.setEnabled(false);
+				buttonActorFillLData.widthHint = 30;
+				buttonActorFillLData.heightHint = 23;
+				buttonImageFill.setLayoutData(buttonActorFillLData);
+			}
+			{
+				buttonImageSave = new Button(compositeButtons, SWT.PUSH
+						| SWT.CENTER);
+				buttonImageSave.setText(l.getString("button.save"));
+				buttonImageSave.setEnabled(false);
+				buttonImageSave.addSelectionListener(new SelectionAdapter() {
+					public void widgetSelected(SelectionEvent evt) {
+						logger.debug("buttonImageSave.widgetSelected, event="
+								+ evt);
 
-                        if (scaled_imagedata == null) {
-                            statusLine
-                                    .setStatus(
-                                            StatusLineStyledText.STATUS_WARN,
-                                            l
-                                                    .getString("images.groupdetail.savebutton.warnnoimage"));
-                            return;
-                        }
+						if (scaled_imagedata == null) {
+							statusLine
+									.setStatus(
+											StatusLineStyledText.STATUS_WARN,
+											l
+													.getString("images.groupdetail.savebutton.warnnoimage"));
+							return;
+						}
 
-                        //testen ob Name leer ist
-                        if (textImagesName.getText().trim()
-                                .equalsIgnoreCase("")
-                                || textImagesDescription.getText().trim()
-                                        .equalsIgnoreCase("")) {
+						//testen ob Name leer ist
+						if (textImagesName.getText().trim()
+								.equalsIgnoreCase("")
+								|| textImagesDescription.getText().trim()
+										.equalsIgnoreCase("")) {
 
-                            showMsg(
-                                    l
-                                            .getString("images.groupdetail.savebutton.warn.noname.msg"),
-                                    l
-                                            .getString("images.groupdetail.savebutton.warn.noname.title"),
-                                    SWT.ICON_WARNING | SWT.YES);
+							showMsg(
+									l
+											.getString("images.groupdetail.savebutton.warn.noname.msg"),
+									l
+											.getString("images.groupdetail.savebutton.warn.noname.title"),
+									SWT.ICON_WARNING | SWT.YES);
 
-                            return;
-                        }
+							return;
+						}
 
-                        //testen welcher mode
+						//testen welcher mode
 
-                        if (mode_image == ManagementGui.MODE_ADD) {
+						if (mode_image == ManagementGui.MODE_ADD) {
 
-                            /**
-                             * @todo eine Exception bekommen wieder leider NOCH
-                             *       nicht mit d.h. es muss noch ein
-                             *       r?ckgabewert kommen oder eine Exception
-                             *       ?bermitteln werden (aus der DB Klasse)
-                             */
-                            //neues Objekt erzeugen
-                            de.hsharz.provirent.objects.Image tmp = new de.hsharz.provirent.objects.Image();
-                            tmp.setImageFileName(textImagesName.getText());
-                            tmp.setImageFileDescription(textImagesDescription
-                                    .getText());
+							/**
+							 * @todo eine Exception bekommen wieder leider NOCH
+							 *       nicht mit d.h. es muss noch ein
+							 *       r?ckgabewert kommen oder eine Exception
+							 *       ?bermitteln werden (aus der DB Klasse)
+							 */
+							//neues Objekt erzeugen
+							de.hsharz.provirent.objects.Image tmp = new de.hsharz.provirent.objects.Image();
+							tmp.setImageFileName(textImagesName.getText());
+							tmp.setImageFileDescription(textImagesDescription
+									.getText());
 
-                            ImageLoader imageLoader = new ImageLoader();
-                            imageLoader.data = new ImageData[] { scaled_imagedata };
-                            ByteArrayOutputStream bos = new ByteArrayOutputStream();
+							ImageLoader imageLoader = new ImageLoader();
+							imageLoader.data = new ImageData[] { scaled_imagedata };
+							ByteArrayOutputStream bos = new ByteArrayOutputStream();
 
-                            if (logger.isDebugEnabled()) {
-                                logger.debug("widgetSelected(SelectionEvent)"
-                                        + scaled_imagedata.type);
-                            }
-                            if (logger.isDebugEnabled()) {
-                                logger.debug("widgetSelected(SelectionEvent)"
-                                        + SWT.IMAGE_JPEG);
-                            }
+							if (logger.isDebugEnabled()) {
+								logger.debug("widgetSelected(SelectionEvent)"
+										+ scaled_imagedata.type);
+							}
+							if (logger.isDebugEnabled()) {
+								logger.debug("widgetSelected(SelectionEvent)"
+										+ SWT.IMAGE_JPEG);
+							}
 
-                            imageLoader.save(bos, scaled_imagedata.type);
+							imageLoader.save(bos, scaled_imagedata.type);
 
-                            tmp.setImageFile(bos.toByteArray());
+							tmp.setImageFile(bos.toByteArray());
 
-                            try {
-                                bos.close();
-                            } catch (IOException e1) {
-                                logger
-                                        .warn(
-                                                "Fehler beim schlie?en des BytearrayOutputstream",
-                                                e1);
-                            }
+							try {
+								bos.close();
+							} catch (IOException e1) {
+								logger
+										.warn(
+												"Fehler beim schlie?en des BytearrayOutputstream",
+												e1);
+							}
 
-                            try {
-                                //object speichern
-                                // Fehlerbehandlung
-                                Object o = Database.saveObject(tmp);
+							try {
+								//object speichern
+								// Fehlerbehandlung
+								Object o = Database.saveObject(tmp);
 
-                                // in ?bersichtstabelle einf?gen
-                                insertIntoImagesOverviewTable((de.hsharz.provirent.objects.Image) o);
-                                textImagesID
-                                        .setText(((de.hsharz.provirent.objects.Image) o)
-                                                .getImageId()
-                                                + "");
+								// in ?bersichtstabelle einf?gen
+								insertIntoImagesOverviewTable((de.hsharz.provirent.objects.Image) o);
+								textImagesID
+										.setText(((de.hsharz.provirent.objects.Image) o)
+												.getImageId()
+												+ "");
 
-                                //Statusline Nachricht sezten
-                                statusLine
-                                        .setStatus(
-                                                StatusLineStyledText.STATUS_INFO,
-                                                l
-                                                        .getString("images.groupdetail.savebutton.newok"));
+								//Statusline Nachricht sezten
+								statusLine
+										.setStatus(
+												StatusLineStyledText.STATUS_INFO,
+												l
+														.getString("images.groupdetail.savebutton.newok"));
 
-                            } catch (DataBaseException e) {
-                                if (e.getMessage().equalsIgnoreCase("1")) {
-                                    //Fehler beim Speichern des Objectes
+							} catch (DataBaseException e) {
+								if (e.getMessage().equalsIgnoreCase("1")) {
+									//Fehler beim Speichern des Objectes
 
-                                    statusLine
-                                            .setStatus(
-                                                    3,
-                                                    l
-                                                            .getString("images.groupdetail.savebutton.errorsave"));
-                                    showMsg(
-                                            l
-                                                    .getString("images.groupdetail.savebutton.errorsave"),
-                                            "Fehler", SWT.ICON_ERROR | SWT.OK);
+									statusLine
+											.setStatus(
+													3,
+													l
+															.getString("images.groupdetail.savebutton.errorsave"));
+									showMsg(
+											l
+													.getString("images.groupdetail.savebutton.errorsave"),
+											"Fehler", SWT.ICON_ERROR | SWT.OK);
 
-                                } else if (e.getMessage().equalsIgnoreCase("2")) {
-                                    //fehler beim db aufbau
-                                    statusLine
-                                            .setStatus(
-                                                    3,
-                                                    l
-                                                            .getString("images.groupdetail.savebutton.errordb"));
-                                    showMsg(
-                                            l
-                                                    .getString("images.groupdetail.savebutton.errordb"),
-                                            "Fehler", SWT.ICON_ERROR | SWT.OK);
+								} else if (e.getMessage().equalsIgnoreCase("2")) {
+									//fehler beim db aufbau
+									statusLine
+											.setStatus(
+													3,
+													l
+															.getString("images.groupdetail.savebutton.errordb"));
+									showMsg(
+											l
+													.getString("images.groupdetail.savebutton.errordb"),
+											"Fehler", SWT.ICON_ERROR | SWT.OK);
 
-                                } else {
-                                    //@todo
-                                    logger
-                                            .error(
-                                                    "widgetSelected(SelectionEvent)",
-                                                    e);
-                                }
+								} else {
+									//@todo
+									logger
+											.error(
+													"widgetSelected(SelectionEvent)",
+													e);
+								}
 
-                            }
+							}
 
-                            //alle Buttons auf aktiv setzen
-                            //setImagesGroupButtonSaveCancel();
+							//alle Buttons auf aktiv setzen
+							//setImagesGroupButtonSaveCancel();
 
-                        } else if (mode_image == ManagementGui.MODE_EDIT) {
-                            
+						} else if (mode_image == ManagementGui.MODE_EDIT) {
 
-                             localImage.setImageFileName(textImagesName.getText());
-                             localImage.setImageId(new Integer(Integer.parseInt(textImagesID.getText())));
-                             localImage.setImageFileDescription(textImagesDescription.getText());
-                             
-                             ImageLoader imageLoader = new ImageLoader();
-                             imageLoader.data = new ImageData[] { scaled_imagedata };
+							localImage.setImageFileName(textImagesName
+									.getText());
+							localImage.setImageId(new Integer(Integer
+									.parseInt(textImagesID.getText())));
+							localImage
+									.setImageFileDescription(textImagesDescription
+											.getText());
 
-                             ByteArrayOutputStream bos = new ByteArrayOutputStream();
-                             imageLoader.save(bos, scaled_imagedata.type);
+							ImageLoader imageLoader = new ImageLoader();
+							imageLoader.data = new ImageData[] { scaled_imagedata };
 
-                             localImage.setImageFile( bos.toByteArray() );
-                             
-                             
-                             try {
-                             //object speichern
-                             // Fehlerbehandlung
-                             Database.saveObject(localImage);
-                             //?bersichtstabelle aktualisieren
-                             refreshImageOverviewTable(textImagesSearch
-                             .getText());
+							ByteArrayOutputStream bos = new ByteArrayOutputStream();
+							imageLoader.save(bos, scaled_imagedata.type);
 
-                             //Statusline Nachricht sezten
-                             statusLine
-                             .setStatus(
-                             1,
-                             l
-                             .getString("images.groupdetail.savebutton.editok"));
+							localImage.setImageFile(bos.toByteArray());
 
-                             } catch (DataBaseException e) {
-                             if (e.getMessage().equalsIgnoreCase("1")) {
-                             //Fehler beim Speichern des Objectes
+							try {
+								//object speichern
+								// Fehlerbehandlung
+								Database.saveObject(localImage);
+								//?bersichtstabelle aktualisieren
+								refreshImageOverviewTable(textImagesSearch
+										.getText());
 
-                             statusLine
-                             .setStatus(
-                             3,
-                             l
-                             .getString("images.groupdetail.savebutton.errorsave"));
-                             showMsg(
-                             l
-                             .getString("images.groupdetail.savebutton.errorsave"),
-                             "Fehler",
-                             SWT.ICON_ERROR | SWT.OK);
+								//Statusline Nachricht sezten
+								statusLine
+										.setStatus(
+												1,
+												l
+														.getString("images.groupdetail.savebutton.editok"));
 
-                             } else if (e.getMessage().equalsIgnoreCase(
-                             "2")) {
-                             //fehler beim db aufbau
-                             statusLine
-                             .setStatus(
-                             3,
-                             l
-                             .getString("images.groupdetail.savebutton.errordb"));
-                             showMsg(
-                             l
-                             .getString("images.groupdetail.savebutton.errordb"),
-                             "Fehler",
-                             SWT.ICON_ERROR | SWT.OK);
+							} catch (DataBaseException e) {
+								if (e.getMessage().equalsIgnoreCase("1")) {
+									//Fehler beim Speichern des Objectes
 
-                             } else {
-                             //@todo
-                             e.printStackTrace();
-                             }
+									statusLine
+											.setStatus(
+													3,
+													l
+															.getString("images.groupdetail.savebutton.errorsave"));
+									showMsg(
+											l
+													.getString("images.groupdetail.savebutton.errorsave"),
+											"Fehler", SWT.ICON_ERROR | SWT.OK);
 
-                             }
+								} else if (e.getMessage().equalsIgnoreCase("2")) {
+									//fehler beim db aufbau
+									statusLine
+											.setStatus(
+													3,
+													l
+															.getString("images.groupdetail.savebutton.errordb"));
+									showMsg(
+											l
+													.getString("images.groupdetail.savebutton.errordb"),
+											"Fehler", SWT.ICON_ERROR | SWT.OK);
 
-                             }
-                        tableImagesOverview.setEnabled(true);
-                        textImagesSearch.setEnabled(true);
+								} else {
+									//@todo
+									e.printStackTrace();
+								}
 
-                        textImagesDescription.setEnabled(false);
-                        textImagesName.setEnabled(false);
+							}
 
-                        buttonImageCancel.setEnabled(false);
-                        buttonImageDelete.setEnabled(false);
-                        buttonImageEdit.setEnabled(false);
-                        buttonSelectFile.setEnabled(false);
-                        buttonImageSave.setEnabled(false);
-                        buttonImageNew.setEnabled(true);
-                        scaleResize.setEnabled(false);
-                        }
-                    
-                });
-            }
-            {
-                buttonImageCancel = new Button(compositeButtons, SWT.PUSH
-                        | SWT.CENTER);
-                buttonImageCancel.setText(l.getString("button.cancel"));
-                buttonImageCancel.setEnabled(false);
-                buttonImageCancel.addSelectionListener(new SelectionAdapter() {
-                    public void widgetSelected(SelectionEvent evt) {
+						}
+						tableImagesOverview.setEnabled(true);
+						textImagesSearch.setEnabled(true);
 
-                        tableImagesOverview.setEnabled(true);
-                        textImagesSearch.setEnabled(true);
+						textImagesDescription.setEnabled(false);
+						textImagesName.setEnabled(false);
 
-                        textImagesDescription.setEnabled(false);
-                        textImagesName.setEnabled(false);
+						buttonImageCancel.setEnabled(false);
+						buttonImageDelete.setEnabled(false);
+						buttonImageEdit.setEnabled(false);
+						buttonSelectFile.setEnabled(false);
+						buttonImageSave.setEnabled(false);
+						buttonImageNew.setEnabled(true);
+						scaleResize.setEnabled(false);
+					}
 
-                        buttonImageCancel.setEnabled(false);
-                        buttonImageDelete.setEnabled(false);
-                        buttonImageEdit.setEnabled(false);
-                        buttonSelectFile.setEnabled(false);
-                        buttonImageSave.setEnabled(false);
-                        buttonImageNew.setEnabled(true);
-                        scaleResize.setEnabled(false);
+				});
+			}
+			{
+				buttonImageCancel = new Button(compositeButtons, SWT.PUSH
+						| SWT.CENTER);
+				buttonImageCancel.setText(l.getString("button.cancel"));
+				buttonImageCancel.setEnabled(false);
+				buttonImageCancel.addSelectionListener(new SelectionAdapter() {
+					public void widgetSelected(SelectionEvent evt) {
 
-                    }
-                });
-            }
-        }
+						tableImagesOverview.setEnabled(true);
+						textImagesSearch.setEnabled(true);
 
-        // buttons for detail
-    }
+						textImagesDescription.setEnabled(false);
+						textImagesName.setEnabled(false);
 
-    private void deleteImage() {
+						buttonImageCancel.setEnabled(false);
+						buttonImageDelete.setEnabled(false);
+						buttonImageEdit.setEnabled(false);
+						buttonSelectFile.setEnabled(false);
+						buttonImageSave.setEnabled(false);
+						buttonImageNew.setEnabled(true);
+						scaleResize.setEnabled(false);
 
-        String msg = MessageFormat.format(l
-                .getString("images.groupdetail.deletebutton.question.text"),
-                new Object[] { textImagesName.getText() });
+					}
+				});
+			}
+		}
 
-        int question = showMsg(msg, l
-                .getString("images.groupdetail.deletebutton.question.header"),
-                SWT.ICON_QUESTION | SWT.YES | SWT.NO);
+		// buttons for detail
+	}
 
-        if (question != SWT.YES) {
-            return;
-        }
+	private void deleteImage() {
 
-        try {
-            //object speichern
-            // Fehlerbehandlung
-            Database.deleteObject(localImage);
+		String msg = MessageFormat.format(l
+				.getString("images.groupdetail.deletebutton.question.text"),
+				new Object[] { textImagesName.getText() });
 
-            //?bersichtsTabelle aktualisieren
-            refreshImageOverviewTable("");
+		int question = showMsg(msg, l
+				.getString("images.groupdetail.deletebutton.question.header"),
+				SWT.ICON_QUESTION | SWT.YES | SWT.NO);
 
-            //Detailansicht leeren
-            textImagesID.setText("");
-            textImagesName.setText("");
-            textImagesDescription.setText("");
-            
-            localImage= null;
-            scaled_imagedata = null;
-            original_imagedata = null;
-            
+		if (question != SWT.YES) {
+			return;
+		}
 
-            //in Tabelle n?chsten ausw?hlen
-            try {
-                tableImagesOverview.setSelection(0);
-            } catch (Exception ex) {
-            }
+		try {
+			//object speichern
+			// Fehlerbehandlung
+			Database.deleteObject(localImage);
 
-            //Statusline Nachricht sezten
-            statusLine.setStatus(1, l
-                    .getString("images.groupdetail.deletebutton.newok"));
+			//?bersichtsTabelle aktualisieren
+			refreshImageOverviewTable("");
 
-        } catch (DataBaseException e) {
-            if (e.getMessage().equalsIgnoreCase("1")) {
-                //Fehler beim Speichern des Objectes
+			//Detailansicht leeren
+			textImagesID.setText("");
+			textImagesName.setText("");
+			textImagesDescription.setText("");
 
-                statusLine
-                        .setStatus(
-                                3,
-                                l
-                                        .getString("images.groupdetail.deletebutton.errorsave"));
-                showMsg(
-                        l
-                                .getString("images.groupdetail.deletebutton.errorsave"),
-                        l.getString("error"), SWT.ICON_ERROR | SWT.OK);
+			localImage = null;
+			scaled_imagedata = null;
+			original_imagedata = null;
 
-            } else if (e.getMessage().equalsIgnoreCase("2")) {
-                //fehler beim db aufbau
-                statusLine.setStatus(3, l
-                        .getString("images.groupdetail.deletebutton.errordb"));
-                showMsg(l.getString("images.groupdetail.deletebutton.errordb"),
-                        l.getString("error"), SWT.ICON_ERROR | SWT.OK);
+			//in Tabelle n?chsten ausw?hlen
+			try {
+				tableImagesOverview.setSelection(0);
+			} catch (Exception ex) {
+			}
 
-            } else {
-                //@todo
-                e.printStackTrace();
-            }
+			//Statusline Nachricht sezten
+			statusLine.setStatus(1, l
+					.getString("images.groupdetail.deletebutton.newok"));
 
-        }
+		} catch (DataBaseException e) {
+			if (e.getMessage().equalsIgnoreCase("1")) {
+				//Fehler beim Speichern des Objectes
 
-    }
+				statusLine
+						.setStatus(
+								3,
+								l
+										.getString("images.groupdetail.deletebutton.errorsave"));
+				showMsg(
+						l
+								.getString("images.groupdetail.deletebutton.errorsave"),
+						l.getString("error"), SWT.ICON_ERROR | SWT.OK);
 
-    private void resizeScrollBars() {
-        // Set the max and thumb for the image canvas scroll bars.
-        ScrollBar horizontal = canvasImg.getHorizontalBar();
-        ScrollBar vertical = canvasImg.getVerticalBar();
-        Rectangle canvasBounds = canvasImg.getClientArea();
-        int width = Math.round(scaled_imagedata.width);
-        if (width > canvasBounds.width) {
-            // The image is wider than the canvas.
-            horizontal.setEnabled(true);
-            horizontal.setMaximum(width);
-            horizontal.setThumb(canvasBounds.width);
-            horizontal.setPageIncrement(canvasBounds.width);
-        } else {
-            // The canvas is wider than the image.
-            horizontal.setEnabled(false);
+			} else if (e.getMessage().equalsIgnoreCase("2")) {
+				//fehler beim db aufbau
+				statusLine.setStatus(3, l
+						.getString("images.groupdetail.deletebutton.errordb"));
+				showMsg(l.getString("images.groupdetail.deletebutton.errordb"),
+						l.getString("error"), SWT.ICON_ERROR | SWT.OK);
 
-            canvasImg.redraw();
-        }
-        int height = Math.round(scaled_imagedata.height);
-        if (height > canvasBounds.height) {
-            // The image is taller than the canvas.
-            vertical.setEnabled(true);
-            vertical.setMaximum(height);
-            vertical.setThumb(canvasBounds.height);
-            vertical.setPageIncrement(canvasBounds.height);
-        } else {
-            // The canvas is taller than the image.
-            vertical.setEnabled(false);
-            canvasImg.redraw();
+			} else {
+				//@todo
+				e.printStackTrace();
+			}
 
-        }
-    }
+		}
 
-    private void scrollHorizontally(ScrollBar scrollBar) {
-        if (scaled_imagedata == null)
-            return;
-        Rectangle canvasBounds = canvasImg.getClientArea();
-        int width = Math.round(scaled_imagedata.width);
-        int height = Math.round(scaled_imagedata.height);
-        if (width > canvasBounds.width) {
-            // Only scroll if the image is bigger than the canvas.
-            int x = -scrollBar.getSelection();
-            if (x + width < canvasBounds.width) {
-                // Don't scroll past the end of the image.
-                x = canvasBounds.width - width;
-            }
-            canvasImg.scroll(x, iy, ix, iy, width, height, false);
-            ix = x;
+	}
 
-        }
-    }
+	private void resizeScrollBars() {
+		// Set the max and thumb for the image canvas scroll bars.
+		ScrollBar horizontal = canvasImg.getHorizontalBar();
+		ScrollBar vertical = canvasImg.getVerticalBar();
+		Rectangle canvasBounds = canvasImg.getClientArea();
+		int width = Math.round(scaled_imagedata.width);
+		if (width > canvasBounds.width) {
+			// The image is wider than the canvas.
+			horizontal.setEnabled(true);
+			horizontal.setMaximum(width);
+			horizontal.setThumb(canvasBounds.width);
+			horizontal.setPageIncrement(canvasBounds.width);
+		} else {
+			// The canvas is wider than the image.
+			horizontal.setEnabled(false);
 
-    private void scrollVertically(ScrollBar scrollBar) {
-        if (scaled_imagedata == null)
-            return;
-        Rectangle canvasBounds = canvasImg.getClientArea();
-        int width = Math.round(scaled_imagedata.width);
-        int height = Math.round(scaled_imagedata.height);
-        if (height > canvasBounds.height) {
-            // Only scroll if the image is bigger than the canvas.
-            int y = -scrollBar.getSelection();
-            if (y + height < canvasBounds.height) {
-                // Don't scroll past the end of the image.
-                y = canvasBounds.height - height;
-            }
-            canvasImg.scroll(ix, y, ix, iy, width, height, false);
-            iy = y;
-        }
-    }
+			canvasImg.redraw();
+		}
+		int height = Math.round(scaled_imagedata.height);
+		if (height > canvasBounds.height) {
+			// The image is taller than the canvas.
+			vertical.setEnabled(true);
+			vertical.setMaximum(height);
+			vertical.setThumb(canvasBounds.height);
+			vertical.setPageIncrement(canvasBounds.height);
+		} else {
+			// The canvas is taller than the image.
+			vertical.setEnabled(false);
+			canvasImg.redraw();
 
-    // Reset the scroll bars to 0.
-    private void resetScrollBars() {
-        ix = 0;
-        iy = 0;
-        resizeScrollBars();
-        canvasImg.getHorizontalBar().setSelection(0);
-        canvasImg.getVerticalBar().setSelection(0);
+		}
+	}
 
-    }
+	private void scrollHorizontally(ScrollBar scrollBar) {
+		if (scaled_imagedata == null)
+			return;
+		Rectangle canvasBounds = canvasImg.getClientArea();
+		int width = Math.round(scaled_imagedata.width);
+		int height = Math.round(scaled_imagedata.height);
+		if (width > canvasBounds.width) {
+			// Only scroll if the image is bigger than the canvas.
+			int x = -scrollBar.getSelection();
+			if (x + width < canvasBounds.width) {
+				// Don't scroll past the end of the image.
+				x = canvasBounds.width - width;
+			}
+			canvasImg.scroll(x, iy, ix, iy, width, height, false);
+			ix = x;
 
-    private void paintImage(PaintEvent event) {
-        Image paintImage = new Image(getDisplay(), scaled_imagedata);
+		}
+	}
 
-        int w = Math.round(scaled_imagedata.width);
-        int h = Math.round(scaled_imagedata.height);
-        event.gc.drawImage(paintImage, 0, 0, scaled_imagedata.width,
-                scaled_imagedata.height, ix + scaled_imagedata.x, iy
-                        + scaled_imagedata.y, w, h);
-        event.gc.dispose();
-    }
+	private void scrollVertically(ScrollBar scrollBar) {
+		if (scaled_imagedata == null)
+			return;
+		Rectangle canvasBounds = canvasImg.getClientArea();
+		int width = Math.round(scaled_imagedata.width);
+		int height = Math.round(scaled_imagedata.height);
+		if (height > canvasBounds.height) {
+			// Only scroll if the image is bigger than the canvas.
+			int y = -scrollBar.getSelection();
+			if (y + height < canvasBounds.height) {
+				// Don't scroll past the end of the image.
+				y = canvasBounds.height - height;
+			}
+			canvasImg.scroll(ix, y, ix, iy, width, height, false);
+			iy = y;
+		}
+	}
 
-    /**
-     * @param text
-     */
-    private void refreshImagesDetail(final String id) {
-        de.hsharz.provirent.objects.Image object = null;
-        try {
-            //since we only can get a String value from the table, we
-            //need to convert this
-            object = (de.hsharz.provirent.objects.Image) Database
-                    .getSingleObject(new de.hsharz.provirent.objects.Image()
-                            .getClass(), Integer.parseInt(id));
+	// Reset the scroll bars to 0.
+	private void resetScrollBars() {
+		ix = 0;
+		iy = 0;
+		resizeScrollBars();
+		canvasImg.getHorizontalBar().setSelection(0);
+		canvasImg.getVerticalBar().setSelection(0);
 
-            if (object == null) {
-                logger.error("Es wurde null von der Datenbank zur?ckgegeben");
-                /*
-                 * 
-                 * @TODO Statusbar aktualiseren
-                 */
-                return;
-            }
-        } catch (Exception e) {
-            //id ist keine Zahl
-            return;
-        }
-        localImage = object;
-        textImagesID.setText(object.getImageId() + "");
-        textImagesName.setText(object.getImageFileName());
-        textImagesDescription.setText(object.getImageFileDescription());
+	}
 
-        textFileUrl.setText(l
-                .getString("images.groupdetail.labelselecteddatabase"));
+	private void paintImage(PaintEvent event) {
+		Image paintImage = new Image(getDisplay(), scaled_imagedata);
 
-        if (object.getImageFile() != null && object.getImageFile().length > 0) {
-            if (logger.isDebugEnabled()) {
-                logger
-                        .debug("refreshImagesDetail(String) - Versuche zu zeichnen");
-            }
-            scaled_imagedata = original_imagedata = new ImageData(
-                    new ByteArrayInputStream(object.getImageFile()));
-            canvasImg.redraw();
-        } else {
-            statusLine.setStatus(StatusLineStyledText.STATUS_WARN,
-                    "Bilddaten k?nnen f?r Bild " + object.getImageFileName()
-                            + "nicht geladen werden.");
-            scaled_imagedata = original_imagedata = null;
-            canvasImg.redraw();
-        }
+		int w = Math.round(scaled_imagedata.width);
+		int h = Math.round(scaled_imagedata.height);
+		event.gc.drawImage(paintImage, 0, 0, scaled_imagedata.width,
+				scaled_imagedata.height, ix + scaled_imagedata.x, iy
+						+ scaled_imagedata.y, w, h);
+		event.gc.dispose();
+	}
 
-        //Buttons zum l?schen und editieren aktivieren
+	/**
+	 * @param text
+	 */
+	private void refreshImagesDetail(final String id) {
+		de.hsharz.provirent.objects.Image object = null;
+		try {
+			//since we only can get a String value from the table, we
+			//need to convert this
+			object = (de.hsharz.provirent.objects.Image) Database
+					.getSingleObject(new de.hsharz.provirent.objects.Image()
+							.getClass(), Integer.parseInt(id));
 
-        //Mode auf view setzen
-        mode_image = ManagementGui.MODE_VIEW;
+			if (object == null) {
+				logger.error("Es wurde null von der Datenbank zur?ckgegeben");
+				/*
+				 * 
+				 * @TODO Statusbar aktualiseren
+				 */
+				return;
+			}
+		} catch (Exception e) {
+			//id ist keine Zahl
+			return;
+		}
+		localImage = object;
+		textImagesID.setText(object.getImageId() + "");
+		textImagesName.setText(object.getImageFileName());
+		textImagesDescription.setText(object.getImageFileDescription());
 
-    }
+		textFileUrl.setText(l
+				.getString("images.groupdetail.labelselecteddatabase"));
 
-    /**
-     *  
-     */
+		if (object.getImageFile() != null && object.getImageFile().length > 0) {
+			if (logger.isDebugEnabled()) {
+				logger
+						.debug("refreshImagesDetail(String) - Versuche zu zeichnen");
+			}
+			scaled_imagedata = original_imagedata = new ImageData(
+					new ByteArrayInputStream(object.getImageFile()));
+			canvasImg.redraw();
+		} else {
+			statusLine.setStatus(StatusLineStyledText.STATUS_WARN,
+					"Bilddaten k?nnen f?r Bild " + object.getImageFileName()
+							+ "nicht geladen werden.");
+			scaled_imagedata = original_imagedata = null;
+			canvasImg.redraw();
+		}
 
-    protected void insertIntoImagesOverviewTable(
-            final de.hsharz.provirent.objects.Image image) {
-        TableItem item = new TableItem(tableImagesOverview, SWT.NONE);
-        item.setText(new String[] { image.getImageId() + "",
-                image.getImageFileName(), image.getImageFileDescription() });
-        if (image.getImageFile() != null && image.getImageFile().length > 0) {
-            item.setImage(0, new Image(getDisplay(), new ByteArrayInputStream(
-                    image.getImageFile())));
-        }
+		//Buttons zum l?schen und editieren aktivieren
 
-    }
+		//Mode auf view setzen
+		mode_image = ManagementGui.MODE_VIEW;
 
-    protected void refreshImageOverviewTable(final String filter) {
+	}
 
-        if (tableImagesOverview == null) {
-            logger
-                    .error("Konnte ImagesOverviewtable nicht refreshen, da diese null ist!");
-            return;
-        }
-        logger.debug("Versuche nun ImagesOverviewtable zu refreshen. Filter: "
-                + filter);
-        tableImagesOverview.removeAll();
-        TableItem item;
-        java.util.List Imagelist = Database.getImages(filter);
+	/**
+	 *  
+	 */
 
-        for (int i = 0; i < Imagelist.size(); i++) {
+	protected void insertIntoImagesOverviewTable(
+			final de.hsharz.provirent.objects.Image image) {
+		TableItem item = new TableItem(tableImagesOverview, SWT.NONE);
+		item.setText(new String[] { image.getImageId() + "",
+				image.getImageFileName(), image.getImageFileDescription() });
+		if (image.getImageFile() != null && image.getImageFile().length > 0) {
+			item.setImage(0, new Image(getDisplay(), new ByteArrayInputStream(
+					image.getImageFile())));
+		}
 
-            de.hsharz.provirent.objects.Image o = (de.hsharz.provirent.objects.Image) Imagelist
-                    .get(i);
-            item = new TableItem(tableImagesOverview, SWT.NONE);
+	}
 
-            if (o.getImageFile() != null && o.getImageFile().length > 0) {
-                item.setImage(1, createThumbnailImage(o.getImageFile()));
-            }
+	protected void refreshImageOverviewTable(final String filter) {
 
-            item.setText(new String[] { o.getImageId() + "", "",
-                    o.getImageFileName(), o.getImageFileDescription() });
+		if (tableImagesOverview == null) {
+			logger
+					.error("Konnte ImagesOverviewtable nicht refreshen, da diese null ist!");
+			return;
+		}
+		logger.debug("Versuche nun ImagesOverviewtable zu refreshen. Filter: "
+				+ filter);
+		tableImagesOverview.removeAll();
+		TableItem item;
+		java.util.List Imagelist = Database.getImages(filter);
 
-        }
-        Imagelist = null;
-    }
+		for (int i = 0; i < Imagelist.size(); i++) {
 
-    private Image createThumbnailImage(byte[] data) {
+			de.hsharz.provirent.objects.Image o = (de.hsharz.provirent.objects.Image) Imagelist
+					.get(i);
+			item = new TableItem(tableImagesOverview, SWT.NONE);
 
-        int maxheight = 75;
-        int maxwidth = 75;
+			if (o.getImageFile() != null && o.getImageFile().length > 0) {
+				item.setImage(1, createThumbnailImage(o.getImageFile()));
+			}
 
-        final ImageData imgdata = new ImageData(new ByteArrayInputStream(data));
+			item.setText(new String[] { o.getImageId() + "", "",
+					o.getImageFileName(), o.getImageFileDescription() });
 
-        final int width = imgdata.width;
-        final int height = imgdata.height;
-        
-        int new_width = imgdata.width;
-        int new_height = imgdata.height;
-        
-        
-        float ratio = (float)( (float)width / (float)height);
-        
-        if (width > height){
-            //breiter als h?her
-            logger.debug("breiter Ratio: "+ratio);
-            if(width > maxwidth) {
-               new_width = maxwidth;
-               new_height =(int)( maxwidth /( ratio ));
-            }
-        } else {
-            //h?her als breiter
-            logger.debug("h?her Ratio: "+ratio);
-            if (height > maxheight){
-                new_height = maxheight;
-                new_width = (int)( (double)new_height * ratio);
-                    
-            }
-        }
-        
+		}
+		Imagelist = null;
+	}
 
-        
-        logger.debug("w:"+new_width+" h:"+new_height+" r:"+ratio);
+	private Image createThumbnailImage(byte[] data) {
 
-        return new Image(getDisplay(), imgdata.scaledTo(
-                (int) (new_width), (int) (new_height)));
+		int maxheight = 75;
+		int maxwidth = 75;
 
-    }
+		final ImageData imgdata = new ImageData(new ByteArrayInputStream(data));
+
+		final int width = imgdata.width;
+		final int height = imgdata.height;
+
+		int new_width = imgdata.width;
+		int new_height = imgdata.height;
+
+		float ratio = (float) ((float) width / (float) height);
+
+		if (width > height) {
+			//breiter als h?her
+			logger.debug("breiter Ratio: " + ratio);
+			if (width > maxwidth) {
+				new_width = maxwidth;
+				new_height = (int) (maxwidth / (ratio));
+			}
+		} else {
+			//h?her als breiter
+			logger.debug("h?her Ratio: " + ratio);
+			if (height > maxheight) {
+				new_height = maxheight;
+				new_width = (int) ((double) new_height * ratio);
+
+			}
+		}
+
+		logger.debug("w:" + new_width + " h:" + new_height + " r:" + ratio);
+
+		return new Image(getDisplay(), imgdata.scaledTo((int) (new_width),
+				(int) (new_height)));
+
+	}
 }
\ No newline at end of file

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java	2004-12-08 18:45:55 UTC (rev 225)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java	2004-12-08 18:52:28 UTC (rev 226)
@@ -47,7 +47,6 @@
 import de.hsharz.provirent.persistence.DataBaseException;
 import de.hsharz.provirent.persistence.Database;
 
-import org.eclipse.swt.widgets.Combo;
 /**
  * This code was generated using CloudGarden's Jigloo SWT/Swing GUI Builder,
  * which is free for non-commercial use. If Jigloo is being used commercially
@@ -60,1618 +59,1632 @@
  * *************************************
  */
 public class CompositeMovie extends
-        de.hsharz.provirent.management.gui.AbstractComposite {
+		de.hsharz.provirent.management.gui.AbstractComposite {
 
-    {
-        //Register as a resource user - SWTResourceManager will
-        //handle the obtaining and disposing of resources
-        SWTResourceManager.registerResourceUser(this);
-    }
+	{
+		//Register as a resource user - SWTResourceManager will
+		//handle the obtaining and disposing of resources
+		SWTResourceManager.registerResourceUser(this);
+	}
 
-    /**
-     * Logger for this class
-     */
-    private static final Logger logger = Logger
-            .getLogger(CompositeMovie.class);
+	/**
+	 * Logger for this class
+	 */
+	private static final Logger logger = Logger.getLogger(CompositeMovie.class);
 
-    private final static int MODE_VIEW = 0;
+	private final static int MODE_VIEW = 0;
 
-    private final static int MODE_ADD = 1;
+	private final static int MODE_ADD = 1;
 
-    private final static int MODE_EDIT = 2;
+	private final static int MODE_EDIT = 2;
 
-    private Table tableMoviesOverview;
+	private Table tableMoviesOverview;
 
-    private Table tableMoviesDirectorsDetail;
+	private Table tableMoviesDirectorsDetail;
 
-    private Table tableMoviesActorsDetail;
+	private Table tableMoviesActorsDetail;
 
-    private Table tableMoviesGenresDetail;
+	private Table tableMoviesGenresDetail;
 
-    private Table tableMoviesImagesDetail;
+	private Table tableMoviesImagesDetail;
 
-    private TableColumn tableMoviesDetail_ColumnID;
+	private TableColumn tableMoviesDetail_ColumnID;
 
-    private TableColumn tableMoviesDetail_ColumnName;
+	private TableColumn tableMoviesDetail_ColumnName;
 
-    private TableColumn tableMoviesOverview_ColumnID;
+	private TableColumn tableMoviesOverview_ColumnID;
 
-    private TableColumn tableMoviesOverview_ColumnTitle;
+	private TableColumn tableMoviesOverview_ColumnTitle;
 
-    private TableColumn tableMoviesOverview_ColumnDate;
+	private TableColumn tableMoviesOverview_ColumnDate;
 
-    private Group groupMovie;
+	private Group groupMovie;
 
-    private Group groupMoviesOverview;
+	private Group groupMoviesOverview;
 
-    private Group groupMoviesDetail;
+	private Group groupMoviesDetail;
 
-    private Text textMoviesSearch;
+	private Text textMoviesSearch;
 
-    private Text textMoviesID;
+	private Text textMoviesID;
 
-    private Text textMoviesTitle;
+	private Text textMoviesTitle;
 
-    private Text textMoviesRuntime;
+	private Text textMoviesRuntime;
 
-    private Text textMoviesDescription;
+	private Text textMoviesDescription;
 
-    private Text textMoviesDate;
-    
-    private Text textMoviesmainImage;
+	private Text textMoviesDate;
 
-    private Label labelMoviesSearch;
+	private Text textMoviesmainImage;
 
-    private Label labelMoviesID;
+	private Label labelMoviesSearch;
 
-    private Label labelMoviesTitle;
+	private Label labelMoviesID;
 
-    private Label labelMoviesRuntime;
+	private Label labelMoviesTitle;
 
-    private Label labelMoviesDate;
+	private Label labelMoviesRuntime;
 
-    private Label labelMoviesDescription;
+	private Label labelMoviesDate;
 
-    private Label labelMoviesDirectors;
+	private Label labelMoviesDescription;
 
-    private Label labelMoviesActors;
+	private Label labelMoviesDirectors;
 
-    private Label labelMoviesGenres;
+	private Label labelMoviesActors;
 
-    private Label labelMoviesImages;
-        
-    private Label labelMoviesmainImage;
+	private Label labelMoviesGenres;
 
-    private Button buttonMoviesNew;
+	private Label labelMoviesImages;
 
-    private Button buttonMoviesSave;
+	private Label labelMoviesmainImage;
 
-    private Button buttonMoviesEdit;
+	private Button buttonMoviesNew;
 
-    private Button buttonMoviesCancel;
+	private Button buttonMoviesSave;
 
-    private Button buttonMoviesDelete;
+	private Button buttonMoviesEdit;
 
-    private Button buttonMoviesFill;
+	private Button buttonMoviesCancel;
 
-    private Button buttonMoviesAddActors;
+	private Button buttonMoviesDelete;
 
-    private Button buttonMoviesDeleteActors;
+	private Button buttonMoviesFill;
 
-    private Button buttonMoviesAddDirectors;
+	private Button buttonMoviesAddActors;
 
-    private Button buttonMoviesDeleteDirectors;
+	private Button buttonMoviesDeleteActors;
 
-    private Button buttonMoviesAddGenres;
+	private Button buttonMoviesAddDirectors;
 
-    private Button buttonMoviesDeleteGenres;
+	private Button buttonMoviesDeleteDirectors;
 
-    private Button buttonMoviesAddImages;
+	private Button buttonMoviesAddGenres;
 
-    private Button buttonMoviesDeleteImages;
+	private Button buttonMoviesDeleteGenres;
 
-    private Button buttonMoviesChangeDate;
-    
-    private Button buttonMoviesChangemainImage;
+	private Button buttonMoviesAddImages;
 
-    private SashForm sashForm1;
+	private Button buttonMoviesDeleteImages;
 
-    private Composite parent;
+	private Button buttonMoviesChangeDate;
 
-    private Composite compositeButtons;
+	private Button buttonMoviesChangemainImage;
 
-    private Composite compositeMoviesEditDirectors;
+	private SashForm sashForm1;
 
-    private Composite compositeMoviesEditActors;
+	private Composite parent;
 
-    private Composite compositeMoviesEditGenres;
+	private Composite compositeButtons;
 
-    private Composite compositeMoviesEditImages;
+	private Composite compositeMoviesEditDirectors;
 
-    private int mode_movie;
+	private Composite compositeMoviesEditActors;
 
-    private StatusLineStyledText statusLine;
+	private Composite compositeMoviesEditGenres;
 
-    private ResourceBundle l;
+	private Composite compositeMoviesEditImages;
 
-    private Locale locale;
+	private int mode_movie;
 
-    private Movie localmovie;
+	private StatusLineStyledText statusLine;
 
-    /*
-     * ?ndert die Sprache aller Elemente
-     * 
-     * @see de.hsharz.provirent.managment.gui.AbstractComposite#changeLanguage(java.util.Locale)
-     */
-    public void changeLanguage(Locale locale) {
+	private ResourceBundle l;
 
-    }
+	private Locale locale;
 
-    /*
-     * Init die Sprache (properties Datei)
-     * 
-     * @see de.hsharz.provirent.managment.gui.AbstractComposite#initLanguage(java.util.Locale)
-     */
-    public void initLanguage(Locale locale) {
+	private Movie localmovie;
 
-        l = PropertyResourceBundle.getBundle(
-                "de.hsharz.provirent.management.gui.language.movies", locale);
+	/*
+	 * ?ndert die Sprache aller Elemente
+	 * 
+	 * @see de.hsharz.provirent.managment.gui.AbstractComposite#changeLanguage(java.util.Locale)
+	 */
+	public void changeLanguage(Locale locale) {
 
-    }
+	}
 
-    /**
-     * Auto-generated main method to display this
-     * de.hsharz.provirent.management.gui.AbstractComposite inside a new Shell.
-     */
-    public static void main(String[] args) {
-        showGUI();
-    }
+	/*
+	 * Init die Sprache (properties Datei)
+	 * 
+	 * @see de.hsharz.provirent.managment.gui.AbstractComposite#initLanguage(java.util.Locale)
+	 */
+	public void initLanguage(Locale locale) {
 
-    /**
-     * Auto-generated method to display this
-     * de.hsharz.provirent.management.gui.AbstractComposite inside a new Shell.
-     */
-    /**
-     * Auto-generated method to display this org.eclipse.swt.widgets.Composite
-     * inside a new Shell.
-     */
-    public static void showGUI() {
-        Display display = Display.getDefault();
-        Shell shell = new Shell(display);
+		l = PropertyResourceBundle.getBundle(
+				"de.hsharz.provirent.management.gui.language.movies", locale);
 
-        shell.open();
-        while (!shell.isDisposed()) {
-            if (!display.readAndDispatch())
-                display.sleep();
-        }
-    }
+	}
 
-    public CompositeMovie(Composite p, int style, StatusLineStyledText status,
-            Locale l) {
-        super(p, style, status, l);
-        parent = p;
-        //Statusline wird gestzt
-        statusLine = status;
+	/**
+	 * Auto-generated main method to display this
+	 * de.hsharz.provirent.management.gui.AbstractComposite inside a new Shell.
+	 */
+	public static void main(String[] args) {
+		showGUI();
+	}
 
-        locale = l;
-        //sprache wird init
-        initLanguage(locale);
+	/**
+	 * Auto-generated method to display this
+	 * de.hsharz.provirent.management.gui.AbstractComposite inside a new Shell.
+	 */
+	/**
+	 * Auto-generated method to display this org.eclipse.swt.widgets.Composite
+	 * inside a new Shell.
+	 */
+	public static void showGUI() {
+		Display display = Display.getDefault();
+		Shell shell = new Shell(display);
 
-        initGUI();
-    }
+		shell.open();
+		while (!shell.isDisposed()) {
+			if (!display.readAndDispatch())
+				display.sleep();
+		}
+	}
 
-    private void initGUI() {
-        if (logger.isDebugEnabled()) {
-            logger.debug("initGUI() - start");
-        }
+	public CompositeMovie(Composite p, int style, StatusLineStyledText status,
+			Locale l) {
+		super(p, style, status, l);
+		parent = p;
+		//Statusline wird gestzt
+		statusLine = status;
 
-        this.setLayout(new GridLayout());
-        this.setSize(824, 634);
-        {
-            groupMovie = new Group(this, SWT.NONE);
-            GridLayout groupMovieLayout = new GridLayout();
-            GridData groupMovieLData = new GridData();
-            groupMovieLData.grabExcessHorizontalSpace = true;
-            groupMovieLData.grabExcessVerticalSpace = true;
-            groupMovieLData.horizontalAlignment = GridData.FILL;
-            groupMovieLData.verticalAlignment = GridData.FILL;
-            groupMovie.setLayoutData(groupMovieLData);
-            groupMovieLayout.makeColumnsEqualWidth = true;
-            groupMovie.setLayout(groupMovieLayout);
-            groupMovie.setText(l.getString("movies.group.label"));
-            {
-                sashForm1 = new SashForm(groupMovie, SWT.NONE);
-                GridData sashForm1LData = new GridData();
-                sashForm1LData.verticalAlignment = GridData.FILL;
-                sashForm1LData.horizontalAlignment = GridData.FILL;
-                sashForm1LData.grabExcessHorizontalSpace = true;
-                sashForm1LData.grabExcessVerticalSpace = true;
-                sashForm1.setLayoutData(sashForm1LData);
+		locale = l;
+		//sprache wird init
+		initLanguage(locale);
 
-            }
-            // init the rest of the layout
-            initMoviesOverview();
-            initMoviesDetail();
-            refreshMoviesOverviewTable(textMoviesSearch.getText());
-        }
+		initGUI();
+	}
 
-        this.layout();
+	private void initGUI() {
+		if (logger.isDebugEnabled()) {
+			logger.debug("initGUI() - start");
+		}
 
-        if (logger.isDebugEnabled()) {
-            logger.debug("initGUI() - end");
-        }
-    }
+		this.setLayout(new GridLayout());
+		this.setSize(824, 634);
+		{
+			groupMovie = new Group(this, SWT.NONE);
+			GridLayout groupMovieLayout = new GridLayout();
+			GridData groupMovieLData = new GridData();
+			groupMovieLData.grabExcessHorizontalSpace = true;
+			groupMovieLData.grabExcessVerticalSpace = true;
+			groupMovieLData.horizontalAlignment = GridData.FILL;
+			groupMovieLData.verticalAlignment = GridData.FILL;
+			groupMovie.setLayoutData(groupMovieLData);
+			groupMovieLayout.makeColumnsEqualWidth = true;
+			groupMovie.setLayout(groupMovieLayout);
+			groupMovie.setText(l.getString("movies.group.label"));
+			{
+				sashForm1 = new SashForm(groupMovie, SWT.NONE);
+				GridData sashForm1LData = new GridData();
+				sashForm1LData.verticalAlignment = GridData.FILL;
+				sashForm1LData.horizontalAlignment = GridData.FILL;
+				sashForm1LData.grabExcessHorizontalSpace = true;
+				sashForm1LData.grabExcessVerticalSpace = true;
+				sashForm1.setLayoutData(sashForm1LData);
 
-    /**
-     *  
-     */
-    private void initMoviesOverview() {
-        //	  Group Movies Overview
-        {
-            groupMoviesOverview = new Group(sashForm1, SWT.NONE);
-            GridLayout group1Layout = new GridLayout();
-            group1Layout.numColumns = 8;
-            groupMoviesOverview.setLayout(group1Layout);
-            groupMoviesOverview.setText(l
-                    .getString("movies.groupoverview.label"));
+			}
+			// init the rest of the layout
+			initMoviesOverview();
+			initMoviesDetail();
+			refreshMoviesOverviewTable(textMoviesSearch.getText());
+		}
 
-            {// table Actors Overview
-                tableMoviesOverview = new Table(groupMoviesOverview, SWT.SINGLE
-                        | SWT.FULL_SELECTION | SWT.V_SCROLL | SWT.BORDER);
-                GridData tableMoviesOverviewLData = new GridData();
-                tableMoviesOverview.setHeaderVisible(true);
-                tableMoviesOverview.setLinesVisible(true);
-                tableMoviesOverviewLData.horizontalAlignment = GridData.FILL;
-                tableMoviesOverviewLData.verticalAlignment = GridData.FILL;
-                tableMoviesOverviewLData.horizontalSpan = 8;
-                tableMoviesOverviewLData.grabExcessHorizontalSpace = true;
-                tableMoviesOverviewLData.grabExcessVerticalSpace = true;
-                tableMoviesOverview.setLayoutData(tableMoviesOverviewLData);
-                tableMoviesOverview
-                        .addSelectionListener(new SelectionAdapter() {
-                            public void widgetSelected(SelectionEvent evt) {
-                                int index = tableMoviesOverview
-                                        .getSelectionIndex();
+		this.layout();
 
-                                //es wurde ein Element aus Tabelle ausgewaehlt
-                                // jetzt muss die
-                                //Detailansicht aktualisiert werden
-                                refreshMoviesDetail(tableMoviesOverview
-                                        .getItem(index).getText(0));
-                            }
-                        });
-                {
-                    tableMoviesOverview_ColumnID = new TableColumn(
-                            tableMoviesOverview, SWT.CENTER);
-                    tableMoviesOverview_ColumnID.setText(l
-                            .getString("movies.groupoverview.columnid"));
-                    tableMoviesOverview_ColumnID.setWidth(40);
-                }
-                {
-                    tableMoviesOverview_ColumnTitle = new TableColumn(
-                            tableMoviesOverview, SWT.CENTER);
-                    tableMoviesOverview_ColumnTitle.setText(l
-                            .getString("movies.groupoverview.columntitle"));
-                    tableMoviesOverview_ColumnTitle.setWidth(120);
-                }
-                {
-                    tableMoviesOverview_ColumnDate = new TableColumn(
-                            tableMoviesOverview, SWT.CENTER);
-                    tableMoviesOverview_ColumnDate.setText(l
-                            .getString("movies.groupoverview.columndate"));
-                    tableMoviesOverview_ColumnDate.setWidth(120);
-                }
-            }// table Movies Overview
+		if (logger.isDebugEnabled()) {
+			logger.debug("initGUI() - end");
+		}
+	}
 
-            // Search
-            {
-                //label for Search
-                labelMoviesSearch = new Label(groupMoviesOverview, SWT.NONE);
-                labelMoviesSearch.setText(l
-                        .getString("movies.groupoverview.searchlabel")
-                        + ":");
-                GridData label2LData = new GridData();
-                label2LData.horizontalSpan = 3;
-                labelMoviesSearch.setLayoutData(label2LData);
+	/**
+	 *  
+	 */
+	private void initMoviesOverview() {
+		//	  Group Movies Overview
+		{
+			groupMoviesOverview = new Group(sashForm1, SWT.NONE);
+			GridLayout group1Layout = new GridLayout();
+			group1Layout.numColumns = 8;
+			groupMoviesOverview.setLayout(group1Layout);
+			groupMoviesOverview.setText(l
+					.getString("movies.groupoverview.label"));
 
-                //text Search
-                textMoviesSearch = new Text(groupMoviesOverview, SWT.BORDER);
-                GridData text2LData = new GridData();
-                textMoviesSearch.addFocusListener(new FocusAdapter() {
-                    public void focusLost(FocusEvent evt) {
-                        if (logger.isDebugEnabled()) {
-                            logger.debug("focusLost(FocusEvent evt = " + evt
-                                    + " " + textMoviesSearch.getText()
-                                    + ") - start");
-                        }
+			{// table Actors Overview
+				tableMoviesOverview = new Table(groupMoviesOverview, SWT.SINGLE
+						| SWT.FULL_SELECTION | SWT.V_SCROLL | SWT.BORDER);
+				GridData tableMoviesOverviewLData = new GridData();
+				tableMoviesOverview.setHeaderVisible(true);
+				tableMoviesOverview.setLinesVisible(true);
+				tableMoviesOverviewLData.horizontalAlignment = GridData.FILL;
+				tableMoviesOverviewLData.verticalAlignment = GridData.FILL;
+				tableMoviesOverviewLData.horizontalSpan = 8;
+				tableMoviesOverviewLData.grabExcessHorizontalSpace = true;
+				tableMoviesOverviewLData.grabExcessVerticalSpace = true;
+				tableMoviesOverview.setLayoutData(tableMoviesOverviewLData);
+				tableMoviesOverview
+						.addSelectionListener(new SelectionAdapter() {
+							public void widgetSelected(SelectionEvent evt) {
+								int index = tableMoviesOverview
+										.getSelectionIndex();
 
-                        refreshMoviesOverviewTable(textMoviesSearch.getText());
+								//es wurde ein Element aus Tabelle ausgewaehlt
+								// jetzt muss die
+								//Detailansicht aktualisiert werden
+								refreshMoviesDetail(tableMoviesOverview
+										.getItem(index).getText(0));
+							}
+						});
+				{
+					tableMoviesOverview_ColumnID = new TableColumn(
+							tableMoviesOverview, SWT.CENTER);
+					tableMoviesOverview_ColumnID.setText(l
+							.getString("movies.groupoverview.columnid"));
+					tableMoviesOverview_ColumnID.setWidth(40);
+				}
+				{
+					tableMoviesOverview_ColumnTitle = new TableColumn(
+							tableMoviesOverview, SWT.CENTER);
+					tableMoviesOverview_ColumnTitle.setText(l
+							.getString("movies.groupoverview.columntitle"));
+					tableMoviesOverview_ColumnTitle.setWidth(120);
+				}
+				{
+					tableMoviesOverview_ColumnDate = new TableColumn(
+							tableMoviesOverview, SWT.CENTER);
+					tableMoviesOverview_ColumnDate.setText(l
+							.getString("movies.groupoverview.columndate"));
+					tableMoviesOverview_ColumnDate.setWidth(120);
+				}
+			}// table Movies Overview
 
-                        if (logger.isDebugEnabled()) {
-                            logger.debug("focusLost(FocusEvent) - end");
-                        }
-                    }
-                });
-                textMoviesSearch.addListener(SWT.DefaultSelection,new Listener() {
-                            public void handleEvent(Event e) {
-                                if (logger.isDebugEnabled()) {
-                                    logger.debug("handleEvent(Event e = " + e
-                                            + " " + textMoviesSearch.getText()
-                                            + ") - start");
-                                }
+			// Search
+			{
+				//label for Search
+				labelMoviesSearch = new Label(groupMoviesOverview, SWT.NONE);
+				labelMoviesSearch.setText(l
+						.getString("movies.groupoverview.searchlabel")
+						+ ":");
+				GridData label2LData = new GridData();
+				label2LData.horizontalSpan = 3;
+				labelMoviesSearch.setLayoutData(label2LData);
 
-                                refreshMoviesOverviewTable(textMoviesSearch
-                                        .getText());
+				//text Search
+				textMoviesSearch = new Text(groupMoviesOverview, SWT.BORDER);
+				GridData text2LData = new GridData();
+				textMoviesSearch.addFocusListener(new FocusAdapter() {
+					public void focusLost(FocusEvent evt) {
+						if (logger.isDebugEnabled()) {
+							logger.debug("focusLost(FocusEvent evt = " + evt
+									+ " " + textMoviesSearch.getText()
+									+ ") - start");
+						}
 
-                                if (logger.isDebugEnabled()) {
-                                    logger.debug("handleEvent(Event) - end");
-                                }
-                            }
+						refreshMoviesOverviewTable(textMoviesSearch.getText());
 
-                        });
-                text2LData.horizontalAlignment = GridData.FILL;
-                text2LData.horizontalSpan = 5;
-                text2LData.grabExcessHorizontalSpace = true;
-                textMoviesSearch.setLayoutData(text2LData);
-            }// Search
-        }
-    }
+						if (logger.isDebugEnabled()) {
+							logger.debug("focusLost(FocusEvent) - end");
+						}
+					}
+				});
+				textMoviesSearch.addListener(SWT.DefaultSelection,
+						new Listener() {
+							public void handleEvent(Event e) {
+								if (logger.isDebugEnabled()) {
+									logger.debug("handleEvent(Event e = " + e
+											+ " " + textMoviesSearch.getText()
+											+ ") - start");
+								}
 
-    /**
-     *  
-     */
-    private void initMoviesDetail() {
-        // Group Actors Detail
-        {
-            groupMoviesDetail = new Group(sashForm1, SWT.H_SCROLL);
-            GridLayout group2Layout = new GridLayout();
-            GridData group2LData = new GridData();
-            group2Layout.verticalSpacing = 15;
-            group2Layout.numColumns = 6;
-            groupMoviesDetail.setText(l.getString("movies.groupdetail.label"));
-            FormData formData = new FormData();
-            groupMoviesDetail.setLayout(group2Layout);
-            formData.right = new FormAttachment(100, 100, -5);
-            formData.top = new FormAttachment(0, 100, 5);
-            formData.bottom = new FormAttachment(100, 100, -5);
-            groupMoviesDetail.setLayoutData(formData);
-        }
-        //      labels and text for detail
-        {
-            labelMoviesID = new Label(groupMoviesDetail, SWT.NONE);
-            labelMoviesID.setText(l.getString("movies.groupdetail.labelid")
-                    + ":");
-            labelMoviesID.setSize(125, 15);
-            GridData formData2 = new GridData();
-            formData2.heightHint = 15;
-            formData2.horizontalAlignment = GridData.FILL;
-            formData2.verticalAlignment = GridData.BEGINNING;
-            labelMoviesID.setLayoutData(formData2);
-        }
-        {
-            textMoviesID = new Text(groupMoviesDetail, SWT.READ_ONLY
-                    | SWT.BORDER);
-            GridData text1LData1 = new GridData();
-            text1LData1.horizontalAlignment = GridData.FILL;
-            text1LData1.heightHint = 13;
-            text1LData1.horizontalSpan = 5;
-            text1LData1.grabExcessHorizontalSpace = true;
-            textMoviesID.setLayoutData(text1LData1);
-        }
-        {
-            labelMoviesTitle = new Label(groupMoviesDetail, SWT.NONE);
-            labelMoviesTitle.setText(l
-                    .getString("movies.groupdetail.labeltitle")
-                    + ":");
-            labelMoviesTitle.setSize(125, 15);
-            GridData labelActorNameLData = new GridData();
-            labelActorNameLData.heightHint = 15;
-            labelActorNameLData.horizontalAlignment = GridData.FILL;
-            labelActorNameLData.verticalAlignment = GridData.BEGINNING;
-            labelMoviesTitle.setLayoutData(labelActorNameLData);
-        }
-        {
-            textMoviesTitle = new Text(groupMoviesDetail, SWT.READ_ONLY
-                    | SWT.BORDER);
-            GridData text1LData2 = new GridData();
-            text1LData2.horizontalAlignment = GridData.FILL;
-            text1LData2.heightHint = 13;
-            text1LData2.horizontalSpan = 5;
-            text1LData2.grabExcessHorizontalSpace = true;
-            textMoviesTitle.setLayoutData(text1LData2);
-        }
-        {
-            labelMoviesRuntime = new Label(groupMoviesDetail, SWT.NONE);
-            labelMoviesRuntime.setText(l
-                    .getString("movies.groupdetail.labelruntime")
-                    + ":");
-            labelMoviesRuntime.setSize(125, 15);
-            GridData labelRuntimeLData = new GridData();
-            labelRuntimeLData.heightHint = 15;
-            labelRuntimeLData.horizontalAlignment = GridData.FILL;
-            labelRuntimeLData.verticalAlignment = GridData.BEGINNING;
-            labelMoviesRuntime.setLayoutData(labelRuntimeLData);
-        }
-        {
-            textMoviesRuntime = new Text(groupMoviesDetail, SWT.READ_ONLY
-                    | SWT.BORDER);
-            GridData text1LData2 = new GridData();
-            text1LData2.horizontalAlignment = GridData.FILL;
-            text1LData2.heightHint = 13;
-            text1LData2.horizontalSpan = 5;
-            text1LData2.grabExcessHorizontalSpace = true;
-            textMoviesRuntime.setLayoutData(text1LData2);
-        }
-        {
-            labelMoviesDate = new Label(groupMoviesDetail, SWT.NONE);
-            labelMoviesDate.setText(l.getString("movies.groupdetail.labeldate")
-                    + ":");
-            labelMoviesDate.setSize(125, 15);
-            GridData labelMoviesDateLData = new GridData();
-            labelMoviesDateLData.heightHint = 15;
-            labelMoviesDateLData.horizontalAlignment = GridData.FILL;
-            labelMoviesDateLData.verticalAlignment = GridData.BEGINNING;
-            labelMoviesDate.setLayoutData(labelMoviesDateLData);
-        }
-        {
-            textMoviesDate = new Text(groupMoviesDetail, SWT.READ_ONLY
-                    | SWT.BORDER);
-            GridData text1LData2 = new GridData();
-            text1LData2.horizontalAlignment = GridData.FILL;
-            text1LData2.heightHint = 13;
-            text1LData2.horizontalSpan = 4;
-            text1LData2.grabExcessHorizontalSpace = true;
-            textMoviesDate.setLayoutData(text1LData2);
-            textMoviesDate.setText(l.getString("movies.groupdetail.textdate"));
-        }
-        {
-            buttonMoviesChangeDate = new Button(groupMoviesDetail, SWT.NONE);
-            buttonMoviesChangeDate.setText(l
-                    .getString("movies.button.changedate"));
-            buttonMoviesChangeDate.setEnabled(false);
-            GridData text1LData2 = new GridData();
-            text1LData2.horizontalAlignment = GridData.FILL;
-            text1LData2.heightHint = 20;
-            text1LData2.horizontalSpan = 1;
-            buttonMoviesChangeDate.setLayoutData(text1LData2);
-            buttonMoviesChangeDate.addSelectionListener(new SelectionAdapter() {
-                public void widgetSelected(SelectionEvent evt) {
-                    //open responsible Dialog and insert text
-                    final SWTCalendarDialog cal = new SWTCalendarDialog(
-                            getDisplay(),
-                            l.getString("movies.groupdetail.datebuttonfinish"),
-                            l.getString("movies.groupdetail.datedialogtitle"));
+								refreshMoviesOverviewTable(textMoviesSearch
+										.getText());
 
-                    cal.addDateChangedListener(new SWTCalendarListener() {
-                        public void dateChanged(SWTCalendarEvent calendarEvent) {
-                            textMoviesDate.setText(DateFormat.getDateInstance(
-                                    DateFormat.LONG).format(
-                                    calendarEvent.getCalendar().getTime()));
-                        }
-                    });
+								if (logger.isDebugEnabled()) {
+									logger.debug("handleEvent(Event) - end");
+								}
+							}
 
-                    if (textMoviesDate.getText() != null
-                            && textMoviesDate.getText().length() > 0) {
-                        try {
-                            cal.setDate(DateFormat.getDateInstance(
-                                    DateFormat.LONG).parse(
-                                    textMoviesDate.getText()));
-                        } catch (ParseException pe) {
-                            cal.setDate(new Date());
-                        }
-                    }
-                    cal.open();
-                }
-            });
-        }
-        //labels and buttons for Detail
-        {
-            labelMoviesDescription = new Label(groupMoviesDetail, SWT.NONE);
-            labelMoviesDescription.setText(l
-                    .getString("movies.groupdetail.labeldescription"));
-            GridData formData2 = new GridData();
-            formData2.verticalSpan = 5;
-            formData2.verticalAlignment = GridData.BEGINNING;
-            labelMoviesDescription.setLayoutData(formData2);
-        }
-        {
-            textMoviesDescription = new Text(groupMoviesDetail, SWT.MULTI
-                    | SWT.READ_ONLY | SWT.V_SCROLL | SWT.BORDER);
-            GridData formData2 = new GridData();
-            formData2.horizontalSpan = 5;
-            formData2.verticalSpan = 5;
-            formData2.verticalAlignment = GridData.FILL;
-            formData2.horizontalAlignment = GridData.FILL;
-            textMoviesDescription.setLayoutData(formData2);
-        }
-        //      EditDirectors
-        {
+						});
+				text2LData.horizontalAlignment = GridData.FILL;
+				text2LData.horizontalSpan = 5;
+				text2LData.grabExcessHorizontalSpace = true;
+				textMoviesSearch.setLayoutData(text2LData);
+			}// Search
+		}
+	}
 
-            compositeMoviesEditDirectors = new Composite(groupMoviesDetail,
-                    SWT.NONE);
-            GridLayout composite1Layout = new GridLayout();
-            GridData composite1LData = new GridData();
-            composite1LData.horizontalAlignment = GridData.FILL;
-            composite1LData.verticalAlignment = GridData.BEGINNING;
-            compositeMoviesEditDirectors.setLayoutData(composite1LData);
-            composite1Layout.numColumns = 2;
-            compositeMoviesEditDirectors.setLayout(composite1Layout);
-        }
-        {
-            labelMoviesDirectors = new Label(compositeMoviesEditDirectors,
-                    SWT.NONE);
-            labelMoviesDirectors.setText(l
-                    .getString("movies.groupdetail.labeldirectors"));
-            GridData formData2 = new GridData();
-            formData2.horizontalSpan = 2;
-            formData2.verticalSpan = 1;
-            labelMoviesDirectors.setLayoutData(formData2);
-        }
-        {
-            buttonMoviesAddDirectors = new Button(compositeMoviesEditDirectors,
-                    SWT.NONE);
-            buttonMoviesAddDirectors.setText(l
-                    .getString("movies.button.additem"));
-            buttonMoviesAddDirectors.setEnabled(false);
-            GridData text1LData2 = new GridData();
-            text1LData2.heightHint = 20;
-            text1LData2.horizontalSpan = 1;
-            text1LData2.horizontalAlignment = GridData.BEGINNING;
-            buttonMoviesAddDirectors.setLayoutData(text1LData2);
-            buttonMoviesAddDirectors
-                    .addSelectionListener(new SelectionAdapter() {
-                        public void widgetSelected(SelectionEvent evt) {
-                            //open responsible Dialog and insert objects into
-                            // table
-                            DialogMovie dialog = new DialogMovie(getShell(), 0,
-                                    locale, localmovie, DialogMovie.TYPE_DIRECTOR);
-                            dialog.open();
+	/**
+	 *  
+	 */
+	private void initMoviesDetail() {
+		// Group Actors Detail
+		{
+			groupMoviesDetail = new Group(sashForm1, SWT.H_SCROLL);
+			GridLayout group2Layout = new GridLayout();
+			GridData group2LData = new GridData();
+			group2Layout.verticalSpacing = 15;
+			group2Layout.numColumns = 6;
+			groupMoviesDetail.setText(l.getString("movies.groupdetail.label"));
+			FormData formData = new FormData();
+			groupMoviesDetail.setLayout(group2Layout);
+			formData.right = new FormAttachment(100, 100, -5);
+			formData.top = new FormAttachment(0, 100, 5);
+			formData.bottom = new FormAttachment(100, 100, -5);
+			groupMoviesDetail.setLayoutData(formData);
+		}
+		//      labels and text for detail
+		{
+			labelMoviesID = new Label(groupMoviesDetail, SWT.NONE);
+			labelMoviesID.setText(l.getString("movies.groupdetail.labelid")
+					+ ":");
+			labelMoviesID.setSize(125, 15);
+			GridData formData2 = new GridData();
+			formData2.heightHint = 15;
+			formData2.horizontalAlignment = GridData.FILL;
+			formData2.verticalAlignment = GridData.BEGINNING;
+			labelMoviesID.setLayoutData(formData2);
+		}
+		{
+			textMoviesID = new Text(groupMoviesDetail, SWT.READ_ONLY
+					| SWT.BORDER);
+			GridData text1LData1 = new GridData();
+			text1LData1.horizontalAlignment = GridData.FILL;
+			text1LData1.heightHint = 13;
+			text1LData1.horizontalSpan = 5;
+			text1LData1.grabExcessHorizontalSpace = true;
+			textMoviesID.setLayoutData(text1LData1);
+		}
+		{
+			labelMoviesTitle = new Label(groupMoviesDetail, SWT.NONE);
+			labelMoviesTitle.setText(l
+					.getString("movies.groupdetail.labeltitle")
+					+ ":");
+			labelMoviesTitle.setSize(125, 15);
+			GridData labelActorNameLData = new GridData();
+			labelActorNameLData.heightHint = 15;
+			labelActorNameLData.horizontalAlignment = GridData.FILL;
+			labelActorNameLData.verticalAlignment = GridData.BEGINNING;
+			labelMoviesTitle.setLayoutData(labelActorNameLData);
+		}
+		{
+			textMoviesTitle = new Text(groupMoviesDetail, SWT.READ_ONLY
+					| SWT.BORDER);
+			GridData text1LData2 = new GridData();
+			text1LData2.horizontalAlignment = GridData.FILL;
+			text1LData2.heightHint = 13;
+			text1LData2.horizontalSpan = 5;
+			text1LData2.grabExcessHorizontalSpace = true;
+			textMoviesTitle.setLayoutData(text1LData2);
+		}
+		{
+			labelMoviesRuntime = new Label(groupMoviesDetail, SWT.NONE);
+			labelMoviesRuntime.setText(l
+					.getString("movies.groupdetail.labelruntime")
+					+ ":");
+			labelMoviesRuntime.setSize(125, 15);
+			GridData labelRuntimeLData = new GridData();
+			labelRuntimeLData.heightHint = 15;
+			labelRuntimeLData.horizontalAlignment = GridData.FILL;
+			labelRuntimeLData.verticalAlignment = GridData.BEGINNING;
+			labelMoviesRuntime.setLayoutData(labelRuntimeLData);
+		}
+		{
+			textMoviesRuntime = new Text(groupMoviesDetail, SWT.READ_ONLY
+					| SWT.BORDER);
+			GridData text1LData2 = new GridData();
+			text1LData2.horizontalAlignment = GridData.FILL;
+			text1LData2.heightHint = 13;
+			text1LData2.horizontalSpan = 5;
+			text1LData2.grabExcessHorizontalSpace = true;
+			textMoviesRuntime.setLayoutData(text1LData2);
+		}
+		{
+			labelMoviesDate = new Label(groupMoviesDetail, SWT.NONE);
+			labelMoviesDate.setText(l.getString("movies.groupdetail.labeldate")
+					+ ":");
+			labelMoviesDate.setSize(125, 15);
+			GridData labelMoviesDateLData = new GridData();
+			labelMoviesDateLData.heightHint = 15;
+			labelMoviesDateLData.horizontalAlignment = GridData.FILL;
+			labelMoviesDateLData.verticalAlignment = GridData.BEGINNING;
+			labelMoviesDate.setLayoutData(labelMoviesDateLData);
+		}
+		{
+			textMoviesDate = new Text(groupMoviesDetail, SWT.READ_ONLY
+					| SWT.BORDER);
+			GridData text1LData2 = new GridData();
+			text1LData2.horizontalAlignment = GridData.FILL;
+			text1LData2.heightHint = 13;
+			text1LData2.horizontalSpan = 4;
+			text1LData2.grabExcessHorizontalSpace = true;
+			textMoviesDate.setLayoutData(text1LData2);
+			textMoviesDate.setText(l.getString("movies.groupdetail.textdate"));
+		}
+		{
+			buttonMoviesChangeDate = new Button(groupMoviesDetail, SWT.NONE);
+			buttonMoviesChangeDate.setText(l
+					.getString("movies.button.changedate"));
+			buttonMoviesChangeDate.setEnabled(false);
+			GridData text1LData2 = new GridData();
+			text1LData2.horizontalAlignment = GridData.FILL;
+			text1LData2.heightHint = 20;
+			text1LData2.horizontalSpan = 1;
+			buttonMoviesChangeDate.setLayoutData(text1LData2);
+			buttonMoviesChangeDate.addSelectionListener(new SelectionAdapter() {
+				public void widgetSelected(SelectionEvent evt) {
+					//open responsible Dialog and insert text
+					final SWTCalendarDialog cal = new SWTCalendarDialog(
+							getDisplay(),
+							l.getString("movies.groupdetail.datebuttonfinish"),
+							l.getString("movies.groupdetail.datedialogtitle"));
 
-                            tableMoviesDirectorsDetail.removeAll();
-                            TableItem item;
-                            for (int i = 0; i < localmovie.getDirector().size(); i++) {
-                                item = new TableItem(
-                                        tableMoviesDirectorsDetail, SWT.NONE);
-                                item.setText(new String[] {
-                                        ((Director) localmovie.getDirector().get(i))
-                                                .getDirectorId()
-                                                + "",
-                                        ((Director) localmovie.getDirector().get(i))
-                                                .getLastName()
-                                                + " , "
-                                                + ((Director) localmovie
-                                                        .getDirector().get(i))
-                                                        .getFirstName() });
-                            }
+					cal.addDateChangedListener(new SWTCalendarListener() {
+						public void dateChanged(SWTCalendarEvent calendarEvent) {
+							textMoviesDate.setText(DateFormat.getDateInstance(
+									DateFormat.LONG).format(
+									calendarEvent.getCalendar().getTime()));
+						}
+					});
 
-                        }
-                    });
-        }
-        {
-            buttonMoviesDeleteDirectors = new Button(
-                    compositeMoviesEditDirectors, SWT.NONE);
-            buttonMoviesDeleteDirectors.setText(l
-                    .getString("movies.button.deleteitem"));
-            buttonMoviesDeleteDirectors.setEnabled(false);
-            GridData text1LData2 = new GridData();
-            text1LData2.horizontalAlignment = GridData.BEGINNING;
-            text1LData2.heightHint = 20;
-            text1LData2.horizontalSpan = 1;
-            buttonMoviesDeleteDirectors.setLayoutData(text1LData2);
-            buttonMoviesDeleteDirectors
-                    .addSelectionListener(new SelectionAdapter() {
-                        public void widgetSelected(SelectionEvent evt) {
-                            //get selected Item
-                            //get id from object
-                            //search for id in list and delete object
-                            //remove table entry
-                            int index = tableMoviesDirectorsDetail
-                                    .getSelectionIndex();
-                            if (index >= 0) {
-                                String strid = tableMoviesDirectorsDetail
-                                        .getItem(index).getText(0);
-                                int id = Integer.parseInt(strid);
-                                for (int i = 0; i < localmovie.getDirector().size(); i++) {
-                                    Director o = (Director) localmovie.getDirector()
-                                            .get(i);
-                                    if (o.getDirectorId().intValue() == id) {
-                                        localmovie.getDirector().remove(o);
-                                        break;
-                                    }
-                                }
-                                tableMoviesDirectorsDetail.remove(index);
-                            }
-                        }
-                    });
-        }
-        {
-            tableMoviesDirectorsDetail = new Table(groupMoviesDetail,
-                    SWT.SINGLE | SWT.FULL_SELECTION | SWT.V_SCROLL | SWT.BORDER);
-            //tableMoviesDirectorsDetail.setHeaderVisible(true);
-            //tableMoviesDirectorsDetail.setLinesVisible(true);
-            GridData tableMoviesDirectorsDetailLData = new GridData();
-            tableMoviesDirectorsDetailLData.horizontalAlignment = GridData.FILL;
-            tableMoviesDirectorsDetailLData.horizontalSpan = 5;
-            tableMoviesDirectorsDetailLData.grabExcessVerticalSpace = true;
-            tableMoviesDirectorsDetailLData.verticalAlignment = GridData.FILL;
-            tableMoviesDirectorsDetail
-                    .setLayoutData(tableMoviesDirectorsDetailLData);
+					if (textMoviesDate.getText() != null
+							&& textMoviesDate.getText().length() > 0) {
+						try {
+							cal.setDate(DateFormat.getDateInstance(
+									DateFormat.LONG).parse(
+									textMoviesDate.getText()));
+						} catch (ParseException pe) {
+							cal.setDate(new Date());
+						}
+					}
+					cal.open();
+				}
+			});
+		}
+		//labels and buttons for Detail
+		{
+			labelMoviesDescription = new Label(groupMoviesDetail, SWT.NONE);
+			labelMoviesDescription.setText(l
+					.getString("movies.groupdetail.labeldescription"));
+			GridData formData2 = new GridData();
+			formData2.verticalSpan = 5;
+			formData2.verticalAlignment = GridData.BEGINNING;
+			labelMoviesDescription.setLayoutData(formData2);
+		}
+		{
+			textMoviesDescription = new Text(groupMoviesDetail, SWT.MULTI
+					| SWT.READ_ONLY | SWT.V_SCROLL | SWT.BORDER);
+			GridData formData2 = new GridData();
+			formData2.horizontalSpan = 5;
+			formData2.verticalSpan = 5;
+			formData2.verticalAlignment = GridData.FILL;
+			formData2.horizontalAlignment = GridData.FILL;
+			textMoviesDescription.setLayoutData(formData2);
+		}
+		//      EditDirectors
+		{
 
-            {
-                tableMoviesDetail_ColumnID = new TableColumn(
-                        tableMoviesDirectorsDetail, SWT.CENTER);
-                tableMoviesDetail_ColumnID.setWidth(0);
-                tableMoviesDetail_ColumnID.setResizable(false);
-            }
-            {
-                tableMoviesDetail_ColumnName = new TableColumn(
-                        tableMoviesDirectorsDetail, SWT.LEFT);
-                tableMoviesDetail_ColumnName
-                        .setText(l
-                                .getString("movies.groupoverviewdetail.columndirectors"));
-                tableMoviesDetail_ColumnName.setWidth(200);
-            }
-        }// EditDirectors
-        // Edit Actors
-        {
-            compositeMoviesEditActors = new Composite(groupMoviesDetail,
-                    SWT.NONE);
-            GridLayout composite1Layout = new GridLayout();
-            GridData composite1LData = new GridData();
-            composite1LData.horizontalAlignment = GridData.FILL;
-            composite1LData.verticalAlignment = GridData.BEGINNING;
-            compositeMoviesEditActors.setLayoutData(composite1LData);
-            composite1Layout.numColumns = 2;
-            compositeMoviesEditActors.setLayout(composite1Layout);
-        }
+			compositeMoviesEditDirectors = new Composite(groupMoviesDetail,
+					SWT.NONE);
+			GridLayout composite1Layout = new GridLayout();
+			GridData composite1LData = new GridData();
+			composite1LData.horizontalAlignment = GridData.FILL;
+			composite1LData.verticalAlignment = GridData.BEGINNING;
+			compositeMoviesEditDirectors.setLayoutData(composite1LData);
+			composite1Layout.numColumns = 2;
+			compositeMoviesEditDirectors.setLayout(composite1Layout);
+		}
+		{
+			labelMoviesDirectors = new Label(compositeMoviesEditDirectors,
+					SWT.NONE);
+			labelMoviesDirectors.setText(l
+					.getString("movies.groupdetail.labeldirectors"));
+			GridData formData2 = new GridData();
+			formData2.horizontalSpan = 2;
+			formData2.verticalSpan = 1;
+			labelMoviesDirectors.setLayoutData(formData2);
+		}
+		{
+			buttonMoviesAddDirectors = new Button(compositeMoviesEditDirectors,
+					SWT.NONE);
+			buttonMoviesAddDirectors.setText(l
+					.getString("movies.button.additem"));
+			buttonMoviesAddDirectors.setEnabled(false);
+			GridData text1LData2 = new GridData();
+			text1LData2.heightHint = 20;
+			text1LData2.horizontalSpan = 1;
+			text1LData2.horizontalAlignment = GridData.BEGINNING;
+			buttonMoviesAddDirectors.setLayoutData(text1LData2);
+			buttonMoviesAddDirectors
+					.addSelectionListener(new SelectionAdapter() {
+						public void widgetSelected(SelectionEvent evt) {
+							//open responsible Dialog and insert objects into
+							// table
+							DialogMovie dialog = new DialogMovie(getShell(), 0,
+									locale, localmovie,
+									DialogMovie.TYPE_DIRECTOR);
+							dialog.open();
 
-        {
-            labelMoviesActors = new Label(compositeMoviesEditActors, SWT.NONE);
-            labelMoviesActors.setText(l
-                    .getString("movies.groupdetail.labelactors"));
-            GridData formData2 = new GridData();
-            formData2.horizontalSpan = 2;
-            formData2.verticalSpan = 1;
-            labelMoviesActors.setLayoutData(formData2);
-        }
-        {
-            buttonMoviesAddActors = new Button(compositeMoviesEditActors,
-                    SWT.NONE);
-            buttonMoviesAddActors.setText(l.getString("movies.button.additem"));
-            buttonMoviesAddActors.setEnabled(false);
-            GridData text1LData2 = new GridData();
-            text1LData2.heightHint = 20;
-            text1LData2.horizontalSpan = 1;
-            text1LData2.horizontalAlignment = GridData.BEGINNING;
-            buttonMoviesAddActors.setLayoutData(text1LData2);
-            buttonMoviesAddActors.addSelectionListener(new SelectionAdapter() {
-                public void widgetSelected(SelectionEvent evt) {
-                    //open responsible Dialog and insert objects into table
-                    DialogMovie dialog = new DialogMovie(getShell(), 0, locale,
-                            localmovie, DialogMovie.TYPE_ACTOR);
-                    dialog.open();
+							tableMoviesDirectorsDetail.removeAll();
+							TableItem item;
+							for (int i = 0; i < localmovie.getDirector().size(); i++) {
+								item = new TableItem(
+										tableMoviesDirectorsDetail, SWT.NONE);
+								item.setText(new String[] {
+										((Director) localmovie.getDirector()
+												.get(i)).getDirectorId()
+												+ "",
+										((Director) localmovie.getDirector()
+												.get(i)).getLastName()
+												+ " , "
+												+ ((Director) localmovie
+														.getDirector().get(i))
+														.getFirstName() });
+							}
 
-                    tableMoviesActorsDetail.removeAll();
-                    TableItem item;
-                    for (int i = 0; i < localmovie.getActors().size(); i++) {
-                        item = new TableItem(tableMoviesActorsDetail, SWT.NONE);
-                        item.setText(new String[] {
-                                ((Actor) localmovie.getActors().get(i)).getActorId()
-                                        + "",
-                                ((Actor) localmovie.getActors().get(i))
-                                        .getLastName()
-                                        + ", "
-                                        + ((Actor) localmovie.getActors().get(i))
-                                                .getFirstName() });
-                    }
-                }
-            });
-        }
-        {
-            buttonMoviesDeleteActors = new Button(compositeMoviesEditActors,
-                    SWT.NONE);
-            buttonMoviesDeleteActors.setText(l
-                    .getString("movies.button.deleteitem"));
-            buttonMoviesDeleteActors.setEnabled(false);
-            GridData text1LData2 = new GridData();
-            text1LData2.horizontalAlignment = GridData.BEGINNING;
-            text1LData2.heightHint = 20;
-            text1LData2.horizontalSpan = 1;
-            buttonMoviesDeleteActors.setLayoutData(text1LData2);
-            buttonMoviesDeleteActors
-                    .addSelectionListener(new SelectionAdapter() {
-                        public void widgetSelected(SelectionEvent evt) {
-                            //get selected Item
-                            //get id from object
-                            //search for id in list and delete object
-                            //remove table entry
-                            int index = tableMoviesActorsDetail
-                                    .getSelectionIndex();
-                            if (index >= 0) {
-                                String strid = tableMoviesActorsDetail.getItem(
-                                        index).getText(0);
-                                int id = Integer.parseInt(strid);
-                                for (int i = 0; i < localmovie.getActors().size(); i++) {
-                                    Actor o = (Actor) localmovie.getActors().get(i);
-                                    if (o.getActorId().intValue() == id) {
-                                        localmovie.getActors().remove(o);
-                                        break;
-                                    }
-                                }
-                                tableMoviesActorsDetail.remove(index);
-                            }
-                        }
-                    });
-        }
-        {
-            tableMoviesActorsDetail = new Table(groupMoviesDetail, SWT.SINGLE
-                    | SWT.FULL_SELECTION | SWT.V_SCROLL | SWT.BORDER);
-            //tableMoviesActorsDetail.setHeaderVisible(true);
-            //tableMoviesActorsDetail.setLinesVisible(true);
-            GridData tableMoviesActorsDetailLData = new GridData();
-            tableMoviesActorsDetailLData.horizontalAlignment = GridData.FILL;
-            tableMoviesActorsDetailLData.horizontalSpan = 5;
-            tableMoviesActorsDetailLData.grabExcessVerticalSpace = true;
-            tableMoviesActorsDetailLData.verticalAlignment = GridData.FILL;
-            tableMoviesActorsDetail.setLayoutData(tableMoviesActorsDetailLData);
+						}
+					});
+		}
+		{
+			buttonMoviesDeleteDirectors = new Button(
+					compositeMoviesEditDirectors, SWT.NONE);
+			buttonMoviesDeleteDirectors.setText(l
+					.getString("movies.button.deleteitem"));
+			buttonMoviesDeleteDirectors.setEnabled(false);
+			GridData text1LData2 = new GridData();
+			text1LData2.horizontalAlignment = GridData.BEGINNING;
+			text1LData2.heightHint = 20;
+			text1LData2.horizontalSpan = 1;
+			buttonMoviesDeleteDirectors.setLayoutData(text1LData2);
+			buttonMoviesDeleteDirectors
+					.addSelectionListener(new SelectionAdapter() {
+						public void widgetSelected(SelectionEvent evt) {
+							//get selected Item
+							//get id from object
+							//search for id in list and delete object
+							//remove table entry
+							int index = tableMoviesDirectorsDetail
+									.getSelectionIndex();
+							if (index >= 0) {
+								String strid = tableMoviesDirectorsDetail
+										.getItem(index).getText(0);
+								int id = Integer.parseInt(strid);
+								for (int i = 0; i < localmovie.getDirector()
+										.size(); i++) {
+									Director o = (Director) localmovie
+											.getDirector().get(i);
+									if (o.getDirectorId().intValue() == id) {
+										localmovie.getDirector().remove(o);
+										break;
+									}
+								}
+								tableMoviesDirectorsDetail.remove(index);
+							}
+						}
+					});
+		}
+		{
+			tableMoviesDirectorsDetail = new Table(groupMoviesDetail,
+					SWT.SINGLE | SWT.FULL_SELECTION | SWT.V_SCROLL | SWT.BORDER);
+			//tableMoviesDirectorsDetail.setHeaderVisible(true);
+			//tableMoviesDirectorsDetail.setLinesVisible(true);
+			GridData tableMoviesDirectorsDetailLData = new GridData();
+			tableMoviesDirectorsDetailLData.horizontalAlignment = GridData.FILL;
+			tableMoviesDirectorsDetailLData.horizontalSpan = 5;
+			tableMoviesDirectorsDetailLData.grabExcessVerticalSpace = true;
+			tableMoviesDirectorsDetailLData.verticalAlignment = GridData.FILL;
+			tableMoviesDirectorsDetail
+					.setLayoutData(tableMoviesDirectorsDetailLData);
 
-            {
-                tableMoviesDetail_ColumnID = new TableColumn(
-                        tableMoviesActorsDetail, SWT.CENTER);
-                tableMoviesDetail_ColumnID.setWidth(0);
-                tableMoviesDetail_ColumnID.setResizable(false);
-            }
-            {
-                tableMoviesDetail_ColumnName = new TableColumn(
-                        tableMoviesActorsDetail, SWT.LEFT);
-                tableMoviesDetail_ColumnName.setText(l
-                        .getString("movies.groupoverviewdetail.columnactors"));
-                tableMoviesDetail_ColumnName.setWidth(200);
-            }
-        }//Edit Actors
-        //Edit Genres
-        {
-            compositeMoviesEditGenres = new Composite(groupMoviesDetail,
-                    SWT.NONE);
-            GridLayout composite1Layout = new GridLayout();
-            GridData composite1LData = new GridData();
-            composite1LData.horizontalAlignment = GridData.FILL;
-            composite1LData.verticalAlignment = GridData.BEGINNING;
-            compositeMoviesEditGenres.setLayoutData(composite1LData);
-            composite1Layout.numColumns = 2;
-            compositeMoviesEditGenres.setLayout(composite1Layout);
-        }
+			{
+				tableMoviesDetail_ColumnID = new TableColumn(
+						tableMoviesDirectorsDetail, SWT.CENTER);
+				tableMoviesDetail_ColumnID.setWidth(0);
+				tableMoviesDetail_ColumnID.setResizable(false);
+			}
+			{
+				tableMoviesDetail_ColumnName = new TableColumn(
+						tableMoviesDirectorsDetail, SWT.LEFT);
+				tableMoviesDetail_ColumnName
+						.setText(l
+								.getString("movies.groupoverviewdetail.columndirectors"));
+				tableMoviesDetail_ColumnName.setWidth(200);
+			}
+		}// EditDirectors
+		// Edit Actors
+		{
+			compositeMoviesEditActors = new Composite(groupMoviesDetail,
+					SWT.NONE);
+			GridLayout composite1Layout = new GridLayout();
+			GridData composite1LData = new GridData();
+			composite1LData.horizontalAlignment = GridData.FILL;
+			composite1LData.verticalAlignment = GridData.BEGINNING;
+			compositeMoviesEditActors.setLayoutData(composite1LData);
+			composite1Layout.numColumns = 2;
+			compositeMoviesEditActors.setLayout(composite1Layout);
+		}
 
-        {
-            labelMoviesGenres = new Label(compositeMoviesEditGenres, SWT.NONE);
-            labelMoviesGenres.setText(l
-                    .getString("movies.groupdetail.labelgenres"));
-            GridData formData2 = new GridData();
-            formData2.horizontalSpan = 2;
-            formData2.verticalSpan = 1;
-            labelMoviesGenres.setLayoutData(formData2);
-        }
-        {
-            buttonMoviesAddGenres = new Button(compositeMoviesEditGenres,
-                    SWT.NONE);
-            buttonMoviesAddGenres.setText(l.getString("movies.button.additem"));
-            buttonMoviesAddGenres.setEnabled(false);
-            GridData text1LData2 = new GridData();
-            text1LData2.heightHint = 20;
-            text1LData2.horizontalSpan = 1;
-            text1LData2.horizontalAlignment = GridData.BEGINNING;
-            buttonMoviesAddGenres.setLayoutData(text1LData2);
-            buttonMoviesAddGenres.addSelectionListener(new SelectionAdapter() {
-                public void widgetSelected(SelectionEvent evt) {
-                    //open responsible Dialog and insert objects into table
-                    DialogMovie dialog = new DialogMovie(getShell(), 0, locale,
-                            localmovie, DialogMovie.TYPE_GENRE);
-                    dialog.open();
+		{
+			labelMoviesActors = new Label(compositeMoviesEditActors, SWT.NONE);
+			labelMoviesActors.setText(l
+					.getString("movies.groupdetail.labelactors"));
+			GridData formData2 = new GridData();
+			formData2.horizontalSpan = 2;
+			formData2.verticalSpan = 1;
+			labelMoviesActors.setLayoutData(formData2);
+		}
+		{
+			buttonMoviesAddActors = new Button(compositeMoviesEditActors,
+					SWT.NONE);
+			buttonMoviesAddActors.setText(l.getString("movies.button.additem"));
+			buttonMoviesAddActors.setEnabled(false);
+			GridData text1LData2 = new GridData();
+			text1LData2.heightHint = 20;
+			text1LData2.horizontalSpan = 1;
+			text1LData2.horizontalAlignment = GridData.BEGINNING;
+			buttonMoviesAddActors.setLayoutData(text1LData2);
+			buttonMoviesAddActors.addSelectionListener(new SelectionAdapter() {
+				public void widgetSelected(SelectionEvent evt) {
+					//open responsible Dialog and insert objects into table
+					DialogMovie dialog = new DialogMovie(getShell(), 0, locale,
+							localmovie, DialogMovie.TYPE_ACTOR);
+					dialog.open();
 
-                    tableMoviesGenresDetail.removeAll();
-                    TableItem item;
-                    for (int i = 0; i < localmovie.getGenres().size(); i++) {
-                        item = new TableItem(tableMoviesGenresDetail, SWT.NONE);
-                        item.setText(new String[] {
-                                ((Genre) localmovie.getGenres().get(i)).getGenreId()
-                                        + "",
-                                ((Genre) localmovie.getGenres().get(i)).getName()
-                                        + "" });
-                    }
-                }
-            });
-        }
-        {
-            buttonMoviesDeleteGenres = new Button(compositeMoviesEditGenres,
-                    SWT.NONE);
-            buttonMoviesDeleteGenres.setText(l
-                    .getString("movies.button.deleteitem"));
-            buttonMoviesDeleteGenres.setEnabled(false);
-            GridData text1LData2 = new GridData();
-            text1LData2.horizontalAlignment = GridData.BEGINNING;
-            text1LData2.heightHint = 20;
-            text1LData2.horizontalSpan = 1;
-            buttonMoviesDeleteGenres.setLayoutData(text1LData2);
-            buttonMoviesDeleteGenres
-                    .addSelectionListener(new SelectionAdapter() {
-                        public void widgetSelected(SelectionEvent evt) {
-                            //get selected Item
-                            //get id from object
-                            //search for id in list and delete object
-                            //remove table entry
-                            int index = tableMoviesGenresDetail
-                                    .getSelectionIndex();
-                            if (index >= 0) {
-                                String strid = tableMoviesGenresDetail.getItem(
-                                        index).getText(0);
-                                int id = Integer.parseInt(strid);
-                                for (int i = 0; i < localmovie.getGenres().size(); i++) {
-                                    Genre o = (Genre) localmovie.getGenres().get(i);
-                                    if (o.getGenreId().intValue() == id) {
-                                        localmovie.getGenres().remove(o);
-                                        break;
-                                    }
-                                }
-                                tableMoviesGenresDetail.remove(index);
-                            }
-                        }
-                    });
-        }
-        {
-            tableMoviesGenresDetail = new Table(groupMoviesDetail, SWT.SINGLE
-                    | SWT.FULL_SELECTION | SWT.BORDER);
-            //tableMoviesGenresDetail.setHeaderVisible(true);
-            //tableMoviesGenresDetail.setLinesVisible(true);
-            GridData tableMoviesGenresDetailLData = new GridData();
-            tableMoviesGenresDetailLData.horizontalAlignment = GridData.FILL;
-            tableMoviesGenresDetailLData.horizontalSpan = 5;
-            tableMoviesGenresDetailLData.grabExcessVerticalSpace = true;
-            tableMoviesGenresDetailLData.verticalAlignment = GridData.FILL;
-            tableMoviesGenresDetail.setLayoutData(tableMoviesGenresDetailLData);
+					tableMoviesActorsDetail.removeAll();
+					TableItem item;
+					for (int i = 0; i < localmovie.getActors().size(); i++) {
+						item = new TableItem(tableMoviesActorsDetail, SWT.NONE);
+						item.setText(new String[] {
+								((Actor) localmovie.getActors().get(i))
+										.getActorId()
+										+ "",
+								((Actor) localmovie.getActors().get(i))
+										.getLastName()
+										+ ", "
+										+ ((Actor) localmovie.getActors()
+												.get(i)).getFirstName() });
+					}
+				}
+			});
+		}
+		{
+			buttonMoviesDeleteActors = new Button(compositeMoviesEditActors,
+					SWT.NONE);
+			buttonMoviesDeleteActors.setText(l
+					.getString("movies.button.deleteitem"));
+			buttonMoviesDeleteActors.setEnabled(false);
+			GridData text1LData2 = new GridData();
+			text1LData2.horizontalAlignment = GridData.BEGINNING;
+			text1LData2.heightHint = 20;
+			text1LData2.horizontalSpan = 1;
+			buttonMoviesDeleteActors.setLayoutData(text1LData2);
+			buttonMoviesDeleteActors
+					.addSelectionListener(new SelectionAdapter() {
+						public void widgetSelected(SelectionEvent evt) {
+							//get selected Item
+							//get id from object
+							//search for id in list and delete object
+							//remove table entry
+							int index = tableMoviesActorsDetail
+									.getSelectionIndex();
+							if (index >= 0) {
+								String strid = tableMoviesActorsDetail.getItem(
+										index).getText(0);
+								int id = Integer.parseInt(strid);
+								for (int i = 0; i < localmovie.getActors()
+										.size(); i++) {
+									Actor o = (Actor) localmovie.getActors()
+											.get(i);
+									if (o.getActorId().intValue() == id) {
+										localmovie.getActors().remove(o);
+										break;
+									}
+								}
+								tableMoviesActorsDetail.remove(index);
+							}
+						}
+					});
+		}
+		{
+			tableMoviesActorsDetail = new Table(groupMoviesDetail, SWT.SINGLE
+					| SWT.FULL_SELECTION | SWT.V_SCROLL | SWT.BORDER);
+			//tableMoviesActorsDetail.setHeaderVisible(true);
+			//tableMoviesActorsDetail.setLinesVisible(true);
+			GridData tableMoviesActorsDetailLData = new GridData();
+			tableMoviesActorsDetailLData.horizontalAlignment = GridData.FILL;
+			tableMoviesActorsDetailLData.horizontalSpan = 5;
+			tableMoviesActorsDetailLData.grabExcessVerticalSpace = true;
+			tableMoviesActorsDetailLData.verticalAlignment = GridData.FILL;
+			tableMoviesActorsDetail.setLayoutData(tableMoviesActorsDetailLData);
 
-            {
-                tableMoviesDetail_ColumnID = new TableColumn(
-                        tableMoviesGenresDetail, SWT.CENTER);
-                tableMoviesDetail_ColumnID.setWidth(0);
-                tableMoviesDetail_ColumnID.setResizable(false);
-            }
-            {
-                tableMoviesDetail_ColumnName = new TableColumn(
-                        tableMoviesGenresDetail, SWT.LEFT);
-                tableMoviesDetail_ColumnName.setText(l
-                        .getString("movies.groupoverviewdetail.columngenres"));
-                tableMoviesDetail_ColumnName.setWidth(200);
-            }
-        }// Edit Genre
-        // Edit Images
-        {
-            compositeMoviesEditImages = new Composite(groupMoviesDetail,
-                    SWT.NONE);
-            GridLayout composite1Layout = new GridLayout();
-            GridData composite1LData = new GridData();
-            composite1LData.horizontalAlignment = GridData.FILL;
-            composite1LData.verticalAlignment = GridData.BEGINNING;
-            compositeMoviesEditImages.setLayoutData(composite1LData);
-            composite1Layout.numColumns = 2;
-            compositeMoviesEditImages.setLayout(composite1Layout);
-        }
+			{
+				tableMoviesDetail_ColumnID = new TableColumn(
+						tableMoviesActorsDetail, SWT.CENTER);
+				tableMoviesDetail_ColumnID.setWidth(0);
+				tableMoviesDetail_ColumnID.setResizable(false);
+			}
+			{
+				tableMoviesDetail_ColumnName = new TableColumn(
+						tableMoviesActorsDetail, SWT.LEFT);
+				tableMoviesDetail_ColumnName.setText(l
+						.getString("movies.groupoverviewdetail.columnactors"));
+				tableMoviesDetail_ColumnName.setWidth(200);
+			}
+		}//Edit Actors
+		//Edit Genres
+		{
+			compositeMoviesEditGenres = new Composite(groupMoviesDetail,
+					SWT.NONE);
+			GridLayout composite1Layout = new GridLayout();
+			GridData composite1LData = new GridData();
+			composite1LData.horizontalAlignment = GridData.FILL;
+			composite1LData.verticalAlignment = GridData.BEGINNING;
+			compositeMoviesEditGenres.setLayoutData(composite1LData);
+			composite1Layout.numColumns = 2;
+			compositeMoviesEditGenres.setLayout(composite1Layout);
+		}
 
-        {
-            labelMoviesImages = new Label(compositeMoviesEditImages, SWT.NONE);
-            labelMoviesImages.setText(l
-                    .getString("movies.groupdetail.labelimages"));
-            GridData formData2 = new GridData();
-            formData2.horizontalSpan = 2;
-            formData2.verticalSpan = 1;
-            labelMoviesImages.setLayoutData(formData2);
-        }
-        {
-            buttonMoviesAddImages = new Button(compositeMoviesEditImages,
-                    SWT.NONE);
-            buttonMoviesAddImages.setText(l.getString("movies.button.additem"));
-            buttonMoviesAddImages.setEnabled(false);
-            GridData text1LData2 = new GridData();
-            text1LData2.heightHint = 20;
-            text1LData2.horizontalSpan = 1;
-            text1LData2.horizontalAlignment = GridData.BEGINNING;
-            buttonMoviesAddImages.setLayoutData(text1LData2);
-            buttonMoviesAddImages.addSelectionListener(new SelectionAdapter() {
-                public void widgetSelected(SelectionEvent evt) {
-                    //open responsible Dialog and insert objects into table
-                    DialogMovie dialog = new DialogMovie(getShell(), 0, locale,
-                            localmovie, DialogMovie.TYPE_IMAGE);
-                    dialog.open();
+		{
+			labelMoviesGenres = new Label(compositeMoviesEditGenres, SWT.NONE);
+			labelMoviesGenres.setText(l
+					.getString("movies.groupdetail.labelgenres"));
+			GridData formData2 = new GridData();
+			formData2.horizontalSpan = 2;
+			formData2.verticalSpan = 1;
+			labelMoviesGenres.setLayoutData(formData2);
+		}
+		{
+			buttonMoviesAddGenres = new Button(compositeMoviesEditGenres,
+					SWT.NONE);
+			buttonMoviesAddGenres.setText(l.getString("movies.button.additem"));
+			buttonMoviesAddGenres.setEnabled(false);
+			GridData text1LData2 = new GridData();
+			text1LData2.heightHint = 20;
+			text1LData2.horizontalSpan = 1;
+			text1LData2.horizontalAlignment = GridData.BEGINNING;
+			buttonMoviesAddGenres.setLayoutData(text1LData2);
+			buttonMoviesAddGenres.addSelectionListener(new SelectionAdapter() {
+				public void widgetSelected(SelectionEvent evt) {
+					//open responsible Dialog and insert objects into table
+					DialogMovie dialog = new DialogMovie(getShell(), 0, locale,
+							localmovie, DialogMovie.TYPE_GENRE);
+					dialog.open();
 
-                    tableMoviesImagesDetail.removeAll();
-                    TableItem item;
-                    for (int i = 0; i < localmovie.getImages().size(); i++) {
-                        item = new TableItem(tableMoviesImagesDetail, SWT.NONE);
-                        item.setText(new String[] {
-                                ((Image) localmovie.getImages().get(i)).getImageId()
-                                        + "",
-                                ((Image) localmovie.getImages().get(i))
-                                        .getImageFileName()
-                                        + "" });
-                    }
-                }
-            });
-        }
-        {
-            buttonMoviesDeleteImages = new Button(compositeMoviesEditImages,
-                    SWT.NONE);
-            buttonMoviesDeleteImages.setText(l
-                    .getString("movies.button.deleteitem"));
-            buttonMoviesDeleteImages.setEnabled(false);
-            GridData text1LData2 = new GridData();
-            text1LData2.horizontalAlignment = GridData.BEGINNING;
-            text1LData2.heightHint = 20;
-            text1LData2.horizontalSpan = 1;
-            buttonMoviesDeleteImages.setLayoutData(text1LData2);
-            buttonMoviesDeleteImages
-                    .addSelectionListener(new SelectionAdapter() {
-                        public void widgetSelected(SelectionEvent evt) {
-                            //get selected Item
-                            //get id from object
-                            //search for id in list and delete object
-                            //remove table entry
-                            int index = tableMoviesImagesDetail
-                                    .getSelectionIndex();
-                            if (index >= 0) {
-                                String strid = tableMoviesImagesDetail.getItem(
-                                        index).getText(0);
-                                int id = Integer.parseInt(strid);
-                                for (int i = 0; i < localmovie.getImages().size(); i++) {
-                                    Image o = (Image) localmovie.getImages().get(i);
-                                    if (o.getImageId().intValue() == id) {
-                                        localmovie.getImages().remove(o);
-                                        break;
-                                    }
-                                }
-                                tableMoviesImagesDetail.remove(index);
-                            }
+					tableMoviesGenresDetail.removeAll();
+					TableItem item;
+					for (int i = 0; i < localmovie.getGenres().size(); i++) {
+						item = new TableItem(tableMoviesGenresDetail, SWT.NONE);
+						item.setText(new String[] {
+								((Genre) localmovie.getGenres().get(i))
+										.getGenreId()
+										+ "",
+								((Genre) localmovie.getGenres().get(i))
+										.getName()
+										+ "" });
+					}
+				}
+			});
+		}
+		{
+			buttonMoviesDeleteGenres = new Button(compositeMoviesEditGenres,
+					SWT.NONE);
+			buttonMoviesDeleteGenres.setText(l
+					.getString("movies.button.deleteitem"));
+			buttonMoviesDeleteGenres.setEnabled(false);
+			GridData text1LData2 = new GridData();
+			text1LData2.horizontalAlignment = GridData.BEGINNING;
+			text1LData2.heightHint = 20;
+			text1LData2.horizontalSpan = 1;
+			buttonMoviesDeleteGenres.setLayoutData(text1LData2);
+			buttonMoviesDeleteGenres
+					.addSelectionListener(new SelectionAdapter() {
+						public void widgetSelected(SelectionEvent evt) {
+							//get selected Item
+							//get id from object
+							//search for id in list and delete object
+							//remove table entry
+							int index = tableMoviesGenresDetail
+									.getSelectionIndex();
+							if (index >= 0) {
+								String strid = tableMoviesGenresDetail.getItem(
+										index).getText(0);
+								int id = Integer.parseInt(strid);
+								for (int i = 0; i < localmovie.getGenres()
+										.size(); i++) {
+									Genre o = (Genre) localmovie.getGenres()
+											.get(i);
+									if (o.getGenreId().intValue() == id) {
+										localmovie.getGenres().remove(o);
+										break;
+									}
+								}
+								tableMoviesGenresDetail.remove(index);
+							}
+						}
+					});
+		}
+		{
+			tableMoviesGenresDetail = new Table(groupMoviesDetail, SWT.SINGLE
+					| SWT.FULL_SELECTION | SWT.BORDER);
+			//tableMoviesGenresDetail.setHeaderVisible(true);
+			//tableMoviesGenresDetail.setLinesVisible(true);
+			GridData tableMoviesGenresDetailLData = new GridData();
+			tableMoviesGenresDetailLData.horizontalAlignment = GridData.FILL;
+			tableMoviesGenresDetailLData.horizontalSpan = 5;
+			tableMoviesGenresDetailLData.grabExcessVerticalSpace = true;
+			tableMoviesGenresDetailLData.verticalAlignment = GridData.FILL;
+			tableMoviesGenresDetail.setLayoutData(tableMoviesGenresDetailLData);
 
-                        }
-                    });
-        }
-        {
-            tableMoviesImagesDetail = new Table(groupMoviesDetail, SWT.SINGLE
-                    | SWT.FULL_SELECTION | SWT.V_SCROLL | SWT.BORDER);
-            //tableMoviesImagesDetail.setHeaderVisible(true);
-            //tableMoviesImagesDetail.setLinesVisible(true);
-            GridData tableMoviesImagesDetailLData = new GridData();
-            tableMoviesImagesDetailLData.horizontalAlignment = GridData.FILL;
-            tableMoviesImagesDetailLData.horizontalSpan = 5;
-            tableMoviesImagesDetailLData.grabExcessVerticalSpace = true;
-            tableMoviesImagesDetailLData.verticalAlignment = GridData.FILL;
-            tableMoviesImagesDetail.setLayoutData(tableMoviesImagesDetailLData);
-            {
-                tableMoviesDetail_ColumnID = new TableColumn(
-                        tableMoviesImagesDetail, SWT.CENTER);
-                tableMoviesDetail_ColumnID.setWidth(0);
-                tableMoviesDetail_ColumnID.setResizable(false);
-            }
-            {
-                tableMoviesDetail_ColumnName = new TableColumn(
-                        tableMoviesImagesDetail, SWT.LEFT);
-                tableMoviesDetail_ColumnName.setText(l
-                        .getString("movies.groupoverviewdetail.columnimages"));
-                tableMoviesDetail_ColumnName.setWidth(200);
-            }
-        }// Edit Images
-        {
-            labelMoviesmainImage = new Label(groupMoviesDetail, SWT.NONE);
-            labelMoviesmainImage.setText(l.getString("movies.groupdetail.labelmainimage")
-                    + ":");
-            labelMoviesmainImage.setSize(125, 15);
-            GridData labelMoviesImageLData = new GridData();
-            labelMoviesImageLData.heightHint = 15;
-            labelMoviesImageLData.horizontalAlignment = GridData.FILL;
-            labelMoviesImageLData.verticalAlignment = GridData.BEGINNING;
-            labelMoviesmainImage.setLayoutData(labelMoviesImageLData);
-        }
-        {
-            textMoviesmainImage = new Text(groupMoviesDetail, SWT.READ_ONLY
-                    | SWT.BORDER);
-            GridData text1LData2 = new GridData();
-            text1LData2.horizontalAlignment = GridData.FILL;
-            text1LData2.heightHint = 13;
-            text1LData2.horizontalSpan = 4;
-            text1LData2.grabExcessHorizontalSpace = true;
-            textMoviesmainImage.setLayoutData(text1LData2);
-            textMoviesmainImage.setText("");
-        }
-        {
-            buttonMoviesChangemainImage = new Button(groupMoviesDetail, SWT.NONE);
-            buttonMoviesChangemainImage.setText(l
-                    .getString("movies.button.changedate"));
-            buttonMoviesChangemainImage.setEnabled(false);
-            GridData text1LData2 = new GridData();
-            text1LData2.horizontalAlignment = GridData.FILL;
-            text1LData2.heightHint = 20;
-            text1LData2.horizontalSpan = 1;
-            buttonMoviesChangemainImage.setLayoutData(text1LData2);
-            buttonMoviesChangemainImage.addSelectionListener(new SelectionAdapter() {
-                public void widgetSelected(SelectionEvent evt) {
-                    //open responsible Dialog and insert text
-                    DialogMovie dialog = new DialogMovie(getShell(), 0, locale,
-                            localmovie, DialogMovie.TYPE_MAINIMAGE);
-                    dialog.open();
-                    if (localmovie.getMainImage() != null)
-                    textMoviesmainImage.setText(localmovie.getMainImage().getImageFileName());                  
-                }
-            });
-        }
-        
-            
-        {
-            compositeButtons = new Composite(groupMoviesDetail, SWT.EMBEDDED);
-            GridLayout composite2Layout = new GridLayout();
-            composite2Layout.numColumns = 6;
-            GridData composite2LData = new GridData();
-            compositeButtons.setLayout(composite2Layout);
-            composite2LData.verticalAlignment = GridData.END;
-            composite2LData.horizontalAlignment = GridData.CENTER;
-            composite2LData.widthHint = 391;
-            composite2LData.horizontalSpan = 6;
-            composite2LData.grabExcessHorizontalSpace = true;
-            composite2LData.grabExcessVerticalSpace = true;
-            composite2LData.heightHint = 35;
-            compositeButtons.setLayoutData(composite2LData);
-        }
-        {
-            buttonMoviesNew = new Button(compositeButtons, SWT.PUSH
-                    | SWT.CENTER);
-            buttonMoviesNew.setText(l.getString("button.new"));
-            buttonMoviesNew.addSelectionListener(new SelectionAdapter() {
-                public void widgetSelected(SelectionEvent evt) {
+			{
+				tableMoviesDetail_ColumnID = new TableColumn(
+						tableMoviesGenresDetail, SWT.CENTER);
+				tableMoviesDetail_ColumnID.setWidth(0);
+				tableMoviesDetail_ColumnID.setResizable(false);
+			}
+			{
+				tableMoviesDetail_ColumnName = new TableColumn(
+						tableMoviesGenresDetail, SWT.LEFT);
+				tableMoviesDetail_ColumnName.setText(l
+						.getString("movies.groupoverviewdetail.columngenres"));
+				tableMoviesDetail_ColumnName.setWidth(200);
+			}
+		}// Edit Genre
+		// Edit Images
+		{
+			compositeMoviesEditImages = new Composite(groupMoviesDetail,
+					SWT.NONE);
+			GridLayout composite1Layout = new GridLayout();
+			GridData composite1LData = new GridData();
+			composite1LData.horizontalAlignment = GridData.FILL;
+			composite1LData.verticalAlignment = GridData.BEGINNING;
+			compositeMoviesEditImages.setLayoutData(composite1LData);
+			composite1Layout.numColumns = 2;
+			compositeMoviesEditImages.setLayout(composite1Layout);
+		}
 
-                    mode_movie = ManagementGui.MODE_ADD;
+		{
+			labelMoviesImages = new Label(compositeMoviesEditImages, SWT.NONE);
+			labelMoviesImages.setText(l
+					.getString("movies.groupdetail.labelimages"));
+			GridData formData2 = new GridData();
+			formData2.horizontalSpan = 2;
+			formData2.verticalSpan = 1;
+			labelMoviesImages.setLayoutData(formData2);
+		}
+		{
+			buttonMoviesAddImages = new Button(compositeMoviesEditImages,
+					SWT.NONE);
+			buttonMoviesAddImages.setText(l.getString("movies.button.additem"));
+			buttonMoviesAddImages.setEnabled(false);
+			GridData text1LData2 = new GridData();
+			text1LData2.heightHint = 20;
+			text1LData2.horizontalSpan = 1;
+			text1LData2.horizontalAlignment = GridData.BEGINNING;
+			buttonMoviesAddImages.setLayoutData(text1LData2);
+			buttonMoviesAddImages.addSelectionListener(new SelectionAdapter() {
+				public void widgetSelected(SelectionEvent evt) {
+					//open responsible Dialog and insert objects into table
+					DialogMovie dialog = new DialogMovie(getShell(), 0, locale,
+							localmovie, DialogMovie.TYPE_IMAGE);
+					dialog.open();
 
-                    textMoviesID.setText("");
-                    textMoviesTitle.setText("");
-                    textMoviesRuntime.setText("");
-                    textMoviesDate.setText("");
-                    textMoviesDescription.setText("");
-                    textMoviesTitle.setEditable(true);
-                    textMoviesRuntime.setEditable(true);
-                    textMoviesDescription.setEditable(true);
-                    textMoviesSearch.setEditable(false);
+					tableMoviesImagesDetail.removeAll();
+					TableItem item;
+					for (int i = 0; i < localmovie.getImages().size(); i++) {
+						item = new TableItem(tableMoviesImagesDetail, SWT.NONE);
+						item.setText(new String[] {
+								((Image) localmovie.getImages().get(i))
+										.getImageId()
+										+ "",
+								((Image) localmovie.getImages().get(i))
+										.getImageFileName()
+										+ "" });
+					}
+				}
+			});
+		}
+		{
+			buttonMoviesDeleteImages = new Button(compositeMoviesEditImages,
+					SWT.NONE);
+			buttonMoviesDeleteImages.setText(l
+					.getString("movies.button.deleteitem"));
+			buttonMoviesDeleteImages.setEnabled(false);
+			GridData text1LData2 = new GridData();
+			text1LData2.horizontalAlignment = GridData.BEGINNING;
+			text1LData2.heightHint = 20;
+			text1LData2.horizontalSpan = 1;
+			buttonMoviesDeleteImages.setLayoutData(text1LData2);
+			buttonMoviesDeleteImages
+					.addSelectionListener(new SelectionAdapter() {
+						public void widgetSelected(SelectionEvent evt) {
+							//get selected Item
+							//get id from object
+							//search for id in list and delete object
+							//remove table entry
+							int index = tableMoviesImagesDetail
+									.getSelectionIndex();
+							if (index >= 0) {
+								String strid = tableMoviesImagesDetail.getItem(
+										index).getText(0);
+								int id = Integer.parseInt(strid);
+								for (int i = 0; i < localmovie.getImages()
+										.size(); i++) {
+									Image o = (Image) localmovie.getImages()
+											.get(i);
+									if (o.getImageId().intValue() == id) {
+										localmovie.getImages().remove(o);
+										break;
+									}
+								}
+								tableMoviesImagesDetail.remove(index);
+							}
 
-                    buttonMoviesCancel.setEnabled(true);
-                    buttonMoviesSave.setEnabled(true);
-                    buttonMoviesNew.setEnabled(false);
-                    buttonMoviesEdit.setEnabled(false);
-                    buttonMoviesDelete.setEnabled(false);
-                    buttonMoviesAddDirectors.setEnabled(true);
-                    buttonMoviesDeleteDirectors.setEnabled(true);
-                    buttonMoviesAddActors.setEnabled(true);
-                    buttonMoviesDeleteActors.setEnabled(true);
-                    buttonMoviesAddGenres.setEnabled(true);
-                    buttonMoviesDeleteGenres.setEnabled(true);
-                    buttonMoviesAddImages.setEnabled(true);
-                    buttonMoviesDeleteImages.setEnabled(true);
-                    buttonMoviesChangeDate.setEnabled(true);
-                    buttonMoviesChangemainImage.setEnabled(true);
-                    
-                    tableMoviesOverview.setEnabled(false);
-                    tableMoviesDirectorsDetail.removeAll();
-                    tableMoviesActorsDetail.removeAll();
-                    tableMoviesImagesDetail.removeAll();
-                    tableMoviesGenresDetail.removeAll();
+						}
+					});
+		}
+		{
+			tableMoviesImagesDetail = new Table(groupMoviesDetail, SWT.SINGLE
+					| SWT.FULL_SELECTION | SWT.V_SCROLL | SWT.BORDER);
+			//tableMoviesImagesDetail.setHeaderVisible(true);
+			//tableMoviesImagesDetail.setLinesVisible(true);
+			GridData tableMoviesImagesDetailLData = new GridData();
+			tableMoviesImagesDetailLData.horizontalAlignment = GridData.FILL;
+			tableMoviesImagesDetailLData.horizontalSpan = 5;
+			tableMoviesImagesDetailLData.grabExcessVerticalSpace = true;
+			tableMoviesImagesDetailLData.verticalAlignment = GridData.FILL;
+			tableMoviesImagesDetail.setLayoutData(tableMoviesImagesDetailLData);
+			{
+				tableMoviesDetail_ColumnID = new TableColumn(
+						tableMoviesImagesDetail, SWT.CENTER);
+				tableMoviesDetail_ColumnID.setWidth(0);
+				tableMoviesDetail_ColumnID.setResizable(false);
+			}
+			{
+				tableMoviesDetail_ColumnName = new TableColumn(
+						tableMoviesImagesDetail, SWT.LEFT);
+				tableMoviesDetail_ColumnName.setText(l
+						.getString("movies.groupoverviewdetail.columnimages"));
+				tableMoviesDetail_ColumnName.setWidth(200);
+			}
+		}// Edit Images
+		{
+			labelMoviesmainImage = new Label(groupMoviesDetail, SWT.NONE);
+			labelMoviesmainImage.setText(l
+					.getString("movies.groupdetail.labelmainimage")
+					+ ":");
+			labelMoviesmainImage.setSize(125, 15);
+			GridData labelMoviesImageLData = new GridData();
+			labelMoviesImageLData.heightHint = 15;
+			labelMoviesImageLData.horizontalAlignment = GridData.FILL;
+			labelMoviesImageLData.verticalAlignment = GridData.BEGINNING;
+			labelMoviesmainImage.setLayoutData(labelMoviesImageLData);
+		}
+		{
+			textMoviesmainImage = new Text(groupMoviesDetail, SWT.READ_ONLY
+					| SWT.BORDER);
+			GridData text1LData2 = new GridData();
+			text1LData2.horizontalAlignment = GridData.FILL;
+			text1LData2.heightHint = 13;
+			text1LData2.horizontalSpan = 4;
+			text1LData2.grabExcessHorizontalSpace = true;
+			textMoviesmainImage.setLayoutData(text1LData2);
+			textMoviesmainImage.setText("");
+		}
+		{
+			buttonMoviesChangemainImage = new Button(groupMoviesDetail,
+					SWT.NONE);
+			buttonMoviesChangemainImage.setText(l
+					.getString("movies.button.changedate"));
+			buttonMoviesChangemainImage.setEnabled(false);
+			GridData text1LData2 = new GridData();
+			text1LData2.horizontalAlignment = GridData.FILL;
+			text1LData2.heightHint = 20;
+			text1LData2.horizontalSpan = 1;
+			buttonMoviesChangemainImage.setLayoutData(text1LData2);
+			buttonMoviesChangemainImage
+					.addSelectionListener(new SelectionAdapter() {
+						public void widgetSelected(SelectionEvent evt) {
+							//open responsible Dialog and insert text
+							DialogMovie dialog = new DialogMovie(getShell(), 0,
+									locale, localmovie,
+									DialogMovie.TYPE_MAINIMAGE);
+							dialog.open();
+							if (localmovie.getMainImage() != null)
+								textMoviesmainImage.setText(localmovie
+										.getMainImage().getImageFileName());
+						}
+					});
+		}
 
-                    localmovie = new Movie();
-                    localmovie.setActors(new ArrayList());
-                    localmovie.setDirector(new ArrayList());
-                    localmovie.setGenres(new ArrayList());
-                    localmovie.setImages(new ArrayList());
-                }
-            });
+		{
+			compositeButtons = new Composite(groupMoviesDetail, SWT.EMBEDDED);
+			GridLayout composite2Layout = new GridLayout();
+			composite2Layout.numColumns = 6;
+			GridData composite2LData = new GridData();
+			compositeButtons.setLayout(composite2Layout);
+			composite2LData.verticalAlignment = GridData.END;
+			composite2LData.horizontalAlignment = GridData.CENTER;
+			composite2LData.widthHint = 391;
+			composite2LData.horizontalSpan = 6;
+			composite2LData.grabExcessHorizontalSpace = true;
+			composite2LData.grabExcessVerticalSpace = true;
+			composite2LData.heightHint = 35;
+			compositeButtons.setLayoutData(composite2LData);
+		}
+		{
+			buttonMoviesNew = new Button(compositeButtons, SWT.PUSH
+					| SWT.CENTER);
+			buttonMoviesNew.setText(l.getString("button.new"));
+			buttonMoviesNew.addSelectionListener(new SelectionAdapter() {
+				public void widgetSelected(SelectionEvent evt) {
 
-            buttonMoviesEdit = new Button(compositeButtons, SWT.PUSH
-                    | SWT.CENTER);
-            buttonMoviesEdit.setText(l.getString("button.edit"));
-            buttonMoviesEdit.setEnabled(false);
-            buttonMoviesEdit.addSelectionListener(new SelectionAdapter() {
-                public void widgetSelected(SelectionEvent evt) {
+					mode_movie = ManagementGui.MODE_ADD;
 
-                    mode_movie = ManagementGui.MODE_EDIT;
+					textMoviesID.setText("");
+					textMoviesTitle.setText("");
+					textMoviesRuntime.setText("");
+					textMoviesDate.setText("");
+					textMoviesDescription.setText("");
+					textMoviesTitle.setEditable(true);
+					textMoviesRuntime.setEditable(true);
+					textMoviesDescription.setEditable(true);
+					textMoviesSearch.setEditable(false);
 
-                    textMoviesID.setEditable(false);
-                    textMoviesTitle.setEditable(true);
-                    textMoviesRuntime.setEditable(true);
-                    textMoviesTitle.setFocus();
-                    textMoviesDescription.setEditable(true);
-                    textMoviesSearch.setEditable(false);
-                    
-                    buttonMoviesCancel.setEnabled(true);
-                    buttonMoviesSave.setEnabled(true);
-                    buttonMoviesNew.setEnabled(false);
-                    buttonMoviesEdit.setEnabled(false);
-                    buttonMoviesDelete.setEnabled(false);
-                    buttonMoviesAddDirectors.setEnabled(true);
-                    buttonMoviesDeleteDirectors.setEnabled(true);
-                    buttonMoviesAddActors.setEnabled(true);
-                    buttonMoviesDeleteActors.setEnabled(true);
-                    buttonMoviesAddGenres.setEnabled(true);
-                    buttonMoviesDeleteGenres.setEnabled(true);
-                    buttonMoviesAddImages.setEnabled(true);
-                    buttonMoviesDeleteImages.setEnabled(true);
-                    buttonMoviesChangeDate.setEnabled(true);
-                    buttonMoviesChangemainImage.setEnabled(true);
-                    
-                    tableMoviesOverview.setEnabled(false);
-                    
-                }
-            });
+					buttonMoviesCancel.setEnabled(true);
+					buttonMoviesSave.setEnabled(true);
+					buttonMoviesNew.setEnabled(false);
+					buttonMoviesEdit.setEnabled(false);
+					buttonMoviesDelete.setEnabled(false);
+					buttonMoviesAddDirectors.setEnabled(true);
+					buttonMoviesDeleteDirectors.setEnabled(true);
+					buttonMoviesAddActors.setEnabled(true);
+					buttonMoviesDeleteActors.setEnabled(true);
+					buttonMoviesAddGenres.setEnabled(true);
+					buttonMoviesDeleteGenres.setEnabled(true);
+					buttonMoviesAddImages.setEnabled(true);
+					buttonMoviesDeleteImages.setEnabled(true);
+					buttonMoviesChangeDate.setEnabled(true);
+					buttonMoviesChangemainImage.setEnabled(true);
 
-            buttonMoviesDelete = new Button(compositeButtons, SWT.PUSH
-                    | SWT.CENTER);
-            buttonMoviesDelete.setText(l.getString("button.delete"));
-            buttonMoviesDelete.setEnabled(false);
-            buttonMoviesDelete.addSelectionListener(new SelectionAdapter() {
-                public void widgetSelected(SelectionEvent evt) {
-                    if (logger.isDebugEnabled()) {
-                        logger
-                                .debug("widgetSelected(SelectionEvent) - buttonMoviesDelete.widgetSelected, event="
-                                        + evt);
-                    }
+					tableMoviesOverview.setEnabled(false);
+					tableMoviesDirectorsDetail.removeAll();
+					tableMoviesActorsDetail.removeAll();
+					tableMoviesImagesDetail.removeAll();
+					tableMoviesGenresDetail.removeAll();
 
-                    String msg = MessageFormat
-                            .format(
-                                    l
-                                            .getString("movies.groupdetail.deletebutton.question.text"),
-                                    new Object[] { textMoviesTitle.getText()
-                                            + " "
-                                            + l
-                                                    .getString("movies.groupdetail.deletebutton.question.gap")
-                                            + " " + textMoviesDate.getText() });
+					localmovie = new Movie();
+					localmovie.setActors(new ArrayList());
+					localmovie.setDirector(new ArrayList());
+					localmovie.setGenres(new ArrayList());
+					localmovie.setImages(new ArrayList());
+				}
+			});
 
-                    int question = showMsg(
-                            msg,
-                            l
-                                    .getString("movies.groupdetail.deletebutton.question.header"),
-                            SWT.ICON_QUESTION | SWT.YES | SWT.NO);
+			buttonMoviesEdit = new Button(compositeButtons, SWT.PUSH
+					| SWT.CENTER);
+			buttonMoviesEdit.setText(l.getString("button.edit"));
+			buttonMoviesEdit.setEnabled(false);
+			buttonMoviesEdit.addSelectionListener(new SelectionAdapter() {
+				public void widgetSelected(SelectionEvent evt) {
 
-                    if (question != SWT.YES) {
-                        return;
-                    }
+					mode_movie = ManagementGui.MODE_EDIT;
 
-                    try {
-                        //object speichern
-                        // Fehlerbehandlung
-                        Database.deleteObject(localmovie);
+					textMoviesID.setEditable(false);
+					textMoviesTitle.setEditable(true);
+					textMoviesRuntime.setEditable(true);
+					textMoviesTitle.setFocus();
+					textMoviesDescription.setEditable(true);
+					textMoviesSearch.setEditable(false);
 
-                        //?bersichtsTabelle aktualisieren
-                        refreshMoviesOverviewTable(textMoviesSearch.getText());
+					buttonMoviesCancel.setEnabled(true);
+					buttonMoviesSave.setEnabled(true);
+					buttonMoviesNew.setEnabled(false);
+					buttonMoviesEdit.setEnabled(false);
+					buttonMoviesDelete.setEnabled(false);
+					buttonMoviesAddDirectors.setEnabled(true);
+					buttonMoviesDeleteDirectors.setEnabled(true);
+					buttonMoviesAddActors.setEnabled(true);
+					buttonMoviesDeleteActors.setEnabled(true);
+					buttonMoviesAddGenres.setEnabled(true);
+					buttonMoviesDeleteGenres.setEnabled(true);
+					buttonMoviesAddImages.setEnabled(true);
+					buttonMoviesDeleteImages.setEnabled(true);
+					buttonMoviesChangeDate.setEnabled(true);
+					buttonMoviesChangemainImage.setEnabled(true);
 
-                        //Detailansicht leeren
-                        textMoviesID.setText("");
-                        textMoviesTitle.setText("");
-                        textMoviesRuntime.setText("");
-                        textMoviesDate.setText("");
-                        textMoviesDescription.setText("");
-                        tableMoviesDirectorsDetail.removeAll();
-                        tableMoviesActorsDetail.removeAll();
-                        tableMoviesGenresDetail.removeAll();
-                        tableMoviesImagesDetail.removeAll();
-                        //in Tabelle n?chsten ausw?hlen
-                        try {
-                            tableMoviesOverview.select(0);
-                        } catch (Exception ex) {
-                        }
+					tableMoviesOverview.setEnabled(false);
 
-                        //Statusline Nachricht sezten
-                        statusLine
-                                .setStatus(
-                                        1,
-                                        l
-                                                .getString("movies.groupdetail.deletebutton.newok"));
+				}
+			});
 
-                    } catch (DataBaseException e) {
-                        if (e.getMessage().equalsIgnoreCase("1")) {
-                            //Fehler beim Speichern des Objectes
+			buttonMoviesDelete = new Button(compositeButtons, SWT.PUSH
+					| SWT.CENTER);
+			buttonMoviesDelete.setText(l.getString("button.delete"));
+			buttonMoviesDelete.setEnabled(false);
+			buttonMoviesDelete.addSelectionListener(new SelectionAdapter() {
+				public void widgetSelected(SelectionEvent evt) {
+					if (logger.isDebugEnabled()) {
+						logger
+								.debug("widgetSelected(SelectionEvent) - buttonMoviesDelete.widgetSelected, event="
+										+ evt);
+					}
 
-                            statusLine
-                                    .setStatus(
-                                            3,
-                                            l
-                                                    .getString("movies.groupdetail.deletebutton.errorsave"));
-                            showMsg(
-                                    l
-                                            .getString("movies.groupdetail.deletebutton.errorsave"),
-                                    l.getString("error"), SWT.ICON_ERROR
-                                            | SWT.OK);
+					String msg = MessageFormat
+							.format(
+									l
+											.getString("movies.groupdetail.deletebutton.question.text"),
+									new Object[] { textMoviesTitle.getText()
+											+ " "
+											+ l
+													.getString("movies.groupdetail.deletebutton.question.gap")
+											+ " " + textMoviesDate.getText() });
 
-                        } else if (e.getMessage().equalsIgnoreCase("2")) {
-                            //fehler beim db aufbau
-                            statusLine
-                                    .setStatus(
-                                            3,
-                                            l
-                                                    .getString("movies.groupdetail.deletebutton.errordb"));
-                            showMsg(
-                                    l
-                                            .getString("movies.groupdetail.deletebutton.errordb"),
-                                    l.getString("error"), SWT.ICON_ERROR
-                                            | SWT.OK);
+					int question = showMsg(
+							msg,
+							l
+									.getString("movies.groupdetail.deletebutton.question.header"),
+							SWT.ICON_QUESTION | SWT.YES | SWT.NO);
 
-                        } else {
-                            //@todo
-                            logger.error("widgetSelected(SelectionEvent)", e);
-                        }
+					if (question != SWT.YES) {
+						return;
+					}
 
-                    }
+					try {
+						//object speichern
+						// Fehlerbehandlung
+						Database.deleteObject(localmovie);
 
-                }
+						//?bersichtsTabelle aktualisieren
+						refreshMoviesOverviewTable(textMoviesSearch.getText());
 
-            });
+						//Detailansicht leeren
+						textMoviesID.setText("");
+						textMoviesTitle.setText("");
+						textMoviesRuntime.setText("");
+						textMoviesDate.setText("");
+						textMoviesDescription.setText("");
+						tableMoviesDirectorsDetail.removeAll();
+						tableMoviesActorsDetail.removeAll();
+						tableMoviesGenresDetail.removeAll();
+						tableMoviesImagesDetail.removeAll();
+						//in Tabelle n?chsten ausw?hlen
+						try {
+							tableMoviesOverview.select(0);
+						} catch (Exception ex) {
+						}
 
-            //leerer nicht sichtbarer Button
-            buttonMoviesFill = new Button(compositeButtons, SWT.PUSH
-                    | SWT.CENTER);
-            GridData buttonActorFillLData = new GridData();
-            buttonMoviesFill.setVisible(false);
-            buttonMoviesFill.setEnabled(false);
-            buttonActorFillLData.widthHint = 30;
-            buttonActorFillLData.heightHint = 23;
-            buttonMoviesFill.setLayoutData(buttonActorFillLData);
+						//Statusline Nachricht sezten
+						statusLine
+								.setStatus(
+										1,
+										l
+												.getString("movies.groupdetail.deletebutton.newok"));
 
-            buttonMoviesSave = new Button(compositeButtons, SWT.PUSH
-                    | SWT.CENTER);
-            buttonMoviesSave.setText(l.getString("button.save"));
-            buttonMoviesSave.setEnabled(false);
-            buttonMoviesSave.addSelectionListener(new SelectionAdapter() {
-                public void widgetSelected(SelectionEvent evt) {
-                    if (logger.isDebugEnabled()) {
-                        logger
-                                .debug("widgetSelected(SelectionEvent) - buttonMoviesSave.widgetSelected, event="
-                                        + evt);
-                    }
+					} catch (DataBaseException e) {
+						if (e.getMessage().equalsIgnoreCase("1")) {
+							//Fehler beim Speichern des Objectes
 
-                    
-                    
-                    List errors = validateInput();
+							statusLine
+									.setStatus(
+											3,
+											l
+													.getString("movies.groupdetail.deletebutton.errorsave"));
+							showMsg(
+									l
+											.getString("movies.groupdetail.deletebutton.errorsave"),
+									l.getString("error"), SWT.ICON_ERROR
+											| SWT.OK);
 
-                    if (errors.size() > 0) {
-                        StringBuffer buf = new StringBuffer();
+						} else if (e.getMessage().equalsIgnoreCase("2")) {
+							//fehler beim db aufbau
+							statusLine
+									.setStatus(
+											3,
+											l
+													.getString("movies.groupdetail.deletebutton.errordb"));
+							showMsg(
+									l
+											.getString("movies.groupdetail.deletebutton.errordb"),
+									l.getString("error"), SWT.ICON_ERROR
+											| SWT.OK);
 
-                        for (int i = 0; i < errors.size(); i++) {
-                            buf.append("- ").append(errors.get(i)).append("\n");
-                        }
+						} else {
+							//@todo
+							logger.error("widgetSelected(SelectionEvent)", e);
+						}
 
-                        showMsg(
-                                l
-                                        .getString("movies.groupdetail.savebutton.warn.noitems.msg")
-                                        + new String(buf),
-                                l
-                                        .getString("movies.groupdetail.savebutton.warn.noitems.title"),
-                                SWT.ICON_WARNING | SWT.YES);
-                        return;
+					}
 
-                    }                    
-                    
-                    
+				}
 
+			});
 
-                    //testen welcher mode
-                    localmovie.setTitle(textMoviesTitle.getText());
-                    localmovie.setDescription(textMoviesDescription.getText());
-                    try {
-                        localmovie.setReleaseDate(Calendar.getInstance());
-                        localmovie.getReleaseDate().setTime(
-                                DateFormat.getDateInstance(DateFormat.LONG)
-                                        .parse(textMoviesDate.getText()));
-                        logger.debug("Datum: " + localmovie.getReleaseDate());
-                    } catch (ParseException e1) {
-                        //Hier muss noch was gemacht werden, das Datum konnte
-                        // nicht geparst werden
-                        logger.error("widgetSelected(SelectionEvent)", e1);
-                        return;
-                    }
+			//leerer nicht sichtbarer Button
+			buttonMoviesFill = new Button(compositeButtons, SWT.PUSH
+					| SWT.CENTER);
+			GridData buttonActorFillLData = new GridData();
+			buttonMoviesFill.setVisible(false);
+			buttonMoviesFill.setEnabled(false);
+			buttonActorFillLData.widthHint = 30;
+			buttonActorFillLData.heightHint = 23;
+			buttonMoviesFill.setLayoutData(buttonActorFillLData);
 
-                    try {
-                        localmovie.setRuntime(Integer.parseInt(textMoviesRuntime
-                                .getText()));
-                    } catch (Exception ex) {
-                        logger.error("widgetSelected(SelectionEvent)", ex);
-                        showMsg(
-                                l
-                                        .getString("movies.groupdetail.savebutton.warn.noname.msg"),
-                                l
-                                        .getString("movies.groupdetail.savebutton.warn.noname.title"),
-                                SWT.ICON_WARNING | SWT.YES);
-                        return;
-                    }
-                    /**
-                     * @todo eine Exception bekommen wieder leider NOCH nicht
-                     *       mit d.h. es muss noch ein r?ckgabewert kommen oder
-                     *       eine Exception ?bermitteln werden (aus der DB
-                     *       Klasse)
-                     */
-                    //neues Objekt erzeugen
-                    try {
-                        //object speichern
-                        // Fehlerbehandlung
-
-                        if (mode_movie == ManagementGui.MODE_ADD)  {
+			buttonMoviesSave = new Button(compositeButtons, SWT.PUSH
+					| SWT.CENTER);
+			buttonMoviesSave.setText(l.getString("button.save"));
+			buttonMoviesSave.setEnabled(false);
+			buttonMoviesSave.addSelectionListener(new SelectionAdapter() {
+				public void widgetSelected(SelectionEvent evt) {
+					if (logger.isDebugEnabled()) {
+						logger
+								.debug("widgetSelected(SelectionEvent) - buttonMoviesSave.widgetSelected, event="
+										+ evt);
+					}
 
-
-                        logger.debug("Objektid: "+localmovie.getMovieId()+" vor speichern");
-                        Database.saveObject(localmovie);
-                        logger.debug("Objektid: "+localmovie.getMovieId()+" nach speichern");
-
-                        
-                        // in ?bersichtstabelle einf?gen
-                        insertIntoMoviesOverviewTable(localmovie);
-                        textMoviesID.setText(localmovie.getMovieId() + "");
-                        }
-                        else if (mode_movie == ManagementGui.MODE_EDIT)  {
-                            Database.updateObject(localmovie);
-                        } 
-                        //Statusline Nachricht sezten
-                        statusLine
-                                .setStatus(
-                                        1,
-                                        l
-                                                .getString("movies.groupdetail.savebutton.newok"));
-                    } catch (DataBaseException e) {
-                        logger.debug("DataBaseException: "+e);
-                        if (e.getMessage().equalsIgnoreCase("1")) {
-                            //Fehler beim Speichern des Objectes
+					List errors = validateInput();
 
-                            statusLine
-                                    .setStatus(
-                                            3,
-                                            l
-                                                    .getString("movies.groupdetail.savebutton.errorsave"));
-                            showMsg(
-                                    l
-                                            .getString("movies.groupdetail.savebutton.errorsave"),
-                                    "Fehler", SWT.ICON_ERROR | SWT.OK);
+					if (errors.size() > 0) {
+						StringBuffer buf = new StringBuffer();
 
-                        } else if (e.getMessage().equalsIgnoreCase("2")) {
-                            //fehler beim db aufbau
-                            statusLine
-                                    .setStatus(
-                                            3,
-                                            l
-                                                    .getString("movies.groupdetail.savebutton.errordb"));
-                            showMsg(
-                                    l
-                                            .getString("movies.groupdetail.savebutton.errordb"),
-                                    "Fehler", SWT.ICON_ERROR | SWT.OK);
+						for (int i = 0; i < errors.size(); i++) {
+							buf.append("- ").append(errors.get(i)).append("\n");
+						}
 
-                        } else {
-                            //@todo
-                            logger.error("widgetSelected(SelectionEvent)", e);
-                        }
+						showMsg(
+								l
+										.getString("movies.groupdetail.savebutton.warn.noitems.msg")
+										+ new String(buf),
+								l
+										.getString("movies.groupdetail.savebutton.warn.noitems.title"),
+								SWT.ICON_WARNING | SWT.YES);
+						return;
 
-                    } catch (Exception ex) {
-                        logger.debug("Unbekannte Exception: ",ex);
-                    }
+					}
 
-                    //activate buttons
-                    setMoviesGroupButtonSaveCancel();
+					//testen welcher mode
+					localmovie.setTitle(textMoviesTitle.getText());
+					localmovie.setDescription(textMoviesDescription.getText());
+					try {
+						localmovie.setReleaseDate(Calendar.getInstance());
+						localmovie.getReleaseDate().setTime(
+								DateFormat.getDateInstance(DateFormat.LONG)
+										.parse(textMoviesDate.getText()));
+						logger.debug("Datum: " + localmovie.getReleaseDate());
+					} catch (ParseException e1) {
+						//Hier muss noch was gemacht werden, das Datum konnte
+						// nicht geparst werden
+						logger.error("widgetSelected(SelectionEvent)", e1);
+						return;
+					}
 
-                    
+					try {
+						localmovie.setRuntime(Integer
+								.parseInt(textMoviesRuntime.getText()));
+					} catch (Exception ex) {
+						logger.error("widgetSelected(SelectionEvent)", ex);
+						showMsg(
+								l
+										.getString("movies.groupdetail.savebutton.warn.noname.msg"),
+								l
+										.getString("movies.groupdetail.savebutton.warn.noname.title"),
+								SWT.ICON_WARNING | SWT.YES);
+						return;
+					}
+					/**
+					 * @todo eine Exception bekommen wieder leider NOCH nicht
+					 *       mit d.h. es muss noch ein r?ckgabewert kommen oder
+					 *       eine Exception ?bermitteln werden (aus der DB
+					 *       Klasse)
+					 */
+					//neues Objekt erzeugen
+					try {
+						//object speichern
+						// Fehlerbehandlung
 
-                }
+						if (mode_movie == ManagementGui.MODE_ADD) {
 
-            });
+							logger.debug("Objektid: " + localmovie.getMovieId()
+									+ " vor speichern");
+							Database.saveObject(localmovie);
+							logger.debug("Objektid: " + localmovie.getMovieId()
+									+ " nach speichern");
 
-            buttonMoviesCancel = new Button(compositeButtons, SWT.PUSH
-                    | SWT.CENTER);
-            buttonMoviesCancel.setText(l.getString("button.cancel"));
-            buttonMoviesCancel.setEnabled(false);
-            buttonMoviesCancel.addSelectionListener(new SelectionAdapter() {
-                public void widgetSelected(SelectionEvent evt) {
-                    if (logger.isDebugEnabled()) {
-                        logger
-                                .debug("widgetSelected(SelectionEvent) - buttonMoviesCancel.widgetSelected, event="
-                                        + evt);
-                    }
-                    setMoviesGroupButtonSaveCancel();
-                }
-            });
-        }
+							// in ?bersichtstabelle einf?gen
+							insertIntoMoviesOverviewTable(localmovie);
+							textMoviesID.setText(localmovie.getMovieId() + "");
+						} else if (mode_movie == ManagementGui.MODE_EDIT) {
+							Database.updateObject(localmovie);
+						}
+						//Statusline Nachricht sezten
+						statusLine
+								.setStatus(
+										1,
+										l
+												.getString("movies.groupdetail.savebutton.newok"));
+					} catch (DataBaseException e) {
+						logger.debug("DataBaseException: " + e);
+						if (e.getMessage().equalsIgnoreCase("1")) {
+							//Fehler beim Speichern des Objectes
 
-    }
+							statusLine
+									.setStatus(
+											3,
+											l
+													.getString("movies.groupdetail.savebutton.errorsave"));
+							showMsg(
+									l
+											.getString("movies.groupdetail.savebutton.errorsave"),
+									"Fehler", SWT.ICON_ERROR | SWT.OK);
 
-    /**
-     * @param movie2
-     */
-    private void insertIntoMoviesOverviewTable(Movie movie2) {
-        // TODO Auto-generated method stub
-        TableItem item = new TableItem(tableMoviesOverview, SWT.NONE);
-        item.setText(new String[] {
-                movie2.getMovieId() + " ",
-                movie2.getTitle() + " ",
-                DateFormat.getDateInstance(DateFormat.SHORT).format(
-                        movie2.getReleaseDate().getTime()) });
-    }
+						} else if (e.getMessage().equalsIgnoreCase("2")) {
+							//fehler beim db aufbau
+							statusLine
+									.setStatus(
+											3,
+											l
+													.getString("movies.groupdetail.savebutton.errordb"));
+							showMsg(
+									l
+											.getString("movies.groupdetail.savebutton.errordb"),
+									"Fehler", SWT.ICON_ERROR | SWT.OK);
 
-    /**
-     *  
-     */
-    private void setMoviesGroupButtonSaveCancel() {
-        tableMoviesOverview.setEnabled(true);
-        buttonMoviesCancel.setEnabled(false);
-        buttonMoviesSave.setEnabled(false);
-        buttonMoviesNew.setEnabled(true);
-        buttonMoviesEdit.setEnabled(false);
-        buttonMoviesDelete.setEnabled(false);
-        buttonMoviesAddDirectors.setEnabled(false);
-        buttonMoviesDeleteDirectors.setEnabled(false);
-        buttonMoviesAddActors.setEnabled(false);
-        buttonMoviesDeleteActors.setEnabled(false);
-        buttonMoviesAddGenres.setEnabled(false);
-        buttonMoviesDeleteGenres.setEnabled(false);
-        buttonMoviesAddImages.setEnabled(false);
-        buttonMoviesDeleteImages.setEnabled(false);
-        buttonMoviesChangeDate.setEnabled(false);
-        buttonMoviesChangemainImage.setEnabled(false);
-        textMoviesTitle.setEditable(false);
-        textMoviesDescription.setEditable(false);
-        textMoviesSearch.setEditable(true);
-        textMoviesRuntime.setEditable(false);
-    }
+						} else {
+							//@todo
+							logger.error("widgetSelected(SelectionEvent)", e);
+						}
 
-    /**
-     * @param text
-     */
-    private void refreshMoviesOverviewTable(String filter) {
-        // TODO Auto-generated method stub
-        if (tableMoviesOverview == null) {
-            if (logger.isDebugEnabled()) {
-                logger
-                        .debug("refreshMoviesOverviewTable(String) - Konnte MoviesOverviewtable nicht refreshen, da diese null ist!");
-            }
-            return;
-        }
-        if (logger.isDebugEnabled()) {
-            logger
-                    .debug("refreshMoviesOverviewTable(String) - Versuche nun MoviesOverviewtable zu refreshen. Filter: "
-                            + filter);
-        }
-        tableMoviesOverview.removeAll();
-        TableItem item;
-        java.util.List Movielist = Database.getMovie(filter);
+					} catch (Exception ex) {
+						logger.debug("Unbekannte Exception: ", ex);
+					}
 
-        for (int i = 0; i < Movielist.size(); i++) {
+					//activate buttons
+					setMoviesGroupButtonSaveCancel();
 
-            Movie o = (Movie) Movielist.get(i);
-            item = new TableItem(tableMoviesOverview, SWT.NONE);
-            item.setText(new String[] {
-                    o.getMovieId() + "",
-                    o.getTitle(),
-                    DateFormat.getDateInstance(DateFormat.SHORT).format(
-                            o.getReleaseDate().getTime()) });
+				}
 
-        }
-    }
+			});
 
-    /**
-     * @param text
-     */
-    private void refreshMoviesDetail(String id) {
-        // TODO Auto-generated method stub
-        Movie object;
-        try {
-            //since we only can get a String value from the table, we
-            //need to convert this
-            object = Database.getSingleMovie(Integer.parseInt(id));
+			buttonMoviesCancel = new Button(compositeButtons, SWT.PUSH
+					| SWT.CENTER);
+			buttonMoviesCancel.setText(l.getString("button.cancel"));
+			buttonMoviesCancel.setEnabled(false);
+			buttonMoviesCancel.addSelectionListener(new SelectionAdapter() {
+				public void widgetSelected(SelectionEvent evt) {
+					if (logger.isDebugEnabled()) {
+						logger
+								.debug("widgetSelected(SelectionEvent) - buttonMoviesCancel.widgetSelected, event="
+										+ evt);
+					}
+					setMoviesGroupButtonSaveCancel();
+				}
+			});
+		}
 
-            if (object == null) {
+	}
 
-                /*
-                 * 
-                 * @TODO Statusbar aktualiseren
-                 */
-                return;
-            }
-        } catch (Exception e) {
-            // TODO: handle exception
-            //id ist keine Zahl
-            return;
-        }
-        localmovie = object;
-        textMoviesID.setText(object.getMovieId() + "");
-        textMoviesTitle.setText(object.getTitle());
-        textMoviesDate.setText(DateFormat.getDateInstance(DateFormat.LONG)
-                .format(object.getReleaseDate().getTime()));
-        textMoviesRuntime.setText(Integer.toString(object.getRuntime()));
-        textMoviesDescription.setText(object.getDescription());
-        textMoviesmainImage.setText(object.getMainImage().getImageFileName());
-        
-        TableItem item;
-        // Fill Directorstable
-        tableMoviesDirectorsDetail.removeAll();
-        for (int i = 0; i < object.getDirector().size(); i++) {
-            Director o = (Director) object.getDirector().get(i);
-            item = new TableItem(tableMoviesDirectorsDetail, SWT.NONE);
-            item.setText(new String[] { o.getDirectorId() + "",
-                    o.getLastName() + " , " + o.getFirstName() });
-        }
+	/**
+	 * @param movie2
+	 */
+	private void insertIntoMoviesOverviewTable(Movie movie2) {
+		// TODO Auto-generated method stub
+		TableItem item = new TableItem(tableMoviesOverview, SWT.NONE);
+		item.setText(new String[] {
+				movie2.getMovieId() + " ",
+				movie2.getTitle() + " ",
+				DateFormat.getDateInstance(DateFormat.SHORT).format(
+						movie2.getReleaseDate().getTime()) });
+	}
 
-        //Fill Actorstable
-        tableMoviesActorsDetail.removeAll();
-        for (int i = 0; i < object.getActors().size(); i++) {
-            Actor o = (Actor) object.getActors().get(i);
-            item = new TableItem(tableMoviesActorsDetail, SWT.NONE);
-            item.setText(new String[] { o.getActorId() + "",
-                    o.getLastName() + " , " + o.getFirstName() });
-        }
+	/**
+	 *  
+	 */
+	private void setMoviesGroupButtonSaveCancel() {
+		tableMoviesOverview.setEnabled(true);
+		buttonMoviesCancel.setEnabled(false);
+		buttonMoviesSave.setEnabled(false);
+		buttonMoviesNew.setEnabled(true);
+		buttonMoviesEdit.setEnabled(false);
+		buttonMoviesDelete.setEnabled(false);
+		buttonMoviesAddDirectors.setEnabled(false);
+		buttonMoviesDeleteDirectors.setEnabled(false);
+		buttonMoviesAddActors.setEnabled(false);
+		buttonMoviesDeleteActors.setEnabled(false);
+		buttonMoviesAddGenres.setEnabled(false);
+		buttonMoviesDeleteGenres.setEnabled(false);
+		buttonMoviesAddImages.setEnabled(false);
+		buttonMoviesDeleteImages.setEnabled(false);
+		buttonMoviesChangeDate.setEnabled(false);
+		buttonMoviesChangemainImage.setEnabled(false);
+		textMoviesTitle.setEditable(false);
+		textMoviesDescription.setEditable(false);
+		textMoviesSearch.setEditable(true);
+		textMoviesRuntime.setEditable(false);
+	}
 
-        //Fill Genretable
-        tableMoviesGenresDetail.removeAll();
-        logger.debug("Anzahl der Genres: " + object.getGenres().size());
-        for (int i = 0; i < object.getGenres().size(); i++) {
-            Genre o = (Genre) object.getGenres().get(i);
-            logger.debug(i + " " + o);
-            item = new TableItem(tableMoviesGenresDetail, SWT.NONE);
-            item
-                    .setText(new String[] { o.getGenreId() + "",
-                            o.getName() + "" });
+	/**
+	 * @param text
+	 */
+	private void refreshMoviesOverviewTable(String filter) {
+		// TODO Auto-generated method stub
+		if (tableMoviesOverview == null) {
+			if (logger.isDebugEnabled()) {
+				logger
+						.debug("refreshMoviesOverviewTable(String) - Konnte MoviesOverviewtable nicht refreshen, da diese null ist!");
+			}
+			return;
+		}
+		if (logger.isDebugEnabled()) {
+			logger
+					.debug("refreshMoviesOverviewTable(String) - Versuche nun MoviesOverviewtable zu refreshen. Filter: "
+							+ filter);
+		}
+		tableMoviesOverview.removeAll();
+		TableItem item;
+		java.util.List Movielist = Database.getMovie(filter);
 
-            //item.setText(new String[] {o.getGenreId() 
-            //        + " ",o.getName()});
-        }
+		for (int i = 0; i < Movielist.size(); i++) {
 
-        //Fill Imagetable
-        tableMoviesImagesDetail.removeAll();
-        logger.debug("Anzahl der Bilder: " + object.getImages().size());
-        for (int i = 0; i < object.getImages().size(); i++) {
-            Image o = (Image) object.getImages().get(i);
-            item = new TableItem(tableMoviesImagesDetail, SWT.NONE);
-            item.setText(new String[] { o.getImageId() + "",
-                    o.getImageFileName() + "" });
-        }
+			Movie o = (Movie) Movielist.get(i);
+			item = new TableItem(tableMoviesOverview, SWT.NONE);
+			item.setText(new String[] {
+					o.getMovieId() + "",
+					o.getTitle(),
+					DateFormat.getDateInstance(DateFormat.SHORT).format(
+							o.getReleaseDate().getTime()) });
 
-        //Enable Buttons for Delete and Edit
-        buttonMoviesEdit.setEnabled(true);
-        buttonMoviesDelete.setEnabled(true);
+		}
+	}
 
-        //Change mode to view
-        mode_movie = ManagementGui.MODE_VIEW;
+	/**
+	 * @param text
+	 */
+	private void refreshMoviesDetail(String id) {
+		// TODO Auto-generated method stub
+		Movie object;
+		try {
+			//since we only can get a String value from the table, we
+			//need to convert this
+			object = Database.getSingleMovie(Integer.parseInt(id));
 
-    }
-    
-    
-    private List validateInput(){
-        List errors = new ArrayList();
-        
+			if (object == null) {
 
-        if( textMoviesTitle.getText().trim().equalsIgnoreCase("") ){
-            errors.add(l.getString("movies.groupdetail.savebutton.warn.notitle"));
-        }
+				/*
+				 * 
+				 * @TODO Statusbar aktualiseren
+				 */
+				return;
+			}
+		} catch (Exception e) {
+			// TODO: handle exception
+			//id ist keine Zahl
+			return;
+		}
+		localmovie = object;
+		textMoviesID.setText(object.getMovieId() + "");
+		textMoviesTitle.setText(object.getTitle());
+		textMoviesDate.setText(DateFormat.getDateInstance(DateFormat.LONG)
+				.format(object.getReleaseDate().getTime()));
+		textMoviesRuntime.setText(Integer.toString(object.getRuntime()));
+		textMoviesDescription.setText(object.getDescription());
+		textMoviesmainImage.setText(object.getMainImage().getImageFileName());
 
-        if( textMoviesDescription.getText().trim().equalsIgnoreCase("") ){
-            errors.add(l.getString("movies.groupdetail.savebutton.warn.nodescription"));
-        }
-        
-        if( textMoviesDate.getText().trim().equalsIgnoreCase("") ){
-            errors.add( l.getString("movies.groupdetail.savebutton.warn.noreleasedate") );
-        }
-        
-        if( localmovie.getDirector().size() == 0 ){
-            errors.add( l.getString("movies.groupdetail.savebutton.warn.nodirector") );
-        }
-        
-        if( localmovie.getActors().size() == 0 ){
-            errors.add( l.getString("movies.groupdetail.savebutton.warn.noactor") );
-        }
-        
-        if( localmovie.getGenres().size() == 0 ){
-            errors.add( l.getString("movies.groupdetail.savebutton.warn.nogenres") );
-        }
-        
-        if( localmovie.getImages().size() == 0 ){
-            errors.add( l.getString("movies.groupdetail.savebutton.warn.noimages") );
-        }
+		TableItem item;
+		// Fill Directorstable
+		tableMoviesDirectorsDetail.removeAll();
+		for (int i = 0; i < object.getDirector().size(); i++) {
+			Director o = (Director) object.getDirector().get(i);
+			item = new TableItem(tableMoviesDirectorsDetail, SWT.NONE);
+			item.setText(new String[] { o.getDirectorId() + "",
+					o.getLastName() + " , " + o.getFirstName() });
+		}
 
-        
-        
-        return errors;
-        
-    }
+		//Fill Actorstable
+		tableMoviesActorsDetail.removeAll();
+		for (int i = 0; i < object.getActors().size(); i++) {
+			Actor o = (Actor) object.getActors().get(i);
+			item = new TableItem(tableMoviesActorsDetail, SWT.NONE);
+			item.setText(new String[] { o.getActorId() + "",
+					o.getLastName() + " , " + o.getFirstName() });
+		}
+
+		//Fill Genretable
+		tableMoviesGenresDetail.removeAll();
+		logger.debug("Anzahl der Genres: " + object.getGenres().size());
+		for (int i = 0; i < object.getGenres().size(); i++) {
+			Genre o = (Genre) object.getGenres().get(i);
+			logger.debug(i + " " + o);
+			item = new TableItem(tableMoviesGenresDetail, SWT.NONE);
+			item
+					.setText(new String[] { o.getGenreId() + "",
+							o.getName() + "" });
+
+			//item.setText(new String[] {o.getGenreId() 
+			//        + " ",o.getName()});
+		}
+
+		//Fill Imagetable
+		tableMoviesImagesDetail.removeAll();
+		logger.debug("Anzahl der Bilder: " + object.getImages().size());
+		for (int i = 0; i < object.getImages().size(); i++) {
+			Image o = (Image) object.getImages().get(i);
+			item = new TableItem(tableMoviesImagesDetail, SWT.NONE);
+			item.setText(new String[] { o.getImageId() + "",
+					o.getImageFileName() + "" });
+		}
+
+		//Enable Buttons for Delete and Edit
+		buttonMoviesEdit.setEnabled(true);
+		buttonMoviesDelete.setEnabled(true);
+
+		//Change mode to view
+		mode_movie = ManagementGui.MODE_VIEW;
+
+	}
+
+	private List validateInput() {
+		List errors = new ArrayList();
+
+		if (textMoviesTitle.getText().trim().equalsIgnoreCase("")) {
+			errors.add(l
+					.getString("movies.groupdetail.savebutton.warn.notitle"));
+		}
+
+		if (textMoviesDescription.getText().trim().equalsIgnoreCase("")) {
+			errors
+					.add(l
+							.getString("movies.groupdetail.savebutton.warn.nodescription"));
+		}
+
+		if (textMoviesDate.getText().trim().equalsIgnoreCase("")) {
+			errors
+					.add(l
+							.getString("movies.groupdetail.savebutton.warn.noreleasedate"));
+		}
+
+		if (localmovie.getDirector().size() == 0) {
+			errors
+					.add(l
+							.getString("movies.groupdetail.savebutton.warn.nodirector"));
+		}
+
+		if (localmovie.getActors().size() == 0) {
+			errors.add(l
+					.getString("movies.groupdetail.savebutton.warn.noactor"));
+		}
+
+		if (localmovie.getGenres().size() == 0) {
+			errors.add(l
+					.getString("movies.groupdetail.savebutton.warn.nogenres"));
+		}
+
+		if (localmovie.getImages().size() == 0) {
+			errors.add(l
+					.getString("movies.groupdetail.savebutton.warn.noimages"));
+		}
+
+		return errors;
+
+	}
 }
\ No newline at end of file

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositePayment.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositePayment.java	2004-12-08 18:45:55 UTC (rev 225)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositePayment.java	2004-12-08 18:52:28 UTC (rev 226)
@@ -40,7 +40,6 @@
 
 import com.cloudgarden.resource.SWTResourceManager;
 
-import de.hsharz.provirent.Util;
 import de.hsharz.provirent.objects.Payment;
 import de.hsharz.provirent.persistence.DataBaseException;
 import de.hsharz.provirent.persistence.Database;
@@ -58,1235 +57,1246 @@
  */
 public class CompositePayment extends AbstractComposite {
 
-    {
-        //Register as a resource user - SWTResourceManager will
-        //handle the obtaining and disposing of resources
-        SWTResourceManager.registerResourceUser(this);
-    }
+	{
+		//Register as a resource user - SWTResourceManager will
+		//handle the obtaining and disposing of resources
+		SWTResourceManager.registerResourceUser(this);
+	}
 
-    /**
-     * Logger for this class
-     */
-    private static final Logger logger = Logger
-            .getLogger(CompositePayment.class);
+	/**
+	 * Logger for this class
+	 */
+	private static final Logger logger = Logger
+			.getLogger(CompositePayment.class);
 
-    private final static int MODE_VIEW = 0;
+	private final static int MODE_VIEW = 0;
 
-    private final static int MODE_ADD = 1;
+	private final static int MODE_ADD = 1;
 
-    private SashForm sashForm1;
+	private SashForm sashForm1;
 
-    private SashForm sashFormPayment;
+	private SashForm sashFormPayment;
 
-    private Composite parent;
+	private Composite parent;
 
-    private Composite compositeButtons;
+	private Composite compositeButtons;
 
-    private Button changeStartDateButton;
+	private Button changeStartDateButton;
 
-    private Group groupPayment;
+	private Group groupPayment;
 
-    private Group groupPaymentOverview;
+	private Group groupPaymentOverview;
 
-    private Group groupPaymentDetail;
+	private Group groupPaymentDetail;
 
-    private Label labelPaymentId;
+	private Label labelPaymentId;
 
-    private Label labelPaymentName;
+	private Label labelPaymentName;
 
-    private Label labelduration1;
+	private Label labelduration1;
 
-    private Label labelduration2;
+	private Label labelduration2;
 
-    private Label labelduration3;
+	private Label labelduration3;
 
-    private Label labelstartdate;
+	private Label labelstartdate;
 
-    private Text textPaymentID;
+	private Text textPaymentID;
 
-    private Text textPaymentName;
+	private Text textPaymentName;
 
-    private Text textduration1;
+	private Text textduration1;
 
-    private Text textduration2;
+	private Text textduration2;
 
-    private Text textduration3;
+	private Text textduration3;
 
-    private Text textstartdate;
+	private Text textstartdate;
 
-    private Text textPaymentSearch;
+	private Text textPaymentSearch;
 
-    private Label labelPaymentSearch;
+	private Label labelPaymentSearch;
 
-    private Button buttonPaymentCancel;
+	private Button buttonPaymentCancel;
 
-    private Button buttonPaymentSave;
+	private Button buttonPaymentSave;
 
-    private Button buttonPaymentFill;
+	private Button buttonPaymentFill;
 
-    private Button buttonPaymentDelete;
+	private Button buttonPaymentDelete;
 
-    private Button buttonPaymentEdit;
+	private Button buttonPaymentEdit;
 
-    private Button buttonPaymentNew;
+	private Button buttonPaymentNew;
 
-    private Table tablePayment;
+	private Table tablePayment;
 
-    private TableColumn tableColumn;
+	private TableColumn tableColumn;
 
-    Hashtable list = null;
+	Hashtable list = null;
 
-    private final static int MODE_EDIT = 2;
+	private final static int MODE_EDIT = 2;
 
-    private StatusLineStyledText statusLine;
+	private StatusLineStyledText statusLine;
 
-    private ResourceBundle l;
+	private ResourceBundle l;
 
-    protected int mode_Payment;
+	protected int mode_Payment;
 
-    /*
-     * ?ndert die Sprache aller Elemente
-     * 
-     * @see de.hsharz.provirent.managment.gui.AbstractComposite#changeLanguage(java.util.Locale)
-     */
-    public void changeLanguage(Locale locale) {
+	/*
+	 * ?ndert die Sprache aller Elemente
+	 * 
+	 * @see de.hsharz.provirent.managment.gui.AbstractComposite#changeLanguage(java.util.Locale)
+	 */
+	public void changeLanguage(Locale locale) {
 
-    }
+	}
 
-    /*
-     * Init die Sprache (properties Datei)
-     * 
-     * @see de.hsharz.provirent.managment.gui.AbstractComposite#initLanguage(java.util.Locale)
-     */
-    public void initLanguage(Locale locale) {
+	/*
+	 * Init die Sprache (properties Datei)
+	 * 
+	 * @see de.hsharz.provirent.managment.gui.AbstractComposite#initLanguage(java.util.Locale)
+	 */
+	public void initLanguage(Locale locale) {
 
-        l = PropertyResourceBundle.getBundle(
-                "de.hsharz.provirent.management.gui.language.payment", locale);
+		l = PropertyResourceBundle.getBundle(
+				"de.hsharz.provirent.management.gui.language.payment", locale);
 
-    }
+	}
 
-    /**
-     * Auto-generated main method to display this
-     * org.eclipse.swt.widgets.Composite inside a new Shell.
-     */
-    public static void main(String[] args) {
-        showGUI();
-    }
+	/**
+	 * Auto-generated main method to display this
+	 * org.eclipse.swt.widgets.Composite inside a new Shell.
+	 */
+	public static void main(String[] args) {
+		showGUI();
+	}
 
-    /**
-     * Auto-generated method to display this org.eclipse.swt.widgets.Composite
-     * inside a new Shell.
-     */
-    public static void showGUI() {
-        Display display = Display.getDefault();
-        Shell shell = new Shell(display);
+	/**
+	 * Auto-generated method to display this org.eclipse.swt.widgets.Composite
+	 * inside a new Shell.
+	 */
+	public static void showGUI() {
+		Display display = Display.getDefault();
+		Shell shell = new Shell(display);
 
-        shell.open();
-        while (!shell.isDisposed()) {
-            if (!display.readAndDispatch())
-                display.sleep();
-        }
-    }
+		shell.open();
+		while (!shell.isDisposed()) {
+			if (!display.readAndDispatch())
+				display.sleep();
+		}
+	}
 
-    public CompositePayment(Composite p, int style,
-            StatusLineStyledText status, Locale l) {
-        super(p, style, status, l);
-        parent = p;
-        //Statusline wird gestzt
-        statusLine = status;
+	public CompositePayment(Composite p, int style,
+			StatusLineStyledText status, Locale l) {
+		super(p, style, status, l);
+		parent = p;
+		//Statusline wird gestzt
+		statusLine = status;
 
-        //sprache wird init
-        initLanguage(l);
+		//sprache wird init
+		initLanguage(l);
 
-        initGUI();
-    }
+		initGUI();
+	}
 
-    private void initGUI() {
-        if (logger.isDebugEnabled()) {
-            logger.debug("initGUI() - start");
-        }
+	private void initGUI() {
+		if (logger.isDebugEnabled()) {
+			logger.debug("initGUI() - start");
+		}
 
-        this.setLayout(new GridLayout());
-        this.setSize(816, 540);
-        {
-            sashForm1 = new SashForm(this, SWT.VERTICAL | SWT.V_SCROLL);
-            GridData sashForm1LData1 = new GridData();
-            sashForm1LData1.grabExcessHorizontalSpace = true;
-            sashForm1LData1.horizontalAlignment = GridData.FILL;
-            sashForm1LData1.grabExcessVerticalSpace = true;
-            sashForm1LData1.verticalAlignment = GridData.FILL;
-            sashForm1.setLayoutData(sashForm1LData1);
+		this.setLayout(new GridLayout());
+		this.setSize(816, 540);
+		{
+			sashForm1 = new SashForm(this, SWT.VERTICAL | SWT.V_SCROLL);
+			GridData sashForm1LData1 = new GridData();
+			sashForm1LData1.grabExcessHorizontalSpace = true;
+			sashForm1LData1.horizontalAlignment = GridData.FILL;
+			sashForm1LData1.grabExcessVerticalSpace = true;
+			sashForm1LData1.verticalAlignment = GridData.FILL;
+			sashForm1.setLayoutData(sashForm1LData1);
 
-            initPaymentGroup();
-            try {
-                refreshPaymentTable(textPaymentSearch.getText());
-            } catch (DataBaseException e) {
-                // TODO Auto-generated catch block
-                e.printStackTrace();
-            }
+			initPaymentGroup();
+			try {
+				refreshPaymentTable(textPaymentSearch.getText());
+			} catch (DataBaseException e) {
+				// TODO Auto-generated catch block
+				e.printStackTrace();
+			}
 
-        }
-        this.layout();
+		}
+		this.layout();
 
-        if (logger.isDebugEnabled()) {
-            logger.debug("initGUI() - end");
-        }
-    }
+		if (logger.isDebugEnabled()) {
+			logger.debug("initGUI() - end");
+		}
+	}
 
-    /**
-     *  
-     */
-    private void initPaymentGroup() {
-        {
-            //init a group for the Payment
-            groupPayment = new Group(sashForm1, SWT.NONE);
-            GridLayout group2Layout = new GridLayout();
-            group2Layout.makeColumnsEqualWidth = true;
-            groupPayment.setText(l.getString("Payment.group.label"));
-            groupPayment.setSize(758, 284);
-            FormData group2LData = new FormData();
-            groupPayment.addFocusListener(new FocusAdapter() {
-                public void focusLost(FocusEvent evt) {
-                    System.out.println("groupPayment.focusLost, event=" + evt);
-                    buttonPaymentCancel.setEnabled(false);
-                    buttonPaymentDelete.setEnabled(false);
-                    buttonPaymentEdit.setEnabled(false);
-                    buttonPaymentNew.setEnabled(false);
-                    buttonPaymentSave.setEnabled(false);
-                }
-            });
-            groupPayment.setLayout(group2Layout);
-            groupPayment.setLayoutData(group2LData);
-            {
-                sashFormPayment = new SashForm(groupPayment, SWT.NONE);
-                FormLayout sashForm2Layout = new FormLayout();
-                sashFormPayment.setSize(748, 300);
-                GridData sashForm2LData = new GridData();
-                sashFormPayment.setLayout(sashForm2Layout);
-                sashForm2LData.verticalAlignment = GridData.FILL;
-                sashForm2LData.horizontalAlignment = GridData.FILL;
-                sashForm2LData.grabExcessHorizontalSpace = true;
-                sashForm2LData.grabExcessVerticalSpace = true;
-                sashFormPayment.setLayoutData(sashForm2LData);
+	/**
+	 *  
+	 */
+	private void initPaymentGroup() {
+		{
+			//init a group for the Payment
+			groupPayment = new Group(sashForm1, SWT.NONE);
+			GridLayout group2Layout = new GridLayout();
+			group2Layout.makeColumnsEqualWidth = true;
+			groupPayment.setText(l.getString("Payment.group.label"));
+			groupPayment.setSize(758, 284);
+			FormData group2LData = new FormData();
+			groupPayment.addFocusListener(new FocusAdapter() {
+				public void focusLost(FocusEvent evt) {
+					System.out.println("groupPayment.focusLost, event=" + evt);
+					buttonPaymentCancel.setEnabled(false);
+					buttonPaymentDelete.setEnabled(false);
+					buttonPaymentEdit.setEnabled(false);
+					buttonPaymentNew.setEnabled(false);
+					buttonPaymentSave.setEnabled(false);
+				}
+			});
+			groupPayment.setLayout(group2Layout);
+			groupPayment.setLayoutData(group2LData);
+			{
+				sashFormPayment = new SashForm(groupPayment, SWT.NONE);
+				FormLayout sashForm2Layout = new FormLayout();
+				sashFormPayment.setSize(748, 300);
+				GridData sashForm2LData = new GridData();
+				sashFormPayment.setLayout(sashForm2Layout);
+				sashForm2LData.verticalAlignment = GridData.FILL;
+				sashForm2LData.horizontalAlignment = GridData.FILL;
+				sashForm2LData.grabExcessHorizontalSpace = true;
+				sashForm2LData.grabExcessVerticalSpace = true;
+				sashFormPayment.setLayoutData(sashForm2LData);
 
-                //init die Gruppe f?r Paymente ?berblick
-                initPaymentGroupOverview();
-                //init die Detailansicht
-                initPaymentGroupDetail();
+				//init die Gruppe f?r Paymente ?berblick
+				initPaymentGroupOverview();
+				//init die Detailansicht
+				initPaymentGroupDetail();
 
-            }
-        }
+			}
+		}
 
-    }
+	}
 
-    /**
-     *  
-     */
-    private void initPaymentGroupDetail() {
-        groupPaymentDetail = new Group(sashFormPayment, SWT.NONE);
-        GridLayout groupPaymentDetailLayout = new GridLayout();
-        groupPaymentDetailLayout.marginHeight = 25;
-        groupPaymentDetailLayout.numColumns = 6;
-        groupPaymentDetailLayout.verticalSpacing = 15;
-        groupPaymentDetail.setText(l.getString("Payment.groupdetail.label"));
-        FormData formData = new FormData();
-        groupPaymentDetail.setLayout(groupPaymentDetailLayout);
-        formData.right = new FormAttachment(100, 100, -5);
-        formData.top = new FormAttachment(0, 100, 5);
-        formData.bottom = new FormAttachment(100, 100, -5);
-        groupPaymentDetail.setLayoutData(formData);
-        {
-            labelPaymentId = new Label(groupPaymentDetail, SWT.NONE);
-            labelPaymentId.setText(l.getString("Payment.groupdetail.idlabel")
-                    + ":");
-            labelPaymentId.setSize(125, 15);
-            GridData formData2 = new GridData();
-            formData2.widthHint = 125;
-            formData2.heightHint = 15;
-            formData2.horizontalSpan = 2;
-            labelPaymentId.setLayoutData(formData2);
-        }
-        {
-            textPaymentID = new Text(groupPaymentDetail, SWT.READ_ONLY
-                    | SWT.BORDER);
-            GridData text1LData1 = new GridData();
-            text1LData1.horizontalAlignment = GridData.FILL;
-            text1LData1.heightHint = 13;
-            text1LData1.horizontalSpan = 4;
-            text1LData1.grabExcessHorizontalSpace = true;
-            textPaymentID.setLayoutData(text1LData1);
-        }
-        {
-            labelPaymentName = new Label(groupPaymentDetail, SWT.NONE);
-            labelPaymentName.setText(l
-                    .getString("Payment.groupdetail.namelabel")
-                    + ":");
-            labelPaymentName.setSize(125, 15);
-            GridData formData2 = new GridData();
-            formData2.widthHint = 125;
-            formData2.heightHint = 15;
-            formData2.horizontalSpan = 2;
-            labelPaymentName.setLayoutData(formData2);
-        }
-        {
-            textPaymentName = new Text(groupPaymentDetail, SWT.READ_ONLY
-                    | SWT.BORDER);
-            GridData text1LData1 = new GridData();
-            text1LData1.horizontalAlignment = GridData.FILL;
-            text1LData1.heightHint = 13;
-            text1LData1.horizontalSpan = 4;
-            text1LData1.grabExcessHorizontalSpace = true;
-            textPaymentName.setLayoutData(text1LData1);
-        }
-        {
-            labelduration1 = new Label(groupPaymentDetail, SWT.NONE);
-            labelduration1.setText(l
-                    .getString("Payment.groupdetail.duration1label")
-                    + ":");
-            labelduration1.setSize(125, 15);
-            GridData labelduration1LData = new GridData();
-            labelduration1LData.widthHint = 125;
-            labelduration1LData.heightHint = 15;
-            labelduration1LData.horizontalSpan = 2;
-            labelduration1.setLayoutData(labelduration1LData);
-        }
-        {
-            textduration1 = new Text(groupPaymentDetail, SWT.READ_ONLY
-                    | SWT.BORDER);
-            GridData text1LData2 = new GridData();
-            text1LData2.horizontalAlignment = GridData.FILL;
-            text1LData2.heightHint = 13;
-            text1LData2.horizontalSpan = 4;
-            text1LData2.grabExcessHorizontalSpace = true;
-            textduration1.setLayoutData(text1LData2);
-        }
-        {
-            labelduration2 = new Label(groupPaymentDetail, SWT.NONE);
-            labelduration2.setText(l
-                    .getString("Payment.groupdetail.duration2label")
-                    + ":");
-            labelduration2.setSize(125, 15);
-            GridData label2LData1 = new GridData();
-            label2LData1.widthHint = 125;
-            label2LData1.heightHint = 15;
-            label2LData1.horizontalSpan = 2;
-            labelduration2.setLayoutData(label2LData1);
-        }
-        {
-            textduration2 = new Text(groupPaymentDetail, SWT.READ_ONLY
-                    | SWT.BORDER);
-            GridData text1LData3 = new GridData();
-            text1LData3.horizontalAlignment = GridData.FILL;
-            text1LData3.heightHint = 13;
-            text1LData3.horizontalSpan = 4;
-            text1LData3.grabExcessHorizontalSpace = true;
-            textduration2.setLayoutData(text1LData3);
-        }
-        {
-            labelduration3 = new Label(groupPaymentDetail, SWT.NONE);
-            labelduration3.setText(l
-                    .getString("Payment.groupdetail.duration3label")
-                    + ":");
-            labelduration3.setSize(125, 15);
-            GridData label1LData1 = new GridData();
-            label1LData1.widthHint = 125;
-            label1LData1.heightHint = 15;
-            label1LData1.horizontalSpan = 2;
-            labelduration3.setLayoutData(label1LData1);
-        }
-        {
-            textduration3 = new Text(groupPaymentDetail, SWT.READ_ONLY
-                    | SWT.BORDER);
-            GridData text1LData3 = new GridData();
-            text1LData3.horizontalAlignment = GridData.FILL;
-            text1LData3.heightHint = 13;
-            text1LData3.horizontalSpan = 4;
-            text1LData3.grabExcessHorizontalSpace = true;
-            textduration3.setLayoutData(text1LData3);
-        }
-        {
-            labelstartdate = new Label(groupPaymentDetail, SWT.NONE);
-            labelstartdate.setText(l
-                    .getString("Payment.groupdetail.startdatelabel")
-                    + ":");
-            labelstartdate.setSize(125, 15);
-            GridData label1LData1 = new GridData();
-            label1LData1.widthHint = 125;
-            label1LData1.heightHint = 15;
-            label1LData1.horizontalSpan = 2;
-            labelstartdate.setLayoutData(label1LData1);
-        }
-        {
-            textstartdate = new Text(groupPaymentDetail, SWT.READ_ONLY
-                    | SWT.BORDER);
-            GridData text1LData3 = new GridData();
-            text1LData3.horizontalAlignment = GridData.FILL;
-            text1LData3.heightHint = 13;
-            text1LData3.horizontalSpan = 3;
-            text1LData3.grabExcessHorizontalSpace = true;
-            textstartdate.setLayoutData(text1LData3);
-            textstartdate.setEditable(false);
-        }
-        {
-            changeStartDateButton = new Button(groupPaymentDetail, SWT.PUSH
-                    | SWT.CENTER);
-            changeStartDateButton.setText(l
-                    .getString("Payment.groupdetail.startdatebuttonchange"));
-            GridData text1LData3 = new GridData();
-            changeStartDateButton.setEnabled(false);
-            changeStartDateButton.addSelectionListener(new SelectionAdapter() {
-                public void widgetSelected(SelectionEvent evt) {
+	/**
+	 *  
+	 */
+	private void initPaymentGroupDetail() {
+		groupPaymentDetail = new Group(sashFormPayment, SWT.NONE);
+		GridLayout groupPaymentDetailLayout = new GridLayout();
+		groupPaymentDetailLayout.marginHeight = 25;
+		groupPaymentDetailLayout.numColumns = 6;
+		groupPaymentDetailLayout.verticalSpacing = 15;
+		groupPaymentDetail.setText(l.getString("Payment.groupdetail.label"));
+		FormData formData = new FormData();
+		groupPaymentDetail.setLayout(groupPaymentDetailLayout);
+		formData.right = new FormAttachment(100, 100, -5);
+		formData.top = new FormAttachment(0, 100, 5);
+		formData.bottom = new FormAttachment(100, 100, -5);
+		groupPaymentDetail.setLayoutData(formData);
+		{
+			labelPaymentId = new Label(groupPaymentDetail, SWT.NONE);
+			labelPaymentId.setText(l.getString("Payment.groupdetail.idlabel")
+					+ ":");
+			labelPaymentId.setSize(125, 15);
+			GridData formData2 = new GridData();
+			formData2.widthHint = 125;
+			formData2.heightHint = 15;
+			formData2.horizontalSpan = 2;
+			labelPaymentId.setLayoutData(formData2);
+		}
+		{
+			textPaymentID = new Text(groupPaymentDetail, SWT.READ_ONLY
+					| SWT.BORDER);
+			GridData text1LData1 = new GridData();
+			text1LData1.horizontalAlignment = GridData.FILL;
+			text1LData1.heightHint = 13;
+			text1LData1.horizontalSpan = 4;
+			text1LData1.grabExcessHorizontalSpace = true;
+			textPaymentID.setLayoutData(text1LData1);
+		}
+		{
+			labelPaymentName = new Label(groupPaymentDetail, SWT.NONE);
+			labelPaymentName.setText(l
+					.getString("Payment.groupdetail.namelabel")
+					+ ":");
+			labelPaymentName.setSize(125, 15);
+			GridData formData2 = new GridData();
+			formData2.widthHint = 125;
+			formData2.heightHint = 15;
+			formData2.horizontalSpan = 2;
+			labelPaymentName.setLayoutData(formData2);
+		}
+		{
+			textPaymentName = new Text(groupPaymentDetail, SWT.READ_ONLY
+					| SWT.BORDER);
+			GridData text1LData1 = new GridData();
+			text1LData1.horizontalAlignment = GridData.FILL;
+			text1LData1.heightHint = 13;
+			text1LData1.horizontalSpan = 4;
+			text1LData1.grabExcessHorizontalSpace = true;
+			textPaymentName.setLayoutData(text1LData1);
+		}
+		{
+			labelduration1 = new Label(groupPaymentDetail, SWT.NONE);
+			labelduration1.setText(l
+					.getString("Payment.groupdetail.duration1label")
+					+ ":");
+			labelduration1.setSize(125, 15);
+			GridData labelduration1LData = new GridData();
+			labelduration1LData.widthHint = 125;
+			labelduration1LData.heightHint = 15;
+			labelduration1LData.horizontalSpan = 2;
+			labelduration1.setLayoutData(labelduration1LData);
+		}
+		{
+			textduration1 = new Text(groupPaymentDetail, SWT.READ_ONLY
+					| SWT.BORDER);
+			GridData text1LData2 = new GridData();
+			text1LData2.horizontalAlignment = GridData.FILL;
+			text1LData2.heightHint = 13;
+			text1LData2.horizontalSpan = 4;
+			text1LData2.grabExcessHorizontalSpace = true;
+			textduration1.setLayoutData(text1LData2);
+		}
+		{
+			labelduration2 = new Label(groupPaymentDetail, SWT.NONE);
+			labelduration2.setText(l
+					.getString("Payment.groupdetail.duration2label")
+					+ ":");
+			labelduration2.setSize(125, 15);
+			GridData label2LData1 = new GridData();
+			label2LData1.widthHint = 125;
+			label2LData1.heightHint = 15;
+			label2LData1.horizontalSpan = 2;
+			labelduration2.setLayoutData(label2LData1);
+		}
+		{
+			textduration2 = new Text(groupPaymentDetail, SWT.READ_ONLY
+					| SWT.BORDER);
+			GridData text1LData3 = new GridData();
+			text1LData3.horizontalAlignment = GridData.FILL;
+			text1LData3.heightHint = 13;
+			text1LData3.horizontalSpan = 4;
+			text1LData3.grabExcessHorizontalSpace = true;
+			textduration2.setLayoutData(text1LData3);
+		}
+		{
+			labelduration3 = new Label(groupPaymentDetail, SWT.NONE);
+			labelduration3.setText(l
+					.getString("Payment.groupdetail.duration3label")
+					+ ":");
+			labelduration3.setSize(125, 15);
+			GridData label1LData1 = new GridData();
+			label1LData1.widthHint = 125;
+			label1LData1.heightHint = 15;
+			label1LData1.horizontalSpan = 2;
+			labelduration3.setLayoutData(label1LData1);
+		}
+		{
+			textduration3 = new Text(groupPaymentDetail, SWT.READ_ONLY
+					| SWT.BORDER);
+			GridData text1LData3 = new GridData();
+			text1LData3.horizontalAlignment = GridData.FILL;
+			text1LData3.heightHint = 13;
+			text1LData3.horizontalSpan = 4;
+			text1LData3.grabExcessHorizontalSpace = true;
+			textduration3.setLayoutData(text1LData3);
+		}
+		{
+			labelstartdate = new Label(groupPaymentDetail, SWT.NONE);
+			labelstartdate.setText(l
+					.getString("Payment.groupdetail.startdatelabel")
+					+ ":");
+			labelstartdate.setSize(125, 15);
+			GridData label1LData1 = new GridData();
+			label1LData1.widthHint = 125;
+			label1LData1.heightHint = 15;
+			label1LData1.horizontalSpan = 2;
+			labelstartdate.setLayoutData(label1LData1);
+		}
+		{
+			textstartdate = new Text(groupPaymentDetail, SWT.READ_ONLY
+					| SWT.BORDER);
+			GridData text1LData3 = new GridData();
+			text1LData3.horizontalAlignment = GridData.FILL;
+			text1LData3.heightHint = 13;
+			text1LData3.horizontalSpan = 3;
+			text1LData3.grabExcessHorizontalSpace = true;
+			textstartdate.setLayoutData(text1LData3);
+			textstartdate.setEditable(false);
+		}
+		{
+			changeStartDateButton = new Button(groupPaymentDetail, SWT.PUSH
+					| SWT.CENTER);
+			changeStartDateButton.setText(l
+					.getString("Payment.groupdetail.startdatebuttonchange"));
+			GridData text1LData3 = new GridData();
+			changeStartDateButton.setEnabled(false);
+			changeStartDateButton.addSelectionListener(new SelectionAdapter() {
+				public void widgetSelected(SelectionEvent evt) {
 
-                    final SWTCalendarDialog cal = new SWTCalendarDialog(
-                            getDisplay(),
-                            l
-                                    .getString("Payment.groupdetail.startdatebuttonfinish"),
-                                    l.getString("Payment.groupdetail.startdatedialogtitle"));
+					final SWTCalendarDialog cal = new SWTCalendarDialog(
+							getDisplay(),
+							l
+									.getString("Payment.groupdetail.startdatebuttonfinish"),
+							l
+									.getString("Payment.groupdetail.startdatedialogtitle"));
 
-                    cal.addDateChangedListener(new SWTCalendarListener() {
+					cal.addDateChangedListener(new SWTCalendarListener() {
 
-                        public void dateChanged(SWTCalendarEvent calendarEvent) {
+						public void dateChanged(SWTCalendarEvent calendarEvent) {
 
-                            textstartdate.setText(DateFormat.getDateInstance(
-                                    DateFormat.LONG).format(
-                                    calendarEvent.getCalendar().getTime()));
+							textstartdate.setText(DateFormat.getDateInstance(
+									DateFormat.LONG).format(
+									calendarEvent.getCalendar().getTime()));
 
-                        }
+						}
 
-                    });
+					});
 
-                    if (textstartdate.getText() != null
-                            && textstartdate.getText().length() > 0) {
+					if (textstartdate.getText() != null
+							&& textstartdate.getText().length() > 0) {
 
-                        try {
-                            cal.setDate(DateFormat.getDateInstance(
-                                    DateFormat.LONG).parse(
-                                    textstartdate.getText()));
+						try {
+							cal.setDate(DateFormat.getDateInstance(
+									DateFormat.LONG).parse(
+									textstartdate.getText()));
 
-                        } catch (ParseException pe) {
+						} catch (ParseException pe) {
 
-                        }
+						}
 
-                    }
+					}
 
-                    cal.open();
+					cal.open();
 
-                }
-            });
-            text1LData3.horizontalAlignment = GridData.FILL;
+				}
+			});
+			text1LData3.horizontalAlignment = GridData.FILL;
 
-            text1LData3.horizontalSpan = 1;
-            text1LData3.grabExcessHorizontalSpace = true;
-            changeStartDateButton.setLayoutData(text1LData3);
-        }
-        {
+			text1LData3.horizontalSpan = 1;
+			text1LData3.grabExcessHorizontalSpace = true;
+			changeStartDateButton.setLayoutData(text1LData3);
+		}
+		{
 
-            //die Buttons bekommen ein eigenes Composite
-            compositeButtons = new Composite(groupPaymentDetail, SWT.EMBEDDED);
-            GridLayout composite2Layout = new GridLayout();
-            composite2Layout.numColumns = 6;
-            GridData composite2LData = new GridData();
-            compositeButtons.setLayout(composite2Layout);
-            composite2LData.verticalAlignment = GridData.END;
-            composite2LData.horizontalAlignment = GridData.CENTER;
-            composite2LData.widthHint = 391;
-            composite2LData.horizontalSpan = 6;
-            composite2LData.grabExcessHorizontalSpace = true;
-            composite2LData.grabExcessVerticalSpace = true;
-            composite2LData.heightHint = 35;
-            compositeButtons.setLayoutData(composite2LData);
+			//die Buttons bekommen ein eigenes Composite
+			compositeButtons = new Composite(groupPaymentDetail, SWT.EMBEDDED);
+			GridLayout composite2Layout = new GridLayout();
+			composite2Layout.numColumns = 6;
+			GridData composite2LData = new GridData();
+			compositeButtons.setLayout(composite2Layout);
+			composite2LData.verticalAlignment = GridData.END;
+			composite2LData.horizontalAlignment = GridData.CENTER;
+			composite2LData.widthHint = 391;
+			composite2LData.horizontalSpan = 6;
+			composite2LData.grabExcessHorizontalSpace = true;
+			composite2LData.grabExcessVerticalSpace = true;
+			composite2LData.heightHint = 35;
+			compositeButtons.setLayoutData(composite2LData);
 
-            //init all the Buttons
-            initPaymentDetailButtons();
+			//init all the Buttons
+			initPaymentDetailButtons();
 
-        }
+		}
 
-    }
+	}
 
-    /**
-     *  
-     */
-    private void initPaymentDetailButtons() {
-        buttonPaymentNew = new Button(compositeButtons, SWT.PUSH | SWT.CENTER);
-        buttonPaymentNew.setText(l.getString("button.new"));
-        buttonPaymentNew.addSelectionListener(new SelectionAdapter() {
+	/**
+	 *  
+	 */
+	private void initPaymentDetailButtons() {
+		buttonPaymentNew = new Button(compositeButtons, SWT.PUSH | SWT.CENTER);
+		buttonPaymentNew.setText(l.getString("button.new"));
+		buttonPaymentNew.addSelectionListener(new SelectionAdapter() {
 
-            public void widgetSelected(SelectionEvent evt) {
+			public void widgetSelected(SelectionEvent evt) {
 
-                textPaymentID.setText("");
-                textPaymentName.setText("");
-                textduration1.setText("");
-                textduration2.setText("");
-                textduration3.setText("");
-                textstartdate.setText("");
+				textPaymentID.setText("");
+				textPaymentName.setText("");
+				textduration1.setText("");
+				textduration2.setText("");
+				textduration3.setText("");
+				textstartdate.setText("");
 
-                textPaymentName.setEditable(true);
-                textduration1.setEditable(true);
-                textduration2.setEditable(true);
-                textduration3.setEditable(true);
-                //textstartdate.setEditable(true);
-                changeStartDateButton.setEnabled(true);
+				textPaymentName.setEditable(true);
+				textduration1.setEditable(true);
+				textduration2.setEditable(true);
+				textduration3.setEditable(true);
+				//textstartdate.setEditable(true);
+				changeStartDateButton.setEnabled(true);
 
-                buttonPaymentCancel.setEnabled(true);
-                buttonPaymentSave.setEnabled(true);
-                buttonPaymentNew.setEnabled(false);
-                buttonPaymentEdit.setEnabled(false);
-                buttonPaymentDelete.setEnabled(false);
+				buttonPaymentCancel.setEnabled(true);
+				buttonPaymentSave.setEnabled(true);
+				buttonPaymentNew.setEnabled(false);
+				buttonPaymentEdit.setEnabled(false);
+				buttonPaymentDelete.setEnabled(false);
 
-                textPaymentSearch.setEditable(false);
-                tablePayment.setEnabled(false);
+				textPaymentSearch.setEditable(false);
+				tablePayment.setEnabled(false);
 
-                mode_Payment = ManagementGui.MODE_ADD;
+				mode_Payment = ManagementGui.MODE_ADD;
 
-            }
-        });
+			}
+		});
 
-        buttonPaymentEdit = new Button(compositeButtons, SWT.PUSH | SWT.CENTER);
-        buttonPaymentEdit.setText(l.getString("button.edit"));
-        buttonPaymentEdit.setEnabled(false);
-        buttonPaymentEdit.addSelectionListener(new SelectionAdapter() {
-            public void widgetSelected(SelectionEvent evt) {
+		buttonPaymentEdit = new Button(compositeButtons, SWT.PUSH | SWT.CENTER);
+		buttonPaymentEdit.setText(l.getString("button.edit"));
+		buttonPaymentEdit.setEnabled(false);
+		buttonPaymentEdit.addSelectionListener(new SelectionAdapter() {
+			public void widgetSelected(SelectionEvent evt) {
 
-                mode_Payment = ManagementGui.MODE_EDIT;
+				mode_Payment = ManagementGui.MODE_EDIT;
 
-                textPaymentID.setEditable(false);
-                textPaymentName.setEditable(true);
-                textduration1.setEditable(true);
-                textduration2.setEditable(true);
-                textduration3.setEditable(true);
-                //textstartdate.setEditable(true);
-                changeStartDateButton.setEnabled(true);
+				textPaymentID.setEditable(false);
+				textPaymentName.setEditable(true);
+				textduration1.setEditable(true);
+				textduration2.setEditable(true);
+				textduration3.setEditable(true);
+				//textstartdate.setEditable(true);
+				changeStartDateButton.setEnabled(true);
 
-                textduration1.setFocus();
+				textduration1.setFocus();
 
-                buttonPaymentCancel.setEnabled(true);
-                buttonPaymentSave.setEnabled(true);
-                buttonPaymentNew.setEnabled(false);
-                buttonPaymentEdit.setEnabled(false);
-                buttonPaymentDelete.setEnabled(false);
+				buttonPaymentCancel.setEnabled(true);
+				buttonPaymentSave.setEnabled(true);
+				buttonPaymentNew.setEnabled(false);
+				buttonPaymentEdit.setEnabled(false);
+				buttonPaymentDelete.setEnabled(false);
 
-                tablePayment.setEnabled(false);
-                textPaymentSearch.setEnabled(false);
+				tablePayment.setEnabled(false);
+				textPaymentSearch.setEnabled(false);
 
-            }
-        });
+			}
+		});
 
-        buttonPaymentDelete = new Button(compositeButtons, SWT.PUSH
-                | SWT.CENTER);
-        buttonPaymentDelete.setText(l.getString("button.delete"));
-        buttonPaymentDelete.setEnabled(false);
-        buttonPaymentDelete.addSelectionListener(new SelectionAdapter() {
-            public void widgetSelected(SelectionEvent evt) {
-                System.out.println("buttonPaymentDelete.widgetSelected, event="
-                        + evt);
+		buttonPaymentDelete = new Button(compositeButtons, SWT.PUSH
+				| SWT.CENTER);
+		buttonPaymentDelete.setText(l.getString("button.delete"));
+		buttonPaymentDelete.setEnabled(false);
+		buttonPaymentDelete.addSelectionListener(new SelectionAdapter() {
+			public void widgetSelected(SelectionEvent evt) {
+				System.out.println("buttonPaymentDelete.widgetSelected, event="
+						+ evt);
 
-                String msg = MessageFormat
-                        .format(
-                                l
-                                        .getString("Payment.groupdetail.deletebutton.question.text"),
-                                new Object[] { textPaymentName.getText() + " "
-                                        + textduration1.getText() + " "
-                                        + textduration2.getText() + " "
-                                        + textduration3.getText() + " "
-                                        + textstartdate.getText() });
+				String msg = MessageFormat
+						.format(
+								l
+										.getString("Payment.groupdetail.deletebutton.question.text"),
+								new Object[] { textPaymentName.getText() + " "
+										+ textduration1.getText() + " "
+										+ textduration2.getText() + " "
+										+ textduration3.getText() + " "
+										+ textstartdate.getText() });
 
-                int question = showMsg(
-                        msg,
-                        l
-                                .getString("Payment.groupdetail.deletebutton.question.header"),
-                        SWT.ICON_QUESTION | SWT.YES | SWT.NO);
+				int question = showMsg(
+						msg,
+						l
+								.getString("Payment.groupdetail.deletebutton.question.header"),
+						SWT.ICON_QUESTION | SWT.YES | SWT.NO);
 
-                if (question != SWT.YES) {
-                    return;
-                }
-                try {
-                    Payment o = new Payment();
-                    o.setPaymentId(new Integer(Integer.parseInt(textPaymentID
-                            .getText())));
-                    o.setName(textPaymentName.getText());
-                    o.setDuration1(Float.parseFloat(textduration1.getText()));
-                    o.setDuration2(Float.parseFloat(textduration2.getText()));
-                    o.setDuration3(Float.parseFloat(textduration3.getText()));
-                    o.setStartdate(Calendar.getInstance());
-                    try {
-                        o.getStartdate().setTime(DateFormat.getDateInstance(DateFormat.LONG).parse(textstartdate.getText()));
-                    } catch (ParseException e1) {
-                        // TODO Auto-generated catch block
-                        e1.printStackTrace();
-                        if (logger.isDebugEnabled()) {
-                            logger.debug("Problem mit Date l?schen wird verworfen ");
-                        }
-                        return;
-                    }
+				if (question != SWT.YES) {
+					return;
+				}
+				try {
+					Payment o = new Payment();
+					o.setPaymentId(new Integer(Integer.parseInt(textPaymentID
+							.getText())));
+					o.setName(textPaymentName.getText());
+					o.setDuration1(Float.parseFloat(textduration1.getText()));
+					o.setDuration2(Float.parseFloat(textduration2.getText()));
+					o.setDuration3(Float.parseFloat(textduration3.getText()));
+					o.setStartdate(Calendar.getInstance());
+					try {
+						o.getStartdate().setTime(
+								DateFormat.getDateInstance(DateFormat.LONG)
+										.parse(textstartdate.getText()));
+					} catch (ParseException e1) {
+						// TODO Auto-generated catch block
+						e1.printStackTrace();
+						if (logger.isDebugEnabled()) {
+							logger
+									.debug("Problem mit Date l?schen wird verworfen ");
+						}
+						return;
+					}
 
-                    //object speichern
-                    // Fehlerbehandlung
-                    Database.deleteObject(o);
+					//object speichern
+					// Fehlerbehandlung
+					Database.deleteObject(o);
 
-                    //?bersichtsTabelle aktualisieren
-                    refreshPaymentTable(textPaymentSearch.getText());
+					//?bersichtsTabelle aktualisieren
+					refreshPaymentTable(textPaymentSearch.getText());
 
-                    //Detailansicht leeren
-                    textPaymentID.setText("");
-                    textPaymentName.setText("");
-                    textduration1.setText("");
-                    textduration2.setText("");
-                    textduration3.setText("");
-                    textstartdate.setText("");
-                    buttonPaymentEdit.setEnabled(false);
-                    buttonPaymentDelete.setEnabled(false);
-                    //in Tabelle n?chsten ausw?hlen
-                    try {
-                        tablePayment.deselectAll();
-                    } catch (Exception ex) {
-                    }
+					//Detailansicht leeren
+					textPaymentID.setText("");
+					textPaymentName.setText("");
+					textduration1.setText("");
+					textduration2.setText("");
+					textduration3.setText("");
+					textstartdate.setText("");
+					buttonPaymentEdit.setEnabled(false);
+					buttonPaymentDelete.setEnabled(false);
+					//in Tabelle n?chsten ausw?hlen
+					try {
+						tablePayment.deselectAll();
+					} catch (Exception ex) {
+					}
 
-                    //Statusline Nachricht sezten
-                    statusLine
-                            .setStatus(
-                                    1,
-                                    l
-                                            .getString("Payment.groupdetail.deletebutton.newok"));
+					//Statusline Nachricht sezten
+					statusLine
+							.setStatus(
+									1,
+									l
+											.getString("Payment.groupdetail.deletebutton.newok"));
 
-                } catch (DataBaseException e) {
-                    if (e.getMessage().equalsIgnoreCase("1")) {
-                        //Fehler beim Speichern des Objectes
+				} catch (DataBaseException e) {
+					if (e.getMessage().equalsIgnoreCase("1")) {
+						//Fehler beim Speichern des Objectes
 
-                        statusLine
-                                .setStatus(
-                                        3,
-                                        l
-                                                .getString("Payment.groupdetail.deletebutton.errorsave"));
-                        showMsg(
-                                l
-                                        .getString("Payment.groupdetail.deletebutton.errorsave"),
-                                l.getString("error"), SWT.ICON_ERROR | SWT.OK);
+						statusLine
+								.setStatus(
+										3,
+										l
+												.getString("Payment.groupdetail.deletebutton.errorsave"));
+						showMsg(
+								l
+										.getString("Payment.groupdetail.deletebutton.errorsave"),
+								l.getString("error"), SWT.ICON_ERROR | SWT.OK);
 
-                    } else if (e.getMessage().equalsIgnoreCase("2")) {
-                        //fehler beim db aufbau
-                        statusLine
-                                .setStatus(
-                                        3,
-                                        l
-                                                .getString("Payment.groupdetail.deletebutton.errordb"));
-                        showMsg(
-                                l
-                                        .getString("Payment.groupdetail.deletebutton.errordb"),
-                                l.getString("error"), SWT.ICON_ERROR | SWT.OK);
+					} else if (e.getMessage().equalsIgnoreCase("2")) {
+						//fehler beim db aufbau
+						statusLine
+								.setStatus(
+										3,
+										l
+												.getString("Payment.groupdetail.deletebutton.errordb"));
+						showMsg(
+								l
+										.getString("Payment.groupdetail.deletebutton.errordb"),
+								l.getString("error"), SWT.ICON_ERROR | SWT.OK);
 
-                    } else {
-                        //@todo
-                        e.printStackTrace();
-                    }
+					} else {
+						//@todo
+						e.printStackTrace();
+					}
 
-                }
+				}
 
-            }
+			}
 
-        });
+		});
 
-        //leerer nicht sichtbarer Button
-        buttonPaymentFill = new Button(compositeButtons, SWT.PUSH | SWT.CENTER);
-        GridData buttonPaymentFillLData = new GridData();
-        buttonPaymentFill.setVisible(false);
-        buttonPaymentFill.setEnabled(false);
-        buttonPaymentFillLData.widthHint = 30;
-        buttonPaymentFillLData.heightHint = 23;
-        buttonPaymentFill.setLayoutData(buttonPaymentFillLData);
+		//leerer nicht sichtbarer Button
+		buttonPaymentFill = new Button(compositeButtons, SWT.PUSH | SWT.CENTER);
+		GridData buttonPaymentFillLData = new GridData();
+		buttonPaymentFill.setVisible(false);
+		buttonPaymentFill.setEnabled(false);
+		buttonPaymentFillLData.widthHint = 30;
+		buttonPaymentFillLData.heightHint = 23;
+		buttonPaymentFill.setLayoutData(buttonPaymentFillLData);
 
-        buttonPaymentSave = new Button(compositeButtons, SWT.PUSH | SWT.CENTER);
-        buttonPaymentSave.setText(l.getString("button.save"));
-        buttonPaymentSave.setEnabled(false);
-        buttonPaymentSave.addSelectionListener(new SelectionAdapter() {
-            public void widgetSelected(SelectionEvent evt) {
+		buttonPaymentSave = new Button(compositeButtons, SWT.PUSH | SWT.CENTER);
+		buttonPaymentSave.setText(l.getString("button.save"));
+		buttonPaymentSave.setEnabled(false);
+		buttonPaymentSave.addSelectionListener(new SelectionAdapter() {
+			public void widgetSelected(SelectionEvent evt) {
 
-                //testen ob duration leer ist
-                if (textPaymentName.getText().trim().equalsIgnoreCase("")
-                        || textduration1.getText().trim().equalsIgnoreCase("")
-                        || textduration2.getText().trim().equalsIgnoreCase("")
-                        || textduration3.getText().trim().equalsIgnoreCase("")
-                        || textstartdate.getText().trim().equalsIgnoreCase("")) {
+				//testen ob duration leer ist
+				if (textPaymentName.getText().trim().equalsIgnoreCase("")
+						|| textduration1.getText().trim().equalsIgnoreCase("")
+						|| textduration2.getText().trim().equalsIgnoreCase("")
+						|| textduration3.getText().trim().equalsIgnoreCase("")
+						|| textstartdate.getText().trim().equalsIgnoreCase("")) {
 
-                    showMsg(
-                            l
-                                    .getString("Payment.groupdetail.savebutton.warn.noname.msg"),
-                            l
-                                    .getString("Payment.groupdetail.savebutton.warn.noname.title"),
-                            SWT.ICON_WARNING | SWT.YES);
+					showMsg(
+							l
+									.getString("Payment.groupdetail.savebutton.warn.noname.msg"),
+							l
+									.getString("Payment.groupdetail.savebutton.warn.noname.title"),
+							SWT.ICON_WARNING | SWT.YES);
 
-                    return;
-                }
+					return;
+				}
 
-                buttonPaymentEdit.setEnabled(false);
-                buttonPaymentDelete.setEnabled(false);
+				buttonPaymentEdit.setEnabled(false);
+				buttonPaymentDelete.setEnabled(false);
 
-                //testen welcher mode
+				//testen welcher mode
 
-                if (mode_Payment == ManagementGui.MODE_ADD) {
+				if (mode_Payment == ManagementGui.MODE_ADD) {
 
-                    /**
-                     * @todo eine Exception bekommen wieder leider NOCH nicht
-                     *       mit d.h. es muss noch ein r?ckgabewert kommen oder
-                     *       eine Exception ?bermitteln werden (aus der DB
-                     *       Klasse)
-                     */
+					/**
+					 * @todo eine Exception bekommen wieder leider NOCH nicht
+					 *       mit d.h. es muss noch ein r?ckgabewert kommen oder
+					 *       eine Exception ?bermitteln werden (aus der DB
+					 *       Klasse)
+					 */
 
-                    try {
+					try {
 
-                        Calendar tmp_cal = Calendar.getInstance();
-                        tmp_cal
-                                .setTime(DateFormat.getDateInstance(
-                                        DateFormat.LONG).parse(
-                                        textstartdate.getText()));
-                        //neues Objekt erzeugen
-                        Payment tmp = new Payment(textPaymentName.getText(),
-                                Float.parseFloat(textduration1.getText()),
-                                Float.parseFloat(textduration2.getText()),
-                                Float.parseFloat(textduration3.getText()),
-                                tmp_cal);
+						Calendar tmp_cal = Calendar.getInstance();
+						tmp_cal
+								.setTime(DateFormat.getDateInstance(
+										DateFormat.LONG).parse(
+										textstartdate.getText()));
+						//neues Objekt erzeugen
+						Payment tmp = new Payment(textPaymentName.getText(),
+								Float.parseFloat(textduration1.getText()),
+								Float.parseFloat(textduration2.getText()),
+								Float.parseFloat(textduration3.getText()),
+								tmp_cal);
 
-                        //object speichern
-                        // Fehlerbehandlung
-                        Object o = Database.saveObject(tmp);
+						//object speichern
+						// Fehlerbehandlung
+						Object o = Database.saveObject(tmp);
 
-                        // in ?bersichtstabelle einf?gen
-                        insertIntoPaymentTable((Payment) o);
+						// in ?bersichtstabelle einf?gen
+						insertIntoPaymentTable((Payment) o);
 
-                        //Statusline Nachricht sezten
-                        statusLine
-                                .setStatus(
-                                        1,
-                                        l
-                                                .getString("Payment.groupdetail.savebutton.newok"));
+						//Statusline Nachricht sezten
+						statusLine
+								.setStatus(
+										1,
+										l
+												.getString("Payment.groupdetail.savebutton.newok"));
 
-                    } catch (DataBaseException e) {
-                        if (e.getMessage().equalsIgnoreCase("1")) {
-                            //Fehler beim Speichern des Objectes
+					} catch (DataBaseException e) {
+						if (e.getMessage().equalsIgnoreCase("1")) {
+							//Fehler beim Speichern des Objectes
 
-                            statusLine
-                                    .setStatus(
-                                            3,
-                                            l
-                                                    .getString("Payment.groupdetail.savebutton.errorsave"));
-                            showMsg(
-                                    l
-                                            .getString("Payment.groupdetail.savebutton.errorsave"),
-                                    "Fehler", SWT.ICON_ERROR | SWT.OK);
+							statusLine
+									.setStatus(
+											3,
+											l
+													.getString("Payment.groupdetail.savebutton.errorsave"));
+							showMsg(
+									l
+											.getString("Payment.groupdetail.savebutton.errorsave"),
+									"Fehler", SWT.ICON_ERROR | SWT.OK);
 
-                        } else if (e.getMessage().equalsIgnoreCase("2")) {
-                            //fehler beim db aufbau
-                            statusLine
-                                    .setStatus(
-                                            3,
-                                            l
-                                                    .getString("Payment.groupdetail.savebutton.errordb"));
-                            showMsg(
-                                    l
-                                            .getString("Payment.groupdetail.savebutton.errordb"),
-                                    "Fehler", SWT.ICON_ERROR | SWT.OK);
+						} else if (e.getMessage().equalsIgnoreCase("2")) {
+							//fehler beim db aufbau
+							statusLine
+									.setStatus(
+											3,
+											l
+													.getString("Payment.groupdetail.savebutton.errordb"));
+							showMsg(
+									l
+											.getString("Payment.groupdetail.savebutton.errordb"),
+									"Fehler", SWT.ICON_ERROR | SWT.OK);
 
-                        } else {
-                            //@todo
-                            e.printStackTrace();
-                        }
+						} else {
+							//@todo
+							e.printStackTrace();
+						}
 
-                    } catch (ParseException pex) {
-                        statusLine
-                                .setStatus(
-                                        3,
-                                        l
-                                                .getString("Payment.groupdetail.savebutton.errorsave"));
-                        showMsg(
-                                l
-                                        .getString("Payment.groupdetail.savebutton.errorsave"),
-                                "Fehler", SWT.ICON_ERROR | SWT.OK);
+					} catch (ParseException pex) {
+						statusLine
+								.setStatus(
+										3,
+										l
+												.getString("Payment.groupdetail.savebutton.errorsave"));
+						showMsg(
+								l
+										.getString("Payment.groupdetail.savebutton.errorsave"),
+								"Fehler", SWT.ICON_ERROR | SWT.OK);
 
-                    }
+					}
 
-                    //                  alle Buttons auf aktiv setzen
-                    setPaymentGroupButtonSaveCancel();
-                    buttonPaymentDelete.setEnabled(false);
-                    buttonPaymentEdit.setEnabled(false);
+					//                  alle Buttons auf aktiv setzen
+					setPaymentGroupButtonSaveCancel();
+					buttonPaymentDelete.setEnabled(false);
+					buttonPaymentEdit.setEnabled(false);
 
-                } else if (mode_Payment == ManagementGui.MODE_EDIT) {
-                    try {
+				} else if (mode_Payment == ManagementGui.MODE_EDIT) {
+					try {
 
-                        Calendar tmp_cal = Calendar.getInstance();
-                        tmp_cal
-                                .setTime(DateFormat.getDateInstance(
-                                        DateFormat.LONG).parse(
-                                        textstartdate.getText()));
+						Calendar tmp_cal = Calendar.getInstance();
+						tmp_cal
+								.setTime(DateFormat.getDateInstance(
+										DateFormat.LONG).parse(
+										textstartdate.getText()));
 
-                        Payment tmp = new Payment(textPaymentName.getText(),
-                                Float.parseFloat(textduration1.getText()),
-                                Float.parseFloat(textduration2.getText()),
-                                Float.parseFloat(textduration3.getText()),
-                                tmp_cal);
-                        tmp.setPaymentId(new Integer(Integer
-                                .parseInt(textPaymentID.getText())));
+						Payment tmp = new Payment(textPaymentName.getText(),
+								Float.parseFloat(textduration1.getText()),
+								Float.parseFloat(textduration2.getText()),
+								Float.parseFloat(textduration3.getText()),
+								tmp_cal);
+						tmp.setPaymentId(new Integer(Integer
+								.parseInt(textPaymentID.getText())));
 
-                        //object speichern
-                        // Fehlerbehandlung
-                        Database.updateObject(tmp);
-                        //?bersichtstabelle aktualisieren
-                        refreshPaymentTable(textPaymentSearch.getText());
+						//object speichern
+						// Fehlerbehandlung
+						Database.updateObject(tmp);
+						//?bersichtstabelle aktualisieren
+						refreshPaymentTable(textPaymentSearch.getText());
 
-                        //Statusline Nachricht sezten
-                        statusLine
-                                .setStatus(
-                                        1,
-                                        l
-                                                .getString("Payment.groupdetail.savebutton.editok"));
+						//Statusline Nachricht sezten
+						statusLine
+								.setStatus(
+										1,
+										l
+												.getString("Payment.groupdetail.savebutton.editok"));
 
-                    } catch (DataBaseException e) {
-                        if (e.getMessage().equalsIgnoreCase("1")) {
-                            //Fehler beim Speichern des Objectes
+					} catch (DataBaseException e) {
+						if (e.getMessage().equalsIgnoreCase("1")) {
+							//Fehler beim Speichern des Objectes
 
-                            statusLine
-                                    .setStatus(
-                                            3,
-                                            l
-                                                    .getString("Payment.groupdetail.savebutton.errorsave"));
-                            showMsg(
-                                    l
-                                            .getString("Payment.groupdetail.savebutton.errorsave"),
-                                    "Fehler", SWT.ICON_ERROR | SWT.OK);
+							statusLine
+									.setStatus(
+											3,
+											l
+													.getString("Payment.groupdetail.savebutton.errorsave"));
+							showMsg(
+									l
+											.getString("Payment.groupdetail.savebutton.errorsave"),
+									"Fehler", SWT.ICON_ERROR | SWT.OK);
 
-                        } else if (e.getMessage().equalsIgnoreCase("2")) {
-                            //fehler beim db aufbau
-                            statusLine
-                                    .setStatus(
-                                            3,
-                                            l
-                                                    .getString("Payment.groupdetail.savebutton.errordb"));
-                            showMsg(
-                                    l
-                                            .getString("Payment.groupdetail.savebutton.errordb"),
-                                    "Fehler", SWT.ICON_ERROR | SWT.OK);
+						} else if (e.getMessage().equalsIgnoreCase("2")) {
+							//fehler beim db aufbau
+							statusLine
+									.setStatus(
+											3,
+											l
+													.getString("Payment.groupdetail.savebutton.errordb"));
+							showMsg(
+									l
+											.getString("Payment.groupdetail.savebutton.errordb"),
+									"Fehler", SWT.ICON_ERROR | SWT.OK);
 
-                        } else {
-                            //@todo
-                            e.printStackTrace();
-                        }
+						} else {
+							//@todo
+							e.printStackTrace();
+						}
 
-                    } catch (ParseException pex) {
-                        statusLine
-                                .setStatus(
-                                        3,
-                                        l
-                                                .getString("Payment.groupdetail.savebutton.errorsave"));
-                        showMsg(
-                                l
-                                        .getString("Payment.groupdetail.savebutton.errorsave"),
-                                "Fehler", SWT.ICON_ERROR | SWT.OK);
+					} catch (ParseException pex) {
+						statusLine
+								.setStatus(
+										3,
+										l
+												.getString("Payment.groupdetail.savebutton.errorsave"));
+						showMsg(
+								l
+										.getString("Payment.groupdetail.savebutton.errorsave"),
+								"Fehler", SWT.ICON_ERROR | SWT.OK);
 
-                    }
+					}
 
-                    //alle Buttons auf aktiv setzen
-                    setPaymentGroupButtonSaveCancel();
-                    buttonPaymentDelete.setEnabled(false);
-                    buttonPaymentEdit.setEnabled(false);
-                }
+					//alle Buttons auf aktiv setzen
+					setPaymentGroupButtonSaveCancel();
+					buttonPaymentDelete.setEnabled(false);
+					buttonPaymentEdit.setEnabled(false);
+				}
 
-                /**
-                 * @todo Exception werfen, da nur die zwei Modes sein d?rfen
-                 */
+				/**
+				 * @todo Exception werfen, da nur die zwei Modes sein d?rfen
+				 */
 
-            }
-        });
+			}
+		});
 
-        buttonPaymentCancel = new Button(compositeButtons, SWT.PUSH
-                | SWT.CENTER);
-        buttonPaymentCancel.setText(l.getString("button.cancel"));
-        buttonPaymentCancel.setEnabled(false);
-        buttonPaymentCancel.addSelectionListener(new SelectionAdapter() {
-            public void widgetSelected(SelectionEvent evt) {
-                System.out.println("buttonPaymentCancel.widgetSelected, event="
-                        + evt);
-                setPaymentGroupButtonSaveCancel();
-            }
-        });
+		buttonPaymentCancel = new Button(compositeButtons, SWT.PUSH
+				| SWT.CENTER);
+		buttonPaymentCancel.setText(l.getString("button.cancel"));
+		buttonPaymentCancel.setEnabled(false);
+		buttonPaymentCancel.addSelectionListener(new SelectionAdapter() {
+			public void widgetSelected(SelectionEvent evt) {
+				System.out.println("buttonPaymentCancel.widgetSelected, event="
+						+ evt);
+				setPaymentGroupButtonSaveCancel();
+			}
+		});
 
-    }
+	}
 
-    /**
-     *  
-     */
-    protected void setPaymentGroupButtonSaveCancel() {
-        buttonPaymentSave.setEnabled(false);
-        buttonPaymentCancel.setEnabled(false);
-        buttonPaymentEdit.setEnabled(true);
-        buttonPaymentNew.setEnabled(true);
-        buttonPaymentDelete.setEnabled(true);
-        textPaymentName.setEditable(false);
-        textduration1.setEditable(false);
-        textduration2.setEditable(false);
-        textduration3.setEditable(false);
-        //textstartdate.setEditable(false);
-        changeStartDateButton.setEnabled(false);
-        textPaymentSearch.setEditable(true);
+	/**
+	 *  
+	 */
+	protected void setPaymentGroupButtonSaveCancel() {
+		buttonPaymentSave.setEnabled(false);
+		buttonPaymentCancel.setEnabled(false);
+		buttonPaymentEdit.setEnabled(true);
+		buttonPaymentNew.setEnabled(true);
+		buttonPaymentDelete.setEnabled(true);
+		textPaymentName.setEditable(false);
+		textduration1.setEditable(false);
+		textduration2.setEditable(false);
+		textduration3.setEditable(false);
+		//textstartdate.setEditable(false);
+		changeStartDateButton.setEnabled(false);
+		textPaymentSearch.setEditable(true);
 
-        // PaymentTabelle aktivieren
-        tablePayment.setEnabled(true);
+		// PaymentTabelle aktivieren
+		tablePayment.setEnabled(true);
 
-        //PaymentSearch aktivieren
-        textPaymentSearch.setEnabled(true);
+		//PaymentSearch aktivieren
+		textPaymentSearch.setEnabled(true);
 
-    }
+	}
 
-    /**
-     * @param Payment
-     * @throws DataBaseException
-     */
-    protected void insertIntoPaymentTable(Payment Payment)
-            throws DataBaseException {
-        TableItem item = new TableItem(tablePayment, SWT.NONE);
-        item.setText(new String[] { Payment.getPaymentId() + "",
-                Payment.getName(), Double.toString(Payment.getDuration1()),
-                Double.toString(Payment.getDuration2()),
-                Double.toString(Payment.getDuration3()),
-                DateFormat.getDateInstance(DateFormat.SHORT).format(Payment.getStartdate().getTime()) });
+	/**
+	 * @param Payment
+	 * @throws DataBaseException
+	 */
+	protected void insertIntoPaymentTable(Payment Payment)
+			throws DataBaseException {
+		TableItem item = new TableItem(tablePayment, SWT.NONE);
+		item.setText(new String[] {
+				Payment.getPaymentId() + "",
+				Payment.getName(),
+				Double.toString(Payment.getDuration1()),
+				Double.toString(Payment.getDuration2()),
+				Double.toString(Payment.getDuration3()),
+				DateFormat.getDateInstance(DateFormat.SHORT).format(
+						Payment.getStartdate().getTime()) });
 
-        tablePayment.deselectAll();
-        refreshPaymentDetail("");
+		tablePayment.deselectAll();
+		refreshPaymentDetail("");
 
-        try {
-            refreshPaymentTable(textPaymentSearch.getText());
-        } catch (DataBaseException e) {
-            // TODO Auto-generated catch block
-            e.printStackTrace();
-        }
-    }
+		try {
+			refreshPaymentTable(textPaymentSearch.getText());
+		} catch (DataBaseException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+	}
 
-    /**
-     * @param text
-     * @throws DataBaseException
-     */
-    protected void refreshPaymentTable(final String filter)
-            throws DataBaseException {
-        if (tablePayment == null) {
-            System.out
-                    .println("Konnte Paymenttable nicht refreshen, da diese null ist!");
-            return;
-        }
-        System.out.println("Versuche nun PaymentListe zu refreshen. Filter: "
-                + filter);
-        tablePayment.removeAll();
-        TableItem item;
-        java.util.List Paymentlist = Database.getPayment(filter);
-        list = new Hashtable();
-        for (int i = 0; i < Paymentlist.size(); i++) {
-            Payment paym = (Payment) Paymentlist.get(i);
-            String name = paym.getName();
+	/**
+	 * @param text
+	 * @throws DataBaseException
+	 */
+	protected void refreshPaymentTable(final String filter)
+			throws DataBaseException {
+		if (tablePayment == null) {
+			System.out
+					.println("Konnte Paymenttable nicht refreshen, da diese null ist!");
+			return;
+		}
+		System.out.println("Versuche nun PaymentListe zu refreshen. Filter: "
+				+ filter);
+		tablePayment.removeAll();
+		TableItem item;
+		java.util.List Paymentlist = Database.getPayment(filter);
+		list = new Hashtable();
+		for (int i = 0; i < Paymentlist.size(); i++) {
+			Payment paym = (Payment) Paymentlist.get(i);
+			String name = paym.getName();
 
-            if (list.containsKey(name)) {
-                Vector vec = (Vector) list.get(name);
-                vec.add(paym.getStartdate());
-            } else {
-                Vector vec = new Vector();
-                vec.add(paym.getStartdate());
+			if (list.containsKey(name)) {
+				Vector vec = (Vector) list.get(name);
+				vec.add(paym.getStartdate());
+			} else {
+				Vector vec = new Vector();
+				vec.add(paym.getStartdate());
 
-                list.put(paym.getName(), vec);
-            }
-        }
-        Enumeration keys = list.keys();
-        while (keys.hasMoreElements()) {
-            String key = (String) keys.nextElement();
-            Vector vec = (Vector) list.get(key);
-            Vector aktDates = new Vector();
-            Calendar temp = null;
-            for (int i = 0; i < vec.size(); i++) {
-                Calendar today = Calendar.getInstance();
-                if (temp == null) {
-                    temp = (Calendar) vec.get(i);
-                    if (temp.after(today)) {
-                        aktDates.add(temp);
-                        temp = null;
-                        continue;
-                    } else {
-                        aktDates.add(0, temp);
-                        continue;
-                    }
-                }
-                Calendar date = (Calendar) vec.get(i);
+				list.put(paym.getName(), vec);
+			}
+		}
+		Enumeration keys = list.keys();
+		while (keys.hasMoreElements()) {
+			String key = (String) keys.nextElement();
+			Vector vec = (Vector) list.get(key);
+			Vector aktDates = new Vector();
+			Calendar temp = null;
+			for (int i = 0; i < vec.size(); i++) {
+				Calendar today = Calendar.getInstance();
+				if (temp == null) {
+					temp = (Calendar) vec.get(i);
+					if (temp.after(today)) {
+						aktDates.add(temp);
+						temp = null;
+						continue;
+					} else {
+						aktDates.add(0, temp);
+						continue;
+					}
+				}
+				Calendar date = (Calendar) vec.get(i);
 
-                if (!date.after(today)) {
-                    if (date.after(temp)) {
-                        temp = date;
-                        aktDates.set(0, date);
-                    }
+				if (!date.after(today)) {
+					if (date.after(temp)) {
+						temp = date;
+						aktDates.set(0, date);
+					}
 
-                } else {
-                    aktDates.add(date);
-                }
+				} else {
+					aktDates.add(date);
+				}
 
-            }
-            list.remove(key);
-            list.put(key, aktDates);
-        }
+			}
+			list.remove(key);
+			list.put(key, aktDates);
+		}
 
-        for (int i = 0; i < Paymentlist.size(); i++) {
+		for (int i = 0; i < Paymentlist.size(); i++) {
 
-            Payment o = (Payment) Paymentlist.get(i);
-            item = new TableItem(tablePayment, SWT.NONE);
-            item.setText(new String[] { o.getPaymentId() + "", o.getName(),
-                    Double.toString(o.getDuration1()),
-                    Double.toString(o.getDuration2()),
-                    Double.toString(o.getDuration3()),
-                    DateFormat.getDateInstance(DateFormat.SHORT).format(
-                            o.getStartdate().getTime()) });
+			Payment o = (Payment) Paymentlist.get(i);
+			item = new TableItem(tablePayment, SWT.NONE);
+			item.setText(new String[] {
+					o.getPaymentId() + "",
+					o.getName(),
+					Double.toString(o.getDuration1()),
+					Double.toString(o.getDuration2()),
+					Double.toString(o.getDuration3()),
+					DateFormat.getDateInstance(DateFormat.SHORT).format(
+							o.getStartdate().getTime()) });
 
-        }
+		}
 
-    }
+	}
 
-    /**
-     *  
-     */
-    private void initPaymentGroupOverview() {
-        if (logger.isDebugEnabled()) {
-            logger.debug("initPaymentGroupOverview() - start");
-        }
+	/**
+	 *  
+	 */
+	private void initPaymentGroupOverview() {
+		if (logger.isDebugEnabled()) {
+			logger.debug("initPaymentGroupOverview() - start");
+		}
 
-        groupPaymentOverview = new Group(sashFormPayment, SWT.NONE);
-        GridLayout group5Layout = new GridLayout();
-        group5Layout.numColumns = 8;
-        groupPaymentOverview
-                .setText(l.getString("Payment.groupoverview.label"));
-        FormData group5LData = new FormData();
-        groupPaymentOverview.setLayout(group5Layout);
-        group5LData.left = new FormAttachment(0, 100, 0);
-        group5LData.top = new FormAttachment(0, 100, 0);
-        groupPaymentOverview.setLayoutData(group5LData);
+		groupPaymentOverview = new Group(sashFormPayment, SWT.NONE);
+		GridLayout group5Layout = new GridLayout();
+		group5Layout.numColumns = 8;
+		groupPaymentOverview
+				.setText(l.getString("Payment.groupoverview.label"));
+		FormData group5LData = new FormData();
+		groupPaymentOverview.setLayout(group5Layout);
+		group5LData.left = new FormAttachment(0, 100, 0);
+		group5LData.top = new FormAttachment(0, 100, 0);
+		groupPaymentOverview.setLayoutData(group5LData);
 
-        //Tabelle anzeigen
-        initTablePayment();
-        //Suche darunter anzeigen
-        initPaymentSearch();
+		//Tabelle anzeigen
+		initTablePayment();
+		//Suche darunter anzeigen
+		initPaymentSearch();
 
-        if (logger.isDebugEnabled()) {
-            logger.debug("initPaymentGroupOverview() - end");
-        }
+		if (logger.isDebugEnabled()) {
+			logger.debug("initPaymentGroupOverview() - end");
+		}
 
-    }
+	}
 
-    /**
-     *  
-     */
-    private void initPaymentSearch() {
-        if (logger.isDebugEnabled()) {
-            logger.debug("initPaymentSearch() - start");
-        }
+	/**
+	 *  
+	 */
+	private void initPaymentSearch() {
+		if (logger.isDebugEnabled()) {
+			logger.debug("initPaymentSearch() - start");
+		}
 
-        //label f?r die Suche
-        labelPaymentSearch = new Label(groupPaymentOverview, SWT.NONE);
-        labelPaymentSearch.setText(l
-                .getString("Payment.groupoverview.searchlabel")
-                + ":");
-        GridData label2LData = new GridData();
-        label2LData.horizontalSpan = 3;
-        labelPaymentSearch.setLayoutData(label2LData);
+		//label f?r die Suche
+		labelPaymentSearch = new Label(groupPaymentOverview, SWT.NONE);
+		labelPaymentSearch.setText(l
+				.getString("Payment.groupoverview.searchlabel")
+				+ ":");
+		GridData label2LData = new GridData();
+		label2LData.horizontalSpan = 3;
+		labelPaymentSearch.setLayoutData(label2LData);
 
-        //das Suchfeld
-        textPaymentSearch = new Text(groupPaymentOverview, SWT.BORDER);
-        GridData text2LData = new GridData();
-        textPaymentSearch.addFocusListener(new FocusAdapter() {
-            public void focusLost(FocusEvent evt) {
-                if (logger.isDebugEnabled()) {
-                    logger.debug("focusLost(FocusEvent evt = " + evt + " "
-                            + textPaymentSearch.getText() + ") - start");
-                }
+		//das Suchfeld
+		textPaymentSearch = new Text(groupPaymentOverview, SWT.BORDER);
+		GridData text2LData = new GridData();
+		textPaymentSearch.addFocusListener(new FocusAdapter() {
+			public void focusLost(FocusEvent evt) {
+				if (logger.isDebugEnabled()) {
+					logger.debug("focusLost(FocusEvent evt = " + evt + " "
+							+ textPaymentSearch.getText() + ") - start");
+				}
 
-                try {
-                    refreshPaymentTable(textPaymentSearch.getText());
-                } catch (DataBaseException e) {
-                    // TODO Auto-generated catch block
-                    e.printStackTrace();
-                }
+				try {
+					refreshPaymentTable(textPaymentSearch.getText());
+				} catch (DataBaseException e) {
+					// TODO Auto-generated catch block
+					e.printStackTrace();
+				}
 
-                if (logger.isDebugEnabled()) {
-                    logger.debug("focusLost(FocusEvent) - end");
-                }
-            }
-        });
+				if (logger.isDebugEnabled()) {
+					logger.debug("focusLost(FocusEvent) - end");
+				}
+			}
+		});
 
-        textPaymentSearch.addListener(SWT.DefaultSelection, new Listener() {
-            public void handleEvent(Event e) {
-                if (logger.isDebugEnabled()) {
-                    logger.debug("handleEvent(Event e = " + e + " "
-                            + textPaymentSearch.getText() + ") - start");
-                }
+		textPaymentSearch.addListener(SWT.DefaultSelection, new Listener() {
+			public void handleEvent(Event e) {
+				if (logger.isDebugEnabled()) {
+					logger.debug("handleEvent(Event e = " + e + " "
+							+ textPaymentSearch.getText() + ") - start");
+				}
 
-                try {
-                    refreshPaymentTable(textPaymentSearch.getText());
-                } catch (DataBaseException e1) {
-                    // TODO Auto-generated catch block
-                    e1.printStackTrace();
-                }
+				try {
+					refreshPaymentTable(textPaymentSearch.getText());
+				} catch (DataBaseException e1) {
+					// TODO Auto-generated catch block
+					e1.printStackTrace();
+				}
 
-                if (logger.isDebugEnabled()) {
-                    logger.debug("handleEvent(Event) - end");
-                }
-            }
-        });
+				if (logger.isDebugEnabled()) {
+					logger.debug("handleEvent(Event) - end");
+				}
+			}
+		});
 
-        text2LData.horizontalAlignment = GridData.FILL;
-        text2LData.horizontalSpan = 5;
-        text2LData.grabExcessHorizontalSpace = true;
-        textPaymentSearch.setLayoutData(text2LData);
+		text2LData.horizontalAlignment = GridData.FILL;
+		text2LData.horizontalSpan = 5;
+		text2LData.grabExcessHorizontalSpace = true;
+		textPaymentSearch.setLayoutData(text2LData);
 
-        if (logger.isDebugEnabled()) {
-            logger.debug("initPaymentSearch() - end");
-        }
+		if (logger.isDebugEnabled()) {
+			logger.debug("initPaymentSearch() - end");
+		}
 
-    }
+	}
 
-    /**
-     *  
-     */
-    private void initTablePayment() {
-        if (logger.isDebugEnabled()) {
-            logger.debug("initTablePayment() - start");
-        }
+	/**
+	 *  
+	 */
+	private void initTablePayment() {
+		if (logger.isDebugEnabled()) {
+			logger.debug("initTablePayment() - start");
+		}
 
-        tablePayment = new Table(groupPaymentOverview, SWT.SINGLE
-                | SWT.FULL_SELECTION | SWT.V_SCROLL | SWT.BORDER);
-        tablePayment.setHeaderVisible(true);
-        tablePayment.setLinesVisible(true);
-        GridData table2LData = new GridData();
-        tablePayment.addFocusListener(new FocusAdapter() {
-            public void focusLost(FocusEvent evt) {
-                System.out.println("tablePayment.focusLost, event=" + evt);
-            }
+		tablePayment = new Table(groupPaymentOverview, SWT.SINGLE
+				| SWT.FULL_SELECTION | SWT.V_SCROLL | SWT.BORDER);
+		tablePayment.setHeaderVisible(true);
+		tablePayment.setLinesVisible(true);
+		GridData table2LData = new GridData();
+		tablePayment.addFocusListener(new FocusAdapter() {
+			public void focusLost(FocusEvent evt) {
+				System.out.println("tablePayment.focusLost, event=" + evt);
+			}
 
-            public void focusGained(FocusEvent evt) {
-                System.out.println("tablePayment.focusGained, event=" + evt);
-            }
-        });
-        tablePayment.addSelectionListener(new SelectionAdapter() {
-            public void widgetSelected(SelectionEvent evt) {
-                if (logger.isDebugEnabled()) {
-                    logger.debug("widgetSelected(SelectionEvent evt = " + evt
-                            + ") - start");
-                }
+			public void focusGained(FocusEvent evt) {
+				System.out.println("tablePayment.focusGained, event=" + evt);
+			}
+		});
+		tablePayment.addSelectionListener(new SelectionAdapter() {
+			public void widgetSelected(SelectionEvent evt) {
+				if (logger.isDebugEnabled()) {
+					logger.debug("widgetSelected(SelectionEvent evt = " + evt
+							+ ") - start");
+				}
 
-                int index = tablePayment.getSelectionIndex();
+				int index = tablePayment.getSelectionIndex();
 
-                System.out.println("Table select. id: " + index + " TableItem:"
-                        + tablePayment.getItem(index) + " id: "
-                        + tablePayment.getItem(index).getText(0));
+				System.out.println("Table select. id: " + index + " TableItem:"
+						+ tablePayment.getItem(index) + " id: "
+						+ tablePayment.getItem(index).getText(0));
 
-                //es wurde ein Element aus Tabelle ausgewaehlt jetzt muss die
-                //Detailansicht aktualisiert werden
-                refreshPaymentDetail(tablePayment.getItem(index).getText(0));
+				//es wurde ein Element aus Tabelle ausgewaehlt jetzt muss die
+				//Detailansicht aktualisiert werden
+				refreshPaymentDetail(tablePayment.getItem(index).getText(0));
 
-                if (logger.isDebugEnabled()) {
-                    logger.debug("widgetSelected(SelectionEvent) - end");
-                }
-            }
-        });
-        table2LData.verticalAlignment = GridData.FILL;
-        table2LData.horizontalAlignment = GridData.FILL;
-        table2LData.horizontalSpan = 8;
-        table2LData.grabExcessHorizontalSpace = true;
-        table2LData.grabExcessVerticalSpace = true;
-        tablePayment.setLayoutData(table2LData);
+				if (logger.isDebugEnabled()) {
+					logger.debug("widgetSelected(SelectionEvent) - end");
+				}
+			}
+		});
+		table2LData.verticalAlignment = GridData.FILL;
+		table2LData.horizontalAlignment = GridData.FILL;
+		table2LData.horizontalSpan = 8;
+		table2LData.grabExcessHorizontalSpace = true;
+		table2LData.grabExcessVerticalSpace = true;
+		tablePayment.setLayoutData(table2LData);
 
-        //einzelne Spalten hinzuf?gen
-        tableColumn = new TableColumn(tablePayment, SWT.CENTER);
-        tableColumn.setText(l.getString("Payment.groupoverview.columnid"));
-        tableColumn.setWidth(50);
+		//einzelne Spalten hinzuf?gen
+		tableColumn = new TableColumn(tablePayment, SWT.CENTER);
+		tableColumn.setText(l.getString("Payment.groupoverview.columnid"));
+		tableColumn.setWidth(50);
 
-        tableColumn = new TableColumn(tablePayment, SWT.CENTER);
-        tableColumn.setText(l.getString("Payment.groupoverview.columnname"));
-        tableColumn.setWidth(50);
+		tableColumn = new TableColumn(tablePayment, SWT.CENTER);
+		tableColumn.setText(l.getString("Payment.groupoverview.columnname"));
+		tableColumn.setWidth(50);
 
-        tableColumn = new TableColumn(tablePayment, SWT.CENTER);
-        tableColumn.setText(l
-                .getString("Payment.groupoverview.columnduration1"));
-        tableColumn.setWidth(70);
+		tableColumn = new TableColumn(tablePayment, SWT.CENTER);
+		tableColumn.setText(l
+				.getString("Payment.groupoverview.columnduration1"));
+		tableColumn.setWidth(70);
 
-        tableColumn = new TableColumn(tablePayment, SWT.CENTER);
-        tableColumn.setText(l
-                .getString("Payment.groupoverview.columnduration2"));
-        tableColumn.setWidth(70);
+		tableColumn = new TableColumn(tablePayment, SWT.CENTER);
+		tableColumn.setText(l
+				.getString("Payment.groupoverview.columnduration2"));
+		tableColumn.setWidth(70);
 
-        tableColumn = new TableColumn(tablePayment, SWT.CENTER);
-        tableColumn.setText(l
-                .getString("Payment.groupoverview.columnduration3"));
-        tableColumn.setWidth(70);
-        tableColumn = new TableColumn(tablePayment, SWT.CENTER);
-        tableColumn.setText(l
-                .getString("Payment.groupoverview.columnstartdate"));
-        tableColumn.setWidth(70);
+		tableColumn = new TableColumn(tablePayment, SWT.CENTER);
+		tableColumn.setText(l
+				.getString("Payment.groupoverview.columnduration3"));
+		tableColumn.setWidth(70);
+		tableColumn = new TableColumn(tablePayment, SWT.CENTER);
+		tableColumn.setText(l
+				.getString("Payment.groupoverview.columnstartdate"));
+		tableColumn.setWidth(70);
 
-        if (logger.isDebugEnabled()) {
-            logger.debug("initTablePayment() - end");
-        }
+		if (logger.isDebugEnabled()) {
+			logger.debug("initTablePayment() - end");
+		}
 
-    }
+	}
 
-    /**
-     * @param text
-     */
-    protected void refreshPaymentDetail(final String id) {
-        if (id != null && !id.equals("")) {
-            Payment object;
-            try {
-                //since we only can get a String value from the table, we
-                //need to convert this
-                object = Database.getSinglePayment(Integer.parseInt(id));
+	/**
+	 * @param text
+	 */
+	protected void refreshPaymentDetail(final String id) {
+		if (id != null && !id.equals("")) {
+			Payment object;
+			try {
+				//since we only can get a String value from the table, we
+				//need to convert this
+				object = Database.getSinglePayment(Integer.parseInt(id));
 
-                if (object == null) {
+				if (object == null) {
 
-                    /*
-                     * 
-                     * @TODO Statusbar aktualiseren
-                     */
-                    return;
-                }
-            } catch (Exception e) {
-                //id ist keine Zahl
-                return;
-            }
+					/*
+					 * 
+					 * @TODO Statusbar aktualiseren
+					 */
+					return;
+				}
+			} catch (Exception e) {
+				//id ist keine Zahl
+				return;
+			}
 
-            textPaymentID.setText(object.getPaymentId() + "");
-            textPaymentName.setText(object.getName());
-            textduration1.setText(Double.toString(object.getDuration1()));
-            textduration2.setText(Double.toString(object.getDuration2()));
-            textduration3.setText(Double.toString(object.getDuration3()));
-            textstartdate.setText(DateFormat.getDateInstance(DateFormat.LONG)
-                    .format(object.getStartdate().getTime()));
-            //Buttons zum l?schen und editieren aktivieren
+			textPaymentID.setText(object.getPaymentId() + "");
+			textPaymentName.setText(object.getName());
+			textduration1.setText(Double.toString(object.getDuration1()));
+			textduration2.setText(Double.toString(object.getDuration2()));
+			textduration3.setText(Double.toString(object.getDuration3()));
+			textstartdate.setText(DateFormat.getDateInstance(DateFormat.LONG)
+					.format(object.getStartdate().getTime()));
+			//Buttons zum l?schen und editieren aktivieren
 
-            buttonPaymentEdit.setEnabled(false);
-            buttonPaymentDelete.setEnabled(true);
-            Vector vec = (Vector) list.get(object.getName());
+			buttonPaymentEdit.setEnabled(false);
+			buttonPaymentDelete.setEnabled(true);
+			Vector vec = (Vector) list.get(object.getName());
 
-            for (int i = 0; i < vec.size(); i++) {
-                Calendar date = (Calendar) vec.get(i);
+			for (int i = 0; i < vec.size(); i++) {
+				Calendar date = (Calendar) vec.get(i);
 
-                if (DateFormat.getDateInstance(DateFormat.SHORT).format(date.getTime()).equals(
-                        DateFormat.getDateInstance(DateFormat.SHORT).format(object.getStartdate().getTime()))) {
-                    buttonPaymentEdit.setEnabled(true);
+				if (DateFormat.getDateInstance(DateFormat.SHORT).format(
+						date.getTime()).equals(
+						DateFormat.getDateInstance(DateFormat.SHORT).format(
+								object.getStartdate().getTime()))) {
+					buttonPaymentEdit.setEnabled(true);
 
-                }
+				}
 
-            }
-        } else {
-            textPaymentID.setText("");
-            textPaymentName.setText("");
-            textduration1.setText("");
-            textduration2.setText("");
-            textduration3.setText("");
-            textstartdate.setText("");
-            buttonPaymentEdit.setEnabled(false);
-            buttonPaymentDelete.setEnabled(false);
-        }
+			}
+		} else {
+			textPaymentID.setText("");
+			textPaymentName.setText("");
+			textduration1.setText("");
+			textduration2.setText("");
+			textduration3.setText("");
+			textstartdate.setText("");
+			buttonPaymentEdit.setEnabled(false);
+			buttonPaymentDelete.setEnabled(false);
+		}
 
-        //Mode auf view setzen
-        mode_Payment = ManagementGui.MODE_VIEW;
+		//Mode auf view setzen
+		mode_Payment = ManagementGui.MODE_VIEW;
 
-    }
+	}
 
 }
\ No newline at end of file

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CopyOfCompositeMovie.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CopyOfCompositeMovie.java	2004-12-08 18:45:55 UTC (rev 225)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CopyOfCompositeMovie.java	2004-12-08 18:52:28 UTC (rev 226)
@@ -17,28 +17,24 @@
 import org.eclipse.swt.layout.GridData;
 import org.eclipse.swt.layout.GridLayout;
 import org.eclipse.swt.widgets.Button;
+import org.eclipse.swt.widgets.Combo;
 import org.eclipse.swt.widgets.Composite;
 import org.eclipse.swt.widgets.Display;
 import org.eclipse.swt.widgets.Event;
 import org.eclipse.swt.widgets.Group;
 import org.eclipse.swt.widgets.Label;
+import org.eclipse.swt.widgets.List;
 import org.eclipse.swt.widgets.Listener;
 import org.eclipse.swt.widgets.Shell;
 import org.eclipse.swt.widgets.Table;
 import org.eclipse.swt.widgets.TableColumn;
-import org.eclipse.swt.widgets.TableItem;
 import org.eclipse.swt.widgets.Text;
 
 import com.cloudgarden.resource.SWTResourceManager;
 
-import de.hsharz.provirent.objects.Actor;
 import de.hsharz.provirent.objects.Movie;
 import de.hsharz.provirent.persistence.DataBaseException;
 import de.hsharz.provirent.persistence.Database;
-
-
-import org.eclipse.swt.widgets.List;
-import org.eclipse.swt.widgets.Combo;
 /**
 * This code was generated using CloudGarden's Jigloo
 * SWT/Swing GUI Builder, which is free for non-commercial

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java	2004-12-08 18:45:55 UTC (rev 225)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java	2004-12-08 18:52:28 UTC (rev 226)
@@ -33,7 +33,6 @@
 
 package de.hsharz.provirent.management.gui;
 
-
 import java.util.Locale;
 import java.util.PropertyResourceBundle;
 import java.util.ResourceBundle;
@@ -42,6 +41,8 @@
 import org.eclipse.swt.SWT;
 import org.eclipse.swt.custom.CTabFolder;
 import org.eclipse.swt.custom.CTabItem;
+import org.eclipse.swt.events.ControlAdapter;
+import org.eclipse.swt.events.ControlEvent;
 import org.eclipse.swt.events.DisposeEvent;
 import org.eclipse.swt.events.DisposeListener;
 import org.eclipse.swt.events.SelectionAdapter;
@@ -54,8 +55,6 @@
 import org.eclipse.swt.widgets.Menu;
 import org.eclipse.swt.widgets.MenuItem;
 import org.eclipse.swt.widgets.Shell;
-import org.eclipse.swt.widgets.TableColumn;
-import org.eclipse.swt.widgets.Text;
 
 import com.cloudgarden.resource.SWTResourceManager;
 
@@ -63,926 +62,946 @@
 import de.hsharz.provirent.persistence.Database;
 
 /**
-* This code was generated using CloudGarden's Jigloo
-* SWT/Swing GUI Builder, which is free for non-commercial
-* use. If Jigloo is being used commercially (ie, by a corporation,
-* company or business for any purpose whatever) then you
-* should purchase a license for each developer using Jigloo.
-* Please visit www.cloudgarden.com for details.
-* Use of Jigloo implies acceptance of these licensing terms.
-* *************************************
-* A COMMERCIAL LICENSE HAS NOT BEEN PURCHASED
-* for this machine, so Jigloo or this code cannot be used legally
-* for any corporate or commercial purpose.
-* *************************************
-*/
-import org.eclipse.swt.events.ControlAdapter;
-import org.eclipse.swt.events.ControlEvent;
-/**
  * @author Philipp Schneider
  *  
  */
 public class ManagementGui {
-    /**
-     * Logger for this class
-     */
-    private static final Logger logger = Logger.getLogger(ManagementGui.class);
+	/**
+	 * Logger for this class
+	 */
+	private static final Logger logger = Logger.getLogger(ManagementGui.class);
 
-    public final static int MODE_VIEW = 0;
+	public final static int MODE_VIEW = 0;
 
-    public final static int MODE_ADD = 1;
+	public final static int MODE_ADD = 1;
 
-    public final static int MODE_EDIT = 2;
+	public final static int MODE_EDIT = 2;
 
-    private static final int MAIN_WINDOW_WIDTH = 830;
-    private static final int MAIN_WINDOW_HEIGHT = 700;
-    private static final int MAIN_WINDOW_X = 25;
-    private static final int MAIN_WINDOW_Y = 25;
-    private static final int MIN_WINDOW_WIDTH = 830;
-    private static final int MIN_WINDOW_HEIGHT = 700;
-    private static final int MIN_WINDOW_X = 25;
-    private static final int MIN_WINDOW_Y = 25;
+	private static final int MAIN_WINDOW_WIDTH = 830;
 
-    private CTabFolder cTabFolderMain;
+	private static final int MAIN_WINDOW_HEIGHT = 700;
 
-    private CTabItem tabItemFormat;
-    private CTabItem tabItemPayment;
-    private CTabItem tabItemActor;
-    private CTabItem tabItemDirector;
-    private CTabItem tabItemOrder;
-    private CTabItem tabItemLanguage;
-    private CTabItem tabItemCustomer;
-    private CTabItem tabItemGenre;
-    private CTabItem tabItemImage;
-    private CTabItem tabItemMovie;
-    private CTabItem tabItemDvd;
-    private CTabItem tabItemStatus;
-    private CTabItem tabStatusLanguage;
-        
-    private CompositeFormate compositeFormate;
-    private CompositeActors compositeActor;
-    private CompositeDirectors compositeDirector;
-    private CompositeGenre compositeGenre;
-    private CompositeOrder compositeOrder;
-    private CompositeLanguage compositeLanguage;
-    private CompositeImage compositeImage;
-    private CompositeMovie compositeMovie;
-    private CompositeDVD compositeDvd;
-    private CompositePayment compositePayment;
-    private CompositeStatus compositeStatus;
-    private CompositeCustomer compositeCustomer;
+	private static final int MAIN_WINDOW_X = 25;
 
-    private Menu rootMenu;
-    
-    private Menu fileMenu;
-    private MenuItem fileMenuItem;
-    private MenuItem exitMenuItem;
-    private MenuItem closeFileMenuItem;
-    private MenuItem saveFileMenuItem;
-    private MenuItem newFileMenuItem;
-    private MenuItem openFileMenuItem;  
-    
-    private Menu viewMenu;
-    private MenuItem viewMenuItem;
-    private MenuItem viewDirectorMenuItem;
-    private MenuItem viewVideoFormatMenuItem;
-    private MenuItem viewActorMenuItem;
-    private MenuItem viewOrderMenuItem;
-    private MenuItem viewCustomerMenuItem;
-    private MenuItem viewGenreMenuItem;
-    private MenuItem viewLanguageMenuItem;
-    private MenuItem viewStatusMenuItem;
-    private MenuItem viewPaymentMenuItem;
-    private MenuItem viewConditionMenuItem;
-    private MenuItem viewMovieMenuItem;
-    private MenuItem viewDvdMenuItem;
-    private MenuItem viewBillMenuItem;
-    private MenuItem viewImageMenuItem;
-    
-    private Menu helpMenu;
-    private MenuItem aboutMenuItem;
-    private MenuItem contentsMenuItem;
-    private MenuItem helpMenuItem;
+	private static final int MAIN_WINDOW_Y = 25;
 
-    private Shell shell;
+	private static final int MIN_WINDOW_WIDTH = 830;
 
-    private Display display;
+	private static final int MIN_WINDOW_HEIGHT = 700;
 
+	private static final int MIN_WINDOW_X = 25;
 
-    private StatusLineStyledText statusLine;
+	private static final int MIN_WINDOW_Y = 25;
 
-    private Composite compositeStatusLine;
+	private CTabFolder cTabFolderMain;
 
-    private Composite compositeMain;
+	private CTabItem tabItemFormat;
 
-    private Composite compositeRoot;
+	private CTabItem tabItemPayment;
 
-    /**
-     * Bundle for multilanguage
-     */
-    private ResourceBundle l;
-    
-    private Locale locale ;
+	private CTabItem tabItemActor;
 
-    /**
-     * Auto-generated main method to display this
-     * org.eclipse.swt.widgets.Composite inside a new Shell.
-     */
-    public static void main(String[] args) {
-        ManagementGui inst = new ManagementGui();
-        inst.run();
-    }
+	private CTabItem tabItemDirector;
 
+	private CTabItem tabItemOrder;
 
-    public void run() {
-        shell.layout();
-        shell.open();
+	private CTabItem tabItemLanguage;
 
-        while (!shell.isDisposed()) {
-            if (!display.readAndDispatch())
-                display.sleep();
-        }
-    }
+	private CTabItem tabItemCustomer;
 
-    public ManagementGui() {
+	private CTabItem tabItemGenre;
 
-        if (logger.isDebugEnabled()) {
-            logger.debug("ManagementGui() Locale: " + Locale.getDefault());
-        }
-        
-        locale = Locale.getDefault();
-        
-        
-        l = PropertyResourceBundle.getBundle(
-                "de.hsharz.provirent.management.gui.language.main", locale);
+	private CTabItem tabItemImage;
 
-        //@todo hier muss noch was gemacht werden
-        if (l == null) {
-            System.exit(-1586);
-        }
+	private CTabItem tabItemMovie;
 
-        display = Display.getDefault();
+	private CTabItem tabItemDvd;
 
-        shell = new Shell(display);
-        shell.setText(l.getString("mainwindow.title"));
+	private CTabItem tabItemStatus;
 
-        //set the Site
-        shell.setSize(MAIN_WINDOW_WIDTH, MAIN_WINDOW_HEIGHT);
-        shell.setLocation(MAIN_WINDOW_X,MAIN_WINDOW_Y);
-        {
-            //Register as a resource user - SWTResourceManager will
-            //handle the obtaining and disposing of resources
-            SWTResourceManager.registerResourceUser(shell);
-        }
-        //set the layout for the shell
-        FillLayout thisLayout = new FillLayout(SWT.HORIZONTAL);
-        shell.addControlListener(new ControlAdapter() {
-            public void controlResized(ControlEvent evt) {
-                //TODO add your code for shell.controlResized
-                //min Size of the Main Window
-                if (shell.getBounds().height < MIN_WINDOW_HEIGHT || shell.getBounds().width < MIN_WINDOW_WIDTH) {
-                    shell.setBounds(MIN_WINDOW_X,MIN_WINDOW_Y,MIN_WINDOW_WIDTH,MIN_WINDOW_HEIGHT);
-                    statusLine.setStatus(StatusLineStyledText.STATUS_WARN,l.getString("status.resizewarn")); 
-                }                         
-            }
-        });
-        shell.setLayout(thisLayout);
-        
-       
+	private CTabItem tabStatusLanguage;
 
-        //init the db, so it saves time later
-        //does that in a new Thread
-        initDB();
-        
-        //init the rest
-        initGUI();
-        
-        //shell.layout();
+	private CompositeFormate compositeFormate;
 
-    }
+	private CompositeActors compositeActor;
 
-    private void initGUI() {
-        try {
+	private CompositeDirectors compositeDirector;
 
-            //set't the menu
-            rootMenu = new Menu(shell, SWT.BAR);
-            shell.setMenuBar(rootMenu);
+	private CompositeGenre compositeGenre;
 
-            //init the other menu's
-            initFileMenu();
-            initViewMenu();
-            initHelpMenu();
+	private CompositeOrder compositeOrder;
 
-            //the root composite
-            //this init's the maincomposite
-            //set up the root composite incl. layout
-            compositeRoot = new Composite(shell, SWT.NONE);
-            GridLayout composite1Layout = new GridLayout();
-            composite1Layout.marginWidth = 0;
-            composite1Layout.marginHeight = 0;
-            composite1Layout.horizontalSpacing = 0;
-            composite1Layout.verticalSpacing = 0;
-            GridData composite1LData = new GridData();
-            compositeRoot.setLayout(composite1Layout);
+	private CompositeLanguage compositeLanguage;
 
-            composite1LData.verticalAlignment = GridData.FILL;
-            composite1LData.horizontalAlignment = GridData.FILL;
-            composite1LData.grabExcessHorizontalSpace = true;
-            composite1LData.grabExcessVerticalSpace = true;
-            compositeRoot.setLayoutData(composite1LData);
+	private CompositeImage compositeImage;
 
-            //init the MainComposite
+	private CompositeMovie compositeMovie;
 
-           compositeMain = new Composite(compositeRoot, SWT.EMBEDDED);
-            GridLayout composite3Layout = new GridLayout();
-            composite3Layout.makeColumnsEqualWidth = true;
-            composite3Layout.horizontalSpacing = 0;
-            composite3Layout.marginHeight = 0;
-            composite3Layout.marginWidth = 0;
-            composite3Layout.verticalSpacing = 0;
-            GridData composite3LData = new GridData();
-            compositeMain.setLayout(composite3Layout);
-            compositeMain.setForeground(SWTResourceManager.getColor(0,
-                    255, 0));
-            composite3LData.verticalAlignment = GridData.FILL;
-            composite3LData.horizontalAlignment = GridData.FILL;
-            composite3LData.grabExcessHorizontalSpace = true;
-            composite3LData.grabExcessVerticalSpace = true;
-            compositeMain.setLayoutData(composite3LData);
-        
-            
-            //init Status Composite
-            compositeStatusLine = new Composite(compositeRoot, SWT.EMBEDDED);
-            GridLayout composite2Layout = new GridLayout();
-            composite2Layout.marginWidth = 0;
-            composite2Layout.marginHeight = 0;
-            composite2Layout.makeColumnsEqualWidth = true;
-            composite2Layout.horizontalSpacing = 0;
-            composite2Layout.verticalSpacing = 0;
-            GridData composite2LData = new GridData();
-            compositeStatusLine.setLayout(composite2Layout);
-            composite2LData.horizontalAlignment = GridData.FILL;
-            composite2LData.heightHint = 14;
-            composite2LData.grabExcessHorizontalSpace = true;
-            compositeStatusLine.setLayoutData(composite2LData);
+	private CompositeDVD compositeDvd;
 
-            //StatusLine
-            initStatusLine();
-            
-            //tabFolder
-            cTabFolderMain = new CTabFolder(compositeMain, SWT.CLOSE);
-            
-            GridData cTabFolder1LData = new GridData();
-            cTabFolder1LData.grabExcessHorizontalSpace = true;
-            cTabFolder1LData.horizontalAlignment = GridData.FILL;
-            cTabFolder1LData.grabExcessVerticalSpace = true;
-            cTabFolder1LData.verticalAlignment = GridData.FILL;
-            cTabFolderMain.setLayoutData(cTabFolder1LData);
-            
-            //initFormatTab();
-            //initMovieTab();
-            //initImageTab();
-            initCustomerTab();
+	private CompositePayment compositePayment;
 
-        } catch (Exception e) {
-            e.printStackTrace();
-        }
-    }    
-    
-    
-    /**
-     * init the File menu
-     */
-    private void initFileMenu() {
-        if (rootMenu == null) {
-            return;
-            /**
-             * @todo hier muesste eigentlich eine Exception geworfen werden, da
-             *       null nich ein darf
-             */
-        }
-        fileMenuItem = new MenuItem(rootMenu, SWT.CASCADE);
-        fileMenuItem.setText(l.getString("menu.file"));
-        fileMenu = new Menu(fileMenuItem);
-        fileMenuItem.setMenu(fileMenu);
+	private CompositeStatus compositeStatus;
 
-        openFileMenuItem = new MenuItem(fileMenu, SWT.CASCADE);
-        openFileMenuItem.setText(l.getString("menu.file.open"));
+	private CompositeCustomer compositeCustomer;
 
-        newFileMenuItem = new MenuItem(fileMenu, SWT.CASCADE);
-        newFileMenuItem.setText(l.getString("menu.file.new"));
+	private Menu rootMenu;
 
-        saveFileMenuItem = new MenuItem(fileMenu, SWT.CASCADE);
-        saveFileMenuItem.setText(l.getString("menu.file.save"));
+	private Menu fileMenu;
 
-        closeFileMenuItem = new MenuItem(fileMenu, SWT.CASCADE);
-        closeFileMenuItem.setText(l.getString("menu.file.close"));
+	private MenuItem fileMenuItem;
 
-        exitMenuItem = new MenuItem(fileMenu, SWT.CASCADE);
-        exitMenuItem.setText(l.getString("menu.file.exit"));
+	private MenuItem exitMenuItem;
 
-    }
+	private MenuItem closeFileMenuItem;
 
-    /**
-     * init the View Menu
-     */
-    private void initViewMenu() {
-        if (rootMenu == null) {
-            return;
-            /**
-             * @todo hier muesste eigentlich eine Exception geworfen werden, da
-             *       null nich ein darf
-             */
-        }
+	private MenuItem saveFileMenuItem;
 
-        viewMenuItem = new MenuItem(rootMenu, SWT.CASCADE);
-        viewMenuItem.setText(l.getString("menu.view"));
+	private MenuItem newFileMenuItem;
 
-        viewMenu = new Menu(viewMenuItem);
-        viewMenuItem.setMenu(viewMenu);
+	private MenuItem openFileMenuItem;
 
-        viewVideoFormatMenuItem = new MenuItem(viewMenu, SWT.CHECK);
-        viewVideoFormatMenuItem.setText(l.getString("menu.view.format"));
-        viewVideoFormatMenuItem.setSelection(false);
-        viewVideoFormatMenuItem.addSelectionListener(new SelectionAdapter() {
-            public void widgetSelected(SelectionEvent evt) {
-				if(tabItemFormat == null || tabItemFormat.isDisposed()){
-				    initFormatTab();				    
-				 return;   
+	private Menu viewMenu;
+
+	private MenuItem viewMenuItem;
+
+	private MenuItem viewDirectorMenuItem;
+
+	private MenuItem viewVideoFormatMenuItem;
+
+	private MenuItem viewActorMenuItem;
+
+	private MenuItem viewOrderMenuItem;
+
+	private MenuItem viewCustomerMenuItem;
+
+	private MenuItem viewGenreMenuItem;
+
+	private MenuItem viewLanguageMenuItem;
+
+	private MenuItem viewStatusMenuItem;
+
+	private MenuItem viewPaymentMenuItem;
+
+	private MenuItem viewConditionMenuItem;
+
+	private MenuItem viewMovieMenuItem;
+
+	private MenuItem viewDvdMenuItem;
+
+	private MenuItem viewBillMenuItem;
+
+	private MenuItem viewImageMenuItem;
+
+	private Menu helpMenu;
+
+	private MenuItem aboutMenuItem;
+
+	private MenuItem contentsMenuItem;
+
+	private MenuItem helpMenuItem;
+
+	private Shell shell;
+
+	private Display display;
+
+	private StatusLineStyledText statusLine;
+
+	private Composite compositeStatusLine;
+
+	private Composite compositeMain;
+
+	private Composite compositeRoot;
+
+	/**
+	 * Bundle for multilanguage
+	 */
+	private ResourceBundle l;
+
+	private Locale locale;
+
+	/**
+	 * Auto-generated main method to display this
+	 * org.eclipse.swt.widgets.Composite inside a new Shell.
+	 */
+	public static void main(String[] args) {
+		ManagementGui inst = new ManagementGui();
+		inst.run();
+	}
+
+	public void run() {
+		shell.layout();
+		shell.open();
+
+		while (!shell.isDisposed()) {
+			if (!display.readAndDispatch())
+				display.sleep();
+		}
+	}
+
+	public ManagementGui() {
+
+		if (logger.isDebugEnabled()) {
+			logger.debug("ManagementGui() Locale: " + Locale.getDefault());
+		}
+
+		locale = Locale.getDefault();
+
+		l = PropertyResourceBundle.getBundle(
+				"de.hsharz.provirent.management.gui.language.main", locale);
+
+		//@todo hier muss noch was gemacht werden
+		if (l == null) {
+			System.exit(-1586);
+		}
+
+		display = Display.getDefault();
+
+		shell = new Shell(display);
+		shell.setText(l.getString("mainwindow.title"));
+
+		//set the Site
+		shell.setSize(MAIN_WINDOW_WIDTH, MAIN_WINDOW_HEIGHT);
+		shell.setLocation(MAIN_WINDOW_X, MAIN_WINDOW_Y);
+		{
+			//Register as a resource user - SWTResourceManager will
+			//handle the obtaining and disposing of resources
+			SWTResourceManager.registerResourceUser(shell);
+		}
+		//set the layout for the shell
+		FillLayout thisLayout = new FillLayout(SWT.HORIZONTAL);
+		shell.addControlListener(new ControlAdapter() {
+			public void controlResized(ControlEvent evt) {
+				//TODO add your code for shell.controlResized
+				//min Size of the Main Window
+				if (shell.getBounds().height < MIN_WINDOW_HEIGHT
+						|| shell.getBounds().width < MIN_WINDOW_WIDTH) {
+					shell.setBounds(MIN_WINDOW_X, MIN_WINDOW_Y,
+							MIN_WINDOW_WIDTH, MIN_WINDOW_HEIGHT);
+					statusLine.setStatus(StatusLineStyledText.STATUS_WARN, l
+							.getString("status.resizewarn"));
 				}
-				
+			}
+		});
+		shell.setLayout(thisLayout);
+
+		//init the db, so it saves time later
+		//does that in a new Thread
+		initDB();
+
+		//init the rest
+		initGUI();
+
+		//shell.layout();
+
+	}
+
+	private void initGUI() {
+		try {
+
+			//set't the menu
+			rootMenu = new Menu(shell, SWT.BAR);
+			shell.setMenuBar(rootMenu);
+
+			//init the other menu's
+			initFileMenu();
+			initViewMenu();
+			initHelpMenu();
+
+			//the root composite
+			//this init's the maincomposite
+			//set up the root composite incl. layout
+			compositeRoot = new Composite(shell, SWT.NONE);
+			GridLayout composite1Layout = new GridLayout();
+			composite1Layout.marginWidth = 0;
+			composite1Layout.marginHeight = 0;
+			composite1Layout.horizontalSpacing = 0;
+			composite1Layout.verticalSpacing = 0;
+			GridData composite1LData = new GridData();
+			compositeRoot.setLayout(composite1Layout);
+
+			composite1LData.verticalAlignment = GridData.FILL;
+			composite1LData.horizontalAlignment = GridData.FILL;
+			composite1LData.grabExcessHorizontalSpace = true;
+			composite1LData.grabExcessVerticalSpace = true;
+			compositeRoot.setLayoutData(composite1LData);
+
+			//init the MainComposite
+
+			compositeMain = new Composite(compositeRoot, SWT.EMBEDDED);
+			GridLayout composite3Layout = new GridLayout();
+			composite3Layout.makeColumnsEqualWidth = true;
+			composite3Layout.horizontalSpacing = 0;
+			composite3Layout.marginHeight = 0;
+			composite3Layout.marginWidth = 0;
+			composite3Layout.verticalSpacing = 0;
+			GridData composite3LData = new GridData();
+			compositeMain.setLayout(composite3Layout);
+			compositeMain.setForeground(SWTResourceManager.getColor(0, 255, 0));
+			composite3LData.verticalAlignment = GridData.FILL;
+			composite3LData.horizontalAlignment = GridData.FILL;
+			composite3LData.grabExcessHorizontalSpace = true;
+			composite3LData.grabExcessVerticalSpace = true;
+			compositeMain.setLayoutData(composite3LData);
+
+			//init Status Composite
+			compositeStatusLine = new Composite(compositeRoot, SWT.EMBEDDED);
+			GridLayout composite2Layout = new GridLayout();
+			composite2Layout.marginWidth = 0;
+			composite2Layout.marginHeight = 0;
+			composite2Layout.makeColumnsEqualWidth = true;
+			composite2Layout.horizontalSpacing = 0;
+			composite2Layout.verticalSpacing = 0;
+			GridData composite2LData = new GridData();
+			compositeStatusLine.setLayout(composite2Layout);
+			composite2LData.horizontalAlignment = GridData.FILL;
+			composite2LData.heightHint = 14;
+			composite2LData.grabExcessHorizontalSpace = true;
+			compositeStatusLine.setLayoutData(composite2LData);
+
+			//StatusLine
+			initStatusLine();
+
+			//tabFolder
+			cTabFolderMain = new CTabFolder(compositeMain, SWT.CLOSE);
+
+			GridData cTabFolder1LData = new GridData();
+			cTabFolder1LData.grabExcessHorizontalSpace = true;
+			cTabFolder1LData.horizontalAlignment = GridData.FILL;
+			cTabFolder1LData.grabExcessVerticalSpace = true;
+			cTabFolder1LData.verticalAlignment = GridData.FILL;
+			cTabFolderMain.setLayoutData(cTabFolder1LData);
+
+			//initFormatTab();
+			//initMovieTab();
+			//initImageTab();
+			initCustomerTab();
+
+		} catch (Exception e) {
+			e.printStackTrace();
+		}
+	}
+
+	/**
+	 * init the File menu
+	 */
+	private void initFileMenu() {
+		if (rootMenu == null) {
+			return;
+			/**
+			 * @todo hier muesste eigentlich eine Exception geworfen werden, da
+			 *       null nich ein darf
+			 */
+		}
+		fileMenuItem = new MenuItem(rootMenu, SWT.CASCADE);
+		fileMenuItem.setText(l.getString("menu.file"));
+		fileMenu = new Menu(fileMenuItem);
+		fileMenuItem.setMenu(fileMenu);
+
+		openFileMenuItem = new MenuItem(fileMenu, SWT.CASCADE);
+		openFileMenuItem.setText(l.getString("menu.file.open"));
+
+		newFileMenuItem = new MenuItem(fileMenu, SWT.CASCADE);
+		newFileMenuItem.setText(l.getString("menu.file.new"));
+
+		saveFileMenuItem = new MenuItem(fileMenu, SWT.CASCADE);
+		saveFileMenuItem.setText(l.getString("menu.file.save"));
+
+		closeFileMenuItem = new MenuItem(fileMenu, SWT.CASCADE);
+		closeFileMenuItem.setText(l.getString("menu.file.close"));
+
+		exitMenuItem = new MenuItem(fileMenu, SWT.CASCADE);
+		exitMenuItem.setText(l.getString("menu.file.exit"));
+
+	}
+
+	/**
+	 * init the View Menu
+	 */
+	private void initViewMenu() {
+		if (rootMenu == null) {
+			return;
+			/**
+			 * @todo hier muesste eigentlich eine Exception geworfen werden, da
+			 *       null nich ein darf
+			 */
+		}
+
+		viewMenuItem = new MenuItem(rootMenu, SWT.CASCADE);
+		viewMenuItem.setText(l.getString("menu.view"));
+
+		viewMenu = new Menu(viewMenuItem);
+		viewMenuItem.setMenu(viewMenu);
+
+		viewVideoFormatMenuItem = new MenuItem(viewMenu, SWT.CHECK);
+		viewVideoFormatMenuItem.setText(l.getString("menu.view.format"));
+		viewVideoFormatMenuItem.setSelection(false);
+		viewVideoFormatMenuItem.addSelectionListener(new SelectionAdapter() {
+			public void widgetSelected(SelectionEvent evt) {
+				if (tabItemFormat == null || tabItemFormat.isDisposed()) {
+					initFormatTab();
+					return;
+				}
+
 				cTabFolderMain.setSelection(tabItemFormat);
 				viewVideoFormatMenuItem.setSelection(true);
 				cTabFolderMain.showSelection();
-            }
-        });
+			}
+		});
 
-        viewDirectorMenuItem = new MenuItem(viewMenu, SWT.CHECK);
-        viewDirectorMenuItem.setText(l.getString("menu.view.director"));
-        viewDirectorMenuItem.setSelection(false);
-        viewDirectorMenuItem.addSelectionListener(new SelectionAdapter() {
-            public void widgetSelected(SelectionEvent evt) {
-				if(tabItemDirector == null || tabItemDirector.isDisposed()){
-				    initDirectorTab();
-				    return;   
+		viewDirectorMenuItem = new MenuItem(viewMenu, SWT.CHECK);
+		viewDirectorMenuItem.setText(l.getString("menu.view.director"));
+		viewDirectorMenuItem.setSelection(false);
+		viewDirectorMenuItem.addSelectionListener(new SelectionAdapter() {
+			public void widgetSelected(SelectionEvent evt) {
+				if (tabItemDirector == null || tabItemDirector.isDisposed()) {
+					initDirectorTab();
+					return;
 				}
-				
+
 				cTabFolderMain.setSelection(tabItemDirector);
 				viewDirectorMenuItem.setSelection(true);
 				cTabFolderMain.showSelection();
-            }
-        });        
+			}
+		});
 
-        viewActorMenuItem = new MenuItem(viewMenu, SWT.CHECK);
-        viewActorMenuItem.setText(l.getString("menu.view.actor"));
-        viewActorMenuItem.setSelection(false);
-        viewActorMenuItem.addSelectionListener(new SelectionAdapter() {
-            public void widgetSelected(SelectionEvent evt) {
-				if(tabItemActor == null || tabItemActor.isDisposed()){
-				    initActorTab();
-				    return;   
+		viewActorMenuItem = new MenuItem(viewMenu, SWT.CHECK);
+		viewActorMenuItem.setText(l.getString("menu.view.actor"));
+		viewActorMenuItem.setSelection(false);
+		viewActorMenuItem.addSelectionListener(new SelectionAdapter() {
+			public void widgetSelected(SelectionEvent evt) {
+				if (tabItemActor == null || tabItemActor.isDisposed()) {
+					initActorTab();
+					return;
 				}
-				
+
 				cTabFolderMain.setSelection(tabItemActor);
 				viewActorMenuItem.setSelection(true);
-				cTabFolderMain.showSelection();				
-            
-            }
-        });  
-        
-        viewCustomerMenuItem = new MenuItem(viewMenu, SWT.CHECK);
-        viewCustomerMenuItem.setText(l.getString("menu.view.customer"));
-        viewCustomerMenuItem.setSelection(false);
-        viewCustomerMenuItem.addSelectionListener(new SelectionAdapter() {
-            public void widgetSelected(SelectionEvent evt) {
-				if(tabItemCustomer == null || tabItemCustomer.isDisposed()){
-				    initCustomerTab();
-				    return;   
+				cTabFolderMain.showSelection();
+
+			}
+		});
+
+		viewCustomerMenuItem = new MenuItem(viewMenu, SWT.CHECK);
+		viewCustomerMenuItem.setText(l.getString("menu.view.customer"));
+		viewCustomerMenuItem.setSelection(false);
+		viewCustomerMenuItem.addSelectionListener(new SelectionAdapter() {
+			public void widgetSelected(SelectionEvent evt) {
+				if (tabItemCustomer == null || tabItemCustomer.isDisposed()) {
+					initCustomerTab();
+					return;
 				}
-				
+
 				cTabFolderMain.setSelection(tabItemCustomer);
 				viewCustomerMenuItem.setSelection(true);
-				cTabFolderMain.showSelection();				
-            
-            }
-        });
-        
-        viewOrderMenuItem = new MenuItem(viewMenu, SWT.CHECK);
-        viewOrderMenuItem.setText(l.getString("menu.view.order"));
-        viewOrderMenuItem.setSelection(false);
-        viewOrderMenuItem.addSelectionListener(new SelectionAdapter() {
-            public void widgetSelected(SelectionEvent evt) {
-				if(tabItemOrder == null || tabItemOrder.isDisposed()){
-				    initOrderTab();
-				    return;   
+				cTabFolderMain.showSelection();
+
+			}
+		});
+
+		viewOrderMenuItem = new MenuItem(viewMenu, SWT.CHECK);
+		viewOrderMenuItem.setText(l.getString("menu.view.order"));
+		viewOrderMenuItem.setSelection(false);
+		viewOrderMenuItem.addSelectionListener(new SelectionAdapter() {
+			public void widgetSelected(SelectionEvent evt) {
+				if (tabItemOrder == null || tabItemOrder.isDisposed()) {
+					initOrderTab();
+					return;
 				}
-				
+
 				cTabFolderMain.setSelection(tabItemOrder);
 				viewOrderMenuItem.setSelection(true);
-				cTabFolderMain.showSelection();				
-            
-            }
-        });
-        
-        viewGenreMenuItem = new MenuItem(viewMenu, SWT.CHECK);
-        viewGenreMenuItem.setText(l.getString("menu.view.genre"));
-        viewGenreMenuItem.setSelection(false);
-        viewGenreMenuItem.addSelectionListener(new SelectionAdapter() {
-            public void widgetSelected(SelectionEvent evt) {
-				if(tabItemGenre == null || tabItemGenre.isDisposed()){
-				    initGenreTab();
-				    return;   
+				cTabFolderMain.showSelection();
+
+			}
+		});
+
+		viewGenreMenuItem = new MenuItem(viewMenu, SWT.CHECK);
+		viewGenreMenuItem.setText(l.getString("menu.view.genre"));
+		viewGenreMenuItem.setSelection(false);
+		viewGenreMenuItem.addSelectionListener(new SelectionAdapter() {
+			public void widgetSelected(SelectionEvent evt) {
+				if (tabItemGenre == null || tabItemGenre.isDisposed()) {
+					initGenreTab();
+					return;
 				}
-				
+
 				cTabFolderMain.setSelection(tabItemGenre);
 				cTabFolderMain.showSelection();
 				viewGenreMenuItem.setSelection(true);
-            
-            }
-        }); 
 
-        viewLanguageMenuItem = new MenuItem(viewMenu, SWT.CHECK);
-        viewLanguageMenuItem.setText(l.getString("menu.view.language"));
-        viewLanguageMenuItem.setSelection(false);
-        viewLanguageMenuItem.addSelectionListener(new SelectionAdapter() {
-            public void widgetSelected(SelectionEvent evt) {
-				if(tabItemLanguage == null || tabItemLanguage.isDisposed()){
-				    initLanguageTab();
-				    return;   
+			}
+		});
+
+		viewLanguageMenuItem = new MenuItem(viewMenu, SWT.CHECK);
+		viewLanguageMenuItem.setText(l.getString("menu.view.language"));
+		viewLanguageMenuItem.setSelection(false);
+		viewLanguageMenuItem.addSelectionListener(new SelectionAdapter() {
+			public void widgetSelected(SelectionEvent evt) {
+				if (tabItemLanguage == null || tabItemLanguage.isDisposed()) {
+					initLanguageTab();
+					return;
 				}
-				
+
 				cTabFolderMain.setSelection(tabItemLanguage);
 				viewGenreMenuItem.setSelection(true);
 				cTabFolderMain.showSelection();
-            }
-        });         
-       
-        viewPaymentMenuItem = new MenuItem(viewMenu, SWT.CHECK);
-        viewPaymentMenuItem.setText(l.getString("menu.view.payment"));
-        viewPaymentMenuItem.setSelection(false);
-        viewPaymentMenuItem.addSelectionListener(new SelectionAdapter(){
-            public void widgetSelected(SelectionEvent evt) {
-				if(tabItemPayment == null || tabItemPayment.isDisposed()){
-				    initPaymentTab();
-				    return;   
+			}
+		});
+
+		viewPaymentMenuItem = new MenuItem(viewMenu, SWT.CHECK);
+		viewPaymentMenuItem.setText(l.getString("menu.view.payment"));
+		viewPaymentMenuItem.setSelection(false);
+		viewPaymentMenuItem.addSelectionListener(new SelectionAdapter() {
+			public void widgetSelected(SelectionEvent evt) {
+				if (tabItemPayment == null || tabItemPayment.isDisposed()) {
+					initPaymentTab();
+					return;
 				}
-				
+
 				cTabFolderMain.setSelection(tabItemPayment);
 				viewPaymentMenuItem.setSelection(true);
 				cTabFolderMain.showSelection();
-            }
-        });
-        
-        viewStatusMenuItem = new MenuItem(viewMenu, SWT.CHECK);
-        viewStatusMenuItem.setText(l.getString("menu.view.status"));
-        viewStatusMenuItem.setSelection(false);
-        viewStatusMenuItem.addSelectionListener(new SelectionAdapter() {
-            public void widgetSelected(SelectionEvent evt) {
-				if(tabItemStatus == null || tabItemStatus.isDisposed()){
-				    initStatusTab();
-				    return;   
+			}
+		});
+
+		viewStatusMenuItem = new MenuItem(viewMenu, SWT.CHECK);
+		viewStatusMenuItem.setText(l.getString("menu.view.status"));
+		viewStatusMenuItem.setSelection(false);
+		viewStatusMenuItem.addSelectionListener(new SelectionAdapter() {
+			public void widgetSelected(SelectionEvent evt) {
+				if (tabItemStatus == null || tabItemStatus.isDisposed()) {
+					initStatusTab();
+					return;
 				}
-				
+
 				cTabFolderMain.setSelection(tabItemStatus);
 				viewStatusMenuItem.setSelection(true);
 				cTabFolderMain.showSelection();
-            }
-        });   
+			}
+		});
 
-        viewImageMenuItem = new MenuItem(viewMenu, SWT.CHECK);
-        viewImageMenuItem.setText(l.getString("menu.view.image"));
-        viewImageMenuItem.setSelection(false);
-        viewImageMenuItem.addSelectionListener(new SelectionAdapter() {
-            public void widgetSelected(SelectionEvent evt) {
-				if(tabItemImage == null || tabItemImage.isDisposed()){
-				    initImageTab();
-				    return;   
+		viewImageMenuItem = new MenuItem(viewMenu, SWT.CHECK);
+		viewImageMenuItem.setText(l.getString("menu.view.image"));
+		viewImageMenuItem.setSelection(false);
+		viewImageMenuItem.addSelectionListener(new SelectionAdapter() {
+			public void widgetSelected(SelectionEvent evt) {
+				if (tabItemImage == null || tabItemImage.isDisposed()) {
+					initImageTab();
+					return;
 				}
-				
+
 				cTabFolderMain.setSelection(tabItemImage);
 				viewStatusMenuItem.setSelection(true);
 				cTabFolderMain.showSelection();
-            }
-        });   
-        
-        
-        viewMovieMenuItem = new MenuItem(viewMenu, SWT.CHECK);
-        viewMovieMenuItem.setText(l.getString("menu.view.movie"));
-        viewMovieMenuItem.setSelection(true);
-        viewMovieMenuItem.addSelectionListener(new SelectionAdapter() {
-            public void widgetSelected(SelectionEvent evt) {
-				if(tabItemMovie == null || tabItemMovie.isDisposed()){
-				    initMovieTab();
-				    return;   
+			}
+		});
+
+		viewMovieMenuItem = new MenuItem(viewMenu, SWT.CHECK);
+		viewMovieMenuItem.setText(l.getString("menu.view.movie"));
+		viewMovieMenuItem.setSelection(true);
+		viewMovieMenuItem.addSelectionListener(new SelectionAdapter() {
+			public void widgetSelected(SelectionEvent evt) {
+				if (tabItemMovie == null || tabItemMovie.isDisposed()) {
+					initMovieTab();
+					return;
 				}
-				
+
 				cTabFolderMain.setSelection(tabItemMovie);
 				viewMovieMenuItem.setSelection(true);
-				cTabFolderMain.showSelection();				
-            
-            }
-        });         
+				cTabFolderMain.showSelection();
 
-        viewDvdMenuItem = new MenuItem(viewMenu, SWT.CHECK);
-        viewDvdMenuItem.setText(l.getString("menu.view.dvd"));
-        viewDvdMenuItem.setSelection(false);
-        viewDvdMenuItem.addSelectionListener(new SelectionAdapter() {
-            public void widgetSelected(SelectionEvent evt) {
-				if(tabItemDvd == null || tabItemDvd.isDisposed()){
-				    initDvdTab();
-				    return;   
+			}
+		});
+
+		viewDvdMenuItem = new MenuItem(viewMenu, SWT.CHECK);
+		viewDvdMenuItem.setText(l.getString("menu.view.dvd"));
+		viewDvdMenuItem.setSelection(false);
+		viewDvdMenuItem.addSelectionListener(new SelectionAdapter() {
+			public void widgetSelected(SelectionEvent evt) {
+				if (tabItemDvd == null || tabItemDvd.isDisposed()) {
+					initDvdTab();
+					return;
 				}
-				
+
 				cTabFolderMain.setSelection(tabItemDvd);
 				viewDvdMenuItem.setSelection(true);
-				cTabFolderMain.showSelection();				
-            
-            }
-        });         
-        
-        viewBillMenuItem = new MenuItem(viewMenu, SWT.CHECK);
-        viewBillMenuItem.setText(l.getString("menu.view.bill"));
-        viewBillMenuItem.setSelection(false);
+				cTabFolderMain.showSelection();
 
-    }
+			}
+		});
 
-    /**
-     * 
-     */
-    private void initStatusTab() {
-        tabItemStatus = new CTabItem(cTabFolderMain, SWT.NONE);
-        tabItemStatus.setText(l.getString("tab.Status.title"));
-        tabItemStatus.addDisposeListener(new DisposeListener() {
+		viewBillMenuItem = new MenuItem(viewMenu, SWT.CHECK);
+		viewBillMenuItem.setText(l.getString("menu.view.bill"));
+		viewBillMenuItem.setSelection(false);
 
-            public void widgetDisposed(DisposeEvent evt) {
-                if(!viewStatusMenuItem.isDisposed()){
-                    viewStatusMenuItem.setSelection(false);
-                }
-            }
-            
-        });
-        {
-            compositeStatus = new CompositeStatus(
-                cTabFolderMain,
-                SWT.NONE, statusLine, locale);
-            
-            tabItemStatus.setControl(compositeStatus);
-        }
-        cTabFolderMain.setSelection(tabItemStatus);
-    }
+	}
 
-    private void initImageTab() {
-        tabItemImage = new CTabItem(cTabFolderMain, SWT.NONE);
-        tabItemImage.setText(l.getString("tab.image.title"));
-        tabItemImage.addDisposeListener(new DisposeListener() {
+	/**
+	 * 
+	 */
+	private void initStatusTab() {
+		tabItemStatus = new CTabItem(cTabFolderMain, SWT.NONE);
+		tabItemStatus.setText(l.getString("tab.Status.title"));
+		tabItemStatus.addDisposeListener(new DisposeListener() {
 
-            public void widgetDisposed(DisposeEvent evt) {
-                if(!viewImageMenuItem.isDisposed()){
-                    viewImageMenuItem.setSelection(false);
-                }
-                if (compositeImage != null && !compositeImage.isDisposed()){
-                    compositeImage.dispose();
-                    compositeImage = null;
-                }
-                
-            }
-            
-        });
-        {
-            compositeImage = new CompositeImage(
-                cTabFolderMain,
-                SWT.NONE, statusLine, locale);
-            
-            tabItemImage.setControl(compositeImage);
-        }
-        cTabFolderMain.setSelection(tabItemImage);
-    }
-    
-    /**
-     * init the help menu
-     */
-    private void initHelpMenu() {
-        if (rootMenu == null) {
-            throw new GuiInitException();
-        }
-        helpMenuItem = new MenuItem(rootMenu, SWT.CASCADE);
-        helpMenuItem.setText(l.getString("menu.help"));
-        {
-            helpMenu = new Menu(helpMenuItem);
-            helpMenuItem.setMenu(helpMenu);
-            {
-                contentsMenuItem = new MenuItem(helpMenu, SWT.CASCADE);
-            }
-            {
-                aboutMenuItem = new MenuItem(helpMenu, SWT.CASCADE);
-            }
-        }
+			public void widgetDisposed(DisposeEvent evt) {
+				if (!viewStatusMenuItem.isDisposed()) {
+					viewStatusMenuItem.setSelection(false);
+				}
+			}
 
-    }
-   
-    
-    
-    
-    private void initFormatTab() {
-        tabItemFormat = new CTabItem(cTabFolderMain, SWT.NONE);        
-        tabItemFormat.setText(l.getString("tab.format.title"));
-        tabItemFormat.addDisposeListener(new DisposeListener() {
-            public void widgetDisposed(DisposeEvent evt) {
+		});
+		{
+			compositeStatus = new CompositeStatus(cTabFolderMain, SWT.NONE,
+					statusLine, locale);
 
-                if (!viewVideoFormatMenuItem.isDisposed()){
-                    viewVideoFormatMenuItem.setSelection(false);
-                }
-            }
-        });
+			tabItemStatus.setControl(compositeStatus);
+		}
+		cTabFolderMain.setSelection(tabItemStatus);
+	}
 
-        {
-            compositeFormate = new CompositeFormate(
-                cTabFolderMain,
-                SWT.NONE, statusLine, locale);
-            
-            tabItemFormat.setControl(compositeFormate);
-        }
-        cTabFolderMain.setSelection(tabItemFormat);
-        
-    }
-    
-    private void initCustomerTab() {
-        tabItemCustomer = new CTabItem(cTabFolderMain, SWT.NONE);        
-        tabItemCustomer.setText(l.getString("tab.customer.title"));
-        tabItemCustomer.addDisposeListener(new DisposeListener() {
-            public void widgetDisposed(DisposeEvent evt) {
+	private void initImageTab() {
+		tabItemImage = new CTabItem(cTabFolderMain, SWT.NONE);
+		tabItemImage.setText(l.getString("tab.image.title"));
+		tabItemImage.addDisposeListener(new DisposeListener() {
 
-                if (!viewCustomerMenuItem.isDisposed()){
-                    viewCustomerMenuItem.setSelection(false);
-                }
-            }
-        });
+			public void widgetDisposed(DisposeEvent evt) {
+				if (!viewImageMenuItem.isDisposed()) {
+					viewImageMenuItem.setSelection(false);
+				}
+				if (compositeImage != null && !compositeImage.isDisposed()) {
+					compositeImage.dispose();
+					compositeImage = null;
+				}
 
-        {
-            compositeCustomer = new CompositeCustomer(
-                cTabFolderMain,
-                SWT.NONE, statusLine, locale);
-            
-            tabItemCustomer.setControl(compositeCustomer);
-        }
-        cTabFolderMain.setSelection(tabItemCustomer);
-        
-    }
-    
-    private void initOrderTab() {
-        tabItemOrder = new CTabItem(cTabFolderMain, SWT.NONE);        
-        tabItemOrder.setText(l.getString("tab.Order.title"));
-        tabItemOrder.addDisposeListener(new DisposeListener() {
-            public void widgetDisposed(DisposeEvent evt) {
+			}
 
-                if (!viewOrderMenuItem.isDisposed()){
-                    viewOrderMenuItem.setSelection(false);
-                }
-            }
-        });
+		});
+		{
+			compositeImage = new CompositeImage(cTabFolderMain, SWT.NONE,
+					statusLine, locale);
 
-        {
-            compositeOrder = new CompositeOrder(
-                cTabFolderMain,
-                SWT.NONE, statusLine, locale);
-            
-            tabItemOrder.setControl(compositeOrder);
-        }
-        cTabFolderMain.setSelection(tabItemOrder);
-        
-    }    
-    
-    private void initDirectorTab() {
-        tabItemDirector = new CTabItem(cTabFolderMain, SWT.NONE);
-        tabItemDirector.setText(l.getString("tab.director.title"));
-        tabItemDirector.addDisposeListener(new DisposeListener() {
+			tabItemImage.setControl(compositeImage);
+		}
+		cTabFolderMain.setSelection(tabItemImage);
+	}
 
-            public void widgetDisposed(DisposeEvent evt) {
+	/**
+	 * init the help menu
+	 */
+	private void initHelpMenu() {
+		if (rootMenu == null) {
+			throw new GuiInitException();
+		}
+		helpMenuItem = new MenuItem(rootMenu, SWT.CASCADE);
+		helpMenuItem.setText(l.getString("menu.help"));
+		{
+			helpMenu = new Menu(helpMenuItem);
+			helpMenuItem.setMenu(helpMenu);
+			{
+				contentsMenuItem = new MenuItem(helpMenu, SWT.CASCADE);
+			}
+			{
+				aboutMenuItem = new MenuItem(helpMenu, SWT.CASCADE);
+			}
+		}
 
-                if(!viewDirectorMenuItem.isDisposed()){
-                    viewDirectorMenuItem.setSelection(false);
-                }
-            }
-            
-        });
-        {
-            compositeDirector = new CompositeDirectors(
-                cTabFolderMain,
-                SWT.NONE, statusLine, locale);
-            
-            tabItemDirector.setControl(compositeDirector);
-        }
-        cTabFolderMain.setSelection(tabItemDirector);
-    }    
-    
-    private void initActorTab() {
-        tabItemActor = new CTabItem(cTabFolderMain, SWT.NONE);
-        tabItemActor.setText(l.getString("tab.actor.title"));
-        tabItemActor.addDisposeListener(new DisposeListener() {
+	}
 
-            public void widgetDisposed(DisposeEvent evt) {
-                if(!viewActorMenuItem.isDisposed()){
-                viewActorMenuItem.setSelection(false);
-                }
-            }
-            
-        });
-        {
-            compositeActor = new CompositeActors(
-                cTabFolderMain,
-                SWT.NONE, statusLine, locale);
-            
-            tabItemActor.setControl(compositeActor);
-        }
-        cTabFolderMain.setSelection(tabItemActor);
-    }
+	private void initFormatTab() {
+		tabItemFormat = new CTabItem(cTabFolderMain, SWT.NONE);
+		tabItemFormat.setText(l.getString("tab.format.title"));
+		tabItemFormat.addDisposeListener(new DisposeListener() {
+			public void widgetDisposed(DisposeEvent evt) {
 
-    private void initGenreTab() {
-        tabItemGenre = new CTabItem(cTabFolderMain, SWT.NONE);
-        tabItemGenre.setText(l.getString("tab.genre.title"));
-        tabItemGenre.addDisposeListener(new DisposeListener() {
+				if (!viewVideoFormatMenuItem.isDisposed()) {
+					viewVideoFormatMenuItem.setSelection(false);
+				}
+			}
+		});
 
-            public void widgetDisposed(DisposeEvent evt) {
-                if(!viewGenreMenuItem.isDisposed()){
-                viewGenreMenuItem.setSelection(false);
-                }
-            }
-            
-        });
-  
-        {
-            compositeGenre = new CompositeGenre(
-                cTabFolderMain,
-                SWT.NONE, statusLine, locale);
-            
-            tabItemGenre.setControl(compositeGenre);
-        }
-        cTabFolderMain.setSelection(tabItemGenre);
-    }
-    
-    private void initPaymentTab() {
-        tabItemPayment = new CTabItem(cTabFolderMain, SWT.NONE);
-        tabItemPayment.setText(l.getString("tab.payment.title"));
-        tabItemPayment.addDisposeListener(new DisposeListener() {
+		{
+			compositeFormate = new CompositeFormate(cTabFolderMain, SWT.NONE,
+					statusLine, locale);
 
-            public void widgetDisposed(DisposeEvent evt) {
-                if(!viewPaymentMenuItem.isDisposed()){
-                    viewPaymentMenuItem.setSelection(false);
-                }
-            }
-            
-        });
-  
-        {
-            compositePayment = new CompositePayment(
-                cTabFolderMain,
-                SWT.NONE, statusLine, locale);
-            
-            tabItemPayment.setControl(compositePayment);
-        }
-        cTabFolderMain.setSelection(tabItemPayment);
-    }
+			tabItemFormat.setControl(compositeFormate);
+		}
+		cTabFolderMain.setSelection(tabItemFormat);
 
-    private void initLanguageTab() {
-        tabItemLanguage = new CTabItem(cTabFolderMain, SWT.NONE);
-        tabItemLanguage.setText(l.getString("tab.language.title"));
-        tabItemLanguage.addDisposeListener(new DisposeListener() {
+	}
 
-            public void widgetDisposed(DisposeEvent evt) {
-                if(!viewLanguageMenuItem.isDisposed()){
-                    viewLanguageMenuItem.setSelection(false);
-                }
-            }
-            
-        });
-        {
-            compositeLanguage = new CompositeLanguage(
-                cTabFolderMain,
-                SWT.NONE, statusLine, locale);
-            
-            tabItemLanguage.setControl(compositeLanguage);
-        }
-        cTabFolderMain.setSelection(tabItemLanguage);
-    }    
-    
-    private void initMovieTab() {
-        tabItemMovie = new CTabItem(cTabFolderMain, SWT.NONE);
-        tabItemMovie.setText(l.getString("tab.movie.title"));
-        tabItemMovie.addDisposeListener(new DisposeListener() {
+	private void initCustomerTab() {
+		tabItemCustomer = new CTabItem(cTabFolderMain, SWT.NONE);
+		tabItemCustomer.setText(l.getString("tab.customer.title"));
+		tabItemCustomer.addDisposeListener(new DisposeListener() {
+			public void widgetDisposed(DisposeEvent evt) {
 
-            public void widgetDisposed(DisposeEvent evt) {
-                if(!viewMovieMenuItem.isDisposed()){
-                viewMovieMenuItem.setSelection(false);
-                }
-            }
-            
-        });
-  
-        {
-            compositeMovie = new CompositeMovie(
-                cTabFolderMain,
-                SWT.NONE, statusLine, locale);
-            
-            tabItemMovie.setControl(compositeMovie);
-        }
-        cTabFolderMain.setSelection(tabItemMovie);
-    }
-    
-    private void initStatusLine() {
-        statusLine = new StatusLineStyledText(compositeStatusLine, SWT.READ_ONLY);
-        statusLine.setText("");
-        statusLine
-                .setToolTipText("Hier finden Sie wichtige Statusinformationen");
-        statusLine.setBackground(ColorDef.STATUS_B_STANDARD);
-        statusLine.setForeground(ColorDef.STATUS_F_STANDARD);
-        statusLine.setDoubleClickEnabled(false);
-        statusLine.setEditable(false);
-        statusLine.setEnabled(true);
-        GridData styledText1LData = new GridData();
+				if (!viewCustomerMenuItem.isDisposed()) {
+					viewCustomerMenuItem.setSelection(false);
+				}
+			}
+		});
 
-        styledText1LData.horizontalAlignment = GridData.FILL;
-        styledText1LData.grabExcessHorizontalSpace = true;
-        statusLine.setLayoutData(styledText1LData);
-    }
+		{
+			compositeCustomer = new CompositeCustomer(cTabFolderMain, SWT.NONE,
+					statusLine, locale);
 
-    private void initDvdTab() {
-        tabItemDvd = new CTabItem(cTabFolderMain, SWT.NONE);
-        tabItemDvd.setText(l.getString("tab.dvd.title"));
-        tabItemDvd.addDisposeListener(new DisposeListener() {
+			tabItemCustomer.setControl(compositeCustomer);
+		}
+		cTabFolderMain.setSelection(tabItemCustomer);
 
-            public void widgetDisposed(DisposeEvent evt) {
-                if(!viewMovieMenuItem.isDisposed()){
-                viewDvdMenuItem.setSelection(false);
-                }
-            }
-            
-        });
-  
-        {
-            compositeDvd = new CompositeDVD(
-                cTabFolderMain,
-                SWT.NONE, statusLine, locale);
-            
-            tabItemDvd.setControl(compositeDvd);
-        }
-        cTabFolderMain.setSelection(tabItemDvd);
-    }
-    
-    /**
-     * Sets a message for the Statusline
-     * 
-     * @param mode
-     * @param message
-     */
-    private void setStatus(final int mode, final String message) {
-        /**
-         * mode values 0 normal message 1 information message 2 warn message 3
-         * error message
-         *  
-         */
-        if (mode == 0) {
-            statusLine.setBackground(ColorDef.STATUS_B_STANDARD);
-            statusLine.setForeground(ColorDef.STATUS_F_STANDARD);
-        } else if (mode == 1) {
-            statusLine.setBackground(ColorDef.STATUS_B_INFO);
-            statusLine.setForeground(ColorDef.STATUS_F_INFO);
-        } else if (mode == 2) {
-            statusLine.setBackground(ColorDef.STATUS_B_WARN);
-            statusLine.setForeground(ColorDef.STATUS_F_WARN);
-        } else if (mode == 3) {
-            statusLine.setBackground(ColorDef.STATUS_B_ERROR);
-            statusLine.setForeground(ColorDef.STATUS_F_ERROR);
-        }
+	}
 
-        statusLine.setText(message);
+	private void initOrderTab() {
+		tabItemOrder = new CTabItem(cTabFolderMain, SWT.NONE);
+		tabItemOrder.setText(l.getString("tab.Order.title"));
+		tabItemOrder.addDisposeListener(new DisposeListener() {
+			public void widgetDisposed(DisposeEvent evt) {
 
+				if (!viewOrderMenuItem.isDisposed()) {
+					viewOrderMenuItem.setSelection(false);
+				}
+			}
+		});
+
+		{
+			compositeOrder = new CompositeOrder(cTabFolderMain, SWT.NONE,
+					statusLine, locale);
+
+			tabItemOrder.setControl(compositeOrder);
+		}
+		cTabFolderMain.setSelection(tabItemOrder);
+
+	}
+
+	private void initDirectorTab() {
+		tabItemDirector = new CTabItem(cTabFolderMain, SWT.NONE);
+		tabItemDirector.setText(l.getString("tab.director.title"));
+		tabItemDirector.addDisposeListener(new DisposeListener() {
+
+			public void widgetDisposed(DisposeEvent evt) {
+
+				if (!viewDirectorMenuItem.isDisposed()) {
+					viewDirectorMenuItem.setSelection(false);
+				}
+			}
+
+		});
+		{
+			compositeDirector = new CompositeDirectors(cTabFolderMain,
+					SWT.NONE, statusLine, locale);
+
+			tabItemDirector.setControl(compositeDirector);
+		}
+		cTabFolderMain.setSelection(tabItemDirector);
+	}
+
+	private void initActorTab() {
+		tabItemActor = new CTabItem(cTabFolderMain, SWT.NONE);
+		tabItemActor.setText(l.getString("tab.actor.title"));
+		tabItemActor.addDisposeListener(new DisposeListener() {
+
+			public void widgetDisposed(DisposeEvent evt) {
+				if (!viewActorMenuItem.isDisposed()) {
+					viewActorMenuItem.setSelection(false);
+				}
+			}
+
+		});
+		{
+			compositeActor = new CompositeActors(cTabFolderMain, SWT.NONE,
+					statusLine, locale);
+
+			tabItemActor.setControl(compositeActor);
+		}
+		cTabFolderMain.setSelection(tabItemActor);
+	}
+
+	private void initGenreTab() {
+		tabItemGenre = new CTabItem(cTabFolderMain, SWT.NONE);
+		tabItemGenre.setText(l.getString("tab.genre.title"));
+		tabItemGenre.addDisposeListener(new DisposeListener() {
+
+			public void widgetDisposed(DisposeEvent evt) {
+				if (!viewGenreMenuItem.isDisposed()) {
+					viewGenreMenuItem.setSelection(false);
+				}
+			}
+
+		});
+
+		{
+			compositeGenre = new CompositeGenre(cTabFolderMain, SWT.NONE,
+					statusLine, locale);
+
+			tabItemGenre.setControl(compositeGenre);
+		}
+		cTabFolderMain.setSelection(tabItemGenre);
+	}
+
+	private void initPaymentTab() {
+		tabItemPayment = new CTabItem(cTabFolderMain, SWT.NONE);
+		tabItemPayment.setText(l.getString("tab.payment.title"));
+		tabItemPayment.addDisposeListener(new DisposeListener() {
+
+			public void widgetDisposed(DisposeEvent evt) {
+				if (!viewPaymentMenuItem.isDisposed()) {
+					viewPaymentMenuItem.setSelection(false);
+				}
+			}
+
+		});
+
+		{
+			compositePayment = new CompositePayment(cTabFolderMain, SWT.NONE,
+					statusLine, locale);
+
+			tabItemPayment.setControl(compositePayment);
+		}
+		cTabFolderMain.setSelection(tabItemPayment);
+	}
+
+	private void initLanguageTab() {
+		tabItemLanguage = new CTabItem(cTabFolderMain, SWT.NONE);
+		tabItemLanguage.setText(l.getString("tab.language.title"));
+		tabItemLanguage.addDisposeListener(new DisposeListener() {
+
+			public void widgetDisposed(DisposeEvent evt) {
+				if (!viewLanguageMenuItem.isDisposed()) {
+					viewLanguageMenuItem.setSelection(false);
+				}
+			}
+
+		});
+		{
+			compositeLanguage = new CompositeLanguage(cTabFolderMain, SWT.NONE,
+					statusLine, locale);
+
+			tabItemLanguage.setControl(compositeLanguage);
+		}
+		cTabFolderMain.setSelection(tabItemLanguage);
+	}
+
+	private void initMovieTab() {
+		tabItemMovie = new CTabItem(cTabFolderMain, SWT.NONE);
+		tabItemMovie.setText(l.getString("tab.movie.title"));
+		tabItemMovie.addDisposeListener(new DisposeListener() {
+
+			public void widgetDisposed(DisposeEvent evt) {
+				if (!viewMovieMenuItem.isDisposed()) {
+					viewMovieMenuItem.setSelection(false);
+				}
+			}
+
+		});
+
+		{
+			compositeMovie = new CompositeMovie(cTabFolderMain, SWT.NONE,
+					statusLine, locale);
+
+			tabItemMovie.setControl(compositeMovie);
+		}
+		cTabFolderMain.setSelection(tabItemMovie);
+	}
+
+	private void initStatusLine() {
+		statusLine = new StatusLineStyledText(compositeStatusLine,
+				SWT.READ_ONLY);
+		statusLine.setText("");
+		statusLine
+				.setToolTipText("Hier finden Sie wichtige Statusinformationen");
+		statusLine.setBackground(ColorDef.STATUS_B_STANDARD);
+		statusLine.setForeground(ColorDef.STATUS_F_STANDARD);
+		statusLine.setDoubleClickEnabled(false);
+		statusLine.setEditable(false);
+		statusLine.setEnabled(true);
+		GridData styledText1LData = new GridData();
+
+		styledText1LData.horizontalAlignment = GridData.FILL;
+		styledText1LData.grabExcessHorizontalSpace = true;
+		statusLine.setLayoutData(styledText1LData);
+	}
+
+	private void initDvdTab() {
+		tabItemDvd = new CTabItem(cTabFolderMain, SWT.NONE);
+		tabItemDvd.setText(l.getString("tab.dvd.title"));
+		tabItemDvd.addDisposeListener(new DisposeListener() {
+
+			public void widgetDisposed(DisposeEvent evt) {
+				if (!viewMovieMenuItem.isDisposed()) {
+					viewDvdMenuItem.setSelection(false);
+				}
+			}
+
+		});
+
+		{
+			compositeDvd = new CompositeDVD(cTabFolderMain, SWT.NONE,
+					statusLine, locale);
+
+			tabItemDvd.setControl(compositeDvd);
+		}
+		cTabFolderMain.setSelection(tabItemDvd);
+	}
+
+	/**
+	 * Sets a message for the Statusline
+	 * 
+	 * @param mode
+	 * @param message
+	 */
+	private void setStatus(final int mode, final String message) {
+		/**
+		 * mode values 0 normal message 1 information message 2 warn message 3
+		 * error message
+		 *  
+		 */
+		if (mode == 0) {
+			statusLine.setBackground(ColorDef.STATUS_B_STANDARD);
+			statusLine.setForeground(ColorDef.STATUS_F_STANDARD);
+		} else if (mode == 1) {
+			statusLine.setBackground(ColorDef.STATUS_B_INFO);
+			statusLine.setForeground(ColorDef.STATUS_F_INFO);
+		} else if (mode == 2) {
+			statusLine.setBackground(ColorDef.STATUS_B_WARN);
+			statusLine.setForeground(ColorDef.STATUS_F_WARN);
+		} else if (mode == 3) {
+			statusLine.setBackground(ColorDef.STATUS_B_ERROR);
+			statusLine.setForeground(ColorDef.STATUS_F_ERROR);
+		}
+
+		statusLine.setText(message);
+
 		new Thread() {
 			public void run() {
-				
-				try {Thread.sleep (1000 *5);} catch (Throwable th) {}
-					if (display.isDisposed()) return;
-					display.asyncExec(new Runnable() {
-						public void run() {
-				            statusLine.setBackground(ColorDef.STATUS_B_STANDARD);
-				            statusLine.setForeground(ColorDef.STATUS_F_STANDARD);
-						}
-					});
-				
+
+				try {
+					Thread.sleep(1000 * 5);
+				} catch (Throwable th) {
+				}
+				if (display.isDisposed())
+					return;
+				display.asyncExec(new Runnable() {
+					public void run() {
+						statusLine.setBackground(ColorDef.STATUS_B_STANDARD);
+						statusLine.setForeground(ColorDef.STATUS_F_STANDARD);
+					}
+				});
+
 			}
 		}.start();
 
-    }
+	}
 
-    private void initDB(){
-        
+	private void initDB() {
+
 		new Thread() {
 			public void run() {
-			    Database.initDB();
+				Database.initDB();
 			}
 		}.start();
 
-    }
-        
-    
-    
+	}
+
 }
\ No newline at end of file

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Dvd.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Dvd.java	2004-12-08 18:45:55 UTC (rev 225)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Dvd.java	2004-12-08 18:52:28 UTC (rev 226)
@@ -1,12 +1,13 @@
 package de.hsharz.provirent.objects;
 
-import java.io.Serializable;
-import java.util.List;
-import org.apache.commons.lang.builder.EqualsBuilder;
-import org.apache.commons.lang.builder.HashCodeBuilder;
-import org.apache.commons.lang.builder.ToStringBuilder;
+import java.io.Serializable;
+import java.util.List;
 
+import org.apache.commons.lang.builder.EqualsBuilder;
+import org.apache.commons.lang.builder.HashCodeBuilder;
+import org.apache.commons.lang.builder.ToStringBuilder;
 
+
 /** 
  *         Represents a single Dvd.
  *         @author Philipp Schneider

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/objects/OrderItem.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/objects/OrderItem.java	2004-12-08 18:45:55 UTC (rev 225)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/objects/OrderItem.java	2004-12-08 18:52:28 UTC (rev 226)
@@ -1,197 +1,198 @@
 package de.hsharz.provirent.objects;
 
-import java.io.Serializable;
-import java.util.Calendar;
-import org.apache.commons.lang.builder.EqualsBuilder;
-import org.apache.commons.lang.builder.HashCodeBuilder;
-import org.apache.commons.lang.builder.ToStringBuilder;
+import java.io.Serializable;
+import java.util.Calendar;
 
+import org.apache.commons.lang.builder.EqualsBuilder;
+import org.apache.commons.lang.builder.HashCodeBuilder;
+import org.apache.commons.lang.builder.ToStringBuilder;
 
-/** 
- *         Represents an OrderItem.
- *         @author Philipp Schneider
- *       
-*/
+/** 
+ *         Represents an OrderItem.
+ *         @author Philipp Schneider
+ *       
+ */
 public class OrderItem implements Serializable {
 
-    /** identifier field */
-    private Integer orderItemId;
+	/** identifier field */
+	private Integer orderItemId;
 
-    /** nullable persistent field */
-    private Calendar orderTime;
+	/** nullable persistent field */
+	private Calendar orderTime;
 
-    /** nullable persistent field */
-    private Calendar senderTime;
+	/** nullable persistent field */
+	private Calendar senderTime;
 
-    /** nullable persistent field */
-    private Calendar receivingTime;
+	/** nullable persistent field */
+	private Calendar receivingTime;
 
-    /** persistent field */
-    private int duration;
+	/** persistent field */
+	private int duration;
 
-    /** nullable persistent field */
-    private de.hsharz.provirent.objects.Customer customer;
+	/** nullable persistent field */
+	private de.hsharz.provirent.objects.Customer customer;
 
-    /** nullable persistent field */
-    private de.hsharz.provirent.objects.Dvd dvd;
+	/** nullable persistent field */
+	private de.hsharz.provirent.objects.Dvd dvd;
 
-    /** nullable persistent field */
-    private de.hsharz.provirent.objects.Payment payment;
+	/** nullable persistent field */
+	private de.hsharz.provirent.objects.Payment payment;
 
-    /** nullable persistent field */
-    private de.hsharz.provirent.objects.Condition conditionSend;
+	/** nullable persistent field */
+	private de.hsharz.provirent.objects.Condition conditionSend;
 
-    /** nullable persistent field */
-    private de.hsharz.provirent.objects.Condition conditionReceiving;
+	/** nullable persistent field */
+	private de.hsharz.provirent.objects.Condition conditionReceiving;
 
-    /** full constructor */
-    public OrderItem(Calendar orderTime, Calendar senderTime, Calendar receivingTime, int duration, de.hsharz.provirent.objects.Customer customer, de.hsharz.provirent.objects.Dvd dvd, de.hsharz.provirent.objects.Payment payment, de.hsharz.provirent.objects.Condition conditionSend, de.hsharz.provirent.objects.Condition conditionReceiving) {
-        this.orderTime = orderTime;
-        this.senderTime = senderTime;
-        this.receivingTime = receivingTime;
-        this.duration = duration;
-        this.customer = customer;
-        this.dvd = dvd;
-        this.payment = payment;
-        this.conditionSend = conditionSend;
-        this.conditionReceiving = conditionReceiving;
-    }
+	/** full constructor */
+	public OrderItem(Calendar orderTime, Calendar senderTime,
+			Calendar receivingTime, int duration,
+			de.hsharz.provirent.objects.Customer customer,
+			de.hsharz.provirent.objects.Dvd dvd,
+			de.hsharz.provirent.objects.Payment payment,
+			de.hsharz.provirent.objects.Condition conditionSend,
+			de.hsharz.provirent.objects.Condition conditionReceiving) {
+		this.orderTime = orderTime;
+		this.senderTime = senderTime;
+		this.receivingTime = receivingTime;
+		this.duration = duration;
+		this.customer = customer;
+		this.dvd = dvd;
+		this.payment = payment;
+		this.conditionSend = conditionSend;
+		this.conditionReceiving = conditionReceiving;
+	}
 
-    /** default constructor */
-    public OrderItem() {
-    }
+	/** default constructor */
+	public OrderItem() {
+	}
 
-    /** minimal constructor */
-    public OrderItem(int duration) {
-        this.duration = duration;
-    }
+	/** minimal constructor */
+	public OrderItem(int duration) {
+		this.duration = duration;
+	}
 
-    public Integer getOrderItemId() {
-        return this.orderItemId;
-    }
+	public Integer getOrderItemId() {
+		return this.orderItemId;
+	}
 
-    public void setOrderItemId(Integer orderItemId) {
-        this.orderItemId = orderItemId;
-    }
+	public void setOrderItemId(Integer orderItemId) {
+		this.orderItemId = orderItemId;
+	}
 
-    public Calendar getOrderTime() {
-        return this.orderTime;
-    }
+	public Calendar getOrderTime() {
+		return this.orderTime;
+	}
 
-    public void setOrderTime(Calendar orderTime) {
-        this.orderTime = orderTime;
-    }
+	public void setOrderTime(Calendar orderTime) {
+		this.orderTime = orderTime;
+	}
 
-    public Calendar getSenderTime() {
-        return this.senderTime;
-    }
+	public Calendar getSenderTime() {
+		return this.senderTime;
+	}
 
-    public void setSenderTime(Calendar senderTime) {
-        this.senderTime = senderTime;
-    }
+	public void setSenderTime(Calendar senderTime) {
+		this.senderTime = senderTime;
+	}
 
-    public Calendar getReceivingTime() {
-        return this.receivingTime;
-    }
+	public Calendar getReceivingTime() {
+		return this.receivingTime;
+	}
 
-    public void setReceivingTime(Calendar receivingTime) {
-        this.receivingTime = receivingTime;
-    }
+	public void setReceivingTime(Calendar receivingTime) {
+		this.receivingTime = receivingTime;
+	}
 
-    public int getDuration() {
-        return this.duration;
-    }
+	public int getDuration() {
+		return this.duration;
+	}
 
-    public void setDuration(int duration) {
-        this.duration = duration;
-    }
+	public void setDuration(int duration) {
+		this.duration = duration;
+	}
 
-    public de.hsharz.provirent.objects.Customer getCustomer() {
-        return this.customer;
-    }
+	public de.hsharz.provirent.objects.Customer getCustomer() {
+		return this.customer;
+	}
 
-    public void setCustomer(de.hsharz.provirent.objects.Customer customer) {
-        this.customer = customer;
-    }
+	public void setCustomer(de.hsharz.provirent.objects.Customer customer) {
+		this.customer = customer;
+	}
 
-    public de.hsharz.provirent.objects.Dvd getDvd() {
-        return this.dvd;
-    }
+	public de.hsharz.provirent.objects.Dvd getDvd() {
+		return this.dvd;
+	}
 
-    public void setDvd(de.hsharz.provirent.objects.Dvd dvd) {
-        this.dvd = dvd;
-    }
+	public void setDvd(de.hsharz.provirent.objects.Dvd dvd) {
+		this.dvd = dvd;
+	}
 
-    public de.hsharz.provirent.objects.Payment getPayment() {
-        return this.payment;
-    }
+	public de.hsharz.provirent.objects.Payment getPayment() {
+		return this.payment;
+	}
 
-    public void setPayment(de.hsharz.provirent.objects.Payment payment) {
-        this.payment = payment;
-    }
+	public void setPayment(de.hsharz.provirent.objects.Payment payment) {
+		this.payment = payment;
+	}
 
-    public de.hsharz.provirent.objects.Condition getConditionSend() {
-        return this.conditionSend;
-    }
+	public de.hsharz.provirent.objects.Condition getConditionSend() {
+		return this.conditionSend;
+	}
 
-    public void setConditionSend(de.hsharz.provirent.objects.Condition conditionSend) {
-        this.conditionSend = conditionSend;
-    }
+	public void setConditionSend(
+			de.hsharz.provirent.objects.Condition conditionSend) {
+		this.conditionSend = conditionSend;
+	}
 
-    public de.hsharz.provirent.objects.Condition getConditionReceiving() {
-        return this.conditionReceiving;
-    }
+	public de.hsharz.provirent.objects.Condition getConditionReceiving() {
+		return this.conditionReceiving;
+	}
 
-    public void setConditionReceiving(de.hsharz.provirent.objects.Condition conditionReceiving) {
-        this.conditionReceiving = conditionReceiving;
-    }
+	public void setConditionReceiving(
+			de.hsharz.provirent.objects.Condition conditionReceiving) {
+		this.conditionReceiving = conditionReceiving;
+	}
 
-    public String toString() {
-        return new ToStringBuilder(this)
-            .append("orderItemId", getOrderItemId())
-            .append("orderTime", getOrderTime())
-            .append("senderTime", getSenderTime())
-            .append("receivingTime", getReceivingTime())
-            .append("duration", getDuration())
-            .append("customer", getCustomer())
-            .append("dvd", getDvd())
-            .append("payment", getPayment())
-            .append("conditionSend", getConditionSend())
-            .append("conditionReceiving", getConditionReceiving())
-            .toString();
-    }
+	public String toString() {
+		return new ToStringBuilder(this)
+				.append("orderItemId", getOrderItemId()).append("orderTime",
+						getOrderTime()).append("senderTime", getSenderTime())
+				.append("receivingTime", getReceivingTime()).append("duration",
+						getDuration()).append("customer", getCustomer())
+				.append("dvd", getDvd()).append("payment", getPayment())
+				.append("conditionSend", getConditionSend()).append(
+						"conditionReceiving", getConditionReceiving())
+				.toString();
+	}
 
-    public boolean equals(Object other) {
-        if ( (this == other ) ) return true;
-        if ( !(other instanceof OrderItem) ) return false;
-        OrderItem castOther = (OrderItem) other;
-        return new EqualsBuilder()
-            .append(this.getOrderItemId(), castOther.getOrderItemId())
-            .append(this.getOrderTime(), castOther.getOrderTime())
-            .append(this.getSenderTime(), castOther.getSenderTime())
-            .append(this.getReceivingTime(), castOther.getReceivingTime())
-            .append(this.getDuration(), castOther.getDuration())
-            .append(this.getCustomer(), castOther.getCustomer())
-            .append(this.getDvd(), castOther.getDvd())
-            .append(this.getPayment(), castOther.getPayment())
-            .append(this.getConditionSend(), castOther.getConditionSend())
-            .append(this.getConditionReceiving(), castOther.getConditionReceiving())
-            .isEquals();
-    }
+	public boolean equals(Object other) {
+		if ((this == other))
+			return true;
+		if (!(other instanceof OrderItem))
+			return false;
+		OrderItem castOther = (OrderItem) other;
+		return new EqualsBuilder().append(this.getOrderItemId(),
+				castOther.getOrderItemId()).append(this.getOrderTime(),
+				castOther.getOrderTime()).append(this.getSenderTime(),
+				castOther.getSenderTime()).append(this.getReceivingTime(),
+				castOther.getReceivingTime()).append(this.getDuration(),
+				castOther.getDuration()).append(this.getCustomer(),
+				castOther.getCustomer()).append(this.getDvd(),
+				castOther.getDvd()).append(this.getPayment(),
+				castOther.getPayment()).append(this.getConditionSend(),
+				castOther.getConditionSend())
+				.append(this.getConditionReceiving(),
+						castOther.getConditionReceiving()).isEquals();
+	}
 
-    public int hashCode() {
-        return new HashCodeBuilder()
-            .append(getOrderItemId())
-            .append(getOrderTime())
-            .append(getSenderTime())
-            .append(getReceivingTime())
-            .append(getDuration())
-            .append(getCustomer())
-            .append(getDvd())
-            .append(getPayment())
-            .append(getConditionSend())
-            .append(getConditionReceiving())
-            .toHashCode();
-    }
+	public int hashCode() {
+		return new HashCodeBuilder().append(getOrderItemId()).append(
+				getOrderTime()).append(getSenderTime()).append(
+				getReceivingTime()).append(getDuration()).append(getCustomer())
+				.append(getDvd()).append(getPayment()).append(
+						getConditionSend()).append(getConditionReceiving())
+				.toHashCode();
+	}
 
-}
+}
\ No newline at end of file

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java	2004-12-08 18:45:55 UTC (rev 225)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java	2004-12-08 18:52:28 UTC (rev 226)
@@ -45,7 +45,6 @@
 import net.sf.hibernate.expression.Disjunction;
 import net.sf.hibernate.expression.Expression;
 import net.sf.hibernate.expression.Order;
-import net.sf.hibernate.type.Type;
 
 import org.apache.log4j.Logger;
 
@@ -64,709 +63,691 @@
 import de.hsharz.provirent.objects.Subtitle;
 import de.hsharz.provirent.objects.VideoFormat;
 
-
 /**
  * @author Philipp Schneider
  *
  */
 public class Database {
-    /**
-     * Logger for this class
-     */
-    private static final Logger logger = Logger.getLogger(Database.class);
+	/**
+	 * Logger for this class
+	 */
+	private static final Logger logger = Logger.getLogger(Database.class);
 
+	public static void initDB() {
+		try {
+			HibernateUtil.currentSession();
+		} catch (HibernateException e) {
+			e.printStackTrace();
+		} finally {
+			try {
+				HibernateUtil.closeSession();
+			} catch (HibernateException e1) {
+				e1.printStackTrace();
+			}
+		}
 
-    public static void initDB() {
-        try {
-            HibernateUtil.currentSession();
-        } catch (HibernateException e) {
-            e.printStackTrace();
-        } finally {
-            try {
-                HibernateUtil.closeSession();
-            } catch (HibernateException e1) {
-                e1.printStackTrace();
-            }
-        }
-        
-    }
-    
-    /**
-     * This method gets all Directors from the database.
-     * searches for firstname or lastname or id
-     * @param filter 
-     * @return List of Director objects, or an empty List
-     */
-    public static List getDirectors(final String filter){
-        if (logger.isDebugEnabled()) {
-            logger.debug("getDirectors() - start. String filter= "+filter);
-        }
-        //init the returnlist
-        List returnlist = new ArrayList();
+	}
 
-        Session s = null;
-        Transaction tx = null;
-        try {
-            //get new Session and begin Transaction
-            s = HibernateUtil.currentSession();
-            tx = s.beginTransaction();
+	/**
+	 * This method gets all Directors from the database.
+	 * searches for firstname or lastname or id
+	 * @param filter 
+	 * @return List of Director objects, or an empty List
+	 */
+	public static List getDirectors(final String filter) {
+		if (logger.isDebugEnabled()) {
+			logger.debug("getDirectors() - start. String filter= " + filter);
+		}
+		//init the returnlist
+		List returnlist = new ArrayList();
 
-            try {
-                
-                //init the criteria
-                Criteria criteria = s.createCriteria(Director.class);
-                //any of the criteria 
-                Disjunction any = Expression.disjunction();
+		Session s = null;
+		Transaction tx = null;
+		try {
+			//get new Session and begin Transaction
+			s = HibernateUtil.currentSession();
+			tx = s.beginTransaction();
 
-                //if filter not empty
-                if (filter != null && !filter.equalsIgnoreCase("")) {
-                    any.add(Expression.like("lastName", "%"+filter+"%"));
-                    any.add(Expression.like("firstName", "%"+filter+"%"));
-                    
-                    //maybe we are searching for the id?
-                    try {
-                        any.add(Expression.eq("directorId", new Integer(Integer.parseInt(filter))));
-                    } catch (Exception e) {
-                    }
-                    
-                }
-                //add all criteria
-                criteria.add(any);
-                //get the results
-                returnlist = criteria.list();
+			try {
 
+				//init the criteria
+				Criteria criteria = s.createCriteria(Director.class);
+				//any of the criteria 
+				Disjunction any = Expression.disjunction();
 
-            } catch (Exception e) {
-                if (tx != null) {
-                    logger
-                            .error(
-                                    "getDirectors() - Something went wrong here; discard all partial changes",
-                                    e);
+				//if filter not empty
+				if (filter != null && !filter.equalsIgnoreCase("")) {
+					any.add(Expression.like("lastName", "%" + filter + "%"));
+					any.add(Expression.like("firstName", "%" + filter + "%"));
 
-                    // Something went wrong; discard all partial changes
-                    tx.rollback();
-                }
+					//maybe we are searching for the id?
+					try {
+						any.add(Expression.eq("directorId", new Integer(Integer
+								.parseInt(filter))));
+					} catch (Exception e) {
+					}
 
-		                
-            }
+				}
+				//add all criteria
+				criteria.add(any);
+				//get the results
+				returnlist = criteria.list();
 
-        } catch (Exception e) {
-            logger.error(
-                    "getDirectors() - Error while trying to do Transaction",
-                    e);
-            returnlist = new ArrayList();
-        } finally {
-            try {
-                // No matter what, close the session
-                HibernateUtil.closeSession();
-            } catch (HibernateException e1) {
-                logger.error("getDirectors() - Could not Close the Session", e1);
-            }
-        }
+			} catch (Exception e) {
+				if (tx != null) {
+					logger
+							.error(
+									"getDirectors() - Something went wrong here; discard all partial changes",
+									e);
 
-        if (logger.isDebugEnabled()) {
-            logger.debug("getDirectors() - end");
-        }
-        return returnlist;
-        
+					// Something went wrong; discard all partial changes
+					tx.rollback();
+				}
 
-    }
+			}
 
-    public static Object saveObject(Object o) throws DataBaseException{
-        if (logger.isDebugEnabled()) {
-            logger
-                    .debug("saveObject(Object o = " + o
-                            + ") - start");
-        }
-        int exception =0;
-        
-        Session s = null;
-        Transaction tx = null;
-  
-            try {
-                //get new Session and begin Transaction
-                s = HibernateUtil.currentSession();
-                tx = s.beginTransaction();
-                try{
+		} catch (Exception e) {
+			logger.error(
+					"getDirectors() - Error while trying to do Transaction", e);
+			returnlist = new ArrayList();
+		} finally {
+			try {
+				// No matter what, close the session
+				HibernateUtil.closeSession();
+			} catch (HibernateException e1) {
+				logger
+						.error("getDirectors() - Could not Close the Session",
+								e1);
+			}
+		}
 
-                    //s.saveOrUpdate(o);
-                    s.save(o);
-                } catch (HibernateException e) {
-                    logger.error("saveObject(). Fehler beim Speichern/Updaten "
-                            +"des Objectes:"+o+" Exception: "+e);
-                    exception = 1;
-                }
-                tx.commit();
-                s.flush();
+		if (logger.isDebugEnabled()) {
+			logger.debug("getDirectors() - end");
+		}
+		return returnlist;
 
-                
-            } catch (HibernateException e) {
-                //exception = 2;
-                logger
-                .error(
-                        "saveObject() - Something went wrong here; discard all partial changes",
-                        e);
-                
-                if (tx != null) {
-                    try {
-                        // Something went wrong; discard all partial changes
-                        tx.rollback();
-                    } catch (HibernateException e1) {
-                        e1.printStackTrace();
-                    }
-                }    
+	}
 
-            } finally {
-                try {
-                    // No matter what, close the session
-                    HibernateUtil.closeSession();
-                } catch (HibernateException e1) {
-                    
-                    logger.error("saveObject() - Could not Close the Session", e1);
-                    
-                }
-            }
+	public static Object saveObject(Object o) throws DataBaseException {
+		if (logger.isDebugEnabled()) {
+			logger.debug("saveObject(Object o = " + o + ") - start");
+		}
+		int exception = 0;
 
-            if (exception > 0) {
-                throw new DataBaseException("exception");
-            }
-            
-        if (logger.isDebugEnabled()) {
-            logger.debug("saveObject(VideoFormat) - end");
-        }
-        return o;
-    }
-    
+		Session s = null;
+		Transaction tx = null;
 
+		try {
+			//get new Session and begin Transaction
+			s = HibernateUtil.currentSession();
+			tx = s.beginTransaction();
+			try {
 
-    public static Object updateObject(Object o) throws DataBaseException{
-        if (logger.isDebugEnabled()) {
-            logger
-                    .debug("updateObject(Object o = " + o
-                            + ") - start");
-        }
-        int exception =0;
-        
-        Session s = null;
-        Transaction tx = null;
-  
-            try {
-                //get new Session and begin Transaction
-                s = HibernateUtil.currentSession();
-                try{
-                		logger.debug("Object "+o.getClass().getName() + " String:"+o);
-                    s.update(o);
-                } catch (HibernateException e) {
-                    logger.error("updateObject(). Fehler beim Updaten "
-                            +"des Objectes:"+o+" Exception: "+e);
-                    exception = 1;
-                }
-                s.flush();
-               
-                
-            } catch (HibernateException e) {
-                //exception = 2;
-                logger
-                .error(
-                        "updateObject() - Something went wrong here; discard all partial changes",
-                        e);
-                
-                if (tx != null) {
-                    try {
-                        // Something went wrong; discard all partial changes
-                        tx.rollback();
-                    } catch (HibernateException e1) {
-                        e1.printStackTrace();
-                    }
-                }    
+				//s.saveOrUpdate(o);
+				s.save(o);
+			} catch (HibernateException e) {
+				logger.error("saveObject(). Fehler beim Speichern/Updaten "
+						+ "des Objectes:" + o + " Exception: " + e);
+				exception = 1;
+			}
+			tx.commit();
+			s.flush();
 
-            } finally {
-                try {
-                    // No matter what, close the session
-                    HibernateUtil.closeSession();
-                } catch (HibernateException e1) {
-                    
-                    logger.error("updateObject() - Could not Close the Session", e1);
-                    
-                }
-            }
+		} catch (HibernateException e) {
+			//exception = 2;
+			logger
+					.error(
+							"saveObject() - Something went wrong here; discard all partial changes",
+							e);
 
-            if (exception > 0) {
-                throw new DataBaseException("exception");
-            }
-            
-        if (logger.isDebugEnabled()) {
-            logger.debug("updateObject(VideoFormat) - end");
-        }
-        return o;
-    }
+			if (tx != null) {
+				try {
+					// Something went wrong; discard all partial changes
+					tx.rollback();
+				} catch (HibernateException e1) {
+					e1.printStackTrace();
+				}
+			}
 
-    
-    public static void deleteObject(Object o) throws DataBaseException{
-        if (logger.isDebugEnabled()) {
-            logger.debug("deleteObject(Object o = " + o + ") - start");
-        }
-        int exception =0;
-        
-        Session s = null;
-        Transaction tx = null;
-  
-            try {
-                //get new Session and begin Transaction
-                s = HibernateUtil.currentSession();
-                tx = s.beginTransaction();
-                
-                try{
-                    
-                    s.delete(o);
-                    
-                
-                } catch (HibernateException e) {
-                    logger.error("deleteObject(). Fehler beim L?schen "
-                            + "des Objectes:" + o + " Exception: " + e);
-                    exception = 1;
-                }
-               
-                
+		} finally {
+			try {
+				// No matter what, close the session
+				HibernateUtil.closeSession();
+			} catch (HibernateException e1) {
 
-                //s.flush();
-                
-                tx.commit();
-                
-                o= null;
-                
-            } catch (HibernateException e) {
-                exception = 2;
-                logger.error("Message "+  e.getMessages().toString()); 
-                logger
-                        .error(
-                                "deleteObject(Object) - Something went wrong here; discard all partial changes",
-                                e);
-                if (tx != null) {
-                    try {
-                        // Something went wrong; discard all partial changes
-                        tx.rollback();
-                    } catch (HibernateException e1) {
-                        e1.printStackTrace();
-                    }
-                }    
+				logger.error("saveObject() - Could not Close the Session", e1);
 
-            } finally {
-                try {
-                    // No matter what, close the session
-                    HibernateUtil.closeSession();
-                } catch (HibernateException e1) {
-                    
-                    logger.error("deleteObject(Object) - Could not Close the Session",
-                                  e1);
-                    
-                }
-            }
+			}
+		}
 
-            if (exception > 0) {
-                throw new DataBaseException("exception");
-            }
-            
-        if (logger.isDebugEnabled()) {
-            logger.debug("deleteObject(Object) - end");
-        }
-    }
-    
-    
-    /**
-     * This method gets all VideoFormats from the database.
-     * searches for firstname or lastname or id
-     * @param filter 
-     * @return List of Director objects, or an empty List
-     */
-    public static List getVideoFormat(final String filter){
-        if (logger.isDebugEnabled()) {
-            logger.debug("getVideoFormat() - start. String filter= "+filter);
-        }
-        //init the returnlist
-        List returnlist = new ArrayList();
+		if (exception > 0) {
+			throw new DataBaseException("exception");
+		}
 
-        Session s = null;
-        
-        try {
-            //get new Session and begin Transaction
-            s = HibernateUtil.currentSession();
-                
-                //init the criteria
-                Criteria criteria = s.createCriteria(VideoFormat.class);
-                //any of the criteria 
-                Disjunction any = Expression.disjunction();
+		if (logger.isDebugEnabled()) {
+			logger.debug("saveObject(VideoFormat) - end");
+		}
+		return o;
+	}
 
-                //if filter not empty
-                if (filter != null && !filter.equalsIgnoreCase("")) {
-                    any.add(Expression.like("name", "%"+filter+"%"));
-                    any.add(Expression.like("shortname", "%"+filter+"%"));
-                    
-                    //maybe we are searching for the id?
-                    try {
-                        any.add(Expression.eq("videoFormatId", new Integer(Integer.parseInt(filter))));
-                    } catch (Exception e) {
-                    }
-                    
-                }
-                //add all criteria
-                criteria.add(any);
-                //get the results
-                returnlist = criteria.list();
+	public static Object updateObject(Object o) throws DataBaseException {
+		if (logger.isDebugEnabled()) {
+			logger.debug("updateObject(Object o = " + o + ") - start");
+		}
+		int exception = 0;
 
+		Session s = null;
+		Transaction tx = null;
 
+		try {
+			//get new Session and begin Transaction
+			s = HibernateUtil.currentSession();
+			try {
+				logger.debug("Object " + o.getClass().getName() + " String:"
+						+ o);
+				s.update(o);
+			} catch (HibernateException e) {
+				logger.error("updateObject(). Fehler beim Updaten "
+						+ "des Objectes:" + o + " Exception: " + e);
+				exception = 1;
+			}
+			s.flush();
 
+		} catch (HibernateException e) {
+			//exception = 2;
+			logger
+					.error(
+							"updateObject() - Something went wrong here; discard all partial changes",
+							e);
 
-        } catch (Exception e) {
-            logger.error(
-                    "getVideoFormat() - Error while trying to do Transaction",
-                    e);
-            returnlist = new ArrayList();
-        } finally {
-            try {
-                // No matter what, close the session
-                HibernateUtil.closeSession();
-            } catch (HibernateException e1) {
-                logger.error("getVideoFormat() - Could not Close the Session", e1);
-            }
-        }
+			if (tx != null) {
+				try {
+					// Something went wrong; discard all partial changes
+					tx.rollback();
+				} catch (HibernateException e1) {
+					e1.printStackTrace();
+				}
+			}
 
-        if (logger.isDebugEnabled()) {
-            logger.debug("getVideoFormat() - end");
-        }
-        return returnlist;
-        
+		} finally {
+			try {
+				// No matter what, close the session
+				HibernateUtil.closeSession();
+			} catch (HibernateException e1) {
 
-    }
+				logger
+						.error("updateObject() - Could not Close the Session",
+								e1);
 
-    
-    public static VideoFormat getSingleVideoFormat(final int id){
-        if (logger.isDebugEnabled()) {
-            logger.debug("getSingleVideoFormat() - start. int filter= "+id);
-        }
-        //init the returnlist
-        VideoFormat returnobject = null;
+			}
+		}
 
-        Session s = null;
-        Transaction tx = null;
-        try {
-            //get new Session and begin Transaction
-            s = HibernateUtil.currentSession();
+		if (exception > 0) {
+			throw new DataBaseException("exception");
+		}
 
-                returnobject = (VideoFormat)s.get(VideoFormat.class, new Integer(id));
+		if (logger.isDebugEnabled()) {
+			logger.debug("updateObject(VideoFormat) - end");
+		}
+		return o;
+	}
 
-        } catch (Exception e) {
-            logger.error(
-                    "getSingleVideoFormat() - Error while trying to do Transaction",
-                    e);
-            
-        } finally {
-            try {
-                // No matter what, close the session
-                HibernateUtil.closeSession();
-            } catch (HibernateException e1) {
-                logger.error("getSingleVideoFormat() - Could not Close the Session", e1);
-            }
-        }
+	public static void deleteObject(Object o) throws DataBaseException {
+		if (logger.isDebugEnabled()) {
+			logger.debug("deleteObject(Object o = " + o + ") - start");
+		}
+		int exception = 0;
 
-        if (logger.isDebugEnabled()) {
-            logger.debug("getSingleVideoFormat() - end");
-        }
-        return returnobject;
-        
+		Session s = null;
+		Transaction tx = null;
 
-    }
-    
-    
-    /**
-     * This method gets all AudioFormats from the database.
-     * searches for firstname or lastname or id
-     * @param filter 
-     * @return List of Director objects, or an empty List
-     */
-    public static List getAudioFormat(final String filter){
-        if (logger.isDebugEnabled()) {
-            logger.debug("getAudioFormat() - start. String filter= "+filter);
-        }
-        //init the returnlist
-        List returnlist = new ArrayList();
+		try {
+			//get new Session and begin Transaction
+			s = HibernateUtil.currentSession();
+			tx = s.beginTransaction();
 
-        Session s = null;
+			try {
 
-        try {
-            //get new Session and begin Transaction
-            s = HibernateUtil.currentSession();
-                
-                //init the criteria
-                Criteria criteria = s.createCriteria(AudioFormat.class);
-                //any of the criteria 
-                Disjunction any = Expression.disjunction();
+				s.delete(o);
 
-                //if filter not empty
-                if (filter != null && !filter.equalsIgnoreCase("")) {
-                    any.add(Expression.like("name", "%"+filter+"%"));
-                    any.add(Expression.like("shortname", "%"+filter+"%"));
-                    
-                    //maybe we are searching for the id?
-                    try {
-                        any.add(Expression.eq("audioFormatId", new Integer(Integer.parseInt(filter))));
-                    } catch (Exception e) {
-                    }
-                    
-                }
-                //add all criteria
-                criteria.add(any);
-                //get the results
-                returnlist = criteria.list();
+			} catch (HibernateException e) {
+				logger.error("deleteObject(). Fehler beim L?schen "
+						+ "des Objectes:" + o + " Exception: " + e);
+				exception = 1;
+			}
 
+			//s.flush();
 
+			tx.commit();
 
-        } catch (Exception e) {
-            logger.error(
-                    "getAudioFormat() - Error while trying to do Transaction",
-                    e);
-            returnlist = new ArrayList();
-        } finally {
-            try {
-                // No matter what, close the session
-                HibernateUtil.closeSession();
-            } catch (HibernateException e1) {
-                logger.error("getAudioFormat() - Could not Close the Session", e1);
-            }
-        }
+			o = null;
 
-        if (logger.isDebugEnabled()) {
-            logger.debug("getAudioFormat() - end");
-        }
-        return returnlist;
-        
+		} catch (HibernateException e) {
+			exception = 2;
+			logger.error("Message " + e.getMessages().toString());
+			logger
+					.error(
+							"deleteObject(Object) - Something went wrong here; discard all partial changes",
+							e);
+			if (tx != null) {
+				try {
+					// Something went wrong; discard all partial changes
+					tx.rollback();
+				} catch (HibernateException e1) {
+					e1.printStackTrace();
+				}
+			}
 
-    }
-    
+		} finally {
+			try {
+				// No matter what, close the session
+				HibernateUtil.closeSession();
+			} catch (HibernateException e1) {
+
+				logger.error(
+						"deleteObject(Object) - Could not Close the Session",
+						e1);
+
+			}
+		}
+
+		if (exception > 0) {
+			throw new DataBaseException("exception");
+		}
+
+		if (logger.isDebugEnabled()) {
+			logger.debug("deleteObject(Object) - end");
+		}
+	}
+
 	/**
+	 * This method gets all VideoFormats from the database.
+	 * searches for firstname or lastname or id
+	 * @param filter 
+	 * @return List of Director objects, or an empty List
+	 */
+	public static List getVideoFormat(final String filter) {
+		if (logger.isDebugEnabled()) {
+			logger.debug("getVideoFormat() - start. String filter= " + filter);
+		}
+		//init the returnlist
+		List returnlist = new ArrayList();
+
+		Session s = null;
+
+		try {
+			//get new Session and begin Transaction
+			s = HibernateUtil.currentSession();
+
+			//init the criteria
+			Criteria criteria = s.createCriteria(VideoFormat.class);
+			//any of the criteria 
+			Disjunction any = Expression.disjunction();
+
+			//if filter not empty
+			if (filter != null && !filter.equalsIgnoreCase("")) {
+				any.add(Expression.like("name", "%" + filter + "%"));
+				any.add(Expression.like("shortname", "%" + filter + "%"));
+
+				//maybe we are searching for the id?
+				try {
+					any.add(Expression.eq("videoFormatId", new Integer(Integer
+							.parseInt(filter))));
+				} catch (Exception e) {
+				}
+
+			}
+			//add all criteria
+			criteria.add(any);
+			//get the results
+			returnlist = criteria.list();
+
+		} catch (Exception e) {
+			logger.error(
+					"getVideoFormat() - Error while trying to do Transaction",
+					e);
+			returnlist = new ArrayList();
+		} finally {
+			try {
+				// No matter what, close the session
+				HibernateUtil.closeSession();
+			} catch (HibernateException e1) {
+				logger.error("getVideoFormat() - Could not Close the Session",
+						e1);
+			}
+		}
+
+		if (logger.isDebugEnabled()) {
+			logger.debug("getVideoFormat() - end");
+		}
+		return returnlist;
+
+	}
+
+	public static VideoFormat getSingleVideoFormat(final int id) {
+		if (logger.isDebugEnabled()) {
+			logger.debug("getSingleVideoFormat() - start. int filter= " + id);
+		}
+		//init the returnlist
+		VideoFormat returnobject = null;
+
+		Session s = null;
+		Transaction tx = null;
+		try {
+			//get new Session and begin Transaction
+			s = HibernateUtil.currentSession();
+
+			returnobject = (VideoFormat) s.get(VideoFormat.class, new Integer(
+					id));
+
+		} catch (Exception e) {
+			logger
+					.error(
+							"getSingleVideoFormat() - Error while trying to do Transaction",
+							e);
+
+		} finally {
+			try {
+				// No matter what, close the session
+				HibernateUtil.closeSession();
+			} catch (HibernateException e1) {
+				logger.error(
+						"getSingleVideoFormat() - Could not Close the Session",
+						e1);
+			}
+		}
+
+		if (logger.isDebugEnabled()) {
+			logger.debug("getSingleVideoFormat() - end");
+		}
+		return returnobject;
+
+	}
+
+	/**
+	 * This method gets all AudioFormats from the database.
+	 * searches for firstname or lastname or id
+	 * @param filter 
+	 * @return List of Director objects, or an empty List
+	 */
+	public static List getAudioFormat(final String filter) {
+		if (logger.isDebugEnabled()) {
+			logger.debug("getAudioFormat() - start. String filter= " + filter);
+		}
+		//init the returnlist
+		List returnlist = new ArrayList();
+
+		Session s = null;
+
+		try {
+			//get new Session and begin Transaction
+			s = HibernateUtil.currentSession();
+
+			//init the criteria
+			Criteria criteria = s.createCriteria(AudioFormat.class);
+			//any of the criteria 
+			Disjunction any = Expression.disjunction();
+
+			//if filter not empty
+			if (filter != null && !filter.equalsIgnoreCase("")) {
+				any.add(Expression.like("name", "%" + filter + "%"));
+				any.add(Expression.like("shortname", "%" + filter + "%"));
+
+				//maybe we are searching for the id?
+				try {
+					any.add(Expression.eq("audioFormatId", new Integer(Integer
+							.parseInt(filter))));
+				} catch (Exception e) {
+				}
+
+			}
+			//add all criteria
+			criteria.add(any);
+			//get the results
+			returnlist = criteria.list();
+
+		} catch (Exception e) {
+			logger.error(
+					"getAudioFormat() - Error while trying to do Transaction",
+					e);
+			returnlist = new ArrayList();
+		} finally {
+			try {
+				// No matter what, close the session
+				HibernateUtil.closeSession();
+			} catch (HibernateException e1) {
+				logger.error("getAudioFormat() - Could not Close the Session",
+						e1);
+			}
+		}
+
+		if (logger.isDebugEnabled()) {
+			logger.debug("getAudioFormat() - end");
+		}
+		return returnlist;
+
+	}
+
+	/**
 	 * This method gets all Genres from the database.
 	 * searches for firstname or lastname or id
 	 * @param filter 
 	 * @return List of Director objects, or an empty List
 	 */
-    public static List getGenre(final String filter){
-        return getGenreExcept(filter, new ArrayList());
-    }
-    
-	public static List getGenreExcept(final String filter, List genre){
-	    if (logger.isDebugEnabled()) {
-	        logger.debug("getGenreExcept() - start. String filter= "+filter);
-	    }
-	    
-	    //check if elements in list are Genre Objects
-	    if (genre.size() > 0){
-	        if ( !(genre.get(0) instanceof Genre) ){
-	            logger.error("Elemente in Liste sind keine Genre");
-	            return new ArrayList();
-	        }
-	    }	    
-	    //init the returnlist
-	    List returnlist = new ArrayList();
-	
-	    Session s = null;
-	    
-	    try {
-	        //get new Session and begin Transaction
-	        s = HibernateUtil.currentSession();
-	            
-	            //init the criteria
-	            Criteria criteria = s.createCriteria(Genre.class);
-	            //any of the criteria 
-	            Disjunction any = Expression.disjunction();
-	
-	            //if filter not empty
-	            if (filter != null && !filter.equalsIgnoreCase("")) {
-	                any.add(Expression.like("name", "%"+filter+"%"));
-	                any.add(Expression.like("shortname", "%"+filter+"%"));
-	                
-	                //maybe we are searching for the id?
-	                try {
-	                    any.add(Expression.eq("genreId", new Integer(Integer.parseInt(filter))));
-	                } catch (Exception e) {
-	                }
-	                
-	            }
-	            logger.debug("Anzahl der Genre:"+genre.size());
-	            for (int i = 0; i < genre.size(); i++) {
-                    Genre tmp = (Genre)genre.get(i);
-                    criteria.add(Expression.not(Expression.eq("genreId",tmp.getGenreId())));
-                }	            
-	            
-	            //add all criteria
-	            criteria.add(any);
-	            //get the results
-	            returnlist = criteria.list();
-	
-	
-	
-	
-	    } catch (Exception e) {
-	        logger.error(
-	                "getGenreExcept() - Error while trying to do Transaction",
-	                e);
-	        returnlist = new ArrayList();
-	    } finally {
-	        try {
-	            // No matter what, close the session
-	            HibernateUtil.closeSession();
-	        } catch (HibernateException e1) {
-	            logger.error("getGenreExcept() - Could not Close the Session", e1);
-	        }
-	    }
-	
-	    if (logger.isDebugEnabled()) {
-	        logger.debug("getGenreExcept() - end");
-	    }
-	    return returnlist;
-	    
-	
+	public static List getGenre(final String filter) {
+		return getGenreExcept(filter, new ArrayList());
 	}
-	
-	
-	public static Genre getSingleGenre(final int id){
-	    if (logger.isDebugEnabled()) {
-	        logger.debug("getSingleGenre() - start. int filter= "+id);
-	    }
-	    //init the returnlist
-	    Genre returnobject = null;
-	
-	    Session s = null;
-	    Transaction tx = null;
-	    try {
-	        //get new Session and begin Transaction
-	        s = HibernateUtil.currentSession();
-	
-	            returnobject = (Genre)s.get(Genre.class, new Integer(id));
-	
-	    } catch (Exception e) {
-	        logger.error(
-	                "getSingleGenre() - Error while trying to do Transaction",
-	                e);
-	        
-	    } finally {
-	        try {
-	            // No matter what, close the session
-	            HibernateUtil.closeSession();
-	        } catch (HibernateException e1) {
-	            logger.error("getSingleGenre() - Could not Close the Session", e1);
-	        }
-	    }
-	
-	    if (logger.isDebugEnabled()) {
-	        logger.debug("getSingleGenre() - end");
-	    }
-	    return returnobject;
-	    
-	
+
+	public static List getGenreExcept(final String filter, List genre) {
+		if (logger.isDebugEnabled()) {
+			logger.debug("getGenreExcept() - start. String filter= " + filter);
+		}
+
+		//check if elements in list are Genre Objects
+		if (genre.size() > 0) {
+			if (!(genre.get(0) instanceof Genre)) {
+				logger.error("Elemente in Liste sind keine Genre");
+				return new ArrayList();
+			}
+		}
+		//init the returnlist
+		List returnlist = new ArrayList();
+
+		Session s = null;
+
+		try {
+			//get new Session and begin Transaction
+			s = HibernateUtil.currentSession();
+
+			//init the criteria
+			Criteria criteria = s.createCriteria(Genre.class);
+			//any of the criteria 
+			Disjunction any = Expression.disjunction();
+
+			//if filter not empty
+			if (filter != null && !filter.equalsIgnoreCase("")) {
+				any.add(Expression.like("name", "%" + filter + "%"));
+				any.add(Expression.like("shortname", "%" + filter + "%"));
+
+				//maybe we are searching for the id?
+				try {
+					any.add(Expression.eq("genreId", new Integer(Integer
+							.parseInt(filter))));
+				} catch (Exception e) {
+				}
+
+			}
+			logger.debug("Anzahl der Genre:" + genre.size());
+			for (int i = 0; i < genre.size(); i++) {
+				Genre tmp = (Genre) genre.get(i);
+				criteria.add(Expression.not(Expression.eq("genreId", tmp
+						.getGenreId())));
+			}
+
+			//add all criteria
+			criteria.add(any);
+			//get the results
+			returnlist = criteria.list();
+
+		} catch (Exception e) {
+			logger.error(
+					"getGenreExcept() - Error while trying to do Transaction",
+					e);
+			returnlist = new ArrayList();
+		} finally {
+			try {
+				// No matter what, close the session
+				HibernateUtil.closeSession();
+			} catch (HibernateException e1) {
+				logger.error("getGenreExcept() - Could not Close the Session",
+						e1);
+			}
+		}
+
+		if (logger.isDebugEnabled()) {
+			logger.debug("getGenreExcept() - end");
+		}
+		return returnlist;
+
 	}
-	
+
+	public static Genre getSingleGenre(final int id) {
+		if (logger.isDebugEnabled()) {
+			logger.debug("getSingleGenre() - start. int filter= " + id);
+		}
+		//init the returnlist
+		Genre returnobject = null;
+
+		Session s = null;
+		Transaction tx = null;
+		try {
+			//get new Session and begin Transaction
+			s = HibernateUtil.currentSession();
+
+			returnobject = (Genre) s.get(Genre.class, new Integer(id));
+
+		} catch (Exception e) {
+			logger.error(
+					"getSingleGenre() - Error while trying to do Transaction",
+					e);
+
+		} finally {
+			try {
+				// No matter what, close the session
+				HibernateUtil.closeSession();
+			} catch (HibernateException e1) {
+				logger.error("getSingleGenre() - Could not Close the Session",
+						e1);
+			}
+		}
+
+		if (logger.isDebugEnabled()) {
+			logger.debug("getSingleGenre() - end");
+		}
+		return returnobject;
+
+	}
+
 	/**
 	 * This method gets all Languages from the database.
 	 * searches for firstname or lastname or id
 	 * @param filter 
 	 * @return List of Director objects, or an empty List
 	 */
-	public static List getLanguage(final String filter){
-	    if (logger.isDebugEnabled()) {
-	        logger.debug("getLanguage() - start. String filter= "+filter);
-	    }
-	    //init the returnlist
-	    List returnlist = new ArrayList();
-	
-	    Session s = null;
-	    
-	    try {
-	        //get new Session and begin Transaction
-	        s = HibernateUtil.currentSession();
-	            
-	            //init the criteria
-	            Criteria criteria = s.createCriteria(Language.class);
-	            //any of the criteria 
-	            Disjunction any = Expression.disjunction();
-	
-	            //if filter not empty
-	            if (filter != null && !filter.equalsIgnoreCase("")) {
-	                any.add(Expression.like("name", "%"+filter+"%"));
-	                any.add(Expression.like("shortname", "%"+filter+"%"));
-	                
-	                //maybe we are searching for the id?
-	                try {
-	                    any.add(Expression.eq("languageId", new Integer(Integer.parseInt(filter))));
-	                } catch (Exception e) {
-	                }
-	                
-	            }
-	            //add all criteria
-	            criteria.add(any);
-	            //get the results
-	            returnlist = criteria.list();
-	
-	
-	
-	
-	    } catch (Exception e) {
-	        logger.error(
-	                "getLanguage() - Error while trying to do Transaction",
-	                e);
-	        returnlist = new ArrayList();
-	    } finally {
-	        try {
-	            // No matter what, close the session
-	            HibernateUtil.closeSession();
-	        } catch (HibernateException e1) {
-	            logger.error("getLanguage() - Could not Close the Session", e1);
-	        }
-	    }
-	
-	    if (logger.isDebugEnabled()) {
-	        logger.debug("getLanguage() - end");
-	    }
-	    return returnlist;
-	    
-	
+	public static List getLanguage(final String filter) {
+		if (logger.isDebugEnabled()) {
+			logger.debug("getLanguage() - start. String filter= " + filter);
+		}
+		//init the returnlist
+		List returnlist = new ArrayList();
+
+		Session s = null;
+
+		try {
+			//get new Session and begin Transaction
+			s = HibernateUtil.currentSession();
+
+			//init the criteria
+			Criteria criteria = s.createCriteria(Language.class);
+			//any of the criteria 
+			Disjunction any = Expression.disjunction();
+
+			//if filter not empty
+			if (filter != null && !filter.equalsIgnoreCase("")) {
+				any.add(Expression.like("name", "%" + filter + "%"));
+				any.add(Expression.like("shortname", "%" + filter + "%"));
+
+				//maybe we are searching for the id?
+				try {
+					any.add(Expression.eq("languageId", new Integer(Integer
+							.parseInt(filter))));
+				} catch (Exception e) {
+				}
+
+			}
+			//add all criteria
+			criteria.add(any);
+			//get the results
+			returnlist = criteria.list();
+
+		} catch (Exception e) {
+			logger.error(
+					"getLanguage() - Error while trying to do Transaction", e);
+			returnlist = new ArrayList();
+		} finally {
+			try {
+				// No matter what, close the session
+				HibernateUtil.closeSession();
+			} catch (HibernateException e1) {
+				logger.error("getLanguage() - Could not Close the Session", e1);
+			}
+		}
+
+		if (logger.isDebugEnabled()) {
+			logger.debug("getLanguage() - end");
+		}
+		return returnlist;
+
 	}
-	
-	
-	public static Language getSingleLanguage(final int id){
-	    if (logger.isDebugEnabled()) {
-	        logger.debug("getSingleLanguage() - start. int filter= "+id);
-	    }
-	    //init the returnlist
-	    Language returnobject = null;
-	
-	    Session s = null;
-	    Transaction tx = null;
-	    try {
-	        //get new Session and begin Transaction
-	        s = HibernateUtil.currentSession();
-	
-	            returnobject = (Language)s.get(Language.class, new Integer(id));
-	
-	    } catch (Exception e) {
-	        logger.error(
-	                "getSingleLanguage() - Error while trying to do Transaction",
-	                e);
-	        
-	    } finally {
-	        try {
-	            // No matter what, close the session
-	            HibernateUtil.closeSession();
-	        } catch (HibernateException e1) {
-	            logger.error("getSingleLanguage() - Could not Close the Session", e1);
-	        }
-	    }
-	
-	    if (logger.isDebugEnabled()) {
-	        logger.debug("getSingleLanguage() - end");
-	    }
-	    return returnobject;
-	    
-	
+
+	public static Language getSingleLanguage(final int id) {
+		if (logger.isDebugEnabled()) {
+			logger.debug("getSingleLanguage() - start. int filter= " + id);
+		}
+		//init the returnlist
+		Language returnobject = null;
+
+		Session s = null;
+		Transaction tx = null;
+		try {
+			//get new Session and begin Transaction
+			s = HibernateUtil.currentSession();
+
+			returnobject = (Language) s.get(Language.class, new Integer(id));
+
+		} catch (Exception e) {
+			logger
+					.error(
+							"getSingleLanguage() - Error while trying to do Transaction",
+							e);
+
+		} finally {
+			try {
+				// No matter what, close the session
+				HibernateUtil.closeSession();
+			} catch (HibernateException e1) {
+				logger
+						.error(
+								"getSingleLanguage() - Could not Close the Session",
+								e1);
+			}
+		}
+
+		if (logger.isDebugEnabled()) {
+			logger.debug("getSingleLanguage() - end");
+		}
+		return returnobject;
+
 	}
 
 	/**
@@ -775,428 +756,423 @@
 	 * @param filter 
 	 * @return List of Image objects, or an empty List
 	 */
-	public static List getImages(final String filter){
-	    return getImagesExcept(filter, new ArrayList());
+	public static List getImages(final String filter) {
+		return getImagesExcept(filter, new ArrayList());
 	}
-	public static List getImagesExcept(final String filter, List images){
-	    if (logger.isDebugEnabled()) {
-	        logger.debug("getImagesExcept() - start. String filter= "+filter);
-	    }
-	    //check if elements in list are Director Objects
-	    if (images.size() > 0){
-	        if ( !(images.get(0) instanceof Image) ){
-	            logger.error("Elemente in Liste sind keine Image");
-	            return new ArrayList();
-	        }
-	    }	    
-	    
-	    //init the returnlist
-	    List returnlist = new ArrayList();
-	
-	    Session s = null;
-	    
-	    try {
-	        //get new Session and begin Transaction
-	        s = HibernateUtil.currentSession();
-	            
-	            //init the criteria
-	            Criteria criteria = s.createCriteria(Image.class);
-	            //any of the criteria 
-	            Disjunction any = Expression.disjunction();
-	
-	            //if filter not empty
-	            if (filter != null && !filter.equalsIgnoreCase("")) {
-	                any.add(Expression.like("imageFileName", "%"+filter+"%"));
-	                any.add(Expression.like("imageFileDescription", "%"+filter+"%"));
-	                
-	                //maybe we are searching for the id?
-	                try {
-	                    any.add(Expression.eq("imageId", new Integer(Integer.parseInt(filter))));
-	                } catch (Exception e) {
-	                }
-	            }
 
-	            for (int i = 0; i < images.size(); i++) {
-                    Image tmp = (Image)images.get(i);
-                    criteria.add(Expression.not(Expression.eq("imageId",tmp.getImageId())));
-                }
-	            
-	            //add all criteria
-	            criteria.add(any);
-	            //get the results
-	            returnlist = criteria.list();
-	
-	
-	
-	
-	    } catch (Exception e) {
-	        logger.error(
-	                "getImagesExcept() - Error while trying to do Transaction",
-	                e);
-	        returnlist = new ArrayList();
-	    } finally {
-	        try {
-	            // No matter what, close the session
-	            HibernateUtil.closeSession();
-	        } catch (HibernateException e1) {
-	            logger.error("getImagesExcept() - Could not Close the Session", e1);
-	        }
-	    }
-	
-	    if (logger.isDebugEnabled()) {
-	        logger.debug("getImagesExcept() - end");
-	    }
-	    return returnlist;
-	    	
+	public static List getImagesExcept(final String filter, List images) {
+		if (logger.isDebugEnabled()) {
+			logger.debug("getImagesExcept() - start. String filter= " + filter);
+		}
+		//check if elements in list are Director Objects
+		if (images.size() > 0) {
+			if (!(images.get(0) instanceof Image)) {
+				logger.error("Elemente in Liste sind keine Image");
+				return new ArrayList();
+			}
+		}
+
+		//init the returnlist
+		List returnlist = new ArrayList();
+
+		Session s = null;
+
+		try {
+			//get new Session and begin Transaction
+			s = HibernateUtil.currentSession();
+
+			//init the criteria
+			Criteria criteria = s.createCriteria(Image.class);
+			//any of the criteria 
+			Disjunction any = Expression.disjunction();
+
+			//if filter not empty
+			if (filter != null && !filter.equalsIgnoreCase("")) {
+				any.add(Expression.like("imageFileName", "%" + filter + "%"));
+				any.add(Expression.like("imageFileDescription", "%" + filter
+						+ "%"));
+
+				//maybe we are searching for the id?
+				try {
+					any.add(Expression.eq("imageId", new Integer(Integer
+							.parseInt(filter))));
+				} catch (Exception e) {
+				}
+			}
+
+			for (int i = 0; i < images.size(); i++) {
+				Image tmp = (Image) images.get(i);
+				criteria.add(Expression.not(Expression.eq("imageId", tmp
+						.getImageId())));
+			}
+
+			//add all criteria
+			criteria.add(any);
+			//get the results
+			returnlist = criteria.list();
+
+		} catch (Exception e) {
+			logger.error(
+					"getImagesExcept() - Error while trying to do Transaction",
+					e);
+			returnlist = new ArrayList();
+		} finally {
+			try {
+				// No matter what, close the session
+				HibernateUtil.closeSession();
+			} catch (HibernateException e1) {
+				logger.error("getImagesExcept() - Could not Close the Session",
+						e1);
+			}
+		}
+
+		if (logger.isDebugEnabled()) {
+			logger.debug("getImagesExcept() - end");
+		}
+		return returnlist;
+
 	}
-	
-	
-	public static Object getSingleObject( final Class gclass, final int id){
-	    if (logger.isDebugEnabled()) {
-	        logger.debug("getSingleObject() - start. int filter= "+id);
-	    }
-	    //init the returnlist
-	    Object returnobject = null;
-	
-	    Session s = null;
-	    Transaction tx = null;
-	    try {
-	        //get new Session and begin Transaction
-	        s = HibernateUtil.currentSession();
-	
-	            returnobject = (Object)s.get(gclass, new Integer(id));
-	
-	    } catch (Exception e) {
-	        logger.error(
-	                "getSingleObject() - Error while trying to do Transaction",
-	                e);
-	        
-	    } finally {
-	        try {
-	            // No matter what, close the session
-	            HibernateUtil.closeSession();
-	        } catch (HibernateException e1) {
-	            logger.error("getSingleObject() - Could not Close the Session", e1);
-	        }
-	    }
-	
-	    if (logger.isDebugEnabled()) {
-	        logger.debug("getSingleObject() - end");
-	    }
-	    return returnobject;
-	    	
+
+	public static Object getSingleObject(final Class gclass, final int id) {
+		if (logger.isDebugEnabled()) {
+			logger.debug("getSingleObject() - start. int filter= " + id);
+		}
+		//init the returnlist
+		Object returnobject = null;
+
+		Session s = null;
+		Transaction tx = null;
+		try {
+			//get new Session and begin Transaction
+			s = HibernateUtil.currentSession();
+
+			returnobject = (Object) s.get(gclass, new Integer(id));
+
+		} catch (Exception e) {
+			logger.error(
+					"getSingleObject() - Error while trying to do Transaction",
+					e);
+
+		} finally {
+			try {
+				// No matter what, close the session
+				HibernateUtil.closeSession();
+			} catch (HibernateException e1) {
+				logger.error("getSingleObject() - Could not Close the Session",
+						e1);
+			}
+		}
+
+		if (logger.isDebugEnabled()) {
+			logger.debug("getSingleObject() - end");
+		}
+		return returnobject;
+
 	}
-	
+
 	/**
 	 * This method gets all Subtitles from the database.
 	 * searches for name or shortname or id
 	 * @param filter 
 	 * @return List of Subtitle objects, or an empty List
 	 */
-	public static List getSubtitle(final String filter){
-	    if (logger.isDebugEnabled()) {
-	        logger.debug("getSubtitle() - start. String filter= "+filter);
-	    }
-	    //init the returnlist
-	    List returnlist = new ArrayList();
-	
-	    Session s = null;
-	    
-	    try {
-	        //get new Session and begin Transaction
-	        s = HibernateUtil.currentSession();
-	            
-	            //init the criteria
-	            Criteria criteria = s.createCriteria(Subtitle.class);
-	            //any of the criteria 
-	            Disjunction any = Expression.disjunction();
-	
-	            //if filter not empty
-	            if (filter != null && !filter.equalsIgnoreCase("")) {
-	                any.add(Expression.like("name", "%"+filter+"%"));
-	                any.add(Expression.like("shortname", "%"+filter+"%"));
-	                
-	                //maybe we are searching for the id?
-	                try {
-	                    any.add(Expression.eq("subtitleId", new Integer(Integer.parseInt(filter))));
-	                } catch (Exception e) {
-	                }
-	                
-	            }
-	            //add all criteria
-	            criteria.add(any);
-	            //get the results
-	            returnlist = criteria.list();
-	
-	
-	
-	
-	    } catch (Exception e) {
-	        logger.error(
-	                "getSubtitle() - Error while trying to do Transaction",
-	                e);
-	        returnlist = new ArrayList();
-	    } finally {
-	        try {
-	            // No matter what, close the session
-	            HibernateUtil.closeSession();
-	        } catch (HibernateException e1) {
-	            logger.error("getSubtitle() - Could not Close the Session", e1);
-	        }
-	    }
-	
-	    if (logger.isDebugEnabled()) {
-	        logger.debug("getSubtitle() - end");
-	    }
-	    return returnlist;
-	    
-	
+	public static List getSubtitle(final String filter) {
+		if (logger.isDebugEnabled()) {
+			logger.debug("getSubtitle() - start. String filter= " + filter);
+		}
+		//init the returnlist
+		List returnlist = new ArrayList();
+
+		Session s = null;
+
+		try {
+			//get new Session and begin Transaction
+			s = HibernateUtil.currentSession();
+
+			//init the criteria
+			Criteria criteria = s.createCriteria(Subtitle.class);
+			//any of the criteria 
+			Disjunction any = Expression.disjunction();
+
+			//if filter not empty
+			if (filter != null && !filter.equalsIgnoreCase("")) {
+				any.add(Expression.like("name", "%" + filter + "%"));
+				any.add(Expression.like("shortname", "%" + filter + "%"));
+
+				//maybe we are searching for the id?
+				try {
+					any.add(Expression.eq("subtitleId", new Integer(Integer
+							.parseInt(filter))));
+				} catch (Exception e) {
+				}
+
+			}
+			//add all criteria
+			criteria.add(any);
+			//get the results
+			returnlist = criteria.list();
+
+		} catch (Exception e) {
+			logger.error(
+					"getSubtitle() - Error while trying to do Transaction", e);
+			returnlist = new ArrayList();
+		} finally {
+			try {
+				// No matter what, close the session
+				HibernateUtil.closeSession();
+			} catch (HibernateException e1) {
+				logger.error("getSubtitle() - Could not Close the Session", e1);
+			}
+		}
+
+		if (logger.isDebugEnabled()) {
+			logger.debug("getSubtitle() - end");
+		}
+		return returnlist;
+
 	}
-	
-	
-	public static Subtitle getSingleSubtitle(final int id){
-	    if (logger.isDebugEnabled()) {
-	        logger.debug("getSingleSubtitle() - start. int filter= "+id);
-	    }
-	    //init the returnlist
-	    Subtitle returnobject = null;
-	
-	    Session s = null;
-	    Transaction tx = null;
-	    try {
-	        //get new Session and begin Transaction
-	        s = HibernateUtil.currentSession();
-	
-	            returnobject = (Subtitle)s.get(Subtitle.class, new Integer(id));
-	
-	    } catch (Exception e) {
-	        logger.error(
-	                "getSingleSubtitle() - Error while trying to do Transaction",
-	                e);
-	        
-	    } finally {
-	        try {
-	            // No matter what, close the session
-	            HibernateUtil.closeSession();
-	        } catch (HibernateException e1) {
-	            logger.error("getSingleSubtitle() - Could not Close the Session", e1);
-	        }
-	    }
-	
-	    if (logger.isDebugEnabled()) {
-	        logger.debug("getSingleSubtitle() - end");
-	    }
-	    return returnobject;
-	    
-	
+
+	public static Subtitle getSingleSubtitle(final int id) {
+		if (logger.isDebugEnabled()) {
+			logger.debug("getSingleSubtitle() - start. int filter= " + id);
+		}
+		//init the returnlist
+		Subtitle returnobject = null;
+
+		Session s = null;
+		Transaction tx = null;
+		try {
+			//get new Session and begin Transaction
+			s = HibernateUtil.currentSession();
+
+			returnobject = (Subtitle) s.get(Subtitle.class, new Integer(id));
+
+		} catch (Exception e) {
+			logger
+					.error(
+							"getSingleSubtitle() - Error while trying to do Transaction",
+							e);
+
+		} finally {
+			try {
+				// No matter what, close the session
+				HibernateUtil.closeSession();
+			} catch (HibernateException e1) {
+				logger
+						.error(
+								"getSingleSubtitle() - Could not Close the Session",
+								e1);
+			}
+		}
+
+		if (logger.isDebugEnabled()) {
+			logger.debug("getSingleSubtitle() - end");
+		}
+		return returnobject;
+
 	}
-	
+
 	/**
 	 * This method gets all Status from the database.
 	 * searches for name or shortname or id
 	 * @param filter 
 	 * @return List of Status objects, or an empty List
 	 */
-	public static List getStatus(final String filter){
-	    if (logger.isDebugEnabled()) {
-	        logger.debug("getStatus() - start. String filter= "+filter);
-	    }
-	    //init the returnlist
-	    List returnlist = new ArrayList();
-	
-	    Session s = null;
-	    
-	    try {
-	        //get new Session and begin Transaction
-	        s = HibernateUtil.currentSession();
-	            
-	            //init the criteria
-	            Criteria criteria = s.createCriteria(Status.class);
-	            //any of the criteria 
-	            Disjunction any = Expression.disjunction();
-	
-	            //if filter not empty
-	            if (filter != null && !filter.equalsIgnoreCase("")) {
-	                any.add(Expression.like("statusName", "%"+filter+"%"));
-	                any.add(Expression.like("statusShortname", "%"+filter+"%"));
-	                
-	                //maybe we are searching for the id?
-	                try {
-	                    any.add(Expression.eq("statusId", new Integer(Integer.parseInt(filter))));
-	                } catch (Exception e) {
-	                }
-	                
-	            }
-	            //add all criteria
-	            criteria.add(any);
-	            //get the results
-	            returnlist = criteria.list();
-	
-	
-	
-	
-	    } catch (Exception e) {
-	        logger.error(
-	                "getStatus() - Error while trying to do Transaction",
-	                e);
-	        returnlist = new ArrayList();
-	    } finally {
-	        try {
-	            // No matter what, close the session
-	            HibernateUtil.closeSession();
-	        } catch (HibernateException e1) {
-	            logger.error("getStatus() - Could not Close the Session", e1);
-	        }
-	    }
-	
-	    if (logger.isDebugEnabled()) {
-	        logger.debug("getStatus() - end");
-	    }
-	    return returnlist;
-	    
-	
+	public static List getStatus(final String filter) {
+		if (logger.isDebugEnabled()) {
+			logger.debug("getStatus() - start. String filter= " + filter);
+		}
+		//init the returnlist
+		List returnlist = new ArrayList();
+
+		Session s = null;
+
+		try {
+			//get new Session and begin Transaction
+			s = HibernateUtil.currentSession();
+
+			//init the criteria
+			Criteria criteria = s.createCriteria(Status.class);
+			//any of the criteria 
+			Disjunction any = Expression.disjunction();
+
+			//if filter not empty
+			if (filter != null && !filter.equalsIgnoreCase("")) {
+				any.add(Expression.like("statusName", "%" + filter + "%"));
+				any.add(Expression.like("statusShortname", "%" + filter + "%"));
+
+				//maybe we are searching for the id?
+				try {
+					any.add(Expression.eq("statusId", new Integer(Integer
+							.parseInt(filter))));
+				} catch (Exception e) {
+				}
+
+			}
+			//add all criteria
+			criteria.add(any);
+			//get the results
+			returnlist = criteria.list();
+
+		} catch (Exception e) {
+			logger.error("getStatus() - Error while trying to do Transaction",
+					e);
+			returnlist = new ArrayList();
+		} finally {
+			try {
+				// No matter what, close the session
+				HibernateUtil.closeSession();
+			} catch (HibernateException e1) {
+				logger.error("getStatus() - Could not Close the Session", e1);
+			}
+		}
+
+		if (logger.isDebugEnabled()) {
+			logger.debug("getStatus() - end");
+		}
+		return returnlist;
+
 	}
-	
-	
-	public static Status getSingleStatus(final int id){
-	    if (logger.isDebugEnabled()) {
-	        logger.debug("getSingleStatus() - start. int filter= "+id);
-	    }
-	    //init the returnlist
-	    Status returnobject = null;
-	
-	    Session s = null;
-	    Transaction tx = null;
-	    try {
-	        //get new Session and begin Transaction
-	        s = HibernateUtil.currentSession();
-	
-	            returnobject = (Status)s.get(Status.class, new Integer(id));
-	
-	    } catch (Exception e) {
-	        logger.error(
-	                "getSingleStatus() - Error while trying to do Transaction",
-	                e);
-	        
-	    } finally {
-	        try {
-	            // No matter what, close the session
-	            HibernateUtil.closeSession();
-	        } catch (HibernateException e1) {
-	            logger.error("getSingleStatus() - Could not Close the Session", e1);
-	        }
-	    }
-	
-	    if (logger.isDebugEnabled()) {
-	        logger.debug("getSingleStatus() - end");
-	    }
-	    return returnobject;
-	    
-	
+
+	public static Status getSingleStatus(final int id) {
+		if (logger.isDebugEnabled()) {
+			logger.debug("getSingleStatus() - start. int filter= " + id);
+		}
+		//init the returnlist
+		Status returnobject = null;
+
+		Session s = null;
+		Transaction tx = null;
+		try {
+			//get new Session and begin Transaction
+			s = HibernateUtil.currentSession();
+
+			returnobject = (Status) s.get(Status.class, new Integer(id));
+
+		} catch (Exception e) {
+			logger.error(
+					"getSingleStatus() - Error while trying to do Transaction",
+					e);
+
+		} finally {
+			try {
+				// No matter what, close the session
+				HibernateUtil.closeSession();
+			} catch (HibernateException e1) {
+				logger.error("getSingleStatus() - Could not Close the Session",
+						e1);
+			}
+		}
+
+		if (logger.isDebugEnabled()) {
+			logger.debug("getSingleStatus() - end");
+		}
+		return returnobject;
+
 	}
-	
-    /**
+
+	/**
 	 * This method gets all Conditions from the database.
 	 * searches for name or shortname or id
 	 * @param filter 
 	 * @return List of Condition objects, or an empty List
 	 */
-	public static List getCondition(final String filter){
-	    if (logger.isDebugEnabled()) {
-	        logger.debug("getCondition() - start. String filter= "+filter);
-	    }
-	    //init the returnlist
-	    List returnlist = new ArrayList();
-	
-	    Session s = null;
-	    
-	    try {
-	        //get new Session and begin Transaction
-	        s = HibernateUtil.currentSession();
-	            
-	            //init the criteria
-	            Criteria criteria = s.createCriteria(Condition.class);
-	            //any of the criteria 
-	            Disjunction any = Expression.disjunction();
-	
-	            //if filter not empty
-	            if (filter != null && !filter.equalsIgnoreCase("")) {
-	                any.add(Expression.like("conditionName", "%"+filter+"%"));
-	                any.add(Expression.like("conditionshortname", "%"+filter+"%"));
-	                
-	                //maybe we are searching for the id?
-	                try {
-	                    any.add(Expression.eq("conditionId", new Integer(Integer.parseInt(filter))));
-	                } catch (Exception e) {
-	                }
-	                
-	            }
-	            //add all criteria
-	            criteria.add(any);
-	            //get the results
-	            returnlist = criteria.list();
-	
-	
-	
-	
-	    } catch (Exception e) {
-	        logger.error(
-	                "getCondition() - Error while trying to do Transaction",
-	                e);
-	        returnlist = new ArrayList();
-	    } finally {
-	        try {
-	            // No matter what, close the session
-	            HibernateUtil.closeSession();
-	        } catch (HibernateException e1) {
-	            logger.error("getCondition() - Could not Close the Session", e1);
-	        }
-	    }
-	
-	    if (logger.isDebugEnabled()) {
-	        logger.debug("getCondition() - end");
-	    }
-	    return returnlist;
-	    
-	
+	public static List getCondition(final String filter) {
+		if (logger.isDebugEnabled()) {
+			logger.debug("getCondition() - start. String filter= " + filter);
+		}
+		//init the returnlist
+		List returnlist = new ArrayList();
+
+		Session s = null;
+
+		try {
+			//get new Session and begin Transaction
+			s = HibernateUtil.currentSession();
+
+			//init the criteria
+			Criteria criteria = s.createCriteria(Condition.class);
+			//any of the criteria 
+			Disjunction any = Expression.disjunction();
+
+			//if filter not empty
+			if (filter != null && !filter.equalsIgnoreCase("")) {
+				any.add(Expression.like("conditionName", "%" + filter + "%"));
+				any.add(Expression.like("conditionshortname", "%" + filter
+						+ "%"));
+
+				//maybe we are searching for the id?
+				try {
+					any.add(Expression.eq("conditionId", new Integer(Integer
+							.parseInt(filter))));
+				} catch (Exception e) {
+				}
+
+			}
+			//add all criteria
+			criteria.add(any);
+			//get the results
+			returnlist = criteria.list();
+
+		} catch (Exception e) {
+			logger.error(
+					"getCondition() - Error while trying to do Transaction", e);
+			returnlist = new ArrayList();
+		} finally {
+			try {
+				// No matter what, close the session
+				HibernateUtil.closeSession();
+			} catch (HibernateException e1) {
+				logger
+						.error("getCondition() - Could not Close the Session",
+								e1);
+			}
+		}
+
+		if (logger.isDebugEnabled()) {
+			logger.debug("getCondition() - end");
+		}
+		return returnlist;
+
 	}
-	
-	
-	public static Condition getSingleCondition(final int id){
-	    if (logger.isDebugEnabled()) {
-	        logger.debug("getSingleCondition() - start. int filter= "+id);
-	    }
-	    //init the returnlist
-	    Condition returnobject = null;
-	
-	    Session s = null;
-	    Transaction tx = null;
-	    try {
-	        //get new Session and begin Transaction
-	        s = HibernateUtil.currentSession();
-	
-	            returnobject = (Condition)s.get(Condition.class, new Integer(id));
-	
-	    } catch (Exception e) {
-	        logger.error(
-	                "getSingleCondition() - Error while trying to do Transaction",
-	                e);
-	        
-	    } finally {
-	        try {
-	            // No matter what, close the session
-	            HibernateUtil.closeSession();
-	        } catch (HibernateException e1) {
-	            logger.error("getSingleCondition() - Could not Close the Session", e1);
-	        }
-	    }
-	
-	    if (logger.isDebugEnabled()) {
-	        logger.debug("getSingleCondition() - end");
-	    }
-	    return returnobject;
-	    
-	
+
+	public static Condition getSingleCondition(final int id) {
+		if (logger.isDebugEnabled()) {
+			logger.debug("getSingleCondition() - start. int filter= " + id);
+		}
+		//init the returnlist
+		Condition returnobject = null;
+
+		Session s = null;
+		Transaction tx = null;
+		try {
+			//get new Session and begin Transaction
+			s = HibernateUtil.currentSession();
+
+			returnobject = (Condition) s.get(Condition.class, new Integer(id));
+
+		} catch (Exception e) {
+			logger
+					.error(
+							"getSingleCondition() - Error while trying to do Transaction",
+							e);
+
+		} finally {
+			try {
+				// No matter what, close the session
+				HibernateUtil.closeSession();
+			} catch (HibernateException e1) {
+				logger.error(
+						"getSingleCondition() - Could not Close the Session",
+						e1);
+			}
+		}
+
+		if (logger.isDebugEnabled()) {
+			logger.debug("getSingleCondition() - end");
+		}
+		return returnobject;
+
 	}
 
 	/**
@@ -1205,124 +1181,129 @@
 	 * @param filter 
 	 * @return List of Director objects, or an empty List
 	 */
-	public static List getDirector(final String filter){
-	    return getDirectorExcept(filter, new ArrayList());
-	    
+	public static List getDirector(final String filter) {
+		return getDirectorExcept(filter, new ArrayList());
+
 	}
-	
-	public static List getDirectorExcept(final String filter, List directors){
-	    if (logger.isDebugEnabled()) {
-	        logger.debug("getDirectorExcept() - start. String filter= "+filter);
-	    }
-	
-	    //check if elements in list are Director Objects
-	    if (directors.size() > 0){
-	        if ( !(directors.get(0) instanceof Director) ){
-	            logger.error("Elemente in Liste sind keine Director");
-	            return new ArrayList();
-	        }
-	    }
-	    
-	    
-	    //init the returnlist
-	    List returnlist = new ArrayList();
-	
-	    Session s = null;
-	    
-	    try {
-	        //get new Session and begin Transaction
-	        s = HibernateUtil.currentSession();
-	            
-	            //init the criteria
-	            Criteria criteria = s.createCriteria(Director.class);
-	            //any of the criteria 
-	            Disjunction any = Expression.disjunction();
-	
-	            //if filter not empty
-	            if (filter != null && !filter.equalsIgnoreCase("")) {
-	                any.add(Expression.like("firstName", "%"+filter+"%"));
-	                any.add(Expression.like("lastName", "%"+filter+"%"));
-	                
-	                //maybe we are searching for the id?
-	                try {
-	                    any.add(Expression.eq("directorId", new Integer(Integer.parseInt(filter))));
-	                } catch (Exception e) {
-	                }
-	                
-	            }
-	            
-	            logger.debug("Anzahl der Directors:"+directors.size());
-	            for (int i = 0; i < directors.size(); i++) {
-                    Director tmp = (Director)directors.get(i);
-                    criteria.add(Expression.not(Expression.eq("directorId",tmp.getDirectorId())));
-                }
-	            
-	            //add all criteria
-	            criteria.add(any);
-	            //get the results
-	            returnlist = criteria.list();
-	
-	
-	
-	
-	    } catch (Exception e) {
-	        logger.error(
-	                "getDirectorExcept() - Error while trying to do Transaction",
-	                e);
-	        returnlist = new ArrayList();
-	    } finally {
-	        try {
-	            // No matter what, close the session
-	            HibernateUtil.closeSession();
-	        } catch (HibernateException e1) {
-	            logger.error("getDirectorExcept() - Could not Close the Session", e1);
-	        }
-	    }
-	
-	    if (logger.isDebugEnabled()) {
-	        logger.debug("getDirectorExcept() - end");
-	    }
-	    return returnlist;
-	    	
+
+	public static List getDirectorExcept(final String filter, List directors) {
+		if (logger.isDebugEnabled()) {
+			logger.debug("getDirectorExcept() - start. String filter= "
+					+ filter);
+		}
+
+		//check if elements in list are Director Objects
+		if (directors.size() > 0) {
+			if (!(directors.get(0) instanceof Director)) {
+				logger.error("Elemente in Liste sind keine Director");
+				return new ArrayList();
+			}
+		}
+
+		//init the returnlist
+		List returnlist = new ArrayList();
+
+		Session s = null;
+
+		try {
+			//get new Session and begin Transaction
+			s = HibernateUtil.currentSession();
+
+			//init the criteria
+			Criteria criteria = s.createCriteria(Director.class);
+			//any of the criteria 
+			Disjunction any = Expression.disjunction();
+
+			//if filter not empty
+			if (filter != null && !filter.equalsIgnoreCase("")) {
+				any.add(Expression.like("firstName", "%" + filter + "%"));
+				any.add(Expression.like("lastName", "%" + filter + "%"));
+
+				//maybe we are searching for the id?
+				try {
+					any.add(Expression.eq("directorId", new Integer(Integer
+							.parseInt(filter))));
+				} catch (Exception e) {
+				}
+
+			}
+
+			logger.debug("Anzahl der Directors:" + directors.size());
+			for (int i = 0; i < directors.size(); i++) {
+				Director tmp = (Director) directors.get(i);
+				criteria.add(Expression.not(Expression.eq("directorId", tmp
+						.getDirectorId())));
+			}
+
+			//add all criteria
+			criteria.add(any);
+			//get the results
+			returnlist = criteria.list();
+
+		} catch (Exception e) {
+			logger
+					.error(
+							"getDirectorExcept() - Error while trying to do Transaction",
+							e);
+			returnlist = new ArrayList();
+		} finally {
+			try {
+				// No matter what, close the session
+				HibernateUtil.closeSession();
+			} catch (HibernateException e1) {
+				logger
+						.error(
+								"getDirectorExcept() - Could not Close the Session",
+								e1);
+			}
+		}
+
+		if (logger.isDebugEnabled()) {
+			logger.debug("getDirectorExcept() - end");
+		}
+		return returnlist;
+
 	}
-	
-	
-	public static Director getSingleDirector(final int id){
-	    if (logger.isDebugEnabled()) {
-	        logger.debug("getSingleDirector() - start. int filter= "+id);
-	    }
-	    //init the returnlist
-	    Director returnobject = null;
-	
-	    Session s = null;
-	    Transaction tx = null;
-	    try {
-	        //get new Session and begin Transaction
-	        s = HibernateUtil.currentSession();
-	
-	            returnobject = (Director)s.get(Director.class, new Integer(id));
-	
-	    } catch (Exception e) {
-	        logger.error(
-	                "getSingleDirector() - Error while trying to do Transaction",
-	                e);
-	        
-	    } finally {
-	        try {
-	            // No matter what, close the session
-	            HibernateUtil.closeSession();
-	        } catch (HibernateException e1) {
-	            logger.error("getSingleDirector() - Could not Close the Session", e1);
-	        }
-	    }
-	
-	    if (logger.isDebugEnabled()) {
-	        logger.debug("getSingleDirector() - end");
-	    }
-	    return returnobject;
-	    	
+
+	public static Director getSingleDirector(final int id) {
+		if (logger.isDebugEnabled()) {
+			logger.debug("getSingleDirector() - start. int filter= " + id);
+		}
+		//init the returnlist
+		Director returnobject = null;
+
+		Session s = null;
+		Transaction tx = null;
+		try {
+			//get new Session and begin Transaction
+			s = HibernateUtil.currentSession();
+
+			returnobject = (Director) s.get(Director.class, new Integer(id));
+
+		} catch (Exception e) {
+			logger
+					.error(
+							"getSingleDirector() - Error while trying to do Transaction",
+							e);
+
+		} finally {
+			try {
+				// No matter what, close the session
+				HibernateUtil.closeSession();
+			} catch (HibernateException e1) {
+				logger
+						.error(
+								"getSingleDirector() - Could not Close the Session",
+								e1);
+			}
+		}
+
+		if (logger.isDebugEnabled()) {
+			logger.debug("getSingleDirector() - end");
+		}
+		return returnobject;
+
 	}
-	
 
 	/**
 	 * This method gets all Actor from the database.
@@ -1330,638 +1311,631 @@
 	 * @param filter 
 	 * @return List of Actors objects, or an empty List
 	 */
-	public static List getActor(final String filter){
-	    return getActorExcept(filter, new ArrayList());	    	
+	public static List getActor(final String filter) {
+		return getActorExcept(filter, new ArrayList());
 	}
-	
-	
-	
+
 	/**
 	 * This method gets all Actor from the database.
 	 * searches for firstname or lastname or id
 	 * @param filter 
 	 * @return List of Actors objects, or an empty List
 	 */
-	public static List getActorExcept(final String filter, List actors){
-	    if (logger.isDebugEnabled()) {
-	        logger.debug("getActor() - start. String filter= "+filter);
-	    }
-	    //check if elements in list are Actor Objects
-	    if (actors.size() > 0){
-	        if ( !(actors.get(0) instanceof Actor) ){
-	            logger.error("Elemente in Liste sind keine Actors");
-	            return new ArrayList();
-	        }
-	    }
-	    
-	    //init the returnlist
-	    List returnlist = new ArrayList();
-	
-	    Session s = null;
-	    
-	    try {
-	        //get new Session and begin Transaction
-	        s = HibernateUtil.currentSession();
-	            
-	            //init the criteria
-	            Criteria criteria = s.createCriteria(Actor.class);
-	            //any of the criteria 
-	            Disjunction any = Expression.disjunction();
-	
-	            //if filter not empty
-	            if (filter != null && !filter.equalsIgnoreCase("")) {
-	                any.add(Expression.like("firstName", "%"+filter+"%"));
-	                any.add(Expression.like("lastName", "%"+filter+"%"));
-	                
-	                //maybe we are searching for the id?
-	                try {
-	                    any.add(Expression.eq("actorId", new Integer(Integer.parseInt(filter))));
-	                } catch (Exception e) {
-	                }
-	                
-	            }
-	            logger.debug("Anzahl der Actors:"+actors.size());
-	            for (int i = 0; i < actors.size(); i++) {
-                    Actor tmp = (Actor)actors.get(i);
-                    logger.debug("Actor: "+tmp.getActorId());
-                    criteria.add(Expression.not(Expression.eq("actorId",tmp.getActorId())));
-                }
+	public static List getActorExcept(final String filter, List actors) {
+		if (logger.isDebugEnabled()) {
+			logger.debug("getActor() - start. String filter= " + filter);
+		}
+		//check if elements in list are Actor Objects
+		if (actors.size() > 0) {
+			if (!(actors.get(0) instanceof Actor)) {
+				logger.error("Elemente in Liste sind keine Actors");
+				return new ArrayList();
+			}
+		}
 
-	            //add all filter criteria
-	            criteria.add(any);
-	            
-	            //get the results
-	            returnlist = criteria.list();
-	
-	
-	    } catch (Exception e) {
-	        logger.error(
-	                "getActor() - Error while trying to do Transaction",
-	                e);
-	        returnlist = new ArrayList();
-	    } finally {
-	        try {
-	            // No matter what, close the session
-	            HibernateUtil.closeSession();
-	        } catch (HibernateException e1) {
-	            logger.error("getActor() - Could not Close the Session", e1);
-	        }
-	    }
-	
-	    if (logger.isDebugEnabled()) {
-	        logger.debug("getActor() - end");
-	    }
-	    return returnlist;
-	    	
-	}	
-	
-	public static Actor getSingleActor(final int id){
-	    if (logger.isDebugEnabled()) {
-	        logger.debug("getSingleActor() - start. int filter= "+id);
-	    }
-	    //init the returnlist
-	    Actor returnobject = null;
-	
-	    Session s = null;
-	    Transaction tx = null;
-	    try {
-	        //get new Session and begin Transaction
-	        s = HibernateUtil.currentSession();
-	
-	            returnobject = (Actor)s.get(Actor.class, new Integer(id));
-	
-	    } catch (Exception e) {
-	        logger.error(
-	                "getSingleActor() - Error while trying to do Transaction",
-	                e);
-	        
-	    } finally {
-	        try {
-	            // No matter what, close the session
-	            HibernateUtil.closeSession();
-	        } catch (HibernateException e1) {
-	            logger.error("getSingleActor() - Could not Close the Session", e1);
-	        }
-	    }
-	
-	    if (logger.isDebugEnabled()) {
-	        logger.debug("getSingleActor() - end");
-	    }
-	    return returnobject;
-	    	
+		//init the returnlist
+		List returnlist = new ArrayList();
+
+		Session s = null;
+
+		try {
+			//get new Session and begin Transaction
+			s = HibernateUtil.currentSession();
+
+			//init the criteria
+			Criteria criteria = s.createCriteria(Actor.class);
+			//any of the criteria 
+			Disjunction any = Expression.disjunction();
+
+			//if filter not empty
+			if (filter != null && !filter.equalsIgnoreCase("")) {
+				any.add(Expression.like("firstName", "%" + filter + "%"));
+				any.add(Expression.like("lastName", "%" + filter + "%"));
+
+				//maybe we are searching for the id?
+				try {
+					any.add(Expression.eq("actorId", new Integer(Integer
+							.parseInt(filter))));
+				} catch (Exception e) {
+				}
+
+			}
+			logger.debug("Anzahl der Actors:" + actors.size());
+			for (int i = 0; i < actors.size(); i++) {
+				Actor tmp = (Actor) actors.get(i);
+				logger.debug("Actor: " + tmp.getActorId());
+				criteria.add(Expression.not(Expression.eq("actorId", tmp
+						.getActorId())));
+			}
+
+			//add all filter criteria
+			criteria.add(any);
+
+			//get the results
+			returnlist = criteria.list();
+
+		} catch (Exception e) {
+			logger
+					.error("getActor() - Error while trying to do Transaction",
+							e);
+			returnlist = new ArrayList();
+		} finally {
+			try {
+				// No matter what, close the session
+				HibernateUtil.closeSession();
+			} catch (HibernateException e1) {
+				logger.error("getActor() - Could not Close the Session", e1);
+			}
+		}
+
+		if (logger.isDebugEnabled()) {
+			logger.debug("getActor() - end");
+		}
+		return returnlist;
+
 	}
-	
-	
-	
-	
+
+	public static Actor getSingleActor(final int id) {
+		if (logger.isDebugEnabled()) {
+			logger.debug("getSingleActor() - start. int filter= " + id);
+		}
+		//init the returnlist
+		Actor returnobject = null;
+
+		Session s = null;
+		Transaction tx = null;
+		try {
+			//get new Session and begin Transaction
+			s = HibernateUtil.currentSession();
+
+			returnobject = (Actor) s.get(Actor.class, new Integer(id));
+
+		} catch (Exception e) {
+			logger.error(
+					"getSingleActor() - Error while trying to do Transaction",
+					e);
+
+		} finally {
+			try {
+				// No matter what, close the session
+				HibernateUtil.closeSession();
+			} catch (HibernateException e1) {
+				logger.error("getSingleActor() - Could not Close the Session",
+						e1);
+			}
+		}
+
+		if (logger.isDebugEnabled()) {
+			logger.debug("getSingleActor() - end");
+		}
+		return returnobject;
+
+	}
+
 	/**
-     * Constructor for TestActor.
-     * @param arg0
-     */
-    public Database(String arg0) {
+	 * Constructor for TestActor.
+	 * @param arg0
+	 */
+	public Database(String arg0) {
 
-    }	
-	
-	public static AudioFormat getSingleAudioFormat(final int id){
-	    if (logger.isDebugEnabled()) {
-	        logger.debug("getSingleAudioFormat() - start. int filter= "+id);
-	    }
-	    //init the returnlist
-	    AudioFormat returnobject = null;
-	
-	    Session s = null;
-	    Transaction tx = null;
-	    try {
-	        //get new Session and begin Transaction
-	        s = HibernateUtil.currentSession();
-	
-	            returnobject = (AudioFormat)s.get(AudioFormat.class, new Integer(id));
-	
-	    } catch (Exception e) {
-	        logger.error(
-	                "getSingleAudioFormat() - Error while trying to do Transaction",
-	                e);
-	        
-	    } finally {
-	        try {
-	            // No matter what, close the session
-	            HibernateUtil.closeSession();
-	        } catch (HibernateException e1) {
-	            logger.error("getSingleAudioFormat() - Could not Close the Session", e1);
-	        }
-	    }
-	
-	    if (logger.isDebugEnabled()) {
-	        logger.debug("getSingleAudioFormat() - end");
-	    }
-	    return returnobject;
-	    
-	
 	}
-	
+
+	public static AudioFormat getSingleAudioFormat(final int id) {
+		if (logger.isDebugEnabled()) {
+			logger.debug("getSingleAudioFormat() - start. int filter= " + id);
+		}
+		//init the returnlist
+		AudioFormat returnobject = null;
+
+		Session s = null;
+		Transaction tx = null;
+		try {
+			//get new Session and begin Transaction
+			s = HibernateUtil.currentSession();
+
+			returnobject = (AudioFormat) s.get(AudioFormat.class, new Integer(
+					id));
+
+		} catch (Exception e) {
+			logger
+					.error(
+							"getSingleAudioFormat() - Error while trying to do Transaction",
+							e);
+
+		} finally {
+			try {
+				// No matter what, close the session
+				HibernateUtil.closeSession();
+			} catch (HibernateException e1) {
+				logger.error(
+						"getSingleAudioFormat() - Could not Close the Session",
+						e1);
+			}
+		}
+
+		if (logger.isDebugEnabled()) {
+			logger.debug("getSingleAudioFormat() - end");
+		}
+		return returnobject;
+
+	}
+
 	/**
 	 * This method gets all Payments from the database.
 	 * searches for name,duration1, duration2, duration3, startdate or id
 	 * @param filter 
 	 * @return List of Payment objects, or an empty List
 	 */
-	public static List getPayment(final String filter){
-	    if (logger.isDebugEnabled()) {
-	        logger.debug("getPayment() - start. String filter= "+filter);
-	    }
-	    //init the returnlist
-	    List returnlist = new ArrayList();
-	
-	    Session s = null;
-	    
-	    try {
-	        //get new Session and begin Transaction
-	        s = HibernateUtil.currentSession();
-	            
-	            //init the criteria
-	            Criteria criteria = s.createCriteria(Payment.class);
-	            //any of the criteria 
-	            Disjunction any = Expression.disjunction();
+	public static List getPayment(final String filter) {
+		if (logger.isDebugEnabled()) {
+			logger.debug("getPayment() - start. String filter= " + filter);
+		}
+		//init the returnlist
+		List returnlist = new ArrayList();
 
-	            if (filter != null && !filter.equalsIgnoreCase("")) {
-	                any.add(Expression.like("name", "%"+filter+"%"));
-	                any.add(Expression.like("duration1", "%"+filter+"%"));
-	                any.add(Expression.like("duration2", "%"+filter+"%"));
-	                any.add(Expression.like("duration3", "%"+filter+"%"));
-	                any.add(Expression.like("startdate", "%"+filter+"%"));
-	                //maybe we are searching for the id?
-	                try {
-	                    any.add(Expression.eq("paymentId", new Integer(Integer.parseInt(filter))));
-	                } catch (Exception e) {
-	                }
-	                
-	            }
-	            
-	            //add all criteria
-	            criteria.add(any);
-	            //get the results
-	            returnlist = criteria.list();
-	            
-	            
-	            int i = 0;
-	
-	
-	
-	
-	    } catch (Exception e) {
-	        logger.error(
-	                "getPayment() - Error while trying to do Transaction",
-	                e);
-	        returnlist = new ArrayList();
-	    } finally {
-	        try {
-	            // No matter what, close the session
-	            HibernateUtil.closeSession();
-	        } catch (HibernateException e1) {
-	            logger.error("getPayment() - Could not Close the Session", e1);
-	        }
-	    }
-	
-	    if (logger.isDebugEnabled()) {
-	        logger.debug("getPayment() - end");
-	    }
-	    return returnlist;
-	    
-	
+		Session s = null;
+
+		try {
+			//get new Session and begin Transaction
+			s = HibernateUtil.currentSession();
+
+			//init the criteria
+			Criteria criteria = s.createCriteria(Payment.class);
+			//any of the criteria 
+			Disjunction any = Expression.disjunction();
+
+			if (filter != null && !filter.equalsIgnoreCase("")) {
+				any.add(Expression.like("name", "%" + filter + "%"));
+				any.add(Expression.like("duration1", "%" + filter + "%"));
+				any.add(Expression.like("duration2", "%" + filter + "%"));
+				any.add(Expression.like("duration3", "%" + filter + "%"));
+				any.add(Expression.like("startdate", "%" + filter + "%"));
+				//maybe we are searching for the id?
+				try {
+					any.add(Expression.eq("paymentId", new Integer(Integer
+							.parseInt(filter))));
+				} catch (Exception e) {
+				}
+
+			}
+
+			//add all criteria
+			criteria.add(any);
+			//get the results
+			returnlist = criteria.list();
+
+			int i = 0;
+
+		} catch (Exception e) {
+			logger.error("getPayment() - Error while trying to do Transaction",
+					e);
+			returnlist = new ArrayList();
+		} finally {
+			try {
+				// No matter what, close the session
+				HibernateUtil.closeSession();
+			} catch (HibernateException e1) {
+				logger.error("getPayment() - Could not Close the Session", e1);
+			}
+		}
+
+		if (logger.isDebugEnabled()) {
+			logger.debug("getPayment() - end");
+		}
+		return returnlist;
+
 	}
-	
-	
-	public static Payment getSinglePayment(final int id){
-	    if (logger.isDebugEnabled()) {
-	        logger.debug("getSinglePayment() - start. int filter= "+id);
-	    }
-	    //init the returnlist
-	    Payment returnobject = null;
-	
-	    Session s = null;
-	    Transaction tx = null;
-	    try {
-	        //get new Session and begin Transaction
-	        s = HibernateUtil.currentSession();
-	
-	            returnobject = (Payment)s.get(Payment.class, new Integer(id));
-	
-	    } catch (Exception e) {
-	        logger.error(
-	                "getSinglePayment() - Error while trying to do Transaction",
-	                e);
-	        
-	    } finally {
-	        try {
-	            // No matter what, close the session
-	            HibernateUtil.closeSession();
-	        } catch (HibernateException e1) {
-	            logger.error("getSinglePayment() - Could not Close the Session", e1);
-	        }
-	    }
-	
-	    if (logger.isDebugEnabled()) {
-	        logger.debug("getSinglePayment() - end");
-	    }
-	    return returnobject;
-	    
-	
+
+	public static Payment getSinglePayment(final int id) {
+		if (logger.isDebugEnabled()) {
+			logger.debug("getSinglePayment() - start. int filter= " + id);
+		}
+		//init the returnlist
+		Payment returnobject = null;
+
+		Session s = null;
+		Transaction tx = null;
+		try {
+			//get new Session and begin Transaction
+			s = HibernateUtil.currentSession();
+
+			returnobject = (Payment) s.get(Payment.class, new Integer(id));
+
+		} catch (Exception e) {
+			logger
+					.error(
+							"getSinglePayment() - Error while trying to do Transaction",
+							e);
+
+		} finally {
+			try {
+				// No matter what, close the session
+				HibernateUtil.closeSession();
+			} catch (HibernateException e1) {
+				logger.error(
+						"getSinglePayment() - Could not Close the Session", e1);
+			}
+		}
+
+		if (logger.isDebugEnabled()) {
+			logger.debug("getSinglePayment() - end");
+		}
+		return returnobject;
+
 	}
-	
+
 	/**
 	 * This method gets all Customers from the database
 	 * @param filter 
 	 * @return List of Customer objects, or an empty List
 	 */
-	public static List getCustomer(final String filter){
-	    if (logger.isDebugEnabled()) {
-	        logger.debug("getCustomer() - start. String filter= "+filter);
-	    }
-	    //init the returnlist
-	    List returnlist = new ArrayList();
-	
-	    Session s = null;
-	    
-	    try {
-	        //get new Session and begin Transaction
-	        s = HibernateUtil.currentSession();
-	            
-	            //init the criteria
-	            Criteria criteria = s.createCriteria(Customer.class).createAlias("person", "p");
-	            //Criteria personCriteria = criteria.createCriteria("person");
-	            //any of the criteria 
-	            Disjunction any = Expression.disjunction();
-	            
-	            //Disjunction anyPerson = Expression.disjunction();
+	public static List getCustomer(final String filter) {
+		if (logger.isDebugEnabled()) {
+			logger.debug("getCustomer() - start. String filter= " + filter);
+		}
+		//init the returnlist
+		List returnlist = new ArrayList();
 
-	            if (filter != null && !filter.equalsIgnoreCase("")) {
-	                any.add(Expression.like("userName", "%"+filter+"%"));
-	                
-	                any.add(Expression.like("p.lastName", "%"+filter+"%"));
-	                any.add(Expression.like("p.firstName", "%"+filter+"%"));
+		Session s = null;
 
-	                // TODO Criteria for Birthday and Registration Date
-	                //any.add(Expression.like("p.dayOfBirth", "%"+filter+"%"));
+		try {
+			//get new Session and begin Transaction
+			s = HibernateUtil.currentSession();
 
-	                try{
-	                    Calendar cal = Calendar.getInstance();
-	                    cal.setTime(DateFormat.getDateInstance(DateFormat.SHORT).parse(filter));
-	                any.add(Expression.like("p.dayOfBirth", cal));
-	                } catch (ParseException pex){
-	                    logger.debug("Fehler beim Parsen des Datums",pex);
-	                }
-	                //any.add(Expression.like("dayOfRegistration", "%"+filter+"%"));
-	                
-	                
-	                //maybe we are searching for the id?
-	                try {
-	                    any.add(Expression.eq("customerId", new Integer(Integer.parseInt(filter))));
-	                } catch (Exception e) {
-	                }
-	                
-	            }
-	            
-	            //add all criteria
-	            
-	            criteria.add(any);
-	            // personCriteria.add(anyPerson);
-	            
-	            //get the results
-	            returnlist = criteria.list();
-	            
-	            /*
-	            returnlist = s.createCriteria(Customer.class)
-	            .createAlias("person", "p")
-	            .add( Expression.like("p.lastName","%"+filter+"%") )
-	            .list();
-	            */
-	            logger.debug("Anzahl der Elemente in R?ckgabeliste: " + returnlist.size());
-	            int i = 0;
-	
-	
-	
-	
-	    } catch (Exception e) {
-	        logger.error(
-	                "getCustomer() - Error while trying to do Transaction",
-	                e);
-	        returnlist = new ArrayList();
-	    } finally {
-	        try {
-	            // No matter what, close the session
-	            HibernateUtil.closeSession();
-	        } catch (HibernateException e1) {
-	            logger.error("getCustomer() - Could not Close the Session", e1);
-	        }
-	    }
-	
-	    if (logger.isDebugEnabled()) {
-	        logger.debug("getCustomer() - end");
-	    }
-	    return returnlist;
-	    
-	
+			//init the criteria
+			Criteria criteria = s.createCriteria(Customer.class).createAlias(
+					"person", "p");
+			//Criteria personCriteria = criteria.createCriteria("person");
+			//any of the criteria 
+			Disjunction any = Expression.disjunction();
+
+			//Disjunction anyPerson = Expression.disjunction();
+
+			if (filter != null && !filter.equalsIgnoreCase("")) {
+				any.add(Expression.like("userName", "%" + filter + "%"));
+
+				any.add(Expression.like("p.lastName", "%" + filter + "%"));
+				any.add(Expression.like("p.firstName", "%" + filter + "%"));
+
+				// TODO Criteria for Birthday and Registration Date
+				//any.add(Expression.like("p.dayOfBirth", "%"+filter+"%"));
+
+				try {
+					Calendar cal = Calendar.getInstance();
+					cal.setTime(DateFormat.getDateInstance(DateFormat.SHORT)
+							.parse(filter));
+					any.add(Expression.like("p.dayOfBirth", cal));
+				} catch (ParseException pex) {
+					logger.debug("Fehler beim Parsen des Datums", pex);
+				}
+				//any.add(Expression.like("dayOfRegistration", "%"+filter+"%"));
+
+				//maybe we are searching for the id?
+				try {
+					any.add(Expression.eq("customerId", new Integer(Integer
+							.parseInt(filter))));
+				} catch (Exception e) {
+				}
+
+			}
+
+			//add all criteria
+
+			criteria.add(any);
+			// personCriteria.add(anyPerson);
+
+			//get the results
+			returnlist = criteria.list();
+
+			/*
+			 returnlist = s.createCriteria(Customer.class)
+			 .createAlias("person", "p")
+			 .add( Expression.like("p.lastName","%"+filter+"%") )
+			 .list();
+			 */
+			logger.debug("Anzahl der Elemente in R?ckgabeliste: "
+					+ returnlist.size());
+			int i = 0;
+
+		} catch (Exception e) {
+			logger.error(
+					"getCustomer() - Error while trying to do Transaction", e);
+			returnlist = new ArrayList();
+		} finally {
+			try {
+				// No matter what, close the session
+				HibernateUtil.closeSession();
+			} catch (HibernateException e1) {
+				logger.error("getCustomer() - Could not Close the Session", e1);
+			}
+		}
+
+		if (logger.isDebugEnabled()) {
+			logger.debug("getCustomer() - end");
+		}
+		return returnlist;
+
 	}
-	
-	
-	public static Customer getSingleCustomer(final int id){
-	    if (logger.isDebugEnabled()) {
-	        logger.debug("getSingleCustomer() - start. int filter= "+id);
-	    }
-	    //init the returnlist
-	    Customer returnobject = null;
-	
-	    Session s = null;
-	    Transaction tx = null;
-	    try {
-	        //get new Session and begin Transaction
-	        s = HibernateUtil.currentSession();
-	
-	            returnobject = (Customer)s.get(Customer.class, new Integer(id));
-	
-	    } catch (Exception e) {
-	        logger.error(
-	                "getSingleCustomer() - Error while trying to do Transaction",
-	                e);
-	        
-	    } finally {
-	        try {
-	            // No matter what, close the session
-	            HibernateUtil.closeSession();
-	        } catch (HibernateException e1) {
-	            logger.error("getSingleCustomer() - Could not Close the Session", e1);
-	        }
-	    }
-	
-	    if (logger.isDebugEnabled()) {
-	        logger.debug("getSingleCustomer() - end");
-	    }
-	    return returnobject;
-	    
-	
+
+	public static Customer getSingleCustomer(final int id) {
+		if (logger.isDebugEnabled()) {
+			logger.debug("getSingleCustomer() - start. int filter= " + id);
+		}
+		//init the returnlist
+		Customer returnobject = null;
+
+		Session s = null;
+		Transaction tx = null;
+		try {
+			//get new Session and begin Transaction
+			s = HibernateUtil.currentSession();
+
+			returnobject = (Customer) s.get(Customer.class, new Integer(id));
+
+		} catch (Exception e) {
+			logger
+					.error(
+							"getSingleCustomer() - Error while trying to do Transaction",
+							e);
+
+		} finally {
+			try {
+				// No matter what, close the session
+				HibernateUtil.closeSession();
+			} catch (HibernateException e1) {
+				logger
+						.error(
+								"getSingleCustomer() - Could not Close the Session",
+								e1);
+			}
+		}
+
+		if (logger.isDebugEnabled()) {
+			logger.debug("getSingleCustomer() - end");
+		}
+		return returnobject;
+
 	}
-	
+
 	/**
 	 * This method gets all Customers from the database
 	 * @param filter 
 	 * @return List of Customer objects, or an empty List
 	 */
-	public static List getOrder(final String filter){
-	    if (logger.isDebugEnabled()) {
-	        logger.debug("getOrder() - start. String filter= "+filter);
-	    }
-	    //init the returnlist
-	    List returnlist = new ArrayList();
-	
-	    Session s = null;
-	    
-	    try {
-	        //get new Session and begin Transaction
-	        s = HibernateUtil.currentSession();
-	            
-	            //init the criteria
-	            Criteria criteria = s.createCriteria(MovieOrder.class).createAlias("customer", "c").createAlias("c.person", "p");
-	            //Criteria personCriteria = criteria.createCriteria("person");
-	            //any of the criteria 
-	            Disjunction any = Expression.disjunction();
+	public static List getOrder(final String filter) {
+		if (logger.isDebugEnabled()) {
+			logger.debug("getOrder() - start. String filter= " + filter);
+		}
+		//init the returnlist
+		List returnlist = new ArrayList();
 
-	            if (filter != null && !filter.equalsIgnoreCase("")) {	                
-	                any.add(Expression.like("c.userName", "%"+filter+"%"));
-	                any.add(Expression.like("p.lastName", "%"+filter+"%"));
-	                any.add(Expression.like("p.firstName", "%"+filter+"%"));	                
-	                
-	                //maybe we are searching for the id?
-	                try {
-	                    any.add(Expression.eq("movieOrderId", new Integer(Integer.parseInt(filter))));
-	                } catch (Exception e) {
-	                }
-	                
-	            }
-	            
-	            //add all criteria
-	            criteria.addOrder(Order.asc("movieOrderId"));
-	            criteria.add(any);
-	            
-	            //get the results
-	            returnlist = criteria.list();
+		Session s = null;
 
-	            logger.debug("Anzahl der Elemente in R?ckgabeliste: " + returnlist.size());
-	            int i = 0;
-	            
-	    } catch (Exception e) {
-	        logger.error(
-	                "getOrder() - Error while trying to do Transaction",
-	                e);
-	        returnlist = new ArrayList();
-	    } finally {
-	        try {
-	            // No matter what, close the session
-	            HibernateUtil.closeSession();
-	        } catch (HibernateException e1) {
-	            logger.error("getOrder() - Could not Close the Session", e1);
-	        }
-	    }
-	
-	    if (logger.isDebugEnabled()) {
-	        logger.debug("getOrder() - end");
-	    }
-	    return returnlist;	
+		try {
+			//get new Session and begin Transaction
+			s = HibernateUtil.currentSession();
+
+			//init the criteria
+			Criteria criteria = s.createCriteria(MovieOrder.class).createAlias(
+					"customer", "c").createAlias("c.person", "p");
+			//Criteria personCriteria = criteria.createCriteria("person");
+			//any of the criteria 
+			Disjunction any = Expression.disjunction();
+
+			if (filter != null && !filter.equalsIgnoreCase("")) {
+				any.add(Expression.like("c.userName", "%" + filter + "%"));
+				any.add(Expression.like("p.lastName", "%" + filter + "%"));
+				any.add(Expression.like("p.firstName", "%" + filter + "%"));
+
+				//maybe we are searching for the id?
+				try {
+					any.add(Expression.eq("movieOrderId", new Integer(Integer
+							.parseInt(filter))));
+				} catch (Exception e) {
+				}
+
+			}
+
+			//add all criteria
+			criteria.addOrder(Order.asc("movieOrderId"));
+			criteria.add(any);
+
+			//get the results
+			returnlist = criteria.list();
+
+			logger.debug("Anzahl der Elemente in R?ckgabeliste: "
+					+ returnlist.size());
+			int i = 0;
+
+		} catch (Exception e) {
+			logger
+					.error("getOrder() - Error while trying to do Transaction",
+							e);
+			returnlist = new ArrayList();
+		} finally {
+			try {
+				// No matter what, close the session
+				HibernateUtil.closeSession();
+			} catch (HibernateException e1) {
+				logger.error("getOrder() - Could not Close the Session", e1);
+			}
+		}
+
+		if (logger.isDebugEnabled()) {
+			logger.debug("getOrder() - end");
+		}
+		return returnlist;
 	}
-	
-	
-	public static MovieOrder getSingleOrder(final int id){
-	    if (logger.isDebugEnabled()) {
-	        logger.debug("getSingleOrder() - start. int filter= "+id);
-	    }
-	    //init the returnlist
-	    MovieOrder returnobject = null;
-	
-	    Session s = null;
-	    Transaction tx = null;
-	    try {
-	        //get new Session and begin Transaction
-	        s = HibernateUtil.currentSession();
-	
-	            returnobject = (MovieOrder)s.get(MovieOrder.class, new Integer(id));
-	
-	    } catch (Exception e) {
-	        logger.error(
-	                "getSingleOrder() - Error while trying to do Transaction",
-	                e);
-	        
-	    } finally {
-	        try {
-	            // No matter what, close the session
-	            HibernateUtil.closeSession();
-	        } catch (HibernateException e1) {
-	            logger.error("getSingleOrder() - Could not Close the Session", e1);
-	        }
-	    }
-	
-	    if (logger.isDebugEnabled()) {
-	        logger.debug("getSingleOrder() - end");
-	    }
-	    return returnobject;
-	    
-	
-	}
 
+	public static MovieOrder getSingleOrder(final int id) {
+		if (logger.isDebugEnabled()) {
+			logger.debug("getSingleOrder() - start. int filter= " + id);
+		}
+		//init the returnlist
+		MovieOrder returnobject = null;
 
+		Session s = null;
+		Transaction tx = null;
+		try {
+			//get new Session and begin Transaction
+			s = HibernateUtil.currentSession();
 
+			returnobject = (MovieOrder) s
+					.get(MovieOrder.class, new Integer(id));
+
+		} catch (Exception e) {
+			logger.error(
+					"getSingleOrder() - Error while trying to do Transaction",
+					e);
+
+		} finally {
+			try {
+				// No matter what, close the session
+				HibernateUtil.closeSession();
+			} catch (HibernateException e1) {
+				logger.error("getSingleOrder() - Could not Close the Session",
+						e1);
+			}
+		}
+
+		if (logger.isDebugEnabled()) {
+			logger.debug("getSingleOrder() - end");
+		}
+		return returnobject;
+
+	}
+
 	/**
 	 * This method gets all Movies from the database.
 	 * searches for ID,Title,Date,Description,Actor,Director...
 	 * @param filter 
 	 * @return List of Movie objects, or an empty List
 	 */
-	public static List getMovie(final String filter){
-	    if (logger.isDebugEnabled()) {
-	        logger.debug("getMovie() - start. String filter= "+filter);
-	    }
-	    //init the returnlist
-	    List returnlist = new ArrayList();
-	
-	    Session s = null;
-	    
-	    try {
-	        //get new Session and begin Transaction
-	        s = HibernateUtil.currentSession();
-	            
-	            //init the criteria
-	            Criteria criteria = s.createCriteria(Movie.class);
-	            //any of the criteria 
-	            Disjunction any = Expression.disjunction();
-	          
-	
-	            //if filter not empty
-	            if (filter != null && !filter.equalsIgnoreCase("")) {
-	                criteria.createAlias("actors","a");
-	                criteria.createAlias("director","d");
-	                any.add(Expression.like("title", "%"+filter+"%"));
-	                //any.add(Expression.like("releaseDate", "%"+filter+"%"));
-	                any.add(Expression.like("description", "%"+filter+"%"));
-	                //any.add(Expression.like("runtime", "%"+filter+"%"));
+	public static List getMovie(final String filter) {
+		if (logger.isDebugEnabled()) {
+			logger.debug("getMovie() - start. String filter= " + filter);
+		}
+		//init the returnlist
+		List returnlist = new ArrayList();
 
-	                any.add(Expression.like("a.lastName", "%"+filter+"%"));
-	                any.add(Expression.like("a.firstName", "%"+filter+"%"));
-	                any.add(Expression.like("d.lastName", "%"+filter+"%"));
-	                any.add(Expression.like("d.firstName", "%"+filter+"%"));
-	                //any.add(Expression.like("director", "%"+filter+"%"));
-	                //any.add(Expression.like("genres", "%"+filter+"%"));
-	                //any.add(Expression.like("images", "%"+filter+"%"));
-	                //maybe we are searching for the id?
-	                try {
-	                    any.add(Expression.eq("movieId", new Integer(Integer.parseInt(filter))));
-	                } catch (Exception e) {
-	                }
-	                
-	            }
-	            
-	            //add all criteria
-	            criteria.add(any);
-	            //get the results
-	            returnlist = criteria.list();
-	            
-	            
-	
-	    } catch (Exception e) {
-	        logger.error(
-	                "getMovie() - Error while trying to do Transaction",
-	                e);
-	        returnlist = new ArrayList();
-	    } finally {
-	        try {
-	            // No matter what, close the session
-	            HibernateUtil.closeSession();
-	        } catch (HibernateException e1) {
-	            logger.error("getMovie() - Could not Close the Session", e1);
-	        }
-	    }
-	
-	    if (logger.isDebugEnabled()) {
-	        logger.debug("getMovie() - end");
-	    }
-	    return returnlist;
-	    
+		Session s = null;
+
+		try {
+			//get new Session and begin Transaction
+			s = HibernateUtil.currentSession();
+
+			//init the criteria
+			Criteria criteria = s.createCriteria(Movie.class);
+			//any of the criteria 
+			Disjunction any = Expression.disjunction();
+
+			//if filter not empty
+			if (filter != null && !filter.equalsIgnoreCase("")) {
+				criteria.createAlias("actors", "a");
+				criteria.createAlias("director", "d");
+				any.add(Expression.like("title", "%" + filter + "%"));
+				//any.add(Expression.like("releaseDate", "%"+filter+"%"));
+				any.add(Expression.like("description", "%" + filter + "%"));
+				//any.add(Expression.like("runtime", "%"+filter+"%"));
+
+				any.add(Expression.like("a.lastName", "%" + filter + "%"));
+				any.add(Expression.like("a.firstName", "%" + filter + "%"));
+				any.add(Expression.like("d.lastName", "%" + filter + "%"));
+				any.add(Expression.like("d.firstName", "%" + filter + "%"));
+				//any.add(Expression.like("director", "%"+filter+"%"));
+				//any.add(Expression.like("genres", "%"+filter+"%"));
+				//any.add(Expression.like("images", "%"+filter+"%"));
+				//maybe we are searching for the id?
+				try {
+					any.add(Expression.eq("movieId", new Integer(Integer
+							.parseInt(filter))));
+				} catch (Exception e) {
+				}
+
+			}
+
+			//add all criteria
+			criteria.add(any);
+			//get the results
+			returnlist = criteria.list();
+
+		} catch (Exception e) {
+			logger
+					.error("getMovie() - Error while trying to do Transaction",
+							e);
+			returnlist = new ArrayList();
+		} finally {
+			try {
+				// No matter what, close the session
+				HibernateUtil.closeSession();
+			} catch (HibernateException e1) {
+				logger.error("getMovie() - Could not Close the Session", e1);
+			}
+		}
+
+		if (logger.isDebugEnabled()) {
+			logger.debug("getMovie() - end");
+		}
+		return returnlist;
+
 	}
-	
-	
+
 	public static Movie getSingleMovie(final int id) {
-	    if (logger.isDebugEnabled()) {
-	        logger.debug("getSingleMovie() - start. int filter= "+id);
-	    }
-	    //init the returnlist
-	    Movie returnobject = null;
-	
-	    Session s = null;
-	    Transaction tx = null;
-	    try {
-	        //get new Session and begin Transaction
-	        s = HibernateUtil.currentSession();
-	
-	            returnobject = (Movie)s.get(Movie.class, new Integer(id));
-	
-	    } catch (Exception e) {
-	        logger.error(
-	                "getSingleMovie() - Error while trying to do Transaction",
-	                e);
-	        
-	    } finally {
-	        try {
-	            // No matter what, close the session
-	            HibernateUtil.closeSession();
-	        } catch (HibernateException e1) {
-	            logger.error("getSingleMovie() - Could not Close the Session", e1);
-	        }
-	    }
-	
-	    if (logger.isDebugEnabled()) {
-	        logger.debug("getSingleMovie() - end");
-	    }
-	    return returnobject;
-	    
-	}
+		if (logger.isDebugEnabled()) {
+			logger.debug("getSingleMovie() - start. int filter= " + id);
+		}
+		//init the returnlist
+		Movie returnobject = null;
 
+		Session s = null;
+		Transaction tx = null;
+		try {
+			//get new Session and begin Transaction
+			s = HibernateUtil.currentSession();
 
+			returnobject = (Movie) s.get(Movie.class, new Integer(id));
+
+		} catch (Exception e) {
+			logger.error(
+					"getSingleMovie() - Error while trying to do Transaction",
+					e);
+
+		} finally {
+			try {
+				// No matter what, close the session
+				HibernateUtil.closeSession();
+			} catch (HibernateException e1) {
+				logger.error("getSingleMovie() - Could not Close the Session",
+						e1);
+			}
+		}
+
+		if (logger.isDebugEnabled()) {
+			logger.debug("getSingleMovie() - end");
+		}
+		return returnobject;
+
+	}
+
 }
 

Modified: project_src/provirent_hibernate/src/test/provirent/hibernate/TestAudioFormat.java
===================================================================
--- project_src/provirent_hibernate/src/test/provirent/hibernate/TestAudioFormat.java	2004-12-08 18:45:55 UTC (rev 225)
+++ project_src/provirent_hibernate/src/test/provirent/hibernate/TestAudioFormat.java	2004-12-08 18:52:28 UTC (rev 226)
@@ -37,7 +37,6 @@
 import java.util.List;
 
 import junit.framework.TestCase;
-import net.sf.hibernate.AssertionFailure;
 import net.sf.hibernate.Session;
 import net.sf.hibernate.Transaction;
 
@@ -50,208 +49,208 @@
  *
  */
 public class TestAudioFormat extends TestCase {
-    /**
-     * Logger for this class
-     */
-    private static final Logger logger = Logger.getLogger(TestAudioFormat.class);
+	/**
+	 * Logger for this class
+	 */
+	private static final Logger logger = Logger
+			.getLogger(TestAudioFormat.class);
 
-    /*
-     * @see TestCase#setUp()
-     */
-    protected void setUp() throws Exception {
-        if (logger.isDebugEnabled()) {
-            logger.debug("setUp() - start");
-        }
+	/*
+	 * @see TestCase#setUp()
+	 */
+	protected void setUp() throws Exception {
+		if (logger.isDebugEnabled()) {
+			logger.debug("setUp() - start");
+		}
 
-        super.setUp();
+		super.setUp();
 
-        if (logger.isDebugEnabled()) {
-            logger.debug("setUp() - end");
-        }
-    }
+		if (logger.isDebugEnabled()) {
+			logger.debug("setUp() - end");
+		}
+	}
 
-    /*
-     * @see TestCase#tearDown()
-     */
-    protected void tearDown() throws Exception {
-        if (logger.isDebugEnabled()) {
-            logger.debug("tearDown() - start");
-        }
+	/*
+	 * @see TestCase#tearDown()
+	 */
+	protected void tearDown() throws Exception {
+		if (logger.isDebugEnabled()) {
+			logger.debug("tearDown() - start");
+		}
 
-        super.tearDown();
+		super.tearDown();
 
-        if (logger.isDebugEnabled()) {
-            logger.debug("tearDown() - end");
-        }
-    }
+		if (logger.isDebugEnabled()) {
+			logger.debug("tearDown() - end");
+		}
+	}
 
-    /*public void testAudioFormat() throws Exception {
-        if (logger.isDebugEnabled()) {
-            logger.debug("testCreating() - start");
-        }
+	/*public void testAudioFormat() throws Exception {
+	 if (logger.isDebugEnabled()) {
+	 logger.debug("testCreating() - start");
+	 }
 
-        //get new Session and begin Transaction
-        Session s = HibernateUtil.currentSession();
-        Transaction tx = null;
-        try {
-            tx = s.beginTransaction();
+	 //get new Session and begin Transaction
+	 Session s = HibernateUtil.currentSession();
+	 Transaction tx = null;
+	 try {
+	 tx = s.beginTransaction();
 
-            try {
-                //is DB open and connected
-                assertTrue("Connected to Db? ", s.isConnected());
-                assertTrue("Db Open? ", s.isOpen());
+	 try {
+	 //is DB open and connected
+	 assertTrue("Connected to Db? ", s.isConnected());
+	 assertTrue("Db Open? ", s.isOpen());
 
-                //cretae new objects
-                List AudioFormats = new ArrayList();
+	 //cretae new objects
+	 List AudioFormats = new ArrayList();
 
-                AudioFormat myd1 = new AudioFormat("DTS Surround Sound","");
-                AudioFormat myd2 = new AudioFormat("Surround Sound","");
-                AudioFormat myd3 = new AudioFormat("Dolby","");
-                AudioFormat myd4 = new AudioFormat("Stereo","");
+	 AudioFormat myd1 = new AudioFormat("DTS Surround Sound","");
+	 AudioFormat myd2 = new AudioFormat("Surround Sound","");
+	 AudioFormat myd3 = new AudioFormat("Dolby","");
+	 AudioFormat myd4 = new AudioFormat("Stereo","");
 
-                AudioFormats.add(myd1);
-                AudioFormats.add(myd2);
-                AudioFormats.add(myd3);
-                AudioFormats.add(myd4);
+	 AudioFormats.add(myd1);
+	 AudioFormats.add(myd2);
+	 AudioFormats.add(myd3);
+	 AudioFormats.add(myd4);
 
-                List ids = new ArrayList();
+	 List ids = new ArrayList();
 
-                //save objects
-                for (Iterator iter = AudioFormats.iterator(); iter.hasNext();) {
-                    AudioFormat dir = (AudioFormat) iter.next();
-                    ids.add((Integer) s.save(dir));
+	 //save objects
+	 for (Iterator iter = AudioFormats.iterator(); iter.hasNext();) {
+	 AudioFormat dir = (AudioFormat) iter.next();
+	 ids.add((Integer) s.save(dir));
 
-                }
-                s.flush();
+	 }
+	 s.flush();
 
-                tx.commit();
+	 tx.commit();
 
-                for (int i = 0; i < ids.size(); i++) {
-                    int id = ((Integer) ids.get(i)).intValue();
-                    AudioFormat myd = (AudioFormat) AudioFormats.get(i);
+	 for (int i = 0; i < ids.size(); i++) {
+	 int id = ((Integer) ids.get(i)).intValue();
+	 AudioFormat myd = (AudioFormat) AudioFormats.get(i);
 
-                    //get AudioFormat from Hibernate
-                    AudioFormat dbd = (AudioFormat) s.get(AudioFormat.class, new Integer(id));
-                    assertNotNull("Can't get AudioFormat" + id + " from DB", dbd);
-                    if (dbd == null) {
-                        if (logger.isDebugEnabled()) {
-                            logger.debug("testCreating()Kein object mit id "
-                                    + id + "gefunden.");
-                        }
-                        return;
-                    }
-                    //are both equal?
-                    assertEquals(
-                            "Select: AudioFormat aus DB nicht gleich meiner. DB: "
-                                    + dbd + " My:" + myd, myd, dbd);
+	 //get AudioFormat from Hibernate
+	 AudioFormat dbd = (AudioFormat) s.get(AudioFormat.class, new Integer(id));
+	 assertNotNull("Can't get AudioFormat" + id + " from DB", dbd);
+	 if (dbd == null) {
+	 if (logger.isDebugEnabled()) {
+	 logger.debug("testCreating()Kein object mit id "
+	 + id + "gefunden.");
+	 }
+	 return;
+	 }
+	 //are both equal?
+	 assertEquals(
+	 "Select: AudioFormat aus DB nicht gleich meiner. DB: "
+	 + dbd + " My:" + myd, myd, dbd);
 
-                    //Update
+	 //Update
 
-                    //delete the object
-                    s.delete(myd);
-                    s.flush();
+	 //delete the object
+	 s.delete(myd);
+	 s.flush();
 
-                    dbd = myd = null;
+	 dbd = myd = null;
 
-                    Object obj = s.get(AudioFormat.class, new Integer(id));
+	 Object obj = s.get(AudioFormat.class, new Integer(id));
 
-                    //should be null, because data deleted
-                    assertNull("Deleted: AudioFormat" + id + ", but still in DB", obj);
+	 //should be null, because data deleted
+	 assertNull("Deleted: AudioFormat" + id + ", but still in DB", obj);
 
-                    if (logger.isDebugEnabled()) {
-                        logger
-                                .debug("testCreating() - AudioFormat aus DB gleich meiner? DB: "
-                                        + dbd + " My:" + myd);
-                    }
+	 if (logger.isDebugEnabled()) {
+	 logger
+	 .debug("testCreating() - AudioFormat aus DB gleich meiner? DB: "
+	 + dbd + " My:" + myd);
+	 }
 
-                }
+	 }
 
-                tx.commit();
+	 tx.commit();
 
-            } catch (Exception e) {
-                if (tx != null) {
-                    logger
-                            .error(
-                                    "testCreating() - Something went wrong here; discard all partial changes",
-                                    e);
+	 } catch (Exception e) {
+	 if (tx != null) {
+	 logger
+	 .error(
+	 "testCreating() - Something went wrong here; discard all partial changes",
+	 e);
 
-                    // Something went wrong; discard all partial changes
-                    tx.rollback();
-                }
-            }
+	 // Something went wrong; discard all partial changes
+	 tx.rollback();
+	 }
+	 }
 
-        } catch (Exception e) {
-            logger.error(
-                    "testCreating() - Error while trying to beginTransaction",
-                    e);
-            throw e;
-        } finally {
-            // No matter what, close the session
-            HibernateUtil.closeSession();
-        }
+	 } catch (Exception e) {
+	 logger.error(
+	 "testCreating() - Error while trying to beginTransaction",
+	 e);
+	 throw e;
+	 } finally {
+	 // No matter what, close the session
+	 HibernateUtil.closeSession();
+	 }
 
-        if (logger.isDebugEnabled()) {
-            logger.debug("testCreating() - end");
-        }
-    }*/
+	 if (logger.isDebugEnabled()) {
+	 logger.debug("testCreating() - end");
+	 }
+	 }*/
 
-    public void testSaveAudioFormat() throws Exception {
-        if (logger.isDebugEnabled()) {
-            logger.debug("testSaveAudioFormat() - start");
-        }
+	public void testSaveAudioFormat() throws Exception {
+		if (logger.isDebugEnabled()) {
+			logger.debug("testSaveAudioFormat() - start");
+		}
 
-        //get new Session and begin Transaction
-        Session s = HibernateUtil.currentSession();
-        Transaction tx = null;
-            tx = s.beginTransaction();
+		//get new Session and begin Transaction
+		Session s = HibernateUtil.currentSession();
+		Transaction tx = null;
+		tx = s.beginTransaction();
 
-            try {
-                //is DB open and connected
-                assertTrue("Connected to Db? ", s.isConnected());
-                assertTrue("Db Open? ", s.isOpen());
+		try {
+			//is DB open and connected
+			assertTrue("Connected to Db? ", s.isConnected());
+			assertTrue("Db Open? ", s.isOpen());
 
-                //cretae new objects
-                List AudioFormats = new ArrayList();
+			//cretae new objects
+			List AudioFormats = new ArrayList();
 
-                AudioFormat myd1 = new AudioFormat("DTS Surround Sound","");
-                AudioFormat myd2 = new AudioFormat("Surround Sound","");
-                AudioFormat myd3 = new AudioFormat("Dolby","");
-                AudioFormat myd4 = new AudioFormat("Stereo","");
+			AudioFormat myd1 = new AudioFormat("DTS Surround Sound", "");
+			AudioFormat myd2 = new AudioFormat("Surround Sound", "");
+			AudioFormat myd3 = new AudioFormat("Dolby", "");
+			AudioFormat myd4 = new AudioFormat("Stereo", "");
 
-                AudioFormats.add(myd1);
-                AudioFormats.add(myd2);
-                AudioFormats.add(myd3);
-                AudioFormats.add(myd4);
+			AudioFormats.add(myd1);
+			AudioFormats.add(myd2);
+			AudioFormats.add(myd3);
+			AudioFormats.add(myd4);
 
-                List ids = new ArrayList();
+			List ids = new ArrayList();
 
-                //save objects
-                for (Iterator iter = AudioFormats.iterator(); iter.hasNext();) {
-                    AudioFormat dir = (AudioFormat) iter.next();
-                    ids.add((Integer) s.save(dir));
+			//save objects
+			for (Iterator iter = AudioFormats.iterator(); iter.hasNext();) {
+				AudioFormat dir = (AudioFormat) iter.next();
+				ids.add((Integer) s.save(dir));
 
-                }
-                s.flush();
+			}
+			s.flush();
 
-                tx.commit();
+			tx.commit();
 
+		} finally {
+			// No matter what, close the session
+			HibernateUtil.closeSession();
+		}
 
-        } finally {
-            // No matter what, close the session
-            HibernateUtil.closeSession();
-        }
+		if (logger.isDebugEnabled()) {
+			logger.debug("testSaveAudioFormat() - end");
+		}
+	}
 
-        if (logger.isDebugEnabled()) {
-            logger.debug("testSaveAudioFormat() - end");
-        }
-    }
+	/**
+	 * Constructor for TestAudioFormat.
+	 * @param arg0
+	 */
+	public TestAudioFormat(String arg0) {
+		super(arg0);
+	}
 
-    /**
-     * Constructor for TestAudioFormat.
-     * @param arg0
-     */
-    public TestAudioFormat(String arg0) {
-        super(arg0);
-    }
-
 }
\ No newline at end of file

Modified: project_src/provirent_hibernate/src/test/provirent/hibernate/TestCustomer.java
===================================================================
--- project_src/provirent_hibernate/src/test/provirent/hibernate/TestCustomer.java	2004-12-08 18:45:55 UTC (rev 225)
+++ project_src/provirent_hibernate/src/test/provirent/hibernate/TestCustomer.java	2004-12-08 18:52:28 UTC (rev 226)
@@ -9,15 +9,13 @@
 import net.sf.hibernate.Criteria;
 import net.sf.hibernate.Session;
 import net.sf.hibernate.Transaction;
-import net.sf.hibernate.expression.Disjunction;
-import net.sf.hibernate.expression.Expression;
 
 import org.apache.log4j.Logger;
 
 import de.hsharz.provirent.objects.Customer;
 import de.hsharz.provirent.objects.Person;
-import de.hsharz.provirent.objects.Subtitle;
 import de.hsharz.provirent.persistence.HibernateUtil;
+
 /*
  * Created on 09.10.2004
  *
@@ -56,389 +54,381 @@
  *
  */
 public class TestCustomer extends TestCase {
-    /**
-     * Logger for this class
-     */
-    private static final Logger logger = Logger.getLogger(TestCustomer.class);
+	/**
+	 * Logger for this class
+	 */
+	private static final Logger logger = Logger.getLogger(TestCustomer.class);
 
-    /*
-     * @see TestCase#setUp()
-     */
-    protected void setUp() throws Exception {
-        if (logger.isDebugEnabled()) {
-            logger.debug("setUp() - start");
-        }
+	/*
+	 * @see TestCase#setUp()
+	 */
+	protected void setUp() throws Exception {
+		if (logger.isDebugEnabled()) {
+			logger.debug("setUp() - start");
+		}
 
-        super.setUp();
+		super.setUp();
 
-        if (logger.isDebugEnabled()) {
-            logger.debug("setUp() - end");
-        }
-    }
+		if (logger.isDebugEnabled()) {
+			logger.debug("setUp() - end");
+		}
+	}
 
-    /*
-     * @see TestCase#tearDown()
-     */
-    protected void tearDown() throws Exception {
-        if (logger.isDebugEnabled()) {
-            logger.debug("tearDown() - start");
-        }
+	/*
+	 * @see TestCase#tearDown()
+	 */
+	protected void tearDown() throws Exception {
+		if (logger.isDebugEnabled()) {
+			logger.debug("tearDown() - start");
+		}
 
-        super.tearDown();
+		super.tearDown();
 
-        if (logger.isDebugEnabled()) {
-            logger.debug("tearDown() - end");
-        }
-    }
+		if (logger.isDebugEnabled()) {
+			logger.debug("tearDown() - end");
+		}
+	}
 
-    /**
-     * Constructor for TestCustomer.
-     * @param arg0
-     */
-    public TestCustomer(String arg0) {
-        super(arg0);
-    }
-    
+	/**
+	 * Constructor for TestCustomer.
+	 * @param arg0
+	 */
+	public TestCustomer(String arg0) {
+		super(arg0);
+	}
 
-    
+	/*
+	 public void testCustomer() throws Exception{
+	 if (logger.isDebugEnabled()) {
+	 logger.debug("testCustomer() - start");
+	 }
 
-    
-    /*
-    public void testCustomer() throws Exception{
-        if (logger.isDebugEnabled()) {
-            logger.debug("testCustomer() - start");
-        }
+	 //get new Session and begin Transaction
+	 Session s = HibernateUtil.currentSession();
+	 Transaction tx = null;
+	 try {
+	 tx = s.beginTransaction();
 
-        //get new Session and begin Transaction
-        Session s = HibernateUtil.currentSession();
-        Transaction tx = null;
-        try {
-            tx = s.beginTransaction();
+	 try {
+	 //is DB open and connected
+	 assertTrue("Connected to Db? ", s.isConnected());
+	 assertTrue("Db Open? ", s.isOpen());
 
-            try {
-                //is DB open and connected
-                assertTrue("Connected to Db? ", s.isConnected());
-                assertTrue("Db Open? ", s.isOpen());
+	 List customer = new ArrayList();
+	 
+	 //create new objects
 
-                List customer = new ArrayList();
-                
-                //create new objects
+	 Customer c = new Customer();
+	 c.setUserName("kunde1");
+	 c.setUserPassword("kunde1");
+	 c.setHiddenQuestion(" ");
+	 c.setHiddenAnswer(" ");
 
-                Customer c = new Customer();
-                c.setUserName("kunde1");
-                c.setUserPassword("kunde1");
-                c.setHiddenQuestion(" ");
-                c.setHiddenAnswer(" ");
+	 
+	 
+	 
+	 Person person = new Person();
+	 person.setFirstName("Philipp");
+	 person.setLastName("Schneider");
+	 person.setStreet("Kastanienring");
+	 person.setStreetNumber("16");
+	 person.setCity("Leipzig");
+	 person.setZipCode("04316");
+	 person.setCountry("Deutschland");
+	 person.setSalutation("Herr");
+	 person.setEmailAddress("egal at phil-schneider.de");
 
-                
-                
-                
-                Person person = new Person();
-                person.setFirstName("Philipp");
-                person.setLastName("Schneider");
-                person.setStreet("Kastanienring");
-                person.setStreetNumber("16");
-                person.setCity("Leipzig");
-                person.setZipCode("04316");
-                person.setCountry("Deutschland");
-                person.setSalutation("Herr");
-                person.setEmailAddress("egal at phil-schneider.de");
+	 Calendar birthday = Calendar.getInstance();
+	 birthday.set(Calendar.DAY_OF_MONTH,14);
+	 birthday.set(Calendar.MONTH,3); //April
+	 birthday.set(Calendar.YEAR,1981 );
+	 
+	 person.setDayOfBirth(birthday);
+	 
+	 c.setPerson(person);
+	 
+	 customer.add(c);
 
-                Calendar birthday = Calendar.getInstance();
-                birthday.set(Calendar.DAY_OF_MONTH,14);
-                birthday.set(Calendar.MONTH,3); //April
-                birthday.set(Calendar.YEAR,1981 );
-             
-                person.setDayOfBirth(birthday);
-                
-                c.setPerson(person);
-                
-                customer.add(c);
+	 List ids = new ArrayList();
 
-                List ids = new ArrayList();
+	 //save objects
+	 for (Iterator iter = customer.iterator(); iter.hasNext();) {
+	 Customer custe = (Customer) iter.next();
+	 ids.add((Integer) s.save(custe));
 
-                //save objects
-                for (Iterator iter = customer.iterator(); iter.hasNext();) {
-                    Customer custe = (Customer) iter.next();
-                    ids.add((Integer) s.save(custe));
+	 }
+	 s.flush();
 
-                }
-                s.flush();
+	 
+	 int id = c.getCustomerId().intValue();
+	 int personid = c.getPerson().getPersonId().intValue();
+	 
+	 //get Condition from Hibernate
+	 Customer dbc = (Customer) s.get(Customer.class, new Integer(id));
+	 assertNotNull("Can't get Customer" + id + " from DB", dbc);
+	 if (dbc == null) {
+	 if (logger.isDebugEnabled()) {
+	 logger.debug("testCustomer() Kein object mit id "
+	 + id + "gefunden.");
+	 }
+	 return;
+	 }
+	 //are both equal?
+	 assertEquals(
+	 "Select: Customer aus DB nicht gleich meiner. DB: "
+	 + dbc + " My:" + c, c, dbc); 
 
-                
-                int id = c.getCustomerId().intValue();
-                int personid = c.getPerson().getPersonId().intValue();
-                
-                //get Condition from Hibernate
-                Customer dbc = (Customer) s.get(Customer.class, new Integer(id));
-                assertNotNull("Can't get Customer" + id + " from DB", dbc);
-                if (dbc == null) {
-                    if (logger.isDebugEnabled()) {
-                        logger.debug("testCustomer() Kein object mit id "
-                                + id + "gefunden.");
-                    }
-                    return;
-                }
-                //are both equal?
-                assertEquals(
-                        "Select: Customer aus DB nicht gleich meiner. DB: "
-                                + dbc + " My:" + c, c, dbc); 
+	 logger.debug("Customer: "+dbc+ "Person: "+dbc.getPerson());
 
-                logger.debug("Customer: "+dbc+ "Person: "+dbc.getPerson());
+	 //delete the object
+	 s.delete(c);
+	 s.flush();
+	 
+	 dbc = c = null;
 
-                //delete the object
-                s.delete(c);
-                s.flush();
-                
-                dbc = c = null;
+	 Object obj = s.get(Customer.class, new Integer(id));
 
-                Object obj = s.get(Customer.class, new Integer(id));
+	 //should be null, because data deleted
+	 assertNull("Deleted: Customer ID:" + id + ", but still in DB", obj);
 
-                //should be null, because data deleted
-                assertNull("Deleted: Customer ID:" + id + ", but still in DB", obj);
 
+	 obj = s.get(Person.class, new Integer(personid));
 
-                obj = s.get(Person.class, new Integer(personid));
+	 //should be null, because data deleted
+	 assertNull("Deleted Customer, but Person is still there: Customer ID:" 
+	 + id + " Personid: "+ personid + ", but still in DB", obj);
+	 
+	 
+	 
+	 tx.commit();
 
-                //should be null, because data deleted
-                assertNull("Deleted Customer, but Person is still there: Customer ID:" 
-                        + id + " Personid: "+ personid + ", but still in DB", obj);
-                
-                
-                
-                tx.commit();
+	 System.out.println("Customer der gespeichert wurde: " + customer.toString());
+	 
+	 } catch (Exception e) {
+	 if (tx != null) {
+	 logger
+	 .error(
+	 "testCustomer() - Something went wrong here; discard all partial changes",
+	 e);
 
-                System.out.println("Customer der gespeichert wurde: " + customer.toString());
-                
-            } catch (Exception e) {
-                if (tx != null) {
-                    logger
-                            .error(
-                                    "testCustomer() - Something went wrong here; discard all partial changes",
-                                    e);
+	 // Something went wrong; discard all partial changes
+	 tx.rollback();
+	 }
+	 }
 
-                    // Something went wrong; discard all partial changes
-                    tx.rollback();
-                }
-            }
+	 } catch (Exception e) {
+	 logger.error(
+	 "testCustomer() - Error while trying to beginTransaction",
+	 e);
+	 throw e;
+	 } finally {
+	 // No matter what, close the session
+	 HibernateUtil.closeSession();
+	 }
+	 
+	 
+	 
+	 if (logger.isDebugEnabled()) {
+	 logger.debug("testCustomer() - end");
+	 }
+	 }*/
 
-        } catch (Exception e) {
-            logger.error(
-                    "testCustomer() - Error while trying to beginTransaction",
-                    e);
-            throw e;
-        } finally {
-            // No matter what, close the session
-            HibernateUtil.closeSession();
-        }
-        
-        
-        
-        if (logger.isDebugEnabled()) {
-            logger.debug("testCustomer() - end");
-        }
-    }*/
+	public void testCreateCustomer() throws Exception {
+		if (logger.isDebugEnabled()) {
+			logger.debug("testCreateCustomer() - start");
+		}
 
-    public void testCreateCustomer() throws Exception{
-        if (logger.isDebugEnabled()) {
-            logger.debug("testCreateCustomer() - start");
-        }
+		//get new Session and begin Transaction
+		Session s = HibernateUtil.currentSession();
+		Transaction tx = null;
+		try {
+			tx = s.beginTransaction();
 
-        //get new Session and begin Transaction
-        Session s = HibernateUtil.currentSession();
-        Transaction tx = null;
-        try {
-            tx = s.beginTransaction();
+			try {
+				//is DB open and connected
+				assertTrue("Connected to Db? ", s.isConnected());
+				assertTrue("Db Open? ", s.isOpen());
 
-            try {
-                //is DB open and connected
-                assertTrue("Connected to Db? ", s.isConnected());
-                assertTrue("Db Open? ", s.isOpen());
+				List customer = new ArrayList();
 
-                List customer = new ArrayList();
-                
-                //create new objects
+				//create new objects
 
-                Customer c = new Customer();
-                c.setUserName("kunde1");
-                c.setUserPassword("kunde1");
-                c.setHiddenQuestion(" ");
-                c.setHiddenAnswer(" ");
+				Customer c = new Customer();
+				c.setUserName("kunde1");
+				c.setUserPassword("kunde1");
+				c.setHiddenQuestion(" ");
+				c.setHiddenAnswer(" ");
 
-                Person person = new Person();
-                person.setFirstName("Philipp");
-                person.setLastName("Schneider");
-                person.setStreet("Kastanienring");
-                person.setStreetNumber("16");
-                person.setCity("Leipzig");
-                person.setZipCode("04316");
-                person.setCountry("Deutschland");
-                person.setSalutation("Herr");
-                person.setEmailAddress("kunde2-provirent at phil-schneider.de");
+				Person person = new Person();
+				person.setFirstName("Philipp");
+				person.setLastName("Schneider");
+				person.setStreet("Kastanienring");
+				person.setStreetNumber("16");
+				person.setCity("Leipzig");
+				person.setZipCode("04316");
+				person.setCountry("Deutschland");
+				person.setSalutation("Herr");
+				person.setEmailAddress("kunde2-provirent at phil-schneider.de");
 
-                Calendar birthday = Calendar.getInstance();
-                birthday.set(Calendar.DAY_OF_MONTH,10);
-                birthday.set(Calendar.MONTH,8); 
-                birthday.set(Calendar.YEAR,1988 );
-             
-                person.setDayOfBirth(birthday);
-                
-                
-                c.setPerson(person);
-                customer.add(c);
+				Calendar birthday = Calendar.getInstance();
+				birthday.set(Calendar.DAY_OF_MONTH, 10);
+				birthday.set(Calendar.MONTH, 8);
+				birthday.set(Calendar.YEAR, 1988);
 
-                //second Customer
-                c = new Customer();
-                c.setUserName("kunde2");
-                c.setUserPassword("kunde2");
-                c.setHiddenQuestion(" ");
-                c.setHiddenAnswer(" ");
+				person.setDayOfBirth(birthday);
 
-                person = new Person();
-                person.setFirstName("Max");
-                person.setLastName("Meier");
-                person.setStreet("Kohlgartenstr.");
-                person.setStreetNumber("67");
-                person.setCity("Wernigerode");
-                person.setZipCode("38855");
-                person.setCountry("Deutschland");
-                person.setSalutation("Herr");
-                person.setEmailAddress("kunde2-provirent at phil-schneider.de");
+				c.setPerson(person);
+				customer.add(c);
 
-                birthday = Calendar.getInstance();
-                birthday.set(Calendar.DAY_OF_MONTH,2);
-                birthday.set(Calendar.MONTH,2); 
-                birthday.set(Calendar.YEAR,1954 );
-                
-                c.setPerson(person);
-                customer.add(c);
-                
-       
-                //third Customer
-                c = new Customer();
-                c.setUserName("kunde3");
-                c.setUserPassword("kunde3");
-                c.setHiddenQuestion(" ");
-                c.setHiddenAnswer(" ");
+				//second Customer
+				c = new Customer();
+				c.setUserName("kunde2");
+				c.setUserPassword("kunde2");
+				c.setHiddenQuestion(" ");
+				c.setHiddenAnswer(" ");
 
-                person = new Person();
-                person.setFirstName("Thomas");
-                person.setLastName("Pech");
-                person.setStreet("Riebeck.");
-                person.setStreetNumber("7a");
-                person.setCity("Leipzig");
-                person.setZipCode("04317");
-                person.setCountry("Deutschland");
-                person.setSalutation("Herr");
-                person.setEmailAddress("kunde3-provirent at phil-schneider.de");
+				person = new Person();
+				person.setFirstName("Max");
+				person.setLastName("Meier");
+				person.setStreet("Kohlgartenstr.");
+				person.setStreetNumber("67");
+				person.setCity("Wernigerode");
+				person.setZipCode("38855");
+				person.setCountry("Deutschland");
+				person.setSalutation("Herr");
+				person.setEmailAddress("kunde2-provirent at phil-schneider.de");
 
-                birthday = Calendar.getInstance();
-                birthday.set(Calendar.DAY_OF_MONTH,10);
-                birthday.set(Calendar.MONTH,8); 
-                birthday.set(Calendar.YEAR,1988 );
-                
-                c.setPerson(person);
-                customer.add(c);
-              
-                
-                List ids = new ArrayList();
+				birthday = Calendar.getInstance();
+				birthday.set(Calendar.DAY_OF_MONTH, 2);
+				birthday.set(Calendar.MONTH, 2);
+				birthday.set(Calendar.YEAR, 1954);
 
-                //save objects
-                for (Iterator iter = customer.iterator(); iter.hasNext();) {
-                    Customer custe = (Customer) iter.next();
-                    ids.add((Integer) s.save(custe));
+				c.setPerson(person);
+				customer.add(c);
 
-                }
-                s.flush();
+				//third Customer
+				c = new Customer();
+				c.setUserName("kunde3");
+				c.setUserPassword("kunde3");
+				c.setHiddenQuestion(" ");
+				c.setHiddenAnswer(" ");
 
-                for (int i =0;i < ids.size(); i++) {
-                    
-                    int id = ((Integer)ids.get(i)).intValue();
-                    
-                    //get Condition from Hibernate
-                    Customer dbc = (Customer) s.get(Customer.class, new Integer(id));
-                    assertNotNull("Can't get Customer" + id + " from DB", dbc);
-                    if (dbc == null) {
-                        if (logger.isDebugEnabled()) {
-                            logger.debug("testCreateCustomer() Kein object mit id "
-                                    + id + "gefunden.");
-                        }
-                        return;
-                    }
-                    logger.debug("Customer: "+dbc+" Person:"+dbc.getPerson());
-                    
-                    Customer myc = (Customer)customer.get(i);
-                    //are both equal?
-                    assertEquals(
-                            "Select: Customer aus DB nicht gleich meiner. DB: "
-                                    + dbc + " My:" + myc, myc, dbc); 
+				person = new Person();
+				person.setFirstName("Thomas");
+				person.setLastName("Pech");
+				person.setStreet("Riebeck.");
+				person.setStreetNumber("7a");
+				person.setCity("Leipzig");
+				person.setZipCode("04317");
+				person.setCountry("Deutschland");
+				person.setSalutation("Herr");
+				person.setEmailAddress("kunde3-provirent at phil-schneider.de");
 
-                }
-                
-                tx.commit();
-                
-            } catch (Exception e) {
-                if (tx != null) {
-                    logger
-                            .error(
-                                    "testCreateCustomer() - Something went wrong here; discard all partial changes",
-                                    e);
+				birthday = Calendar.getInstance();
+				birthday.set(Calendar.DAY_OF_MONTH, 10);
+				birthday.set(Calendar.MONTH, 8);
+				birthday.set(Calendar.YEAR, 1988);
 
-                    // Something went wrong; discard all partial changes
-                    tx.rollback();
-                }
-            }
+				c.setPerson(person);
+				customer.add(c);
 
-        } catch (Exception e) {
-            logger.error(
-                    "testCreateCustomer() - Error while trying to beginTransaction",
-                    e);
-            throw e;
-        } finally {
-            // No matter what, close the session
-            HibernateUtil.closeSession();
-        }
-        
-        
-        
-        if (logger.isDebugEnabled()) {
-            logger.debug("testCreateCustomer() - end");
-        }
-    }
-    
-  
-    
-    public void testSelectCustomer() throws Exception {
-        if (logger.isDebugEnabled()) {
-            logger.debug("testSelectCustomer() - start");
-        }
+				List ids = new ArrayList();
 
-	    Session s = HibernateUtil.currentSession();
-	
-	    
-        Criteria criteria = s.createCriteria(Customer.class);
-        List returnlist = criteria.list();
-	    
-        
-        for (int i = 0; i < returnlist.size(); i++) {
-            Customer customer = (Customer)returnlist.get(i);
-            assertNotNull("Customer "+i+" Objekt ist null",customer);
-            assertNotNull("Customer "+i+" Person ist null",customer.getPerson());
-            logger.debug("Customer "+i+": "+customer+" Person: "+customer.getPerson());
-            s.delete(customer);
-        }
-	    s.flush();
-	    returnlist = criteria.list();
-	    logger.debug("Anzahl Customer nach L?schen: "+returnlist.size());
-	    
-	    criteria = s.createCriteria(Person.class);
-	    returnlist = criteria.list();
-	    logger.debug("Anzahl Personen nach L?schen: "+returnlist.size());
-	    
-	
-        if (logger.isDebugEnabled()) {
-            logger.debug("testSelectCustomer() - end");
-        }
-    }
-    
-}
+				//save objects
+				for (Iterator iter = customer.iterator(); iter.hasNext();) {
+					Customer custe = (Customer) iter.next();
+					ids.add((Integer) s.save(custe));
+
+				}
+				s.flush();
+
+				for (int i = 0; i < ids.size(); i++) {
+
+					int id = ((Integer) ids.get(i)).intValue();
+
+					//get Condition from Hibernate
+					Customer dbc = (Customer) s.get(Customer.class,
+							new Integer(id));
+					assertNotNull("Can't get Customer" + id + " from DB", dbc);
+					if (dbc == null) {
+						if (logger.isDebugEnabled()) {
+							logger
+									.debug("testCreateCustomer() Kein object mit id "
+											+ id + "gefunden.");
+						}
+						return;
+					}
+					logger.debug("Customer: " + dbc + " Person:"
+							+ dbc.getPerson());
+
+					Customer myc = (Customer) customer.get(i);
+					//are both equal?
+					assertEquals(
+							"Select: Customer aus DB nicht gleich meiner. DB: "
+									+ dbc + " My:" + myc, myc, dbc);
+
+				}
+
+				tx.commit();
+
+			} catch (Exception e) {
+				if (tx != null) {
+					logger
+							.error(
+									"testCreateCustomer() - Something went wrong here; discard all partial changes",
+									e);
+
+					// Something went wrong; discard all partial changes
+					tx.rollback();
+				}
+			}
+
+		} catch (Exception e) {
+			logger
+					.error(
+							"testCreateCustomer() - Error while trying to beginTransaction",
+							e);
+			throw e;
+		} finally {
+			// No matter what, close the session
+			HibernateUtil.closeSession();
+		}
+
+		if (logger.isDebugEnabled()) {
+			logger.debug("testCreateCustomer() - end");
+		}
+	}
+
+	public void testSelectCustomer() throws Exception {
+		if (logger.isDebugEnabled()) {
+			logger.debug("testSelectCustomer() - start");
+		}
+
+		Session s = HibernateUtil.currentSession();
+
+		Criteria criteria = s.createCriteria(Customer.class);
+		List returnlist = criteria.list();
+
+		for (int i = 0; i < returnlist.size(); i++) {
+			Customer customer = (Customer) returnlist.get(i);
+			assertNotNull("Customer " + i + " Objekt ist null", customer);
+			assertNotNull("Customer " + i + " Person ist null", customer
+					.getPerson());
+			logger.debug("Customer " + i + ": " + customer + " Person: "
+					+ customer.getPerson());
+			s.delete(customer);
+		}
+		s.flush();
+		returnlist = criteria.list();
+		logger.debug("Anzahl Customer nach L?schen: " + returnlist.size());
+
+		criteria = s.createCriteria(Person.class);
+		returnlist = criteria.list();
+		logger.debug("Anzahl Personen nach L?schen: " + returnlist.size());
+
+		if (logger.isDebugEnabled()) {
+			logger.debug("testSelectCustomer() - end");
+		}
+	}
+
+}
\ No newline at end of file

Modified: project_src/provirent_hibernate/src/test/provirent/hibernate/TestDvd.java
===================================================================
--- project_src/provirent_hibernate/src/test/provirent/hibernate/TestDvd.java	2004-12-08 18:45:55 UTC (rev 225)
+++ project_src/provirent_hibernate/src/test/provirent/hibernate/TestDvd.java	2004-12-08 18:52:28 UTC (rev 226)
@@ -1,5 +1,7 @@
 package test.provirent.hibernate;
+
 import junit.framework.TestCase;
+
 /*
  * Created on 09.10.2004
  *
@@ -39,26 +41,26 @@
  */
 public class TestDvd extends TestCase {
 
-    /*
-     * @see TestCase#setUp()
-     */
-    protected void setUp() throws Exception {
-        super.setUp();
-    }
+	/*
+	 * @see TestCase#setUp()
+	 */
+	protected void setUp() throws Exception {
+		super.setUp();
+	}
 
-    /*
-     * @see TestCase#tearDown()
-     */
-    protected void tearDown() throws Exception {
-        super.tearDown();
-    }
+	/*
+	 * @see TestCase#tearDown()
+	 */
+	protected void tearDown() throws Exception {
+		super.tearDown();
+	}
 
-    /**
-     * Constructor for TestDvd.
-     * @param arg0
-     */
-    public TestDvd(String arg0) {
-        super(arg0);
-    }
+	/**
+	 * Constructor for TestDvd.
+	 * @param arg0
+	 */
+	public TestDvd(String arg0) {
+		super(arg0);
+	}
 
-}
+}
\ No newline at end of file

Modified: project_src/provirent_hibernate/src/test/provirent/hibernate/TestImage.java
===================================================================
--- project_src/provirent_hibernate/src/test/provirent/hibernate/TestImage.java	2004-12-08 18:45:55 UTC (rev 225)
+++ project_src/provirent_hibernate/src/test/provirent/hibernate/TestImage.java	2004-12-08 18:52:28 UTC (rev 226)
@@ -36,9 +36,6 @@
 import java.io.FileInputStream;
 import java.io.FilenameFilter;
 import java.io.InputStream;
-import java.util.ArrayList;
-import java.util.Iterator;
-import java.util.List;
 
 import junit.framework.TestCase;
 import net.sf.hibernate.Session;
@@ -53,277 +50,277 @@
  *
  */
 public class TestImage extends TestCase {
-    /**
-     * Logger for this class
-     */
-    private static final Logger logger = Logger.getLogger(TestImage.class);
+	/**
+	 * Logger for this class
+	 */
+	private static final Logger logger = Logger.getLogger(TestImage.class);
 
-    /*
-     * @see TestCase#setUp()
-     */
-    protected void setUp() throws Exception {
-        if (logger.isDebugEnabled()) {
-            logger.debug("setUp() - start");
-        }
+	/*
+	 * @see TestCase#setUp()
+	 */
+	protected void setUp() throws Exception {
+		if (logger.isDebugEnabled()) {
+			logger.debug("setUp() - start");
+		}
 
-        super.setUp();
+		super.setUp();
 
-        if (logger.isDebugEnabled()) {
-            logger.debug("setUp() - end");
-        }
-    }
+		if (logger.isDebugEnabled()) {
+			logger.debug("setUp() - end");
+		}
+	}
 
-    /*
-     * @see TestCase#tearDown()
-     */
-    protected void tearDown() throws Exception {
-        if (logger.isDebugEnabled()) {
-            logger.debug("tearDown() - start");
-        }
+	/*
+	 * @see TestCase#tearDown()
+	 */
+	protected void tearDown() throws Exception {
+		if (logger.isDebugEnabled()) {
+			logger.debug("tearDown() - start");
+		}
 
-        super.tearDown();
+		super.tearDown();
 
-        if (logger.isDebugEnabled()) {
-            logger.debug("tearDown() - end");
-        }
-    }
+		if (logger.isDebugEnabled()) {
+			logger.debug("tearDown() - end");
+		}
+	}
 
-    public void testImage() throws Exception {
-        if (logger.isDebugEnabled()) {
-            logger.debug("testCreating() - start");
-        }
-        /*
+	public void testImage() throws Exception {
+		if (logger.isDebugEnabled()) {
+			logger.debug("testCreating() - start");
+		}
+		/*
 
-         //get new Session and begin Transaction
-         Session s = HibernateUtil.currentSession();
-         Transaction tx = null;
-         try {
-         tx = s.beginTransaction();
+		 //get new Session and begin Transaction
+		 Session s = HibernateUtil.currentSession();
+		 Transaction tx = null;
+		 try {
+		 tx = s.beginTransaction();
 
-         try {
-         //is DB open and connected
-         assertTrue("Connected to Db? ", s.isConnected());
-         assertTrue("Db Open? ", s.isOpen());
+		 try {
+		 //is DB open and connected
+		 assertTrue("Connected to Db? ", s.isConnected());
+		 assertTrue("Db Open? ", s.isOpen());
 
 
 
 
-         //cretae new objects
-         List Images = new ArrayList();
+		 //cretae new objects
+		 List Images = new ArrayList();
 
-         Image myd1 = new Image();
-         myd1.setImageFile(new byte[] { 1, 2, 3, 4 });
-         myd1.setImageFileDescription("Bild 1");
-         myd1.setImageFileName("image1.jpg");
-         myd1.setImageFileSize(123);
+		 Image myd1 = new Image();
+		 myd1.setImageFile(new byte[] { 1, 2, 3, 4 });
+		 myd1.setImageFileDescription("Bild 1");
+		 myd1.setImageFileName("image1.jpg");
+		 myd1.setImageFileSize(123);
 
-         Image myd2 = new Image();
-         myd2.setImageFile(new byte[] { 5, 6, 7, 8 });
-         myd2.setImageFileDescription("Bild 2");
-         myd2.setImageFileName("image2.jpg");
-         myd2.setImageFileSize(123);
+		 Image myd2 = new Image();
+		 myd2.setImageFile(new byte[] { 5, 6, 7, 8 });
+		 myd2.setImageFileDescription("Bild 2");
+		 myd2.setImageFileName("image2.jpg");
+		 myd2.setImageFileSize(123);
 
-         Image myd3 = new Image();
-         myd3.setImageFile(new byte[] { 9, 10, 11, 12 });
-         myd3.setImageFileDescription("Bild 3");
-         myd3.setImageFileName("image3.jpg");
-         myd3.setImageFileSize(123);
+		 Image myd3 = new Image();
+		 myd3.setImageFile(new byte[] { 9, 10, 11, 12 });
+		 myd3.setImageFileDescription("Bild 3");
+		 myd3.setImageFileName("image3.jpg");
+		 myd3.setImageFileSize(123);
 
-         Image myd4 = new Image();
-         myd4.setImageFile(new byte[] { 13, 14, 15, 16 });
-         myd4.setImageFileDescription("Bild 4");
-         myd4.setImageFileName("image4.jpg");
-         myd4.setImageFileSize(123);
+		 Image myd4 = new Image();
+		 myd4.setImageFile(new byte[] { 13, 14, 15, 16 });
+		 myd4.setImageFileDescription("Bild 4");
+		 myd4.setImageFileName("image4.jpg");
+		 myd4.setImageFileSize(123);
 
-         Images.add(myd1);
-         Images.add(myd2);
-         Images.add(myd3);
-         Images.add(myd4);
+		 Images.add(myd1);
+		 Images.add(myd2);
+		 Images.add(myd3);
+		 Images.add(myd4);
 
-         List ids = new ArrayList();
+		 List ids = new ArrayList();
 
-         //save objects
-         for (Iterator iter = Images.iterator(); iter.hasNext();) {
-         Image dir = (Image) iter.next();
-         ids.add((Integer) s.save(dir));
+		 //save objects
+		 for (Iterator iter = Images.iterator(); iter.hasNext();) {
+		 Image dir = (Image) iter.next();
+		 ids.add((Integer) s.save(dir));
 
-         }
-         s.flush();
+		 }
+		 s.flush();
 
-         tx.commit();
+		 tx.commit();
 
-         for (int i = 0; i < ids.size(); i++) {
-         int id = ((Integer) ids.get(i)).intValue();
-         Image myd = (Image) Images.get(i);
+		 for (int i = 0; i < ids.size(); i++) {
+		 int id = ((Integer) ids.get(i)).intValue();
+		 Image myd = (Image) Images.get(i);
 
-         //get Image from Hibernate
-         Image dbd = (Image) s.get(Image.class, new Integer(id));
-         assertNotNull("Can't get Image" + id + " from DB", dbd);
-         if (dbd == null) {
-         if (logger.isDebugEnabled()) {
-         logger.debug("testCreating()Kein object mit id "
-         + id + "gefunden.");
-         }
-         return;
-         }
-         //are both equal?
-         assertEquals(
-         "Select: Image aus DB nicht gleich meiner. DB: "
-         + dbd + " My:" + myd, myd, dbd);
+		 //get Image from Hibernate
+		 Image dbd = (Image) s.get(Image.class, new Integer(id));
+		 assertNotNull("Can't get Image" + id + " from DB", dbd);
+		 if (dbd == null) {
+		 if (logger.isDebugEnabled()) {
+		 logger.debug("testCreating()Kein object mit id "
+		 + id + "gefunden.");
+		 }
+		 return;
+		 }
+		 //are both equal?
+		 assertEquals(
+		 "Select: Image aus DB nicht gleich meiner. DB: "
+		 + dbd + " My:" + myd, myd, dbd);
 
-         //Update
+		 //Update
 
-         //delete the object
-         s.delete(myd);
-         s.flush();
+		 //delete the object
+		 s.delete(myd);
+		 s.flush();
 
-         dbd = myd = null;
+		 dbd = myd = null;
 
-         Object obj = s.get(Image.class, new Integer(id));
+		 Object obj = s.get(Image.class, new Integer(id));
 
-         //should be null, because data deleted
-         assertNull("Deleted: Image" + id + ", but still in DB", obj);
+		 //should be null, because data deleted
+		 assertNull("Deleted: Image" + id + ", but still in DB", obj);
 
-         if (logger.isDebugEnabled()) {
-         logger
-         .debug("testCreating() - Image aus DB gleich meiner? DB: "
-         + dbd + " My:" + myd);
-         }
+		 if (logger.isDebugEnabled()) {
+		 logger
+		 .debug("testCreating() - Image aus DB gleich meiner? DB: "
+		 + dbd + " My:" + myd);
+		 }
 
-         }
+		 }
 
-         tx.commit();
+		 tx.commit();
 
-         } catch (Exception e) {
-         if (tx != null) {
-         logger
-         .error(
-         "testCreating() - Something went wrong here; discard all partial changes",
-         e);
+		 } catch (Exception e) {
+		 if (tx != null) {
+		 logger
+		 .error(
+		 "testCreating() - Something went wrong here; discard all partial changes",
+		 e);
 
-         // Something went wrong; discard all partial changes
-         tx.rollback();
-         }
+		 // Something went wrong; discard all partial changes
+		 tx.rollback();
+		 }
 
-         }
+		 }
 
-         } catch (Exception e) {
-         logger.error(
-         "testCreating() - Error while trying to beginTransaction",
-         e);
-         throw e;
-         } finally {
-         // No matter what, close the session
-         HibernateUtil.closeSession();
-         }
-         */
+		 } catch (Exception e) {
+		 logger.error(
+		 "testCreating() - Error while trying to beginTransaction",
+		 e);
+		 throw e;
+		 } finally {
+		 // No matter what, close the session
+		 HibernateUtil.closeSession();
+		 }
+		 */
 
-        if (logger.isDebugEnabled()) {
-            logger.debug("testCreating() - end");
-        }
-    }
+		if (logger.isDebugEnabled()) {
+			logger.debug("testCreating() - end");
+		}
+	}
 
-    public void testSaveImage() throws Exception {
-        if (logger.isDebugEnabled()) {
-            logger.debug("testSaveImage() - start");
-        }
+	public void testSaveImage() throws Exception {
+		if (logger.isDebugEnabled()) {
+			logger.debug("testSaveImage() - start");
+		}
 
-        //get new Session and begin Transaction
-        Session s = HibernateUtil.currentSession();
-        Transaction tx = null;
-        try {
-            tx = s.beginTransaction();
+		//get new Session and begin Transaction
+		Session s = HibernateUtil.currentSession();
+		Transaction tx = null;
+		try {
+			tx = s.beginTransaction();
 
-            try {
-                //is DB open and connected
-                assertTrue("Connected to Db? ", s.isConnected());
-                assertTrue("Db Open? ", s.isOpen());
+			try {
+				//is DB open and connected
+				assertTrue("Connected to Db? ", s.isConnected());
+				assertTrue("Db Open? ", s.isOpen());
 
-                File oneimage = new File(this.getClass()
-                        .getResource("logo.gif").getFile());
-                String path = this.getClass().getResource("logo.gif").getPath();
-                path = path.substring(0, path.lastIndexOf("/"));
-                logger.debug("Path: " + path);
-                File dir = new File(path);
+				File oneimage = new File(this.getClass()
+						.getResource("logo.gif").getFile());
+				String path = this.getClass().getResource("logo.gif").getPath();
+				path = path.substring(0, path.lastIndexOf("/"));
+				logger.debug("Path: " + path);
+				File dir = new File(path);
 
-                FilenameFilter filter = new FilenameFilter() {
-                    public boolean accept(File dir, String name) {
-                        return (name.endsWith(".gif") || name.endsWith(".jpg"));
-                    }
-                };
-                File[] files = dir.listFiles(filter);
-                for (int i = 0; i < files.length; i++) {
+				FilenameFilter filter = new FilenameFilter() {
+					public boolean accept(File dir, String name) {
+						return (name.endsWith(".gif") || name.endsWith(".jpg"));
+					}
+				};
+				File[] files = dir.listFiles(filter);
+				for (int i = 0; i < files.length; i++) {
 
-                    Image image = new Image();
+					Image image = new Image();
 
-                    //create new objects
-                    File file = files[i];
+					//create new objects
+					File file = files[i];
 
-                    InputStream is = new FileInputStream(file);
+					InputStream is = new FileInputStream(file);
 
-                    long length = file.length();
+					long length = file.length();
 
-                    byte[] bytes = new byte[(int) length];
+					byte[] bytes = new byte[(int) length];
 
-                    // Read in the bytes
-                    int offset = 0;
-                    int numRead = 0;
-                    while (offset < bytes.length
-                            && (numRead = is.read(bytes, offset, bytes.length
-                                    - offset)) >= 0) {
-                        offset += numRead;
-                    }
+					// Read in the bytes
+					int offset = 0;
+					int numRead = 0;
+					while (offset < bytes.length
+							&& (numRead = is.read(bytes, offset, bytes.length
+									- offset)) >= 0) {
+						offset += numRead;
+					}
 
-                    is.close();
+					is.close();
 
-                    logger.debug("bytes l?nge " + bytes.length);
+					logger.debug("bytes l?nge " + bytes.length);
 
-                    image.setImageFile(bytes);
-                    image.setImageFileDescription(file.getName());
-                    image.setImageFileName(file.getName());
-                    image.setImageFileSize(bytes.length);
+					image.setImageFile(bytes);
+					image.setImageFileDescription(file.getName());
+					image.setImageFileName(file.getName());
+					image.setImageFileSize(bytes.length);
 
-                    //Save Image
-                    s.save(image);
+					//Save Image
+					s.save(image);
 
-                    s.flush();
-                }
-                tx.commit();
+					s.flush();
+				}
+				tx.commit();
 
-            } catch (Exception e) {
-                if (tx != null) {
-                    logger
-                            .error(
-                                    "testSaveImage() - Something went wrong here; discard all partial changes",
-                                    e);
+			} catch (Exception e) {
+				if (tx != null) {
+					logger
+							.error(
+									"testSaveImage() - Something went wrong here; discard all partial changes",
+									e);
 
-                    // Something went wrong; discard all partial changes
-                    tx.rollback();
-                }
+					// Something went wrong; discard all partial changes
+					tx.rollback();
+				}
 
-            }
+			}
 
-        } catch (Exception e) {
-            logger.error(
-                    "testSaveImage() - Error while trying to beginTransaction",
-                    e);
-            throw e;
-        } finally {
-            // No matter what, close the session
-            HibernateUtil.closeSession();
-        }
+		} catch (Exception e) {
+			logger.error(
+					"testSaveImage() - Error while trying to beginTransaction",
+					e);
+			throw e;
+		} finally {
+			// No matter what, close the session
+			HibernateUtil.closeSession();
+		}
 
-        if (logger.isDebugEnabled()) {
-            logger.debug("testSaveImage() - end");
-        }
-    }
+		if (logger.isDebugEnabled()) {
+			logger.debug("testSaveImage() - end");
+		}
+	}
 
-    /**
-     * Constructor for TestImage.
-     * @param arg0
-     */
-    public TestImage(String arg0) {
-        super(arg0);
-    }
+	/**
+	 * Constructor for TestImage.
+	 * @param arg0
+	 */
+	public TestImage(String arg0) {
+		super(arg0);
+	}
 
 }
\ No newline at end of file

Modified: project_src/provirent_hibernate/src/test/provirent/hibernate/TestMovie.java
===================================================================
--- project_src/provirent_hibernate/src/test/provirent/hibernate/TestMovie.java	2004-12-08 18:45:55 UTC (rev 225)
+++ project_src/provirent_hibernate/src/test/provirent/hibernate/TestMovie.java	2004-12-08 18:52:28 UTC (rev 226)
@@ -34,7 +34,6 @@
 
 import java.util.ArrayList;
 import java.util.Calendar;
-import java.util.Iterator;
 import java.util.List;
 
 import junit.framework.TestCase;
@@ -44,14 +43,9 @@
 import org.apache.log4j.Logger;
 
 import de.hsharz.provirent.objects.Actor;
-import de.hsharz.provirent.objects.AudioFormat;
 import de.hsharz.provirent.objects.Director;
 import de.hsharz.provirent.objects.Genre;
-import de.hsharz.provirent.objects.Image;
-import de.hsharz.provirent.objects.Language;
 import de.hsharz.provirent.objects.Movie;
-import de.hsharz.provirent.objects.Subtitle;
-import de.hsharz.provirent.objects.VideoFormat;
 
 /**
  * @author Philipp Schneider



From pschneider at sheep.berlios.de  Wed Dec  8 20:00:55 2004
From: pschneider at sheep.berlios.de (Philipp Schneider at BerliOS)
Date: Wed, 8 Dec 2004 20:00:55 +0100
Subject: [Provirent-svn-commit] r227 - project_src/provirent_hibernate/src/de/hsharz/provirent/objects
Message-ID: <200412081900.iB8J0tbM014466@sheep.berlios.de>

Author: pschneider
Date: 2004-12-08 20:00:54 +0100 (Wed, 08 Dec 2004)
New Revision: 227

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Dvd.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Movie.hbm.xml
   project_src/provirent_hibernate/src/de/hsharz/provirent/objects/OrderItem.java
Log:


Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Dvd.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Dvd.java	2004-12-08 18:52:28 UTC (rev 226)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Dvd.java	2004-12-08 19:00:54 UTC (rev 227)
@@ -1,13 +1,12 @@
 package de.hsharz.provirent.objects;
 
-import java.io.Serializable;
-import java.util.List;
+import java.io.Serializable;
+import java.util.List;
+import org.apache.commons.lang.builder.EqualsBuilder;
+import org.apache.commons.lang.builder.HashCodeBuilder;
+import org.apache.commons.lang.builder.ToStringBuilder;
 
-import org.apache.commons.lang.builder.EqualsBuilder;
-import org.apache.commons.lang.builder.HashCodeBuilder;
-import org.apache.commons.lang.builder.ToStringBuilder;
 
-
 /** 
  *         Represents a single Dvd.
  *         @author Philipp Schneider

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Movie.hbm.xml
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Movie.hbm.xml	2004-12-08 18:52:28 UTC (rev 226)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Movie.hbm.xml	2004-12-08 19:00:54 UTC (rev 227)
@@ -41,9 +41,9 @@
 				<meta attribute="use-in-tostring">true</meta>
       </property>
  
-			<one-to-one name="mainImage" class="de.hsharz.provirent.objects.Image">
+			<many-to-one name="mainImage" class="de.hsharz.provirent.objects.Image">
 					<meta attribute="use-in-tostring">true</meta>
-			</one-to-one>
+			</many-to-one>
 
  			<list	name="images"
  						table="MOVIEIMAGES"

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/objects/OrderItem.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/objects/OrderItem.java	2004-12-08 18:52:28 UTC (rev 226)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/objects/OrderItem.java	2004-12-08 19:00:54 UTC (rev 227)
@@ -1,198 +1,197 @@
 package de.hsharz.provirent.objects;
 
-import java.io.Serializable;
-import java.util.Calendar;
+import java.io.Serializable;
+import java.util.Calendar;
+import org.apache.commons.lang.builder.EqualsBuilder;
+import org.apache.commons.lang.builder.HashCodeBuilder;
+import org.apache.commons.lang.builder.ToStringBuilder;
 
-import org.apache.commons.lang.builder.EqualsBuilder;
-import org.apache.commons.lang.builder.HashCodeBuilder;
-import org.apache.commons.lang.builder.ToStringBuilder;
 
-/** 
- *         Represents an OrderItem.
- *         @author Philipp Schneider
- *       
- */
+/** 
+ *         Represents an OrderItem.
+ *         @author Philipp Schneider
+ *       
+*/
 public class OrderItem implements Serializable {
 
-	/** identifier field */
-	private Integer orderItemId;
+    /** identifier field */
+    private Integer orderItemId;
 
-	/** nullable persistent field */
-	private Calendar orderTime;
+    /** nullable persistent field */
+    private Calendar orderTime;
 
-	/** nullable persistent field */
-	private Calendar senderTime;
+    /** nullable persistent field */
+    private Calendar senderTime;
 
-	/** nullable persistent field */
-	private Calendar receivingTime;
+    /** nullable persistent field */
+    private Calendar receivingTime;
 
-	/** persistent field */
-	private int duration;
+    /** persistent field */
+    private int duration;
 
-	/** nullable persistent field */
-	private de.hsharz.provirent.objects.Customer customer;
+    /** nullable persistent field */
+    private de.hsharz.provirent.objects.Customer customer;
 
-	/** nullable persistent field */
-	private de.hsharz.provirent.objects.Dvd dvd;
+    /** nullable persistent field */
+    private de.hsharz.provirent.objects.Dvd dvd;
 
-	/** nullable persistent field */
-	private de.hsharz.provirent.objects.Payment payment;
+    /** nullable persistent field */
+    private de.hsharz.provirent.objects.Payment payment;
 
-	/** nullable persistent field */
-	private de.hsharz.provirent.objects.Condition conditionSend;
+    /** nullable persistent field */
+    private de.hsharz.provirent.objects.Condition conditionSend;
 
-	/** nullable persistent field */
-	private de.hsharz.provirent.objects.Condition conditionReceiving;
+    /** nullable persistent field */
+    private de.hsharz.provirent.objects.Condition conditionReceiving;
 
-	/** full constructor */
-	public OrderItem(Calendar orderTime, Calendar senderTime,
-			Calendar receivingTime, int duration,
-			de.hsharz.provirent.objects.Customer customer,
-			de.hsharz.provirent.objects.Dvd dvd,
-			de.hsharz.provirent.objects.Payment payment,
-			de.hsharz.provirent.objects.Condition conditionSend,
-			de.hsharz.provirent.objects.Condition conditionReceiving) {
-		this.orderTime = orderTime;
-		this.senderTime = senderTime;
-		this.receivingTime = receivingTime;
-		this.duration = duration;
-		this.customer = customer;
-		this.dvd = dvd;
-		this.payment = payment;
-		this.conditionSend = conditionSend;
-		this.conditionReceiving = conditionReceiving;
-	}
+    /** full constructor */
+    public OrderItem(Calendar orderTime, Calendar senderTime, Calendar receivingTime, int duration, de.hsharz.provirent.objects.Customer customer, de.hsharz.provirent.objects.Dvd dvd, de.hsharz.provirent.objects.Payment payment, de.hsharz.provirent.objects.Condition conditionSend, de.hsharz.provirent.objects.Condition conditionReceiving) {
+        this.orderTime = orderTime;
+        this.senderTime = senderTime;
+        this.receivingTime = receivingTime;
+        this.duration = duration;
+        this.customer = customer;
+        this.dvd = dvd;
+        this.payment = payment;
+        this.conditionSend = conditionSend;
+        this.conditionReceiving = conditionReceiving;
+    }
 
-	/** default constructor */
-	public OrderItem() {
-	}
+    /** default constructor */
+    public OrderItem() {
+    }
 
-	/** minimal constructor */
-	public OrderItem(int duration) {
-		this.duration = duration;
-	}
+    /** minimal constructor */
+    public OrderItem(int duration) {
+        this.duration = duration;
+    }
 
-	public Integer getOrderItemId() {
-		return this.orderItemId;
-	}
+    public Integer getOrderItemId() {
+        return this.orderItemId;
+    }
 
-	public void setOrderItemId(Integer orderItemId) {
-		this.orderItemId = orderItemId;
-	}
+    public void setOrderItemId(Integer orderItemId) {
+        this.orderItemId = orderItemId;
+    }
 
-	public Calendar getOrderTime() {
-		return this.orderTime;
-	}
+    public Calendar getOrderTime() {
+        return this.orderTime;
+    }
 
-	public void setOrderTime(Calendar orderTime) {
-		this.orderTime = orderTime;
-	}
+    public void setOrderTime(Calendar orderTime) {
+        this.orderTime = orderTime;
+    }
 
-	public Calendar getSenderTime() {
-		return this.senderTime;
-	}
+    public Calendar getSenderTime() {
+        return this.senderTime;
+    }
 
-	public void setSenderTime(Calendar senderTime) {
-		this.senderTime = senderTime;
-	}
+    public void setSenderTime(Calendar senderTime) {
+        this.senderTime = senderTime;
+    }
 
-	public Calendar getReceivingTime() {
-		return this.receivingTime;
-	}
+    public Calendar getReceivingTime() {
+        return this.receivingTime;
+    }
 
-	public void setReceivingTime(Calendar receivingTime) {
-		this.receivingTime = receivingTime;
-	}
+    public void setReceivingTime(Calendar receivingTime) {
+        this.receivingTime = receivingTime;
+    }
 
-	public int getDuration() {
-		return this.duration;
-	}
+    public int getDuration() {
+        return this.duration;
+    }
 
-	public void setDuration(int duration) {
-		this.duration = duration;
-	}
+    public void setDuration(int duration) {
+        this.duration = duration;
+    }
 
-	public de.hsharz.provirent.objects.Customer getCustomer() {
-		return this.customer;
-	}
+    public de.hsharz.provirent.objects.Customer getCustomer() {
+        return this.customer;
+    }
 
-	public void setCustomer(de.hsharz.provirent.objects.Customer customer) {
-		this.customer = customer;
-	}
+    public void setCustomer(de.hsharz.provirent.objects.Customer customer) {
+        this.customer = customer;
+    }
 
-	public de.hsharz.provirent.objects.Dvd getDvd() {
-		return this.dvd;
-	}
+    public de.hsharz.provirent.objects.Dvd getDvd() {
+        return this.dvd;
+    }
 
-	public void setDvd(de.hsharz.provirent.objects.Dvd dvd) {
-		this.dvd = dvd;
-	}
+    public void setDvd(de.hsharz.provirent.objects.Dvd dvd) {
+        this.dvd = dvd;
+    }
 
-	public de.hsharz.provirent.objects.Payment getPayment() {
-		return this.payment;
-	}
+    public de.hsharz.provirent.objects.Payment getPayment() {
+        return this.payment;
+    }
 
-	public void setPayment(de.hsharz.provirent.objects.Payment payment) {
-		this.payment = payment;
-	}
+    public void setPayment(de.hsharz.provirent.objects.Payment payment) {
+        this.payment = payment;
+    }
 
-	public de.hsharz.provirent.objects.Condition getConditionSend() {
-		return this.conditionSend;
-	}
+    public de.hsharz.provirent.objects.Condition getConditionSend() {
+        return this.conditionSend;
+    }
 
-	public void setConditionSend(
-			de.hsharz.provirent.objects.Condition conditionSend) {
-		this.conditionSend = conditionSend;
-	}
+    public void setConditionSend(de.hsharz.provirent.objects.Condition conditionSend) {
+        this.conditionSend = conditionSend;
+    }
 
-	public de.hsharz.provirent.objects.Condition getConditionReceiving() {
-		return this.conditionReceiving;
-	}
+    public de.hsharz.provirent.objects.Condition getConditionReceiving() {
+        return this.conditionReceiving;
+    }
 
-	public void setConditionReceiving(
-			de.hsharz.provirent.objects.Condition conditionReceiving) {
-		this.conditionReceiving = conditionReceiving;
-	}
+    public void setConditionReceiving(de.hsharz.provirent.objects.Condition conditionReceiving) {
+        this.conditionReceiving = conditionReceiving;
+    }
 
-	public String toString() {
-		return new ToStringBuilder(this)
-				.append("orderItemId", getOrderItemId()).append("orderTime",
-						getOrderTime()).append("senderTime", getSenderTime())
-				.append("receivingTime", getReceivingTime()).append("duration",
-						getDuration()).append("customer", getCustomer())
-				.append("dvd", getDvd()).append("payment", getPayment())
-				.append("conditionSend", getConditionSend()).append(
-						"conditionReceiving", getConditionReceiving())
-				.toString();
-	}
+    public String toString() {
+        return new ToStringBuilder(this)
+            .append("orderItemId", getOrderItemId())
+            .append("orderTime", getOrderTime())
+            .append("senderTime", getSenderTime())
+            .append("receivingTime", getReceivingTime())
+            .append("duration", getDuration())
+            .append("customer", getCustomer())
+            .append("dvd", getDvd())
+            .append("payment", getPayment())
+            .append("conditionSend", getConditionSend())
+            .append("conditionReceiving", getConditionReceiving())
+            .toString();
+    }
 
-	public boolean equals(Object other) {
-		if ((this == other))
-			return true;
-		if (!(other instanceof OrderItem))
-			return false;
-		OrderItem castOther = (OrderItem) other;
-		return new EqualsBuilder().append(this.getOrderItemId(),
-				castOther.getOrderItemId()).append(this.getOrderTime(),
-				castOther.getOrderTime()).append(this.getSenderTime(),
-				castOther.getSenderTime()).append(this.getReceivingTime(),
-				castOther.getReceivingTime()).append(this.getDuration(),
-				castOther.getDuration()).append(this.getCustomer(),
-				castOther.getCustomer()).append(this.getDvd(),
-				castOther.getDvd()).append(this.getPayment(),
-				castOther.getPayment()).append(this.getConditionSend(),
-				castOther.getConditionSend())
-				.append(this.getConditionReceiving(),
-						castOther.getConditionReceiving()).isEquals();
-	}
+    public boolean equals(Object other) {
+        if ( (this == other ) ) return true;
+        if ( !(other instanceof OrderItem) ) return false;
+        OrderItem castOther = (OrderItem) other;
+        return new EqualsBuilder()
+            .append(this.getOrderItemId(), castOther.getOrderItemId())
+            .append(this.getOrderTime(), castOther.getOrderTime())
+            .append(this.getSenderTime(), castOther.getSenderTime())
+            .append(this.getReceivingTime(), castOther.getReceivingTime())
+            .append(this.getDuration(), castOther.getDuration())
+            .append(this.getCustomer(), castOther.getCustomer())
+            .append(this.getDvd(), castOther.getDvd())
+            .append(this.getPayment(), castOther.getPayment())
+            .append(this.getConditionSend(), castOther.getConditionSend())
+            .append(this.getConditionReceiving(), castOther.getConditionReceiving())
+            .isEquals();
+    }
 
-	public int hashCode() {
-		return new HashCodeBuilder().append(getOrderItemId()).append(
-				getOrderTime()).append(getSenderTime()).append(
-				getReceivingTime()).append(getDuration()).append(getCustomer())
-				.append(getDvd()).append(getPayment()).append(
-						getConditionSend()).append(getConditionReceiving())
-				.toHashCode();
-	}
+    public int hashCode() {
+        return new HashCodeBuilder()
+            .append(getOrderItemId())
+            .append(getOrderTime())
+            .append(getSenderTime())
+            .append(getReceivingTime())
+            .append(getDuration())
+            .append(getCustomer())
+            .append(getDvd())
+            .append(getPayment())
+            .append(getConditionSend())
+            .append(getConditionReceiving())
+            .toHashCode();
+    }
 
-}
\ No newline at end of file
+}



From pschneider at sheep.berlios.de  Wed Dec  8 20:17:09 2004
From: pschneider at sheep.berlios.de (Philipp Schneider at BerliOS)
Date: Wed, 8 Dec 2004 20:17:09 +0100
Subject: [Provirent-svn-commit] r228 - in project_src/provirent_hibernate/src/de/hsharz/provirent: management/gui persistence
Message-ID: <200412081917.iB8JH9fq015157@sheep.berlios.de>

Author: pschneider
Date: 2004-12-08 20:17:07 +0100 (Wed, 08 Dec 2004)
New Revision: 228

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/DialogMovie.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java
Log:


Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java	2004-12-08 19:00:54 UTC (rev 227)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java	2004-12-08 19:17:07 UTC (rev 228)
@@ -1111,9 +1111,13 @@
 									locale, localmovie,
 									DialogMovie.TYPE_MAINIMAGE);
 							dialog.open();
-							if (localmovie.getMainImage() != null)
+							if (localmovie.getMainImage() != null) {
 								textMoviesmainImage.setText(localmovie
 										.getMainImage().getImageFileName());
+								logger.debug("neues Mainimage: "+localmovie.getMainImage().getImageFileName());
+							}
+							
+							
 						}
 					});
 		}
@@ -1371,7 +1375,6 @@
 						localmovie.getReleaseDate().setTime(
 								DateFormat.getDateInstance(DateFormat.LONG)
 										.parse(textMoviesDate.getText()));
-						logger.debug("Datum: " + localmovie.getReleaseDate());
 					} catch (ParseException e1) {
 						//Hier muss noch was gemacht werden, das Datum konnte
 						// nicht geparst werden
@@ -1415,7 +1418,9 @@
 							insertIntoMoviesOverviewTable(localmovie);
 							textMoviesID.setText(localmovie.getMovieId() + "");
 						} else if (mode_movie == ManagementGui.MODE_EDIT) {
+							logger.debug("MainImage vor: "+localmovie.getMainImage().getImageFileName());
 							Database.updateObject(localmovie);
+							logger.debug("MainImage nach: "+localmovie.getMainImage().getImageFileName());
 						}
 						//Statusline Nachricht sezten
 						statusLine

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/DialogMovie.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/DialogMovie.java	2004-12-08 19:00:54 UTC (rev 227)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/DialogMovie.java	2004-12-08 19:17:07 UTC (rev 228)
@@ -316,9 +316,8 @@
 
                             int[] sel = table1.getSelectionIndices();
                             for (int i = 0; i < sel.length; i++) {
-                                System.out.println("Auswahl:" + i + " "
-                                        + table1.getItem(sel[i]));
 
+
                                 for (int j = 0; j < valuelist.size(); j++) {
                                     if (type == TYPE_ACTOR) {
                                         if ((table1.getItem(sel[i]).getText(0))
@@ -356,10 +355,7 @@
                                                 .equalsIgnoreCase(((Image) valuelist
                                                         .get(j)).getImageId()
                                                         + "")) {
-                                            logger
-                                                    .debug("F?ge Bild zum Movie hinzu:"
-                                                            + (Image) valuelist
-                                                                    .get(j));
+
                                             movie.getImages().add(
                                                     (Image) valuelist.get(j));
                                             break;
@@ -369,10 +365,7 @@
                                                 .equalsIgnoreCase(((Image) valuelist
                                                         .get(j)).getImageId()
                                                         + "")) {
-                                            logger
-                                                    .debug("F?ge Bild zum Movie hinzu:"
-                                                            + (Image) valuelist
-                                                                    .get(j));
+    
                                             movie.setMainImage((Image) valuelist.get(j));
                                             dialogShell.close();
                                         }

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java	2004-12-08 19:00:54 UTC (rev 227)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java	2004-12-08 19:17:07 UTC (rev 228)
@@ -242,6 +242,7 @@
 		try {
 			//get new Session and begin Transaction
 			s = HibernateUtil.currentSession();
+			tx = s.beginTransaction();
 			try {
 				logger.debug("Object " + o.getClass().getName() + " String:"
 						+ o);
@@ -251,6 +252,7 @@
 						+ "des Objectes:" + o + " Exception: " + e);
 				exception = 1;
 			}
+			tx.commit();
 			s.flush();
 
 		} catch (HibernateException e) {



From rgriesch at sheep.berlios.de  Wed Dec  8 20:44:53 2004
From: rgriesch at sheep.berlios.de (Remo Griesch at BerliOS)
Date: Wed, 8 Dec 2004 20:44:53 +0100
Subject: [Provirent-svn-commit] r229 - in project_src/provirent_hibernate/src: de/hsharz/provirent/management/gui test/provirent/hibernate
Message-ID: <200412081944.iB8JirFZ016329@sheep.berlios.de>

Author: rgriesch
Date: 2004-12-08 20:44:50 +0100 (Wed, 08 Dec 2004)
New Revision: 229

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeActors.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeDirectors.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeFormate.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeGenre.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeImage.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeLanguage.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeStatus.java
   project_src/provirent_hibernate/src/test/provirent/hibernate/TestMovie.java
Log:
Alle Composite   - saveObjekt() -> updateObjekt()

Composite Image  - bei Text setEnabled() -> setEditable()

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeActors.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeActors.java	2004-12-08 19:17:07 UTC (rev 228)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeActors.java	2004-12-08 19:44:50 UTC (rev 229)
@@ -671,7 +671,7 @@
                     try {
                         //object speichern
                         // Fehlerbehandlung
-                        Database.saveObject(tmp);
+                        Database.updateObject(tmp);
                         //?bersichtstabelle aktualisieren
                         refreshActorsOverviewTable(textActorsSearch.getText());
                         

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeDirectors.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeDirectors.java	2004-12-08 19:17:07 UTC (rev 228)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeDirectors.java	2004-12-08 19:44:50 UTC (rev 229)
@@ -670,7 +670,7 @@
                     try {
                         //object speichern
                         // Fehlerbehandlung
-                        Database.saveObject(tmp);
+                        Database.updateObject(tmp);
                         //?bersichtstabelle aktualisieren
                         refreshDirectorsOverviewTable(textDirectorsSearch.getText());
                         

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeFormate.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeFormate.java	2004-12-08 19:17:07 UTC (rev 228)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeFormate.java	2004-12-08 19:44:50 UTC (rev 229)
@@ -627,7 +627,7 @@
                 try {
                     //object speichern
                     // Fehlerbehandlung
-                    Database.saveObject(tmp);
+                    Database.updateObject(tmp);
                     //?bersichtstabelle aktualisieren
                     refreshVideoFormatTable(textVideoFormatSearch.getText());
                     
@@ -1232,7 +1232,7 @@
                 try {
                     //object speichern
                     // Fehlerbehandlung
-                    Database.saveObject(tmp);
+                    Database.updateObject(tmp);
                     //?bersichtstabelle aktualisieren
                     refreshAudioFormatTable(textAudioFormatSearch.getText());
                     

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeGenre.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeGenre.java	2004-12-08 19:17:07 UTC (rev 228)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeGenre.java	2004-12-08 19:44:50 UTC (rev 229)
@@ -591,7 +591,7 @@
                 try {
                     //object speichern
                     // Fehlerbehandlung
-                    Database.saveObject(tmp);
+                    Database.updateObject(tmp);
                     //?bersichtstabelle aktualisieren
                     refreshGenreTable(textGenreSearch.getText());
                     

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeImage.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeImage.java	2004-12-08 19:17:07 UTC (rev 228)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeImage.java	2004-12-08 19:44:50 UTC (rev 229)
@@ -917,7 +917,7 @@
 							try {
 								//object speichern
 								// Fehlerbehandlung
-								Database.saveObject(localImage);
+								Database.updateObject(localImage);
 								//?bersichtstabelle aktualisieren
 								refreshImageOverviewTable(textImagesSearch
 										.getText());
@@ -964,10 +964,10 @@
 
 						}
 						tableImagesOverview.setEnabled(true);
-						textImagesSearch.setEnabled(true);
+						textImagesSearch.setEditable(true);
 
-						textImagesDescription.setEnabled(false);
-						textImagesName.setEnabled(false);
+						textImagesDescription.setEditable(false);
+						textImagesName.setEditable(false);
 
 						buttonImageCancel.setEnabled(false);
 						buttonImageDelete.setEnabled(false);
@@ -989,10 +989,10 @@
 					public void widgetSelected(SelectionEvent evt) {
 
 						tableImagesOverview.setEnabled(true);
-						textImagesSearch.setEnabled(true);
+						textImagesSearch.setEditable(true);
 
-						textImagesDescription.setEnabled(false);
-						textImagesName.setEnabled(false);
+						textImagesDescription.setEditable(false);
+						textImagesName.setEditable(false);
 
 						buttonImageCancel.setEnabled(false);
 						buttonImageDelete.setEnabled(false);

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeLanguage.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeLanguage.java	2004-12-08 19:17:07 UTC (rev 228)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeLanguage.java	2004-12-08 19:44:50 UTC (rev 229)
@@ -639,7 +639,7 @@
                 try {
                     //object speichern
                     // Fehlerbehandlung
-                    Database.saveObject(tmp);
+                    Database.updateObject(tmp);
                     //?bersichtstabelle aktualisieren
                     refreshSubtitleTable(textSubtitleSearch.getText());
                     
@@ -1342,7 +1342,7 @@
                 try {
                     //object speichern
                     // Fehlerbehandlung
-                    Database.saveObject(tmp);
+                    Database.updateObject(tmp);
                     //?bersichtstabelle aktualisieren
                     refreshLanguageTable(textLanguageSearch.getText());
                     

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeStatus.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeStatus.java	2004-12-08 19:17:07 UTC (rev 228)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeStatus.java	2004-12-08 19:44:50 UTC (rev 229)
@@ -639,7 +639,7 @@
                 try {
                     //object speichern
                     // Fehlerbehandlung
-                    Database.saveObject(tmp);
+                    Database.updateObject(tmp);
                     //?bersichtstabelle aktualisieren
                     refreshConditionTable(textConditionSearch.getText());
                     
@@ -1342,7 +1342,7 @@
                 try {
                     //object speichern
                     // Fehlerbehandlung
-                    Database.saveObject(tmp);
+                    Database.updateObject(tmp);
                     //?bersichtstabelle aktualisieren
                     refreshStatusTable(textStatusSearch.getText());
                     

Modified: project_src/provirent_hibernate/src/test/provirent/hibernate/TestMovie.java
===================================================================
--- project_src/provirent_hibernate/src/test/provirent/hibernate/TestMovie.java	2004-12-08 19:17:07 UTC (rev 228)
+++ project_src/provirent_hibernate/src/test/provirent/hibernate/TestMovie.java	2004-12-08 19:44:50 UTC (rev 229)
@@ -210,28 +210,28 @@
                         .add(new String[] {
                                 "The Forgotten",
                                 "96",
-                                "A grieving mother, Telly Parada, is struggling to cope with the loss of her 9-year-old son. She is stunned...",
+                                "A grieving mother, Telly Parada, is struggling \n to cope with the loss of her 9-year-old son. \n She is stunned...",
                                 "Forgotten_main.jpg", "Forgotten_1.jpg",
                                 "Forgotten_2.jpg" });
                 data
                         .add(new String[] {
                                 "Ocean's Twelve",
                                 "128",
-                                "With Tess (Roberts) and Rusty (Pitt) at his side, Daniel Ocean (Clooney) must find one more conspirator before he can pull off heists in three different European cities -- Paris, Rome, and Amsterdam.",
+                                "With Tess (Roberts) and Rusty (Pitt) at his side,\n Daniel Ocean (Clooney) must find one more conspirator \n before he can pull off heists in three \n different European cities -- Paris, Rome, and Amsterdam.",
                                 "Twelve_main.jpg", "Twelve_1.jpg",
                                 "Twelve_2.jpg", "Twelve_3.jpg" });
                 data
                         .add(new String[] {
                                 "Blade: Trinity",
                                 "156",
-                                "Framed by the Vampire Nation for a series of brutal murders, the Daywalker (Snipes) finds allies in a group of vampire hunters, the Nightstalkers, and together they wage a battle that leads all the way to Dracula himself.",
+                                "Framed by the Vampire Nation for a series \n of brutal murders, the Daywalker (Snipes) \n finds allies in a group of vampire hunters, \n the Nightstalkers, and together they wage a battle \n that leads all the way to Dracula himself.",
                                 "Blade_main.jpg", "Blade_1.jpg", "Blade_2.jpg",
                                 "Blade_3.jpg" });
                 data
                         .add(new String[] {
                                 "National Treasure",
                                 "126",
-                                "Benjamin Franklin Gates (Cage) descends from a family of treasure-seekers who've all hunted for the same thing: a war chest hidden by the Founding Fathers prior to the Revolutionary War. Ben's close to discovering its whereabouts, as is his competition, though the FBI is also hip to the hunt.",
+                                "Benjamin Franklin Gates (Cage) descends \n from a family of treasure-seekers who've \n all hunted for the same thing: a war chest \n hidden by the Founding Fathers prior to the \n Revolutionary War. Ben's close to discovering \n its whereabouts, as is his competition, \n though the FBI is also hip to the hunt.",
                                 "Treasure_main.jpg", "Treasure_1.jpg",
                                 "Treasure_2.jpg", "Treasure_3.jpg",
                                 "Treasure_4.jpg" });
@@ -239,28 +239,28 @@
                         .add(new String[] {
                                 "Christmas with the Kranks",
                                 "92",
-                                "Upon receiving a last-minute call from their daughter, Luther and Nora Krank (Allen and Curtis) ditch their vacation plans and scramble to get their home in shape to celebrate Christmas.",
+                                "Upon receiving a last-minute call from their \n daughter, Luther and Nora Krank \n (Allen and Curtis) ditch their vacation plans and scramble \n to get their home in shape to \n celebrate Christmas.",
                                 "Kranks_main.jpg", "Kranks_1.jpg",
                                 "Kranks_2.jpg" });
                 data
                         .add(new String[] {
                                 "The Polar Express",
                                 "215",
-                                "A boy's belief in Santa Claus is restored on Christmas Eve when a steam train pulls up in front of his house and whisks him away to the North Pole.",
+                                "A boy's belief in Santa Claus is restored \n on Christmas Eve when a steam train \n pulls up in front of his house and whisks \n him away to the North Pole.",
                                 "Polar_main.jpg", "Polar_1.jpg", "Polar_2.jpg",
                                 "Polar_3.jpg" });
                 data
                         .add(new String[] {
                                 "The Incredibles",
                                 "186",
-                                "Years after their last assignment, a husband and wife superhero team, who currently maintain a ho-hum suburban existence, respond a cryptic communiqu? from a remote island base.",
+                                "Years after their last assignment, \n a husband and wife superhero team, \n who currently maintain a ho-hum suburban existence, \n respond a cryptic communiqu? from a \n remote island base.",
                                 "Incredibles_main.jpg", "Incredibles_1.jpg",
                                 "Incredibles_2.jpg" });
                 data
                         .add(new String[] {
                                 "Closer",
                                 "145",
-                                "Two couples are drawn together by undeniable attraction and a series of chance encounters.",
+                                "Two couples are drawn together by undeniable \n attraction and a series of chance \n encounters.",
                                 "closer_main.jpg", "closer_1.jpg",
                                 "closer_2.jpg", "closer_3.jpg" });
 



From rgriesch at sheep.berlios.de  Wed Dec  8 23:25:32 2004
From: rgriesch at sheep.berlios.de (Remo Griesch at BerliOS)
Date: Wed, 8 Dec 2004 23:25:32 +0100
Subject: [Provirent-svn-commit] r230 - in project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui: . language
Message-ID: <200412082225.iB8MPWvp024070@sheep.berlios.de>

Author: rgriesch
Date: 2004-12-08 23:25:31 +0100 (Wed, 08 Dec 2004)
New Revision: 230

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeDVD.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/dvds.properties
Log:
Composite DVD  - erweitert

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeDVD.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeDVD.java	2004-12-08 19:44:50 UTC (rev 229)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeDVD.java	2004-12-08 22:25:31 UTC (rev 230)
@@ -11,6 +11,8 @@
 import org.eclipse.swt.events.FocusEvent;
 import org.eclipse.swt.events.SelectionAdapter;
 import org.eclipse.swt.events.SelectionEvent;
+import org.eclipse.swt.layout.FormAttachment;
+import org.eclipse.swt.layout.FormData;
 import org.eclipse.swt.layout.GridData;
 import org.eclipse.swt.layout.GridLayout;
 import org.eclipse.swt.widgets.Composite;
@@ -53,8 +55,11 @@
     .getLogger(CompositeDVD.class);
     
     private Group groupDVD;
+    
     private Group groupDVDOverview;
     
+    private Group groupDVDDetail;
+    
     private Table tableDVDOverview;
     
     private TableColumn tableDVDOverview_ColumnID;
@@ -67,7 +72,11 @@
     
     private Text textDVDSearch;
     
+    private Text textDVDID;
+    
     private Label labelDVDSearch;
+   
+    private Label labelDVDID;
     
     private Composite parent;
     
@@ -314,7 +323,43 @@
      */
     private void initDVDDetail() {
         // TODO Auto-generated method stub
-        
+        //      Group DVD Detail
+		{
+			groupDVDDetail = new Group(sashForm1, SWT.H_SCROLL);
+			GridLayout group2Layout = new GridLayout();
+			GridData group2LData = new GridData();
+			group2Layout.verticalSpacing = 15;
+			group2Layout.numColumns = 6;
+			groupDVDDetail.setText(l.getString("dvd.groupdetail.label"));
+			FormData formData = new FormData();
+			groupDVDDetail.setLayout(group2Layout);
+			formData.right = new FormAttachment(100, 100, -5);
+			formData.top = new FormAttachment(0, 100, 5);
+			formData.bottom = new FormAttachment(100, 100, -5);
+			groupDVDDetail.setLayoutData(formData);
+		}
+		//      labels and text for detail
+		{
+			labelDVDID = new Label(groupDVDDetail, SWT.NONE);
+			labelDVDID.setText(l.getString("dvd.groupdetail.labelid")
+					+ ":");
+			labelDVDID.setSize(125, 15);
+			GridData formData2 = new GridData();
+			formData2.heightHint = 15;
+			formData2.horizontalAlignment = GridData.FILL;
+			formData2.verticalAlignment = GridData.BEGINNING;
+			labelDVDID.setLayoutData(formData2);
+		}
+		{
+			textDVDID = new Text(groupDVDDetail, SWT.READ_ONLY
+					| SWT.BORDER);
+			GridData text1LData1 = new GridData();
+			text1LData1.horizontalAlignment = GridData.FILL;
+			text1LData1.heightHint = 13;
+			text1LData1.grabExcessHorizontalSpace = true;
+			text1LData1.horizontalSpan = 5;
+			textDVDID.setLayoutData(text1LData1);
+		}
     }
 
     

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java	2004-12-08 19:44:50 UTC (rev 229)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java	2004-12-08 22:25:31 UTC (rev 230)
@@ -420,7 +420,7 @@
 	 *  
 	 */
 	private void initMoviesDetail() {
-		// Group Actors Detail
+		// Group Movies Detail
 		{
 			groupMoviesDetail = new Group(sashForm1, SWT.H_SCROLL);
 			GridLayout group2Layout = new GridLayout();

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/dvds.properties
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/dvds.properties	2004-12-08 19:44:50 UTC (rev 229)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/dvds.properties	2004-12-08 22:25:31 UTC (rev 230)
@@ -6,4 +6,7 @@
 dvd.groupoverview.columnid =ID
 dvd.groupoverview.columntitle =Titel
 dvd.groupoverview.columnstatus =Status
-dvd.groupoverview.columncondition =Zustand
\ No newline at end of file
+dvd.groupoverview.columncondition =Zustand
+
+dvd.groupdetail.label =Detail
+dvd.groupdetail.labelid =Id
\ No newline at end of file



From pschneider at sheep.berlios.de  Thu Dec  9 20:55:58 2004
From: pschneider at sheep.berlios.de (Philipp Schneider at BerliOS)
Date: Thu, 9 Dec 2004 20:55:58 +0100
Subject: [Provirent-svn-commit] r231 - project_src/provirent_hibernate/src/test/provirent/hibernate
Message-ID: <200412091955.iB9JtwfC031831@sheep.berlios.de>

Author: pschneider
Date: 2004-12-09 20:55:57 +0100 (Thu, 09 Dec 2004)
New Revision: 231

Modified:
   project_src/provirent_hibernate/src/test/provirent/hibernate/HibernateUtil.java
   project_src/provirent_hibernate/src/test/provirent/hibernate/TestCondition.java
   project_src/provirent_hibernate/src/test/provirent/hibernate/TestDvd.java
Log:


Modified: project_src/provirent_hibernate/src/test/provirent/hibernate/HibernateUtil.java
===================================================================
--- project_src/provirent_hibernate/src/test/provirent/hibernate/HibernateUtil.java	2004-12-08 22:25:31 UTC (rev 230)
+++ project_src/provirent_hibernate/src/test/provirent/hibernate/HibernateUtil.java	2004-12-09 19:55:57 UTC (rev 231)
@@ -32,7 +32,6 @@
  */
 package test.provirent.hibernate;
 
-
 import net.sf.hibernate.HibernateException;
 import net.sf.hibernate.Session;
 import net.sf.hibernate.SessionFactory;
@@ -80,18 +79,16 @@
         try {
             //     Create the SessionFactory
             Configuration cfg = new Configuration();
-            cfg
-            .addClass(Movie.class).addClass(Actor.class)
-            .addClass(AudioFormat.class).addClass(Condition.class)
-            .addClass(Director.class).addClass(Dvd.class)
-            .addClass(Genre.class).addClass(Language.class)
-            .addClass(Status.class).addClass(Bill.class)
-            .addClass(Subtitle.class).addClass(VideoFormat.class)
-            .addClass(Customer.class).addClass(Image.class)
-            .addClass(MovieOrder.class).addClass(OrderItem.class)
-            .addClass(Person.class).addClass(Payment.class);
+            cfg.addClass(Movie.class).addClass(Actor.class).addClass(
+                    AudioFormat.class).addClass(Condition.class).addClass(
+                    Director.class).addClass(Dvd.class).addClass(Genre.class)
+                    .addClass(Language.class).addClass(Status.class).addClass(
+                            Bill.class).addClass(Subtitle.class).addClass(
+                            VideoFormat.class).addClass(Customer.class)
+                    .addClass(Image.class).addClass(MovieOrder.class).addClass(
+                            OrderItem.class).addClass(Person.class).addClass(
+                            Payment.class);
 
-
             sessionFactory = cfg.buildSessionFactory();
         } catch (Throwable ex) {
             log.error("Initial SessionFactory creation failed.", ex);
@@ -134,45 +131,76 @@
         }
     }
 
-    
-	public static Image getImagename(final String filter, Session s){
+    public static Image getImagename(final String filter, Session s) {
         if (logger.isDebugEnabled()) {
             logger
                     .debug("getImagename(String filter = " + filter
                             + ") - start");
         }
-	    
-	    //init the returnlist
-	    Image returnimg = null;
 
-	    
-	    try {
+        //init the returnlist
+        Image returnimg = null;
 
-	            
+        try {
 
-	        returnimg = (Image) s.createCriteria(Image.class).add(
+            returnimg = (Image) s.createCriteria(Image.class).add(
                     Expression.eq("imageFileName", filter)).list().get(0);
-            
-            if (logger.isDebugEnabled()) {
-                logger.debug("getImagename(String) - end");
-            }
-	
 
-	
-	
-	    } catch (Exception e) {
+        } catch (Exception e) {
             logger.error("getImagename(String)", e);
 
-	        logger.error(
-	                "getImagename() - Error while trying to do Transaction",
-	                e);
-	        returnimg = null;
-	    }
-	    return returnimg;
-	    	
-	}
-	
-	
+            returnimg = null;
+        }
+        return returnimg;
+
+    }
     
+    public static Condition getCondition(final String filter, Session s) {
+        if (logger.isDebugEnabled()) {
+            logger
+                    .debug("getCondition(String filter = " + filter
+                            + ") - start");
+        }
+
+        //init the returnlist
+        Condition returnobject = null;
+
+        try {
+
+            returnobject = (Condition) s.createCriteria(Condition.class).add(
+                    Expression.eq("conditionName", filter)).list().get(0);
+
+        } catch (Exception e) {
+            logger.error("getCondition(String)", e);
+
+            returnobject = null;
+        }
+        return returnobject;
+
+    }
+
     
+    public static Status getStatus(final String filter, Session s) {
+        if (logger.isDebugEnabled()) {
+            logger
+                    .debug("getStatus(String filter = " + filter
+                            + ") - start");
+        }
+
+        //init the returnlist
+        Status returnobject = null;
+
+        try {
+
+            returnobject = (Status) s.createCriteria(Status.class).add(
+                    Expression.eq("statusName", filter)).list().get(0);
+
+        } catch (Exception e) {
+            logger.error("getStatus(String)", e);
+
+            returnobject = null;
+        }
+        return returnobject;
+
+    }
 }
\ No newline at end of file

Modified: project_src/provirent_hibernate/src/test/provirent/hibernate/TestCondition.java
===================================================================
--- project_src/provirent_hibernate/src/test/provirent/hibernate/TestCondition.java	2004-12-08 22:25:31 UTC (rev 230)
+++ project_src/provirent_hibernate/src/test/provirent/hibernate/TestCondition.java	2004-12-09 19:55:57 UTC (rev 231)
@@ -220,7 +220,7 @@
                 Condition myd3 = new Condition("mittlere Kratzer","");
                 Condition myd4 = new Condition("schwere Kratzer","");
                 Condition myd5 = new Condition("nicht lesbar","");
-
+                
                 Conditions.add(myd1);
                 Conditions.add(myd2);
                 Conditions.add(myd3);

Modified: project_src/provirent_hibernate/src/test/provirent/hibernate/TestDvd.java
===================================================================
--- project_src/provirent_hibernate/src/test/provirent/hibernate/TestDvd.java	2004-12-08 22:25:31 UTC (rev 230)
+++ project_src/provirent_hibernate/src/test/provirent/hibernate/TestDvd.java	2004-12-09 19:55:57 UTC (rev 231)
@@ -1,7 +1,19 @@
 package test.provirent.hibernate;
 
+import java.util.ArrayList;
+
 import junit.framework.TestCase;
+import net.sf.hibernate.HibernateException;
+import net.sf.hibernate.Session;
+import net.sf.hibernate.Transaction;
 
+import org.apache.log4j.Logger;
+
+import de.hsharz.provirent.objects.Condition;
+import de.hsharz.provirent.objects.Dvd;
+import de.hsharz.provirent.objects.Movie;
+import de.hsharz.provirent.objects.Status;
+
 /*
  * Created on 09.10.2004
  *
@@ -40,6 +52,10 @@
  *
  */
 public class TestDvd extends TestCase {
+    /**
+     * Logger for this class
+     */
+    private static final Logger logger = Logger.getLogger(TestDvd.class);
 
 	/*
 	 * @see TestCase#setUp()
@@ -63,4 +79,68 @@
 		super(arg0);
 	}
 
+	
+	public void testCreateDvd(){
+	    
+        Session s = null;
+        Transaction tx = null;
+        RandomRange random;
+        
+	    
+	    try{
+	        //s= HibernateUtil.currentSession();
+	        //tx = s.beginTransaction();
+	        if(false)
+	            throw new HibernateException("");
+	        
+            //is DB open and connected
+            //assertTrue("Connected to Db? ", s.isConnected());
+            //assertTrue("Db Open? ", s.isOpen());
+	        
+            
+            Dvd dvd = new Dvd();
+            
+            
+            random = new RandomRange(1205, 4523682);
+            
+            dvd.setBarcode(random.getNumbers(1).get(0)+"");
+            
+            if (HibernateUtil.getCondition("neu",s) != null){
+                dvd.setCondition(HibernateUtil.getCondition("neu",s));
+            } else {
+                fail("Konnte keine Condition neu aus DB bekommen");
+            }
+            
+            if (HibernateUtil.getStatus("ausleihbar",s) != null){
+                dvd.setStatus(HibernateUtil.getStatus("ausleihbar",s));
+            } else {
+                fail("Konnte keinen Status ausleihbar aus DB bekommen");
+            }
+            
+            
+            dvd.setMovie(new Movie());
+            
+            
+            dvd.setLanguages(new ArrayList());
+            dvd.setSubtitles(new ArrayList());
+            
+            dvd.setAudioFormats(new ArrayList());
+            dvd.setVideoFormats(new ArrayList());
+	        
+	        
+	    }  catch (HibernateException hex){
+	        fail("Fehler beim Session oder Transaction aufbau");
+	        logger.error("Fehler beim Session oder Transaction aufbau",hex);
+	        
+    } finally {
+        try {
+            // No matter what, close the session
+            HibernateUtil.closeSession();
+        } catch (HibernateException e) {
+            // TODO Auto-generated catch block
+            e.printStackTrace();
+        }
+    }
+	    
+	}
 }
\ No newline at end of file



From pschneider at sheep.berlios.de  Fri Dec 10 15:22:08 2004
From: pschneider at sheep.berlios.de (Philipp Schneider at BerliOS)
Date: Fri, 10 Dec 2004 15:22:08 +0100
Subject: [Provirent-svn-commit] r232 - project_src/provirent_hibernate/src/test/provirent/hibernate
Message-ID: <200412101422.iBAEM8fu014170@sheep.berlios.de>

Author: pschneider
Date: 2004-12-10 15:22:04 +0100 (Fri, 10 Dec 2004)
New Revision: 232

Modified:
   project_src/provirent_hibernate/src/test/provirent/hibernate/TestDvd.java
Log:
- TestDVD vervollst?\195?\164ndigt

Modified: project_src/provirent_hibernate/src/test/provirent/hibernate/TestDvd.java
===================================================================
--- project_src/provirent_hibernate/src/test/provirent/hibernate/TestDvd.java	2004-12-09 19:55:57 UTC (rev 231)
+++ project_src/provirent_hibernate/src/test/provirent/hibernate/TestDvd.java	2004-12-10 14:22:04 UTC (rev 232)
@@ -1,6 +1,7 @@
 package test.provirent.hibernate;
 
 import java.util.ArrayList;
+import java.util.List;
 
 import junit.framework.TestCase;
 import net.sf.hibernate.HibernateException;
@@ -9,10 +10,12 @@
 
 import org.apache.log4j.Logger;
 
-import de.hsharz.provirent.objects.Condition;
+import de.hsharz.provirent.objects.AudioFormat;
 import de.hsharz.provirent.objects.Dvd;
+import de.hsharz.provirent.objects.Language;
 import de.hsharz.provirent.objects.Movie;
-import de.hsharz.provirent.objects.Status;
+import de.hsharz.provirent.objects.Subtitle;
+import de.hsharz.provirent.objects.VideoFormat;
 
 /*
  * Created on 09.10.2004
@@ -49,7 +52,7 @@
 
 /**
  * @author Philipp Schneider
- *
+ *  
  */
 public class TestDvd extends TestCase {
     /**
@@ -57,90 +60,199 @@
      */
     private static final Logger logger = Logger.getLogger(TestDvd.class);
 
-	/*
-	 * @see TestCase#setUp()
-	 */
-	protected void setUp() throws Exception {
-		super.setUp();
-	}
+    /*
+     * @see TestCase#setUp()
+     */
+    protected void setUp() throws Exception {
+        super.setUp();
+    }
 
-	/*
-	 * @see TestCase#tearDown()
-	 */
-	protected void tearDown() throws Exception {
-		super.tearDown();
-	}
+    /*
+     * @see TestCase#tearDown()
+     */
+    protected void tearDown() throws Exception {
+        super.tearDown();
+    }
 
-	/**
-	 * Constructor for TestDvd.
-	 * @param arg0
-	 */
-	public TestDvd(String arg0) {
-		super(arg0);
-	}
+    /**
+     * Constructor for TestDvd.
+     * 
+     * @param arg0
+     */
+    public TestDvd(String arg0) {
+        super(arg0);
+    }
 
-	
-	public void testCreateDvd(){
-	    
+    public void testCreateDvd() {
+
         Session s = null;
         Transaction tx = null;
-        RandomRange random;
-        
-	    
-	    try{
-	        //s= HibernateUtil.currentSession();
-	        //tx = s.beginTransaction();
-	        if(false)
-	            throw new HibernateException("");
-	        
+
+        RandomRange randomRange;
+        List random;
+        List dbprops;
+        int anzahl = 0;
+        List dvdprops;
+
+        try {
+            s= HibernateUtil.currentSession();
+            tx = s.beginTransaction();
+            if (false)
+                throw new HibernateException("");
+
             //is DB open and connected
-            //assertTrue("Connected to Db? ", s.isConnected());
-            //assertTrue("Db Open? ", s.isOpen());
-	        
-            
-            Dvd dvd = new Dvd();
-            
-            
-            random = new RandomRange(1205, 4523682);
-            
-            dvd.setBarcode(random.getNumbers(1).get(0)+"");
-            
-            if (HibernateUtil.getCondition("neu",s) != null){
-                dvd.setCondition(HibernateUtil.getCondition("neu",s));
-            } else {
-                fail("Konnte keine Condition neu aus DB bekommen");
+            assertTrue("Connected to Db? ", s.isConnected());
+            assertTrue("Db Open? ", s.isOpen());
+
+            //create a DVD for EACH Movie
+            //try to get Languages from db
+            List movies = s.find("from Movie as movie");
+            assertNotNull("testCreateDvd(): Can't get Movie from DB. Null",
+                    movies);
+            assertTrue("testCreateDvd(): Can not find Movie in DB", movies
+                    .size() > 0);
+
+            for (int i = 0; i < movies.size(); i++) {
+
+                Movie movie = (Movie) movies.get(i);
+
+                List properties = new ArrayList();
+                properties.add(new String[] { "neu", "ausleihbar" });
+                properties.add(new String[] { "neu", "verliehen" });
+                properties.add(new String[] { "leichte Kratzer", "ausleihbar" });
+                properties.add(new String[] { "mittlere Kratzer", "ausleihbar" });
+                properties.add(new String[] { "leichte Kratzer", "verliehen" });
+                properties.add(new String[] { "mittlere Kratzer", "verliehen" });
+                
+                
+                
+                for (int j = 0; j < properties.size(); j++) {
+
+                    //create new object
+                    Dvd dvd = new Dvd();
+
+                    //set the movie
+                    dvd.setMovie(movie);
+
+                    //set the random barcode
+                    randomRange = new RandomRange(1205, 4523682);
+                    dvd.setBarcode(randomRange.getNumbers(1).get(0) + "");
+
+                    //set the condition
+                    if (HibernateUtil.getCondition( ((String[])properties.get(j))[0], s) != null) {
+                        dvd.setCondition(HibernateUtil.getCondition(((String[])properties.get(j))[0], s));
+                    } else {
+                        fail("Konnte keine Condition neu aus DB bekommen");
+                    }
+
+                    //set the status
+                    if (HibernateUtil.getStatus( ((String[])properties.get(j))[1], s) != null) {
+                        dvd.setStatus(HibernateUtil.getStatus(((String[])properties.get(j))[1], s));
+                    } else {
+                        fail("Konnte keinen Status ausleihbar aus DB bekommen");
+                    }
+
+                    //try to get Languages from db
+                    dbprops = s.find("from Language as language");
+                    assertNotNull(
+                            "testCreateDvd(): Can't get Languages from DB. Null",
+                            dbprops);
+                    assertTrue("testCreateDvd(): Can not find Languages in DB",
+                            dbprops.size() > 0);
+
+                    anzahl = 2;
+                    dvdprops = new ArrayList();
+                    randomRange = new RandomRange(0, (dbprops.size() - 1));
+                    random = randomRange.getNumbers(anzahl);
+
+                    for (int k = 0; k < anzahl; k++) {
+                        Language prop = (Language) dbprops
+                                .get(((Integer) random.get(k)).intValue());
+                        dvdprops.add(prop);
+                    }
+                    dvd.setLanguages(dvdprops);
+
+                    //try to get Subtitle from db
+                    dbprops = s.find("from Subtitle as subtitle");
+                    assertNotNull(
+                            "testCreateDvd(): Can't get Subtitle from DB. Null",
+                            dbprops);
+                    assertTrue("testCreateDvd(): Can not find Subtitle in DB",
+                            dbprops.size() > 0);
+
+                    anzahl = 2;
+                    dvdprops = new ArrayList();
+                    randomRange = new RandomRange(0, (dbprops.size() - 1));
+                    random = randomRange.getNumbers(anzahl);
+
+                    for (int k = 0; k < anzahl; k++) {
+                        Subtitle prop = (Subtitle) dbprops
+                                .get(((Integer) random.get(k)).intValue());
+                        dvdprops.add(prop);
+                    }
+                    dvd.setSubtitles(dvdprops);
+
+                    //try to get AudioFormat from db
+                    dbprops = s.find("from AudioFormat as audioFormat");
+                    assertNotNull(
+                            "testCreateDvd(): Can't get AudioFormat from DB. Null",
+                            dbprops);
+                    assertTrue(
+                            "testCreateDvd(): Can not find AudioFormat in DB",
+                            dbprops.size() > 0);
+
+                    anzahl = 2;
+                    dvdprops = new ArrayList();
+                    randomRange = new RandomRange(0, (dbprops.size() - 1));
+                    random = randomRange.getNumbers(anzahl);
+
+                    for (int k = 0; k < anzahl; k++) {
+                        AudioFormat prop = (AudioFormat) dbprops
+                                .get(((Integer) random.get(k)).intValue());
+                        dvdprops.add(prop);
+                    }
+                    dvd.setAudioFormats(dvdprops);
+
+                    //try to get VideoFormat from db
+                    dbprops = s.find("from VideoFormat as videoFormat");
+                    assertNotNull(
+                            "testCreateDvd(): Can't get VideoFormat from DB. Null",
+                            dbprops);
+                    assertTrue(
+                            "testCreateDvd(): Can not find VideoFormat in DB",
+                            dbprops.size() > 0);
+
+                    anzahl = 2;
+                    dvdprops = new ArrayList();
+                    randomRange = new RandomRange(0, (dbprops.size() - 1));
+                    random = randomRange.getNumbers(anzahl);
+
+                    for (int k = 0; k < anzahl; k++) {
+                        VideoFormat prop = (VideoFormat) dbprops
+                                .get(((Integer) random.get(k)).intValue());
+                        dvdprops.add(prop);
+                    }
+                    dvd.setVideoFormats(dvdprops);
+
+                    //save the dvd
+                    logger.debug(i+" "+j+" DVD:"+dvd);
+                    s.save(dvd);
+                }
             }
-            
-            if (HibernateUtil.getStatus("ausleihbar",s) != null){
-                dvd.setStatus(HibernateUtil.getStatus("ausleihbar",s));
-            } else {
-                fail("Konnte keinen Status ausleihbar aus DB bekommen");
+tx.commit();
+        } catch (HibernateException hex) {
+            fail("Fehler beim Session oder Transaction aufbau");
+            logger.error("Fehler beim Session oder Transaction aufbau", hex);
+
+        } finally {
+            try {
+                // No matter what, close the session
+                HibernateUtil.closeSession();
+            } catch (HibernateException e) {
+                // TODO Auto-generated catch block
+                e.printStackTrace();
             }
-            
-            
-            dvd.setMovie(new Movie());
-            
-            
-            dvd.setLanguages(new ArrayList());
-            dvd.setSubtitles(new ArrayList());
-            
-            dvd.setAudioFormats(new ArrayList());
-            dvd.setVideoFormats(new ArrayList());
-	        
-	        
-	    }  catch (HibernateException hex){
-	        fail("Fehler beim Session oder Transaction aufbau");
-	        logger.error("Fehler beim Session oder Transaction aufbau",hex);
-	        
-    } finally {
-        try {
-            // No matter what, close the session
-            HibernateUtil.closeSession();
-        } catch (HibernateException e) {
-            // TODO Auto-generated catch block
-            e.printStackTrace();
         }
+
     }
-	    
-	}
 }
\ No newline at end of file



From pschneider at sheep.berlios.de  Fri Dec 10 21:48:36 2004
From: pschneider at sheep.berlios.de (Philipp Schneider at BerliOS)
Date: Fri, 10 Dec 2004 21:48:36 +0100
Subject: [Provirent-svn-commit] r233 - project_src/provirent_hibernate/src/test/provirent/hibernate
Message-ID: <200412102048.iBAKmapI019452@sheep.berlios.de>

Author: pschneider
Date: 2004-12-10 21:48:35 +0100 (Fri, 10 Dec 2004)
New Revision: 233

Added:
   project_src/provirent_hibernate/src/test/provirent/hibernate/TestMovieOrder.java
Removed:
   project_src/provirent_hibernate/src/test/provirent/hibernate/TestOrder.java
Modified:
   project_src/provirent_hibernate/src/test/provirent/hibernate/TestDvd.java
Log:


Modified: project_src/provirent_hibernate/src/test/provirent/hibernate/TestDvd.java
===================================================================
--- project_src/provirent_hibernate/src/test/provirent/hibernate/TestDvd.java	2004-12-10 14:22:04 UTC (rev 232)
+++ project_src/provirent_hibernate/src/test/provirent/hibernate/TestDvd.java	2004-12-10 20:48:35 UTC (rev 233)
@@ -239,7 +239,8 @@
                     s.save(dvd);
                 }
             }
-tx.commit();
+            tx.commit();
+            
         } catch (HibernateException hex) {
             fail("Fehler beim Session oder Transaction aufbau");
             logger.error("Fehler beim Session oder Transaction aufbau", hex);

Copied: project_src/provirent_hibernate/src/test/provirent/hibernate/TestMovieOrder.java (from rev 231, project_src/provirent_hibernate/src/test/provirent/hibernate/TestOrder.java)
===================================================================
--- project_src/provirent_hibernate/src/test/provirent/hibernate/TestOrder.java	2004-12-09 19:55:57 UTC (rev 231)
+++ project_src/provirent_hibernate/src/test/provirent/hibernate/TestMovieOrder.java	2004-12-10 20:48:35 UTC (rev 233)
@@ -0,0 +1,65 @@
+/*
+ * Created on 09.10.2004
+ *
+ * Copyright (c) 2004/2005, Remo Griesch/Stefan Forstner/Philipp Schneider
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * - Redistributions of source code must retain the above copyright notice,
+ * this list of conditions and the following disclaimer.
+ * - Redistributions in binary form must reproduce the above copyright notice,
+ * this list of conditions and the following disclaimer in the documentation
+ * and/or other materials provided with the distribution.
+ * - Neither the name of the Remo Griesch/Stefan Forstner/Philipp Schneider nor
+ * the names of its contributors may be used to endorse or promote products
+ * derived from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+package test.provirent.hibernate;
+
+import junit.framework.TestCase;
+
+/**
+ * @author Philipp Schneider
+ *
+ */
+public class TestMovieOrder extends TestCase {
+
+    /*
+     * @see TestCase#setUp()
+     */
+    protected void setUp() throws Exception {
+        super.setUp();
+    }
+
+    /*
+     * @see TestCase#tearDown()
+     */
+    protected void tearDown() throws Exception {
+        super.tearDown();
+    }
+
+    /**
+     * Constructor for TestOrder.
+     * @param arg0
+     */
+    public TestMovieOrder(String arg0) {
+        super(arg0);
+    }
+
+}

Deleted: project_src/provirent_hibernate/src/test/provirent/hibernate/TestOrder.java
===================================================================
--- project_src/provirent_hibernate/src/test/provirent/hibernate/TestOrder.java	2004-12-10 14:22:04 UTC (rev 232)
+++ project_src/provirent_hibernate/src/test/provirent/hibernate/TestOrder.java	2004-12-10 20:48:35 UTC (rev 233)
@@ -1,65 +0,0 @@
-/*
- * Created on 09.10.2004
- *
- * Copyright (c) 2004/2005, Remo Griesch/Stefan Forstner/Philipp Schneider
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met:
- *
- * - Redistributions of source code must retain the above copyright notice,
- * this list of conditions and the following disclaimer.
- * - Redistributions in binary form must reproduce the above copyright notice,
- * this list of conditions and the following disclaimer in the documentation
- * and/or other materials provided with the distribution.
- * - Neither the name of the Remo Griesch/Stefan Forstner/Philipp Schneider nor
- * the names of its contributors may be used to endorse or promote products
- * derived from this software without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
- * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
- * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
- * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
- * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
- * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
- * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- * POSSIBILITY OF SUCH DAMAGE.
- *
- */
-package test.provirent.hibernate;
-
-import junit.framework.TestCase;
-
-/**
- * @author Philipp Schneider
- *
- */
-public class TestOrder extends TestCase {
-
-    /*
-     * @see TestCase#setUp()
-     */
-    protected void setUp() throws Exception {
-        super.setUp();
-    }
-
-    /*
-     * @see TestCase#tearDown()
-     */
-    protected void tearDown() throws Exception {
-        super.tearDown();
-    }
-
-    /**
-     * Constructor for TestOrder.
-     * @param arg0
-     */
-    public TestOrder(String arg0) {
-        super(arg0);
-    }
-
-}



From pschneider at sheep.berlios.de  Fri Dec 10 22:47:20 2004
From: pschneider at sheep.berlios.de (Philipp Schneider at BerliOS)
Date: Fri, 10 Dec 2004 22:47:20 +0100
Subject: [Provirent-svn-commit] r234 - in project_src/provirent_hibernate/src: de/hsharz/provirent/objects test/provirent/hibernate
Message-ID: <200412102147.iBALlKVZ022189@sheep.berlios.de>

Author: pschneider
Date: 2004-12-10 22:47:19 +0100 (Fri, 10 Dec 2004)
New Revision: 234

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/objects/MovieOrder.hbm.xml
   project_src/provirent_hibernate/src/test/provirent/hibernate/TestDvd.java
   project_src/provirent_hibernate/src/test/provirent/hibernate/TestMovieOrder.java
Log:
- TestOrder begonnen

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/objects/MovieOrder.hbm.xml
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/objects/MovieOrder.hbm.xml	2004-12-10 20:48:35 UTC (rev 233)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/objects/MovieOrder.hbm.xml	2004-12-10 21:47:19 UTC (rev 234)
@@ -28,8 +28,8 @@
 		 </many-to-one>
 
  			<list	name="movieOrderItems"
- 						table="MOVIEORDERORDERITEMS"
- 						>
+ 					table="MOVIEORDERORDERITEMS"
+ 					cascade="all"	>
 				<meta attribute="use-in-tostring">true</meta>
 				<key column="MOVIEORDERID"/>
 				<index column="POS"/>

Modified: project_src/provirent_hibernate/src/test/provirent/hibernate/TestDvd.java
===================================================================
--- project_src/provirent_hibernate/src/test/provirent/hibernate/TestDvd.java	2004-12-10 20:48:35 UTC (rev 233)
+++ project_src/provirent_hibernate/src/test/provirent/hibernate/TestDvd.java	2004-12-10 21:47:19 UTC (rev 234)
@@ -84,6 +84,9 @@
     }
 
     public void testCreateDvd() {
+        if (logger.isDebugEnabled()) {
+            logger.debug("testCreateDvd() - start");
+        }
 
         Session s = null;
         Transaction tx = null;
@@ -250,10 +253,15 @@
                 // No matter what, close the session
                 HibernateUtil.closeSession();
             } catch (HibernateException e) {
+                logger.error("testCreateDvd()", e);
+
                 // TODO Auto-generated catch block
                 e.printStackTrace();
             }
         }
 
+        if (logger.isDebugEnabled()) {
+            logger.debug("testCreateDvd() - end");
+        }
     }
 }
\ No newline at end of file

Modified: project_src/provirent_hibernate/src/test/provirent/hibernate/TestMovieOrder.java
===================================================================
--- project_src/provirent_hibernate/src/test/provirent/hibernate/TestMovieOrder.java	2004-12-10 20:48:35 UTC (rev 233)
+++ project_src/provirent_hibernate/src/test/provirent/hibernate/TestMovieOrder.java	2004-12-10 21:47:19 UTC (rev 234)
@@ -32,7 +32,21 @@
  */
 package test.provirent.hibernate;
 
+import java.util.ArrayList;
+import java.util.Calendar;
+import java.util.List;
+
 import junit.framework.TestCase;
+import net.sf.hibernate.HibernateException;
+import net.sf.hibernate.Session;
+import net.sf.hibernate.Transaction;
+import de.hsharz.provirent.objects.Condition;
+import de.hsharz.provirent.objects.Customer;
+import de.hsharz.provirent.objects.Dvd;
+import de.hsharz.provirent.objects.Movie;
+import de.hsharz.provirent.objects.MovieOrder;
+import de.hsharz.provirent.objects.OrderItem;
+import de.hsharz.provirent.objects.Payment;
 
 /**
  * @author Philipp Schneider
@@ -62,4 +76,61 @@
         super(arg0);
     }
 
-}
+    public void createMovieOrder() {
+
+        Session s = null;
+        Transaction tx = null;
+
+        try {
+            s = HibernateUtil.currentSession();
+            tx = s.beginTransaction();
+
+            List customers = new ArrayList();
+            //for each movie 
+            for (int i = 0; i < 3; i++) {
+
+                Customer customer = (Customer) customers.get(i);
+
+
+                MovieOrder movieOrder = new MovieOrder();
+                movieOrder.setCustomer(customer);
+
+                List orderItems = new ArrayList();
+
+                for (int j = 0; j < 3; j++) {
+
+                    OrderItem orderItem = new OrderItem();
+                    orderItem.setCustomer(customer);
+                    orderItem.setDuration(2);
+
+                    orderItem.setDvd(new Dvd());
+                    
+                    orderItem.setOrderTime(Calendar.getInstance());
+                    orderItem.setPayment(new Payment());
+
+                    //this data is to be set when the dvd is beeing
+                    //send to the customer
+                    orderItem.setConditionSend(new Condition());
+                    orderItem.setSenderTime(Calendar.getInstance());
+
+                    //this data is set when the dvd is beeig received
+                    //from the customer
+                    orderItem.setReceivingTime(null);
+                    orderItem.setConditionReceiving(null);
+
+                    //add to the List
+                    orderItems.add(orderItem);
+                }
+
+                movieOrder.setMovieOrderItems(orderItems);
+
+                //save the movieOrder
+                s.save(movieOrder);
+            }
+        } catch (HibernateException e) {
+            // TODO Auto-generated catch block
+            e.printStackTrace();
+        }
+
+    }
+}
\ No newline at end of file



From pschneider at sheep.berlios.de  Sat Dec 11 13:01:58 2004
From: pschneider at sheep.berlios.de (Philipp Schneider at BerliOS)
Date: Sat, 11 Dec 2004 13:01:58 +0100
Subject: [Provirent-svn-commit] r235 - in project_src/provirent_hibernate/src: de/hsharz/provirent/management/gui de/hsharz/provirent/objects de/hsharz/provirent/persistence test/provirent/hibernate
Message-ID: <200412111201.iBBC1wVa003941@sheep.berlios.de>

Author: pschneider
Date: 2004-12-11 13:01:55 +0100 (Sat, 11 Dec 2004)
New Revision: 235

Added:
   project_src/provirent_hibernate/src/de/hsharz/provirent/objects/PaymentCategory.hbm.xml
   project_src/provirent_hibernate/src/de/hsharz/provirent/objects/PaymentCategory.java
   project_src/provirent_hibernate/src/test/provirent/hibernate/TestPaymentCategory.java
Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositePayment.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Dvd.hbm.xml
   project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Dvd.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Payment.hbm.xml
   project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Payment.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/HibernateUtil.java
   project_src/provirent_hibernate/src/test/provirent/hibernate/AllTestsComplexObjects.java
   project_src/provirent_hibernate/src/test/provirent/hibernate/AllTestsSimpleObjects.java
   project_src/provirent_hibernate/src/test/provirent/hibernate/HibernateUtil.java
   project_src/provirent_hibernate/src/test/provirent/hibernate/TestDvd.java
   project_src/provirent_hibernate/src/test/provirent/hibernate/TestPayment.java
Log:
- neue Klasse PaymentCategory hinzugef?\195?\188gt
- Klasse Payment auch ver?\195?\164ndert
- CompositePayment MUSS NOCH ge?\195?\164ndert werden

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositePayment.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositePayment.java	2004-12-10 21:47:19 UTC (rev 234)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositePayment.java	2004-12-11 12:01:55 UTC (rev 235)
@@ -63,7 +63,7 @@
 		SWTResourceManager.registerResourceUser(this);
 	}
 
-	/**
+	/** 
 	 * Logger for this class
 	 */
 	private static final Logger logger = Logger
@@ -941,17 +941,17 @@
 	 * @param Payment
 	 * @throws DataBaseException
 	 */
-	protected void insertIntoPaymentTable(Payment Payment)
+	protected void insertIntoPaymentTable(Payment payment)
 			throws DataBaseException {
 		TableItem item = new TableItem(tablePayment, SWT.NONE);
 		item.setText(new String[] {
-				Payment.getPaymentId() + "",
-				Payment.getName(),
-				Double.toString(Payment.getDuration1()),
-				Double.toString(Payment.getDuration2()),
-				Double.toString(Payment.getDuration3()),
+		        payment.getPaymentId() + "",
+		        payment.getPaymentCategory().getName(),
+				Double.toString(payment.getDuration1()),
+				Double.toString(payment.getDuration2()),
+				Double.toString(payment.getDuration3()),
 				DateFormat.getDateInstance(DateFormat.SHORT).format(
-						Payment.getStartdate().getTime()) });
+				        payment.getStartdate().getTime()) });
 
 		tablePayment.deselectAll();
 		refreshPaymentDetail("");
@@ -983,7 +983,7 @@
 		list = new Hashtable();
 		for (int i = 0; i < Paymentlist.size(); i++) {
 			Payment paym = (Payment) Paymentlist.get(i);
-			String name = paym.getName();
+			String name = paym.getPaymentCategory().getName();
 
 			if (list.containsKey(name)) {
 				Vector vec = (Vector) list.get(name);
@@ -992,7 +992,7 @@
 				Vector vec = new Vector();
 				vec.add(paym.getStartdate());
 
-				list.put(paym.getName(), vec);
+				list.put(paym.getPaymentCategory().getName(), vec);
 			}
 		}
 		Enumeration keys = list.keys();
@@ -1037,7 +1037,7 @@
 			item = new TableItem(tablePayment, SWT.NONE);
 			item.setText(new String[] {
 					o.getPaymentId() + "",
-					o.getName(),
+					o.getPaymentCategory().getName(),
 					Double.toString(o.getDuration1()),
 					Double.toString(o.getDuration2()),
 					Double.toString(o.getDuration3()),
@@ -1259,7 +1259,7 @@
 			}
 
 			textPaymentID.setText(object.getPaymentId() + "");
-			textPaymentName.setText(object.getName());
+			textPaymentName.setText(object.getPaymentCategory().getName());
 			textduration1.setText(Double.toString(object.getDuration1()));
 			textduration2.setText(Double.toString(object.getDuration2()));
 			textduration3.setText(Double.toString(object.getDuration3()));
@@ -1269,7 +1269,7 @@
 
 			buttonPaymentEdit.setEnabled(false);
 			buttonPaymentDelete.setEnabled(true);
-			Vector vec = (Vector) list.get(object.getName());
+			Vector vec = (Vector) list.get(object.getPaymentCategory().getName());
 
 			for (int i = 0; i < vec.size(); i++) {
 				Calendar date = (Calendar) vec.get(i);

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Dvd.hbm.xml
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Dvd.hbm.xml	2004-12-10 21:47:19 UTC (rev 234)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Dvd.hbm.xml	2004-12-11 12:01:55 UTC (rev 235)
@@ -21,6 +21,14 @@
       </id>
  
  
+ 		 <many-to-one
+				name="payment"
+				column="payment"
+				class="de.hsharz.provirent.objects.Payment"
+		>
+						<meta attribute="use-in-tostring">true</meta>
+				</many-to-one> 
+ 
 		 <many-to-one
 				name="movie"
 				column="movie"

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Dvd.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Dvd.java	2004-12-10 21:47:19 UTC (rev 234)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Dvd.java	2004-12-11 12:01:55 UTC (rev 235)
@@ -21,6 +21,9 @@
     private String barcode;
 
     /** nullable persistent field */
+    private de.hsharz.provirent.objects.Payment payment;
+
+    /** nullable persistent field */
     private de.hsharz.provirent.objects.Movie movie;
 
     /** nullable persistent field */
@@ -42,8 +45,9 @@
     private List videoFormats;
 
     /** full constructor */
-    public Dvd(String barcode, de.hsharz.provirent.objects.Movie movie, de.hsharz.provirent.objects.Condition condition, de.hsharz.provirent.objects.Status status, List languages, List subtitles, List audioFormats, List videoFormats) {
+    public Dvd(String barcode, de.hsharz.provirent.objects.Payment payment, de.hsharz.provirent.objects.Movie movie, de.hsharz.provirent.objects.Condition condition, de.hsharz.provirent.objects.Status status, List languages, List subtitles, List audioFormats, List videoFormats) {
         this.barcode = barcode;
+        this.payment = payment;
         this.movie = movie;
         this.condition = condition;
         this.status = status;
@@ -81,6 +85,14 @@
         this.barcode = barcode;
     }
 
+    public de.hsharz.provirent.objects.Payment getPayment() {
+        return this.payment;
+    }
+
+    public void setPayment(de.hsharz.provirent.objects.Payment payment) {
+        this.payment = payment;
+    }
+
     public de.hsharz.provirent.objects.Movie getMovie() {
         return this.movie;
     }
@@ -141,6 +153,7 @@
         return new ToStringBuilder(this)
             .append("dvdId", getDvdId())
             .append("barcode", getBarcode())
+            .append("payment", getPayment())
             .append("movie", getMovie())
             .append("languages", getLanguages())
             .append("subtitles", getSubtitles())
@@ -156,6 +169,7 @@
         return new EqualsBuilder()
             .append(this.getDvdId(), castOther.getDvdId())
             .append(this.getBarcode(), castOther.getBarcode())
+            .append(this.getPayment(), castOther.getPayment())
             .append(this.getMovie(), castOther.getMovie())
             .append(this.getCondition(), castOther.getCondition())
             .append(this.getStatus(), castOther.getStatus())
@@ -170,6 +184,7 @@
         return new HashCodeBuilder()
             .append(getDvdId())
             .append(getBarcode())
+            .append(getPayment())
             .append(getMovie())
             .append(getCondition())
             .append(getStatus())

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Payment.hbm.xml
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Payment.hbm.xml	2004-12-10 21:47:19 UTC (rev 234)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Payment.hbm.xml	2004-12-11 12:01:55 UTC (rev 235)
@@ -21,9 +21,11 @@
 		</generator>
       </id>
 	  
-	  <property name="name" type="string" not-null="true">
-      	<meta attribute="use-in-tostring">true</meta>
-      </property>
+	  <many-to-one name="PaymentCategory" class="de.hsharz.provirent.objects.PaymentCategory" not-null="true">
+		<meta attribute="use-in-tostring">true</meta>
+	  </many-to-one>
+      	
+
  
       <property name="duration1" type="double" not-null="true">
 

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Payment.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Payment.java	2004-12-10 21:47:19 UTC (rev 234)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Payment.java	2004-12-11 12:01:55 UTC (rev 235)
@@ -18,9 +18,6 @@
     private Integer paymentId;
 
     /** persistent field */
-    private String name;
-
-    /** persistent field */
     private double duration1;
 
     /** persistent field */
@@ -32,13 +29,16 @@
     /** persistent field */
     private Calendar startdate;
 
+    /** persistent field */
+    private de.hsharz.provirent.objects.PaymentCategory PaymentCategory;
+
     /** full constructor */
-    public Payment(String name, double duration1, double duration2, double duration3, Calendar startdate) {
-        this.name = name;
+    public Payment(double duration1, double duration2, double duration3, Calendar startdate, de.hsharz.provirent.objects.PaymentCategory PaymentCategory) {
         this.duration1 = duration1;
         this.duration2 = duration2;
         this.duration3 = duration3;
         this.startdate = startdate;
+        this.PaymentCategory = PaymentCategory;
     }
 
     /** default constructor */
@@ -53,14 +53,6 @@
         this.paymentId = paymentId;
     }
 
-    public String getName() {
-        return this.name;
-    }
-
-    public void setName(String name) {
-        this.name = name;
-    }
-
     public double getDuration1() {
         return this.duration1;
     }
@@ -93,11 +85,19 @@
         this.startdate = startdate;
     }
 
+    public de.hsharz.provirent.objects.PaymentCategory getPaymentCategory() {
+        return this.PaymentCategory;
+    }
+
+    public void setPaymentCategory(de.hsharz.provirent.objects.PaymentCategory PaymentCategory) {
+        this.PaymentCategory = PaymentCategory;
+    }
+
     public String toString() {
         return new ToStringBuilder(this)
             .append("paymentId", getPaymentId())
-            .append("name", getName())
             .append("startdate", getStartdate())
+            .append("PaymentCategory", getPaymentCategory())
             .toString();
     }
 
@@ -107,22 +107,22 @@
         Payment castOther = (Payment) other;
         return new EqualsBuilder()
             .append(this.getPaymentId(), castOther.getPaymentId())
-            .append(this.getName(), castOther.getName())
             .append(this.getDuration1(), castOther.getDuration1())
             .append(this.getDuration2(), castOther.getDuration2())
             .append(this.getDuration3(), castOther.getDuration3())
             .append(this.getStartdate(), castOther.getStartdate())
+            .append(this.getPaymentCategory(), castOther.getPaymentCategory())
             .isEquals();
     }
 
     public int hashCode() {
         return new HashCodeBuilder()
             .append(getPaymentId())
-            .append(getName())
             .append(getDuration1())
             .append(getDuration2())
             .append(getDuration3())
             .append(getStartdate())
+            .append(getPaymentCategory())
             .toHashCode();
     }
 

Added: project_src/provirent_hibernate/src/de/hsharz/provirent/objects/PaymentCategory.hbm.xml
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/objects/PaymentCategory.hbm.xml	2004-12-10 21:47:19 UTC (rev 234)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/objects/PaymentCategory.hbm.xml	2004-12-11 12:01:55 UTC (rev 235)
@@ -0,0 +1,30 @@
+<?xml version="1.0"?>
+<!DOCTYPE hibernate-mapping
+             PUBLIC "-//Hibernate/Hibernate Mapping DTD 2.0//EN"
+             "http://hibernate.sourceforge.net/hibernate-mapping-2.0.dtd">
+  <hibernate-mapping>
+ 
+   <class name="de.hsharz.provirent.objects.PaymentCategory" table="PaymentCategory">
+      <meta attribute="class-description">
+        Represents a PaymentCategory
+        @author Philipp Schneider
+      </meta>
+      
+ 			<meta attribute="implement-equals">true</meta>
+			<meta attribute="use-in-equals">true</meta>
+ 			
+      <id name="paymentCategoryId" type="int" column="PaymentCategoryID" length="10">
+        <meta attribute="scope-set">public</meta>
+        <meta attribute="use-in-equals">true</meta>
+        <generator class="sequence">
+			<param name="sequence">PaymentCategory_id_sequence</param>
+		</generator>
+      </id>
+	  
+	  <property name="name" type="string" not-null="true">
+      	<meta attribute="use-in-tostring">true</meta>
+      </property>
+ 
+	  
+    </class>
+  </hibernate-mapping>

Added: project_src/provirent_hibernate/src/de/hsharz/provirent/objects/PaymentCategory.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/objects/PaymentCategory.java	2004-12-10 21:47:19 UTC (rev 234)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/objects/PaymentCategory.java	2004-12-11 12:01:55 UTC (rev 235)
@@ -0,0 +1,71 @@
+package de.hsharz.provirent.objects;
+
+import java.io.Serializable;
+import org.apache.commons.lang.builder.EqualsBuilder;
+import org.apache.commons.lang.builder.HashCodeBuilder;
+import org.apache.commons.lang.builder.ToStringBuilder;
+
+
+/** 
+ *         Represents a PaymentCategory
+ *         @author Philipp Schneider
+ *       
+*/
+public class PaymentCategory implements Serializable {
+
+    /** identifier field */
+    private Integer paymentCategoryId;
+
+    /** persistent field */
+    private String name;
+
+    /** full constructor */
+    public PaymentCategory(String name) {
+        this.name = name;
+    }
+
+    /** default constructor */
+    public PaymentCategory() {
+    }
+
+    public Integer getPaymentCategoryId() {
+        return this.paymentCategoryId;
+    }
+
+    public void setPaymentCategoryId(Integer paymentCategoryId) {
+        this.paymentCategoryId = paymentCategoryId;
+    }
+
+    public String getName() {
+        return this.name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    public String toString() {
+        return new ToStringBuilder(this)
+            .append("paymentCategoryId", getPaymentCategoryId())
+            .append("name", getName())
+            .toString();
+    }
+
+    public boolean equals(Object other) {
+        if ( (this == other ) ) return true;
+        if ( !(other instanceof PaymentCategory) ) return false;
+        PaymentCategory castOther = (PaymentCategory) other;
+        return new EqualsBuilder()
+            .append(this.getPaymentCategoryId(), castOther.getPaymentCategoryId())
+            .append(this.getName(), castOther.getName())
+            .isEquals();
+    }
+
+    public int hashCode() {
+        return new HashCodeBuilder()
+            .append(getPaymentCategoryId())
+            .append(getName())
+            .toHashCode();
+    }
+
+}

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/HibernateUtil.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/HibernateUtil.java	2004-12-10 21:47:19 UTC (rev 234)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/HibernateUtil.java	2004-12-11 12:01:55 UTC (rev 235)
@@ -56,6 +56,7 @@
 import de.hsharz.provirent.objects.MovieOrder;
 import de.hsharz.provirent.objects.OrderItem;
 import de.hsharz.provirent.objects.Payment;
+import de.hsharz.provirent.objects.PaymentCategory;
 import de.hsharz.provirent.objects.Person;
 import de.hsharz.provirent.objects.Status;
 import de.hsharz.provirent.objects.Subtitle;
@@ -87,7 +88,7 @@
             .addClass(Subtitle.class).addClass(VideoFormat.class)
             .addClass(Customer.class).addClass(Image.class)
             .addClass(MovieOrder.class).addClass(OrderItem.class)
-            .addClass(Person.class).addClass(Payment.class);
+            .addClass(Person.class).addClass(Payment.class).addClass(PaymentCategory.class);
 
 
             sessionFactory = cfg.buildSessionFactory();

Modified: project_src/provirent_hibernate/src/test/provirent/hibernate/AllTestsComplexObjects.java
===================================================================
--- project_src/provirent_hibernate/src/test/provirent/hibernate/AllTestsComplexObjects.java	2004-12-10 21:47:19 UTC (rev 234)
+++ project_src/provirent_hibernate/src/test/provirent/hibernate/AllTestsComplexObjects.java	2004-12-11 12:01:55 UTC (rev 235)
@@ -46,6 +46,7 @@
         //$JUnit-BEGIN$
         suite.addTestSuite(TestCustomer.class);
         suite.addTestSuite(TestMovie.class);
+        suite.addTestSuite(TestDvd.class);
         //$JUnit-END$
         return suite;
     }

Modified: project_src/provirent_hibernate/src/test/provirent/hibernate/AllTestsSimpleObjects.java
===================================================================
--- project_src/provirent_hibernate/src/test/provirent/hibernate/AllTestsSimpleObjects.java	2004-12-10 21:47:19 UTC (rev 234)
+++ project_src/provirent_hibernate/src/test/provirent/hibernate/AllTestsSimpleObjects.java	2004-12-11 12:01:55 UTC (rev 235)
@@ -55,6 +55,8 @@
         suite.addTestSuite(TestVideoFormat.class);
         suite.addTestSuite(TestLanguage.class);
         suite.addTestSuite(TestPerson.class);
+        
+        suite.addTestSuite(TestPaymentCategory.class);
         suite.addTestSuite(TestPayment.class);
         //$JUnit-END$
         return suite;

Modified: project_src/provirent_hibernate/src/test/provirent/hibernate/HibernateUtil.java
===================================================================
--- project_src/provirent_hibernate/src/test/provirent/hibernate/HibernateUtil.java	2004-12-10 21:47:19 UTC (rev 234)
+++ project_src/provirent_hibernate/src/test/provirent/hibernate/HibernateUtil.java	2004-12-11 12:01:55 UTC (rev 235)
@@ -57,6 +57,7 @@
 import de.hsharz.provirent.objects.MovieOrder;
 import de.hsharz.provirent.objects.OrderItem;
 import de.hsharz.provirent.objects.Payment;
+import de.hsharz.provirent.objects.PaymentCategory;
 import de.hsharz.provirent.objects.Person;
 import de.hsharz.provirent.objects.Status;
 import de.hsharz.provirent.objects.Subtitle;
@@ -87,7 +88,7 @@
                             VideoFormat.class).addClass(Customer.class)
                     .addClass(Image.class).addClass(MovieOrder.class).addClass(
                             OrderItem.class).addClass(Person.class).addClass(
-                            Payment.class);
+                            Payment.class).addClass(PaymentCategory.class);
 
             sessionFactory = cfg.buildSessionFactory();
         } catch (Throwable ex) {

Modified: project_src/provirent_hibernate/src/test/provirent/hibernate/TestDvd.java
===================================================================
--- project_src/provirent_hibernate/src/test/provirent/hibernate/TestDvd.java	2004-12-10 21:47:19 UTC (rev 234)
+++ project_src/provirent_hibernate/src/test/provirent/hibernate/TestDvd.java	2004-12-11 12:01:55 UTC (rev 235)
@@ -14,6 +14,7 @@
 import de.hsharz.provirent.objects.Dvd;
 import de.hsharz.provirent.objects.Language;
 import de.hsharz.provirent.objects.Movie;
+import de.hsharz.provirent.objects.Payment;
 import de.hsharz.provirent.objects.Subtitle;
 import de.hsharz.provirent.objects.VideoFormat;
 
@@ -237,6 +238,31 @@
                     }
                     dvd.setVideoFormats(dvdprops);
 
+                    
+                    //add Payment
+                    dbprops = s.find("from Payment as payment");
+                    assertNotNull(
+                            "testCreateDvd(): Can't get Payment from DB. Null",
+                            dbprops);
+                    assertTrue(
+                            "testCreateDvd(): Can not find Payment in DB",
+                            dbprops.size() > 0);
+
+                    anzahl = 1;
+                    dvdprops = new ArrayList();
+                    randomRange = new RandomRange(0, (dbprops.size() - 1));
+                    random = randomRange.getNumbers(anzahl);
+
+                    for (int k = 0; k < anzahl; k++) {
+                        Payment prop = (Payment) dbprops
+                                .get(((Integer) random.get(k)).intValue());
+                        dvd.setPayment(prop);
+                        break;
+                    }
+                    
+
+                    
+                    
                     //save the dvd
                     logger.debug(i+" "+j+" DVD:"+dvd);
                     s.save(dvd);

Modified: project_src/provirent_hibernate/src/test/provirent/hibernate/TestPayment.java
===================================================================
--- project_src/provirent_hibernate/src/test/provirent/hibernate/TestPayment.java	2004-12-10 21:47:19 UTC (rev 234)
+++ project_src/provirent_hibernate/src/test/provirent/hibernate/TestPayment.java	2004-12-11 12:01:55 UTC (rev 235)
@@ -33,9 +33,9 @@
 package test.provirent.hibernate;
 
 import java.util.ArrayList;
+import java.util.Calendar;
 import java.util.Iterator;
 import java.util.List;
-import java.util.Calendar;
 
 import junit.framework.TestCase;
 import net.sf.hibernate.Session;
@@ -44,6 +44,7 @@
 import org.apache.log4j.Logger;
 
 import de.hsharz.provirent.objects.Payment;
+import de.hsharz.provirent.objects.PaymentCategory;
 
 /**
  * @author Stefan Forstner
@@ -85,139 +86,8 @@
         }
     }
     
-    /*public void testGenre() throws Exception {
-        if (logger.isDebugEnabled()) {
-            logger.debug("testCreating() - start");
-        }
+ 
 
-        //get new Session and begin Transaction
-        Session s = HibernateUtil.currentSession();
-        Transaction tx = null;
-        try {
-            tx = s.beginTransaction();
-
-            try {
-                //is DB open and connected
-                assertTrue("Connected to Db? ", s.isConnected());
-                assertTrue("Db Open? ", s.isOpen());
-
-                //cretae new objects
-                List Payments = new ArrayList();
-
-                Payment myp1 = null;
-                Payment myp2 = null;
-                Payment myp3 = null;
-                Payment myp4 = null;
-                
-                s.clear();
-
-                for (int i = 1; i <= 10; i++) {
-                    myp1 = new Payment("A", 2.00d, 4.00d, 8.00d);
-                    myp2 = new Payment("B", 3.00d, 6.00d, 12.00d);
-                    myp3 = new Payment("C", 4.00d, 8.00d, 14.00d);
-                    myp4 = new Payment("D", 5.00d, 10.00d, 20.00d);
-                    Payments.add(myp1);
-                    Payments.add(myp2);
-                    Payments.add(myp3);
-                    Payments.add(myp4);
-                }             
-                
-
-                List ids = new ArrayList();
-
-                //save objects
-                for (Iterator iter = Payments.iterator(); iter.hasNext();) {
-                    Payment dir = (Payment) iter.next();
-                    ids.add((Integer) s.save(dir));
-
-                }
-                s.flush();
-
-                tx.commit();
-
-                for (int i = 0; i < ids.size(); i++) {
-                    int id = ((Integer) ids.get(i)).intValue();
-                    Payment myp = (Payment) Payments.get(i);
-
-                    //get Payment from Hibernate
-                    Payment dbd = (Payment) s.get(Payment.class, new Integer(id));
-                    assertNotNull("Can't get Payment" + id + " from DB", dbd);
-                    if (dbd == null) {
-                        if (logger.isDebugEnabled()) {
-                            logger.debug("testCreating()Kein object mit id "
-                                    + id + "gefunden.");
-                        }
-                        return;
-                    }
-                    //are both equal?
-                    assertEquals(
-                            "Select: Payment aus DB nicht gleich meiner. DB: "
-                                    + dbd + " My:" + myp, myp, dbd);
-
-                    //Update
-
-                    //delete the object
-                    s.delete(myp);
-                    s.flush();
-
-                    logger.debug("L?sche eins per Hand");
-                    Payment o = new Payment();
-                    o.setPaymentId(new Integer(0));
-                    o.setName("");
-                    o.setDuration1(0d);
-                    o.setDuration2(0d);
-                    o.setDuration3(0d);
-                    o.setStartdate(null);
-                    s.delete(o);
-                    s.flush();
-                    
-                    
-                    dbd = myp = null;
-
-                    Object obj = s.get(Payment.class, new Integer(id));
-
-                    //should be null, because data deleted
-                    assertNull("Deleted: Payment" + id + ", but still in DB", obj);
-
-                    if (logger.isDebugEnabled()) {
-                        logger
-                                .debug("testCreating() - Payment aus DB gleich meiner? DB: "
-                                        + dbd + " My:" + myp);
-                    }
-
-                }
-
-                tx.commit();
-
-            } catch (Exception e) {
-                if (tx != null) {
-                    logger
-                            .error(
-                                    "testCreating() - Something went wrong here; discard all partial changes",
-                                    e);
-
-                    // Something went wrong; discard all partial changes
-                    tx.rollback();
-                }
-
-            }
-
-        } catch (Exception e) {
-            logger.error(
-                    "testCreating() - Error while trying to beginTransaction",
-                    e);
-            throw e;
-        } finally {
-            // No matter what, close the session
-            HibernateUtil.closeSession();
-        }
-
-
-        if (logger.isDebugEnabled()) {
-            logger.debug("testCreating() - end");
-        }
-    }*/
-
     public void testSavePayment() throws Exception {
         if (logger.isDebugEnabled()) {
             logger.debug("testSavePayment() - start");
@@ -235,7 +105,7 @@
                 assertTrue("Db Open? ", s.isOpen());
 
                 //create new objects
-                List Payments = new ArrayList();
+                List payments = new ArrayList();
                 Calendar date1 = Calendar.getInstance();
                 date1.set(2004,11,12);
                 Calendar date2 = Calendar.getInstance();
@@ -252,30 +122,57 @@
                 date7.set(2004,10,29);
                 Calendar date8 = Calendar.getInstance();
                 date8.set(2004,10,20);
-                Payment myp1 = new Payment("A", 2.00d, 4.00d, 8.00d,date1);
-                Payment myp2 = new Payment("B", 3.00d, 6.00d, 12.00d,date2);
-                Payment myp3 = new Payment("C", 4.00d, 8.00d, 14.00d,date3);
-                Payment myp4 = new Payment("D", 5.00d, 10.00d, 20.00d,date4);
-                Payment myp5 = new Payment("A", 2.00d, 4.00d, 8.00d,date5);
-                Payment myp6= new Payment("A", 3.00d, 6.00d, 12.00d,date6);
-                Payment myp7 = new Payment("A", 4.00d, 8.00d, 14.00d,date7);
-                Payment myp8 = new Payment("B", 5.00d, 10.00d, 20.00d,date8);
                 
-                Payments.add(myp1);
-                Payments.add(myp2);
-                Payments.add(myp3);
-                Payments.add(myp4);
-                Payments.add(myp5);
-                Payments.add(myp6);
-                Payments.add(myp7);
-                Payments.add(myp8);
+                payments.add( new Payment(2.00d, 4.00d, 8.00d,date1,null));
+                payments.add( new Payment(3.00d, 6.00d, 12.00d,date2,null));
+                payments.add( new Payment(4.00d, 8.00d, 14.00d,date3,null));
+                payments.add( new Payment(5.00d, 10.00d, 20.00d,date4,null));
+                payments.add( new Payment(2.00d, 4.00d, 8.00d,date5,null));
+                payments.add( new Payment(3.00d, 6.00d, 12.00d,date6,null));
+                payments.add( new Payment(4.00d, 8.00d, 14.00d,date7,null));
+                payments.add( new Payment(5.00d, 10.00d, 20.00d,date8,null));
+                
+                
+                
+                //get and set the paymentcategory
+                //add Payment
+                List categorys = s.find("from PaymentCategory as paymentcategory");
+                assertNotNull(
+                        "testCreateDvd(): Can't get PaymentCategory from DB. Null",
+                        categorys);
+                assertTrue(
+                        "testCreateDvd(): Can not find PaymentCategory in DB",
+                        categorys.size() > 0);
 
-                List ids = new ArrayList();
+                RandomRange randomRange;
+                
+                
+                
+  
 
+                 for (int i = 0; i < payments.size(); i++) {
+                    
+                     randomRange = new RandomRange(0, (categorys.size() - 1));
+                     
+                      randomRange.getNumbers(1); 
+                
+                     PaymentCategory prop = (PaymentCategory) categorys
+                            .get(((Integer) randomRange.getNumbers(1).get(0)).intValue());
+                   
+                    ((Payment)payments.get(i)).setPaymentCategory(prop);
+                    
+                    
+                 
+                
+                 }
+
+               
+
                 //save objects
-                for (Iterator iter = Payments.iterator(); iter.hasNext();) {
+                for (Iterator iter = payments.iterator(); iter.hasNext();) {
                     Payment pay = (Payment) iter.next();
-                    ids.add((Integer) s.save(pay));
+                    
+                    s.save(pay);
 
                 }
                 s.flush();

Added: project_src/provirent_hibernate/src/test/provirent/hibernate/TestPaymentCategory.java
===================================================================
--- project_src/provirent_hibernate/src/test/provirent/hibernate/TestPaymentCategory.java	2004-12-10 21:47:19 UTC (rev 234)
+++ project_src/provirent_hibernate/src/test/provirent/hibernate/TestPaymentCategory.java	2004-12-11 12:01:55 UTC (rev 235)
@@ -0,0 +1,164 @@
+/*
+ * Created on 09.10.2004
+ *
+ * Copyright (c) 2004/2005, Remo Griesch/Stefan Forstner/Philipp Schneider
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * - Redistributions of source code must retain the above copyright notice,
+ * this list of conditions and the following disclaimer.
+ * - Redistributions in binary form must reproduce the above copyright notice,
+ * this list of conditions and the following disclaimer in the documentation
+ * and/or other materials provided with the distribution.
+ * - Neither the name of the Remo Griesch/Stefan Forstner/Philipp Schneider nor
+ * the names of its contributors may be used to endorse or promote products
+ * derived from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+package test.provirent.hibernate;
+
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
+
+import junit.framework.TestCase;
+import net.sf.hibernate.Session;
+import net.sf.hibernate.Transaction;
+
+import org.apache.log4j.Logger;
+
+import de.hsharz.provirent.objects.PaymentCategory;
+
+/**
+ * @author Stefan Forstner
+ *
+ */
+public class TestPaymentCategory extends TestCase {
+    /**
+     * Logger for this class
+     */
+    private static final Logger logger = Logger.getLogger(TestPaymentCategory.class);
+
+    /*
+     * @see TestCase#setUp()
+     */
+    protected void setUp() throws Exception {
+        if (logger.isDebugEnabled()) {
+            logger.debug("setUp() - start");
+        }
+
+        super.setUp();
+
+        if (logger.isDebugEnabled()) {
+            logger.debug("setUp() - end");
+        }
+    }
+
+    /*
+     * @see TestCase#tearDown()
+     */
+    protected void tearDown() throws Exception {
+        if (logger.isDebugEnabled()) {
+            logger.debug("tearDown() - start");
+        }
+
+        super.tearDown();
+
+        if (logger.isDebugEnabled()) {
+            logger.debug("tearDown() - end");
+        }
+    }
+  
+
+    public void testSavePaymentCategory() throws Exception {
+        if (logger.isDebugEnabled()) {
+            logger.debug("testSavePaymentCategory() - start");
+        }
+
+        //get new Session and begin Transaction
+        Session s = HibernateUtil.currentSession();
+        Transaction tx = null;
+        try {
+            tx = s.beginTransaction();
+
+            try {
+                //is DB open and connected
+                assertTrue("Connected to Db? ", s.isConnected());
+                assertTrue("Db Open? ", s.isOpen());
+
+                //create new objects
+                List paymentsCategorys = new ArrayList();
+
+                
+                paymentsCategorys.add(new PaymentCategory("A"));
+                paymentsCategorys.add(new PaymentCategory("B"));
+                paymentsCategorys.add(new PaymentCategory("C"));
+                paymentsCategorys.add(new PaymentCategory("D"));
+                paymentsCategorys.add(new PaymentCategory("E"));
+    
+
+                //save objects
+                for (Iterator iter = paymentsCategorys.iterator(); iter.hasNext();) {
+                    PaymentCategory pay = (PaymentCategory) iter.next();
+                    
+                    s.save(pay);
+
+                }
+                s.flush();
+
+                tx.commit();
+
+            } catch (Exception e) {
+                if (tx != null) {
+                    logger
+                            .error(
+                                    "testSavePaymentCategory() - Something went wrong here; discard all partial changes",
+                                    e);
+
+                    // Something went wrong; discard all partial changes
+                    tx.rollback();
+                }
+                throw e;
+            }
+
+        } catch (Exception e) {
+            logger.error(
+                    "testSavePaymentCategory() - Error while trying to beginTransaction",
+                    e);
+            throw e;
+        } finally {
+            // No matter what, close the session
+            HibernateUtil.closeSession();
+        }
+
+        HibernateUtil.closeSession();
+
+        if (logger.isDebugEnabled()) {
+            logger.debug("testSavePaymentCategory() - end");
+        }
+    }
+
+    /**
+     * Constructor for TestGenre.
+     * @param arg0
+     */
+    public TestPaymentCategory(String arg0) {
+        super(arg0);
+    }
+
+}
\ No newline at end of file



From pschneider at sheep.berlios.de  Sat Dec 11 14:54:19 2004
From: pschneider at sheep.berlios.de (Philipp Schneider at BerliOS)
Date: Sat, 11 Dec 2004 14:54:19 +0100
Subject: [Provirent-svn-commit] r236 - in project_src/provirent_hibernate/src: de/hsharz/provirent/objects test/provirent/hibernate
Message-ID: <200412111354.iBBDsJoR012312@sheep.berlios.de>

Author: pschneider
Date: 2004-12-11 14:54:16 +0100 (Sat, 11 Dec 2004)
New Revision: 236

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Dvd.hbm.xml
   project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Dvd.java
   project_src/provirent_hibernate/src/test/provirent/hibernate/TestDvd.java
   project_src/provirent_hibernate/src/test/provirent/hibernate/TestMovieOrder.java
   project_src/provirent_hibernate/src/test/provirent/hibernate/TestPayment.java
Log:


Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Dvd.hbm.xml
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Dvd.hbm.xml	2004-12-11 12:01:55 UTC (rev 235)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Dvd.hbm.xml	2004-12-11 13:54:16 UTC (rev 236)
@@ -22,9 +22,9 @@
  
  
  		 <many-to-one
-				name="payment"
-				column="payment"
-				class="de.hsharz.provirent.objects.Payment"
+				name="paymentCategory"
+				column="paymentCategory"
+				class="de.hsharz.provirent.objects.PaymentCategory"
 		>
 						<meta attribute="use-in-tostring">true</meta>
 				</many-to-one> 

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Dvd.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Dvd.java	2004-12-11 12:01:55 UTC (rev 235)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Dvd.java	2004-12-11 13:54:16 UTC (rev 236)
@@ -21,7 +21,7 @@
     private String barcode;
 
     /** nullable persistent field */
-    private de.hsharz.provirent.objects.Payment payment;
+    private de.hsharz.provirent.objects.PaymentCategory paymentCategory;
 
     /** nullable persistent field */
     private de.hsharz.provirent.objects.Movie movie;
@@ -45,9 +45,9 @@
     private List videoFormats;
 
     /** full constructor */
-    public Dvd(String barcode, de.hsharz.provirent.objects.Payment payment, de.hsharz.provirent.objects.Movie movie, de.hsharz.provirent.objects.Condition condition, de.hsharz.provirent.objects.Status status, List languages, List subtitles, List audioFormats, List videoFormats) {
+    public Dvd(String barcode, de.hsharz.provirent.objects.PaymentCategory paymentCategory, de.hsharz.provirent.objects.Movie movie, de.hsharz.provirent.objects.Condition condition, de.hsharz.provirent.objects.Status status, List languages, List subtitles, List audioFormats, List videoFormats) {
         this.barcode = barcode;
-        this.payment = payment;
+        this.paymentCategory = paymentCategory;
         this.movie = movie;
         this.condition = condition;
         this.status = status;
@@ -85,12 +85,12 @@
         this.barcode = barcode;
     }
 
-    public de.hsharz.provirent.objects.Payment getPayment() {
-        return this.payment;
+    public de.hsharz.provirent.objects.PaymentCategory getPaymentCategory() {
+        return this.paymentCategory;
     }
 
-    public void setPayment(de.hsharz.provirent.objects.Payment payment) {
-        this.payment = payment;
+    public void setPaymentCategory(de.hsharz.provirent.objects.PaymentCategory paymentCategory) {
+        this.paymentCategory = paymentCategory;
     }
 
     public de.hsharz.provirent.objects.Movie getMovie() {
@@ -153,7 +153,7 @@
         return new ToStringBuilder(this)
             .append("dvdId", getDvdId())
             .append("barcode", getBarcode())
-            .append("payment", getPayment())
+            .append("paymentCategory", getPaymentCategory())
             .append("movie", getMovie())
             .append("languages", getLanguages())
             .append("subtitles", getSubtitles())
@@ -169,7 +169,7 @@
         return new EqualsBuilder()
             .append(this.getDvdId(), castOther.getDvdId())
             .append(this.getBarcode(), castOther.getBarcode())
-            .append(this.getPayment(), castOther.getPayment())
+            .append(this.getPaymentCategory(), castOther.getPaymentCategory())
             .append(this.getMovie(), castOther.getMovie())
             .append(this.getCondition(), castOther.getCondition())
             .append(this.getStatus(), castOther.getStatus())
@@ -184,7 +184,7 @@
         return new HashCodeBuilder()
             .append(getDvdId())
             .append(getBarcode())
-            .append(getPayment())
+            .append(getPaymentCategory())
             .append(getMovie())
             .append(getCondition())
             .append(getStatus())

Modified: project_src/provirent_hibernate/src/test/provirent/hibernate/TestDvd.java
===================================================================
--- project_src/provirent_hibernate/src/test/provirent/hibernate/TestDvd.java	2004-12-11 12:01:55 UTC (rev 235)
+++ project_src/provirent_hibernate/src/test/provirent/hibernate/TestDvd.java	2004-12-11 13:54:16 UTC (rev 236)
@@ -15,6 +15,7 @@
 import de.hsharz.provirent.objects.Language;
 import de.hsharz.provirent.objects.Movie;
 import de.hsharz.provirent.objects.Payment;
+import de.hsharz.provirent.objects.PaymentCategory;
 import de.hsharz.provirent.objects.Subtitle;
 import de.hsharz.provirent.objects.VideoFormat;
 
@@ -240,12 +241,12 @@
 
                     
                     //add Payment
-                    dbprops = s.find("from Payment as payment");
+                    dbprops = s.find("from PaymentCategory as paymentCategory");
                     assertNotNull(
-                            "testCreateDvd(): Can't get Payment from DB. Null",
+                            "testCreateDvd(): Can't get PaymentCategory from DB. Null",
                             dbprops);
                     assertTrue(
-                            "testCreateDvd(): Can not find Payment in DB",
+                            "testCreateDvd(): Can not find PaymentCategory in DB",
                             dbprops.size() > 0);
 
                     anzahl = 1;
@@ -254,9 +255,9 @@
                     random = randomRange.getNumbers(anzahl);
 
                     for (int k = 0; k < anzahl; k++) {
-                        Payment prop = (Payment) dbprops
+                        PaymentCategory prop = (PaymentCategory) dbprops
                                 .get(((Integer) random.get(k)).intValue());
-                        dvd.setPayment(prop);
+                        dvd.setPaymentCategory(prop);
                         break;
                     }
                     

Modified: project_src/provirent_hibernate/src/test/provirent/hibernate/TestMovieOrder.java
===================================================================
--- project_src/provirent_hibernate/src/test/provirent/hibernate/TestMovieOrder.java	2004-12-11 12:01:55 UTC (rev 235)
+++ project_src/provirent_hibernate/src/test/provirent/hibernate/TestMovieOrder.java	2004-12-11 13:54:16 UTC (rev 236)
@@ -37,13 +37,13 @@
 import java.util.List;
 
 import junit.framework.TestCase;
+import net.sf.hibernate.Criteria;
 import net.sf.hibernate.HibernateException;
 import net.sf.hibernate.Session;
 import net.sf.hibernate.Transaction;
-import de.hsharz.provirent.objects.Condition;
+import net.sf.hibernate.expression.Expression;
+import net.sf.hibernate.expression.Order;
 import de.hsharz.provirent.objects.Customer;
-import de.hsharz.provirent.objects.Dvd;
-import de.hsharz.provirent.objects.Movie;
 import de.hsharz.provirent.objects.MovieOrder;
 import de.hsharz.provirent.objects.OrderItem;
 import de.hsharz.provirent.objects.Payment;
@@ -76,7 +76,7 @@
         super(arg0);
     }
 
-    public void createMovieOrder() {
+    public void testCreateMovieOrder() {
 
         Session s = null;
         Transaction tx = null;
@@ -86,10 +86,15 @@
             tx = s.beginTransaction();
 
             List customers = new ArrayList();
+            
+            List dvds = new ArrayList();
+            
+            
             //for each movie 
-            for (int i = 0; i < 3; i++) {
+            for (int i = 0; i < 1; i++) {
 
-                Customer customer = (Customer) customers.get(i);
+                Customer customer =null;
+                //customer = (Customer) customers.get(i);
 
 
                 MovieOrder movieOrder = new MovieOrder();
@@ -97,21 +102,51 @@
 
                 List orderItems = new ArrayList();
 
-                for (int j = 0; j < 3; j++) {
 
+                
+                
+                
+                for (int j = 0; j < 1; j++) {
+
                     OrderItem orderItem = new OrderItem();
                     orderItem.setCustomer(customer);
                     orderItem.setDuration(2);
 
-                    orderItem.setDvd(new Dvd());
                     
+                    //Dvd dvd = (Dvd)dvds.get(0);
+                    //orderItem.setDvd(dvd);
+                    
                     orderItem.setOrderTime(Calendar.getInstance());
+                    
+                    //dvd.getPaymentCategory();
+                    
+                    //get the Payment where the PaymentCategory are the one
+                    //from dvd and the date is the highest
+                    
+                    
+                    
+                    
+            		Criteria criteria = s.createCriteria(Payment.class).addOrder(Order.desc("startdate")).setMaxResults(1)
+            				.createAlias("PaymentCategory", "pc").add(Expression.eq("pc.name","A"));
+
+            		List pay = criteria.list();
+            		System.out.println("Payment: "+pay.size());
+            		for (int k = 0; k < pay.size(); k++) {
+            		    System.out.println(k+" "+pay.get(k) );
+                    }
+            		
+            		
+                    
+                    
+                    
+                    
+                    
                     orderItem.setPayment(new Payment());
 
                     //this data is to be set when the dvd is beeing
                     //send to the customer
-                    orderItem.setConditionSend(new Condition());
-                    orderItem.setSenderTime(Calendar.getInstance());
+                    orderItem.setConditionSend(null);
+                    orderItem.setSenderTime(null);
 
                     //this data is set when the dvd is beeig received
                     //from the customer
@@ -125,7 +160,7 @@
                 movieOrder.setMovieOrderItems(orderItems);
 
                 //save the movieOrder
-                s.save(movieOrder);
+                //s.save(movieOrder);
             }
         } catch (HibernateException e) {
             // TODO Auto-generated catch block

Modified: project_src/provirent_hibernate/src/test/provirent/hibernate/TestPayment.java
===================================================================
--- project_src/provirent_hibernate/src/test/provirent/hibernate/TestPayment.java	2004-12-11 12:01:55 UTC (rev 235)
+++ project_src/provirent_hibernate/src/test/provirent/hibernate/TestPayment.java	2004-12-11 13:54:16 UTC (rev 236)
@@ -85,8 +85,6 @@
             logger.debug("tearDown() - end");
         }
     }
-    
- 
 
     public void testSavePayment() throws Exception {
         if (logger.isDebugEnabled()) {
@@ -107,36 +105,35 @@
                 //create new objects
                 List payments = new ArrayList();
                 Calendar date1 = Calendar.getInstance();
-                date1.set(2004,11,12);
+                date1.set(2004, 11, 12);
                 Calendar date2 = Calendar.getInstance();
-                date2.set(2004,11,30);
+                date2.set(2004, 11, 30);
                 Calendar date3 = Calendar.getInstance();
-                date3.set(2005,1,16);
+                date3.set(2005, 1, 16);
                 Calendar date4 = Calendar.getInstance();
-                date4.set(2005,11,8);
+                date4.set(2005, 11, 8);
                 Calendar date5 = Calendar.getInstance();
-                date5.set(2004,10,12);
+                date5.set(2004, 10, 12);
                 Calendar date6 = Calendar.getInstance();
-                date6.set(2004,10,28);
+                date6.set(2004, 10, 28);
                 Calendar date7 = Calendar.getInstance();
-                date7.set(2004,10,29);
+                date7.set(2004, 10, 29);
                 Calendar date8 = Calendar.getInstance();
-                date8.set(2004,10,20);
-                
-                payments.add( new Payment(2.00d, 4.00d, 8.00d,date1,null));
-                payments.add( new Payment(3.00d, 6.00d, 12.00d,date2,null));
-                payments.add( new Payment(4.00d, 8.00d, 14.00d,date3,null));
-                payments.add( new Payment(5.00d, 10.00d, 20.00d,date4,null));
-                payments.add( new Payment(2.00d, 4.00d, 8.00d,date5,null));
-                payments.add( new Payment(3.00d, 6.00d, 12.00d,date6,null));
-                payments.add( new Payment(4.00d, 8.00d, 14.00d,date7,null));
-                payments.add( new Payment(5.00d, 10.00d, 20.00d,date8,null));
-                
-                
-                
+                date8.set(2004, 10, 20);
+
+                payments.add(new Payment(2.00d, 4.00d, 8.00d, date1, null));
+                payments.add(new Payment(3.00d, 6.00d, 12.00d, date2, null));
+                payments.add(new Payment(4.00d, 8.00d, 14.00d, date3, null));
+                payments.add(new Payment(5.00d, 10.00d, 20.00d, date4, null));
+                payments.add(new Payment(2.00d, 4.00d, 8.00d, date5, null));
+                payments.add(new Payment(3.00d, 6.00d, 12.00d, date6, null));
+                payments.add(new Payment(4.00d, 8.00d, 14.00d, date7, null));
+                payments.add(new Payment(5.00d, 10.00d, 20.00d, date8, null));
+
                 //get and set the paymentcategory
                 //add Payment
-                List categorys = s.find("from PaymentCategory as paymentcategory");
+                List categorys = s
+                        .find("from PaymentCategory as paymentcategory");
                 assertNotNull(
                         "testCreateDvd(): Can't get PaymentCategory from DB. Null",
                         categorys);
@@ -144,34 +141,35 @@
                         "testCreateDvd(): Can not find PaymentCategory in DB",
                         categorys.size() > 0);
 
-                RandomRange randomRange;
                 
                 
+                logger.debug("Test    Test");
+                logger.debug("Cat"+categorys.size());
+                logger.debug("pay"+payments.size());
                 
-  
+                RandomRange randomRange;
 
-                 for (int i = 0; i < payments.size(); i++) {
-                    
-                     randomRange = new RandomRange(0, (categorys.size() - 1));
+                for (int i = 0; i < payments.size(); i++) {
+
                      
-                      randomRange.getNumbers(1); 
-                
-                     PaymentCategory prop = (PaymentCategory) categorys
-                            .get(((Integer) randomRange.getNumbers(1).get(0)).intValue());
-                   
-                    ((Payment)payments.get(i)).setPaymentCategory(prop);
                     
+                    randomRange = new RandomRange(0, (categorys.size() - 1));
+
+                    logger.debug(i + " Randomnum:"
+                            + randomRange.getNumbers(1).get(0));
                     
-                 
-                
-                 }
+                    PaymentCategory prop = (PaymentCategory) categorys
+                            .get(((Integer) randomRange.getNumbers(
+                                    1 ).get(0)).intValue());
 
-               
+                    ((Payment) payments.get(i)).setPaymentCategory(prop);
 
+                }
+
                 //save objects
                 for (Iterator iter = payments.iterator(); iter.hasNext();) {
                     Payment pay = (Payment) iter.next();
-                    
+
                     s.save(pay);
 
                 }
@@ -193,9 +191,10 @@
             }
 
         } catch (Exception e) {
-            logger.error(
-                    "testSavePayment() - Error while trying to beginTransaction",
-                    e);
+            logger
+                    .error(
+                            "testSavePayment() - Error while trying to beginTransaction",
+                            e);
             throw e;
         } finally {
             // No matter what, close the session



From pschneider at sheep.berlios.de  Sat Dec 11 18:27:13 2004
From: pschneider at sheep.berlios.de (Philipp Schneider at BerliOS)
Date: Sat, 11 Dec 2004 18:27:13 +0100
Subject: [Provirent-svn-commit] r237 - in project_src/provirent_hibernate/src: de/hsharz/provirent/management/gui test/provirent/hibernate
Message-ID: <200412111727.iBBHRDcQ027581@sheep.berlios.de>

Author: pschneider
Date: 2004-12-11 18:27:11 +0100 (Sat, 11 Dec 2004)
New Revision: 237

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositePayment.java
   project_src/provirent_hibernate/src/test/provirent/hibernate/TestMovieOrder.java
Log:


Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositePayment.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositePayment.java	2004-12-11 13:54:16 UTC (rev 236)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositePayment.java	2004-12-11 17:27:11 UTC (rev 237)
@@ -603,7 +603,7 @@
 					Payment o = new Payment();
 					o.setPaymentId(new Integer(Integer.parseInt(textPaymentID
 							.getText())));
-					o.setName(textPaymentName.getText());
+					//o.setName(textPaymentName.getText());
 					o.setDuration1(Float.parseFloat(textduration1.getText()));
 					o.setDuration2(Float.parseFloat(textduration2.getText()));
 					o.setDuration3(Float.parseFloat(textduration3.getText()));

Modified: project_src/provirent_hibernate/src/test/provirent/hibernate/TestMovieOrder.java
===================================================================
--- project_src/provirent_hibernate/src/test/provirent/hibernate/TestMovieOrder.java	2004-12-11 13:54:16 UTC (rev 236)
+++ project_src/provirent_hibernate/src/test/provirent/hibernate/TestMovieOrder.java	2004-12-11 17:27:11 UTC (rev 237)
@@ -32,6 +32,8 @@
  */
 package test.provirent.hibernate;
 
+import org.apache.log4j.Logger;
+
 import java.util.ArrayList;
 import java.util.Calendar;
 import java.util.List;
@@ -44,6 +46,7 @@
 import net.sf.hibernate.expression.Expression;
 import net.sf.hibernate.expression.Order;
 import de.hsharz.provirent.objects.Customer;
+import de.hsharz.provirent.objects.Dvd;
 import de.hsharz.provirent.objects.MovieOrder;
 import de.hsharz.provirent.objects.OrderItem;
 import de.hsharz.provirent.objects.Payment;
@@ -53,6 +56,10 @@
  *
  */
 public class TestMovieOrder extends TestCase {
+    /**
+     * Logger for this class
+     */
+    private static final Logger logger = Logger.getLogger(TestMovieOrder.class);
 
     /*
      * @see TestCase#setUp()
@@ -85,16 +92,26 @@
             s = HibernateUtil.currentSession();
             tx = s.beginTransaction();
 
-            List customers = new ArrayList();
+            List customers = s.find("from Customer as customer");
+            assertNotNull(
+                    "testCreateMovieOrder(): Can't get Customer from DB. Null",
+                    customers);
+            assertTrue(
+                    "testCreateMovieOrder(): Can not find Customer in DB",
+                    customers.size() > 0);
             
-            List dvds = new ArrayList();
+            List dvds = s.find("from Dvd as dvd");
+            assertNotNull(
+                    "testCreateMovieOrder(): Can't get Dvd from DB. Null",
+                    dvds);
+            assertTrue(
+                    "testCreateMovieOrder(): Can not find Dvd in DB",
+                    dvds.size() > 0);          
             
-            
             //for each movie 
             for (int i = 0; i < 1; i++) {
 
-                Customer customer =null;
-                //customer = (Customer) customers.get(i);
+                Customer customer = (Customer) customers.get(i);
 
 
                 MovieOrder movieOrder = new MovieOrder();
@@ -102,10 +119,7 @@
 
                 List orderItems = new ArrayList();
 
-
                 
-                
-                
                 for (int j = 0; j < 1; j++) {
 
                     OrderItem orderItem = new OrderItem();
@@ -113,35 +127,31 @@
                     orderItem.setDuration(2);
 
                     
-                    //Dvd dvd = (Dvd)dvds.get(0);
-                    //orderItem.setDvd(dvd);
+                    Dvd dvd = (Dvd)dvds.get(0);
+                    orderItem.setDvd(dvd);
                     
                     orderItem.setOrderTime(Calendar.getInstance());
                     
-                    //dvd.getPaymentCategory();
+
                     
                     //get the Payment where the PaymentCategory are the one
                     //from dvd and the date is the highest
                     
-                    
-                    
-                    
-            		Criteria criteria = s.createCriteria(Payment.class).addOrder(Order.desc("startdate")).setMaxResults(1)
-            				.createAlias("PaymentCategory", "pc").add(Expression.eq("pc.name","A"));
-
-            		List pay = criteria.list();
-            		System.out.println("Payment: "+pay.size());
-            		for (int k = 0; k < pay.size(); k++) {
-            		    System.out.println(k+" "+pay.get(k) );
-                    }
+                    List payment = s.createCriteria(Payment.class)
+            				.addOrder(Order.desc("startdate"))
+            				.setMaxResults(1)
+            				.createAlias("PaymentCategory", "pc")
+            				.add(Expression.eq("pc.name",dvd.getPaymentCategory().getName()))
+            				.list();
+                    assertNotNull(
+                            "testCreateMovieOrder(): Can't get Payment from DB. Null",
+                            payment);
+                    assertTrue(
+                            "testCreateMovieOrder(): Can not find Payment in DB",
+                            payment.size() > 0);  
             		
-            		
                     
-                    
-                    
-                    
-                    
-                    orderItem.setPayment(new Payment());
+                    orderItem.setPayment((Payment)payment.get(0));
 
                     //this data is to be set when the dvd is beeing
                     //send to the customer
@@ -160,6 +170,7 @@
                 movieOrder.setMovieOrderItems(orderItems);
 
                 //save the movieOrder
+                logger.debug("MovieOrder: "+movieOrder);
                 //s.save(movieOrder);
             }
         } catch (HibernateException e) {



From pschneider at sheep.berlios.de  Sun Dec 12 20:12:44 2004
From: pschneider at sheep.berlios.de (Philipp Schneider at BerliOS)
Date: Sun, 12 Dec 2004 20:12:44 +0100
Subject: [Provirent-svn-commit] r238 - in project_src/provirent_hibernate/src/de/hsharz/provirent: management/gui persistence
Message-ID: <200412121912.iBCJCiIv003764@sheep.berlios.de>

Author: pschneider
Date: 2004-12-12 20:12:42 +0100 (Sun, 12 Dec 2004)
New Revision: 238

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeOrder.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositePayment.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java
Log:
- CompositePayment an neue Datenbank angepasst, jedoch nur ANZEIGE
- speichern (new/edit) muss noch ver?\195?\164ndert werden

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeOrder.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeOrder.java	2004-12-11 17:27:11 UTC (rev 237)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeOrder.java	2004-12-12 19:12:42 UTC (rev 238)
@@ -1,4 +1,4 @@
-/*
+/* 
  * Created on 06.12.2004
  *
  * Copyright (c) 2004/2005, Remo Griesch/Stefan Forstner/Philipp Schneider
@@ -252,7 +252,7 @@
 	            OrderItem o = (OrderItem) OrderItemlist.get(i);
 	
 	            item = new TableItem(tableOrderItems, SWT.NONE);
-	            
+	           
 	            String orderdate = "";
 	            if (o.getOrderTime() != null) {
 	                orderdate = DateFormat.getDateInstance(DateFormat.SHORT).format(
@@ -276,7 +276,7 @@
 	                    orderdate, 
 	                    senddate, 
 	                    receivingdate,
-	                    o.getPayment().getName(),
+	                    o.getPayment().getPaymentCategory().getName(),
 	                    Integer.toString(o.getDuration()),
 	                    o.getConditionSend().getConditionName(),
 	                    o.getConditionReceiving().getConditionName()});

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositePayment.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositePayment.java	2004-12-11 17:27:11 UTC (rev 237)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositePayment.java	2004-12-12 19:12:42 UTC (rev 238)
@@ -3,9 +3,11 @@
 import java.text.DateFormat;
 import java.text.MessageFormat;
 import java.text.ParseException;
+import java.util.ArrayList;
 import java.util.Calendar;
 import java.util.Enumeration;
 import java.util.Hashtable;
+import java.util.List;
 import java.util.Locale;
 import java.util.PropertyResourceBundle;
 import java.util.ResourceBundle;
@@ -24,6 +26,7 @@
 import org.eclipse.swt.layout.GridData;
 import org.eclipse.swt.layout.GridLayout;
 import org.eclipse.swt.widgets.Button;
+import org.eclipse.swt.widgets.Combo;
 import org.eclipse.swt.widgets.Composite;
 import org.eclipse.swt.widgets.Display;
 import org.eclipse.swt.widgets.Event;
@@ -41,9 +44,9 @@
 import com.cloudgarden.resource.SWTResourceManager;
 
 import de.hsharz.provirent.objects.Payment;
+import de.hsharz.provirent.objects.PaymentCategory;
 import de.hsharz.provirent.persistence.DataBaseException;
 import de.hsharz.provirent.persistence.Database;
-
 /**
  * This code was generated using CloudGarden's Jigloo SWT/Swing GUI Builder,
  * which is free for non-commercial use. If Jigloo is being used commercially
@@ -80,6 +83,7 @@
 	private Composite parent;
 
 	private Composite compositeButtons;
+	private Combo ComboPaymentCategory;
 
 	private Button changeStartDateButton;
 
@@ -103,8 +107,6 @@
 
 	private Text textPaymentID;
 
-	private Text textPaymentName;
-
 	private Text textduration1;
 
 	private Text textduration2;
@@ -133,8 +135,10 @@
 
 	private TableColumn tableColumn;
 
-	Hashtable list = null;
+	private Hashtable list = null;
 
+	private List localCategory = new ArrayList();
+	
 	private final static int MODE_EDIT = 2;
 
 	private StatusLineStyledText statusLine;
@@ -328,14 +332,11 @@
 			labelPaymentName.setLayoutData(formData2);
 		}
 		{
-			textPaymentName = new Text(groupPaymentDetail, SWT.READ_ONLY
-					| SWT.BORDER);
-			GridData text1LData1 = new GridData();
-			text1LData1.horizontalAlignment = GridData.FILL;
-			text1LData1.heightHint = 13;
-			text1LData1.horizontalSpan = 4;
-			text1LData1.grabExcessHorizontalSpace = true;
-			textPaymentName.setLayoutData(text1LData1);
+			ComboPaymentCategory = new Combo(groupPaymentDetail, SWT.DROP_DOWN | SWT.READ_ONLY | SWT.NO_RADIO_GROUP);
+			GridData ComboPaymentCategoryLData = new GridData();
+			ComboPaymentCategoryLData.horizontalSpan = 4;
+			ComboPaymentCategoryLData.horizontalAlignment = GridData.FILL;
+			ComboPaymentCategory.setLayoutData(ComboPaymentCategoryLData);
 		}
 		{
 			labelduration1 = new Label(groupPaymentDetail, SWT.NONE);
@@ -514,13 +515,13 @@
 			public void widgetSelected(SelectionEvent evt) {
 
 				textPaymentID.setText("");
-				textPaymentName.setText("");
+				ComboPaymentCategory.setText("");
 				textduration1.setText("");
 				textduration2.setText("");
 				textduration3.setText("");
 				textstartdate.setText("");
 
-				textPaymentName.setEditable(true);
+				ComboPaymentCategory.setEnabled(true);
 				textduration1.setEditable(true);
 				textduration2.setEditable(true);
 				textduration3.setEditable(true);
@@ -550,7 +551,7 @@
 				mode_Payment = ManagementGui.MODE_EDIT;
 
 				textPaymentID.setEditable(false);
-				textPaymentName.setEditable(true);
+				ComboPaymentCategory.setEnabled(true);
 				textduration1.setEditable(true);
 				textduration2.setEditable(true);
 				textduration3.setEditable(true);
@@ -584,7 +585,7 @@
 						.format(
 								l
 										.getString("Payment.groupdetail.deletebutton.question.text"),
-								new Object[] { textPaymentName.getText() + " "
+								new Object[] { ComboPaymentCategory.getText() + " "
 										+ textduration1.getText() + " "
 										+ textduration2.getText() + " "
 										+ textduration3.getText() + " "
@@ -603,7 +604,7 @@
 					Payment o = new Payment();
 					o.setPaymentId(new Integer(Integer.parseInt(textPaymentID
 							.getText())));
-					//o.setName(textPaymentName.getText());
+					//o.setName(ComboPaymentCategory.getText());
 					o.setDuration1(Float.parseFloat(textduration1.getText()));
 					o.setDuration2(Float.parseFloat(textduration2.getText()));
 					o.setDuration3(Float.parseFloat(textduration3.getText()));
@@ -631,7 +632,7 @@
 
 					//Detailansicht leeren
 					textPaymentID.setText("");
-					textPaymentName.setText("");
+					ComboPaymentCategory.setText("");
 					textduration1.setText("");
 					textduration2.setText("");
 					textduration3.setText("");
@@ -704,7 +705,7 @@
 			public void widgetSelected(SelectionEvent evt) {
 
 				//testen ob duration leer ist
-				if (textPaymentName.getText().trim().equalsIgnoreCase("")
+				if (ComboPaymentCategory.getText().trim().equalsIgnoreCase("")
 						|| textduration1.getText().trim().equalsIgnoreCase("")
 						|| textduration2.getText().trim().equalsIgnoreCase("")
 						|| textduration3.getText().trim().equalsIgnoreCase("")
@@ -742,12 +743,14 @@
 										DateFormat.LONG).parse(
 										textstartdate.getText()));
 						//neues Objekt erzeugen
-						Payment tmp = new Payment(textPaymentName.getText(),
+						Payment tmp = null;
+						/*
+						tmp = new Payment(ComboPaymentCategory.getText(),
 								Float.parseFloat(textduration1.getText()),
 								Float.parseFloat(textduration2.getText()),
 								Float.parseFloat(textduration3.getText()),
 								tmp_cal);
-
+								*/
 						//object speichern
 						// Fehlerbehandlung
 						Object o = Database.saveObject(tmp);
@@ -820,14 +823,16 @@
 										DateFormat.LONG).parse(
 										textstartdate.getText()));
 
-						Payment tmp = new Payment(textPaymentName.getText(),
+						Payment tmp = null;
+						/*
+						tmp = new Payment(ComboPaymentCategory.getText(),
 								Float.parseFloat(textduration1.getText()),
 								Float.parseFloat(textduration2.getText()),
 								Float.parseFloat(textduration3.getText()),
 								tmp_cal);
 						tmp.setPaymentId(new Integer(Integer
 								.parseInt(textPaymentID.getText())));
-
+								*/
 						//object speichern
 						// Fehlerbehandlung
 						Database.updateObject(tmp);
@@ -921,7 +926,7 @@
 		buttonPaymentEdit.setEnabled(true);
 		buttonPaymentNew.setEnabled(true);
 		buttonPaymentDelete.setEnabled(true);
-		textPaymentName.setEditable(false);
+		ComboPaymentCategory.setEnabled(false);
 		textduration1.setEditable(false);
 		textduration2.setEditable(false);
 		textduration3.setEditable(false);
@@ -1244,9 +1249,9 @@
 				//since we only can get a String value from the table, we
 				//need to convert this
 				object = Database.getSinglePayment(Integer.parseInt(id));
+				localCategory = Database.getPaymentCategory();
+				if (object == null || localCategory == null || localCategory.size() == 0 ) {
 
-				if (object == null) {
-
 					/*
 					 * 
 					 * @TODO Statusbar aktualiseren
@@ -1259,7 +1264,7 @@
 			}
 
 			textPaymentID.setText(object.getPaymentId() + "");
-			textPaymentName.setText(object.getPaymentCategory().getName());
+			ComboPaymentCategory.setText(object.getPaymentCategory().getName());
 			textduration1.setText(Double.toString(object.getDuration1()));
 			textduration2.setText(Double.toString(object.getDuration2()));
 			textduration3.setText(Double.toString(object.getDuration3()));
@@ -1283,9 +1288,20 @@
 				}
 
 			}
+			
+			logger.debug("PaymentCategory Size: "+localCategory.size());
+			
+			//ComboBox
+			for (int i = 0; i < localCategory.size(); i++) {
+				ComboPaymentCategory.add( ((PaymentCategory)localCategory.get(i)).getName(),i  );
+				if ( ((PaymentCategory)localCategory.get(i)).equals(object.getPaymentCategory())) {
+					ComboPaymentCategory.select(i);
+					
+				}
+			}
 		} else {
 			textPaymentID.setText("");
-			textPaymentName.setText("");
+			ComboPaymentCategory.setText("");
 			textduration1.setText("");
 			textduration2.setText("");
 			textduration3.setText("");

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java	2004-12-11 17:27:11 UTC (rev 237)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java	2004-12-12 19:12:42 UTC (rev 238)
@@ -59,6 +59,7 @@
 import de.hsharz.provirent.objects.Movie;
 import de.hsharz.provirent.objects.MovieOrder;
 import de.hsharz.provirent.objects.Payment;
+import de.hsharz.provirent.objects.PaymentCategory;
 import de.hsharz.provirent.objects.Status;
 import de.hsharz.provirent.objects.Subtitle;
 import de.hsharz.provirent.objects.VideoFormat;
@@ -1939,5 +1940,48 @@
 
 	}
 
+	
+	/**
+	 * This method gets all Movies from the database.
+	 * searches for ID,Title,Date,Description,Actor,Director...
+	 * @param filter 
+	 * @return List of Movie objects, or an empty List
+	 */
+	public static List getPaymentCategory() {
+		if (logger.isDebugEnabled()) {
+			logger.debug("getPaymentCategory() - start. ");
+		}
+		//init the returnlist
+		List returnlist = new ArrayList();
+
+		Session s = null;
+
+		try {
+			//get new Session and begin Transaction
+			s = HibernateUtil.currentSession();
+
+			returnlist = s.createCriteria(PaymentCategory.class).list();
+
+		} catch (Exception e) {
+			logger
+					.error("getPaymentCategory() - Error while trying to do Transaction",
+							e);
+			returnlist = new ArrayList();
+		} finally {
+			try {
+				// No matter what, close the session
+				HibernateUtil.closeSession();
+			} catch (HibernateException e1) {
+				logger.error("getPaymentCategory() - Could not Close the Session", e1);
+			}
+		}
+
+		if (logger.isDebugEnabled()) {
+			logger.debug("getPaymentCategory() - end");
+		}
+		return returnlist;
+
+	}
+	
 }
 



From sforstner at sheep.berlios.de  Mon Dec 13 02:05:49 2004
From: sforstner at sheep.berlios.de (Stefan at BerliOS)
Date: Mon, 13 Dec 2004 02:05:49 +0100
Subject: [Provirent-svn-commit] r239 - in project_src/provirent_hibernate/src: de/hsharz/provirent/management/gui de/hsharz/provirent/management/gui/language de/hsharz/provirent/objects test/provirent/hibernate
Message-ID: <200412130105.iBD15nwx003649@sheep.berlios.de>

Author: sforstner
Date: 2004-12-13 02:05:29 +0100 (Mon, 13 Dec 2004)
New Revision: 239

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeOrder.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/order.properties
   project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Dvd.hbm.xml
   project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Image.hbm.xml
   project_src/provirent_hibernate/src/de/hsharz/provirent/objects/MovieOrder.hbm.xml
   project_src/provirent_hibernate/src/de/hsharz/provirent/objects/OrderItem.hbm.xml
   project_src/provirent_hibernate/src/test/provirent/hibernate/AllTestsComplexObjects.java
   project_src/provirent_hibernate/src/test/provirent/hibernate/AllTestsSimpleObjects.java
   project_src/provirent_hibernate/src/test/provirent/hibernate/TestCondition.java
   project_src/provirent_hibernate/src/test/provirent/hibernate/TestMovieOrder.java
   project_src/provirent_hibernate/src/test/provirent/hibernate/TestPayment.java
   project_src/provirent_hibernate/src/test/provirent/hibernate/TestStatus.java
Log:


Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeOrder.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeOrder.java	2004-12-12 19:12:42 UTC (rev 238)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeOrder.java	2004-12-13 01:05:29 UTC (rev 239)
@@ -117,6 +117,28 @@
     private Group groupOrderDetail;
 
     private MovieOrder localCustomer;
+
+    private SashForm sashFormOrderDetail;
+
+    private Group groupOrderDetails;
+
+    private Group groupOrderItemDetails;
+
+    private Label labelOrderId;
+
+    private Label labelOrderCustomerName;
+
+    private Text textOrderId;
+
+    private Text textOrderCustomerName;
+
+    private Label labelOrderCustomerLastName;
+
+    private Text textOrderCustomerLastName;
+
+    private Label labelOrderCustomerFirstName;
+
+    private Text textOrderCustomerFirstName;
     
     /**
      * @param p
@@ -204,9 +226,9 @@
             item = new TableItem(tableOrder, SWT.NONE);
                         
             item.setText(new String[] { o.getMovieOrderId() + "",
-                    o.getCustomer().getUserName(), o.getCustomer().getPerson().getLastName(),
-                    o.getCustomer().getPerson().getFirstName()});
-
+                    					o.getCustomer() == null ? "" : o.getCustomer().getUserName(), 
+                    					o.getCustomer() == null ? "" : o.getCustomer().getPerson().getLastName(),
+                    					o.getCustomer() == null ? "" : o.getCustomer().getPerson().getFirstName()});
         }
     }
     
@@ -256,7 +278,7 @@
 	            String orderdate = "";
 	            if (o.getOrderTime() != null) {
 	                orderdate = DateFormat.getDateInstance(DateFormat.SHORT).format(
-	                    o.getOrderTime());
+	                    o.getOrderTime().getTime());
 	            }
 	           
 	            String senddate = "";
@@ -276,10 +298,10 @@
 	                    orderdate, 
 	                    senddate, 
 	                    receivingdate,
-	                    o.getPayment().getPaymentCategory().getName(),
+	                    o.getPayment() == null ? "" : o.getPayment().getPaymentCategory().getName(),
 	                    Integer.toString(o.getDuration()),
-	                    o.getConditionSend().getConditionName(),
-	                    o.getConditionReceiving().getConditionName()});
+	                    o.getConditionSend() == null ? "" : o.getConditionSend().getConditionName(),
+	                    o.getConditionReceiving() == null ? "" : o.getConditionReceiving().getConditionName()});
 	
 	        }
         }
@@ -356,11 +378,139 @@
         formData.top = new FormAttachment(0, 100, 5);
         formData.bottom = new FormAttachment(100, 100, -5);
         groupOrderDetail.setLayoutData(formData);
+        {
+            sashFormOrderDetail = new SashForm(groupOrderDetail, SWT.VERTICAL | SWT.V_SCROLL);
+            GridData sashForm2LData = new GridData();
+            sashForm2LData.verticalAlignment = GridData.FILL;
+            sashForm2LData.horizontalAlignment = GridData.FILL;
+            sashForm2LData.grabExcessHorizontalSpace = true;
+            sashForm2LData.grabExcessVerticalSpace = true;
+            sashFormOrderDetail.setLayoutData(sashForm2LData);
+
+        }
+        initOrderDetails();
+        
+        initOrderItemDetails();
     }
 
     /**
      * 
      */
+    private void initOrderItemDetails() {
+        groupOrderItemDetails = new Group(sashFormOrderDetail, SWT.NONE);
+        GridLayout groupOrderDetailLayout = new GridLayout();
+        groupOrderDetailLayout.marginHeight = 25;
+        groupOrderDetailLayout.numColumns = 4;
+        groupOrderDetailLayout.verticalSpacing = 15;
+        groupOrderItemDetails.setText(l.getString("Order.groupdetail.orderitems.label"));
+        FormData formData = new FormData();
+        groupOrderItemDetails.setLayout(groupOrderDetailLayout);
+        groupOrderItemDetails.setLayoutData(formData);
+    }
+
+    /**
+     * 
+     */
+    private void initOrderDetails() {
+        groupOrderDetails = new Group(sashFormOrderDetail, SWT.NONE);
+        GridLayout groupOrderDetailLayout = new GridLayout();
+        groupOrderDetailLayout.marginHeight = 25;
+        groupOrderDetailLayout.numColumns = 4;
+        groupOrderDetailLayout.verticalSpacing = 15;
+        groupOrderDetails.setText(l.getString("Order.groupdetail.order.label"));
+        FormData formData = new FormData();
+        groupOrderDetails.setLayout(groupOrderDetailLayout);
+        groupOrderDetails.setLayoutData(formData);
+        {
+            labelOrderId = new Label(groupOrderDetails, SWT.NONE);
+            labelOrderId.setText(l
+                    .getString("order.groupdetail.order.idlabel")
+                    + ":");
+            labelOrderId.setSize(125, 15);
+            GridData formData2 = new GridData();
+            formData2.widthHint = 125;
+            formData2.heightHint = 15;
+            formData2.horizontalSpan = 2;
+            labelOrderId.setLayoutData(formData2);
+        }
+        {
+            textOrderId = new Text(groupOrderDetails, SWT.READ_ONLY
+                    | SWT.BORDER);
+            GridData text1LData1 = new GridData();
+            text1LData1.horizontalAlignment = GridData.FILL;
+            text1LData1.heightHint = 13;
+            text1LData1.horizontalSpan = 2;
+            text1LData1.grabExcessHorizontalSpace = true;
+            textOrderId.setLayoutData(text1LData1);
+        }
+        {
+            labelOrderCustomerName = new Label(groupOrderDetails, SWT.NONE);
+            labelOrderCustomerName.setText(l
+                    .getString("order.groupdetail.order.customernamelabel")
+                    + ":");
+            labelOrderCustomerName.setSize(125, 15);
+            GridData formData2 = new GridData();
+            formData2.widthHint = 125;
+            formData2.heightHint = 15;
+            formData2.horizontalSpan = 2;
+            labelOrderCustomerName.setLayoutData(formData2);
+        }
+        {
+            textOrderCustomerName = new Text(groupOrderDetails, SWT.READ_ONLY | SWT.BORDER);
+            GridData text1LData1 = new GridData();
+            text1LData1.horizontalAlignment = GridData.FILL;
+            text1LData1.heightHint = 13;
+            text1LData1.horizontalSpan = 2;
+            text1LData1.grabExcessHorizontalSpace = true;
+            textOrderCustomerName.setLayoutData(text1LData1);
+        }
+        {
+            labelOrderCustomerLastName = new Label(groupOrderDetails, SWT.NONE);
+            labelOrderCustomerLastName.setText(l
+                    .getString("order.groupdetail.order.customerlastnamelabel")
+                    + ":");
+            labelOrderCustomerLastName.setSize(125, 15);
+            GridData formData2 = new GridData();
+            formData2.widthHint = 125;
+            formData2.heightHint = 15;
+            formData2.horizontalSpan = 2;
+            labelOrderCustomerLastName.setLayoutData(formData2);
+        }
+        {
+            textOrderCustomerLastName = new Text(groupOrderDetails, SWT.READ_ONLY | SWT.BORDER);
+            GridData text1LData1 = new GridData();
+            text1LData1.horizontalAlignment = GridData.FILL;
+            text1LData1.heightHint = 13;
+            text1LData1.horizontalSpan = 2;
+            text1LData1.grabExcessHorizontalSpace = true;
+            textOrderCustomerLastName.setLayoutData(text1LData1);
+        }
+        {
+            labelOrderCustomerFirstName = new Label(groupOrderDetails, SWT.NONE);
+            labelOrderCustomerFirstName.setText(l
+                    .getString("order.groupdetail.order.customerfirstnamelabel")
+                    + ":");
+            labelOrderCustomerFirstName.setSize(125, 15);
+            GridData formData2 = new GridData();
+            formData2.widthHint = 125;
+            formData2.heightHint = 15;
+            formData2.horizontalSpan = 2;
+            labelOrderCustomerFirstName.setLayoutData(formData2);
+        }
+        {
+            textOrderCustomerFirstName = new Text(groupOrderDetails, SWT.READ_ONLY | SWT.BORDER);
+            GridData text1LData1 = new GridData();
+            text1LData1.horizontalAlignment = GridData.FILL;
+            text1LData1.heightHint = 13;
+            text1LData1.horizontalSpan = 2;
+            text1LData1.grabExcessHorizontalSpace = true;
+            textOrderCustomerFirstName.setLayoutData(text1LData1);
+        }
+    }
+
+    /**
+     * 
+     */
     private void initOrderGroupOverview() {
         if (logger.isDebugEnabled()) {
             logger.debug("initOrderGroupOverview() - start");

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/order.properties
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/order.properties	2004-12-12 19:12:42 UTC (rev 238)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/order.properties	2004-12-13 01:05:29 UTC (rev 239)
@@ -26,6 +26,12 @@
 
 Order.groupoverview.searchlabel=Suche nach
 Order.groupdetail.label=Detail
+Order.groupdetail.order.label=Bestellung
+order.groupdetail.order.idlabel=Bestellungs-Id
+order.groupdetail.order.customernamelabel=Benutzername
+order.groupdetail.order.customerlastnamelabel=Nachname
+order.groupdetail.order.customerfirstnamelabel=Vorname
+Order.groupdetail.orderitems.label=Bestellartikel
 Order.groupdetail.idlabel=Benutzer ID
 Order.groupdetail.usernamelabel=Benutzername
 Order.groupdetail.lastnamelabel=Nachname

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Dvd.hbm.xml
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Dvd.hbm.xml	2004-12-12 19:12:42 UTC (rev 238)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Dvd.hbm.xml	2004-12-13 01:05:29 UTC (rev 239)
@@ -17,7 +17,9 @@
       <id name="dvdId" type="int" column="DVDID">
         <meta attribute="scope-set">public</meta>
         <meta attribute="use-in-equals">true</meta>
-        <generator class="native"/>
+        <generator class="sequence">
+					<param name="sequence">dvd_id_sequence</param>
+		</generator>
       </id>
  
  

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Image.hbm.xml
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Image.hbm.xml	2004-12-12 19:12:42 UTC (rev 238)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Image.hbm.xml	2004-12-13 01:05:29 UTC (rev 239)
@@ -17,7 +17,9 @@
       <id name="imageId" type="int" column="IMAGEID">
         <meta attribute="scope-set">public</meta>
         <meta attribute="use-in-equals">true</meta>
-        <generator class="native"/>
+        <generator class="sequence">
+					<param name="sequence">image_id_sequence</param>
+		</generator>
       </id>
 
  

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/objects/MovieOrder.hbm.xml
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/objects/MovieOrder.hbm.xml	2004-12-12 19:12:42 UTC (rev 238)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/objects/MovieOrder.hbm.xml	2004-12-13 01:05:29 UTC (rev 239)
@@ -17,7 +17,9 @@
       <id name="movieOrderId" type="int" column="MOVIEORDERID">
         <meta attribute="scope-set">public</meta>
         <meta attribute="use-in-equals">true</meta>
-        <generator class="native"/>
+        <generator class="sequence">
+			<param name="sequence">movieorder_id_sequence</param>
+		</generator>
       </id>
 
 		 <many-to-one

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/objects/OrderItem.hbm.xml
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/objects/OrderItem.hbm.xml	2004-12-12 19:12:42 UTC (rev 238)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/objects/OrderItem.hbm.xml	2004-12-13 01:05:29 UTC (rev 239)
@@ -17,7 +17,9 @@
       <id name="orderItemId" type="int" column="ORDERITEMID">
         <meta attribute="scope-set">public</meta>
         <meta attribute="use-in-equals">true</meta>
-        <generator class="native"/>
+        <generator class="sequence">
+			<param name="sequence">orderitem_id_sequence</param>
+		</generator>
       </id>
 
 			<property	name="orderTime" type="calendar">

Modified: project_src/provirent_hibernate/src/test/provirent/hibernate/AllTestsComplexObjects.java
===================================================================
--- project_src/provirent_hibernate/src/test/provirent/hibernate/AllTestsComplexObjects.java	2004-12-12 19:12:42 UTC (rev 238)
+++ project_src/provirent_hibernate/src/test/provirent/hibernate/AllTestsComplexObjects.java	2004-12-13 01:05:29 UTC (rev 239)
@@ -44,7 +44,6 @@
     public static Test suite() {
         TestSuite suite = new TestSuite("Test for test.provirent.hibernate");
         //$JUnit-BEGIN$
-        suite.addTestSuite(TestCustomer.class);
         suite.addTestSuite(TestMovie.class);
         suite.addTestSuite(TestDvd.class);
         //$JUnit-END$

Modified: project_src/provirent_hibernate/src/test/provirent/hibernate/AllTestsSimpleObjects.java
===================================================================
--- project_src/provirent_hibernate/src/test/provirent/hibernate/AllTestsSimpleObjects.java	2004-12-12 19:12:42 UTC (rev 238)
+++ project_src/provirent_hibernate/src/test/provirent/hibernate/AllTestsSimpleObjects.java	2004-12-13 01:05:29 UTC (rev 239)
@@ -54,7 +54,7 @@
         suite.addTestSuite(TestStatus.class);
         suite.addTestSuite(TestVideoFormat.class);
         suite.addTestSuite(TestLanguage.class);
-        suite.addTestSuite(TestPerson.class);
+        suite.addTestSuite(TestCustomer.class);
         
         suite.addTestSuite(TestPaymentCategory.class);
         suite.addTestSuite(TestPayment.class);

Modified: project_src/provirent_hibernate/src/test/provirent/hibernate/TestCondition.java
===================================================================
--- project_src/provirent_hibernate/src/test/provirent/hibernate/TestCondition.java	2004-12-12 19:12:42 UTC (rev 238)
+++ project_src/provirent_hibernate/src/test/provirent/hibernate/TestCondition.java	2004-12-13 01:05:29 UTC (rev 239)
@@ -83,7 +83,8 @@
             logger.debug("tearDown() - end");
         }
     }
-
+    
+    /*
     public void testCondition() throws Exception {
         if (logger.isDebugEnabled()) {
             logger.debug("testCreating() - start");
@@ -194,7 +195,7 @@
         if (logger.isDebugEnabled()) {
             logger.debug("testCreating() - end");
         }
-    }
+    }*/
 
     public void testSaveCondition() throws Exception {
         if (logger.isDebugEnabled()) {

Modified: project_src/provirent_hibernate/src/test/provirent/hibernate/TestMovieOrder.java
===================================================================
--- project_src/provirent_hibernate/src/test/provirent/hibernate/TestMovieOrder.java	2004-12-12 19:12:42 UTC (rev 238)
+++ project_src/provirent_hibernate/src/test/provirent/hibernate/TestMovieOrder.java	2004-12-13 01:05:29 UTC (rev 239)
@@ -109,7 +109,7 @@
                     dvds.size() > 0);          
             
             //for each movie 
-            for (int i = 0; i < 1; i++) {
+            for (int i = 0; i < 2; i++) {
 
                 Customer customer = (Customer) customers.get(i);
 
@@ -120,14 +120,14 @@
                 List orderItems = new ArrayList();
 
                 
-                for (int j = 0; j < 1; j++) {
+                for (int j = 0; j < 3; j++) {
 
                     OrderItem orderItem = new OrderItem();
                     orderItem.setCustomer(customer);
                     orderItem.setDuration(2);
 
                     
-                    Dvd dvd = (Dvd)dvds.get(0);
+                    Dvd dvd = (Dvd)dvds.get(j % dvds.size());
                     orderItem.setDvd(dvd);
                     
                     orderItem.setOrderTime(Calendar.getInstance());
@@ -171,7 +171,9 @@
 
                 //save the movieOrder
                 logger.debug("MovieOrder: "+movieOrder);
-                //s.save(movieOrder);
+                s.save(movieOrder);
+                s.flush();
+                tx.commit();
             }
         } catch (HibernateException e) {
             // TODO Auto-generated catch block

Modified: project_src/provirent_hibernate/src/test/provirent/hibernate/TestPayment.java
===================================================================
--- project_src/provirent_hibernate/src/test/provirent/hibernate/TestPayment.java	2004-12-12 19:12:42 UTC (rev 238)
+++ project_src/provirent_hibernate/src/test/provirent/hibernate/TestPayment.java	2004-12-13 01:05:29 UTC (rev 239)
@@ -146,24 +146,10 @@
                 logger.debug("Test    Test");
                 logger.debug("Cat"+categorys.size());
                 logger.debug("pay"+payments.size());
-                
-                RandomRange randomRange;
 
-                for (int i = 0; i < payments.size(); i++) {
-
-                     
-                    
-                    randomRange = new RandomRange(0, (categorys.size() - 1));
-
-                    logger.debug(i + " Randomnum:"
-                            + randomRange.getNumbers(1).get(0));
-                    
-                    PaymentCategory prop = (PaymentCategory) categorys
-                            .get(((Integer) randomRange.getNumbers(
-                                    1 ).get(0)).intValue());
-
+                for (int i = 0; i < payments.size(); i++) {                    
+                    PaymentCategory prop = (PaymentCategory) categorys.get(i % 5);
                     ((Payment) payments.get(i)).setPaymentCategory(prop);
-
                 }
 
                 //save objects

Modified: project_src/provirent_hibernate/src/test/provirent/hibernate/TestStatus.java
===================================================================
--- project_src/provirent_hibernate/src/test/provirent/hibernate/TestStatus.java	2004-12-12 19:12:42 UTC (rev 238)
+++ project_src/provirent_hibernate/src/test/provirent/hibernate/TestStatus.java	2004-12-13 01:05:29 UTC (rev 239)
@@ -84,7 +84,7 @@
         }
     }
 
-   
+   /*
     public void testStatus() throws Exception {
         if (logger.isDebugEnabled()) {
             logger.debug("testCreating() - start");
@@ -193,7 +193,7 @@
       if (logger.isDebugEnabled()) {
             logger.debug("testCreating() - end");
         }
-    }
+    }*/
 
     public void testSaveStatus() throws Exception {
         if (logger.isDebugEnabled()) {



From pschneider at sheep.berlios.de  Mon Dec 13 15:26:08 2004
From: pschneider at sheep.berlios.de (Philipp Schneider at BerliOS)
Date: Mon, 13 Dec 2004 15:26:08 +0100
Subject: [Provirent-svn-commit] r240 - project_src/provirent_hibernate/src/test/provirent/hibernate
Message-ID: <200412131426.iBDEQ8sf017994@sheep.berlios.de>

Author: pschneider
Date: 2004-12-13 15:26:07 +0100 (Mon, 13 Dec 2004)
New Revision: 240

Modified:
   project_src/provirent_hibernate/src/test/provirent/hibernate/TestCustomer.java
   project_src/provirent_hibernate/src/test/provirent/hibernate/TestMovieOrder.java
Log:


Modified: project_src/provirent_hibernate/src/test/provirent/hibernate/TestCustomer.java
===================================================================
--- project_src/provirent_hibernate/src/test/provirent/hibernate/TestCustomer.java	2004-12-13 01:05:29 UTC (rev 239)
+++ project_src/provirent_hibernate/src/test/provirent/hibernate/TestCustomer.java	2004-12-13 14:26:07 UTC (rev 240)
@@ -249,6 +249,9 @@
 				assertTrue("Connected to Db? ", s.isConnected());
 				assertTrue("Db Open? ", s.isOpen());
 
+				
+				List data = new ArrayList();
+				
 				List customer = new ArrayList();
 
 				//create new objects
@@ -278,6 +281,7 @@
 				person.setDayOfBirth(birthday);
 
 				c.setPerson(person);
+				c.setDayOfRegistration(Calendar.getInstance());
 				customer.add(c);
 
 				//second Customer
@@ -302,8 +306,9 @@
 				birthday.set(Calendar.DAY_OF_MONTH, 2);
 				birthday.set(Calendar.MONTH, 2);
 				birthday.set(Calendar.YEAR, 1954);
-
+				person.setDayOfBirth(birthday);
 				c.setPerson(person);
+				c.setDayOfRegistration(Calendar.getInstance());
 				customer.add(c);
 
 				//third Customer
@@ -328,7 +333,8 @@
 				birthday.set(Calendar.DAY_OF_MONTH, 10);
 				birthday.set(Calendar.MONTH, 8);
 				birthday.set(Calendar.YEAR, 1988);
-
+				person.setDayOfBirth(birthday);
+				c.setDayOfRegistration(Calendar.getInstance());
 				c.setPerson(person);
 				customer.add(c);
 

Modified: project_src/provirent_hibernate/src/test/provirent/hibernate/TestMovieOrder.java
===================================================================
--- project_src/provirent_hibernate/src/test/provirent/hibernate/TestMovieOrder.java	2004-12-13 01:05:29 UTC (rev 239)
+++ project_src/provirent_hibernate/src/test/provirent/hibernate/TestMovieOrder.java	2004-12-13 14:26:07 UTC (rev 240)
@@ -109,7 +109,7 @@
                     dvds.size() > 0);          
             
             //for each movie 
-            for (int i = 0; i < 2; i++) {
+            for (int i = 0; i < customers.size(); i++) {
 
                 Customer customer = (Customer) customers.get(i);
 



From sforstner at sheep.berlios.de  Mon Dec 13 21:24:12 2004
From: sforstner at sheep.berlios.de (Stefan at BerliOS)
Date: Mon, 13 Dec 2004 21:24:12 +0100
Subject: [Provirent-svn-commit] r241 - in project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui: . language
Message-ID: <200412132024.iBDKOCT2021223@sheep.berlios.de>

Author: sforstner
Date: 2004-12-13 21:24:11 +0100 (Mon, 13 Dec 2004)
New Revision: 241

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeOrder.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/order.properties
Log:
loeschen bei CompositeOrder funktioniert f?\195?\188r MovieOrder und f?\195?\188r OrderItem

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeOrder.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeOrder.java	2004-12-13 14:26:07 UTC (rev 240)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeOrder.java	2004-12-13 20:24:11 UTC (rev 241)
@@ -33,6 +33,8 @@
 package de.hsharz.provirent.management.gui;
 
 import java.text.DateFormat;
+import java.text.MessageFormat;
+import java.util.Calendar;
 import java.util.Locale;
 import java.util.PropertyResourceBundle;
 import java.util.ResourceBundle;
@@ -49,6 +51,7 @@
 import org.eclipse.swt.layout.FormLayout;
 import org.eclipse.swt.layout.GridData;
 import org.eclipse.swt.layout.GridLayout;
+import org.eclipse.swt.widgets.Button;
 import org.eclipse.swt.widgets.Composite;
 import org.eclipse.swt.widgets.Control;
 import org.eclipse.swt.widgets.Display;
@@ -62,13 +65,33 @@
 import org.eclipse.swt.widgets.TableItem;
 import org.eclipse.swt.widgets.Text;
 
+import sun.security.krb5.internal.ak;
+
 import com.cloudgarden.resource.SWTResourceManager;
 
+import de.hsharz.provirent.objects.Condition;
 import de.hsharz.provirent.objects.MovieOrder;
 import de.hsharz.provirent.objects.OrderItem;
+import de.hsharz.provirent.objects.Payment;
+import de.hsharz.provirent.persistence.DataBaseException;
 import de.hsharz.provirent.persistence.Database;
 
+
 /**
+* This code was generated using CloudGarden's Jigloo
+* SWT/Swing GUI Builder, which is free for non-commercial
+* use. If Jigloo is being used commercially (ie, by a corporation,
+* company or business for any purpose whatever) then you
+* should purchase a license for each developer using Jigloo.
+* Please visit www.cloudgarden.com for details.
+* Use of Jigloo implies acceptance of these licensing terms.
+* *************************************
+* A COMMERCIAL LICENSE HAS NOT BEEN PURCHASED
+* for this machine, so Jigloo or this code cannot be used legally
+* for any corporate or commercial purpose.
+* *************************************
+*/
+/**
  * @author Stefan Forstner
  *
  */
@@ -116,7 +139,7 @@
 
     private Group groupOrderDetail;
 
-    private MovieOrder localCustomer;
+    private MovieOrder aktMovieOrder;
 
     private SashForm sashFormOrderDetail;
 
@@ -139,6 +162,58 @@
     private Label labelOrderCustomerFirstName;
 
     private Text textOrderCustomerFirstName;
+
+    private Composite compositeOrderButtons;
+
+    private Button buttonOrderNew;
+
+    protected int mode_Order;
+
+    private Button buttonOrderDelete;
+
+    private Label labelOrderItemId;
+
+    private Text textOrderItemId;
+
+    private Label labelOrderItemDvd;
+
+    private Text textOrderItemDvdId;
+
+    private Text textOrderItemMovieName;
+
+    private Label labelOrderItemOrderDate;
+
+    private Text textOrderItemOrderDate;
+
+    private Label labelOrderItemSenderDate;
+
+    private Text textOrderItemSenderDate;
+
+    private Label labelOrderItemReceivingDate;
+
+    private Text textOrderItemReceivingDate;
+
+    private Label labelOrderItemConditionSend;
+
+    private Text textOrderItemConditionSend;
+
+    private Label labelOrderItemConditionReceiving;
+
+    private Text textOrderItemConditionReceiving;
+
+    private Label labelOrderItemDuration;
+
+    private Text textOrderItemDuration;
+
+    private Label labelOrderItemPayment;
+
+    private Text textOrderItemPayment;
+
+    private Button buttonOrderItemDelete;
+
+    private Composite compositeOrderItemButtons;
+
+    private OrderItem aktOrderItem;
     
     /**
      * @param p
@@ -230,6 +305,7 @@
                     					o.getCustomer() == null ? "" : o.getCustomer().getPerson().getLastName(),
                     					o.getCustomer() == null ? "" : o.getCustomer().getPerson().getFirstName()});
         }
+        refreshOrderItemTable("");
     }
     
     /**
@@ -247,6 +323,8 @@
             return;
         }
         
+        tableOrderItems.removeAll();
+        
         if (!id.equals("") && id != null) {
             MovieOrder object;
             try {
@@ -263,11 +341,11 @@
                 //id ist keine Zahl
                 return;
             }
-            localCustomer = object;            
+                        
             
             tableOrderItems.removeAll();
             TableItem item;
-            java.util.List OrderItemlist = localCustomer.getMovieOrderItems();
+            java.util.List OrderItemlist = aktMovieOrder.getMovieOrderItems();
 
 	        for (int i = 0; i < OrderItemlist.size(); i++) {
 	
@@ -374,9 +452,9 @@
         groupOrderDetail.setText(l.getString("Order.groupdetail.label"));
         FormData formData = new FormData();
         groupOrderDetail.setLayout(groupOrderDetailLayout);
-        formData.right = new FormAttachment(100, 100, -5);
-        formData.top = new FormAttachment(0, 100, 5);
-        formData.bottom = new FormAttachment(100, 100, -5);
+        //formData.right = new FormAttachment(100, 100, -5);
+        //formData.top = new FormAttachment(0, 100, 5);
+        //formData.bottom = new FormAttachment(100, 100, -5);
         groupOrderDetail.setLayoutData(formData);
         {
             sashFormOrderDetail = new SashForm(groupOrderDetail, SWT.VERTICAL | SWT.V_SCROLL);
@@ -406,11 +484,311 @@
         FormData formData = new FormData();
         groupOrderItemDetails.setLayout(groupOrderDetailLayout);
         groupOrderItemDetails.setLayoutData(formData);
+        {
+            labelOrderItemId = new Label(groupOrderItemDetails, SWT.NONE);
+            labelOrderItemId.setText(l
+                    .getString("Order.groupdetail.orderitems.idlabel")
+                    + ":");
+            labelOrderItemId.setSize(125, 15);
+            GridData formData2 = new GridData();
+            formData2.heightHint = 15;
+            formData2.horizontalSpan = 1;
+            labelOrderItemId.setLayoutData(formData2);
+        }
+        {
+            textOrderItemId = new Text(groupOrderItemDetails, SWT.READ_ONLY
+                    | SWT.BORDER);
+            GridData text1LData1 = new GridData();
+            text1LData1.horizontalAlignment = GridData.FILL;
+            text1LData1.heightHint = 13;
+            text1LData1.horizontalSpan = 3;
+            text1LData1.grabExcessHorizontalSpace = true;
+            textOrderItemId.setLayoutData(text1LData1);
+        }
+        {
+            labelOrderItemDvd = new Label(groupOrderItemDetails, SWT.NONE);
+            labelOrderItemDvd.setText(l
+                    .getString("Order.groupdetail.orderitems.dvdlabel")
+                    + ":");
+            labelOrderItemDvd.setSize(125, 15);
+            GridData formData2 = new GridData();
+            formData2.heightHint = 15;
+            formData2.horizontalSpan = 1;
+            labelOrderItemDvd.setLayoutData(formData2);
+        }
+        {
+            textOrderItemDvdId = new Text(groupOrderItemDetails, SWT.READ_ONLY
+                    | SWT.BORDER);
+            GridData text1LData1 = new GridData();
+            text1LData1.horizontalAlignment = GridData.FILL;
+            text1LData1.heightHint = 13;
+            text1LData1.horizontalSpan = 1;
+            text1LData1.grabExcessHorizontalSpace = true;
+            textOrderItemDvdId.setLayoutData(text1LData1);
+        }
+        {
+            textOrderItemMovieName = new Text(groupOrderItemDetails, SWT.READ_ONLY
+                    | SWT.BORDER);
+            GridData text1LData1 = new GridData();
+            text1LData1.horizontalAlignment = GridData.FILL;
+            text1LData1.heightHint = 13;
+            text1LData1.horizontalSpan = 2;
+            text1LData1.grabExcessHorizontalSpace = true;
+            textOrderItemMovieName.setLayoutData(text1LData1);
+        }
+        {
+            labelOrderItemOrderDate = new Label(groupOrderItemDetails, SWT.NONE);
+            labelOrderItemOrderDate.setText(l
+                    .getString("Order.groupdetail.orderitems.orderdate")
+                    + ":");
+            labelOrderItemOrderDate.setSize(125, 15);
+            GridData formData2 = new GridData();
+            formData2.heightHint = 15;
+            formData2.horizontalSpan = 1;
+            labelOrderItemOrderDate.setLayoutData(formData2);
+        }
+        {
+            textOrderItemOrderDate = new Text(groupOrderItemDetails, SWT.READ_ONLY
+                    | SWT.BORDER);
+            GridData text1LData1 = new GridData();
+            text1LData1.horizontalAlignment = GridData.FILL;
+            text1LData1.heightHint = 13;
+            text1LData1.horizontalSpan = 3;
+            text1LData1.grabExcessHorizontalSpace = true;
+            textOrderItemOrderDate.setLayoutData(text1LData1);
+        }
+        {
+            labelOrderItemSenderDate = new Label(groupOrderItemDetails, SWT.NONE);
+            labelOrderItemSenderDate.setText(l
+                    .getString("Order.groupdetail.orderitems.senderdate")
+                    + ":");
+            labelOrderItemSenderDate.setSize(125, 15);
+            GridData formData2 = new GridData();
+            formData2.heightHint = 15;
+            formData2.horizontalSpan = 1;
+            labelOrderItemSenderDate.setLayoutData(formData2);
+        }
+        {
+            textOrderItemSenderDate = new Text(groupOrderItemDetails, SWT.READ_ONLY
+                    | SWT.BORDER);
+            GridData text1LData1 = new GridData();
+            text1LData1.horizontalAlignment = GridData.FILL;
+            text1LData1.heightHint = 13;
+            text1LData1.horizontalSpan = 1;
+            text1LData1.grabExcessHorizontalSpace = true;
+            textOrderItemSenderDate.setLayoutData(text1LData1);
+        }
+        {
+            labelOrderItemReceivingDate = new Label(groupOrderItemDetails, SWT.NONE);
+            labelOrderItemReceivingDate.setText(l
+                    .getString("Order.groupdetail.orderitems.receivingdate")
+                    + ":");
+            labelOrderItemReceivingDate.setSize(125, 15);
+            GridData formData2 = new GridData();
+            formData2.heightHint = 15;
+            formData2.horizontalSpan = 1;
+            labelOrderItemReceivingDate.setLayoutData(formData2);
+        }
+        {
+            textOrderItemReceivingDate = new Text(groupOrderItemDetails, SWT.READ_ONLY
+                    | SWT.BORDER);
+            GridData text1LData1 = new GridData();
+            text1LData1.horizontalAlignment = GridData.FILL;
+            text1LData1.heightHint = 13;
+            text1LData1.horizontalSpan = 1;
+            text1LData1.grabExcessHorizontalSpace = true;
+            textOrderItemReceivingDate.setLayoutData(text1LData1);
+        }
+        {
+            labelOrderItemConditionSend = new Label(groupOrderItemDetails, SWT.NONE);
+            labelOrderItemConditionSend.setText(l
+                    .getString("Order.groupdetail.orderitems.conditionsend")
+                    + ":");
+            labelOrderItemConditionSend.setSize(125, 15);
+            GridData formData2 = new GridData();
+            formData2.heightHint = 15;
+            formData2.horizontalSpan = 1;
+            labelOrderItemConditionSend.setLayoutData(formData2);
+        }
+        {
+            textOrderItemConditionSend = new Text(groupOrderItemDetails, SWT.READ_ONLY
+                    | SWT.BORDER);
+            GridData text1LData1 = new GridData();
+            text1LData1.horizontalAlignment = GridData.FILL;
+            text1LData1.heightHint = 13;
+            text1LData1.horizontalSpan = 1;
+            text1LData1.grabExcessHorizontalSpace = true;
+            textOrderItemConditionSend.setLayoutData(text1LData1);
+        }
+        {
+            labelOrderItemConditionReceiving = new Label(groupOrderItemDetails, SWT.NONE);
+            labelOrderItemConditionReceiving.setText(l
+                    .getString("Order.groupdetail.orderitems.conditionreceiving")
+                    + ":");
+            labelOrderItemConditionReceiving.setSize(125, 15);
+            GridData formData2 = new GridData();
+            formData2.heightHint = 15;
+            formData2.horizontalSpan = 1;
+            labelOrderItemConditionReceiving.setLayoutData(formData2);
+        }
+        {
+            textOrderItemConditionReceiving = new Text(groupOrderItemDetails, SWT.READ_ONLY
+                    | SWT.BORDER);
+            GridData text1LData1 = new GridData();
+            text1LData1.horizontalAlignment = GridData.FILL;
+            text1LData1.heightHint = 13;
+            text1LData1.horizontalSpan = 1;
+            text1LData1.grabExcessHorizontalSpace = true;
+            textOrderItemConditionReceiving.setLayoutData(text1LData1);
+        }
+        {
+            labelOrderItemDuration = new Label(groupOrderItemDetails, SWT.NONE);
+            labelOrderItemDuration.setText(l
+                    .getString("Order.groupdetail.orderitems.duration")
+                    + ":");
+            labelOrderItemDuration.setSize(125, 15);
+            GridData formData2 = new GridData();
+            formData2.heightHint = 15;
+            formData2.horizontalSpan = 1;
+            labelOrderItemDuration.setLayoutData(formData2);
+        }
+        {
+            textOrderItemDuration = new Text(groupOrderItemDetails, SWT.READ_ONLY
+                    | SWT.BORDER);
+            GridData text1LData1 = new GridData();
+            text1LData1.horizontalAlignment = GridData.FILL;
+            text1LData1.heightHint = 13;
+            text1LData1.horizontalSpan = 1;
+            text1LData1.grabExcessHorizontalSpace = true;
+            textOrderItemDuration.setLayoutData(text1LData1);
+        }
+        {
+            labelOrderItemPayment = new Label(groupOrderItemDetails, SWT.NONE);
+            labelOrderItemPayment.setText(l
+                    .getString("Order.groupdetail.orderitems.payment")
+                    + ":");
+            labelOrderItemPayment.setSize(125, 15);
+            GridData formData2 = new GridData();
+            formData2.heightHint = 15;
+            formData2.horizontalSpan = 1;
+            labelOrderItemPayment.setLayoutData(formData2);
+        }
+        {
+            textOrderItemPayment = new Text(groupOrderItemDetails, SWT.READ_ONLY
+                    | SWT.BORDER);
+            GridData text1LData1 = new GridData();
+            text1LData1.horizontalAlignment = GridData.FILL;
+            text1LData1.heightHint = 13;
+            text1LData1.horizontalSpan = 1;
+            text1LData1.grabExcessHorizontalSpace = true;
+            textOrderItemPayment.setLayoutData(text1LData1);
+        }
+        {
+
+            //die Buttons bekommen ein eigenes Composite
+            compositeOrderItemButtons = new Composite(groupOrderItemDetails, SWT.EMBEDDED);
+            GridLayout composite2Layout = new GridLayout();
+            GridData composite2LData = new GridData();
+            compositeOrderItemButtons.setLayout(composite2Layout);
+            composite2LData.verticalAlignment = GridData.END;
+            composite2LData.horizontalAlignment = GridData.FILL;
+            composite2LData.horizontalSpan = 4;
+            composite2LData.grabExcessHorizontalSpace = true;
+            composite2LData.grabExcessVerticalSpace = true;
+            composite2LData.heightHint = 35;
+            compositeOrderItemButtons.setLayoutData(composite2LData);
+
+            //init all the Buttons
+            initOrderItemDetailButtons();
+
+        }
     }
 
     /**
      * 
      */
+    private void initOrderItemDetailButtons() {
+        buttonOrderItemDelete = new Button(compositeOrderItemButtons, SWT.PUSH | SWT.CENTER);
+        buttonOrderItemDelete.setText(l.getString("button.delete"));
+        buttonOrderItemDelete.setEnabled(false);
+        buttonOrderItemDelete.addSelectionListener(new SelectionAdapter() {
+            public void widgetSelected(SelectionEvent evt) {
+                System.out
+                        .println("buttonOrderItemDelete.widgetSelected, event="
+                                + evt);
+                
+                
+               String msg = MessageFormat.format(
+                       l.getString("Order.groupdetail.deletebutton.question.text"),
+                               new Object[]{textOrderCustomerName.getText()+" " +
+                               				textOrderCustomerLastName.getText() + " " +
+                               				textOrderCustomerFirstName.getText()});
+                
+               int question = showMsg(msg,
+                       l.getString("Order.groupdetail.deletebutton.question.header"), 
+                       SWT.ICON_QUESTION | SWT.YES | SWT.NO);
+               
+               if (question != SWT.YES){
+                   return;
+               }
+                
+               try {
+                   
+					//object speichern
+					// Fehlerbehandlung
+					aktMovieOrder.getMovieOrderItems().remove(aktOrderItem);   
+					Database.updateObject(aktMovieOrder);
+					
+					//?bersichtsTabelle aktualisieren
+					refreshOrderItemTable(aktMovieOrder.getMovieOrderId().toString());
+					
+					//Detailansicht leeren
+					textOrderItemId.setText("");
+					textOrderItemDvdId.setText("");
+					textOrderItemMovieName.setText("");
+					textOrderItemOrderDate.setText("");
+					textOrderItemSenderDate.setText("");
+					textOrderItemReceivingDate.setText("");
+					textOrderItemConditionSend.setText("");
+					textOrderItemConditionReceiving.setText("");
+					textOrderItemDuration.setText("");
+					textOrderItemPayment.setText("");
+					
+					
+					//Statusline Nachricht sezten
+					statusLine.setStatus(1,l.getString("Order.groupdetail.deletebutton.newok"));
+
+                } catch (DataBaseException e) {
+                    if (e.getMessage().equalsIgnoreCase("1")) {
+                        //Fehler beim Speichern des Objectes
+
+                        statusLine.setStatus(3,l.getString("Order.groupdetail.deletebutton.errorsave"));
+                        showMsg(l.getString("Order.groupdetail.deletebutton.errorsave"),
+                                l.getString("error"), SWT.ICON_ERROR | SWT.OK);
+                        
+                    } else if (e.getMessage().equalsIgnoreCase("2")) {
+                        //fehler beim db aufbau
+                        statusLine.setStatus(3,l.getString("Order.groupdetail.deletebutton.errordb"));
+                        showMsg(l.getString("Order.groupdetail.deletebutton.errordb"),
+                                l.getString("error"), SWT.ICON_ERROR | SWT.OK);
+                        
+                    } else {
+                        //@todo
+                        e.printStackTrace();
+                    }
+                    
+                }                
+                
+
+                }
+
+            }
+        );
+    }
+
+    /**
+     * 
+     */
     private void initOrderDetails() {
         groupOrderDetails = new Group(sashFormOrderDetail, SWT.NONE);
         GridLayout groupOrderDetailLayout = new GridLayout();
@@ -424,7 +802,7 @@
         {
             labelOrderId = new Label(groupOrderDetails, SWT.NONE);
             labelOrderId.setText(l
-                    .getString("order.groupdetail.order.idlabel")
+                    .getString("Order.groupdetail.order.idlabel")
                     + ":");
             labelOrderId.setSize(125, 15);
             GridData formData2 = new GridData();
@@ -446,7 +824,7 @@
         {
             labelOrderCustomerName = new Label(groupOrderDetails, SWT.NONE);
             labelOrderCustomerName.setText(l
-                    .getString("order.groupdetail.order.customernamelabel")
+                    .getString("Order.groupdetail.order.customernamelabel")
                     + ":");
             labelOrderCustomerName.setSize(125, 15);
             GridData formData2 = new GridData();
@@ -466,9 +844,7 @@
         }
         {
             labelOrderCustomerLastName = new Label(groupOrderDetails, SWT.NONE);
-            labelOrderCustomerLastName.setText(l
-                    .getString("order.groupdetail.order.customerlastnamelabel")
-                    + ":");
+            labelOrderCustomerLastName.setText("");
             labelOrderCustomerLastName.setSize(125, 15);
             GridData formData2 = new GridData();
             formData2.widthHint = 125;
@@ -481,36 +857,116 @@
             GridData text1LData1 = new GridData();
             text1LData1.horizontalAlignment = GridData.FILL;
             text1LData1.heightHint = 13;
-            text1LData1.horizontalSpan = 2;
+            text1LData1.horizontalSpan = 1;
             text1LData1.grabExcessHorizontalSpace = true;
             textOrderCustomerLastName.setLayoutData(text1LData1);
         }
         {
-            labelOrderCustomerFirstName = new Label(groupOrderDetails, SWT.NONE);
-            labelOrderCustomerFirstName.setText(l
-                    .getString("order.groupdetail.order.customerfirstnamelabel")
-                    + ":");
-            labelOrderCustomerFirstName.setSize(125, 15);
-            GridData formData2 = new GridData();
-            formData2.widthHint = 125;
-            formData2.heightHint = 15;
-            formData2.horizontalSpan = 2;
-            labelOrderCustomerFirstName.setLayoutData(formData2);
-        }
-        {
             textOrderCustomerFirstName = new Text(groupOrderDetails, SWT.READ_ONLY | SWT.BORDER);
             GridData text1LData1 = new GridData();
             text1LData1.horizontalAlignment = GridData.FILL;
             text1LData1.heightHint = 13;
-            text1LData1.horizontalSpan = 2;
+            text1LData1.horizontalSpan = 1;
             text1LData1.grabExcessHorizontalSpace = true;
             textOrderCustomerFirstName.setLayoutData(text1LData1);
         }
+        {
+
+            //die Buttons bekommen ein eigenes Composite
+            compositeOrderButtons = new Composite(groupOrderDetails, SWT.EMBEDDED);
+            GridLayout composite2Layout = new GridLayout();
+            GridData composite2LData = new GridData();
+            compositeOrderButtons.setLayout(composite2Layout);
+            composite2LData.verticalAlignment = GridData.END;
+            composite2LData.horizontalAlignment = GridData.FILL;
+            composite2LData.horizontalSpan = 4;
+            composite2LData.grabExcessHorizontalSpace = true;
+            composite2LData.grabExcessVerticalSpace = true;
+            composite2LData.heightHint = 35;
+            compositeOrderButtons.setLayoutData(composite2LData);
+
+            //init all the Buttons
+            initOrderDetailButtons();
+
+        }
     }
 
     /**
      * 
      */
+    private void initOrderDetailButtons() {       
+        buttonOrderDelete = new Button(compositeOrderButtons, SWT.PUSH | SWT.CENTER);
+        buttonOrderDelete.setText(l.getString("button.delete"));
+        buttonOrderDelete.setEnabled(false);
+        buttonOrderDelete.addSelectionListener(new SelectionAdapter() {
+            public void widgetSelected(SelectionEvent evt) {
+                System.out
+                        .println("buttonOrderDelete.widgetSelected, event="
+                                + evt);
+                
+                
+               String msg = MessageFormat.format(
+                       l.getString("Order.groupdetail.deletebutton.question.text"),
+                               new Object[]{textOrderCustomerName.getText()+" " +
+                               				textOrderCustomerLastName.getText() + " " +
+                               				textOrderCustomerFirstName.getText()});
+                
+               int question = showMsg(msg,
+                       l.getString("Order.groupdetail.deletebutton.question.header"), 
+                       SWT.ICON_QUESTION | SWT.YES | SWT.NO);
+               
+               if (question != SWT.YES){
+                   return;
+               }
+                
+               try {
+                    //object speichern
+                    // Fehlerbehandlung
+                    Database.deleteObject(aktMovieOrder);
+
+                    //?bersichtsTabelle aktualisieren
+                    refreshOrderTable(textOrderSearch.getText());
+                    
+                    //Detailansicht leeren
+                    textOrderId.setText("");
+                    textOrderCustomerName.setText("");
+                    textOrderCustomerLastName.setText("");
+                    textOrderCustomerFirstName.setText("");
+                                        
+                    //Statusline Nachricht sezten
+                    statusLine.setStatus(1,l.getString("Order.groupdetail.deletebutton.newok"));
+
+                } catch (DataBaseException e) {
+                    if (e.getMessage().equalsIgnoreCase("1")) {
+                        //Fehler beim Speichern des Objectes
+
+                        statusLine.setStatus(3,l.getString("Order.groupdetail.deletebutton.errorsave"));
+                        showMsg(l.getString("Order.groupdetail.deletebutton.errorsave"),
+                                l.getString("error"), SWT.ICON_ERROR | SWT.OK);
+                        
+                    } else if (e.getMessage().equalsIgnoreCase("2")) {
+                        //fehler beim db aufbau
+                        statusLine.setStatus(3,l.getString("Order.groupdetail.deletebutton.errordb"));
+                        showMsg(l.getString("Order.groupdetail.deletebutton.errordb"),
+                                l.getString("error"), SWT.ICON_ERROR | SWT.OK);
+                        
+                    } else {
+                        //@todo
+                        e.printStackTrace();
+                    }
+                    
+                }                
+                
+
+                }
+
+            }
+        );     
+    }
+
+    /**
+     * 
+     */
     private void initOrderGroupOverview() {
         if (logger.isDebugEnabled()) {
             logger.debug("initOrderGroupOverview() - start");
@@ -562,8 +1018,8 @@
 
                 //es wurde ein Element aus Tabelle ausgewaehlt jetzt muss die
                 //Detailansicht aktualisiert werden
-                refreshOrderItemTable(tableOrderItems.getItem(index).getText(0));
-
+                String tabItem = tableOrderItems.getItem(index).getText(0);
+                refreshOrderItemDetails(tabItem);
             }
         });
         table2LData.verticalAlignment = GridData.FILL;
@@ -719,7 +1175,9 @@
 
                 //es wurde ein Element aus Tabelle ausgewaehlt jetzt muss die
                 //Detailansicht aktualisiert werden
-                refreshOrderItemTable(tableOrder.getItem(index).getText(0));
+                String tabItem = tableOrder.getItem(index).getText(0);
+                refreshOrderDetails(tabItem);
+                refreshOrderItemTable(tabItem);
 
             }
         });
@@ -754,13 +1212,125 @@
             logger.debug("initTableOrder() - end");
         }
     }
+    
+    /**
+     * @param text
+     */
+    private void refreshOrderDetails(final String id) {
+        try {
+            //since we only can get a String value from the table, we
+            //need to convert this
+            aktMovieOrder = (MovieOrder) Database.getSingleObject(MovieOrder.class, Integer.parseInt(id));
 
+            if (aktMovieOrder == null) {
+
+                /*
+                 * 
+                 * @TODO Statusbar aktualiseren
+                 */
+                return;
+            }
+        } catch (Exception e) {
+            // TODO: handle exception
+            //id ist keine Zahl
+            return;
+        }
+
+        textOrderId.setText(aktMovieOrder.getMovieOrderId() + "");
+        textOrderCustomerName.setText(aktMovieOrder.getCustomer().getUserName());
+        textOrderCustomerLastName.setText(aktMovieOrder.getCustomer().getPerson().getLastName());
+        textOrderCustomerFirstName.setText(aktMovieOrder.getCustomer().getPerson().getFirstName());
+
+        buttonOrderDelete.setEnabled(true);
+
+        //Mode auf view setzen
+        mode_Order = ManagementGui.MODE_VIEW;
+        
+    }
+    
+    /**
+     * @param text
+     */
+    private void refreshOrderItemDetails(final String id) {
+        try {
+            //since we only can get a String value from the table, we
+            //need to convert this
+            aktOrderItem = (OrderItem) Database.getSingleObject(OrderItem.class, Integer.parseInt(id));
+
+            if (aktOrderItem == null) {
+
+                /*
+                 * 
+                 * @TODO Statusbar aktualiseren
+                 */
+                return;
+            }
+        } catch (Exception e) {
+            // TODO: handle exception
+            //id ist keine Zahl
+            return;
+        }
+
+        textOrderItemId.setText(aktOrderItem.getOrderItemId() + "");
+        textOrderItemDvdId.setText(aktOrderItem.getDvd().getDvdId() + "");
+        textOrderItemMovieName.setText(aktOrderItem.getDvd().getMovie().getTitle() + "");
+        Calendar cal = aktOrderItem.getOrderTime();
+        if (cal == null) {
+            textOrderItemOrderDate.setText("");
+        } else {
+            textOrderItemOrderDate.setText(DateFormat
+                    .getDateInstance(DateFormat.MEDIUM).format(
+                            cal.getTime()));
+        }
+        cal = aktOrderItem.getSenderTime();
+        if (cal == null) {
+            textOrderItemSenderDate.setText("");
+        } else {
+            textOrderItemSenderDate.setText(DateFormat
+                    .getDateInstance(DateFormat.MEDIUM).format(
+                            cal.getTime()));
+        }
+        cal = aktOrderItem.getReceivingTime();
+        if (cal == null) {
+            textOrderItemReceivingDate.setText("");
+        } else {
+            textOrderItemReceivingDate.setText(DateFormat
+                    .getDateInstance(DateFormat.MEDIUM).format(
+                            cal.getTime()));
+        }
+        Condition con = aktOrderItem.getConditionSend();
+        if(con == null) {
+            textOrderItemConditionSend.setText("");
+        } else {
+            textOrderItemConditionSend.setText(con.getConditionName());
+        }
+        con = aktOrderItem.getConditionSend();
+        if(con == null) {
+            textOrderItemConditionReceiving.setText("");
+        } else {
+            textOrderItemConditionReceiving.setText(con.getConditionName());
+        }
+        textOrderItemDuration.setText(aktOrderItem.getDuration() + "");
+        Payment pay = aktOrderItem.getPayment();
+        if (pay == null) {
+            textOrderItemPayment.setText("");
+        } else {
+            textOrderItemPayment.setText(pay.getPaymentCategory().getName());
+        }
+        
+        
+
+        buttonOrderItemDelete.setEnabled(true);
+
+        //Mode auf view setzen
+        mode_Order = ManagementGui.MODE_VIEW;
+        
+    }
+
     /* (non-Javadoc)
      * @see de.hsharz.provirent.management.gui.AbstractComposite#changeLanguage(java.util.Locale)
      */
     public void changeLanguage(Locale l) {
-        // TODO Auto-generated method stub
-
     }
 
     /* (non-Javadoc)
@@ -772,5 +1342,6 @@
     }
 
     public static void main(String[] args) {
+        showGUI();
     }
 }

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/order.properties
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/order.properties	2004-12-13 14:26:07 UTC (rev 240)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/order.properties	2004-12-13 20:24:11 UTC (rev 241)
@@ -27,11 +27,20 @@
 Order.groupoverview.searchlabel=Suche nach
 Order.groupdetail.label=Detail
 Order.groupdetail.order.label=Bestellung
-order.groupdetail.order.idlabel=Bestellungs-Id
-order.groupdetail.order.customernamelabel=Benutzername
-order.groupdetail.order.customerlastnamelabel=Nachname
-order.groupdetail.order.customerfirstnamelabel=Vorname
+Order.groupdetail.order.idlabel=Bestellungs-Id
+Order.groupdetail.order.customernamelabel=Bestellt von
+Order.groupdetail.order.customerlastnamelabel=Nachname
+Order.groupdetail.order.customerfirstnamelabel=Vorname
 Order.groupdetail.orderitems.label=Bestellartikel
+Order.groupdetail.orderitems.idlabel=Bestellartikel-Id
+Order.groupdetail.orderitems.dvdlabel=DVD Id/Name
+Order.groupdetail.orderitems.orderdate=Bestellt am
+Order.groupdetail.orderitems.senderdate=Versendet am
+Order.groupdetail.orderitems.receivingdate=Erhalten am
+Order.groupdetail.orderitems.conditionsend=Zustand vorher
+Order.groupdetail.orderitems.conditionreceiving=Zustand nachher
+Order.groupdetail.orderitems.duration=Verleihdauer
+Order.groupdetail.orderitems.payment=Preisklasse
 Order.groupdetail.idlabel=Benutzer ID
 Order.groupdetail.usernamelabel=Benutzername
 Order.groupdetail.lastnamelabel=Nachname



From rgriesch at sheep.berlios.de  Mon Dec 13 21:56:43 2004
From: rgriesch at sheep.berlios.de (Remo Griesch at BerliOS)
Date: Mon, 13 Dec 2004 21:56:43 +0100
Subject: [Provirent-svn-commit] r242 - in project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui: . language
Message-ID: <200412132056.iBDKuh39024853@sheep.berlios.de>

Author: rgriesch
Date: 2004-12-13 21:56:42 +0100 (Mon, 13 Dec 2004)
New Revision: 242

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeDVD.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/dvds.properties
Log:
Composite DVD  - erweitert

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeDVD.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeDVD.java	2004-12-13 20:24:11 UTC (rev 241)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeDVD.java	2004-12-13 20:56:42 UTC (rev 242)
@@ -3,6 +3,7 @@
 import java.util.Locale;
 import java.util.PropertyResourceBundle;
 import java.util.ResourceBundle;
+import java.util.List;
 
 import org.apache.log4j.Logger;
 import org.eclipse.swt.SWT;
@@ -15,6 +16,8 @@
 import org.eclipse.swt.layout.FormData;
 import org.eclipse.swt.layout.GridData;
 import org.eclipse.swt.layout.GridLayout;
+import org.eclipse.swt.widgets.Button;
+import org.eclipse.swt.widgets.Combo;
 import org.eclipse.swt.widgets.Composite;
 import org.eclipse.swt.widgets.Display;
 import org.eclipse.swt.widgets.Event;
@@ -24,10 +27,21 @@
 import org.eclipse.swt.widgets.Shell;
 import org.eclipse.swt.widgets.Table;
 import org.eclipse.swt.widgets.TableColumn;
+import org.eclipse.swt.widgets.TableItem;
 import org.eclipse.swt.widgets.Text;
 
 import com.cloudgarden.resource.SWTResourceManager;
 
+import de.hsharz.provirent.objects.Dvd;
+import de.hsharz.provirent.objects.Language;
+import de.hsharz.provirent.objects.Subtitle;
+import de.hsharz.provirent.objects.VideoFormat;
+import de.hsharz.provirent.objects.AudioFormat;
+import de.hsharz.provirent.objects.Movie;
+import de.hsharz.provirent.objects.PaymentCategory;
+import de.hsharz.provirent.objects.Condition;
+import de.hsharz.provirent.objects.Status;
+import de.hsharz.provirent.persistence.Database;
 
 /**
 * This code was generated using CloudGarden's Jigloo
@@ -62,6 +76,14 @@
     
     private Table tableDVDOverview;
     
+    private Table tableDVDLanguagesDetail;
+    
+    private Table tableDVDSubtitlesDetail;
+    
+    private Table tableDVDVideoformatDetail;
+    
+    private Table tableDVDAudioformatDetail;
+    
     private TableColumn tableDVDOverview_ColumnID;
 
     private TableColumn tableDVDOverview_ColumnTitle;
@@ -70,26 +92,84 @@
     
     private TableColumn tableDVDOverview_ColumnCondition;
     
+    private TableColumn tableDVDDetail_ColumnID; 
+    
+    private TableColumn tableDVDDetail_ColumnName;
+    
     private Text textDVDSearch;
     
     private Text textDVDID;
     
+    private Text textDVDBarcode;
+    
+    private Combo comboDVDPayment;
+    
+    private Combo comboDVDStatus;
+
+    private Combo comboDVDCondition;
+    
+    private Combo comboDVDMovie;
+    
+    private Label labelDVDStatus;
+    
+    private Label labelDVDMovie;
+    
+    private Label labelDVDBarcode;
+    
+    private Label labelDVDPayment;
+
+    private Label labelDVDCondition;
+    
     private Label labelDVDSearch;
    
     private Label labelDVDID;
     
+    private Label labelDVDLanguages;
+    
+    private Label labelDVDSubtitles;
+    
+    private Label labelDVDVideoformat;
+    
+    private Label labelDVDAudioformat;
+        
     private Composite parent;
     
+    private Composite compositeDVDEditLanguages;
+    
+    private Composite compositeDVDEditSubtitles;
+    
+    private Composite compositeDVDEditVideoformat;
+    
+    private Composite compositeDVDEditAudioformat;
+    
+    private Button buttonDVDAddLanguages;
+    
+    private Button buttonDVDDeleteLanguages;
+    
+    private Button buttonDVDAddSubtitles;
+    
+    private Button buttonDVDDeleteSubtitles;
+    
+    private Button buttonDVDAddVideoformat;
+    
+    private Button buttonDVDDeleteVideoformat;
+    
+    private Button buttonDVDAddAudioformat;
+    
+    private Button buttonDVDDeleteAudioformat;
+    
     private SashForm sashForm1;
     
     private int mode_dvd;
-    
+
     private Locale locale;
     
     private StatusLineStyledText statusLine;
     
     private ResourceBundle l;
     
+    private Dvd localdvd;
+    
     /*
      * ?ndert die Sprache aller Elemente
      * 
@@ -343,7 +423,6 @@
 			labelDVDID = new Label(groupDVDDetail, SWT.NONE);
 			labelDVDID.setText(l.getString("dvd.groupdetail.labelid")
 					+ ":");
-			labelDVDID.setSize(125, 15);
 			GridData formData2 = new GridData();
 			formData2.heightHint = 15;
 			formData2.horizontalAlignment = GridData.FILL;
@@ -354,12 +433,606 @@
 			textDVDID = new Text(groupDVDDetail, SWT.READ_ONLY
 					| SWT.BORDER);
 			GridData text1LData1 = new GridData();
-			text1LData1.horizontalAlignment = GridData.FILL;
 			text1LData1.heightHint = 13;
 			text1LData1.grabExcessHorizontalSpace = true;
-			text1LData1.horizontalSpan = 5;
+			text1LData1.horizontalSpan = 2;
+			text1LData1.horizontalAlignment = GridData.FILL;
 			textDVDID.setLayoutData(text1LData1);
 		}
+		{
+			labelDVDBarcode = new Label(groupDVDDetail, SWT.NONE);
+			labelDVDBarcode.setText(l.getString("dvd.groupdetail.labelbarcode")
+					+ ":");
+			GridData formData2 = new GridData();
+			formData2.heightHint = 15;
+			formData2.horizontalAlignment = GridData.FILL;
+			formData2.verticalAlignment = GridData.BEGINNING;
+			labelDVDBarcode.setLayoutData(formData2);
+		}
+		{
+			textDVDBarcode = new Text(groupDVDDetail, SWT.READ_ONLY
+					| SWT.BORDER);
+			GridData text1LData1 = new GridData();
+			text1LData1.heightHint = 13;
+			text1LData1.grabExcessHorizontalSpace = true;
+			text1LData1.horizontalSpan = 2;
+			text1LData1.horizontalAlignment = GridData.FILL;
+			textDVDBarcode.setLayoutData(text1LData1);
+		}
+        {
+            labelDVDMovie = new Label(groupDVDDetail, SWT.NONE);
+            labelDVDMovie.setText("labelDVDMovie");
+            GridData labelDVDMovieLData = new GridData();
+            labelDVDMovieLData.horizontalAlignment = GridData.FILL;
+            labelDVDMovie.setLayoutData(labelDVDMovieLData);
+        }
+        {
+            comboDVDMovie = new Combo(groupDVDDetail, SWT.NONE);
+            comboDVDMovie.setText("comboDVDMovie");
+            GridData combo1LData1 = new GridData();
+            combo1LData1.horizontalAlignment = GridData.FILL;
+            combo1LData1.horizontalSpan = 5;
+            comboDVDMovie.setLayoutData(combo1LData1);
+            List l=Database.getMovie("");
+            for(int i=0;i<l.size();i++)  {
+                comboDVDMovie.add(((Movie)l.get(i)).getTitle(),i);
+            }
+        }
+        {
+            labelDVDPayment = new Label(groupDVDDetail, SWT.NONE);
+            labelDVDPayment.setText("labelDVDPayment");
+            GridData labelDVDPaymentLData = new GridData();
+            labelDVDPaymentLData.horizontalAlignment = GridData.FILL;
+            labelDVDPayment.setLayoutData(labelDVDPaymentLData);
+        }
+        {
+            comboDVDPayment = new Combo(groupDVDDetail, SWT.NONE);
+            comboDVDPayment.setText("comboDVDPayment");
+            GridData combo1LData = new GridData();
+            combo1LData.horizontalAlignment = GridData.FILL;
+            combo1LData.horizontalSpan = 5;
+            comboDVDPayment.setLayoutData(combo1LData);
+            List l=Database.getPaymentCategory();
+            for(int i=0;i<l.size();i++)  {
+                comboDVDPayment.add(((PaymentCategory)l.get(i)).getName(),i);
+            }
+        }
+        {
+            labelDVDStatus = new Label(groupDVDDetail, SWT.NONE);
+            labelDVDStatus.setText("labelDVDStatus");
+            GridData labelDVDStatusLData = new GridData();
+            labelDVDStatusLData.horizontalAlignment = GridData.FILL;
+            labelDVDStatus.setLayoutData(labelDVDStatusLData);
+        }
+        {
+            comboDVDStatus = new Combo(groupDVDDetail, SWT.NONE);
+            comboDVDStatus.setText("comboDVDStatus");
+            GridData combo1LData2 = new GridData();
+            combo1LData2.horizontalSpan = 5;
+            combo1LData2.grabExcessHorizontalSpace = true;
+            combo1LData2.horizontalAlignment = GridData.FILL;
+            comboDVDStatus.setLayoutData(combo1LData2);
+            List l=Database.getStatus("");
+            for(int i=0;i<l.size();i++)  {
+                comboDVDStatus.add(((Status)l.get(i)).getStatusName(),i);
+            }
+        }
+        {
+            labelDVDCondition = new Label(groupDVDDetail, SWT.NONE);
+            labelDVDCondition.setText("labelDVDCondition");
+            GridData labelDVDConditionLData = new GridData();
+            labelDVDConditionLData.horizontalAlignment = GridData.FILL;
+            labelDVDCondition.setLayoutData(labelDVDConditionLData);
+        }
+        {
+            comboDVDCondition = new Combo(groupDVDDetail, SWT.NONE);
+            comboDVDCondition.setText("comboDVDCondition");
+            GridData combo1LData3 = new GridData();
+            combo1LData3.horizontalAlignment = GridData.FILL;
+            combo1LData3.grabExcessHorizontalSpace = true;
+            combo1LData3.horizontalSpan = 5;
+            comboDVDCondition.setLayoutData(combo1LData3);
+            List l=Database.getCondition("");
+            for(int i=0;i<l.size();i++)  {
+                comboDVDCondition.add(((Condition)l.get(i)).getConditionName(),i);
+            }
+        }
+//      EditDirectors
+		{
+
+			compositeDVDEditLanguages = new Composite(groupDVDDetail,
+					SWT.NONE);
+			GridLayout composite1Layout = new GridLayout();
+			GridData composite1LData = new GridData();
+			composite1LData.horizontalAlignment = GridData.FILL;
+			composite1LData.verticalAlignment = GridData.BEGINNING;
+			compositeDVDEditLanguages.setLayoutData(composite1LData);
+			composite1Layout.numColumns = 2;
+			compositeDVDEditLanguages.setLayout(composite1Layout);
+		}
+		{
+			labelDVDLanguages = new Label(compositeDVDEditLanguages,
+					SWT.NONE);
+			labelDVDLanguages.setText(l
+					.getString("dvd.groupdetail.labellanguages"));
+			GridData formData2 = new GridData();
+			formData2.horizontalSpan = 2;
+			formData2.verticalSpan = 1;
+			labelDVDLanguages.setLayoutData(formData2);
+		}
+		{
+			buttonDVDAddLanguages = new Button(compositeDVDEditLanguages,
+					SWT.NONE);
+			buttonDVDAddLanguages.setText(l
+					.getString("dvd.button.additem"));
+			buttonDVDAddLanguages.setEnabled(false);
+			GridData text1LData2 = new GridData();
+			text1LData2.heightHint = 20;
+			text1LData2.horizontalSpan = 1;
+			text1LData2.horizontalAlignment = GridData.BEGINNING;
+			buttonDVDAddLanguages.setLayoutData(text1LData2);
+			buttonDVDAddLanguages
+					.addSelectionListener(new SelectionAdapter() {
+						public void widgetSelected(SelectionEvent evt) {
+							//open responsible Dialog and insert objects into
+							/* table
+							DialogMovie dialog = new DialogMovie(getShell(), 0,
+									locale, localmovie,
+									DialogMovie.TYPE_DIRECTOR);
+							dialog.open();
+
+							tableMoviesDirectorsDetail.removeAll();
+							TableItem item;
+							for (int i = 0; i < localmovie.getDirector().size(); i++) {
+								item = new TableItem(
+										tableMoviesDirectorsDetail, SWT.NONE);
+								item.setText(new String[] {
+										((Director) localmovie.getDirector()
+												.get(i)).getDirectorId()
+												+ "",
+										((Director) localmovie.getDirector()
+												.get(i)).getLastName()
+												+ " , "
+												+ ((Director) localmovie
+														.getDirector().get(i))
+														.getFirstName() });
+							}
+							*/
+						    // TODO
+						}
+					});
+		}
+		{
+			buttonDVDDeleteLanguages = new Button(
+					compositeDVDEditLanguages, SWT.NONE);
+			buttonDVDDeleteLanguages.setText(l
+					.getString("dvd.button.deleteitem"));
+			buttonDVDDeleteLanguages.setEnabled(false);
+			GridData text1LData2 = new GridData();
+			text1LData2.horizontalAlignment = GridData.BEGINNING;
+			text1LData2.heightHint = 20;
+			text1LData2.horizontalSpan = 1;
+			buttonDVDDeleteLanguages.setLayoutData(text1LData2);
+			buttonDVDDeleteLanguages
+					.addSelectionListener(new SelectionAdapter() {
+						public void widgetSelected(SelectionEvent evt) {
+							//get selected Item
+							//get id from object
+							//search for id in list and delete object
+							//remove table entry
+							int index = tableDVDLanguagesDetail
+									.getSelectionIndex();
+							if (index >= 0) {
+								String strid = tableDVDLanguagesDetail
+										.getItem(index).getText(0);
+								int id = Integer.parseInt(strid);
+								for (int i = 0; i < localdvd.getLanguages()
+										.size(); i++) {
+									Language o = (Language) localdvd
+											.getLanguages().get(i);
+									if (o.getLanguageId().intValue() == id) {
+										localdvd.getLanguages().remove(o);
+										break;
+									}
+								}
+								tableDVDLanguagesDetail.remove(index);
+							}
+							
+						    //TODO
+						}
+					});
+		}
+		{
+		    tableDVDLanguagesDetail = new Table(groupDVDDetail,
+					SWT.SINGLE | SWT.FULL_SELECTION | SWT.V_SCROLL | SWT.BORDER);
+			//tableMoviesDirectorsDetail.setHeaderVisible(true);
+			//tableMoviesDirectorsDetail.setLinesVisible(true);
+			GridData tableDVDLanguagesDetailLData = new GridData();
+			tableDVDLanguagesDetailLData.horizontalAlignment = GridData.FILL;
+			tableDVDLanguagesDetailLData.horizontalSpan = 5;
+			tableDVDLanguagesDetailLData.grabExcessVerticalSpace = true;
+			tableDVDLanguagesDetailLData.verticalAlignment = GridData.FILL;
+			tableDVDLanguagesDetail
+					.setLayoutData(tableDVDLanguagesDetailLData);
+
+			{
+				tableDVDDetail_ColumnID = new TableColumn(
+				        tableDVDLanguagesDetail, SWT.CENTER);
+				tableDVDDetail_ColumnID.setWidth(0);
+				tableDVDDetail_ColumnID.setResizable(false);
+			}
+			{
+				tableDVDDetail_ColumnName = new TableColumn(
+				        tableDVDLanguagesDetail, SWT.LEFT);
+				tableDVDDetail_ColumnName
+						.setText(l
+								.getString("dvd.groupoverviewdetail.columnlanguages"));
+				tableDVDDetail_ColumnName.setWidth(200);
+			}
+		}// EditDirectors
+		// Edit Actors
+		{
+			compositeDVDEditSubtitles = new Composite(groupDVDDetail,
+					SWT.NONE);
+			GridLayout composite1Layout = new GridLayout();
+			GridData composite1LData = new GridData();
+			composite1LData.horizontalAlignment = GridData.FILL;
+			composite1LData.verticalAlignment = GridData.BEGINNING;
+			compositeDVDEditSubtitles.setLayoutData(composite1LData);
+			composite1Layout.numColumns = 2;
+			compositeDVDEditSubtitles.setLayout(composite1Layout);
+		}
+
+		{
+			labelDVDSubtitles = new Label(compositeDVDEditSubtitles, SWT.NONE);
+			labelDVDSubtitles.setText(l
+					.getString("dvd.groupdetail.labelSubtitles"));
+			GridData formData2 = new GridData();
+			formData2.horizontalSpan = 2;
+			formData2.verticalSpan = 1;
+			labelDVDSubtitles.setLayoutData(formData2);
+		}
+		{
+			buttonDVDAddSubtitles = new Button(compositeDVDEditSubtitles,
+					SWT.NONE);
+			buttonDVDAddSubtitles.setText(l.getString("dvd.button.additem"));
+			buttonDVDAddSubtitles.setEnabled(false);
+			GridData text1LData2 = new GridData();
+			text1LData2.heightHint = 20;
+			text1LData2.horizontalSpan = 1;
+			text1LData2.horizontalAlignment = GridData.BEGINNING;
+			buttonDVDAddSubtitles.setLayoutData(text1LData2);
+			buttonDVDAddSubtitles.addSelectionListener(new SelectionAdapter() {
+				public void widgetSelected(SelectionEvent evt) {
+					//open responsible Dialog and insert objects into table
+					/*
+				    DialogMovie dialog = new DialogMovie(getShell(), 0, locale,
+							localmovie, DialogMovie.TYPE_ACTOR);
+					dialog.open();
+
+					tableMoviesActorsDetail.removeAll();
+					TableItem item;
+					for (int i = 0; i < localmovie.getActors().size(); i++) {
+						item = new TableItem(tableMoviesActorsDetail, SWT.NONE);
+						item.setText(new String[] {
+								((Actor) localmovie.getActors().get(i))
+										.getActorId()
+										+ "",
+								((Actor) localmovie.getActors().get(i))
+										.getLastName()
+										+ ", "
+										+ ((Actor) localmovie.getActors()
+												.get(i)).getFirstName() });
+					}
+				*/
+				}
+			});
+		}
+		{
+			buttonDVDDeleteSubtitles = new Button(compositeDVDEditSubtitles,
+					SWT.NONE);
+			buttonDVDDeleteSubtitles.setText(l
+					.getString("dvd.button.deleteitem"));
+			buttonDVDDeleteSubtitles.setEnabled(false);
+			GridData text1LData2 = new GridData();
+			text1LData2.horizontalAlignment = GridData.BEGINNING;
+			text1LData2.heightHint = 20;
+			text1LData2.horizontalSpan = 1;
+			buttonDVDDeleteSubtitles.setLayoutData(text1LData2);
+			buttonDVDDeleteSubtitles
+					.addSelectionListener(new SelectionAdapter() {
+						public void widgetSelected(SelectionEvent evt) {
+							//get selected Item
+							//get id from object
+							//search for id in list and delete object
+							//remove table entry
+							int index = tableDVDSubtitlesDetail
+									.getSelectionIndex();
+							if (index >= 0) {
+								String strid = tableDVDSubtitlesDetail.getItem(
+										index).getText(0);
+								int id = Integer.parseInt(strid);
+								for (int i = 0; i < localdvd.getSubtitles()
+										.size(); i++) {
+									Subtitle o = (Subtitle) localdvd.getSubtitles()
+											.get(i);
+									if (o.getSubtitleId().intValue() == id) {
+										localdvd.getSubtitles().remove(o);
+										break;
+									}
+								}
+								tableDVDSubtitlesDetail.remove(index);
+							}
+						}
+					});
+		}
+		{
+		    tableDVDSubtitlesDetail = new Table(groupDVDDetail, SWT.SINGLE
+					| SWT.FULL_SELECTION | SWT.V_SCROLL | SWT.BORDER);
+			//tableMoviesActorsDetail.setHeaderVisible(true);
+			//tableMoviesActorsDetail.setLinesVisible(true);
+			GridData tableDVDSubtitlesDetailLData = new GridData();
+			tableDVDSubtitlesDetailLData.horizontalAlignment = GridData.FILL;
+			tableDVDSubtitlesDetailLData.horizontalSpan = 5;
+			tableDVDSubtitlesDetailLData.grabExcessVerticalSpace = true;
+			tableDVDSubtitlesDetailLData.verticalAlignment = GridData.FILL;
+			tableDVDSubtitlesDetail.setLayoutData(tableDVDSubtitlesDetailLData);
+
+			{
+				tableDVDDetail_ColumnID = new TableColumn(
+				        tableDVDSubtitlesDetail, SWT.CENTER);
+				tableDVDDetail_ColumnID.setWidth(0);
+				tableDVDDetail_ColumnID.setResizable(false);
+			}
+			{
+				tableDVDDetail_ColumnName = new TableColumn(
+				        tableDVDSubtitlesDetail, SWT.LEFT);
+				tableDVDDetail_ColumnName.setText(l
+						.getString("dvd.groupoverviewdetail.columnsubtitles"));
+				tableDVDDetail_ColumnName.setWidth(200);
+			}
+		}//Edit Actors
+		//Edit Genres
+		{
+			compositeDVDEditVideoformat = new Composite(groupDVDDetail,
+					SWT.NONE);
+			GridLayout composite1Layout = new GridLayout();
+			GridData composite1LData = new GridData();
+			composite1LData.horizontalAlignment = GridData.FILL;
+			composite1LData.verticalAlignment = GridData.BEGINNING;
+			compositeDVDEditVideoformat.setLayoutData(composite1LData);
+			composite1Layout.numColumns = 2;
+			compositeDVDEditVideoformat.setLayout(composite1Layout);
+		}
+
+		{
+			labelDVDVideoformat = new Label(compositeDVDEditVideoformat, SWT.NONE);
+			labelDVDVideoformat.setText(l
+					.getString("dvd.groupdetail.labelvideoformat"));
+			GridData formData2 = new GridData();
+			formData2.horizontalSpan = 2;
+			formData2.verticalSpan = 1;
+			labelDVDVideoformat.setLayoutData(formData2);
+		}
+		{
+			buttonDVDAddVideoformat = new Button(compositeDVDEditVideoformat,
+					SWT.NONE);
+			buttonDVDAddVideoformat.setText(l.getString("dvd.button.additem"));
+			buttonDVDAddVideoformat.setEnabled(false);
+			GridData text1LData2 = new GridData();
+			text1LData2.heightHint = 20;
+			text1LData2.horizontalSpan = 1;
+			text1LData2.horizontalAlignment = GridData.BEGINNING;
+			buttonDVDAddVideoformat.setLayoutData(text1LData2);
+			buttonDVDAddVideoformat.addSelectionListener(new SelectionAdapter() {
+				public void widgetSelected(SelectionEvent evt) {
+					//open responsible Dialog and insert objects into table
+					/*
+				    DialogMovie dialog = new DialogMovie(getShell(), 0, locale,
+							localmovie, DialogMovie.TYPE_GENRE);
+					dialog.open();
+
+					tableMoviesGenresDetail.removeAll();
+					TableItem item;
+					for (int i = 0; i < localmovie.getGenres().size(); i++) {
+						item = new TableItem(tableMoviesGenresDetail, SWT.NONE);
+						item.setText(new String[] {
+								((Genre) localmovie.getGenres().get(i))
+										.getGenreId()
+										+ "",
+								((Genre) localmovie.getGenres().get(i))
+										.getName()
+										+ "" });
+					}
+				*/
+				}
+			});
+		}
+		{
+			buttonDVDDeleteVideoformat = new Button(compositeDVDEditVideoformat,
+					SWT.NONE);
+			buttonDVDDeleteVideoformat.setText(l
+					.getString("dvd.button.deleteitem"));
+			buttonDVDDeleteVideoformat.setEnabled(false);
+			GridData text1LData2 = new GridData();
+			text1LData2.horizontalAlignment = GridData.BEGINNING;
+			text1LData2.heightHint = 20;
+			text1LData2.horizontalSpan = 1;
+			buttonDVDDeleteVideoformat.setLayoutData(text1LData2);
+			buttonDVDDeleteVideoformat
+					.addSelectionListener(new SelectionAdapter() {
+						public void widgetSelected(SelectionEvent evt) {
+							//get selected Item
+							//get id from object
+							//search for id in list and delete object
+							//remove table entry
+							int index = tableDVDVideoformatDetail
+									.getSelectionIndex();
+							if (index >= 0) {
+								String strid = tableDVDVideoformatDetail.getItem(
+										index).getText(0);
+								int id = Integer.parseInt(strid);
+								for (int i = 0; i < localdvd.getVideoFormats()
+										.size(); i++) {
+									VideoFormat o = (VideoFormat) localdvd.getVideoFormats()
+											.get(i);
+									if (o.getVideoFormatId().intValue() == id) {
+										localdvd.getVideoFormats().remove(o);
+										break;
+									}
+								}
+								tableDVDVideoformatDetail.remove(index);
+							}
+						}
+					});
+		}
+		{
+		    tableDVDVideoformatDetail = new Table(groupDVDDetail, SWT.SINGLE
+					| SWT.FULL_SELECTION | SWT.BORDER);
+			//tableMoviesGenresDetail.setHeaderVisible(true);
+			//tableMoviesGenresDetail.setLinesVisible(true);
+			GridData tableDVDVideoformatDetailLData = new GridData();
+			tableDVDVideoformatDetailLData.horizontalAlignment = GridData.FILL;
+			tableDVDVideoformatDetailLData.horizontalSpan = 5;
+			tableDVDVideoformatDetailLData.grabExcessVerticalSpace = true;
+			tableDVDVideoformatDetailLData.verticalAlignment = GridData.FILL;
+			tableDVDVideoformatDetail.setLayoutData(tableDVDVideoformatDetailLData);
+
+			{
+				tableDVDDetail_ColumnID = new TableColumn(
+						tableDVDVideoformatDetail, SWT.CENTER);
+				tableDVDDetail_ColumnID.setWidth(0);
+				tableDVDDetail_ColumnID.setResizable(false);
+			}
+			{
+				tableDVDDetail_ColumnName = new TableColumn(
+						tableDVDVideoformatDetail, SWT.LEFT);
+				tableDVDDetail_ColumnName.setText(l
+						.getString("dvd.groupoverviewdetail.columnvideoformat"));
+				tableDVDDetail_ColumnName.setWidth(200);
+			}
+		}// Edit Genre
+		// Edit Images
+		{
+			compositeDVDEditAudioformat = new Composite(groupDVDDetail,
+					SWT.NONE);
+			GridLayout composite1Layout = new GridLayout();
+			GridData composite1LData = new GridData();
+			composite1LData.horizontalAlignment = GridData.FILL;
+			composite1LData.verticalAlignment = GridData.BEGINNING;
+			compositeDVDEditAudioformat.setLayoutData(composite1LData);
+			composite1Layout.numColumns = 2;
+			compositeDVDEditAudioformat.setLayout(composite1Layout);
+		}
+
+		{
+		    labelDVDAudioformat = new Label(compositeDVDEditAudioformat, SWT.NONE);
+		    labelDVDAudioformat.setText(l
+					.getString("dvd.groupdetail.labelaudioformat"));
+			GridData formData2 = new GridData();
+			formData2.horizontalSpan = 2;
+			formData2.verticalSpan = 1;
+			labelDVDAudioformat.setLayoutData(formData2);
+		}
+		{
+			buttonDVDAddAudioformat = new Button(compositeDVDEditAudioformat,
+					SWT.NONE);
+			buttonDVDAddAudioformat.setText(l.getString("dvd.button.additem"));
+			buttonDVDAddAudioformat.setEnabled(false);
+			GridData text1LData2 = new GridData();
+			text1LData2.heightHint = 20;
+			text1LData2.horizontalSpan = 1;
+			text1LData2.horizontalAlignment = GridData.BEGINNING;
+			buttonDVDAddAudioformat.setLayoutData(text1LData2);
+			buttonDVDAddAudioformat.addSelectionListener(new SelectionAdapter() {
+				public void widgetSelected(SelectionEvent evt) {
+					//open responsible Dialog and insert objects into table
+					/*
+				    DialogMovie dialog = new DialogMovie(getShell(), 0, locale,
+							localmovie, DialogMovie.TYPE_IMAGE);
+					dialog.open();
+
+					tableMoviesImagesDetail.removeAll();
+					TableItem item;
+					for (int i = 0; i < localmovie.getImages().size(); i++) {
+						item = new TableItem(tableMoviesImagesDetail, SWT.NONE);
+						item.setText(new String[] {
+								((Image) localmovie.getImages().get(i))
+										.getImageId()
+										+ "",
+								((Image) localmovie.getImages().get(i))
+										.getImageFileName()
+										+ "" });
+					}
+					*/
+				    //TODO
+				}
+			});
+		}
+		{
+			buttonDVDDeleteAudioformat = new Button(compositeDVDEditAudioformat,
+					SWT.NONE);
+			buttonDVDDeleteAudioformat.setText(l
+					.getString("dvd.button.deleteitem"));
+			buttonDVDDeleteAudioformat.setEnabled(false);
+			GridData text1LData2 = new GridData();
+			text1LData2.horizontalAlignment = GridData.BEGINNING;
+			text1LData2.heightHint = 20;
+			text1LData2.horizontalSpan = 1;
+			buttonDVDDeleteAudioformat.setLayoutData(text1LData2);
+			buttonDVDDeleteAudioformat
+					.addSelectionListener(new SelectionAdapter() {
+						public void widgetSelected(SelectionEvent evt) {
+							//get selected Item
+							//get id from object
+							//search for id in list and delete object
+							//remove table entry
+							int index = tableDVDAudioformatDetail
+									.getSelectionIndex();
+							if (index >= 0) {
+								String strid = tableDVDAudioformatDetail.getItem(
+										index).getText(0);
+								int id = Integer.parseInt(strid);
+								for (int i = 0; i < localdvd.getAudioFormats()
+										.size(); i++) {
+									AudioFormat o = (AudioFormat) localdvd.getAudioFormats()
+											.get(i);
+									if (o.getAudioFormatId().intValue() == id) {
+										localdvd.getAudioFormats().remove(o);
+										break;
+									}
+								}
+								tableDVDAudioformatDetail.remove(index);
+							}
+
+						}
+					});
+		}
+		{
+		    tableDVDAudioformatDetail = new Table(groupDVDDetail, SWT.SINGLE
+					| SWT.FULL_SELECTION | SWT.V_SCROLL | SWT.BORDER);
+			//tableMoviesImagesDetail.setHeaderVisible(true);
+			//tableMoviesImagesDetail.setLinesVisible(true);
+			GridData tableDVDAudioformatDetailLData = new GridData();
+			tableDVDAudioformatDetailLData.horizontalAlignment = GridData.FILL;
+			tableDVDAudioformatDetailLData.horizontalSpan = 5;
+			tableDVDAudioformatDetailLData.grabExcessVerticalSpace = true;
+			tableDVDAudioformatDetailLData.verticalAlignment = GridData.FILL;
+			tableDVDAudioformatDetail.setLayoutData(tableDVDAudioformatDetailLData);
+			{
+				tableDVDDetail_ColumnID = new TableColumn(
+				        tableDVDAudioformatDetail, SWT.CENTER);
+				tableDVDDetail_ColumnID.setWidth(0);
+				tableDVDDetail_ColumnID.setResizable(false);
+			}
+			{
+				tableDVDDetail_ColumnName = new TableColumn(
+				        tableDVDAudioformatDetail, SWT.LEFT);
+				tableDVDDetail_ColumnName.setText(l
+						.getString("dvd.groupoverviewdetail.columnaudioformat"));
+				tableDVDDetail_ColumnName.setWidth(200);
+			}
+		}// Edit Images
     }
 
     

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/dvds.properties
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/dvds.properties	2004-12-13 20:24:11 UTC (rev 241)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/dvds.properties	2004-12-13 20:56:42 UTC (rev 242)
@@ -9,4 +9,17 @@
 dvd.groupoverview.columncondition =Zustand
 
 dvd.groupdetail.label =Detail
-dvd.groupdetail.labelid =Id
\ No newline at end of file
+dvd.groupdetail.labelid =Id
+dvd.groupdetail.labelbarcode =Barcode
+dvd.groupdetail.labellanguages =Sprachen
+dvd.groupdetail.labelSubtitles =Untertitel
+dvd.groupdetail.labelvideoformat =Videoformat
+dvd.groupdetail.labelaudioformat =Audioformat
+
+dvd.button.additem =Hinzuf?gen
+dvd.button.deleteitem = L?schen
+
+dvd.groupoverviewdetail.columnlanguages =Sprache
+dvd.groupoverviewdetail.columnsubtitles =Untertitel
+dvd.groupoverviewdetail.columnvideoformat =Videoformat
+dvd.groupoverviewdetail.columnaudioformat =Audioformat
\ No newline at end of file



From pschneider at sheep.berlios.de  Mon Dec 13 21:59:04 2004
From: pschneider at sheep.berlios.de (Philipp Schneider at BerliOS)
Date: Mon, 13 Dec 2004 21:59:04 +0100
Subject: [Provirent-svn-commit] r243 - in project_src/provirent_hibernate/src/de/hsharz/provirent: . storehouse storehouse/gui
Message-ID: <200412132059.iBDKx4ZZ024949@sheep.berlios.de>

Author: pschneider
Date: 2004-12-13 21:59:03 +0100 (Mon, 13 Dec 2004)
New Revision: 243

Added:
   project_src/provirent_hibernate/src/de/hsharz/provirent/storehouse/
   project_src/provirent_hibernate/src/de/hsharz/provirent/storehouse/gui/
   project_src/provirent_hibernate/src/de/hsharz/provirent/storehouse/gui/NewSWTApp.java
Log:


Added: project_src/provirent_hibernate/src/de/hsharz/provirent/storehouse/gui/NewSWTApp.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/storehouse/gui/NewSWTApp.java	2004-12-13 20:56:42 UTC (rev 242)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/storehouse/gui/NewSWTApp.java	2004-12-13 20:59:03 UTC (rev 243)
@@ -0,0 +1,420 @@
+package de.hsharz.provirent.storehouse.gui;
+
+import java.text.DateFormat;
+import java.util.List;
+
+import org.eclipse.swt.SWT;
+import org.eclipse.swt.custom.StackLayout;
+import org.eclipse.swt.events.SelectionAdapter;
+import org.eclipse.swt.events.SelectionEvent;
+import org.eclipse.swt.graphics.Point;
+import org.eclipse.swt.graphics.Rectangle;
+import org.eclipse.swt.layout.FillLayout;
+import org.eclipse.swt.layout.GridData;
+import org.eclipse.swt.layout.GridLayout;
+import org.eclipse.swt.widgets.Button;
+import org.eclipse.swt.widgets.Composite;
+import org.eclipse.swt.widgets.Display;
+import org.eclipse.swt.widgets.Event;
+import org.eclipse.swt.widgets.Group;
+import org.eclipse.swt.widgets.Label;
+import org.eclipse.swt.widgets.Listener;
+import org.eclipse.swt.widgets.Menu;
+import org.eclipse.swt.widgets.MenuItem;
+import org.eclipse.swt.widgets.Shell;
+import org.eclipse.swt.widgets.Table;
+import org.eclipse.swt.widgets.TableColumn;
+import org.eclipse.swt.widgets.TableItem;
+
+import com.cloudgarden.resource.SWTResourceManager;
+
+import de.hsharz.provirent.objects.MovieOrder;
+import de.hsharz.provirent.objects.OrderItem;
+import de.hsharz.provirent.persistence.Database;
+
+/**
+ * This code was generated using CloudGarden's Jigloo
+ * SWT/Swing GUI Builder, which is free for non-commercial
+ * use. If Jigloo is being used commercially (ie, by a corporation,
+ * company or business for any purpose whatever) then you
+ * should purchase a license for each developer using Jigloo.
+ * Please visit www.cloudgarden.com for details.
+ * Use of Jigloo implies acceptance of these licensing terms.
+ * *************************************
+ * A COMMERCIAL LICENSE HAS NOT BEEN PURCHASED
+ * for this machine, so Jigloo or this code cannot be used legally
+ * for any corporate or commercial purpose.
+ * *************************************
+ */
+public class NewSWTApp extends org.eclipse.swt.widgets.Composite {
+
+	private Menu menu1;
+
+	private MenuItem aboutMenuItem;
+
+	private MenuItem contentsMenuItem;
+
+	private Menu helpMenu;
+
+	private MenuItem helpMenuItem;
+
+	private MenuItem exitMenuItem;
+
+	private MenuItem closeFileMenuItem;
+
+	private MenuItem saveFileMenuItem;
+
+	private MenuItem newFileMenuItem;
+
+	private MenuItem openFileMenuItem;
+
+	private Menu fileMenu;
+
+	private MenuItem fileMenuItem;
+
+	//private Button button1;
+	private Label labelMainHead, labelSendStartHead, labelStartHeader;
+
+	private Button buttonMainMenue;
+
+	private Label labelMainHeader;
+
+	//private Composite composite1 ;
+	//private Composite composite2;
+	private Button buttonReceive, buttonSend;
+
+	//private Composite composite3;
+	private Table tableOrders;
+
+	private TableColumn tableStart_ColumnID, tableStart_ColumnDate,
+			tableStart_ColumnQuantity;
+
+	
+	StackLayout stacklayout;
+	Group[] groups;
+	{
+		//Register as a resource user - SWTResourceManager will
+		//handle the obtaining and disposing of resources
+		SWTResourceManager.registerResourceUser(this);
+	}
+
+	public NewSWTApp(Composite parent, int style) {
+		super(parent, style);
+		initGUI();
+	}
+
+	/**
+	 * Initializes the GUI.
+	 */
+	private void initGUI() {
+		try {
+			this.setSize(new org.eclipse.swt.graphics.Point(400, 300));
+			this.setBackground(SWTResourceManager.getColor(192, 192, 192));
+
+			this.setLayout(new GridLayout());
+			{
+				menu1 = new Menu(getShell(), SWT.BAR);
+				getShell().setMenuBar(menu1);
+				{
+					fileMenuItem = new MenuItem(menu1, SWT.CASCADE);
+					fileMenuItem.setText("File");
+					{
+						fileMenu = new Menu(fileMenuItem);
+						{
+							openFileMenuItem = new MenuItem(fileMenu,
+									SWT.CASCADE);
+							openFileMenuItem.setText("Open");
+							openFileMenuItem.addSelectionListener(new SelectionAdapter() {
+								public void widgetSelected(SelectionEvent evt) {
+									System.out.println("buttonSend .widgetSelected, event="
+										+ evt);
+									
+									stacklayout.topControl = groups[1];
+								}
+							});
+						}
+						{
+							newFileMenuItem = new MenuItem(fileMenu,
+									SWT.CASCADE);
+							newFileMenuItem.setText("New");
+							
+						}
+						{
+							saveFileMenuItem = new MenuItem(fileMenu,
+									SWT.CASCADE);
+							saveFileMenuItem.setText("Save");
+						}
+						{
+							closeFileMenuItem = new MenuItem(fileMenu,
+									SWT.CASCADE);
+							closeFileMenuItem.setText("Close");
+						}
+						{
+							exitMenuItem = new MenuItem(fileMenu, SWT.CASCADE);
+							exitMenuItem.setText("Exit");
+						}
+						fileMenuItem.setMenu(fileMenu);
+					}
+				}
+				{
+					helpMenuItem = new MenuItem(menu1, SWT.CASCADE);
+					helpMenuItem.setText("Help");
+					{
+						helpMenu = new Menu(helpMenuItem);
+						{
+							contentsMenuItem = new MenuItem(helpMenu,
+									SWT.CASCADE);
+							contentsMenuItem.setText("Contents");
+						}
+						{
+							aboutMenuItem = new MenuItem(helpMenu, SWT.CASCADE);
+							aboutMenuItem.setText("About");
+						}
+						helpMenuItem.setMenu(helpMenu);
+					}
+				}
+			}
+
+			final Composite parent = new Composite(this, SWT.NONE);
+			GridData parentLData = new GridData();
+			
+		
+			
+			parentLData.grabExcessHorizontalSpace = true;
+			parentLData.horizontalAlignment = GridData.FILL;
+			parentLData.grabExcessVerticalSpace = true;
+			parentLData.verticalAlignment = GridData.FILL;
+			parentLData.horizontalSpan = 1;
+			parent.setLayoutData(parentLData);
+
+			
+			
+			
+			stacklayout = new StackLayout();
+			parent.setLayout(stacklayout);
+
+			groups = new Group[2];
+
+			{
+				groups[0] = new Group(parent, SWT.NONE);
+
+				GridLayout gridLayout = new GridLayout();
+				gridLayout.numColumns = 2;
+				groups[0].setLayout(gridLayout);
+
+				
+				labelMainHeader = new Label(groups[0], SWT.NONE);
+				labelMainHeader.setText("Bitte w?hlen Sie aus:");
+				labelMainHeader.setFont(SWTResourceManager.getFont("Tahoma",
+						20, 0, false, true));
+				GridData labelLData = new GridData();
+				labelLData.grabExcessHorizontalSpace = true;
+				labelLData.horizontalAlignment = GridData.FILL;
+				labelLData.horizontalSpan = 2;
+				labelMainHeader.setLayoutData(labelLData);
+				
+				
+				
+				
+				buttonSend = new Button(groups[0], SWT.PUSH | SWT.CENTER);
+				buttonSend.setFont(SWTResourceManager.getFont("Tahoma", 20, 0,
+						false, false));
+				buttonSend.setText("send");
+				GridData button1LData = new GridData();
+				button1LData.widthHint = 273;
+				button1LData.heightHint = 170;
+				button1LData.horizontalAlignment = GridData.CENTER;
+				button1LData.grabExcessHorizontalSpace = true;
+				buttonSend.setLayoutData(button1LData);
+
+				buttonSend.addSelectionListener(new SelectionAdapter() {
+					public void widgetSelected(SelectionEvent evt) {
+						System.out.println("buttonSend .widgetSelected, event="
+							+ evt);
+						
+						stacklayout.topControl = groups[1];
+						parent.layout();
+						
+						Thread thread = new Thread(){
+							public void run(){
+							
+							
+								getDisplay().asyncExec(new Runnable(){
+									public void run(){
+										refreshOrderTable();
+									}
+								});
+
+								
+							}
+						};
+						getDisplay().asyncExec(thread);
+						
+					}
+				});
+				
+				
+				
+				buttonReceive = new Button(groups[0], SWT.PUSH | SWT.CENTER);
+				buttonReceive.setFont(SWTResourceManager.getFont("Tahoma", 20,
+						0, false, false));
+				buttonReceive.setText("receive");
+				GridData button2LData = new GridData();
+				button2LData.widthHint = 273;
+				button2LData.heightHint = 170;
+				button2LData.horizontalAlignment = GridData.CENTER;
+				button2LData.grabExcessHorizontalSpace = true;
+				buttonReceive.setLayoutData(button2LData);
+
+			}
+			{
+				groups[1] = new Group(parent, SWT.NONE);
+				GridLayout gridLayout = new GridLayout();
+				gridLayout.numColumns = 2;
+				groups[1].setLayout(gridLayout);
+				
+				
+				labelStartHeader = new Label(groups[1], SWT.NONE);
+				labelStartHeader.setText("Bestellungen:");
+				labelStartHeader.setFont(SWTResourceManager.getFont("Tahoma", 20, 0, false, true));
+				GridData label1LData = new GridData();
+				label1LData.horizontalSpan = 2;
+				labelStartHeader.setLayoutData(label1LData);
+				
+				
+				tableOrders =  new Table(groups[1], SWT.SINGLE | SWT.FULL_SELECTION);
+				tableOrders.setLinesVisible(true);
+				tableOrders.setHeaderVisible(true);
+				
+				
+				tableOrders.setFont(SWTResourceManager.getFont("Tahoma", 20, 0, false, false));
+				
+				GridData table1LData = new GridData();
+				table1LData.horizontalAlignment = GridData.FILL;
+				table1LData.grabExcessHorizontalSpace = true;
+				table1LData.grabExcessVerticalSpace = true;
+				table1LData.horizontalSpan = 2;
+				table1LData.verticalAlignment = GridData.FILL;
+				tableOrders.setLayoutData(table1LData);
+				
+				
+				tableOrders.addSelectionListener(new SelectionAdapter() {
+					public void widgetSelected(SelectionEvent evt) {
+						System.out.println("table1.widgetSelected, event="
+							+ evt);
+						
+					}
+				});
+
+				
+				
+				{
+                    tableStart_ColumnID = new TableColumn(
+                    		tableOrders,
+                            SWT.CENTER);
+                    tableStart_ColumnID.setText("ID");
+                    tableStart_ColumnID.setWidth(50);
+				}
+				{
+                    tableStart_ColumnDate = new TableColumn(
+                    		tableOrders,
+                            SWT.CENTER);
+                    tableStart_ColumnDate.setText("Datum");
+                    tableStart_ColumnDate.setWidth(250);
+				}
+				{
+                    tableStart_ColumnQuantity = new TableColumn(
+                    		tableOrders,
+                            SWT.CENTER);
+                    tableStart_ColumnQuantity .setText("Anzahl");
+                    tableStart_ColumnQuantity .setWidth(100);
+				}
+				
+				buttonMainMenue = new Button(groups[1], SWT.PUSH | SWT.CENTER);
+				buttonMainMenue.setFont(SWTResourceManager.getFont("Tahoma", 20, 0,
+						false, false));
+				buttonMainMenue.setText("Hauptmen?");
+				GridData button1LData = new GridData();
+				button1LData.widthHint = 273;
+				button1LData.heightHint = 50;
+				button1LData.horizontalSpan = 2;
+				button1LData.horizontalAlignment = GridData.CENTER;
+				button1LData.grabExcessHorizontalSpace = true;
+				buttonMainMenue.setLayoutData(button1LData);
+
+				buttonMainMenue.addSelectionListener(new SelectionAdapter() {
+					public void widgetSelected(SelectionEvent evt) {
+						System.out.println("buttonSend .widgetSelected, event="
+							+ evt);
+						
+						stacklayout.topControl = groups[0];
+						parent.layout();
+						
+					}
+				});
+				
+				
+			}
+			stacklayout.topControl = groups[0];
+
+			
+			
+			this.layout();
+		} catch (Exception e) {
+			e.printStackTrace();
+		}
+	}
+
+	/**
+	 * Auto-generated main method to display this 
+	 * org.eclipse.swt.widgets.Composite inside a new Shell.
+	 */
+	public static void main(String[] args) {
+		Display display = Display.getDefault();
+		Shell shell = new Shell(display);
+		NewSWTApp inst = new NewSWTApp(shell, SWT.NULL);
+		Point size = inst.getSize();
+		shell.setLayout(new FillLayout());
+		shell.layout();
+		if (size.x == 0 && size.y == 0) {
+			inst.pack();
+			shell.pack();
+		} else {
+			Rectangle shellBounds = shell.computeTrim(0, 0, size.x, size.y);
+			if (shell.getMenuBar() != null)
+				shellBounds.height -= 22;
+			shell.setSize(shellBounds.width, shellBounds.height);
+		}
+		shell.open();
+		while (!shell.isDisposed()) {
+			if (!display.readAndDispatch())
+				display.sleep();
+		}
+	}
+
+	
+	private void refreshOrderTable(){
+		List orders = Database.getOrder("");
+		System.out.println("List: "+orders);
+		
+		TableItem item;
+		for (int i = 0; i < orders.size(); i++) {
+			MovieOrder o = (MovieOrder)orders.get(i);
+			
+			if(o.getMovieOrderItems().size() > 0){
+				item = new TableItem(tableOrders, SWT.NONE);
+				String date = DateFormat.getDateInstance(DateFormat.LONG).format(((OrderItem)o.getMovieOrderItems().get(0)).getOrderTime().getTime());
+				item.setText(new String[]{o.getMovieOrderId()+"",date,o.getMovieOrderItems().size()+""  });
+			}else {
+				continue;
+			}
+			
+			
+		}
+		
+
+
+		
+	}
+	
+}
\ No newline at end of file



From sforstner at sheep.berlios.de  Mon Dec 13 22:32:39 2004
From: sforstner at sheep.berlios.de (Stefan at BerliOS)
Date: Mon, 13 Dec 2004 22:32:39 +0100
Subject: [Provirent-svn-commit] r244 - project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui
Message-ID: <200412132132.iBDLWdVV026439@sheep.berlios.de>

Author: sforstner
Date: 2004-12-13 22:32:37 +0100 (Mon, 13 Dec 2004)
New Revision: 244

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeOrder.java
Log:


Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeOrder.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeOrder.java	2004-12-13 20:59:03 UTC (rev 243)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeOrder.java	2004-12-13 21:32:37 UTC (rev 244)
@@ -446,7 +446,7 @@
     private void initOrderGroupDetail() {
         groupOrderDetail = new Group(sashFormOrder, SWT.NONE);
         GridLayout groupOrderDetailLayout = new GridLayout();
-        groupOrderDetailLayout.marginHeight = 25;
+        groupOrderDetailLayout.marginHeight = 10;
         groupOrderDetailLayout.numColumns = 4;
         groupOrderDetailLayout.verticalSpacing = 15;
         groupOrderDetail.setText(l.getString("Order.groupdetail.label"));
@@ -477,7 +477,7 @@
     private void initOrderItemDetails() {
         groupOrderItemDetails = new Group(sashFormOrderDetail, SWT.NONE);
         GridLayout groupOrderDetailLayout = new GridLayout();
-        groupOrderDetailLayout.marginHeight = 25;
+        groupOrderDetailLayout.marginHeight = 10;
         groupOrderDetailLayout.numColumns = 4;
         groupOrderDetailLayout.verticalSpacing = 15;
         groupOrderItemDetails.setText(l.getString("Order.groupdetail.orderitems.label"));
@@ -736,7 +736,8 @@
                    
 					//object speichern
 					// Fehlerbehandlung
-					aktMovieOrder.getMovieOrderItems().remove(aktOrderItem);   
+					aktMovieOrder.getMovieOrderItems().remove(aktOrderItem);
+					Database.deleteObject(aktOrderItem);
 					Database.updateObject(aktMovieOrder);
 					
 					//?bersichtsTabelle aktualisieren



From pschneider at sheep.berlios.de  Mon Dec 13 23:32:58 2004
From: pschneider at sheep.berlios.de (Philipp Schneider at BerliOS)
Date: Mon, 13 Dec 2004 23:32:58 +0100
Subject: [Provirent-svn-commit] r245 - in project_src/provirent_hibernate/src: com/cloudgarden/resource de/hsharz/provirent/management/gui de/hsharz/provirent/storehouse/gui test/provirent/hibernate
Message-ID: <200412132232.iBDMWwvZ028966@sheep.berlios.de>

Author: pschneider
Date: 2004-12-13 23:32:57 +0100 (Mon, 13 Dec 2004)
New Revision: 245

Modified:
   project_src/provirent_hibernate/src/com/cloudgarden/resource/SWTResourceManager.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeDVD.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/DialogMovie.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/storehouse/gui/NewSWTApp.java
   project_src/provirent_hibernate/src/test/provirent/hibernate/TestMovieOrder.java
Log:


Modified: project_src/provirent_hibernate/src/com/cloudgarden/resource/SWTResourceManager.java
===================================================================
--- project_src/provirent_hibernate/src/com/cloudgarden/resource/SWTResourceManager.java	2004-12-13 21:32:37 UTC (rev 244)
+++ project_src/provirent_hibernate/src/com/cloudgarden/resource/SWTResourceManager.java	2004-12-13 22:32:57 UTC (rev 245)
@@ -15,7 +15,7 @@
 import org.eclipse.swt.widgets.Display;
 import org.eclipse.swt.widgets.Widget;
 
-/** 
+/**
  * Class to manage SWT resources (Font, Color, Image and Cursor)
  * There are no restrictions on the use of this code.
  */

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeDVD.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeDVD.java	2004-12-13 21:32:37 UTC (rev 244)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeDVD.java	2004-12-13 22:32:57 UTC (rev 245)
@@ -467,7 +467,7 @@
             labelDVDMovie.setLayoutData(labelDVDMovieLData);
         }
         {
-            comboDVDMovie = new Combo(groupDVDDetail, SWT.NONE);
+            comboDVDMovie = new Combo(groupDVDDetail, SWT.READ_ONLY);
             comboDVDMovie.setText("comboDVDMovie");
             GridData combo1LData1 = new GridData();
             combo1LData1.horizontalAlignment = GridData.FILL;
@@ -486,7 +486,7 @@
             labelDVDPayment.setLayoutData(labelDVDPaymentLData);
         }
         {
-            comboDVDPayment = new Combo(groupDVDDetail, SWT.NONE);
+            comboDVDPayment = new Combo(groupDVDDetail, SWT.READ_ONLY);
             comboDVDPayment.setText("comboDVDPayment");
             GridData combo1LData = new GridData();
             combo1LData.horizontalAlignment = GridData.FILL;
@@ -505,7 +505,7 @@
             labelDVDStatus.setLayoutData(labelDVDStatusLData);
         }
         {
-            comboDVDStatus = new Combo(groupDVDDetail, SWT.NONE);
+            comboDVDStatus = new Combo(groupDVDDetail, SWT.READ_ONLY);
             comboDVDStatus.setText("comboDVDStatus");
             GridData combo1LData2 = new GridData();
             combo1LData2.horizontalSpan = 5;
@@ -525,7 +525,7 @@
             labelDVDCondition.setLayoutData(labelDVDConditionLData);
         }
         {
-            comboDVDCondition = new Combo(groupDVDDetail, SWT.NONE);
+            comboDVDCondition = new Combo(groupDVDDetail, SWT.READ_ONLY);
             comboDVDCondition.setText("comboDVDCondition");
             GridData combo1LData3 = new GridData();
             combo1LData3.horizontalAlignment = GridData.FILL;

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/DialogMovie.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/DialogMovie.java	2004-12-13 21:32:37 UTC (rev 244)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/DialogMovie.java	2004-12-13 22:32:57 UTC (rev 245)
@@ -30,6 +30,21 @@
 import de.hsharz.provirent.objects.Movie;
 import de.hsharz.provirent.persistence.Database;
 
+
+/**
+* This code was generated using CloudGarden's Jigloo
+* SWT/Swing GUI Builder, which is free for non-commercial
+* use. If Jigloo is being used commercially (ie, by a corporation,
+* company or business for any purpose whatever) then you
+* should purchase a license for each developer using Jigloo.
+* Please visit www.cloudgarden.com for details.
+* Use of Jigloo implies acceptance of these licensing terms.
+* *************************************
+* A COMMERCIAL LICENSE HAS NOT BEEN PURCHASED
+* for this machine, so Jigloo or this code cannot be used legally
+* for any corporate or commercial purpose.
+* *************************************
+*/
 public class DialogMovie extends org.eclipse.swt.widgets.Dialog {
     /**
      * Logger for this class

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/storehouse/gui/NewSWTApp.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/storehouse/gui/NewSWTApp.java	2004-12-13 21:32:37 UTC (rev 244)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/storehouse/gui/NewSWTApp.java	2004-12-13 22:32:57 UTC (rev 245)
@@ -73,10 +73,10 @@
 	private MenuItem fileMenuItem;
 
 	//private Button button1;
-	private Label labelMainHead, labelSendStartHead, labelStartHeader;
+	private Label labelMainHead, labelSendStartHead, labelStartHeader,labelSendDetailsHeader;
+	private Label labelSendDetailsCustomer,labelSendDetailsCustomerD,labelSendDetailsDate,labelSendDetailsDateD;
+	private Button buttonMainMenue,buttonPrintBill,buttonPrintLabel;
 
-	private Button buttonMainMenue;
-
 	private Label labelMainHeader;
 
 	//private Composite composite1 ;
@@ -84,11 +84,12 @@
 	private Button buttonReceive, buttonSend;
 
 	//private Composite composite3;
-	private Table tableOrders;
+	private Table tableOrders,tableOrderDetails;
 
 	private TableColumn tableStart_ColumnID, tableStart_ColumnDate,
 			tableStart_ColumnQuantity;
 
+	private TableColumn tableOrderDetails_ColumnDvdBarcode, tableOrderDetails_ColumnDvdName, tableOrderDetails_ColumnID;
 	
 	StackLayout stacklayout;
 	Group[] groups;
@@ -108,7 +109,7 @@
 	 */
 	private void initGUI() {
 		try {
-			this.setSize(new org.eclipse.swt.graphics.Point(400, 300));
+			this.setSize(new org.eclipse.swt.graphics.Point(800, 600));
 			this.setBackground(SWTResourceManager.getColor(192, 192, 192));
 
 			this.setLayout(new GridLayout());
@@ -193,7 +194,7 @@
 			stacklayout = new StackLayout();
 			parent.setLayout(stacklayout);
 
-			groups = new Group[2];
+			groups = new Group[3];
 
 			{
 				groups[0] = new Group(parent, SWT.NONE);
@@ -302,7 +303,14 @@
 					public void widgetSelected(SelectionEvent evt) {
 						System.out.println("table1.widgetSelected, event="
 							+ evt);
+	
 						
+						
+
+
+						refreshOrderDetails(tableOrders.getItem(tableOrders.getSelectionIndex()).getText(0));
+						stacklayout.topControl = groups[2];
+						parent.layout();
 					}
 				});
 
@@ -352,9 +360,146 @@
 						
 					}
 				});
+
+			}
+			
+			{
 				
+				// OrderDetails
+				groups[2] = new Group(parent, SWT.NONE);
+				GridLayout gridLayout = new GridLayout();
+				gridLayout.numColumns = 2;
+				groups[2].setLayout(gridLayout);
 				
+				
+				labelSendDetailsHeader = new Label(groups[2], SWT.NONE);
+				labelSendDetailsHeader.setText("Bestellung:");
+				labelSendDetailsHeader.setFont(SWTResourceManager.getFont("Tahoma", 20, 0, false, true));
+				GridData labelLData = new GridData();
+				labelLData.grabExcessHorizontalSpace = true;
+				labelLData.horizontalAlignment = GridData.FILL;
+				labelLData.horizontalSpan = 2;
+				labelSendDetailsHeader.setLayoutData(labelLData);
+				
+				
+				
+				labelSendDetailsCustomer = new Label(groups[2], SWT.NONE);
+				labelSendDetailsCustomer.setText("Kundennummer:");
+				labelSendDetailsCustomer.setFont(SWTResourceManager.getFont("Tahoma", 15, 0, false, true));
+
+				labelSendDetailsCustomerD = new Label(groups[2], SWT.NONE);
+				labelSendDetailsCustomerD.setText("");
+				labelSendDetailsCustomerD.setFont(SWTResourceManager.getFont("Tahoma", 15, 0, false, false));
+
+				labelSendDetailsDate = new Label(groups[2], SWT.NONE);
+				labelSendDetailsDate.setText("Bestelldatum:");
+				labelSendDetailsDate.setFont(SWTResourceManager.getFont("Tahoma", 15, 0, false, true));
+
+				labelSendDetailsDateD = new Label(groups[2], SWT.NONE);
+				labelSendDetailsDateD.setText("");
+				labelSendDetailsDateD.setFont(SWTResourceManager.getFont("Tahoma", 15, 0, false, false));
+
+				
+				tableOrderDetails =  new Table(groups[2], SWT.SINGLE | SWT.FULL_SELECTION);
+				tableOrderDetails.setLinesVisible(true);
+				tableOrderDetails.setHeaderVisible(true);
+				
+				
+				tableOrderDetails.setFont(SWTResourceManager.getFont("Tahoma", 20, 0, false, false));
+				
+				GridData table1LData = new GridData();
+				table1LData.horizontalAlignment = GridData.FILL;
+				table1LData.grabExcessHorizontalSpace = true;
+				table1LData.grabExcessVerticalSpace = true;
+				table1LData.horizontalSpan = 2;
+				table1LData.verticalAlignment = GridData.FILL;
+				tableOrderDetails.setLayoutData(table1LData);
+				
+				
+				tableOrderDetails.addSelectionListener(new SelectionAdapter() {
+					public void widgetSelected(SelectionEvent evt) {
+						System.out.println("table1.widgetSelected, event="
+							+ evt);
+						
+					}
+				});
+
+				
+				{
+                    tableOrderDetails_ColumnID = new TableColumn(
+                    		tableOrderDetails,
+                            SWT.CENTER);
+                    tableOrderDetails_ColumnID.setText("ID");
+                    tableOrderDetails_ColumnID.setWidth(50);
+				}
+				{
+					tableOrderDetails_ColumnDvdName = new TableColumn(
+                    		tableOrderDetails,
+                            SWT.CENTER);
+					tableOrderDetails_ColumnDvdName.setText("Name");
+					tableOrderDetails_ColumnDvdName.setWidth(300);
+				}
+				{
+					tableOrderDetails_ColumnDvdBarcode = new TableColumn(
+                    		tableOrderDetails,
+                            SWT.CENTER);
+					tableOrderDetails_ColumnDvdBarcode.setText("Barcode");
+					tableOrderDetails_ColumnDvdBarcode.setWidth(200);
+				}
+				
+				buttonPrintBill = new Button(groups[2], SWT.PUSH | SWT.CENTER);
+				buttonPrintBill.setFont(SWTResourceManager.getFont("Tahoma", 20, 0,
+						false, false));
+				buttonPrintBill.setText("Drucke Rechnung");
+				GridData button5LData = new GridData();
+				button5LData.widthHint = 273;
+				button5LData.heightHint = 50;
+				button5LData.horizontalAlignment = GridData.CENTER;
+				button5LData.grabExcessHorizontalSpace = true;
+				buttonPrintBill.setLayoutData(button5LData);
+				
+				
+				buttonPrintLabel = new Button(groups[2], SWT.PUSH | SWT.CENTER);
+				buttonPrintLabel.setFont(SWTResourceManager.getFont("Tahoma", 20, 0,
+						false, false));
+				buttonPrintLabel.setText("Drucke Rechnung");
+				GridData button4LData = new GridData();
+				button4LData.widthHint = 273;
+				button4LData.heightHint = 50;
+				button4LData.horizontalAlignment = GridData.CENTER;
+				button4LData.grabExcessHorizontalSpace = true;
+				buttonPrintLabel.setLayoutData(button4LData);
+				
+			
+			
+				//back to the mainmenue
+				buttonMainMenue = new Button(groups[2], SWT.PUSH | SWT.CENTER);
+				buttonMainMenue.setFont(SWTResourceManager.getFont("Tahoma", 20, 0,
+						false, false));
+				buttonMainMenue.setText("Hauptmen?");
+				GridData button1LData = new GridData();
+				button1LData.widthHint = 273;
+				button1LData.heightHint = 50;
+				button1LData.horizontalSpan = 2;
+				button1LData.horizontalAlignment = GridData.CENTER;
+				button1LData.grabExcessHorizontalSpace = true;
+				buttonMainMenue.setLayoutData(button1LData);
+
+				buttonMainMenue.addSelectionListener(new SelectionAdapter() {
+					public void widgetSelected(SelectionEvent evt) {
+						System.out.println("buttonSend .widgetSelected, event="
+							+ evt);
+						
+						stacklayout.topControl = groups[0];
+						parent.layout();
+						
+					}
+				});
+				
 			}
+			
+			
+			
 			stacklayout.topControl = groups[0];
 
 			
@@ -397,6 +542,7 @@
 		List orders = Database.getOrder("");
 		System.out.println("List: "+orders);
 		
+		tableOrders.removeAll();
 		TableItem item;
 		for (int i = 0; i < orders.size(); i++) {
 			MovieOrder o = (MovieOrder)orders.get(i);
@@ -405,16 +551,30 @@
 				item = new TableItem(tableOrders, SWT.NONE);
 				String date = DateFormat.getDateInstance(DateFormat.LONG).format(((OrderItem)o.getMovieOrderItems().get(0)).getOrderTime().getTime());
 				item.setText(new String[]{o.getMovieOrderId()+"",date,o.getMovieOrderItems().size()+""  });
-			}else {
-				continue;
 			}
+					}
+	}
+
+	private void refreshOrderDetails(final String orderid){
+		
+		MovieOrder order = Database.getSingleOrder(Integer.parseInt(orderid));
+		
+		
+		labelSendDetailsCustomerD.setText(order.getCustomer().getCustomerId()+"");
+		labelSendDetailsCustomerD.redraw();
+		if (order.getMovieOrderItems().size() > 0){
+			labelSendDetailsDateD.setText(DateFormat.getDateInstance(DateFormat.LONG).format(((OrderItem)order.getMovieOrderItems().get(0)).getOrderTime().getTime()));
+			labelSendDetailsDateD.redraw();
+		}
+		tableOrderDetails.removeAll();
+		
+		TableItem item ;
+		for (int i = 0; i < order.getMovieOrderItems().size(); i++) {
+			item = new TableItem(tableOrderDetails, SWT.NONE);
 			
+			item.setText(new String[]{((OrderItem)order.getMovieOrderItems().get(i)).getOrderItemId()+"",  ((OrderItem)order.getMovieOrderItems().get(i)).getDvd().getMovie().getTitle(), ((OrderItem)order.getMovieOrderItems().get(i)).getDvd().getBarcode()});
 			
 		}
 		
-
-
-		
 	}
-	
 }
\ No newline at end of file

Modified: project_src/provirent_hibernate/src/test/provirent/hibernate/TestMovieOrder.java
===================================================================
--- project_src/provirent_hibernate/src/test/provirent/hibernate/TestMovieOrder.java	2004-12-13 21:32:37 UTC (rev 244)
+++ project_src/provirent_hibernate/src/test/provirent/hibernate/TestMovieOrder.java	2004-12-13 22:32:57 UTC (rev 245)
@@ -120,14 +120,14 @@
                 List orderItems = new ArrayList();
 
                 
-                for (int j = 0; j < 3; j++) {
+                for (int j = 0; j < dvds.size(); j++) {
 
                     OrderItem orderItem = new OrderItem();
                     orderItem.setCustomer(customer);
                     orderItem.setDuration(2);
 
                     
-                    Dvd dvd = (Dvd)dvds.get(j % dvds.size());
+                    Dvd dvd = (Dvd)dvds.get(j);
                     orderItem.setDvd(dvd);
                     
                     orderItem.setOrderTime(Calendar.getInstance());



From sforstner at sheep.berlios.de  Tue Dec 14 19:17:52 2004
From: sforstner at sheep.berlios.de (Stefan at BerliOS)
Date: Tue, 14 Dec 2004 19:17:52 +0100
Subject: [Provirent-svn-commit] r246 - in project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui: . language
Message-ID: <200412141817.iBEIHqLS010692@sheep.berlios.de>

Author: sforstner
Date: 2004-12-14 19:17:51 +0100 (Tue, 14 Dec 2004)
New Revision: 246

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeOrder.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/order.properties
Log:


Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeOrder.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeOrder.java	2004-12-13 22:32:57 UTC (rev 245)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeOrder.java	2004-12-14 18:17:51 UTC (rev 246)
@@ -737,8 +737,8 @@
 					//object speichern
 					// Fehlerbehandlung
 					aktMovieOrder.getMovieOrderItems().remove(aktOrderItem);
+					Database.updateObject(aktMovieOrder);
 					Database.deleteObject(aktOrderItem);
-					Database.updateObject(aktMovieOrder);
 					
 					//?bersichtsTabelle aktualisieren
 					refreshOrderItemTable(aktMovieOrder.getMovieOrderId().toString());
@@ -928,6 +928,7 @@
                     //?bersichtsTabelle aktualisieren
                     refreshOrderTable(textOrderSearch.getText());
                     
+                    
                     //Detailansicht leeren
                     textOrderId.setText("");
                     textOrderCustomerName.setText("");
@@ -1112,12 +1113,8 @@
                             + textOrderSearch.getText() + ") - start");
                 }
                 
-                /* TODO
-                try {
-                    refreshOrderTable(textOrderSearch.getText());
-                } catch (DataBaseException e) {
-                    logger.error("focusLost(FocusEvent)", e);
-                }*/
+                
+                refreshOrderTable(textOrderSearch.getText());
 
                 if (logger.isDebugEnabled()) {
                     logger.debug("focusLost(FocusEvent) - end");
@@ -1132,12 +1129,8 @@
                             + textOrderSearch.getText() + ") - start");
                 }
                 
-                /* TODO
-                try {
-                    refreshOrderTable(textOrderSearch.getText());
-                } catch (DataBaseException e1) {
-                    logger.error("handleEvent(Event)", e1);
-                }*/
+                
+                refreshOrderTable(textOrderSearch.getText());
 
                 if (logger.isDebugEnabled()) {
                     logger.debug("handleEvent(Event) - end");
@@ -1178,6 +1171,7 @@
                 //Detailansicht aktualisiert werden
                 String tabItem = tableOrder.getItem(index).getText(0);
                 refreshOrderDetails(tabItem);
+                refreshOrderItemDetails("");
                 refreshOrderItemTable(tabItem);
 
             }
@@ -1253,79 +1247,94 @@
      * @param text
      */
     private void refreshOrderItemDetails(final String id) {
-        try {
-            //since we only can get a String value from the table, we
-            //need to convert this
-            aktOrderItem = (OrderItem) Database.getSingleObject(OrderItem.class, Integer.parseInt(id));
-
-            if (aktOrderItem == null) {
-
-                /*
-                 * 
-                 * @TODO Statusbar aktualiseren
-                 */
-                return;
-            }
-        } catch (Exception e) {
-            // TODO: handle exception
-            //id ist keine Zahl
-            return;
-        }
-
-        textOrderItemId.setText(aktOrderItem.getOrderItemId() + "");
-        textOrderItemDvdId.setText(aktOrderItem.getDvd().getDvdId() + "");
-        textOrderItemMovieName.setText(aktOrderItem.getDvd().getMovie().getTitle() + "");
-        Calendar cal = aktOrderItem.getOrderTime();
-        if (cal == null) {
-            textOrderItemOrderDate.setText("");
+        if (id == "") {
+//          Detailansicht leeren
+			textOrderItemId.setText("");
+			textOrderItemDvdId.setText("");
+			textOrderItemMovieName.setText("");
+			textOrderItemOrderDate.setText("");
+			textOrderItemSenderDate.setText("");
+			textOrderItemReceivingDate.setText("");
+			textOrderItemConditionSend.setText("");
+			textOrderItemConditionReceiving.setText("");
+			textOrderItemDuration.setText("");
+			textOrderItemPayment.setText("");
         } else {
-            textOrderItemOrderDate.setText(DateFormat
-                    .getDateInstance(DateFormat.MEDIUM).format(
-                            cal.getTime()));
+        
+	        try {
+	            //since we only can get a String value from the table, we
+	            //need to convert this
+	            aktOrderItem = (OrderItem) Database.getSingleObject(OrderItem.class, Integer.parseInt(id));
+	
+	            if (aktOrderItem == null) {
+	
+	                /*
+	                 * 
+	                 * @TODO Statusbar aktualiseren
+	                 */
+	                return;
+	            }
+	        } catch (Exception e) {
+	            // TODO: handle exception
+	            //id ist keine Zahl
+	            return;
+	        }
+	
+	        textOrderItemId.setText(aktOrderItem.getOrderItemId() + "");
+	        textOrderItemDvdId.setText(aktOrderItem.getDvd().getDvdId() + "");
+	        textOrderItemMovieName.setText(aktOrderItem.getDvd().getMovie().getTitle() + "");
+	        Calendar cal = aktOrderItem.getOrderTime();
+	        if (cal == null) {
+	            textOrderItemOrderDate.setText("");
+	        } else {
+	            textOrderItemOrderDate.setText(DateFormat
+	                    .getDateInstance(DateFormat.MEDIUM).format(
+	                            cal.getTime()));
+	        }
+	        cal = aktOrderItem.getSenderTime();
+	        if (cal == null) {
+	            textOrderItemSenderDate.setText("");
+	        } else {
+	            textOrderItemSenderDate.setText(DateFormat
+	                    .getDateInstance(DateFormat.MEDIUM).format(
+	                            cal.getTime()));
+	        }
+	        cal = aktOrderItem.getReceivingTime();
+	        if (cal == null) {
+	            textOrderItemReceivingDate.setText("");
+	        } else {
+	            textOrderItemReceivingDate.setText(DateFormat
+	                    .getDateInstance(DateFormat.MEDIUM).format(
+	                            cal.getTime()));
+	        }
+	        Condition con = aktOrderItem.getConditionSend();
+	        if(con == null) {
+	            textOrderItemConditionSend.setText("");
+	        } else {
+	            textOrderItemConditionSend.setText(con.getConditionName());
+	        }
+	        con = aktOrderItem.getConditionSend();
+	        if(con == null) {
+	            textOrderItemConditionReceiving.setText("");
+	        } else {
+	            textOrderItemConditionReceiving.setText(con.getConditionName());
+	        }
+	        textOrderItemDuration.setText(aktOrderItem.getDuration() + "");
+	        Payment pay = aktOrderItem.getPayment();
+	        if (pay == null) {
+	            textOrderItemPayment.setText("");
+	        } else {
+	            textOrderItemPayment.setText(pay.getPaymentCategory().getName());
+	        }
+	        
+	        
+	
+	        buttonOrderItemDelete.setEnabled(true);
+	
+	        //Mode auf view setzen
+	        mode_Order = ManagementGui.MODE_VIEW;
         }
-        cal = aktOrderItem.getSenderTime();
-        if (cal == null) {
-            textOrderItemSenderDate.setText("");
-        } else {
-            textOrderItemSenderDate.setText(DateFormat
-                    .getDateInstance(DateFormat.MEDIUM).format(
-                            cal.getTime()));
-        }
-        cal = aktOrderItem.getReceivingTime();
-        if (cal == null) {
-            textOrderItemReceivingDate.setText("");
-        } else {
-            textOrderItemReceivingDate.setText(DateFormat
-                    .getDateInstance(DateFormat.MEDIUM).format(
-                            cal.getTime()));
-        }
-        Condition con = aktOrderItem.getConditionSend();
-        if(con == null) {
-            textOrderItemConditionSend.setText("");
-        } else {
-            textOrderItemConditionSend.setText(con.getConditionName());
-        }
-        con = aktOrderItem.getConditionSend();
-        if(con == null) {
-            textOrderItemConditionReceiving.setText("");
-        } else {
-            textOrderItemConditionReceiving.setText(con.getConditionName());
-        }
-        textOrderItemDuration.setText(aktOrderItem.getDuration() + "");
-        Payment pay = aktOrderItem.getPayment();
-        if (pay == null) {
-            textOrderItemPayment.setText("");
-        } else {
-            textOrderItemPayment.setText(pay.getPaymentCategory().getName());
-        }
         
-        
-
-        buttonOrderItemDelete.setEnabled(true);
-
-        //Mode auf view setzen
-        mode_Order = ManagementGui.MODE_VIEW;
-        
     }
 
     /* (non-Javadoc)

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/order.properties
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/order.properties	2004-12-13 22:32:57 UTC (rev 245)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/order.properties	2004-12-14 18:17:51 UTC (rev 246)
@@ -41,46 +41,13 @@
 Order.groupdetail.orderitems.conditionreceiving=Zustand nachher
 Order.groupdetail.orderitems.duration=Verleihdauer
 Order.groupdetail.orderitems.payment=Preisklasse
-Order.groupdetail.idlabel=Benutzer ID
-Order.groupdetail.usernamelabel=Benutzername
-Order.groupdetail.lastnamelabel=Nachname
-Order.groupdetail.firstnamelabel=Vorname
-Order.groupdetail.middlenamelabel=2.Vorname(n)
-Order.groupdetail.emaillabel=Emailadresse
-Order.groupdetail.birthdaylabel=Geburtsdatum
-Order.groupdetail.questionlabel=Geheime Frage
-Order.groupdetail.answerlabel=Geheime Antwort
-Order.groupdetail.salutationlabel=Anrede
-Order.groupdetail.titlelabel=Titel
-Order.groupdetail.streetlabel=Strasse u. Nummer
-Order.groupdetail.citylabel=Stadt
-Order.groupdetail.zipcodelabel=Zip Code
-Order.groupdetail.countrylabel=Land
-Order.groupdetail.passwordlabel=Passwort
-Order.groupdetail.regdatelabel=Registrierdatum
-Order.groupdetail.registrationdatebuttonchange=?ndern
-Order.groupdetail.registrationdatebuttonfinish=Fertig
-Order.groupdetail.registrationdate.dialog.title=Registrierungstag w?hlen
-Order.groupdetail.birthdaybuttonchange=?ndern
-Order.groupdetail.birthdaybuttonfinish=Fertig
-Order.groupdetail.birthday.dialog.title=Geburtstag w?hlen
+Order.groupdetail.orderitems.senderdatebuttonchange=?ndern
+Order.groupdetail.orderitems.senderdatebuttonfinish=Fertig
+Order.groupdetail.orderitems.senderdate.dialog.title=Versendet am
+Order.groupdetail.orderitems.receivingdatebuttonchange=?ndern
+Order.groupdetail.orderitems.receivingdatebuttonfinish=Fertig
+Order.groupdetail.orderitems.receivingdate.dialog.title=Erhalten am
 
-Order.groupdetail.savebutton.warn.noitems.title=Datensatz speichern
-Order.groupdetail.savebutton.warn.noitems.msg=Der Datensatz kann nicht gespeichert werden, da folgende Werte fehlen:\n
-Order.groupdetail.savebutton.warn.nousername=Username
-Order.groupdetail.savebutton.warn.nolastname=Nachname
-Order.groupdetail.savebutton.warn.nofirstname=Vorname
-Order.groupdetail.savebutton.warn.nostreet=Strasse
-Order.groupdetail.savebutton.warn.nonumber=Hausnummer
-Order.groupdetail.savebutton.warn.nozipcode=PLZ
-Order.groupdetail.savebutton.warn.nocity=Stadt
-Order.groupdetail.savebutton.warn.nocountry=Land
-Order.groupdetail.savebutton.warn.noemail=Emailadresse
-Order.groupdetail.savebutton.warn.noquestion=Geheimefrage
-Order.groupdetail.savebutton.warn.noanswer=Geheimeantwort
-Order.groupdetail.savebutton.warn.noregistrationdate=Registrierungsdatum
-Order.groupdetail.savebutton.warn.nobirthday=Geburtstag
-
 Order.groupdetail.savebutton.newok=Speichern des neuen Benutzers erfolgreich.
 Order.groupdetail.savebutton.editok=?ndern des Benutzers erfolgreich.
 



From rgriesch at sheep.berlios.de  Tue Dec 14 19:42:23 2004
From: rgriesch at sheep.berlios.de (Remo Griesch at BerliOS)
Date: Tue, 14 Dec 2004 19:42:23 +0100
Subject: [Provirent-svn-commit] r247 - in project_src/provirent_hibernate/src/de/hsharz/provirent: management/gui management/gui/language persistence
Message-ID: <200412141842.iBEIgNDv011891@sheep.berlios.de>

Author: rgriesch
Date: 2004-12-14 19:42:22 +0100 (Tue, 14 Dec 2004)
New Revision: 247

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeDVD.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/dvds.properties
   project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java
Log:
Composite DVD  - erweitert

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeDVD.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeDVD.java	2004-12-14 18:17:51 UTC (rev 246)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeDVD.java	2004-12-14 18:42:22 UTC (rev 247)
@@ -1,5 +1,10 @@
 package de.hsharz.provirent.management.gui;
 
+import java.text.DateFormat;
+import java.text.MessageFormat;
+import java.text.ParseException;
+import java.util.ArrayList;
+import java.util.Calendar;
 import java.util.Locale;
 import java.util.PropertyResourceBundle;
 import java.util.ResourceBundle;
@@ -32,7 +37,11 @@
 
 import com.cloudgarden.resource.SWTResourceManager;
 
+import de.hsharz.provirent.objects.Actor;
+import de.hsharz.provirent.objects.Director;
 import de.hsharz.provirent.objects.Dvd;
+import de.hsharz.provirent.objects.Genre;
+import de.hsharz.provirent.objects.Image;
 import de.hsharz.provirent.objects.Language;
 import de.hsharz.provirent.objects.Subtitle;
 import de.hsharz.provirent.objects.VideoFormat;
@@ -41,6 +50,7 @@
 import de.hsharz.provirent.objects.PaymentCategory;
 import de.hsharz.provirent.objects.Condition;
 import de.hsharz.provirent.objects.Status;
+import de.hsharz.provirent.persistence.DataBaseException;
 import de.hsharz.provirent.persistence.Database;
 
 /**
@@ -142,6 +152,8 @@
     
     private Composite compositeDVDEditAudioformat;
     
+    private Composite compositeButtons;
+    
     private Button buttonDVDAddLanguages;
     
     private Button buttonDVDDeleteLanguages;
@@ -158,6 +170,18 @@
     
     private Button buttonDVDDeleteAudioformat;
     
+    private Button buttonDVDNew;
+    
+    private Button buttonDVDDelete;
+    
+    private Button buttonDVDEdit;
+    
+    private Button buttonDVDCancel;
+    
+    private Button buttonDVDSave;
+    
+    private Button buttonDVDFill;
+    
     private SashForm sashForm1;
     
     private int mode_dvd;
@@ -265,7 +289,7 @@
             // init the rest of the layout
             initDVDOverview();
             initDVDDetail();
-            //refreshDVDOverviewTable(textDVDSearch.getText());
+            refreshDVDOverviewTable(textDVDSearch.getText());
         }
 
         this.layout();
@@ -477,6 +501,7 @@
             for(int i=0;i<l.size();i++)  {
                 comboDVDMovie.add(((Movie)l.get(i)).getTitle(),i);
             }
+            comboDVDMovie.setEnabled(false);
         }
         {
             labelDVDPayment = new Label(groupDVDDetail, SWT.NONE);
@@ -496,6 +521,7 @@
             for(int i=0;i<l.size();i++)  {
                 comboDVDPayment.add(((PaymentCategory)l.get(i)).getName(),i);
             }
+            comboDVDPayment.setEnabled(false);
         }
         {
             labelDVDStatus = new Label(groupDVDDetail, SWT.NONE);
@@ -516,6 +542,7 @@
             for(int i=0;i<l.size();i++)  {
                 comboDVDStatus.add(((Status)l.get(i)).getStatusName(),i);
             }
+            comboDVDStatus.setEnabled(false);
         }
         {
             labelDVDCondition = new Label(groupDVDDetail, SWT.NONE);
@@ -536,8 +563,9 @@
             for(int i=0;i<l.size();i++)  {
                 comboDVDCondition.add(((Condition)l.get(i)).getConditionName(),i);
             }
+            comboDVDCondition.setEnabled(false);
         }
-//      EditDirectors
+        //      EditLanguages
 		{
 
 			compositeDVDEditLanguages = new Composite(groupDVDDetail,
@@ -669,8 +697,8 @@
 								.getString("dvd.groupoverviewdetail.columnlanguages"));
 				tableDVDDetail_ColumnName.setWidth(200);
 			}
-		}// EditDirectors
-		// Edit Actors
+		}// Edit Languages
+		// Edit Subtitles
 		{
 			compositeDVDEditSubtitles = new Composite(groupDVDDetail,
 					SWT.NONE);
@@ -791,8 +819,8 @@
 						.getString("dvd.groupoverviewdetail.columnsubtitles"));
 				tableDVDDetail_ColumnName.setWidth(200);
 			}
-		}//Edit Actors
-		//Edit Genres
+		}//Edit Subtitles
+		//Edit Videoformat
 		{
 			compositeDVDEditVideoformat = new Composite(groupDVDDetail,
 					SWT.NONE);
@@ -911,8 +939,8 @@
 						.getString("dvd.groupoverviewdetail.columnvideoformat"));
 				tableDVDDetail_ColumnName.setWidth(200);
 			}
-		}// Edit Genre
-		// Edit Images
+		}// Edit Videoformat
+		// Edit Audioformat
 		{
 			compositeDVDEditAudioformat = new Composite(groupDVDDetail,
 					SWT.NONE);
@@ -1032,25 +1060,505 @@
 						.getString("dvd.groupoverviewdetail.columnaudioformat"));
 				tableDVDDetail_ColumnName.setWidth(200);
 			}
-		}// Edit Images
+		}// Edit Audioformat
+		{
+			compositeButtons = new Composite(groupDVDDetail, SWT.EMBEDDED);
+			GridLayout composite2Layout = new GridLayout();
+			composite2Layout.numColumns = 6;
+			GridData composite2LData = new GridData();
+			compositeButtons.setLayout(composite2Layout);
+			composite2LData.verticalAlignment = GridData.END;
+			composite2LData.horizontalAlignment = GridData.CENTER;
+			composite2LData.widthHint = 391;
+			composite2LData.horizontalSpan = 6;
+			composite2LData.grabExcessHorizontalSpace = true;
+			composite2LData.grabExcessVerticalSpace = true;
+			composite2LData.heightHint = 35;
+			compositeButtons.setLayoutData(composite2LData);
+		}
+		{
+			buttonDVDNew = new Button(compositeButtons, SWT.PUSH
+					| SWT.CENTER);
+			buttonDVDNew.setText(l.getString("button.new"));
+			buttonDVDNew.addSelectionListener(new SelectionAdapter() {
+				public void widgetSelected(SelectionEvent evt) {
+
+					mode_dvd = ManagementGui.MODE_ADD;
+
+					textDVDID.setText("");
+					textDVDBarcode.setText("");
+					textDVDBarcode.setEditable(true);
+					textDVDSearch.setEditable(false);
+					comboDVDMovie.setEnabled(true);
+					comboDVDPayment.setEnabled(true);
+					comboDVDStatus.setEnabled(true);
+					comboDVDCondition.setEnabled(true);
+					
+					buttonDVDCancel.setEnabled(true);
+					buttonDVDSave.setEnabled(true);
+					buttonDVDNew.setEnabled(false);
+					buttonDVDEdit.setEnabled(false);
+					buttonDVDDelete.setEnabled(false);
+					buttonDVDAddLanguages.setEnabled(true);
+					buttonDVDDeleteLanguages.setEnabled(true);
+					buttonDVDAddSubtitles.setEnabled(true);
+					buttonDVDDeleteSubtitles.setEnabled(true);
+					buttonDVDAddVideoformat.setEnabled(true);
+					buttonDVDDeleteVideoformat.setEnabled(true);
+					buttonDVDAddAudioformat.setEnabled(true);
+					buttonDVDDeleteAudioformat.setEnabled(true);
+
+					tableDVDOverview.setEnabled(false);
+					tableDVDLanguagesDetail.removeAll();
+					tableDVDSubtitlesDetail.removeAll();
+					tableDVDVideoformatDetail.removeAll();
+					tableDVDAudioformatDetail.removeAll();
+
+					localdvd = new Dvd();
+					localdvd.setLanguages(new ArrayList());
+					localdvd.setSubtitles(new ArrayList());
+					localdvd.setVideoFormats(new ArrayList());
+					localdvd.setAudioFormats(new ArrayList());
+				}
+			});
+
+			buttonDVDEdit = new Button(compositeButtons, SWT.PUSH
+					| SWT.CENTER);
+			buttonDVDEdit.setText(l.getString("button.edit"));
+			buttonDVDEdit.setEnabled(false);
+			buttonDVDEdit.addSelectionListener(new SelectionAdapter() {
+				public void widgetSelected(SelectionEvent evt) {
+
+					mode_dvd = ManagementGui.MODE_EDIT;
+
+					textDVDBarcode.setEditable(true);
+					textDVDSearch.setEditable(false);
+					comboDVDMovie.setEnabled(true);
+					comboDVDPayment.setEnabled(true);
+					comboDVDStatus.setEnabled(true);
+					comboDVDCondition.setEnabled(true);
+					
+					buttonDVDCancel.setEnabled(true);
+					buttonDVDSave.setEnabled(true);
+					buttonDVDNew.setEnabled(false);
+					buttonDVDEdit.setEnabled(false);
+					buttonDVDDelete.setEnabled(false);
+					buttonDVDAddLanguages.setEnabled(true);
+					buttonDVDDeleteLanguages.setEnabled(true);
+					buttonDVDAddSubtitles.setEnabled(true);
+					buttonDVDDeleteSubtitles.setEnabled(true);
+					buttonDVDAddVideoformat.setEnabled(true);
+					buttonDVDDeleteVideoformat.setEnabled(true);
+					buttonDVDAddAudioformat.setEnabled(true);
+					buttonDVDDeleteAudioformat.setEnabled(true);
+
+					tableDVDOverview.setEnabled(false);
+
+				}
+			});
+
+			buttonDVDDelete = new Button(compositeButtons, SWT.PUSH
+					| SWT.CENTER);
+			buttonDVDDelete.setText(l.getString("button.delete"));
+			buttonDVDDelete.setEnabled(false);
+			buttonDVDDelete.addSelectionListener(new SelectionAdapter() {
+				public void widgetSelected(SelectionEvent evt) {
+					if (logger.isDebugEnabled()) {
+						logger.debug("widgetSelected(SelectionEvent) - buttonDVDDelete.widgetSelected, event="
+										+ evt);
+					}
+
+					String msg = MessageFormat
+							.format(l.getString("dvd.groupdetail.deletebutton.question.text"),
+									new Object[] { localdvd.getMovie().getTitle()
+											+ " " });
+
+					int question = showMsg(
+							msg,
+							l
+									.getString("dvd.groupdetail.deletebutton.question.header"),
+							SWT.ICON_QUESTION | SWT.YES | SWT.NO);
+
+					if (question != SWT.YES) {
+						return;
+					}
+
+					try {
+						//object speichern
+						// Fehlerbehandlung
+						Database.deleteObject(localdvd);
+
+						//?bersichtsTabelle aktualisieren
+						refreshDVDOverviewTable(textDVDSearch.getText());
+
+						//Detailansicht leeren
+						textDVDID.setText("");
+						textDVDBarcode.setText("");
+						tableDVDLanguagesDetail.removeAll();
+						tableDVDSubtitlesDetail.removeAll();
+						tableDVDVideoformatDetail.removeAll();
+						tableDVDAudioformatDetail.removeAll();
+						//in Tabelle n?chsten ausw?hlen
+						try {
+							tableDVDOverview.select(0);
+						} catch (Exception ex) {
+						}
+
+						//Statusline Nachricht sezten
+						statusLine
+								.setStatus(
+										1,
+										l
+												.getString("dvd.groupdetail.deletebutton.newok"));
+
+					} catch (DataBaseException e) {
+						if (e.getMessage().equalsIgnoreCase("1")) {
+							//Fehler beim Speichern des Objectes
+
+							statusLine
+									.setStatus(
+											3,
+											l
+													.getString("dvd.groupdetail.deletebutton.errorsave"));
+							showMsg(
+									l
+											.getString("dvd.groupdetail.deletebutton.errorsave"),
+									l.getString("error"), SWT.ICON_ERROR
+											| SWT.OK);
+
+						} else if (e.getMessage().equalsIgnoreCase("2")) {
+							//fehler beim db aufbau
+							statusLine
+									.setStatus(
+											3,
+											l
+													.getString("dvd.groupdetail.deletebutton.errordb"));
+							showMsg(
+									l
+											.getString("dvd.groupdetail.deletebutton.errordb"),
+									l.getString("error"), SWT.ICON_ERROR
+											| SWT.OK);
+
+						} else {
+							//@todo
+							logger.error("widgetSelected(SelectionEvent)", e);
+						}
+
+					}
+
+				}
+
+			});
+
+			//leerer nicht sichtbarer Button
+			buttonDVDFill = new Button(compositeButtons, SWT.PUSH
+					| SWT.CENTER);
+			GridData buttonActorFillLData = new GridData();
+			buttonDVDFill.setVisible(false);
+			buttonDVDFill.setEnabled(false);
+			buttonActorFillLData.widthHint = 30;
+			buttonActorFillLData.heightHint = 23;
+			buttonDVDFill.setLayoutData(buttonActorFillLData);
+
+			buttonDVDSave = new Button(compositeButtons, SWT.PUSH
+					| SWT.CENTER);
+			buttonDVDSave.setText(l.getString("button.save"));
+			buttonDVDSave.setEnabled(false);
+			buttonDVDSave.addSelectionListener(new SelectionAdapter() {
+				public void widgetSelected(SelectionEvent evt) {
+					if (logger.isDebugEnabled()) {
+						logger
+								.debug("widgetSelected(SelectionEvent) - buttonDVDSave.widgetSelected, event="
+										+ evt);
+					}
+
+					/*List errors = validateInput();
+
+					if (errors.size() > 0) {
+						StringBuffer buf = new StringBuffer();
+
+						for (int i = 0; i < errors.size(); i++) {
+							buf.append("- ").append(errors.get(i)).append("\n");
+						}
+
+						showMsg(
+								l
+										.getString("dvd.groupdetail.savebutton.warn.noitems.msg")
+										+ new String(buf),
+								l
+										.getString("dvd.groupdetail.savebutton.warn.noitems.title"),
+								SWT.ICON_WARNING | SWT.YES);
+						return;
+
+					}
+					*/
+					//testen welcher mode
+					localdvd.setBarcode(textDVDBarcode.getText());
+					
+					/*
+					try {
+						localmovie.setRuntime(Integer
+								.parseInt(textMoviesRuntime.getText()));
+					} catch (Exception ex) {
+						logger.error("widgetSelected(SelectionEvent)", ex);
+						showMsg(
+								l
+										.getString("movies.groupdetail.savebutton.warn.noname.msg"),
+								l
+										.getString("movies.groupdetail.savebutton.warn.noname.title"),
+								SWT.ICON_WARNING | SWT.YES);
+						return;
+					}
+					*/
+					/**
+					 * @todo eine Exception bekommen wieder leider NOCH nicht
+					 *       mit d.h. es muss noch ein r?ckgabewert kommen oder
+					 *       eine Exception ?bermitteln werden (aus der DB
+					 *       Klasse)
+					 */
+					//neues Objekt erzeugen
+					try {
+						//object speichern
+						// Fehlerbehandlung
+
+						if (mode_dvd == ManagementGui.MODE_ADD) {
+
+							logger.debug("Objektid: " + localdvd.getDvdId()
+									+ " vor speichern");
+							Database.saveObject(localdvd);
+							logger.debug("Objektid: " + localdvd.getDvdId()
+									+ " nach speichern");
+
+							// in ?bersichtstabelle einf?gen
+							insertIntoMoviesOverviewTable(localdvd);
+							textDVDID.setText(localdvd.getDvdId() + "");
+						} else if (mode_dvd == ManagementGui.MODE_EDIT) {
+							Database.updateObject(localdvd);
+						}
+						//Statusline Nachricht sezten
+						statusLine
+								.setStatus(
+										1,
+										l
+												.getString("dvd.groupdetail.savebutton.newok"));
+					} catch (DataBaseException e) {
+						logger.debug("DataBaseException: " + e);
+						if (e.getMessage().equalsIgnoreCase("1")) {
+							//Fehler beim Speichern des Objectes
+
+							statusLine
+									.setStatus(
+											3,
+											l
+													.getString("dvd.groupdetail.savebutton.errorsave"));
+							showMsg(
+									l
+											.getString("dvd.groupdetail.savebutton.errorsave"),
+									"Fehler", SWT.ICON_ERROR | SWT.OK);
+
+						} else if (e.getMessage().equalsIgnoreCase("2")) {
+							//fehler beim db aufbau
+							statusLine
+									.setStatus(
+											3,
+											l
+													.getString("dvd.groupdetail.savebutton.errordb"));
+							showMsg(
+									l
+											.getString("dvd.groupdetail.savebutton.errordb"),
+									"Fehler", SWT.ICON_ERROR | SWT.OK);
+
+						} else {
+							//@todo
+							logger.error("widgetSelected(SelectionEvent)", e);
+						}
+
+					} catch (Exception ex) {
+						logger.debug("Unbekannte Exception: ", ex);
+					}
+
+					//activate buttons
+					setDVDGroupButtonSaveCancel();
+
+				}
+
+			});
+
+			buttonDVDCancel = new Button(compositeButtons, SWT.PUSH
+					| SWT.CENTER);
+			buttonDVDCancel.setText(l.getString("button.cancel"));
+			buttonDVDCancel.setEnabled(false);
+			buttonDVDCancel.addSelectionListener(new SelectionAdapter() {
+				public void widgetSelected(SelectionEvent evt) {
+					if (logger.isDebugEnabled()) {
+						logger
+								.debug("widgetSelected(SelectionEvent) - buttonDVDCancel.widgetSelected, event="
+										+ evt);
+					}
+					setDVDGroupButtonSaveCancel();
+				}
+			});
+		}
+
     }
 
-    
+
     /**
-     * @param text
+     * 
      */
-    private void refreshDVDOverviewTable(String text) {
+    private void setDVDGroupButtonSaveCancel() {
+		textDVDBarcode.setEditable(false);
+		textDVDSearch.setEditable(true);
+		comboDVDMovie.setEnabled(false);
+		comboDVDPayment.setEnabled(false);
+		comboDVDStatus.setEnabled(false);
+		comboDVDCondition.setEnabled(false);
+		
+		buttonDVDCancel.setEnabled(false);
+		buttonDVDSave.setEnabled(false);
+		buttonDVDNew.setEnabled(true);
+		buttonDVDEdit.setEnabled(false);
+		buttonDVDDelete.setEnabled(false);
+		buttonDVDAddLanguages.setEnabled(false);
+		buttonDVDDeleteLanguages.setEnabled(false);
+		buttonDVDAddSubtitles.setEnabled(false);
+		buttonDVDDeleteSubtitles.setEnabled(false);
+		buttonDVDAddVideoformat.setEnabled(false);
+		buttonDVDDeleteVideoformat.setEnabled(false);
+		buttonDVDAddAudioformat.setEnabled(false);
+		buttonDVDDeleteAudioformat.setEnabled(false);
+
+		tableDVDOverview.setEnabled(true);
+		tableDVDLanguagesDetail.removeAll();
+		tableDVDSubtitlesDetail.removeAll();
+		tableDVDVideoformatDetail.removeAll();
+		tableDVDAudioformatDetail.removeAll();
+
+        
+    }
+
+    /**
+     * @param localdvd2
+     */
+    private void insertIntoMoviesOverviewTable(Dvd localdvd2) {
         // TODO Auto-generated method stub
         
     }
+
+    /**
+     * @param text
+     */
+    private void refreshDVDOverviewTable(String filter) {
+        if (tableDVDOverview == null) {
+			if (logger.isDebugEnabled()) {
+				logger
+						.debug("refreshDVDOverviewTable(String) - Konnte DVDOverviewtable nicht refreshen, da diese null ist!");
+			}
+			return;
+		}
+		if (logger.isDebugEnabled()) {
+			logger
+					.debug("refreshDVDOverviewTable(String) - Versuche nun DVDOverviewtable zu refreshen. Filter: "
+							+ filter);
+		}
+		tableDVDOverview.removeAll();
+		TableItem item;
+		java.util.List DVDlist = Database.getDVD(filter);
+
+		for (int i = 0; i < DVDlist.size(); i++) {
+
+			Dvd o = (Dvd) DVDlist.get(i);
+			item = new TableItem(tableDVDOverview, SWT.NONE);
+			item.setText(new String[] {
+					o.getDvdId() + "",
+					o.getMovie().getTitle()+"",
+					o.getStatus().getStatusName()+"",
+					o.getCondition().getConditionName()+""
+					 });
+
+		}
+
+    }
   
     
     /**
      * @param text
      */
-    protected void refreshDVDDetail(String text) {
+    protected void refreshDVDDetail(String id) {
         // TODO Auto-generated method stub
-        
+        Dvd object;
+		try {
+			//since we only can get a String value from the table, we
+			//need to convert this
+			object = Database.getSingleDVD(Integer.parseInt(id));
+
+			if (object == null) {
+
+				/*
+				 * 
+				 * @TODO Statusbar aktualiseren
+				 */
+				return;
+			}
+		} catch (Exception e) {
+			// TODO: handle exception
+			//id ist keine Zahl
+			return;
+		}
+		localdvd = object;
+		textDVDID.setText(object.getDvdId() + "");
+		textDVDBarcode.setText(object.getBarcode());
+		comboDVDMovie.setText(object.getMovie().getTitle());
+		comboDVDPayment.setText(object.getPaymentCategory().getName());
+		comboDVDStatus.setText(object.getStatus().getStatusName());
+		comboDVDCondition.setText(object.getCondition().getConditionName());
+		
+		TableItem item;
+		// Fill Directorstable
+		tableDVDLanguagesDetail.removeAll();
+		for (int i = 0; i < object.getLanguages().size(); i++) {
+			Language o = (Language) object.getLanguages().get(i);
+			item = new TableItem(tableDVDLanguagesDetail, SWT.NONE);
+			item.setText(new String[] { o.getLanguageId() + "",
+					o.getName()});
+		}
+
+		//Fill Actorstable
+		tableDVDSubtitlesDetail.removeAll();
+		for (int i = 0; i < object.getSubtitles().size(); i++) {
+			Subtitle o = (Subtitle) object.getSubtitles().get(i);
+			item = new TableItem(tableDVDSubtitlesDetail, SWT.NONE);
+			item.setText(new String[] { o.getSubtitleId() + "",
+					o.getName()  });
+		}
+
+		//Fill Genretable
+		tableDVDVideoformatDetail.removeAll();
+		logger.debug("Anzahl der Videoformate: " + object.getVideoFormats().size());
+		for (int i = 0; i < object.getVideoFormats().size(); i++) {
+			VideoFormat o = (VideoFormat) object.getVideoFormats().get(i);
+			logger.debug(i + " " + o);
+			item = new TableItem(tableDVDVideoformatDetail, SWT.NONE);
+			item.setText(new String[] { o.getVideoFormatId() + "",
+							o.getName() + "" });
+		}
+
+		//Fill Imagetable
+		tableDVDAudioformatDetail.removeAll();
+		logger.debug("Anzahl der Audioformate: " + object.getAudioFormats().size());
+		for (int i = 0; i < object.getAudioFormats().size(); i++) {
+			AudioFormat o = (AudioFormat) object.getAudioFormats().get(i);
+			item = new TableItem(tableDVDAudioformatDetail, SWT.NONE);
+			item.setText(new String[] { o.getAudioFormatId() + "",
+					o.getName() + "" });
+		}
+
+		//Enable Buttons for Delete and Edit
+		buttonDVDEdit.setEnabled(true);
+		buttonDVDDelete.setEnabled(true);
+
+		//Change mode to view
+		mode_dvd = ManagementGui.MODE_VIEW;
     }
 
 }

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/dvds.properties
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/dvds.properties	2004-12-14 18:17:51 UTC (rev 246)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/dvds.properties	2004-12-14 18:42:22 UTC (rev 247)
@@ -16,10 +16,22 @@
 dvd.groupdetail.labelvideoformat =Videoformat
 dvd.groupdetail.labelaudioformat =Audioformat
 
+button.new =Neu
+button.edit =Bearbeiten
+button.delete =L?schen
+button.save =Speichern
+button.cancel =Abbruch
 dvd.button.additem =Hinzuf?gen
 dvd.button.deleteitem = L?schen
 
 dvd.groupoverviewdetail.columnlanguages =Sprache
 dvd.groupoverviewdetail.columnsubtitles =Untertitel
 dvd.groupoverviewdetail.columnvideoformat =Videoformat
-dvd.groupoverviewdetail.columnaudioformat =Audioformat
\ No newline at end of file
+dvd.groupoverviewdetail.columnaudioformat =Audioformat
+
+dvd.groupdetail.deletebutton.question.header=Wirklich l?schen?
+dvd.groupdetail.deletebutton.question.text=Wollen Sie den Datensatz {0} wirklich l?schen?
+dvd.groupdetail.deletebutton.newok=Datensatz wurde erfolgreich gel?scht.
+dvd.groupdetail.deletebutton.errorsave=Datenbankfehler beim L?schen.
+dvd.groupdetail.deletebutton.errordb=Datenbankfehler beim Herstellen der Verbindung(del).
+

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java	2004-12-14 18:17:51 UTC (rev 246)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java	2004-12-14 18:42:22 UTC (rev 247)
@@ -63,7 +63,7 @@
 import de.hsharz.provirent.objects.Status;
 import de.hsharz.provirent.objects.Subtitle;
 import de.hsharz.provirent.objects.VideoFormat;
-
+import de.hsharz.provirent.objects.Dvd;
 /**
  * @author Philipp Schneider
  *
@@ -1942,10 +1942,10 @@
 
 	
 	/**
-	 * This method gets all Movies from the database.
-	 * searches for ID,Title,Date,Description,Actor,Director...
+	 * This method gets all PaymentCategory from the database.
+	 * searches for ID
 	 * @param filter 
-	 * @return List of Movie objects, or an empty List
+	 * @return List of PaymentCategory objects, or an empty List
 	 */
 	public static List getPaymentCategory() {
 		if (logger.isDebugEnabled()) {
@@ -1983,5 +1983,104 @@
 
 	}
 	
+	/**
+	 * This method gets all DVDs from the database.
+	 * searches for ID,Title,...
+	 * @param filter 
+	 * @return List of Dvd objects, or an empty List
+	 */
+	public static List getDVD(final String filter) {
+		if (logger.isDebugEnabled()) {
+			logger.debug("getDVD() - start. String filter= " + filter);
+		}
+		//init the returnlist
+		List returnlist = new ArrayList();
+
+		Session s = null;
+
+		try {
+			//get new Session and begin Transaction
+			s = HibernateUtil.currentSession();
+
+			//init the criteria
+			Criteria criteria = s.createCriteria(Dvd.class);
+			//any of the criteria 
+			Disjunction any = Expression.disjunction();
+
+			//if filter not empty
+			if (filter != null && !filter.equalsIgnoreCase("")) {
+				any.add(Expression.like("barcode", "%" + filter + "%"));
+				
+				//maybe we are searching for the id?
+				try {
+					any.add(Expression.eq("dvdId", new Integer(Integer
+							.parseInt(filter))));
+				} catch (Exception e) {
+				}
+
+			}
+
+			//add all criteria
+			criteria.add(any);
+			//get the results
+			returnlist = criteria.list();
+
+		} catch (Exception e) {
+			logger
+					.error("getDVD() - Error while trying to do Transaction",
+							e);
+			returnlist = new ArrayList();
+		} finally {
+			try {
+				// No matter what, close the session
+				HibernateUtil.closeSession();
+			} catch (HibernateException e1) {
+				logger.error("getDVD() - Could not Close the Session", e1);
+			}
+		}
+
+		if (logger.isDebugEnabled()) {
+			logger.debug("getDVD() - end");
+		}
+		return returnlist;
+
+	}
+
+	public static Dvd getSingleDVD(final int id) {
+		if (logger.isDebugEnabled()) {
+			logger.debug("getSingleDVD) - start. int filter= " + id);
+		}
+		//init the returnlist
+		Dvd returnobject = null;
+
+		Session s = null;
+		Transaction tx = null;
+		try {
+			//get new Session and begin Transaction
+			s = HibernateUtil.currentSession();
+
+			returnobject = (Dvd) s.get(Dvd.class, new Integer(id));
+
+		} catch (Exception e) {
+			logger.error(
+					"getSingleDVD() - Error while trying to do Transaction",
+					e);
+
+		} finally {
+			try {
+				// No matter what, close the session
+				HibernateUtil.closeSession();
+			} catch (HibernateException e1) {
+				logger.error("getSingleDVD() - Could not Close the Session",
+						e1);
+			}
+		}
+
+		if (logger.isDebugEnabled()) {
+			logger.debug("getSingleDVD() - end");
+		}
+		return returnobject;
+
+	}
 }
 



From pschneider at sheep.berlios.de  Mon Dec 27 14:04:04 2004
From: pschneider at sheep.berlios.de (Philipp Schneider at BerliOS)
Date: Mon, 27 Dec 2004 14:04:04 +0100
Subject: [Provirent-svn-commit] r248 - in project_src: . clienttest/src website website/Tomcat website/Tomcat/work website/Tomcat/work/web website/Tomcat/work/web/loader website/Tomcat/work/web/loader/META-INF website/Tomcat/work/web/loader/META-INF/tlds website/Tomcat/work/web/loader/org website/Tomcat/work/web/loader/org/apache website/Tomcat/work/web/loader/org/apache/commons website/Tomcat/work/web/loader/org/apache/commons/validator website/Tomcat/work/web/loader/org/apache/commons/validator/resources website/Tomcat/work/web/loader/org/apache/struts website/Tomcat/work/web/loader/org/apache/struts/action website/Tomcat/work/web/loader/org/apache/struts/actions website/Tomcat/work/web/loader/org/apache/struts/resources website/Tomcat/work/web/loader/org/apache/struts/taglib website/Tomcat/work/web/loader/org/apache/struts/taglib/bean website/Tomcat/work/web/loader/org/apache/struts/taglib/html website/Tomcat/work/web/loader/org/apache/struts/taglib/logic website/Tomcat/work/web/loader/org/apac!
 he/struts/util website/bak website/bak/web website/classes website/classes/Generated Source website/classes/Generated Source/.jsp website/classes/Generated Source/.jsp/web website/classes/Generated Source/.jsp/web/org website/classes/Generated Source/.jsp/web/org/apache website/classes/Generated Source/.jsp/web/org/apache/jsp website/classes/Generated Source/.jsp/web/org/apache/jsp/templates website/classes/jsp cache website/classes/jsp cache/web website/classes/jsp cache/web/org website/classes/jsp cache/web/org/apache website/classes/jsp cache/web/org/apache/jsp website/classes/jsp cache/web/org/apache/jsp/templates website/classes/jsp cache/web/package cache website/src website/test website/web website/web/WEB-INF website/web/WEB-INF/lib website/web/WEB-INF/taglib website/web/images website/web/templates
Message-ID: <200412271304.iBRD44vS011981@sheep.berlios.de>

Author: pschneider
Date: 2004-12-27 14:04:03 +0100 (Mon, 27 Dec 2004)
New Revision: 248

Added:
   project_src/website/
   project_src/website/Servlet.library
   project_src/website/Tomcat/
   project_src/website/Tomcat/work/
   project_src/website/Tomcat/work/web/
   project_src/website/Tomcat/work/web/loader/
   project_src/website/Tomcat/work/web/loader/META-INF/
   project_src/website/Tomcat/work/web/loader/META-INF/LICENSE
   project_src/website/Tomcat/work/web/loader/META-INF/LICENSE.txt
   project_src/website/Tomcat/work/web/loader/META-INF/MANIFEST.MF
   project_src/website/Tomcat/work/web/loader/META-INF/tlds/
   project_src/website/Tomcat/work/web/loader/META-INF/tlds/struts-bean.tld
   project_src/website/Tomcat/work/web/loader/META-INF/tlds/struts-html.tld
   project_src/website/Tomcat/work/web/loader/META-INF/tlds/struts-logic.tld
   project_src/website/Tomcat/work/web/loader/META-INF/tlds/struts-nested.tld
   project_src/website/Tomcat/work/web/loader/META-INF/tlds/struts-template.tld
   project_src/website/Tomcat/work/web/loader/META-INF/tlds/struts-tiles.tld
   project_src/website/Tomcat/work/web/loader/org/
   project_src/website/Tomcat/work/web/loader/org/apache/
   project_src/website/Tomcat/work/web/loader/org/apache/commons/
   project_src/website/Tomcat/work/web/loader/org/apache/commons/validator/
   project_src/website/Tomcat/work/web/loader/org/apache/commons/validator/package.html
   project_src/website/Tomcat/work/web/loader/org/apache/commons/validator/resources/
   project_src/website/Tomcat/work/web/loader/org/apache/commons/validator/resources/validator_1_0.dtd
   project_src/website/Tomcat/work/web/loader/org/apache/commons/validator/resources/validator_1_0_1.dtd
   project_src/website/Tomcat/work/web/loader/org/apache/struts/
   project_src/website/Tomcat/work/web/loader/org/apache/struts/action/
   project_src/website/Tomcat/work/web/loader/org/apache/struts/action/ActionResources.properties
   project_src/website/Tomcat/work/web/loader/org/apache/struts/action/LocalStrings.properties
   project_src/website/Tomcat/work/web/loader/org/apache/struts/actions/
   project_src/website/Tomcat/work/web/loader/org/apache/struts/actions/LocalStrings.properties
   project_src/website/Tomcat/work/web/loader/org/apache/struts/resources/
   project_src/website/Tomcat/work/web/loader/org/apache/struts/resources/struts-config_1_0.dtd
   project_src/website/Tomcat/work/web/loader/org/apache/struts/resources/struts-config_1_1.dtd
   project_src/website/Tomcat/work/web/loader/org/apache/struts/resources/tiles-config.dtd
   project_src/website/Tomcat/work/web/loader/org/apache/struts/resources/tiles-config_1_1.dtd
   project_src/website/Tomcat/work/web/loader/org/apache/struts/resources/validation_1_1.dtd
   project_src/website/Tomcat/work/web/loader/org/apache/struts/resources/validator-rules_1_1.dtd
   project_src/website/Tomcat/work/web/loader/org/apache/struts/resources/web-app_2_2.dtd
   project_src/website/Tomcat/work/web/loader/org/apache/struts/resources/web-app_2_3.dtd
   project_src/website/Tomcat/work/web/loader/org/apache/struts/taglib/
   project_src/website/Tomcat/work/web/loader/org/apache/struts/taglib/bean/
   project_src/website/Tomcat/work/web/loader/org/apache/struts/taglib/bean/LocalStrings.properties
   project_src/website/Tomcat/work/web/loader/org/apache/struts/taglib/html/
   project_src/website/Tomcat/work/web/loader/org/apache/struts/taglib/html/LocalStrings.properties
   project_src/website/Tomcat/work/web/loader/org/apache/struts/taglib/logic/
   project_src/website/Tomcat/work/web/loader/org/apache/struts/taglib/logic/LocalStrings.properties
   project_src/website/Tomcat/work/web/loader/org/apache/struts/util/
   project_src/website/Tomcat/work/web/loader/org/apache/struts/util/LocalStrings.properties
   project_src/website/Tomcat/work/web/tldCache.ser
   project_src/website/bak/
   project_src/website/bak/web/
   project_src/website/bak/web/WEB-INF/
   project_src/website/bak/web/templates/
   project_src/website/classes/
   project_src/website/classes/ApplicationResources.properties
   project_src/website/classes/Generated Source/
   project_src/website/classes/Generated Source/.jsp/
   project_src/website/classes/Generated Source/.jsp/web/
   project_src/website/classes/Generated Source/.jsp/web/org/
   project_src/website/classes/Generated Source/.jsp/web/org/apache/
   project_src/website/classes/Generated Source/.jsp/web/org/apache/jsp/
   project_src/website/classes/Generated Source/.jsp/web/org/apache/jsp/basket_jsp.java
   project_src/website/classes/Generated Source/.jsp/web/org/apache/jsp/details_jsp.java
   project_src/website/classes/Generated Source/.jsp/web/org/apache/jsp/index_jsp.java
   project_src/website/classes/Generated Source/.jsp/web/org/apache/jsp/templates/
   project_src/website/classes/Generated Source/.jsp/web/org/apache/jsp/templates/head_jsp.java
   project_src/website/classes/Generated Source/.jsp/web/org/apache/jsp/templates/main_jsp.java
   project_src/website/classes/Generated Source/.jsp/web/org/apache/jsp/templates/menu_jsp.java
   project_src/website/classes/Generated Source/.jsp/web/org/apache/jsp/top10_jsp.java
   project_src/website/classes/jsp cache/
   project_src/website/classes/jsp cache/web/
   project_src/website/classes/jsp cache/web/org/
   project_src/website/classes/jsp cache/web/org/apache/
   project_src/website/classes/jsp cache/web/org/apache/jsp/
   project_src/website/classes/jsp cache/web/org/apache/jsp/basket_jsp.class
   project_src/website/classes/jsp cache/web/org/apache/jsp/details_jsp.class
   project_src/website/classes/jsp cache/web/org/apache/jsp/index_jsp.class
   project_src/website/classes/jsp cache/web/org/apache/jsp/templates/
   project_src/website/classes/jsp cache/web/org/apache/jsp/templates/head_jsp.class
   project_src/website/classes/jsp cache/web/org/apache/jsp/templates/main_jsp.class
   project_src/website/classes/jsp cache/web/org/apache/jsp/templates/menu_jsp.class
   project_src/website/classes/jsp cache/web/org/apache/jsp/top10_jsp.class
   project_src/website/classes/jsp cache/web/package cache/
   project_src/website/classes/jsp cache/web/package cache/org.apache.jsp.dep2
   project_src/website/classes/jsp cache/web/package cache/org.apache.jsp.templates.dep2
   project_src/website/src/
   project_src/website/src/ApplicationResources.properties
   project_src/website/test/
   project_src/website/test/cactus.properties
   project_src/website/test/log_client.properties
   project_src/website/test/log_server.properties
   project_src/website/web/
   project_src/website/web/WEB-INF/
   project_src/website/web/WEB-INF/lib/
   project_src/website/web/WEB-INF/lib/commons-beanutils.jar
   project_src/website/web/WEB-INF/lib/commons-collections.jar
   project_src/website/web/WEB-INF/lib/commons-digester.jar
   project_src/website/web/WEB-INF/lib/commons-fileupload.jar
   project_src/website/web/WEB-INF/lib/commons-lang.jar
   project_src/website/web/WEB-INF/lib/commons-logging.jar
   project_src/website/web/WEB-INF/lib/commons-validator.jar
   project_src/website/web/WEB-INF/lib/jakarta-oro.jar
   project_src/website/web/WEB-INF/lib/jstl.jar
   project_src/website/web/WEB-INF/lib/standard.jar
   project_src/website/web/WEB-INF/lib/struts.jar
   project_src/website/web/WEB-INF/struts-bean.tld
   project_src/website/web/WEB-INF/struts-config.xml
   project_src/website/web/WEB-INF/struts-html.tld
   project_src/website/web/WEB-INF/struts-logic.tld
   project_src/website/web/WEB-INF/struts-nested.tld
   project_src/website/web/WEB-INF/struts-template.tld
   project_src/website/web/WEB-INF/struts-tiles.tld
   project_src/website/web/WEB-INF/taglib/
   project_src/website/web/WEB-INF/taglib/struts-bean.tld
   project_src/website/web/WEB-INF/taglib/struts-html.tld
   project_src/website/web/WEB-INF/taglib/struts-logic.tld
   project_src/website/web/WEB-INF/taglib/struts-nested.tld
   project_src/website/web/WEB-INF/taglib/struts-template.tld
   project_src/website/web/WEB-INF/taglib/struts-tiles.tld
   project_src/website/web/WEB-INF/tiles-defs.xml
   project_src/website/web/WEB-INF/validation.xml
   project_src/website/web/WEB-INF/validator-rules.xml
   project_src/website/web/WEB-INF/web.xml
   project_src/website/web/basket.jsp
   project_src/website/web/details.jsp
   project_src/website/web/images/
   project_src/website/web/images/1pxtrans.gif
   project_src/website/web/images/border.gif
   project_src/website/web/images/border_bl.gif
   project_src/website/web/images/border_br.gif
   project_src/website/web/images/border_r.gif
   project_src/website/web/images/border_tr.gif
   project_src/website/web/index.jsp
   project_src/website/web/style.css
   project_src/website/web/templates/
   project_src/website/web/templates/main.jsp
   project_src/website/web/top10.jsp
   project_src/website/website.jpx
   project_src/website/website.jpx.local
Modified:
   project_src/clienttest/src/Snippet.java
Log:
-  JBuilder Projekt fuer Struts und Webseite
- bis jetzt keine Hibernate jars hinzugef?\195?\188gt, da zu gross fuer modem, bitte manuell aus dem anderen projekt kopieren

Modified: project_src/clienttest/src/Snippet.java
===================================================================
--- project_src/clienttest/src/Snippet.java	2004-12-14 18:42:22 UTC (rev 247)
+++ project_src/clienttest/src/Snippet.java	2004-12-27 13:04:03 UTC (rev 248)
@@ -9,40 +9,41 @@
  *
  */
 public class Snippet {
-
-    public static void main(String[] args) {
-    	Display display = new Display();
-    	Shell shell = new Shell(display);
-    	
-    	shell.setLayout(new FillLayout());
-    	CTabFolder folder = new CTabFolder(shell, SWT.CLOSE);
-    	for (int i = 0; i < 4; i++) {
-    		CTabItem item = new CTabItem(folder, SWT.NONE);
-    		item.setText("Item "+i);
-    		Text text = new Text(folder, SWT.BORDER | SWT.MULTI);
-    		text.setText("Content for Item "+i);
-    		item.setControl(text);
-    	}
-    	
-    	final CTabItem specialItem = new CTabItem(folder, SWT.NONE);
-    	specialItem.setText("Don't Close Me");
-    	Text text = new Text(folder, SWT.BORDER | SWT.MULTI);
-    	text.setText("This tab can never be closed");
-    	specialItem.setControl(text);
-    		
-    	folder.addCTabFolder2Listener(new CTabFolder2Adapter() {
-    		public void close(CTabFolderEvent event) {
-    			if (event.item.equals(specialItem)) {
-    				event.doit = false;
-    			}
+    public static void main (String [] args) {
+        
+        
+    	Display display = new Display ();
+    	Shell shell = new Shell (display);
+    	shell.pack ();
+    	shell.open ();
+    	final boolean [] result = new boolean [1];
+    	final Shell dialog = new Shell (shell, SWT.DIALOG_TRIM | SWT.APPLICATION_MODAL);
+    	dialog.setLayout (new RowLayout ());
+    	final Button ok = new Button (dialog, SWT.PUSH);
+    	ok.setText ("Ok");
+    	Button cancel = new Button (dialog, SWT.PUSH);
+    	cancel.setText ("Cancel");
+    	Listener listener =new Listener () {
+    		public void handleEvent (Event event) {
+    			result [0] = event.widget == ok;
+    			dialog.close ();
     		}
-    	});
-    	shell.setSize(400, 400);
-    	shell.open();
-    	while (!shell.isDisposed()) {
-    		if (!display.readAndDispatch())
-    			display.sleep();
+    	};
+    	ok.addListener (SWT.Selection, listener);
+    	cancel.addListener (SWT.Selection, listener);
+    	dialog.pack ();
+    	dialog.open ();
+    	System.out.println ("Prompt ...");
+    	while (!dialog.isDisposed ()) {
+    		if (!display.readAndDispatch ()) display.sleep ();
     	}
-    	display.dispose();
+    	System.out.println ("Result: " + result [0]);
+    	while (!shell.isDisposed ()) {
+    		if (!display.readAndDispatch ()) display.sleep ();
+    	}
+    	display.dispose ();
+    
+        
+        
     }
 }

Added: project_src/website/Servlet.library
===================================================================
--- project_src/website/Servlet.library	2004-12-14 18:42:22 UTC (rev 247)
+++ project_src/website/Servlet.library	2004-12-27 13:04:03 UTC (rev 248)
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<library>
+  <!--JBuilder Library Definition File-->
+  <fullname>Servlet</fullname>
+  <required>Tomcat 5.0 Servlet</required>
+  <lastmodsaved>1104082165451</lastmodsaved>
+</library>

Added: project_src/website/Tomcat/work/web/loader/META-INF/LICENSE
===================================================================
--- project_src/website/Tomcat/work/web/loader/META-INF/LICENSE	2004-12-14 18:42:22 UTC (rev 247)
+++ project_src/website/Tomcat/work/web/loader/META-INF/LICENSE	2004-12-27 13:04:03 UTC (rev 248)
@@ -0,0 +1,65 @@
+/*
+ * $Header: /home/cvs/jakarta-struts/LICENSE,v 1.2 2001/02/02 00:38:31 craigmcc Exp $
+ * $Revision: 1.2 $
+ * $Date: 2001/02/02 00:38:31 $
+ *
+ * ====================================================================
+ * 
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 1999-2001 The Apache Software Foundation.  All rights 
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer. 
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowlegement:  
+ *       "This product includes software developed by the 
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowlegement may appear in the software itself,
+ *    if and wherever such third-party acknowlegements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Struts", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written 
+ *    permission, please contact apache at apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their names without prior written
+ *    permission of the Apache Group.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ *
+ */ 
+
+
+
+
+

Added: project_src/website/Tomcat/work/web/loader/META-INF/LICENSE.txt
===================================================================
--- project_src/website/Tomcat/work/web/loader/META-INF/LICENSE.txt	2004-12-14 18:42:22 UTC (rev 247)
+++ project_src/website/Tomcat/work/web/loader/META-INF/LICENSE.txt	2004-12-27 13:04:03 UTC (rev 248)
@@ -0,0 +1,60 @@
+/*
+ * $Header: /home/cvs/jakarta-commons/validator/LICENSE.txt,v 1.1 2002/07/25 02:36:46 jvanzyl Exp $
+ * $Revision: 1.1 $
+ * $Date: 2002/07/25 02:36:46 $
+ *
+ * ====================================================================
+ *
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 1999-2001 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowlegement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowlegement may appear in the software itself,
+ *    if and wherever such third-party acknowlegements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache at apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their names without prior written
+ *    permission of the Apache Group.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ *
+ */

Added: project_src/website/Tomcat/work/web/loader/META-INF/MANIFEST.MF
===================================================================
--- project_src/website/Tomcat/work/web/loader/META-INF/MANIFEST.MF	2004-12-14 18:42:22 UTC (rev 247)
+++ project_src/website/Tomcat/work/web/loader/META-INF/MANIFEST.MF	2004-12-27 13:04:03 UTC (rev 248)
@@ -0,0 +1,8 @@
+Manifest-Version: 1.0
+Created-By: Apache Ant 1.5.1
+Extension-Name: org.apache.commons.validator
+Specification-Vendor: Apache Software Foundation
+Specification-Version: 1.0
+Implementation-Vendor: Apache Software Foundation
+Implementation-Version: 1.0.2
+

Added: project_src/website/Tomcat/work/web/loader/META-INF/tlds/struts-bean.tld
===================================================================
--- project_src/website/Tomcat/work/web/loader/META-INF/tlds/struts-bean.tld	2004-12-14 18:42:22 UTC (rev 247)
+++ project_src/website/Tomcat/work/web/loader/META-INF/tlds/struts-bean.tld	2004-12-27 13:04:03 UTC (rev 248)
@@ -0,0 +1,382 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+
+
+
+
+
+
+<!DOCTYPE taglib PUBLIC "-//Sun Microsystems, Inc.//DTD JSP Tag Library 1.1//EN" "http://java.sun.com/j2ee/dtds/web-jsptaglibrary_1_1.dtd">
+<taglib>
+<tlibversion>1.0</tlibversion>
+<jspversion>1.1</jspversion>
+<shortname>bean</shortname>
+<uri>http://jakarta.apache.org/struts/tags-bean</uri>
+<tag>
+<name>cookie</name>
+<tagclass>org.apache.struts.taglib.bean.CookieTag</tagclass>
+<teiclass>org.apache.struts.taglib.bean.CookieTei</teiclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>id</name>
+<required>true</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>multiple</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>define</name>
+<tagclass>org.apache.struts.taglib.bean.DefineTag</tagclass>
+<teiclass>org.apache.struts.taglib.bean.DefineTei</teiclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>id</name>
+<required>true</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>toScope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>type</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>header</name>
+<tagclass>org.apache.struts.taglib.bean.HeaderTag</tagclass>
+<teiclass>org.apache.struts.taglib.bean.HeaderTei</teiclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>id</name>
+<required>true</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>multiple</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>include</name>
+<tagclass>org.apache.struts.taglib.bean.IncludeTag</tagclass>
+<teiclass>org.apache.struts.taglib.bean.IncludeTei</teiclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>anchor</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>forward</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>href</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>id</name>
+<required>true</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>page</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>transaction</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>message</name>
+<tagclass>org.apache.struts.taglib.bean.MessageTag</tagclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>arg0</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>arg1</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>arg2</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>arg3</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>arg4</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>bundle</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>key</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>locale</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>page</name>
+<tagclass>org.apache.struts.taglib.bean.PageTag</tagclass>
+<teiclass>org.apache.struts.taglib.bean.PageTei</teiclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>id</name>
+<required>true</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>parameter</name>
+<tagclass>org.apache.struts.taglib.bean.ParameterTag</tagclass>
+<teiclass>org.apache.struts.taglib.bean.ParameterTei</teiclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>id</name>
+<required>true</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>multiple</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>resource</name>
+<tagclass>org.apache.struts.taglib.bean.ResourceTag</tagclass>
+<teiclass>org.apache.struts.taglib.bean.ResourceTei</teiclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>id</name>
+<required>true</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>input</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>size</name>
+<tagclass>org.apache.struts.taglib.bean.SizeTag</tagclass>
+<teiclass>org.apache.struts.taglib.bean.SizeTei</teiclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>collection</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>id</name>
+<required>true</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>struts</name>
+<tagclass>org.apache.struts.taglib.bean.StrutsTag</tagclass>
+<teiclass>org.apache.struts.taglib.bean.StrutsTei</teiclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>id</name>
+<required>true</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>formBean</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>forward</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>mapping</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>write</name>
+<tagclass>org.apache.struts.taglib.bean.WriteTag</tagclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>bundle</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>filter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>format</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>formatKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ignore</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>locale</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+</taglib>
+
+
+

Added: project_src/website/Tomcat/work/web/loader/META-INF/tlds/struts-html.tld
===================================================================
--- project_src/website/Tomcat/work/web/loader/META-INF/tlds/struts-html.tld	2004-12-14 18:42:22 UTC (rev 247)
+++ project_src/website/Tomcat/work/web/loader/META-INF/tlds/struts-html.tld	2004-12-27 13:04:03 UTC (rev 248)
@@ -0,0 +1,2972 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+
+
+
+
+
+
+<!DOCTYPE taglib PUBLIC "-//Sun Microsystems, Inc.//DTD JSP Tag Library 1.1//EN" "http://java.sun.com/j2ee/dtds/web-jsptaglibrary_1_1.dtd">
+<taglib>
+<tlibversion>1.0</tlibversion>
+<jspversion>1.1</jspversion>
+<shortname>html</shortname>
+<uri>http://jakarta.apache.org/struts/tags-html</uri>
+<tag>
+<name>base</name>
+<tagclass>org.apache.struts.taglib.html.BaseTag</tagclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>target</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>server</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>button</name>
+<tagclass>org.apache.struts.taglib.html.ButtonTag</tagclass>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>disabled</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexed</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onchange</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>cancel</name>
+<tagclass>org.apache.struts.taglib.html.CancelTag</tagclass>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>disabled</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onchange</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>checkbox</name>
+<tagclass>org.apache.struts.taglib.html.CheckboxTag</tagclass>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>disabled</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexed</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onchange</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>errors</name>
+<tagclass>org.apache.struts.taglib.html.ErrorsTag</tagclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>bundle</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>locale</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>file</name>
+<tagclass>org.apache.struts.taglib.html.FileTag</tagclass>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>accept</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>disabled</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexed</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>maxlength</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onchange</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>size</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>form</name>
+<tagclass>org.apache.struts.taglib.html.FormTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>action</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>enctype</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>focus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>focusIndex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>method</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onreset</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onsubmit</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>target</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>type</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>frame</name>
+<tagclass>org.apache.struts.taglib.html.FrameTag</tagclass>
+<attribute>
+<name>action</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>anchor</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>forward</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>frameborder</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>frameName</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>href</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>longdesc</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>marginheight</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>marginwidth</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>noresize</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>page</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramName</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramProperty</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramScope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scrolling</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>transaction</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>hidden</name>
+<tagclass>org.apache.struts.taglib.html.HiddenTag</tagclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexed</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onchange</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>write</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>html</name>
+<tagclass>org.apache.struts.taglib.html.HtmlTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>locale</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>xhtml</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>image</name>
+<tagclass>org.apache.struts.taglib.html.ImageTag</tagclass>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>align</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>border</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>bundle</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>disabled</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexed</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>locale</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onchange</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>page</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>pageKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>src</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>srcKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>img</name>
+<tagclass>org.apache.struts.taglib.html.ImgTag</tagclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>align</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>border</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>bundle</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>height</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>hspace</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>imageName</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ismap</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>locale</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>lowsrc</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>page</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>pageKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramName</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramProperty</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramScope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>src</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>srcKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>usemap</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>vspace</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>width</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>javascript</name>
+<tagclass>org.apache.struts.taglib.html.JavascriptValidatorTag</tagclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>cdata</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>dynamicJavascript</name>
+<required>false</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>formName</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>method</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>page</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>src</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>staticJavascript</name>
+<required>false</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>htmlComment</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>link</name>
+<tagclass>org.apache.struts.taglib.html.LinkTag</tagclass>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>action</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>anchor</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>forward</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>href</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexed</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>linkName</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>page</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramName</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramProperty</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramScope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>target</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>transaction</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>messages</name>
+<tagclass>org.apache.struts.taglib.html.MessagesTag</tagclass>
+<teiclass>org.apache.struts.taglib.html.MessagesTei</teiclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>id</name>
+<required>true</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>bundle</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>locale</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>header</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>footer</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>message</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>multibox</name>
+<tagclass>org.apache.struts.taglib.html.MultiboxTag</tagclass>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>disabled</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onchange</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>option</name>
+<tagclass>org.apache.struts.taglib.html.OptionTag</tagclass>
+<attribute>
+<name>bundle</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>disabled</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>key</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>locale</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>options</name>
+<tagclass>org.apache.struts.taglib.html.OptionsTag</tagclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>collection</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>filter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>labelName</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>labelProperty</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>optionsCollection</name>
+<tagclass>org.apache.struts.taglib.html.OptionsCollectionTag</tagclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>filter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>label</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>password</name>
+<tagclass>org.apache.struts.taglib.html.PasswordTag</tagclass>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>disabled</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexed</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>maxlength</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onchange</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>readonly</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>redisplay</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>size</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>radio</name>
+<tagclass>org.apache.struts.taglib.html.RadioTag</tagclass>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>disabled</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexed</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onchange</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>idName</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>reset</name>
+<tagclass>org.apache.struts.taglib.html.ResetTag</tagclass>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>disabled</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onchange</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>rewrite</name>
+<tagclass>org.apache.struts.taglib.html.RewriteTag</tagclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>anchor</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>forward</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>href</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>page</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramName</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramProperty</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramScope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>transaction</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>select</name>
+<tagclass>org.apache.struts.taglib.html.SelectTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>disabled</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexed</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>multiple</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onchange</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>size</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>submit</name>
+<tagclass>org.apache.struts.taglib.html.SubmitTag</tagclass>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>disabled</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexed</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onchange</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>text</name>
+<tagclass>org.apache.struts.taglib.html.TextTag</tagclass>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>disabled</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexed</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>maxlength</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onchange</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>readonly</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>size</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>textarea</name>
+<tagclass>org.apache.struts.taglib.html.TextareaTag</tagclass>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>cols</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>disabled</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexed</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onchange</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>readonly</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>rows</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>xhtml</name>
+<tagclass>org.apache.struts.taglib.html.XhtmlTag</tagclass>
+<bodycontent>empty</bodycontent>
+</tag>
+</taglib>
+

Added: project_src/website/Tomcat/work/web/loader/META-INF/tlds/struts-logic.tld
===================================================================
--- project_src/website/Tomcat/work/web/loader/META-INF/tlds/struts-logic.tld	2004-12-14 18:42:22 UTC (rev 247)
+++ project_src/website/Tomcat/work/web/loader/META-INF/tlds/struts-logic.tld	2004-12-27 13:04:03 UTC (rev 248)
@@ -0,0 +1,642 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+
+
+
+
+
+<!DOCTYPE taglib PUBLIC "-//Sun Microsystems, Inc.//DTD JSP Tag Library 1.1//EN" "http://java.sun.com/j2ee/dtds/web-jsptaglibrary_1_1.dtd">
+<taglib>
+<tlibversion>1.0</tlibversion>
+<jspversion>1.1</jspversion>
+<shortname>logic</shortname>
+<uri>http://jakarta.apache.org/struts/tags-logic</uri>
+<tag>
+<name>empty</name>
+<tagclass>org.apache.struts.taglib.logic.EmptyTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>equal</name>
+<tagclass>org.apache.struts.taglib.logic.EqualTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>cookie</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>header</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>parameter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>forward</name>
+<tagclass>org.apache.struts.taglib.logic.ForwardTag</tagclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>name</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>greaterEqual</name>
+<tagclass>org.apache.struts.taglib.logic.GreaterEqualTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>cookie</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>header</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>parameter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>greaterThan</name>
+<tagclass>org.apache.struts.taglib.logic.GreaterThanTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>cookie</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>header</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>parameter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>iterate</name>
+<tagclass>org.apache.struts.taglib.logic.IterateTag</tagclass>
+<teiclass>org.apache.struts.taglib.logic.IterateTei</teiclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>collection</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>id</name>
+<required>true</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexId</name>
+<required>false</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>length</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>offset</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>type</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>lessEqual</name>
+<tagclass>org.apache.struts.taglib.logic.LessEqualTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>cookie</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>header</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>parameter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>lessThan</name>
+<tagclass>org.apache.struts.taglib.logic.LessThanTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>cookie</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>header</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>parameter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>match</name>
+<tagclass>org.apache.struts.taglib.logic.MatchTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>cookie</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>header</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>location</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>parameter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>messagesNotPresent</name>
+<tagclass>org.apache.struts.taglib.logic.MessagesNotPresentTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>message</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>messagesPresent</name>
+<tagclass>org.apache.struts.taglib.logic.MessagesPresentTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>message</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>notEmpty</name>
+<tagclass>org.apache.struts.taglib.logic.NotEmptyTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>notEqual</name>
+<tagclass>org.apache.struts.taglib.logic.NotEqualTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>cookie</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>header</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>parameter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>notMatch</name>
+<tagclass>org.apache.struts.taglib.logic.NotMatchTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>cookie</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>header</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>location</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>parameter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>notPresent</name>
+<tagclass>org.apache.struts.taglib.logic.NotPresentTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>cookie</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>header</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>parameter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>role</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>user</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>present</name>
+<tagclass>org.apache.struts.taglib.logic.PresentTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>cookie</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>header</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>parameter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>role</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>user</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>redirect</name>
+<tagclass>org.apache.struts.taglib.logic.RedirectTag</tagclass>
+<attribute>
+<name>anchor</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>forward</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>href</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>page</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramName</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramProperty</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramScope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>transaction</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+</taglib>
+
+
+

Added: project_src/website/Tomcat/work/web/loader/META-INF/tlds/struts-nested.tld
===================================================================
--- project_src/website/Tomcat/work/web/loader/META-INF/tlds/struts-nested.tld	2004-12-14 18:42:22 UTC (rev 247)
+++ project_src/website/Tomcat/work/web/loader/META-INF/tlds/struts-nested.tld	2004-12-27 13:04:03 UTC (rev 248)
@@ -0,0 +1,2870 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+
+
+
+
+
+<!DOCTYPE taglib PUBLIC "-//Sun Microsystems, Inc.//DTD JSP Tag Library 1.1//EN" "http://java.sun.com/j2ee/dtds/web-jsptaglibrary_1_1.dtd">
+<taglib>
+<tlibversion>1.0</tlibversion>
+<jspversion>1.1</jspversion>
+<shortname>nested</shortname>
+<uri>http://jakarta.apache.org/struts/tags-nested</uri>
+<tag>
+<name>nest</name>
+<tagclass>org.apache.struts.taglib.nested.NestedPropertyTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>writeNesting</name>
+<tagclass>org.apache.struts.taglib.nested.NestedWriteNestingTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>filter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>root</name>
+<tagclass>org.apache.struts.taglib.nested.NestedRootTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>define</name>
+<tagclass>org.apache.struts.taglib.nested.bean.NestedDefineTag</tagclass>
+<teiclass>org.apache.struts.taglib.nested.bean.NestedDefineTei</teiclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>id</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>toScope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>type</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>message</name>
+<tagclass>org.apache.struts.taglib.nested.bean.NestedMessageTag</tagclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>arg0</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>arg1</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>arg2</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>arg3</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>arg4</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>bundle</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>key</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>locale</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>size</name>
+<tagclass>org.apache.struts.taglib.nested.bean.NestedSizeTag</tagclass>
+<teiclass>org.apache.struts.taglib.bean.SizeTei</teiclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>collection</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>id</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>write</name>
+<tagclass>org.apache.struts.taglib.nested.bean.NestedWriteTag</tagclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>bundle</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>filter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>format</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>formatKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ignore</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>locale</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>checkbox</name>
+<tagclass>org.apache.struts.taglib.nested.html.NestedCheckboxTag</tagclass>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>disabled</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexed</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onchange</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>errors</name>
+<tagclass>org.apache.struts.taglib.nested.html.NestedErrorsTag</tagclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>bundle</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>locale</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>file</name>
+<tagclass>org.apache.struts.taglib.nested.html.NestedFileTag</tagclass>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>accept</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>disabled</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexed</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>maxlength</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onchange</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>size</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>form</name>
+<tagclass>org.apache.struts.taglib.nested.html.NestedFormTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>action</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>enctype</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>focus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>method</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onreset</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onsubmit</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>target</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>type</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>hidden</name>
+<tagclass>org.apache.struts.taglib.nested.html.NestedHiddenTag</tagclass>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexed</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>image</name>
+<tagclass>org.apache.struts.taglib.nested.html.NestedImageTag</tagclass>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>align</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>border</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>bundle</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>disabled</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexed</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>locale</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onchange</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>page</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>pageKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>src</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>srcKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>img</name>
+<tagclass>org.apache.struts.taglib.nested.html.NestedImgTag</tagclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>align</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>border</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>bundle</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>height</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>hspace</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>imageName</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ismap</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>locale</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>lowsrc</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>page</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>pageKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramName</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramProperty</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramScope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>src</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>srcKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>usemap</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>vspace</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>width</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>link</name>
+<tagclass>org.apache.struts.taglib.nested.html.NestedLinkTag</tagclass>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>action</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>anchor</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>forward</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>href</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexed</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>linkName</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>page</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramName</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramProperty</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramScope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>target</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>transaction</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>messages</name>
+<tagclass>org.apache.struts.taglib.nested.html.NestedMessagesTag</tagclass>
+<teiclass>org.apache.struts.taglib.html.MessagesTei</teiclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>id</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>bundle</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>locale</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>header</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>footer</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>message</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>multibox</name>
+<tagclass>org.apache.struts.taglib.nested.html.NestedMultiboxTag</tagclass>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>disabled</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onchange</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>options</name>
+<tagclass>org.apache.struts.taglib.nested.html.NestedOptionsTag</tagclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>collection</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>labelName</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>labelProperty</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>optionsCollection</name>
+<tagclass>org.apache.struts.taglib.nested.html.NestedOptionsCollectionTag</tagclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>label</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>password</name>
+<tagclass>org.apache.struts.taglib.nested.html.NestedPasswordTag</tagclass>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>disabled</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexed</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>maxlength</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onchange</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>readonly</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>redisplay</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>size</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>radio</name>
+<tagclass>org.apache.struts.taglib.nested.html.NestedRadioTag</tagclass>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>disabled</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexed</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onchange</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>select</name>
+<tagclass>org.apache.struts.taglib.nested.html.NestedSelectTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>disabled</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexed</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>multiple</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onchange</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>size</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>submit</name>
+<tagclass>org.apache.struts.taglib.nested.html.NestedSubmitTag</tagclass>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>disabled</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexed</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onchange</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>text</name>
+<tagclass>org.apache.struts.taglib.nested.html.NestedTextTag</tagclass>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>disabled</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexed</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>maxlength</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onchange</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>readonly</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>size</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>textarea</name>
+<tagclass>org.apache.struts.taglib.nested.html.NestedTextareaTag</tagclass>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>cols</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>disabled</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexed</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onchange</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>readonly</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>rows</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>empty</name>
+<tagclass>org.apache.struts.taglib.nested.logic.NestedEmptyTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>equal</name>
+<tagclass>org.apache.struts.taglib.nested.logic.NestedEqualTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>cookie</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>header</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>parameter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>greaterEqual</name>
+<tagclass>org.apache.struts.taglib.nested.logic.NestedGreaterEqualTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>cookie</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>header</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>parameter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>greaterThan</name>
+<tagclass>org.apache.struts.taglib.nested.logic.NestedGreaterThanTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>cookie</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>header</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>parameter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>iterate</name>
+<tagclass>org.apache.struts.taglib.nested.logic.NestedIterateTag</tagclass>
+<teiclass>org.apache.struts.taglib.nested.logic.NestedIterateTei</teiclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>collection</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>id</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>length</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>offset</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>type</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>lessEqual</name>
+<tagclass>org.apache.struts.taglib.nested.logic.NestedLessEqualTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>cookie</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>header</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>parameter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>lessThan</name>
+<tagclass>org.apache.struts.taglib.nested.logic.NestedLessThanTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>cookie</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>header</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>parameter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>match</name>
+<tagclass>org.apache.struts.taglib.nested.logic.NestedMatchTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>cookie</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>header</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>location</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>parameter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>messagesNotPresent</name>
+<tagclass>org.apache.struts.taglib.nested.logic.NestedMessagesNotPresentTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>message</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>messagesPresent</name>
+<tagclass>org.apache.struts.taglib.nested.logic.NestedMessagesPresentTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>message</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>notEmpty</name>
+<tagclass>org.apache.struts.taglib.nested.logic.NestedNotEmptyTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>notEqual</name>
+<tagclass>org.apache.struts.taglib.nested.logic.NestedNotEqualTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>cookie</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>header</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>parameter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>notMatch</name>
+<tagclass>org.apache.struts.taglib.nested.logic.NestedNotMatchTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>cookie</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>header</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>location</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>parameter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>notPresent</name>
+<tagclass>org.apache.struts.taglib.nested.logic.NestedNotPresentTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>cookie</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>header</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>parameter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>role</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>user</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>present</name>
+<tagclass>org.apache.struts.taglib.nested.logic.NestedPresentTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>cookie</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>header</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>parameter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>role</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>user</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+</taglib>
+
+
+

Added: project_src/website/Tomcat/work/web/loader/META-INF/tlds/struts-template.tld
===================================================================
--- project_src/website/Tomcat/work/web/loader/META-INF/tlds/struts-template.tld	2004-12-14 18:42:22 UTC (rev 247)
+++ project_src/website/Tomcat/work/web/loader/META-INF/tlds/struts-template.tld	2004-12-27 13:04:03 UTC (rev 248)
@@ -0,0 +1,73 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+
+
+
+
+
+
+<!DOCTYPE taglib PUBLIC "-//Sun Microsystems, Inc.//DTD JSP Tag Library 1.1//EN" "http://java.sun.com/j2ee/dtds/web-jsptaglibrary_1_1.dtd">
+<taglib>
+<tlibversion>1.0</tlibversion>
+<jspversion>1.1</jspversion>
+<shortname>template</shortname>
+<uri>http://jakarta.apache.org/struts/tags-template</uri>
+<tag>
+<name>insert</name>
+<tagclass>org.apache.struts.taglib.template.InsertTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>template</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>put</name>
+<tagclass>org.apache.struts.taglib.template.PutTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>name</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>role</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>content</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>direct</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>get</name>
+<tagclass>org.apache.struts.taglib.template.GetTag</tagclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>flush</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>role</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+</taglib>
+
+
+

Added: project_src/website/Tomcat/work/web/loader/META-INF/tlds/struts-tiles.tld
===================================================================
--- project_src/website/Tomcat/work/web/loader/META-INF/tlds/struts-tiles.tld	2004-12-14 18:42:22 UTC (rev 247)
+++ project_src/website/Tomcat/work/web/loader/META-INF/tlds/struts-tiles.tld	2004-12-27 13:04:03 UTC (rev 248)
@@ -0,0 +1,344 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+
+
+
+
+
+
+<!DOCTYPE taglib PUBLIC "-//Sun Microsystems, Inc.//DTD JSP Tag Library 1.1//EN" "http://java.sun.com/j2ee/dtds/web-jsptaglibrary_1_1.dtd">
+<taglib>
+<tlibversion>1.0</tlibversion>
+<jspversion>1.1</jspversion>
+<shortname>tiles</shortname>
+<uri>http://jakarta.apache.org/struts/tags-tiles</uri>
+<tag>
+<name>insert</name>
+<tagclass>org.apache.struts.taglib.tiles.InsertTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>template</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>component</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>page</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>definition</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>attribute</name>
+<required>false</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>beanName</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>beanProperty</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>beanScope</name>
+<required>false</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>flush</name>
+<required>false</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>ignore</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>role</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>controllerUrl</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>controllerClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>definition</name>
+<tagclass>org.apache.struts.taglib.tiles.DefinitionTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>id</name>
+<required>true</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>template</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>page</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>role</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>extends</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>put</name>
+<tagclass>org.apache.struts.taglib.tiles.PutTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>content</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>direct</name>
+<required>false</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>type</name>
+<required>false</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>beanName</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>beanProperty</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>beanScope</name>
+<required>false</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>role</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>putList</name>
+<tagclass>org.apache.struts.taglib.tiles.PutListTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>name</name>
+<required>true</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>add</name>
+<tagclass>org.apache.struts.taglib.tiles.AddTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>content</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>direct</name>
+<required>false</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>type</name>
+<required>false</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>beanName</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>beanProperty</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>beanScope</name>
+<required>false</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>role</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>get</name>
+<tagclass>org.apache.struts.taglib.tiles.GetTag</tagclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>name</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ignore</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>flush</name>
+<required>false</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>role</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>getAsString</name>
+<tagclass>org.apache.struts.taglib.tiles.GetAttributeTag</tagclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>name</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ignore</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>role</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>useAttribute</name>
+<tagclass>org.apache.struts.taglib.tiles.UseAttributeTag</tagclass>
+<teiclass>org.apache.struts.taglib.tiles.UseAttributeTei</teiclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>id</name>
+<required>false</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>classname</name>
+<required>false</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ignore</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>importAttribute</name>
+<tagclass>org.apache.struts.taglib.tiles.ImportAttributeTag</tagclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>ignore</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>initComponentDefinitions</name>
+<tagclass>org.apache.struts.taglib.tiles.InitDefinitionsTag</tagclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>file</name>
+<required>true</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>classname</name>
+<required>false</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+</tag>
+</taglib>
+
+
+

Added: project_src/website/Tomcat/work/web/loader/org/apache/commons/validator/package.html
===================================================================
--- project_src/website/Tomcat/work/web/loader/org/apache/commons/validator/package.html	2004-12-14 18:42:22 UTC (rev 247)
+++ project_src/website/Tomcat/work/web/loader/org/apache/commons/validator/package.html	2004-12-27 13:04:03 UTC (rev 248)
@@ -0,0 +1,544 @@
+<html>
+
+<head>
+
+   <title>Package Documentation for org.apache.commons.validator</title>
+
+</head>
+
+<body bgcolor="white">
+
+The Validator package provides validation for JavaBeans based on an xml file.
+
+<br><br>
+
+<a name="doc.Description"></a>
+
+<div align="center">
+
+<a href="#doc.Depend">[Dependencies]</a>
+
+<a href="#doc.Intro">[Introduction]</a>
+
+<a href="#doc.Overview">[Overview]</a>
+
+<a href="#doc.Resources">[Resources]</a>
+
+<a href="#doc.Usage">[Usage Example]</a>
+
+</div>
+
+
+
+<a name="doc.Depend"></a>
+
+<h3>External Dependencies</h3>
+
+
+
+<ul>
+
+  <li>
+
+    <a href="http://jakarta.apache.org/builds/jakarta-commons/release/commons-beanutils">
+
+    Beanutils Package (Jakarta Commons)</a>, version 1.0 or later
+
+  </li>
+
+  <li>
+
+    <a href="http://jakarta.apache.org/builds/jakarta-commons/release/commons-collections">
+
+    Collections Package (Jakarta Commons)</a>, version 1.0 or later
+
+  </li>
+
+  <li>
+
+    <a href="http://jakarta.apache.org/builds/jakarta-commons/release/commons-digester">
+
+    Digester Package (Jakarta Commons)</a>, version 1.0 or later
+
+  </li>
+
+  <li>
+
+    <a href="http://jakarta.apache.org/builds/jakarta-commons/release/commons-logging">
+
+    Logging Package (Jakarta Commons)</a>, version 1.0 or later
+
+  </li>
+
+  <li>An xml parser conforming to
+
+    <a href="http://www.megginson.com/SAX/">SAX 2.0</a> for the Commons Digester
+
+  </li>
+
+  <li>Optionally, an XML parser conforming to
+
+    <a href="http://java.sun.com/products/xml">JAXP
+
+    </a>, version 1.1 or later (the first one to support SAX 2.0) 
+
+     for the Commons Digester
+
+  </li>
+
+
+
+</ul>
+
+
+
+<a name="doc.Intro"></a>
+
+<h3>Introduction</h3>
+
+
+
+<p>A common issue when receiving data either electronically or from 
+
+user input is verifying the integrity of the data.  This work is 
+
+repetitive and becomes even more complicated when different sets 
+
+of validation rules need to be applied to the same set of data based 
+
+on locale for example.  Error messages may also vary by locale.  
+
+This package attempts to address some of these issues and 
+
+speed development and maintenance of validation rules.
+
+</p>
+
+
+
+<p>In order to use the Validator, the following basic steps are required:</p>
+
+<ul>
+
+   <li>Create a new instance of the
+
+       <code>org.apache.commons.validator.Validator</code> class.  Currently 
+
+       Validator instances may be safely reused if the current ValidatorResources 
+
+       are the same, as long as 
+
+       you have completed any previous validation, and you do not try to utilize
+
+       a particular Validator instance from more than one thread at a time.</li>
+
+   <li>Add any <a href="#doc.Resources">resources</a>
+
+       needed to perform the validations.  Such as the JavaBean to validate.</li>
+
+   <li>Call the validate method on <code>org.apache.commons.validator.Validator</code>.</li>
+
+</ul>
+
+
+
+<a name="doc.Overview"></a>
+
+<h3>Overview</h3>
+
+<p>
+
+   The Commons Validator is a basic validation framework that 
+
+   lets you define validation rules for a JavaBean in an xml file.  
+
+   Validators, the validation definition, can also be defined in 
+
+   the xml file.  An example of a validator would be defining 
+
+   what method and class will be called to perform the validation 
+
+   for a required field.  Validation rules can be grouped together 
+
+   based on locale and a JavaBean/Form that the rules are associated 
+
+   with.  The framework has basic support for user defined constants 
+
+   which can be used in some field attributes. 
+
+</p>
+
+<p>
+
+   Validation rules can be defined in an xml file which keeps 
+
+   them abstracted from JavaBean you are validating.  The 
+
+   property reference to a field supports nested properties 
+
+   using the Jakarta Commons BeanUtils 
+
+   (http://jakarta.apache.org/commons/beanutils.html) package.  
+
+   Error messages and the arguments for error messages can be 
+
+   associated with a fields validation.
+
+</p>
+
+
+
+<a name="doc.Resources"></a>
+
+<h3>Resources</h3>
+
+<p>
+
+   After a Validator instance is created, instances of 
+
+   classes can be added to it to be passed into 
+
+   validation methods by calling the addResource 
+
+   method.  Below is a list of reserved keys (class names).
+
+</p>
+
+
+
+<table width="100%" border="1" cellspacing="5">
+
+   <tr>
+
+      <th>Class Name</th>
+
+      <th>Validator Contant</th>
+
+      <th>Description</th>
+
+   </tr>
+
+   <tr>
+
+      <td>java.lang.Object</td>
+
+      <td>Validator.BEAN_KEY</td>
+
+      <td>JavaBean that is being validated</td>
+
+   </tr>
+
+   <tr>
+
+      <td>java.util.Locale</td>
+
+      <td>Validator.LOCALE_KEY</td>
+
+      <td>
+
+         Locale to use when retrieving a FormSet.  
+
+         The default locale will be used if one 
+
+         isn't specified.
+
+      </td>
+
+   </tr>
+
+   <tr>
+
+      <td>org.apache.commons.validator.ValidatorAction</td>
+
+      <td>Validator.VALIDATOR_ACTION_KEY</td>
+
+      <td>
+
+         This is automatically added to a Validator's  
+
+         resources as a validation is being processed. 
+
+         If this class name is used when defining 
+
+         a method signature for a pluggable validator, 
+
+         the current ValidatorAction will be passed into 
+
+         the validation method.
+
+      </td>
+
+   </tr>
+
+   <tr>
+
+      <td>org.apache.commons.validator.Field</td>
+
+      <td>Validator.FIELD_KEY</td>
+
+      <td>
+
+         This is automatically added to a Validator's  
+
+         resources as a validation is being processed. 
+
+         If this class name is used when defining 
+
+         a method signature for a pluggable validator, 
+
+         the current Field will be passed into 
+
+         the validation method.
+
+      </td>
+
+   </tr>
+
+</table>
+
+
+
+
+
+<a name="doc.Usage"></a>
+
+<h3>Usage Example</h3>
+
+<p>
+
+   This is a basic example setting up a required validator for 
+
+   a name bean.  This example is a working unit test (reference 
+
+   <code>org.apache.commons.validator.RequiredNameTest</code> and 
+
+   validator-name-required.xml located under validator/src/test).
+
+</p>
+
+<p>
+
+   Create an xml file with your validator and validation rules. 
+
+   Setup your required validator in your xml file.<br>
+
+   <br>
+
+   <a href="#doc.Usage.xml">XML Example</a><br>
+
+   <a href="#doc.Usage.validator">Validator Example</a><br>
+
+   <a href="#doc.Usage.pluggableValidator">Pluggable Validator Example</a>
+
+</p>
+
+
+
+<a name="doc.Usage.xml"></a>
+
+<h4>XML Example</h4>
+
+<p>
+
+   Definition of a 'required' pluggable validator.<br>
+
+   <br>
+
+   &lt;form-validation&gt; <br>
+
+   &nbsp;&nbsp;&nbsp;&lt;global&gt; <br>
+
+   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;validator name="required" <br>
+
+   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; classname="org.apache.commons.validator.TestValidator" <br>
+
+   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; method="validateRequired" <br>
+
+   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; methodParams="java.lang.Object,
+
+                                    org.apache.commons.validator.Field"/&gt; <br>
+
+
+
+   &nbsp;&nbsp;&nbsp; &lt;/global&gt; <br>
+
+   &nbsp;&nbsp;&nbsp; &lt;formset&gt; <br>
+
+   &nbsp;&nbsp;&nbsp; &lt;/formset&gt; <br>
+
+   &lt;/form-validation&gt; <br>
+
+
+
+</p>
+
+<p>
+
+   Add validation rules to require a first name and a last name.<br>
+
+   <br>
+
+   &lt;form-validation&gt; <br>
+
+   &nbsp;&nbsp;&nbsp;&lt;global&gt; <br>
+
+   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;validator name="required" <br>
+
+   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; classname="org.apache.commons.validator.TestValidator" <br>
+
+   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; method="validateRequired" <br>
+
+   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; methodParams="java.lang.Object,
+
+                                    org.apache.commons.validator.Field"/&gt; <br>
+
+
+
+   &nbsp;&nbsp;&nbsp; &lt;/global&gt; <br>
+
+<b>
+
+   &nbsp;&nbsp;&nbsp; &lt;formset&gt; <br>
+
+   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;form    name="nameForm"&gt; <br>
+
+   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    &lt;field    property="firstName" 
+
+                                                        depends="required"&gt; <br>
+
+   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    	     &lt;arg0 key="nameForm.firstname.displayname"/&gt; <br>
+
+   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    &lt;/field&gt; <br>
+
+   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    &lt;field    property="lastName" 
+
+                                                             depends="required"&gt; <br>
+
+   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    	     &lt;arg0 key="nameForm.lastname.displayname"/&gt; <br>
+
+   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    &lt;/field&gt; <br>
+
+   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/form&gt; <br>
+
+   &nbsp;&nbsp;&nbsp; &lt;/formset&gt; <br>
+
+</b>
+
+   &lt;/form-validation&gt; <br>
+
+</p>
+
+
+
+<a name="doc.Usage.validator"></a>
+
+<h4>Validator Example</h4>
+
+<p>
+
+Excerpts from org.apache.commons.validator.RequiredNameTest
+
+</p>
+
+<p>
+
+InputStream in = this.getClass().getResourceAsStream("validator-name-required.xml");<br>
+
+<br>
+
+// Create an instance of ValidatorResources to <br>
+
+// initialize from an xml file. <br>
+
+ValidatorResources resources = new ValidatorResources();<br>
+
+<br>
+
+// Load resources into ValidatorResources passed in <br>
+
+ValidatorResourcesInitializer.initialize(resources, in);<br>
+
+</p>
+
+<p>
+
+// Create bean to run test on.<br>
+
+Name name = new Name();<br>
+
+<br>
+
+      // Construct validator based on the loaded resources <br>
+
+      // and the form key<br>
+
+      Validator validator = new Validator(resources, "nameForm");<br>
+
+      // add the name bean to the validator as a resource <br>
+
+      // for the validations to be performed on.<br>
+
+      validator.addResource(Validator.BEAN_KEY, name);<br>
+
+<br>
+
+      // Get results of the validation.<br>
+
+      Map hResults = null;<br>
+
+      <br>
+
+      // throws ValidatorException, <br>
+
+      // but aren't catching for example <br>
+
+      hResults = validator.validate();<br>
+
+      <br>
+
+      if (hResults.get("firstName") == null) { <br>
+
+&nbsp;&nbsp;&nbsp; // no error <br>
+
+      } else {<br>
+
+&nbsp;&nbsp;&nbsp; // number of errors for first name
+
+&nbsp;&nbsp;&nbsp; int errors = ((Integer)hResults.get("firstName")).intValue();<br>
+
+      } <br>
+
+</p>
+
+
+
+<a name="doc.Usage.pluggableValidator"></a>
+
+<h4>Pluggable Validator Example</h4>
+
+<p>
+
+Validation method defined in the 'required' pluggable validator 
+
+(excerpt from org.apache.commons.validator.TestValidator).
+
+</p>
+
+
+
+<p>
+
+                   public static boolean validateRequired(Object bean, Field field) {<br>
+
+&nbsp;&nbsp;&nbsp;    String value = ValidatorUtil.getValueAsString(bean, field.getProperty());<br>
+
+&nbsp;&nbsp;&nbsp;    return GenericValidator.isBlankOrNull(value);<br>
+
+                   }<br>
+
+</p>
+
+</body>
+
+</html>
+

Added: project_src/website/Tomcat/work/web/loader/org/apache/commons/validator/resources/validator_1_0.dtd
===================================================================
--- project_src/website/Tomcat/work/web/loader/org/apache/commons/validator/resources/validator_1_0.dtd	2004-12-14 18:42:22 UTC (rev 247)
+++ project_src/website/Tomcat/work/web/loader/org/apache/commons/validator/resources/validator_1_0.dtd	2004-12-27 13:04:03 UTC (rev 248)
@@ -0,0 +1,246 @@
+<!--
+    DTD for the Validator Rules Configuration File, Version 1.0
+
+    To allow for XML validation of your rules configuration
+    file, include the following DOCTYPE element at the beginning (after
+    the "xml" declaration):
+
+    <!DOCTYPE form-validation PUBLIC
+     "-//Apache Software Foundation//DTD Commons Validator Rules Configuration 1.0//EN"
+     "http://jakarta.apache.org/commons/dtds/validator_1_0.dtd">
+
+    $Id: validator_1_0.dtd,v 1.4 2002/10/23 01:32:01 turner Exp $
+-->
+
+
+<!-- =================================================== Top Level Elements -->
+
+
+<!--
+     The "form-validation" element is the root of the configuration file
+     hierarchy, and contains nested elements for all of the other
+     configuration settings.
+-->
+<!ELEMENT form-validation (global*, formset*)>
+
+
+<!--
+    The elements defined here are all global and must be nested within a
+    "global" element.
+-->
+<!ELEMENT global (validator*, constant*)>
+
+
+<!--
+     The "validator" element defines what validators objects can be used with
+     the fields referenced by the formset elements. The validator element can
+     accept 4 properties: name, classname, method, methodparams, msg, depends,
+     and jsFunctionName.
+-->
+<!ELEMENT validator (javascript?)>
+<!ATTLIST validator name           CDATA #REQUIRED
+                    classname      CDATA #REQUIRED
+                    method         CDATA #REQUIRED
+                    methodParams   CDATA #REQUIRED
+                    msg            CDATA #REQUIRED
+                    depends        CDATA #IMPLIED
+                    jsFunctionName CDATA #IMPLIED >
+
+
+<!--
+     The "javascript" element defines a JavaScript that can be used to perform
+     client-side validators.
+-->
+<!ELEMENT javascript (#PCDATA)>
+
+
+<!--
+     The "constant" element defines a static value that can be used as
+     replacement parameters within "field" elements. The "constant-name" and
+     "constant-value" elements define the constant's reference id and replacement
+     value.
+-->
+<!ELEMENT constant (constant-name, constant-value)>
+<!ELEMENT constant-name  (#PCDATA)>
+<!ELEMENT constant-value (#PCDATA)>
+
+
+<!--
+      The "formset" element defines a set of forms for a locale. Formsets for
+      specific locales can override only those fields that change. The
+      localization is properly scoped, so that a formset can override just the
+      language, or just the country, or both.
+-->
+<!ELEMENT formset (constant*, form+)>
+<!ATTLIST formset language     CDATA #IMPLIED
+                  country      CDATA #IMPLIED >
+
+
+<!--
+     The "form" element defines a set of fields to be validated. The name
+     corresponds to the identifer the application assigns to the form. 
+-->
+<!ELEMENT form    (field+ )>
+<!ATTLIST form    name         CDATA #REQUIRED>
+
+
+<!--
+     The "field" element defines the properties to be validated. In a
+     web application, a field would also correspond to a control on
+     a HTML form. To validate the properties, the validator works through
+     a JavaBean representation. The field element can accept up to 4 
+     attributes:
+
+     property        The property on the JavaBean corresponding to this
+                     field element.
+
+     depends         The comma-delimited list of validators to apply against
+                     this field. For the field to succeed, all the
+                     validators must succeed.
+
+     page            The JavaBean corresponding to this form may include
+                     a page property. Only fields with a "page" attribute
+                     value that is equal to or less than the page property
+                     on the form JavaBean are processed. This is useful when
+                     using a "wizard" approach to completing a large form,
+                     to ensure that a page is not skipped.
+                     [0]
+
+     indexedListProperty
+                     The "indexedListProperty" is the method name that will
+                     return an array or a Collection used to retrieve the
+                     list and then loop through the list performing the
+                     validations for this field.
+
+-->
+<!ELEMENT field   (msg|arg0|arg1|arg2|arg3|var)*>
+<!ATTLIST field   property CDATA #REQUIRED
+                  depends  CDATA #IMPLIED
+                  page     CDATA #IMPLIED
+                  indexedListProperty CDATA #IMPLIED >
+
+
+<!--
+     The "msg" element defines a custom message key to use when one of the
+     validators for this field fails. Each validator has a default message
+     property that is used when a corresonding field msg is not specified.
+     Each validator applied to a field may have its own msg element.
+     The msg element accepts up to three attributes.
+
+      name        The name of the validator corresponding to this msg.
+
+      key         The key that will return the message template from a
+                  resource bundle.
+
+      resource    If set to "false", the key is taken to be a literal
+                  value rather than a bundle key.
+                  [true]
+-->
+<!ELEMENT msg     EMPTY>
+<!ATTLIST msg     name     CDATA #IMPLIED
+                  key      CDATA #IMPLIED
+                  resource CDATA #IMPLIED >
+
+
+<!--
+     The "arg0" element defines the first replacement value to use with the
+     message template for this validator or this field.
+     The arg0 element accepts up to three attributes.
+
+      name        The name of the validator corresponding to this msg.
+
+      key         The key that will return the message template from a
+                  resource bundle.
+
+      resource    If set to "false", the key is taken to be a literal
+                  value rather than a bundle key.
+                  [true]
+-->
+<!ELEMENT arg0    EMPTY>
+<!ATTLIST arg0    name     CDATA #IMPLIED
+                  key      CDATA #IMPLIED
+                  resource CDATA #IMPLIED >
+
+
+<!--
+     The "arg1" element defines the second replacement value to use with the
+     message template for this validator or this field.
+     The arg1 element accepts up to three attributes.
+
+      name        The name of the validator corresponding to this msg.
+
+      key         The key that will return the message template from a
+                  resource bundle.
+
+      resource    If set to "false", the key is taken to be a literal
+                  value rather than a bundle key.
+                  [true]
+-->
+<!ELEMENT arg1    EMPTY>
+<!ATTLIST arg1    name     CDATA #IMPLIED
+                  key      CDATA #IMPLIED
+                  resource CDATA #IMPLIED >
+
+
+<!--
+     The "arg2" element defines the third replacement value to use with the
+     message template for this validator or this field.
+     The arg2 element accepts up to three attributes.
+
+      name        The name of the validator corresponding to this msg.
+
+      key         The key that will return the message template from a
+                  resource bundle.
+
+      resource    If set to "false", the key is taken to be a literal
+                  value rather than a bundle key.
+                  [true]
+-->
+<!ELEMENT arg2    EMPTY>
+<!ATTLIST arg2    name     CDATA #IMPLIED
+                  key      CDATA #IMPLIED
+                  resource CDATA #IMPLIED >
+
+<!--
+     The "arg3" element defines the fourth replacement value to use with the
+     message template for this validator or this field.
+     The arg0 element accepts up to three attributes.
+
+      name        The name of the validator corresponding to this msg.
+
+      key         The key that will return the message template from a
+                  resource bundle.
+
+      resource    If set to "false", the key is taken to be a literal
+                  value rather than a bundle key.
+                  [true]
+-->
+<!ELEMENT arg3    EMPTY>
+<!ATTLIST arg3    name     CDATA #IMPLIED
+                  key      CDATA #IMPLIED
+                  resource CDATA #IMPLIED >
+
+
+<!--
+     The "var" element can set parameters that a field may need to pass to
+     one of its validators, such as the minimum and maximum values in a
+     range validation. These parameters may also be referenced by one of the
+     arg? elements using a shell syntax: ${var:var-name}.
+-->
+<!ELEMENT var (var-name, var-value)>
+
+
+
+<!--
+     The name of the var parameter to provide to a field's validators.
+-->
+<!ELEMENT var-name  (#PCDATA)>
+
+
+
+<!--
+     The value of the var parameter to provide to a field's validators.
+-->
+<!ELEMENT var-value (#PCDATA)>
+
+<!-- eof -->

Added: project_src/website/Tomcat/work/web/loader/org/apache/commons/validator/resources/validator_1_0_1.dtd
===================================================================
--- project_src/website/Tomcat/work/web/loader/org/apache/commons/validator/resources/validator_1_0_1.dtd	2004-12-14 18:42:22 UTC (rev 247)
+++ project_src/website/Tomcat/work/web/loader/org/apache/commons/validator/resources/validator_1_0_1.dtd	2004-12-27 13:04:03 UTC (rev 248)
@@ -0,0 +1,245 @@
+<!--
+    DTD for the Validator Rules Configuration File, Version 1.0.1
+
+    To allow for XML validation of your rules configuration
+    file, include the following DOCTYPE element at the beginning (after
+    the "xml" declaration):
+
+    <!DOCTYPE form-validation PUBLIC
+     "-//Apache Software Foundation//DTD Commons Validator Rules Configuration 1.0.1//EN"
+     "http://jakarta.apache.org/commons/dtds/validator_1_0_1.dtd">
+
+    $Id: validator_1_0_1.dtd,v 1.3 2003/03/15 23:07:06 dgraham Exp $
+-->
+
+
+<!-- =================================================== Top Level Elements -->
+
+
+<!--
+     The "form-validation" element is the root of the configuration file
+     hierarchy, and contains nested elements for all of the other
+     configuration settings.
+-->
+<!ELEMENT form-validation (global*, formset*)>
+
+
+<!--
+    The elements defined here are all global and must be nested within a
+    "global" element.
+-->
+<!ELEMENT global (validator*, constant*)>
+
+
+<!--
+     The "validator" element defines what validator objects can be used with
+     the fields referenced by the formset elements.
+-->
+<!ELEMENT validator (javascript?)>
+<!ATTLIST validator name           CDATA #REQUIRED
+                    classname      CDATA #REQUIRED
+                    method         CDATA #REQUIRED
+                    methodParams   CDATA #REQUIRED
+                    msg            CDATA #REQUIRED
+                    depends        CDATA #IMPLIED
+                    jsFunctionName CDATA #IMPLIED >
+
+
+<!--
+     The "javascript" element defines a JavaScript that can be used to perform
+     client-side validators.
+-->
+<!ELEMENT javascript (#PCDATA)>
+
+
+<!--
+     The "constant" element defines a static value that can be used as
+     replacement parameters within "field" elements. The "constant-name" and
+     "constant-value" elements define the constant's reference id and replacement
+     value.
+-->
+<!ELEMENT constant (constant-name, constant-value)>
+<!ELEMENT constant-name  (#PCDATA)>
+<!ELEMENT constant-value (#PCDATA)>
+
+
+<!--
+      The "formset" element defines a set of forms for a locale. Formsets for
+      specific locales can override only those fields that change. The
+      localization is properly scoped, so that a formset can override just the
+      language, or just the country, or both.
+-->
+<!ELEMENT formset (constant*, form+)>
+<!ATTLIST formset language     CDATA #IMPLIED
+                  country      CDATA #IMPLIED 
+                  variant      CDATA #IMPLIED >
+
+
+<!--
+     The "form" element defines a set of fields to be validated. The name
+     corresponds to the identifer the application assigns to the form. 
+-->
+<!ELEMENT form    (field+ )>
+<!ATTLIST form    name         CDATA #REQUIRED>
+
+
+<!--
+     The "field" element defines the properties to be validated. In a
+     web application, a field would also correspond to a control on
+     a HTML form. To validate the properties, the validator works through
+     a JavaBean representation. The field element can accept up to 4 
+     attributes:
+
+     property        The property on the JavaBean corresponding to this
+                     field element.
+
+     depends         The comma-delimited list of validators to apply against
+                     this field. For the field to succeed, all the
+                     validators must succeed.
+
+     page            The JavaBean corresponding to this form may include
+                     a page property. Only fields with a "page" attribute
+                     value that is equal to or less than the page property
+                     on the form JavaBean are processed. This is useful when
+                     using a "wizard" approach to completing a large form,
+                     to ensure that a page is not skipped.
+                     [0]
+
+     indexedListProperty
+                     The "indexedListProperty" is the method name that will
+                     return an array or a Collection used to retrieve the
+                     list and then loop through the list performing the
+                     validations for this field.
+
+-->
+<!ELEMENT field   (msg|arg0|arg1|arg2|arg3|var)*>
+<!ATTLIST field   property CDATA #REQUIRED
+                  depends  CDATA #IMPLIED
+                  page     CDATA #IMPLIED
+                  indexedListProperty CDATA #IMPLIED >
+
+
+<!--
+     The "msg" element defines a custom message key to use when one of the
+     validators for this field fails. Each validator has a default message
+     property that is used when a corresonding field msg is not specified.
+     Each validator applied to a field may have its own msg element.
+     The msg element accepts up to three attributes.
+
+      name        The name of the validator corresponding to this msg.
+
+      key         The key that will return the message template from a
+                  resource bundle.
+
+      resource    If set to "false", the key is taken to be a literal
+                  value rather than a bundle key.
+                  [true]
+-->
+<!ELEMENT msg     EMPTY>
+<!ATTLIST msg     name     CDATA #IMPLIED
+                  key      CDATA #IMPLIED
+                  resource CDATA #IMPLIED >
+
+
+<!--
+     The "arg0" element defines the first replacement value to use with the
+     message template for this validator or this field.
+     The arg0 element accepts up to three attributes.
+
+      name        The name of the validator corresponding to this msg.
+
+      key         The key that will return the message template from a
+                  resource bundle.
+
+      resource    If set to "false", the key is taken to be a literal
+                  value rather than a bundle key.
+                  [true]
+-->
+<!ELEMENT arg0    EMPTY>
+<!ATTLIST arg0    name     CDATA #IMPLIED
+                  key      CDATA #IMPLIED
+                  resource CDATA #IMPLIED >
+
+
+<!--
+     The "arg1" element defines the second replacement value to use with the
+     message template for this validator or this field.
+     The arg1 element accepts up to three attributes.
+
+      name        The name of the validator corresponding to this msg.
+
+      key         The key that will return the message template from a
+                  resource bundle.
+
+      resource    If set to "false", the key is taken to be a literal
+                  value rather than a bundle key.
+                  [true]
+-->
+<!ELEMENT arg1    EMPTY>
+<!ATTLIST arg1    name     CDATA #IMPLIED
+                  key      CDATA #IMPLIED
+                  resource CDATA #IMPLIED >
+
+
+<!--
+     The "arg2" element defines the third replacement value to use with the
+     message template for this validator or this field.
+     The arg2 element accepts up to three attributes.
+
+      name        The name of the validator corresponding to this msg.
+
+      key         The key that will return the message template from a
+                  resource bundle.
+
+      resource    If set to "false", the key is taken to be a literal
+                  value rather than a bundle key.
+                  [true]
+-->
+<!ELEMENT arg2    EMPTY>
+<!ATTLIST arg2    name     CDATA #IMPLIED
+                  key      CDATA #IMPLIED
+                  resource CDATA #IMPLIED >
+
+<!--
+     The "arg3" element defines the fourth replacement value to use with the
+     message template for this validator or this field.
+     The arg0 element accepts up to three attributes.
+
+      name        The name of the validator corresponding to this msg.
+
+      key         The key that will return the message template from a
+                  resource bundle.
+
+      resource    If set to "false", the key is taken to be a literal
+                  value rather than a bundle key.
+                  [true]
+-->
+<!ELEMENT arg3    EMPTY>
+<!ATTLIST arg3    name     CDATA #IMPLIED
+                  key      CDATA #IMPLIED
+                  resource CDATA #IMPLIED >
+
+
+<!--
+     The "var" element can set parameters that a field may need to pass to
+     one of its validators, such as the minimum and maximum values in a
+     range validation. These parameters may also be referenced by one of the
+     arg? elements using a shell syntax: ${var:var-name}.
+-->
+<!ELEMENT var (var-name, var-value)>
+
+
+
+<!--
+     The name of the var parameter to provide to a field's validators.
+-->
+<!ELEMENT var-name  (#PCDATA)>
+
+
+
+<!--
+     The value of the var parameter to provide to a field's validators.
+-->
+<!ELEMENT var-value (#PCDATA)>
+
+<!-- eof -->

Added: project_src/website/Tomcat/work/web/loader/org/apache/struts/action/ActionResources.properties
===================================================================
--- project_src/website/Tomcat/work/web/loader/org/apache/struts/action/ActionResources.properties	2004-12-14 18:42:22 UTC (rev 247)
+++ project_src/website/Tomcat/work/web/loader/org/apache/struts/action/ActionResources.properties	2004-12-27 13:04:03 UTC (rev 248)
@@ -0,0 +1,36 @@
+actionCreate=No action instance for path {0} could be created
+applicationLoading=Loading application resources from resource {0}
+applicationResources=Cannot load application resources bundle {0}
+configCompleted=Verification of ModuleConfig has been completed
+configFatal=Fatal module configuration error, see previous messages
+configInit=Initializing configuration from resource path {0}
+configIO=Input/output error reading configuration from resource path {0}
+configMapping=Configuring mapping for path {0}
+configMissing=Missing configuration resource for path {0}
+configParse=Parsing error processing resource path {0}
+configVerifying=Verifying ModuleConfig for this application module
+dataSource.destroy=Finalizing application data source {0}
+dataSource.init=Initializing application data source {0}
+destroyDataSource=Exception destroying application data source {0}
+finalizing=Finalizing this controller servlet
+formBean=Error creating form bean of class {0}
+initDataSource=Exception initializing application data source {0}
+initProcessor=Exception initializing RequestProcessor
+mappingType=Must specify one of "forward", "include" or "type" for path {0}
+notAuthorized=User is not authorized to access action {0}
+noInput=No input attribute for mapping path {0}
+processInvalid=Invalid path {0} was requested
+processPath=No process path found in request URI {0}
+reloading=Reloading from configuration files
+requestDispatcher=Cannot get request dispatcher for path {0}
+sessionCreate=No user session could be created
+unhandledException=Unhandled Exception thrown: {0}
+verifyActionMappingClass.invalid=Invalid ActionMapping class {0} specified
+verifyActionMappingClass.missing=No ActionMapping implementation class specified
+verifyForwardConfig.invalid=Invalid path {0} for ForwardConfig {1}
+verifyForwardConfig.missing=Missing path for ForwardConfig {0}
+verifyMessageResourcesConfigs.invalid=Invalid factory class {0} for MessageResourcesConfig
+verifyMessageResourcesConfigs.key=No key attribute for MessageResourcesConfig
+verifyMessageResourcesConfigs.missing=No factory attribute for MessageResourcesConfig
+verifyPlugInConfigs.invalid=Invalid className {0} for PlugInConfig
+verifyPlugInConfigs.missing=No className attribute for PlugInConfig

Added: project_src/website/Tomcat/work/web/loader/org/apache/struts/action/LocalStrings.properties
===================================================================
--- project_src/website/Tomcat/work/web/loader/org/apache/struts/action/LocalStrings.properties	2004-12-14 18:42:22 UTC (rev 247)
+++ project_src/website/Tomcat/work/web/loader/org/apache/struts/action/LocalStrings.properties	2004-12-27 13:04:03 UTC (rev 248)
@@ -0,0 +1,5 @@
+dispatch.error=Dispatch[{0}] to method {1} returned an exception
+dispatch.handler=DispatchMapping[{0}] does not define a handler property
+dispatch.method=Action[{0}] does not contain method named {1}
+dispatch.parameter=Request[{0}] does not contain handler parameter named {1}
+dispatch.return=Action[{0}] invalid return type for method {1}

Added: project_src/website/Tomcat/work/web/loader/org/apache/struts/actions/LocalStrings.properties
===================================================================
--- project_src/website/Tomcat/work/web/loader/org/apache/struts/actions/LocalStrings.properties	2004-12-14 18:42:22 UTC (rev 247)
+++ project_src/website/Tomcat/work/web/loader/org/apache/struts/actions/LocalStrings.properties	2004-12-27 13:04:03 UTC (rev 248)
@@ -0,0 +1,12 @@
+dispatch.error=Dispatch[{0}] to method {1} returned an exception
+dispatch.handler=DispatchMapping[{0}] does not define a handler property
+dispatch.mapping=ActionMapping[{0}] is not of type DispatchMapping
+dispatch.method=Action[{0}] does not contain method named {1}
+dispatch.parameter=Request[{0}] does not contain handler parameter named {1}
+dispatch.return=Action[{0}] invalid return type for method {1}
+forward.path=No context-relative URI specified via the 'parameter' attribute
+forward.rd=Cannot create request dispatcher for path {0}
+include.path=No context-relative URI specified via the 'parameter' attribute
+include.rd=Cannot create request dispatcher for path {0}
+switch.prefix=Invalid module prefix {0} was specified
+switch.required=Switch requires both 'prefix' and 'page' request parameters

Added: project_src/website/Tomcat/work/web/loader/org/apache/struts/resources/struts-config_1_0.dtd
===================================================================
--- project_src/website/Tomcat/work/web/loader/org/apache/struts/resources/struts-config_1_0.dtd	2004-12-14 18:42:22 UTC (rev 247)
+++ project_src/website/Tomcat/work/web/loader/org/apache/struts/resources/struts-config_1_0.dtd	2004-12-27 13:04:03 UTC (rev 248)
@@ -0,0 +1,408 @@
+<?xml version="1.0" encoding="ISO-8859-1"?>
+
+
+<!--
+     DTD for the Struts Application Configuration File, Version 1.0
+
+     To support validation of your configuration file, include the following
+     DOCTYPE element at the beginning (after the "xml" declaration):
+
+     <!DOCTYPE struts-config PUBLIC
+       "-//Apache Software Foundation//DTD Struts Configuration 1.0//EN"
+       "http://jakarta.apache.org/struts/dtds/struts-config_1_0.dtd">
+
+     $Id: struts-config_1_0.dtd,v 1.5 2001/06/02 18:20:47 craigmcc Exp $
+-->
+
+
+<!-- ========== Defined Types ============================================= -->
+
+
+<!-- A "BeanName" is the identifier of a JavaBean, such as a form bean,
+     and also serves as the name of the corresponding scripting variable
+     and the name of the JSP attribute under which the bean is accessed.
+     Therefore, it must conform to the rules for a Java identifier.
+-->
+<!ENTITY % BeanName "CDATA">
+
+
+<!-- A "Boolean" is the string representation of a boolean (true or false)
+     variable.
+-->
+<!ENTITY % Boolean "(true|false|yes|no)">
+
+
+<!-- A "ClassName" is the fully qualified name of a Java class that is
+     instantiated to provide the functionality of the enclosing element.
+-->
+<!ENTITY % ClassName "CDATA">
+
+
+<!-- An "Integer" is a character string consisting solely of numeric digits,
+     optionally preceeded by a minus sign, that can be converted to a
+     32-bit integer.
+-->
+<!ENTITY % Integer "CDATA">
+
+
+<!-- A "Location" is a relative path, delimited by "/" characters, that
+     defines the location of a resource relative to the location of the
+     Struts configuration file itself.
+-->
+<!ENTITY % Location "#PCDATA">
+
+
+<!-- A "PropName" is the name of a JavaBeans property, and must begin with
+     a lower case letter and contain only characters that are legal in a
+     Java identifier.
+-->
+<!ENTITY % PropName "CDATA">
+
+
+<!-- A "RequestPath" is a context-relative URI path, beginning with a slash,
+     that identifies a mapped resource (such as a JSP page or a servlet)
+     within this web application.
+-->
+<!ENTITY % RequestPath "CDATA">
+
+
+<!-- The name of a JSP bean scope within which such a form bean may be
+     accessed.
+-->
+<!ENTITY % RequestScope "(request|session)">
+
+
+<!-- ========== Top Level Elements ======================================== -->
+
+
+<!-- The "struts-config" element is the root of the configuration file
+     hierarchy, and contains nested elements for all of the other
+     configuration settings.
+-->
+<!ELEMENT struts-config (data-sources?, form-beans?, global-forwards?, action-mappings?)>
+<!ATTLIST struts-config  id             ID              #IMPLIED>
+
+
+<!-- The "data-sources" element describes a set of JDBC 2.0 Standard Extension
+     data source objects which will be configured according to the nested
+     "data-source" elements found inside.
+-->
+
+<!ELEMENT data-sources (data-source*)>
+<!ATTLIST data-sources   id             ID              #IMPLIED>
+
+
+<!-- The "data-source" element describes a JDBC 2.0 Standard Extension data
+     source object (that implements javax.sql.DataSource) which will be
+     configured according to the properties and nested elements found here,
+     and made available as a servlet context attribute (i.e. application
+     scope bean).  The following attributes are required:
+
+     key             Servlet context attribute key under which this data
+                     source will be stored.  Default is the value specified
+                     by string constant Action.DATA_SOURCE_KEY.
+
+     type            Fully qualified Java class name of the implementation
+                     class (must implement javax.sql.DataSource).  Default
+                     value is 'org.apache.struts.util.GenericDataSource'.
+
+     NOTE:  The following attributes are defined by the default data source
+     implementation, and only take effect for that class or subclasses of
+     that class.
+
+     WARNING:  The use of these attributes is deprecated.  You should use
+     nested &lt;set-property&gt; elements to configure *all* properties of
+     your data source implementation.
+
+     autoCommit      The default auto-commit state for newly created
+                     connections.
+
+     description     The description of this data source.
+
+     driverClass     The Java class name of the JDBC driver to be used.
+                     [REQUIRED]
+
+     loginTimeout    The maximum number of seconds to wait for a connection
+                     to be created or returned.  Default is driver dependent.
+
+     maxCount        The maximum number of connections to be created.
+
+     minCount        The minimum number of connections to be created.
+
+     password        The database password to use when connecting. [REQUIRED]
+
+     readOnly        The default read-only state for newly created
+                     connections.
+
+     url             The JDBC URL to use when connecting. [REQUIRED]
+
+     user            The database username to use when connecting. [REQUIRED]
+
+-->
+<!ELEMENT data-source (set-property*)>
+<!ATTLIST data-source    id             ID              #IMPLIED>
+<!ATTLIST data-source    key            %BeanName;      #IMPLIED>
+<!ATTLIST data-source    type           %ClassName;     #IMPLIED>
+<!-- All of the following attributes are deprecated.  Use a nested          -->
+<!-- set-property element to configure data source properties.              -->
+<!ATTLIST data-source    autoCommit     %Boolean;       #IMPLIED>
+<!ATTLIST data-source    description    CDATA           #IMPLIED>
+<!ATTLIST data-source    driverClass    %ClassName;     #IMPLIED>
+<!ATTLIST data-source    loginTimeout   %Integer;       #IMPLIED>
+<!ATTLIST data-source    maxCount       %Integer;       #IMPLIED>
+<!ATTLIST data-source    minCount       %Integer;       #IMPLIED>
+<!ATTLIST data-source    password       CDATA           #IMPLIED>
+<!ATTLIST data-source    readOnly       %Boolean;       #IMPLIED>
+<!ATTLIST data-source    url            CDATA           #IMPLIED>
+<!ATTLIST data-source    user           CDATA           #IMPLIED>
+
+
+<!-- The "form-beans" element is the root of the set of form bean descriptors
+     for this application.  The following attributes are defined:
+
+     type            Fully qualified Java class name of the implementation
+                     class used for ActionFormBean objects.  DEPRECATED.
+
+                     WARNING:  For Struts 1.0, this value is ignored.  You
+                     can set the default implementation class name with the
+                     "formBean" initialization parameter to the Struts
+                     controller servlet.
+-->
+<!ELEMENT form-beans (form-bean*)>
+<!ATTLIST form-beans     id             ID              #IMPLIED>
+<!ATTLIST form-beans     type           %ClassName;     "org.apache.struts.action.ActionFormBean">
+
+
+<!-- The "form-bean" element describes a particular form bean, which is a
+     JavaBean that implements the org.apache.struts.action.ActionForm
+     class.  The following attributes are defined:
+
+     className       Fully qualified Java class name of the ActionFormBean
+                     implementation class to use.  Defaults to the value
+                     configured as the "formBean" initialization parameter
+                     to the Struts controller servlet.
+
+     name            Unique identifier of this bean, used to reference it
+                     in corresponding action mappings.
+
+     type            Fully qualified Java class name of the implementation
+                     class to be used or generated
+-->
+<!ELEMENT form-bean (icon?, display-name?, description?, set-property*)>
+<!ATTLIST form-bean      id             ID              #IMPLIED>
+<!ATTLIST form-bean      className      %ClassName;     #IMPLIED>
+<!ATTLIST form-bean      name           %BeanName;      #REQUIRED>
+<!ATTLIST form-bean      type           %ClassName;     #REQUIRED>
+
+
+<!-- The "global-forwards" element configures the global mappings of logical
+     names (used within the application) to mappable resources (identified
+     by context-relative URI paths).  A global "forward" with a particular name
+     can be locally overridden by defining a "forward" of the same name within
+     an "action" element.  The following attribute are defined:
+
+     type            Fully qualified Java class name of the implementation
+                     class used for ActionForward objects.  DEPRECATED.
+
+                     WARNING:  For Struts 1.0, this value is ignored.  You
+                     can set the default implementation class name with the
+                     "forward" initialization parameter to the Struts
+                     controller servlet.
+-->
+<!ELEMENT global-forwards (forward*)>
+<!ATTLIST global-forwards id            ID              #IMPLIED>
+<!ATTLIST global-forwards type          %ClassName;     "org.apache.struts.action.ActionForward">
+
+
+<!-- The "forward" element describes a mapping of a logical name (used within
+     the application) to a mappable resource identified by a context-relative
+     URI path.  The following attributes are defined:
+
+     className       Fully qualified Java class name of the ActionForward
+                     implementation class to use.  Defaults to the value
+                     configured as the "forward" initialization parameter
+                     to the Struts controller servlet.
+
+     name            Unique identifier of this forward, used to reference it
+                     in application action classes.
+
+     path            The context-relative path of the mapped resource.
+
+     redirect        Set to "true" if sendRedirect() should be used to forward
+                     to this resource, or "false" in order to use
+                     RequestDispatcher.forward() instead.
+-->
+<!ELEMENT forward (icon?, display-name?, description?, set-property*)>
+<!ATTLIST forward        id             ID              #IMPLIED>
+<!ATTLIST forward        className      %ClassName;     #IMPLIED>
+<!ATTLIST forward        name           CDATA           #REQUIRED>
+<!ATTLIST forward        path           %RequestPath;   #REQUIRED>
+<!ATTLIST forward        redirect       %Boolean;       #IMPLIED>
+
+
+<!-- The "action-mappings" element configures the mappings from submitted
+     request paths to the corresponding Action classes that should be
+     used to process these requests.  The following attributes are
+     defined:
+
+     type           Fully qualified Java class name of the ActionMapping
+                    implementation class to be used.  DEPRECATED.
+
+                     WARNING:  For Struts 1.0, this value is ignored.  You
+                     can set the default implementation class name with the
+                     "mapping" initialization parameter to the Struts
+                     controller servlet.
+-->
+<!ELEMENT action-mappings (action*)>
+<!ATTLIST action-mappings id             ID              #IMPLIED>
+<!ATTLIST action-mappings type           %ClassName;     "org.apache.struts.action.ActionMapping">
+
+
+<!-- The "action" element describes a mapping from a request paths to the
+     corresponding Action classes that should be used to process these
+     requests.  The following attributes are defined:
+
+     attribute       Name of the request-scope or session-scope attribute
+                     under which our form bean is accessed, if it is other
+                     than the bean's specified "name".  Optional if
+                     "name" is specified, else not allowed.
+
+     className       Fully qualified Java class name of the ActionMapping
+                     implementation class to use.  Defaults to the value
+                     configured as the "mapping" initialization parameter
+                     to the Struts controller servlet.
+
+     forward         Context-relative path of the servlet or JSP resource that
+                     will process this request, instead of instantiating and
+                     calling the Action class specified by "type".  Exactly one
+                     of "forward", "include", or "type" must be specified.
+
+     include         Context-relative path of the servlet or JSP resource that
+                     will process this request, instead of instantiating and
+                     calling the Action class specified by "type".  Exactly one
+                     of "forward", "include", or "type" must be specified.
+
+     input           Context-relative path of the input form to which control
+                     should be returned if a validation error is encountered.
+                     Required if "name" is specified and the input bean
+                     returns validation errors.  Optional if "name" is
+                     specified and the input bean does not return validation
+                     errors.  Not allowed if "name" is not specified.
+
+     name            Name of the form bean, if any, that is associated
+                     with this action.
+
+     path            The context-relative path of the submitted request,
+                     starting with a "/" character, and without the
+                     filename extension if extension mapping is used.
+
+     parameter       General purpose configuration parameter that can be used
+                     to pass extra information to the Action selected by this
+                     mapping.
+
+     prefix          Prefix used to match request parameter names to form bean
+                     property names, if any.  Optional if "name" is specified,
+                     else not allowed.
+
+     scope           Identifier of the scope ("request" or "session") within
+                     which our form bean is accessed, if any.  Optional if
+                     "name" is specified, else not allowed.
+
+     suffix          Suffix used to match request parameter names to form bean
+                     property names, if any.  Optional if "name" is specified,
+                     else not allowed.
+
+     type            Fully qualified Java class name of the Action class
+                     (implements org.apache.struts.action.Action) to be
+                     used to process requests for this mapping if the "forward"
+                     or "include" attribute is not included.  Exactly one
+                     of "forward", "include", or "type" must be specified.
+
+     unknown         Set to "true" if this action should be configured as the
+                     default for this application, to handle all requests
+                     not handled by another action.  Only one action can be
+                     defined as a default within a single application.
+
+     validate        Set to "true" if the validate() method of the form bean
+                     should be called prior to calling this action, or set to
+                     "false" if you do not want validation performed.
+-->
+<!ELEMENT action (icon?, display-name?, description?, set-property*, forward*)>
+<!ATTLIST action         id             ID              #IMPLIED>
+<!ATTLIST action         attribute      %BeanName;      #IMPLIED>
+<!ATTLIST action         className      %ClassName;     #IMPLIED>
+<!ATTLIST action         forward        %RequestPath;   #IMPLIED>
+<!ATTLIST action         include        %RequestPath;   #IMPLIED>
+<!ATTLIST action         input          %RequestPath;   #IMPLIED>
+<!ATTLIST action         name           %BeanName;      #IMPLIED>
+<!ATTLIST action         parameter      CDATA           #IMPLIED>
+<!ATTLIST action         path           %RequestPath;   #REQUIRED>
+<!ATTLIST action         prefix         CDATA           #IMPLIED>
+<!ATTLIST action         scope          %RequestScope;  #IMPLIED>
+<!ATTLIST action         suffix         CDATA           #IMPLIED>
+<!ATTLIST action         type           %ClassName;     #IMPLIED>
+<!ATTLIST action         unknown        %Boolean;       #IMPLIED>
+<!ATTLIST action         validate       %Boolean;       #IMPLIED>
+
+
+<!-- The "set-property" element specifies the name and value of an additional
+     JavaBeans configuration property whose setter method will be called
+     on the object that represents our surrounding element.  This is especially
+     useful when an extended implementation class (with additional properties)
+     is configured on the <global-forwards> or <action-mappings> elements.
+     The following attributes are defined:
+
+     property        Name of the JavaBeans property whose setter method
+                     will be called.
+
+     value           String representation of the value to which this
+                     property will be set, after suitable type conversion
+-->
+<!ELEMENT set-property EMPTY>
+<!ATTLIST set-property   id             ID              #IMPLIED>
+<!ATTLIST set-property   property       %PropName;      #REQUIRED>
+<!ATTLIST set-property   value          CDATA           #REQUIRED>
+
+
+
+<!-- ========== Subordinate Elements ====================================== -->
+
+
+<!-- The "description" element contains descriptive (paragraph length) text
+     about the surrounding element, suitable for use in GUI tools.
+-->
+<!ELEMENT description (#PCDATA)>
+<!ATTLIST description    id             ID              #IMPLIED>
+
+
+
+<!-- The "display-name" element contains a short (one line) description of
+     the surrounding element, suitable for use in GUI tools.
+-->
+<!ELEMENT display-name (#PCDATA)>
+<!ATTLIST display-name   id             ID              #IMPLIED>
+
+
+<!-- The "icon" element contains a small-icon and large-icon element which
+     specify the location, relative to the Struts configuration file, for small
+     and large images used to represent the surrounding element in GUI tools.
+-->
+<!ELEMENT icon (small-icon?, large-icon?)>
+<!ATTLIST icon           id             ID              #IMPLIED>
+
+
+<!-- The "large-icon" element specifies the location, relative to the Struts
+     configuration file, of a resource containing a large (32x32 pixel)
+     icon image.
+-->
+<!ELEMENT large-icon (%Location;)>
+<!ATTLIST large-icon     id             ID              #IMPLIED>
+
+
+<!-- The "small-icon" element specifies the location, relative to the Struts
+     configuration file, of a resource containing a small (16x16 pixel)
+     icon image.
+-->
+<!ELEMENT small-icon (%Location;)>
+<!ATTLIST small-icon     id             ID              #IMPLIED>
+

Added: project_src/website/Tomcat/work/web/loader/org/apache/struts/resources/struts-config_1_1.dtd
===================================================================
--- project_src/website/Tomcat/work/web/loader/org/apache/struts/resources/struts-config_1_1.dtd	2004-12-14 18:42:22 UTC (rev 247)
+++ project_src/website/Tomcat/work/web/loader/org/apache/struts/resources/struts-config_1_1.dtd	2004-12-27 13:04:03 UTC (rev 248)
@@ -0,0 +1,697 @@
+<!--
+     DTD for the Struts Application Configuration File, Version 1.1
+
+     To support validation of your configuration file, include the following
+     DOCTYPE element at the beginning (after the "xml" declaration):
+
+     <!DOCTYPE struts-config PUBLIC
+       "-//Apache Software Foundation//DTD Struts Configuration 1.1//EN"
+       "http://jakarta.apache.org/struts/dtds/struts-config_1_1.dtd">
+
+     $Id: struts-config_1_1.dtd,v 1.40 2003/05/14 08:17:16 turner Exp $
+-->
+
+
+<!-- ========== Defined Types ============================================= -->
+
+
+<!-- An "AttributeName" is the identifier of a page, request, session, or
+     application scope attribute.
+-->
+<!ENTITY % AttributeName "CDATA">
+
+
+<!-- A "BeanName" is the identifier of a JavaBean, such as a form bean,
+     and also serves as the name of the corresponding scripting variable
+     and the name of the JSP attribute under which the bean is accessed.
+     Therefore, it must conform to the rules for a Java identifier.
+-->
+<!ENTITY % BeanName "CDATA">
+
+
+<!-- A "Boolean" is the string representation of a boolean (true or false)
+     variable.
+-->
+<!ENTITY % Boolean "(true|false|yes|no)">
+
+
+<!-- A "ClassName" is the fully qualified name of a Java class that is
+     instantiated to provide the functionality of the enclosing element.
+-->
+<!ENTITY % ClassName "CDATA">
+
+
+<!-- An "Integer" is a character string consisting solely of numeric digits,
+     optionally preceeded by a minus sign, that can be converted to a
+     32-bit integer.
+-->
+<!ENTITY % Integer "CDATA">
+
+
+<!-- A "Location" is a relative path, delimited by "/" characters, that
+     defines the location of a resource relative to the location of the
+     Struts configuration file itself.
+-->
+<!ENTITY % Location "#PCDATA">
+
+
+<!-- A "PropName" is the name of a JavaBeans property, and must begin with
+     a lower case letter and contain only characters that are legal in a
+     Java identifier.
+-->
+<!ENTITY % PropName "CDATA">
+
+
+<!-- A "RequestPath" is an application-relative URI path, beginning with a
+     slash, that identifies a mapped resource (such as a JSP page or a servlet)
+     within this web application.
+-->
+<!ENTITY % RequestPath "CDATA">
+
+
+<!-- The name of a JSP bean scope within which such a form bean may be
+     accessed.
+-->
+<!ENTITY % RequestScope "(request|session)">
+
+
+<!-- ========== Top Level Elements ======================================== -->
+
+
+<!-- The "struts-config" element is the root of the configuration file
+     hierarchy, and contains nested elements for all of the other
+     configuration settings.
+-->
+<!ELEMENT struts-config (data-sources?, form-beans?, global-exceptions?, global-forwards?, action-mappings?, controller?, message-resources*, plug-in*)>
+<!ATTLIST struts-config  id             ID              #IMPLIED>
+
+
+<!-- The "data-sources" element describes a set of DataSource objects [JDBC 2.0
+     Standard Extension]. The individual DataSource objects are configured through
+     nested <data-source> elements.
+-->
+<!ELEMENT data-sources (data-source*)>
+<!ATTLIST data-sources   id             ID              #IMPLIED>
+
+
+<!-- The "data-source" element describes a DataSource object [JDBC 2.0 Standard
+     Extension] that will be instantiated, configured, and made available as a
+     servlet context attribute (or "application-scope bean"). Any object can be
+     specified so long as it implements [javax.sql.DataSource] and can be
+     configured entirely from JavaBean properties. The following attributes
+     are required:
+
+     className       The configuration bean for this DataSource object. If
+                     specified, the object must be a subclass of the default
+                     configuration bean.
+                     ["org.apache.struts.config.DataSourceConfig"]
+
+     key             Servlet context attribute key under which this data source
+                     will be stored.  Default is the value specified by string
+                     constant defined by Globals.DATA_SOURCE_KEY. The application
+                     module prefix (if any) is appended to the key
+                     (${key}$prefix}).
+                     [org.apache.struts.Globals.DATA_SOURCE_KEY]
+
+                     NOTE: The application module prefix includes the leading
+                     slash, so the default datasource for a module named "foo" is
+                     stored under "org.apache.struts.action.DATA_SOURCE/foo".
+
+     type            Fully qualified Java class name for this data source object.
+                     The class must implement DataSource [javax.sql.DataSource],
+                     and the object must be configurable entirely from JavaBean
+                     properties.
+-->
+<!ELEMENT data-source (set-property*)>
+<!ATTLIST data-source    id             ID              #IMPLIED>
+<!ATTLIST data-source    className      %ClassName;     #IMPLIED>
+<!ATTLIST data-source    key            %AttributeName; #IMPLIED>
+<!ATTLIST data-source    type           %ClassName;     #IMPLIED>
+
+
+<!-- The "form-beans" element describes the set of form bean descriptors for this
+     application module. The following attributes are defined:
+
+     type            Fully qualified Java class to use when instantiating
+                     ActionFormBean objects. If specified, the object must be a
+                     subclass of the default class type.
+                     DEPRECATED.
+
+                     WARNING:  For Struts 1.0, this value is ignored.  You
+                     can set the default implementation class name with the
+                     "formBean" initialization parameter to the Struts
+                     controller servlet.
+-->
+<!ELEMENT form-beans (form-bean*)>
+<!ATTLIST form-beans     id             ID              #IMPLIED>
+<!ATTLIST form-beans     type           %ClassName;     #IMPLIED>
+
+
+<!-- The "form-bean" element describes an ActionForm subclass
+     [org.apache.struts.action.ActionForm] that can be referenced by an "action"
+     element.
+
+
+The "form-bean" element describes a particular form bean, which is a
+     JavaBean that implements the org.apache.struts.action.ActionForm
+     class.  The following attributes are defined:
+
+     className       The configuration bean for this form bean object. If
+                     specified, the object must be a subclass of the default
+                     configuration bean.
+                     ["org.apache.struts.config.FormBeanConfig"]
+
+     dynamic         If the form bean type is a  DynaActionForm subclass (that you
+                     created), then (and only then) set this attribute to "true".
+                     If the type is set to the default DynaActionForm or any
+                     conventional ActionForm subclass, then this attribute can be
+                     omitted.
+                     [true] if type is "org.apache.struts.action.DynaActionForm"
+                     [false] otherwise  DEPRECATED - THIS IS NOW DETERMINED
+                     DYNAMICALLY BASED ON THE SPECIFIED IMPLEMENTATION CLASS.
+
+     name            The unique identifier for this form bean. Referenced by the
+                     <action> element to specify which form bean to use with its
+                     request.
+
+     type            Fully qualified Java class name of the ActionForm subclass
+                     to use with this form bean.
+-->
+<!ELEMENT form-bean (icon?, display-name?, description?, set-property*, form-property*)>
+<!ATTLIST form-bean      id             ID              #IMPLIED>
+<!ATTLIST form-bean      className      %ClassName;     #IMPLIED>
+<!ATTLIST form-bean      dynamic        %Boolean;       #IMPLIED>
+<!ATTLIST form-bean      name           %BeanName;      #REQUIRED>
+<!ATTLIST form-bean      type           %ClassName;     #REQUIRED>
+
+
+<!-- The "form-property" element describes a JavaBean property that can be used to
+     configure an instance of a DynaActionForm or a subclass thereof. This element
+     is only utilized when the "type" attribute of the enclosing "form-bean" element
+     is [org.apache.struts.action.DynaActionForm] or a subclass of DynaActionForm. If
+     a custom DynaActionForm subclass is used, then the "dynamic" attribute of the
+     enclosing <form-bean> element must be set to "true". Since Struts 1.1.
+
+     className       The configuration bean for this form property object. If
+                     specified, the object must be a subclass of the default
+                     configuration bean.
+                     ["org.apache.struts.config.FormPropertyConfig"]
+
+     initial         String representation of the initial value for this property.
+                     If not specified, primitives will be initialized to zero and
+                     objects initialized to the zero-argument instantiation of that
+                     object class.  For example, Strings will be initialized to ""
+
+
+     name            The name of the JavaBean property described by this element.
+
+     size            The number of array elements to create if the value of the
+                     "type" attribute specifies an array, but there is no value
+                     specified for the "initial" attribute.
+
+     type            Fully qualified Java class name of the field underlying this
+                     property, optionally followed by "[]" to indicate that the
+                     field is indexed.
+-->
+<!ELEMENT form-property  (set-property*)>
+<!ATTLIST form-property  className      %ClassName;     #IMPLIED>
+<!ATTLIST form-property  initial        CDATA           #IMPLIED>
+<!ATTLIST form-property  name           %PropName;      #REQUIRED>
+<!ATTLIST form-property  size           %Integer;       #IMPLIED>
+<!ATTLIST form-property  type           %ClassName;     #REQUIRED>
+
+
+<!-- The "global-exceptions" element describes a set of exceptions that might be
+     thrown by an Action object. The handling of individual exception types is
+     configured through nested exception elements. An <action> element may
+     override a global exception handler by registering a local exception handler
+     for the same exception type. Since Struts 1.1.
+-->
+<!ELEMENT global-exceptions (exception*)>
+<!ATTLIST global-exceptions id          ID              #IMPLIED>
+
+
+<!-- The "exception" element registers an ExceptionHandler for an exception type.
+     The following attributes are defined:
+
+    bundle           Servlet context attribute for the message resources bundle
+                     associated with this handler. The default attribute is the
+                     value specified by the string constant declared at
+                     Globals.MESSAGES_KEY.
+                     [org.apache.struts.Globals.MESSAGES_KEY]
+
+    className        The configuration bean for this ExceptionHandler object.
+                     If specified, className must be a subclass of the default
+                     configuration bean
+                     ["org.apache.struts.config.ExceptionConfig"]
+
+    handler          Fully qualified Java class name for this exception handler.
+                     ["org.apache.struts.action.ExceptionHandler"]
+
+    key              The key to use with this handler's message resource bundle
+                     that will retrieve the error message template for this
+                     exception.
+
+    path             The module-relative URI to the resource that will complete
+                     the request/response if this exception occurs.
+
+    scope            The context ("request" or "session") that is used to access
+                     the ActionError object [org.apache.struts.action.ActionError]
+                     for this exception.
+
+    type             Fully qualified Java class name of the exception type to
+                     register with this handler.
+-->
+<!ELEMENT exception (icon?, display-name?, description?, set-property*)>
+<!ATTLIST exception      id             ID              #IMPLIED>
+<!ATTLIST exception      bundle         %AttributeName; #IMPLIED>
+<!ATTLIST exception      className      %ClassName;     #IMPLIED>
+<!ATTLIST exception      handler        %ClassName;     #IMPLIED>
+<!ATTLIST exception      key            CDATA           #REQUIRED>
+<!ATTLIST exception      path           %RequestPath;   #IMPLIED>
+<!ATTLIST exception      scope          CDATA           #IMPLIED>
+<!ATTLIST exception      type           %ClassName;     #REQUIRED>
+
+
+<!-- The "global-forwards" element describes a set of ActionForward objects
+     [org.apache.struts.action.ActionForward] that are available to all Action
+     objects as a return value. The individual ActionForwards are configured
+     through nested <forward> elements. An <action> element may override a global
+     forward by defining a local <forward> of the same name.
+
+     type            Fully qualified Java class to use when instantiating
+                     ActionForward objects.  If specified, the object must be a
+                     subclass of the default class type.
+                     DEPRECATED.
+
+                     WARNING:  For Struts 1.0, this value is ignored.  You
+                     can set the default implementation class name with the
+                     "forward" initialization parameter to the Struts
+                     controller servlet.
+-->
+<!ELEMENT global-forwards (forward*)>
+<!ATTLIST global-forwards id            ID              #IMPLIED>
+<!ATTLIST global-forwards type          %ClassName;     #IMPLIED>
+
+
+<!-- The "forward" element describes an ActionForward that is to be made
+     available to an Action as a return value. An ActionForward is referenced by
+     a logical name and encapsulates a URI. A "forward" element may be used to
+     describe both global and local ActionForwards. Global forwards are available
+     to all the Action objects in the application module. Local forwards can be
+     nested within an <action> element and only available to an Action object
+     when it is invoked through that ActionMapping.
+
+     className       Fully qualified Java class name of ActionForward
+                     subclass to use for this object.
+                     ["org.apache.struts.action.ActionForward"]
+
+    contextRelative  Set this to "true" if, in a modular application, the path
+                     attribute starts with a slash "/" and should be considered
+                     relative to the entire web application rather than the module.
+                     Since Struts 1.1.
+                     [false]
+
+     name            The unique identifier for this forward. Referenced by the
+                     Action object at runtime to select - by its logical name -
+                     the resource that should complete the request/response.
+
+     path            The module-relative or context-relative path to the resources
+                     that is encapsulated by the logical name of this ActionForward.
+                     If the path is to be considered context-relative when used in
+                     a modular application, then the contextRelative attribute
+                     should be set to "true". This value should begin with a slash
+                     ("/") character.
+
+     redirect        Set to "true" if a redirect instruction should be issued to
+                     the user-agent so that a new request is issued for this
+                     forward's resource. If true,  RequestDispatcher.Redirect is
+                     called. If "false", RequestDispatcher.forward is called instead.
+                     [false]
+-->
+<!ELEMENT forward (icon?, display-name?, description?, set-property*)>
+<!ATTLIST forward        id             ID              #IMPLIED>
+<!ATTLIST forward        className      %ClassName;     #IMPLIED>
+<!ATTLIST forward        contextRelative %Boolean;      #IMPLIED>
+<!ATTLIST forward        name           CDATA           #REQUIRED>
+<!ATTLIST forward        path           %RequestPath;   #REQUIRED>
+<!ATTLIST forward        redirect       %Boolean;       #IMPLIED>
+
+
+<!-- The "action-mappings" element describes a set of ActionMapping objects
+     [org.apache.struts.action.ActionMapping] that are available to process
+     requests matching the url-pattern our ActionServlet registered with the
+     container. The individual ActionMappings are configured through nested
+     <action> elements. The following attributes are defined:
+
+     type           Fully qualified Java class to use when instantiating
+                    ActionMapping objects. If specified, the object must be a
+                    subclass of the default class type.
+
+                    WARNING:  For Struts 1.0, this value is ignored.  You
+                    can set the default implementation class name with the
+                    "mapping" initialization parameter to the Struts
+                    controller servlet.
+-->
+<!ELEMENT action-mappings (action*)>
+<!ATTLIST action-mappings id             ID              #IMPLIED>
+<!ATTLIST action-mappings type           %ClassName;     #IMPLIED>
+
+
+<!-- The "action" element describes an ActionMapping object that is to be used
+     to process a request for a specific module-relative URI. The following
+     attributes are defined:
+
+     attribute       Name of the request-scope or session-scope attribute that
+                     is used to access our ActionForm bean, if it is other than
+                     the bean's specified "name". Optional if "name" is specified,
+                     else not valid.
+
+     className       The fully qualified Java class name of the ActionMapping
+                     subclass to use for this action mapping object. Defaults to
+                     the type specified by the enclosing <action-mappings>
+                     element or to "org.apache.struts.action.ActionMapping" if
+                     not specified.
+                     ["org.apache.struts.action.ActionMapping"]
+
+     forward         Module-relative path of the servlet or other resource that
+                     will process this request, instead of the Action class
+                     specified by "type".  The path WILL NOT be processed
+                     through the "forwardPattern" attribute that is configured
+                     on the "controller" element for this application module.
+                     Exactly one of "forward", "include", or "type" must be
+                     specified.
+
+     include         Module-relative path of the servlet or other resource that
+                     will process this request, instead of the Action class
+                     specified by "type".  The path WILL NOT be processed
+                     through the "forwardPattern" attribute that is configured
+                     on the "controller" element for this application module.
+                     Exactly one of "forward", "include", or "type" must be
+                     specified.
+
+     input           Module-relative path of the action or other resource to
+                     which control should be returned if a validation error is
+                     encountered. Valid only when "name" is specified. Required
+                     if "name" is specified and the input bean returns
+                     validation errors. Optional if "name" is specified and the
+                     input bean does not return validation errors.
+
+     name            Name of the form bean, if any, that is associated with this
+                     action mapping.
+
+     path            The module-relative path of the submitted request, starting
+                     with a "/" character, and without the filename extension if
+                     extension mapping is used.
+
+                     NOTE:  Do *not* include a period in your path name,
+                     because it will look like a filename extension and
+                     cause your Action to not be located.
+
+     parameter       General-purpose configuration parameter that can be used to
+                     pass extra information to the Action object selected by
+                     this action mapping.
+
+     prefix          Prefix used to match request parameter names to ActionForm
+                     property names, if any. Optional if "name" is specified,
+                     else not allowed.
+
+     roles           Comma-delimited list of security role names that are allowed
+                     access to this ActionMapping object. Since Struts 1.1.
+
+     scope           The context ("request" or "session") that is used to
+                     access our ActionForm bean, if any.  Optional if "name" is
+                     specified, else not valid.
+
+     suffix          Suffix used to match request parameter names to ActionForm
+                     bean property names, if any. Optional if "name" is
+                     specified, else not valid.
+
+     type            Fully qualified Java class name of the Action subclass
+                     [org.apache.struts.action.Action] that will process requests
+                     for this action mapping. Not valid if either the "forward"
+                     or "include" attribute is specified.  Exactly one of
+                     "forward", "include", or "type" must be specified.
+
+     unknown         Set to "true" if this object should be configured as the
+                     default action mapping for this module. If a request does not
+                     match another object, it will be passed to the ActionMapping
+                     object with unknown set to "true". Only one ActionMapping
+                     can be marked as "unknown" within a module.
+                     [false]
+
+     validate        Set to "true" if the validate method of the ActionForm bean
+                     should be called prior to calling the Action object for this
+                     action mapping, or set to "false" if you do not want the
+                     validate method called.
+                     [true]
+-->
+<!ELEMENT action (icon?, display-name?, description?, set-property*, exception*, forward*)>
+<!ATTLIST action         id             ID              #IMPLIED>
+<!ATTLIST action         attribute      %BeanName;      #IMPLIED>
+<!ATTLIST action         className      %ClassName;     #IMPLIED>
+<!ATTLIST action         forward        %RequestPath;   #IMPLIED>
+<!ATTLIST action         include        %RequestPath;   #IMPLIED>
+<!ATTLIST action         input          %RequestPath;   #IMPLIED>
+<!ATTLIST action         name           %BeanName;      #IMPLIED>
+<!ATTLIST action         parameter      CDATA           #IMPLIED>
+<!ATTLIST action         path           %RequestPath;   #REQUIRED>
+<!ATTLIST action         prefix         CDATA           #IMPLIED>
+<!ATTLIST action         roles          CDATA           #IMPLIED>
+<!ATTLIST action         scope          %RequestScope;  #IMPLIED>
+<!ATTLIST action         suffix         CDATA           #IMPLIED>
+<!ATTLIST action         type           %ClassName;     #IMPLIED>
+<!ATTLIST action         unknown        %Boolean;       #IMPLIED>
+<!ATTLIST action         validate       %Boolean;       #IMPLIED>
+
+
+<!-- The "controller" element describes the ControllerConfig bean
+     [org.apache.struts.config.ControllerConfig] that encapsulates
+     an application module's runtime configuration. The following
+     attributes are defined:
+
+     bufferSize      The size of the input buffer used when processing
+                     file uploads.
+                     [4096]
+
+     className       Fully qualified Java class name of the
+                     ControllerConfig subclass for this controller object.
+                     If specified, the object must be a subclass of the
+                     default class.
+                     ["org.apache.struts.config.ControllerConfig"]
+
+     contentType     Default content type (and optional character encoding) to
+                     be set on each response. May be overridden by the Action,
+                     JSP, or other resource to which the request is forwarded.
+                     ["text/html"]
+
+     debug           Debugging detail level for this module. [0]
+                     DEPRECATED - configure the logging detail level
+                     in your underlying logging implementation.
+
+     forwardPattern  Replacement pattern defining how the "path" attribute of a
+                     <forward> element is mapped to a context-relative URL when
+                     it starts with a slash (and when the contextRelative
+                     property is false). This value may consist of any
+                     combination of the following:
+                     - "$M" - Replaced by the module prefix of this module
+                     - "$P" - Replaced by the "path" attribute of the  selected
+                     "forward" element
+                     - "$$" - Causes a literal dollar sign to be rendered
+                     - "$x" - (Where "x" is any character not defined above)
+                     Silently swallowed, reserved for future use
+                     If not specified, the default forwardPattern is "$M$P",
+                     which is consistent with the previous behavior of
+                     forwards.  Since Struts 1.1.  ["$M$P"]
+
+     inputForward    Set to "true" if you want the "input" attribute of
+                     <action> elements to be the name of a local or global
+                     ActionForward, which will then be used to calculate the
+                     ultimate URL. Set to "false" (the default) to treat the
+                     "input" parameter of <action> elements as a
+                     module-relative path to the resource
+                     to be used as the input form. Since Struts 1.1.
+                     [false]
+
+     locale          Set to "true" if you want a Locale object stored in the
+                     user's session if not already present.
+                     [true]
+
+     maxFileSize     The maximum size (in bytes) of a file to be accepted as a
+                     file upload.  Can be expressed as a number followed by a
+                     "K", "M", or "G", which are interpreted to mean kilobytes,
+                     megabytes, or gigabytes, respectively.
+                     ["250M"]
+
+     memFileSize     The maximum size (in bytes) of a file whose contents will
+                     be retained in memory after uploading. Files larger than
+                     this threshold will be written to some alternative storage
+                     medium, typically a hard disk. Can be expressed as a number
+                     followed by a "K", "M", or "G", which are interpreted to
+                     mean kilobytes, megabytes, or gigabytes, respectively.
+                     ["256K"]
+
+     multipartClass  The fully qualified Java class name of the multipart
+                     request handler class to be used with this module.
+                     ["org.apache.struts.upload.CommonsMultipartRequestHandler"]
+
+     nocache         Set to "true" if you want the controller to add HTTP
+                     headers for defeating caching to every response from
+                     this module.  [false]
+
+     pagePattern     Replacement pattern defining how the "page" attribute of
+                     custom tags using it is mapped to a context-relative URL
+                     of the corresponding resource.  This value may consist of
+                     any combination of the following:
+                     - "$M" - Replaced by the module prefix of this module
+                     - "$P" - Replaced by the value of the "page" attribute
+                     - "$$" - Causes a literal dollar sign to be rendered
+                     - "$x" - (Where "x" is any character not defined above)
+                              Silently swallowed, reserved for future use
+                     If not specified, the default forwardPattern is
+                     "$M$P", which is consistent with previous hard coded
+                     behavior of URL evaluation for "page" attributes.
+                     ["$M$P"]
+
+     processorClass  The fully qualified Java class name of the
+                     RequestProcessor subclass to be used with this module.
+                     ["org.apache.struts.action.RequestProcessor"]
+
+     tempDir         Temporary working directory to use when processing
+                     file uploads.
+                     [{Directory provided by servlet container}]
+-->
+<!ELEMENT controller     (set-property*)>
+<!ATTLIST controller     id             ID              #IMPLIED>
+<!ATTLIST controller     bufferSize     %Integer;       #IMPLIED>
+<!ATTLIST controller     className      %ClassName;     #IMPLIED>
+<!ATTLIST controller     contentType    CDATA           #IMPLIED>
+<!ATTLIST controller     debug          %Integer;       #IMPLIED>
+<!ATTLIST controller     forwardPattern CDATA           #IMPLIED>
+<!ATTLIST controller     inputForward   %Boolean;       #IMPLIED>
+<!ATTLIST controller     locale         %Boolean;       #IMPLIED>
+<!ATTLIST controller     maxFileSize    CDATA           #IMPLIED>
+<!ATTLIST controller     memFileSize    CDATA           #IMPLIED>
+<!ATTLIST controller     multipartClass %ClassName;     #IMPLIED>
+<!ATTLIST controller     nocache        %Boolean;       #IMPLIED>
+<!ATTLIST controller     pagePattern    CDATA           #IMPLIED>
+<!ATTLIST controller     processorClass %ClassName;     #IMPLIED>
+<!ATTLIST controller     tempDir        CDATA           #IMPLIED>
+
+
+<!-- The "message-resources" element describes a MessageResources object with
+     message templates for this module. The following attributes are defined:
+
+     className       The configuration bean for this message resources object.
+                     If specified, the object must be a subclass of the default
+                     configuration bean.
+                     ["org.apache.struts.config.MessageResourcesConfig"]
+
+     factory         Fully qualified Java class name of the
+                     MessageResourcesFactory subclass to use for this message
+                     resources object.
+                     ["org.apache.struts.util.PropertyMessageResourcesFactory"]
+
+     key             Servlet context attribute under which this message
+                     resources bundle will be stored. The default attribute is
+                     the value specified by the string constant at
+                     [Globals.MESSAGES_KEY]. The application module prefix (if
+                     any) is appended to the key (${key}${prefix}).
+                     [org.apache.struts.Globals.MESSAGES_KEY]
+
+                     NOTE: The application module  prefix includes the leading
+                     slash, so the default message resource bundle for a module
+                     named "foo" is stored under
+                     "org.apache.struts.action.MESSAGE/foo".
+
+     null            Set to "true" if you want our message resources to return a
+                     null string for unknown message keys, or "false" to return a
+                     message with the bad key value.
+
+     parameter       Configuration parameter to be passed to the createResources
+                     method of our factory object.
+-->
+<!ELEMENT message-resources (set-property*)>
+<!ATTLIST message-resources id          ID              #IMPLIED>
+<!ATTLIST message-resources className   %ClassName;     #IMPLIED>
+<!ATTLIST message-resources factory     %ClassName;     #IMPLIED>
+<!ATTLIST message-resources key         %AttributeName; #IMPLIED>
+<!ATTLIST message-resources null        %Boolean;       #IMPLIED>
+<!ATTLIST message-resources parameter   CDATA           #REQUIRED>
+
+
+<!-- The "plug-in" element specifies the fully qualified class name of a
+     general-purpose application plug-in module that receives notification of
+     application startup and shutdown events. An instance of the specified class
+     is created for each element, and can be configured with nested <set-property>
+     elements. The following attributes are supported:
+
+     className       Fully qualified Java class name of the plug-in class; must
+                     implement [org.apache.struts.action.PlugIn].
+-->
+<!ELEMENT plug-in           (set-property*)>
+<!ATTLIST plug-in           id          ID              #IMPLIED>
+<!ATTLIST plug-in           className   %ClassName;     #REQUIRED>
+
+
+<!-- ========== Subordinate Elements ====================================== -->
+
+
+<!-- The "description" element contains descriptive (paragraph length) text
+     about the surrounding element, suitable for use in GUI tools.
+-->
+<!ELEMENT description    (#PCDATA)>
+<!ATTLIST description    id             ID              #IMPLIED>
+
+
+<!-- The "display-name" element contains a short (one line) description of
+     the surrounding element, suitable for use in GUI tools.
+-->
+<!ELEMENT display-name (#PCDATA)>
+<!ATTLIST display-name   id             ID              #IMPLIED>
+
+
+<!-- The "icon" element contains a small-icon and large-icon element which
+     specify the location, relative to the Struts configuration file, for small
+     and large images used to represent the surrounding element in GUI tools.
+-->
+<!ELEMENT icon           (small-icon?, large-icon?)>
+<!ATTLIST icon           id             ID              #IMPLIED>
+
+
+<!-- The "large-icon" element specifies the location, relative to the Struts
+     configuration file, of a resource containing a large (32x32 pixel)
+     icon image.
+-->
+<!ELEMENT large-icon     (%Location;)>
+<!ATTLIST large-icon     id             ID              #IMPLIED>
+
+
+<!-- The "set-property" element specifies the method name and initial value of
+     an additional JavaBean configuration property. When the object representing
+     the surrounding element is instantiated, the accessor for the indicated
+     property is called and passed the indicated value. The "set-property"
+     element is especially useful when a custom subclass is used with
+     <data-source>, <forward>, <action>, or <plug-in> elements. The subclass
+     can be passed whatever other properties may be required to configure the
+     object without changing how the struts-config is parsed.
+
+     property        Name of the JavaBeans property whose setter method
+                     will be called.
+
+     value           String representation of the value to which this
+                     property will be set, after suitable type conversion
+-->
+<!ELEMENT set-property   EMPTY>
+<!ATTLIST set-property   id             ID              #IMPLIED>
+<!ATTLIST set-property   property       %PropName;      #REQUIRED>
+<!ATTLIST set-property   value          CDATA           #REQUIRED>
+
+
+<!-- The "small-icon" element specifies the location, relative to the Struts
+     configuration file, of a resource containing a small (16x16 pixel)
+     icon image.
+-->
+<!ELEMENT small-icon     (%Location;)>
+<!ATTLIST small-icon     id             ID              #IMPLIED>
+

Added: project_src/website/Tomcat/work/web/loader/org/apache/struts/resources/tiles-config.dtd
===================================================================
--- project_src/website/Tomcat/work/web/loader/org/apache/struts/resources/tiles-config.dtd	2004-12-14 18:42:22 UTC (rev 247)
+++ project_src/website/Tomcat/work/web/loader/org/apache/struts/resources/tiles-config.dtd	2004-12-27 13:04:03 UTC (rev 248)
@@ -0,0 +1,61 @@
+<?xml version="1.0" encoding="ISO-8859-1"?>
+<!--
+     DTD for the Tile Definition File, Version 1.0
+
+     To support validation of your configuration file, include the following
+     DOCTYPE element at the beginning (after the "xml" declaration):
+
+     <!DOCTYPE tiles-definitions PUBLIC
+       "-//Apache Software Foundation//DTD Tiles Configuration//EN"
+       "http://jakarta.apache.org/struts/dtds/tiles-config.dtd">
+
+     $Id: tiles-config.dtd,v 1.1 2002/06/25 03:23:20 craigmcc Exp $
+-->
+<!ELEMENT component-definitions (definition+)>
+<!ELEMENT tiles-definitions (definition+)>
+<!ELEMENT definition (put*, putList*)>
+<!ATTLIST definition
+	name CDATA #REQUIRED
+	page CDATA #IMPLIED
+	path CDATA #IMPLIED
+	extends CDATA #IMPLIED
+	role CDATA #IMPLIED
+	template CDATA #IMPLIED
+	controllerClass CDATA #IMPLIED
+	controllerUrl CDATA #IMPLIED
+>
+<!ELEMENT put (#PCDATA)>
+<!ATTLIST put
+	name CDATA #REQUIRED
+	value CDATA #IMPLIED
+	type (string | page | template | definition) #IMPLIED
+	content CDATA #IMPLIED
+	direct (true | false) #IMPLIED
+>
+<!ELEMENT putList ( (add* | item* | bean* | putList*)+) >
+<!ATTLIST putList
+	name CDATA #REQUIRED
+>
+<!ELEMENT putListElements (add | item | bean)>
+
+<!ELEMENT add (#PCDATA)>
+<!ATTLIST add
+	value CDATA #IMPLIED
+	type (string | page | template | definition) #IMPLIED
+	content CDATA #IMPLIED
+	direct (true | false) #IMPLIED
+>
+
+<!ELEMENT bean (#PCDATA)>
+<!ATTLIST bean
+	classtype CDATA #REQUIRED
+>
+
+<!ELEMENT item (#PCDATA)>
+<!ATTLIST item
+	value CDATA #REQUIRED
+	link CDATA #REQUIRED
+	classtype CDATA #IMPLIED
+	icon CDATA #IMPLIED
+	tooltip CDATA #IMPLIED
+>

Added: project_src/website/Tomcat/work/web/loader/org/apache/struts/resources/tiles-config_1_1.dtd
===================================================================
--- project_src/website/Tomcat/work/web/loader/org/apache/struts/resources/tiles-config_1_1.dtd	2004-12-14 18:42:22 UTC (rev 247)
+++ project_src/website/Tomcat/work/web/loader/org/apache/struts/resources/tiles-config_1_1.dtd	2004-12-27 13:04:03 UTC (rev 248)
@@ -0,0 +1,281 @@
+<!--
+     DTD for the Tile Definition File, Version 1.1
+
+     To support validation of your configuration file, include the following
+     DOCTYPE element at the beginning (after the "xml" declaration):
+
+     <!DOCTYPE tiles-definitions PUBLIC
+       "-//Apache Software Foundation//DTD Tiles Configuration 1.1//EN"
+       "http://jakarta.apache.org/struts/dtds/tiles-config_1_1.dtd">
+
+     $Id: tiles-config_1_1.dtd,v 1.6 2003/05/03 16:19:56 jholmes Exp $
+-->
+
+
+<!-- ========== Defined Types ============================================= -->
+
+
+<!-- A "Boolean" is the string representation of a boolean (true or false)
+     variable.
+-->
+<!ENTITY % Boolean "(true|false)">
+
+
+<!-- A "ContentType" is the content type of an attribute passed to a tile
+     component.
+-->
+<!ENTITY % ContentType "(string|page|template|definition)">
+
+<!-- A "ClassName" is the fully qualified name of a Java class that is
+     instantiated to provide the functionality of the enclosing element.
+-->
+<!ENTITY % ClassName "CDATA">
+
+<!-- A "RequestPath" is an application-relative URI path, beginning with a
+     slash, that identifies a mapped resource (such as a JSP page or a servlet)
+     within this web application.
+-->
+<!ENTITY % RequestPath "CDATA">
+
+<!-- A "DefinitionName" is the unique identifier of a definition. This identifier
+     is a logical name used to reference the definition.
+-->
+<!ENTITY % DefinitionName "CDATA">
+
+<!-- A "BeanName" is the identifier of a JavaBean, such as a form bean,
+     and also serves as the name of the corresponding scripting variable
+     and the name of the JSP attribute under which the bean is accessed.
+     Therefore, it must conform to the rules for a Java identifier.
+-->
+<!ENTITY % BeanName "CDATA">
+
+<!-- A "PropName" is the name of a JavaBeans property, and must begin with
+     a lower case letter and contain only characters that are legal in a
+     Java identifier.
+-->
+<!ENTITY % PropName "CDATA">
+
+<!-- A "Location" is a relative path, delimited by "/" characters, that
+     defines the location of a resource relative to the location of the
+     configuration file itself.
+-->
+<!ENTITY % Location "#PCDATA">
+
+
+
+<!-- ========== Top Level Elements ======================================== -->
+
+
+  <!-- deprecated: use tiles-definitions instead.-->
+<!ELEMENT component-definitions (definition+)>
+
+<!-- The "tiles-definitions" element is the root of the configuration file
+     hierarchy, and contains nested elements for all of the other
+     configuration settings.
+-->
+<!ELEMENT tiles-definitions (definition+)>
+
+<!-- The "definition" element describes a definition that can be inserted in a jsp
+     page. This definition is identified by its logical name. A definition allows
+     to define all the attributes that can be set in <insert> tag from a jsp page.
+
+     controllerClass The fully qualified Java class name of the controller
+                     subclass to call immediately before the tiles is inserted.
+                     Only one of controllerClass or controllerUrl should be
+                     specified.
+
+     controllerUrl   The context-relative path to the resource used as controller
+                     called immediately before the tiles is inserted.
+                     Only one of controllerClass or controllerUrl should be
+                     specified.
+
+     extends         Name of a definition that is used as ancestor of this definition.
+                     All attributes from the ancestor are available to the new
+                     definition. Any attribute inherited from the ancestor can
+                     be overloaded by providing a new value.
+
+     name            The unique identifier for this definition.
+
+     page            Same as path.
+
+     path            The context-relative path to the resource used as tiles to
+                     insert. This tiles will be inserted and a tiles context
+                     containing appropriate attributes will be available.
+
+     role            Security role name that is allowed access to this definition
+                     object. The definition is inserted only if the role name is
+                     allowed.
+
+     template        Same as path. For compatibility with the template tag library.
+-->
+<!ELEMENT definition (icon?, display-name?, description?, put*, putList*)>
+<!ATTLIST definition       id               ID               #IMPLIED>
+<!ATTLIST definition       controllerClass  %ClassName;      #IMPLIED>
+<!ATTLIST definition       controllerUrl    %RequestPath;    #IMPLIED>
+<!ATTLIST definition       extends          %DefinitionName; #IMPLIED>
+<!ATTLIST definition       name             %DefinitionName; #REQUIRED>
+<!ATTLIST definition       page             %RequestPath;    #IMPLIED>
+<!ATTLIST definition       path             %RequestPath;    #IMPLIED>
+<!ATTLIST definition       role             CDATA            #IMPLIED>
+<!ATTLIST definition       template         %RequestPath;    #IMPLIED>
+
+
+<!-- The "put" element describes an attribute of a definition. It allows to
+     specify the tiles attribute name and its value. The tiles value can be
+     specified as an xml attribute, or in the body of the <put> tag.
+
+     content         Same as value. For compatibility with the template tag library.
+
+     direct          Same as type="string". For compatibility with the template
+                     tag library.
+
+     name            The unique identifier for this put.
+
+     type            The type of the value. Can be: string, page, template or definition.
+                     By default, no type is associated to a value. If a type is
+                     associated, it will be used as a hint to process the value
+                     when the attribute will be used in the inserted tiles.
+
+     value           The value associated to this tiles attribute. The value should
+                     be specified with this tag attribute, or in the body of the tag.
+-->
+<!ELEMENT put (#PCDATA)>
+<!ATTLIST put              id               ID              #IMPLIED>
+<!ATTLIST put              content          CDATA           #IMPLIED>
+<!ATTLIST put              direct           %Boolean;       #IMPLIED>
+<!ATTLIST put              name             CDATA           #REQUIRED>
+<!ATTLIST put              type             %ContentType;   #IMPLIED>
+<!ATTLIST put              value            CDATA           #IMPLIED>
+
+
+<!-- The "putList" element describes a list attribute of a definition. It allows to
+     specify an attribute that is a java List containing any kind of values. In
+     the config file, the list elements are specified by nested <add>, <item> or
+     <putList>.
+
+     name            The unique identifier for this put list.
+-->
+<!ELEMENT putList ( (add* | item* | bean* | putList*)+) >
+<!ATTLIST putList          id               ID              #IMPLIED>
+<!ATTLIST putList          name             CDATA           #REQUIRED>
+
+<!-- ========== Subordinate Elements ====================================== -->
+
+<!-- The "add" element describes an element of a list. It is similar to the
+     <put> element.
+
+     content         Same as value. For compatibility with the template tag library.
+
+     direct          Same as type="string". For compatibility with the template
+                     tag library.
+
+     type            The type of the value. Can be: string, page, template or definition.
+                     By default, no type is associated to a value. If a type is
+                     associated, it will be used as a hint to process the value
+                     when the attribute will be used in the inserted tiles.
+
+     value           The value associated to this tiles attribute. The value should
+                     be specified with this tag attribute, or in the body of the tag.
+-->
+<!ELEMENT add (#PCDATA)>
+<!ATTLIST add              id               ID              #IMPLIED>
+<!ATTLIST add              content          CDATA           #IMPLIED>
+<!ATTLIST add              direct           %Boolean;       #IMPLIED>
+<!ATTLIST add              type             %ContentType;   #IMPLIED>
+<!ATTLIST add              value            CDATA           #IMPLIED>
+
+
+<!-- The "bean" element describes an element of a list. It create a bean of the
+     specified java classtype. This bean is initialized with appropriate nested
+     <set-property>.
+
+     classtype       The fully qualified classname for this bean.
+-->
+<!ELEMENT bean (set-property*)>
+<!ATTLIST bean             id               ID              #IMPLIED>
+<!ATTLIST bean             classtype        %ClassName;     #REQUIRED>
+
+<!-- The "set-property" element specifies the method name and initial value of
+     a bean property. When the object representing
+     the surrounding element is instantiated, the accessor for the indicated
+     property is called and passed the indicated value.
+
+     property        Name of the JavaBeans property whose setter method
+                     will be called.
+
+     value           String representation of the value to which this
+                     property will be set, after suitable type conversion
+-->
+<!ELEMENT set-property   EMPTY>
+<!ATTLIST set-property   id             ID              #IMPLIED>
+<!ATTLIST set-property   property       %PropName;      #REQUIRED>
+<!ATTLIST set-property   value          CDATA           #REQUIRED>
+
+
+<!-- The "item" element describes an element of a list. It create a bean added as
+     element to the list. Each bean can contain different properties: value, link,
+     icon, tooltip. These properties are to be interpreted by the jsp page using
+     them.
+     By default the bean is of type
+     "org.apache.struts.tiles.beans.SimpleMenuItem". This bean is useful to
+     create a list of beans used as menu items.
+
+     classtype       The fully qualified classtype for this bean.
+                     If specified, the classtype must be a subclass of the interface
+                     "org.apache.struts.tiles.beans.MenuItem".
+
+     icon            The bean 'icon' property.
+
+     link            The bean 'link' property.
+
+     tooltip         The bean 'tooltip' property.
+
+     value           The bean 'value' property.
+-->
+<!ELEMENT item (#PCDATA)>
+<!ATTLIST item             id               ID              #IMPLIED>
+<!ATTLIST item             classtype        %ClassName;     #IMPLIED>
+<!ATTLIST item             icon             CDATA           #IMPLIED>
+<!ATTLIST item             link             CDATA           #REQUIRED>
+<!ATTLIST item             tooltip          CDATA           #IMPLIED>
+<!ATTLIST item             value            CDATA           #REQUIRED>
+
+
+<!-- ========== Info Elements ====================================== -->
+
+<!-- The "description" element contains descriptive (paragraph length) text
+     about the surrounding element, suitable for use in GUI tools.
+-->
+<!ELEMENT description    (#PCDATA)>
+<!ATTLIST description    id             ID              #IMPLIED>
+
+
+<!-- The "display-name" element contains a short (one line) description of
+     the surrounding element, suitable for use in GUI tools.
+-->
+<!ELEMENT display-name (#PCDATA)>
+<!ATTLIST display-name   id             ID              #IMPLIED>
+
+
+<!-- The "icon" element contains a small-icon and large-icon element which
+     specify the location, relative to the Struts configuration file, for small
+     and large images used to represent the surrounding element in GUI tools.
+-->
+<!ELEMENT icon           (small-icon?, large-icon?)>
+<!ATTLIST icon           id             ID              #IMPLIED>
+
+
+<!-- The "large-icon" element specifies the location, relative to the Struts
+     configuration file, of a resource containing a large (32x32 pixel)
+     icon image.
+-->
+<!ELEMENT large-icon     (%Location;)>
+<!ATTLIST large-icon     id             ID              #IMPLIED>
+
+
+<!-- The "small-icon" element specifies the location, relative to the Struts
+     configuration file, of a resource containing a small (16x16 pixel)
+     icon image.
+-->
+<!ELEMENT small-icon     (%Location;)>
+<!ATTLIST small-icon     id             ID              #IMPLIED>

Added: project_src/website/Tomcat/work/web/loader/org/apache/struts/resources/validation_1_1.dtd
===================================================================
--- project_src/website/Tomcat/work/web/loader/org/apache/struts/resources/validation_1_1.dtd	2004-12-14 18:42:22 UTC (rev 247)
+++ project_src/website/Tomcat/work/web/loader/org/apache/struts/resources/validation_1_1.dtd	2004-12-27 13:04:03 UTC (rev 248)
@@ -0,0 +1,251 @@
+<!--
+    DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED
+    DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED
+    
+     Refer to the below DTD Instead:
+    
+    <!DOCTYPE form-validation PUBLIC
+          "-//Apache Software Foundation//DTD Commons Validator Rules Configuration 1.0//EN"
+          "http://jakarta.apache.org/commons/dtds/validator_1_0.dtd">
+
+
+    $Id: validation_1_1.dtd,v 1.5 2002/11/14 20:33:13 rleland Exp $
+-->
+
+
+<!--
+    DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED
+    DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED 
+    The "form-validation" element is the root of the configuration file
+     hierarchy, and contains nested elements for all of the other
+     configuration settings.
+-->
+<!ELEMENT form-validation (global*, formset+)>
+
+
+<!--
+    DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED
+    DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED 
+    Global "constants" may be defined for use of other elements.
+-->
+<!ELEMENT global (constant*)>
+
+
+<!--
+    DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED
+    DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED 
+     The "constant" element defines a static value that can be used as
+     replacement parameters within "field" elements. The "constant-name" and
+     "constant-value" elements define the constant's reference id and
+     replacement value.
+-->
+<!ELEMENT constant (constant-name, constant-value)>
+<!ELEMENT constant-name  (#PCDATA)>
+<!ELEMENT constant-value (#PCDATA)>
+
+
+<!--
+    DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED
+    DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED 
+      The "formset" element defines a set of forms for a locale. Formsets for
+      specific locales can override only those fields that change. The
+      localization is properly scoped, so that a formset can override just the
+      language, or just the country, or both.
+-->
+<!ELEMENT formset (constant*, form+)>
+<!ATTLIST formset language     CDATA #IMPLIED
+                  country      CDATA #IMPLIED >
+
+
+<!--
+    DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED
+    DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED 
+     The "form" element defines a set of fields to be validated. The name
+     corresponds to the identifer the application assigns to the form. In the
+     case of the Struts framework, this is the attribute property from
+     the ActionMapping. Struts also offers the alternative of using the
+     the path property as the Validator form name.
+-->
+<!ELEMENT form    (field+ )>
+<!ATTLIST form    name CDATA #REQUIRED>
+
+
+<!--
+    DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED
+    DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED 
+     The "field" element defines the properties to be validated. In a
+     web application, a field would also correspond to a control on
+     a HTML form. To validate the properties, the validator works through
+     a JavaBean representation, like a Struts ActionForm. The field element
+     can accept up to 4 attributes:
+
+     property        The property on the JavaBean corresponding to this
+                     field element.
+
+     depends         The comma-delimited list of validators to apply against
+                     this field. For the field to succeed, all the
+                     validators must succeed.
+
+     page            The JavaBean corresponding to this form may include
+                     a page property. Only fields with a "page" attribute
+                     value that is equal to or less than the page property
+                     on the form JavaBean are processed. This is useful when
+                     using a "wizard" approach to completing a large form,
+                     to ensure that a page is not skipped.
+                     [0]
+
+     indexedListProperty
+                     The "indexedListProperty" is the method name that will
+                     return an array or a Collection used to retrieve the
+                     list and then loop through the list performing the
+                     validations for this field.
+
+     fieldOrder      [:FIXME: is this still supported?]
+-->
+<!ELEMENT field   (msg?, arg0?, arg1?, arg2?, arg3?, var* )>
+<!ATTLIST field   property CDATA #REQUIRED
+                  depends  CDATA #IMPLIED
+                  page     CDATA #IMPLIED
+                  indexedListProperty CDATA #IMPLIED >
+
+
+<!--
+    DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED
+    DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED 
+     The "msg" element defines a custom message key to use when one of the
+     validators for this field fails. Each validator has a default message
+     property that is used when a corresonding field msg is not specified.
+     Each validator applied to a field may have its own msg element.
+     The msg element accepts up to three attributes.
+
+      name        The name of the validator corresponding to this msg.
+
+      key         The key that will return the message template from a
+                  resource bundle.
+
+      resource    If set to "false", the key is taken to be a literal
+                  value rather than a bundle key.
+                  [true]
+-->
+<!ELEMENT msg     EMPTY>
+<!ATTLIST msg     name     CDATA #IMPLIED
+                  key      CDATA #IMPLIED
+                  resource CDATA #IMPLIED >
+
+
+<!--
+    DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED
+    DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED 
+     The "arg0" element defines the first replacement value to use with the
+     message template for this validator or this field.
+     The arg0 element accepts up to three attributes.
+
+      name        The name of the validator corresponding to this msg.
+
+      key         The key that will return the message template from a
+                  resource bundle.
+
+      resource    If set to "false", the key is taken to be a literal
+                  value rather than a bundle key.
+                  [true]
+-->
+<!ELEMENT arg0    EMPTY>
+<!ATTLIST arg0    name     CDATA #IMPLIED
+                  key      CDATA #IMPLIED
+                  resource CDATA #IMPLIED >
+
+
+<!--
+    DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED
+    DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED 
+     The "arg1" element defines the second replacement value to use with the
+     message template for this validator or this field.
+     The arg1 element accepts up to three attributes.
+
+      name        The name of the validator corresponding to this msg.
+
+      key         The key that will return the message template from a
+                  resource bundle.
+
+      resource    If set to "false", the key is taken to be a literal
+                  value rather than a bundle key.
+                  [true]
+-->
+<!ELEMENT arg1    EMPTY>
+<!ATTLIST arg1    name     CDATA #IMPLIED
+                  key      CDATA #IMPLIED
+                  resource CDATA #IMPLIED >
+
+
+<!--
+    DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED
+    DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED 
+     The "arg2" element defines the third replacement value to use with the
+     message template for this validator or this field.
+     The arg2 element accepts up to three attributes.
+
+      name        The name of the validator corresponding to this msg.
+
+      key         The key that will return the message template from a
+                  resource bundle.
+
+      resource    If set to "false", the key is taken to be a literal
+                  value rather than a bundle key.
+                  [true]
+-->
+<!ELEMENT arg2    EMPTY>
+<!ATTLIST arg2    name     CDATA #IMPLIED
+                  key      CDATA #IMPLIED
+                  resource CDATA #IMPLIED >
+
+<!--
+    DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED
+    DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED 
+     The "arg3" element defines the fourth replacement value to use with the
+     message template for this validator or this field.
+     The arg0 element accepts up to three attributes.
+
+      name        The name of the validator corresponding to this msg.
+
+      key         The key that will return the message template from a
+                  resource bundle.
+
+      resource    If set to "false", the key is taken to be a literal
+                  value rather than a bundle key.
+                  [true]
+-->
+<!ELEMENT arg3    EMPTY>
+<!ATTLIST arg3    name     CDATA #IMPLIED
+                  key      CDATA #IMPLIED
+                  resource CDATA #IMPLIED >
+
+
+<!--
+    DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED
+    DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED 
+     The "var" element can set parameters that a field may need to pass to
+     one of its validators, such as the minimum and maximum values in a
+     range validation. These parameters may also be referenced by one of the
+     arg? elements using a shell syntax: ${var:var-name}.
+-->
+<!ELEMENT var (var-name, var-value)>
+
+
+
+<!--
+    DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED
+    DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED 
+     The name of the var parameter to provide to a field's validators.
+-->
+<!ELEMENT var-name  (#PCDATA)>
+
+
+
+<!--
+    DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED
+    DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED 
+     The value of the var parameter to provide to a field's validators.
+-->
+<!ELEMENT var-value (#PCDATA)>
+
+<!-- eof -->
\ No newline at end of file

Added: project_src/website/Tomcat/work/web/loader/org/apache/struts/resources/validator-rules_1_1.dtd
===================================================================
--- project_src/website/Tomcat/work/web/loader/org/apache/struts/resources/validator-rules_1_1.dtd	2004-12-14 18:42:22 UTC (rev 247)
+++ project_src/website/Tomcat/work/web/loader/org/apache/struts/resources/validator-rules_1_1.dtd	2004-12-27 13:04:03 UTC (rev 248)
@@ -0,0 +1,282 @@
+<!--
+    DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED
+    DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED 
+    
+     Refer to the below DTD Instead:
+    
+    <!DOCTYPE form-validation PUBLIC
+          "-//Apache Software Foundation//DTD Commons Validator Rules Configuration 1.0//EN"
+          "http://jakarta.apache.org/commons/dtds/validator_1_0.dtd">
+
+
+    $Id: validator-rules_1_1.dtd,v 1.6 2002/11/14 20:33:13 rleland Exp $
+-->
+
+
+<!-- =================================================== Top Level Elements -->
+
+
+<!--
+    DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED
+    DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED 
+     The "form-validation" element is the root of the configuration file
+     hierarchy, and contains nested elements for all of the other
+     configuration settings.
+-->
+<!ELEMENT form-validation (global+)>
+
+
+<!--
+    DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED
+    DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED 
+    The elements defined here are all global and must be nested within a
+    "global" element.
+-->
+<!ELEMENT global (validator+)>
+
+
+<!--
+    DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED
+    DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED 
+     The "validator" element defines what validators objects can be used with
+     the fields referenced by the formset elements. The validator element can
+     accept 4 properties: name, classname, method, methodparams, msg, depends,
+     and jsFunctionName.
+-->
+<!ELEMENT validator (javascript?)>
+<!ATTLIST validator name           CDATA #REQUIRED
+                    classname      CDATA #REQUIRED
+                    method         CDATA #REQUIRED
+                    methodParams   CDATA #REQUIRED
+                    msg            CDATA #REQUIRED
+                    depends        CDATA #IMPLIED
+                    jsFunctionName CDATA #IMPLIED >
+
+
+<!--
+    DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED
+    DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED 
+     The "javascript" element defines a JavaScript that can be used to perform
+     client-side validators.
+-->
+<!ELEMENT javascript (#PCDATA)>
+
+
+<!--
+    DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED
+    DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED 
+     The "constant" element defines a static value that can be used as
+     replacement parameters within "field" elements. The "constant-name" and
+     "constant-value" elements define the constant's reference id and replacement
+     value.
+-->
+<!ELEMENT constant (constant-name, constant-value)>
+<!ELEMENT constant-name  (#PCDATA)>
+<!ELEMENT constant-value (#PCDATA)>
+
+
+<!--
+    DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED
+    DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED 
+      The "formset" element defines a set of forms for a locale. Formsets for
+      specific locales can override only those fields that change. The
+      localization is properly scoped, so that a formset can override just the
+      language, or just the country, or both.
+-->
+<!ELEMENT formset (constant*, form+)>
+<!ATTLIST formset language     CDATA #IMPLIED
+                  country      CDATA #IMPLIED >
+
+
+<!--
+    DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED
+    DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED 
+     The "form" element defines a set of fields to be validated. The name
+     corresponds to the identifer the application assigns to the form. In the
+     case of the Struts framework, this is the attribute property from
+     the ActionMapping. Struts also offers the alternative of using the
+     the path property as the Validator form name.
+-->
+<!ELEMENT form    (field+ )>
+<!ATTLIST form    name CDATA #REQUIRED>
+
+
+<!--
+    DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED
+    DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED 
+     The "field" element defines the properties to be validated. In a
+     web application, a field would also correspond to a control on
+     a HTML form. To validate the properties, the validator works through
+     a JavaBean representation, like a Struts ActionForm. The field element
+     can accept up to 4 attributes:
+
+     property        The property on the JavaBean corresponding to this
+                     field element.
+
+     depends         The comma-delimited list of validators to apply against
+                     this field. For the field to succeed, all the
+                     validators must succeed.
+
+     page            The JavaBean corresponding to this form may include
+                     a page property. Only fields with a "page" attribute
+                     value that is equal to or less than the page property
+                     on the form JavaBean are processed. This is useful when
+                     using a "wizard" approach to completing a large form,
+                     to ensure that a page is not skipped.
+                     [0]
+
+     indexedListProperty
+                     The "indexedListProperty" is the method name that will
+                     return an array or a Collection used to retrieve the
+                     list and then loop through the list performing the
+                     validations for this field.
+
+     fieldOrder      [:FIXME: is this still supported?]
+-->
+<!ELEMENT field   (msg|arg0|arg1|arg2|arg3|var)*>
+<!ATTLIST field   property CDATA #REQUIRED
+                  depends  CDATA #IMPLIED
+                  page     CDATA #IMPLIED
+                  indexedListProperty CDATA #IMPLIED >
+
+
+<!--
+    DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED
+    DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED 
+     The "msg" element defines a custom message key to use when one of the
+     validators for this field fails. Each validator has a default message
+     property that is used when a corresonding field msg is not specified.
+     Each validator applied to a field may have its own msg element.
+     The msg element accepts up to three attributes.
+
+      name        The name of the validator corresponding to this msg.
+
+      key         The key that will return the message template from a
+                  resource bundle.
+
+      resource    If set to "false", the key is taken to be a literal
+                  value rather than a bundle key.
+                  [true]
+-->
+<!ELEMENT msg     EMPTY>
+<!ATTLIST msg     name     CDATA #IMPLIED
+                  key      CDATA #IMPLIED
+                  resource CDATA #IMPLIED >
+
+
+<!--
+    DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED
+    DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED 
+     The "arg0" element defines the first replacement value to use with the
+     message template for this validator or this field.
+     The arg0 element accepts up to three attributes.
+
+      name        The name of the validator corresponding to this msg.
+
+      key         The key that will return the message template from a
+                  resource bundle.
+
+      resource    If set to "false", the key is taken to be a literal
+                  value rather than a bundle key.
+                  [true]
+-->
+<!ELEMENT arg0    EMPTY>
+<!ATTLIST arg0    name     CDATA #IMPLIED
+                  key      CDATA #IMPLIED
+                  resource CDATA #IMPLIED >
+
+
+<!--
+    DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED
+    DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED 
+     The "arg1" element defines the second replacement value to use with the
+     message template for this validator or this field.
+     The arg1 element accepts up to three attributes.
+
+      name        The name of the validator corresponding to this msg.
+
+      key         The key that will return the message template from a
+                  resource bundle.
+
+      resource    If set to "false", the key is taken to be a literal
+                  value rather than a bundle key.
+                  [true]
+-->
+<!ELEMENT arg1    EMPTY>
+<!ATTLIST arg1    name     CDATA #IMPLIED
+                  key      CDATA #IMPLIED
+                  resource CDATA #IMPLIED >
+
+
+<!--
+    DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED
+    DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED 
+     The "arg2" element defines the third replacement value to use with the
+     message template for this validator or this field.
+     The arg2 element accepts up to three attributes.
+
+      name        The name of the validator corresponding to this msg.
+
+      key         The key that will return the message template from a
+                  resource bundle.
+
+      resource    If set to "false", the key is taken to be a literal
+                  value rather than a bundle key.
+                  [true]
+-->
+<!ELEMENT arg2    EMPTY>
+<!ATTLIST arg2    name     CDATA #IMPLIED
+                  key      CDATA #IMPLIED
+                  resource CDATA #IMPLIED >
+
+<!--
+    DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED
+    DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED 
+     The "arg3" element defines the fourth replacement value to use with the
+     message template for this validator or this field.
+     The arg0 element accepts up to three attributes.
+
+      name        The name of the validator corresponding to this msg.
+
+      key         The key that will return the message template from a
+                  resource bundle.
+
+      resource    If set to "false", the key is taken to be a literal
+                  value rather than a bundle key.
+                  [true]
+-->
+<!ELEMENT arg3    EMPTY>
+<!ATTLIST arg3    name     CDATA #IMPLIED
+                  key      CDATA #IMPLIED
+                  resource CDATA #IMPLIED >
+
+
+<!--
+    DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED
+    DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED 
+     The "var" element can set parameters that a field may need to pass to
+     one of its validators, such as the minimum and maximum values in a
+     range validation. These parameters may also be referenced by one of the
+     arg? elements using a shell syntax: ${var:var-name}.
+-->
+<!ELEMENT var (var-name, var-value)>
+
+
+
+<!--
+    DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED
+    DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED 
+     The name of the var parameter to provide to a field's validators.
+-->
+<!ELEMENT var-name  (#PCDATA)>
+
+
+
+<!--
+    DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED
+    DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED ** DEPRECATED 
+     The value of the var parameter to provide to a field's validators.
+-->
+<!ELEMENT var-value (#PCDATA)>
+
+<!-- eof -->

Added: project_src/website/Tomcat/work/web/loader/org/apache/struts/resources/web-app_2_2.dtd
===================================================================
--- project_src/website/Tomcat/work/web/loader/org/apache/struts/resources/web-app_2_2.dtd	2004-12-14 18:42:22 UTC (rev 247)
+++ project_src/website/Tomcat/work/web/loader/org/apache/struts/resources/web-app_2_2.dtd	2004-12-27 13:04:03 UTC (rev 248)
@@ -0,0 +1,565 @@
+
+<!--
+The web-app element is the root of the deployment descriptor for
+a web application
+-->
+
+<!ELEMENT web-app (icon?, display-name?, description?, distributable?,
+context-param*, servlet*, servlet-mapping*, session-config?,
+mime-mapping*, welcome-file-list?, error-page*, taglib*,
+resource-ref*, security-constraint*, login-config?, security-role*,
+env-entry*, ejb-ref*)>
+
+<!--
+The icon element contains a small-icon and a large-icon element
+which specify the location within the web application for a small and
+large image used to represent the web application in a GUI tool. At a
+minimum, tools must accept GIF and JPEG format images.
+-->
+
+<!ELEMENT icon (small-icon?, large-icon?)>
+
+<!--
+The small-icon element contains the location within the web
+application of a file containing a small (16x16 pixel) icon image.
+-->
+
+<!ELEMENT small-icon (#PCDATA)>
+
+<!--
+The large-icon element contains the location within the web
+application of a file containing a large (32x32 pixel) icon image.
+-->
+
+<!ELEMENT large-icon (#PCDATA)>
+
+<!--
+The display-name element contains a short name that is intended
+to be displayed by GUI tools
+-->
+
+<!ELEMENT display-name (#PCDATA)>
+
+<!--
+The description element is used to provide descriptive text about
+the parent element.
+-->
+
+<!ELEMENT description (#PCDATA)>
+
+<!--
+The distributable element, by its presence in a web application
+deployment descriptor, indicates that this web application is
+programmed appropriately to be deployed into a distributed servlet
+container
+-->
+
+<!ELEMENT distributable EMPTY>
+
+<!--
+The context-param element contains the declaration of a web
+application's servlet context initialization parameters.
+-->
+
+<!ELEMENT context-param (param-name, param-value, description?)>
+
+<!--
+The param-name element contains the name of a parameter.
+-->
+
+<!ELEMENT param-name (#PCDATA)>
+
+<!--
+The param-value element contains the value of a parameter.
+-->
+
+<!ELEMENT param-value (#PCDATA)>
+
+<!--
+The servlet element contains the declarative data of a
+servlet. If a jsp-file is specified and the load-on-startup element is
+present, then the JSP should be precompiled and loaded.
+-->
+
+<!ELEMENT servlet (icon?, servlet-name, display-name?, description?,
+(servlet-class|jsp-file), init-param*, load-on-startup?, security-role-ref*)>
+
+<!--
+The servlet-name element contains the canonical name of the
+servlet.
+-->
+
+<!ELEMENT servlet-name (#PCDATA)>
+
+<!--
+The servlet-class element contains the fully qualified class name
+of the servlet.
+-->
+
+<!ELEMENT servlet-class (#PCDATA)>
+
+<!--
+The jsp-file element contains the full path to a JSP file within
+the web application.
+-->
+
+<!ELEMENT jsp-file (#PCDATA)>
+
+<!--
+The init-param element contains a name/value pair as an
+initialization param of the servlet
+-->
+
+<!ELEMENT init-param (param-name, param-value, description?)>
+
+<!--
+The load-on-startup element indicates that this servlet should be
+loaded on the startup of the web application. The optional contents of
+these element must be a positive integer indicating the order in which
+the servlet should be loaded. Lower integers are loaded before higher
+integers. If no value is specified, or if the value specified is not a
+positive integer, the container is free to load it at any time in the
+startup sequence.
+-->
+
+<!ELEMENT load-on-startup (#PCDATA)>
+
+<!--
+The servlet-mapping element defines a mapping between a servlet
+and a url pattern
+-->
+
+<!ELEMENT servlet-mapping (servlet-name, url-pattern)>
+
+<!--
+The url-pattern element contains the url pattern of the
+mapping. Must follow the rules specified in Section 10 of the Servlet
+API Specification.
+-->
+
+<!ELEMENT url-pattern (#PCDATA)>
+
+<!--
+The session-config element defines the session parameters for
+this web application.
+-->
+
+<!ELEMENT session-config (session-timeout?)>
+
+<!--
+The session-timeout element defines the default session timeout
+interval for all sessions created in this web application. The
+specified timeout must be expressed in a whole number of minutes.
+-->
+
+<!ELEMENT session-timeout (#PCDATA)>
+
+<!--
+The mime-mapping element defines a mapping between an extension
+and a mime type.
+-->
+
+<!ELEMENT mime-mapping (extension, mime-type)>
+
+<!--
+The extension element contains a string describing an
+extension. example: "txt"
+-->
+
+<!ELEMENT extension (#PCDATA)>
+
+<!--
+The mime-type element contains a defined mime type. example:
+"text/plain"
+-->
+
+<!ELEMENT mime-type (#PCDATA)>
+
+<!--
+The welcome-file-list contains an ordered list of welcome files
+elements.
+-->
+
+<!ELEMENT welcome-file-list (welcome-file+)>
+
+<!--
+The welcome-file element contains file name to use as a default
+welcome file, such as index.html
+-->
+
+<!ELEMENT welcome-file (#PCDATA)>
+
+<!--
+The taglib element is used to describe a JSP tag library.
+-->
+
+<!ELEMENT taglib (taglib-uri, taglib-location)>
+
+<!--
+The taglib-uri element describes a URI, relative to the location
+of the web.xml document, identifying a Tag Library used in the Web
+Application.
+-->
+
+<!ELEMENT taglib-uri (#PCDATA)>
+
+<!--
+the taglib-location element contains the location (as a resource
+relative to the root of the web application) where to find the Tag
+Libary Description file for the tag library.
+-->
+
+<!ELEMENT taglib-location (#PCDATA)>
+
+<!--
+The error-page element contains a mapping between an error code
+or exception type to the path of a resource in the web application
+-->
+
+<!ELEMENT error-page ((error-code | exception-type), location)>
+
+<!--
+The error-code contains an HTTP error code, ex: 404
+-->
+
+<!ELEMENT error-code (#PCDATA)>
+
+<!--
+The exception type contains a fully qualified class name of a
+Java exception type.
+-->
+
+<!ELEMENT exception-type (#PCDATA)>
+
+<!--
+The location element contains the location of the resource in the
+web application
+-->
+
+<!ELEMENT location (#PCDATA)>
+
+<!--
+The resource-ref element contains a declaration of a Web
+Application's reference to an external resource.
+-->
+
+<!ELEMENT resource-ref (description?, res-ref-name, res-type, res-auth)>
+
+<!--
+The res-ref-name element specifies the name of the resource
+factory reference name.
+-->
+
+<!ELEMENT res-ref-name (#PCDATA)>
+
+<!--
+The res-type element specifies the (Java class) type of the data
+source.
+-->
+
+<!ELEMENT res-type (#PCDATA)>
+
+<!--
+The res-auth element indicates whether the application component
+code performs resource signon programmatically or whether the
+container signs onto the resource based on the principle mapping
+information supplied by the deployer. Must be CONTAINER or SERVLET
+-->
+
+<!ELEMENT res-auth (#PCDATA)>
+
+<!--
+The security-constraint element is used to associate security
+constraints with one or more web resource collections
+-->
+
+<!ELEMENT security-constraint (web-resource-collection+,
+auth-constraint?, user-data-constraint?)>
+
+<!--
+The web-resource-collection element is used to identify a subset
+of the resources and HTTP methods on those resources within a web
+application to which a security constraint applies. If no HTTP methods
+are specified, then the security constraint applies to all HTTP
+methods.
+-->
+
+<!ELEMENT web-resource-collection (web-resource-name, description?,
+url-pattern*, http-method*)>
+
+<!--
+The web-resource-name contains the name of this web resource
+collection
+-->
+
+<!ELEMENT web-resource-name (#PCDATA)>
+
+<!--
+The http-method contains an HTTP method (GET | POST |...)
+-->
+
+<!ELEMENT http-method (#PCDATA)>
+
+<!--
+The user-data-constraint element is used to indicate how data
+communicated between the client and container should be protected
+-->
+
+<!ELEMENT user-data-constraint (description?, transport-guarantee)>
+
+<!--
+The transport-guarantee element specifies that the communication
+between client and server should be NONE, INTEGRAL, or
+CONFIDENTIAL. NONE means that the application does not require any
+transport guarantees. A value of INTEGRAL means that the application
+requires that the data sent between the client and server be sent in
+such a way that it can't be changed in transit. CONFIDENTIAL means
+that the application requires that the data be transmitted in a
+fashion that prevents other entities from observing the contents of
+the transmission. In most cases, the presence of the INTEGRAL or
+CONFIDENTIAL flag will indicate that the use of SSL is required.
+-->
+
+<!ELEMENT transport-guarantee (#PCDATA)>
+
+<!--
+The auth-constraint element indicates the user roles that should
+be permitted access to this resource collection. The role used here
+must appear in a security-role-ref element.
+-->
+
+<!ELEMENT auth-constraint (description?, role-name*)>
+
+<!--
+The role-name element contains the name of a security role.
+-->
+
+<!ELEMENT role-name (#PCDATA)>
+
+<!--
+The login-config element is used to configure the authentication
+method that should be used, the realm name that should be used for
+this application, and the attributes that are needed by the form login
+mechanism.
+-->
+
+<!ELEMENT login-config (auth-method?, realm-name?, form-login-config?)>
+
+<!--
+The realm name element specifies the realm name to use in HTTP
+Basic authorization
+-->
+
+<!ELEMENT realm-name (#PCDATA)>
+
+<!--
+The form-login-config element specifies the login and error pages
+that should be used in form based login. If form based authentication
+is not used, these elements are ignored.
+-->
+
+<!ELEMENT form-login-config (form-login-page, form-error-page)>
+
+<!--
+The form-login-page element defines the location in the web app
+where the page that can be used for login can be found
+-->
+
+<!ELEMENT form-login-page (#PCDATA)>
+
+<!--
+The form-error-page element defines the location in the web app
+where the error page that is displayed when login is not successful
+can be found
+-->
+
+<!ELEMENT form-error-page (#PCDATA)>
+
+<!--
+The auth-method element is used to configure the authentication
+mechanism for the web application. As a prerequisite to gaining access
+to any web resources which are protected by an authorization
+constraint, a user must have authenticated using the configured
+mechanism. Legal values for this element are "BASIC", "DIGEST",
+"FORM", or "CLIENT-CERT".
+-->
+
+<!ELEMENT auth-method (#PCDATA)>
+
+<!--
+The security-role element contains the declaration of a security
+role which is used in the security-constraints placed on the web
+application.
+-->
+
+<!ELEMENT security-role (description?, role-name)>
+
+<!--
+The role-name element contains the name of a role. This element
+must contain a non-empty string.
+-->
+
+<!ELEMENT security-role-ref (description?, role-name, role-link)>
+
+<!--
+The role-link element is used to link a security role reference
+to a defined security role. The role-link element must contain the
+name of one of the security roles defined in the security-role
+elements.
+-->
+
+<!ELEMENT role-link (#PCDATA)>
+
+<!--
+The env-entry element contains the declaration of an
+application's environment entry. This element is required to be
+honored on in J2EE compliant servlet containers.
+-->
+
+<!ELEMENT env-entry (description?, env-entry-name, env-entry-value?,
+env-entry-type)>
+
+<!--
+The env-entry-name contains the name of an application's
+environment entry
+-->
+
+<!ELEMENT env-entry-name (#PCDATA)>
+
+<!--
+The env-entry-value element contains the value of an
+application's environment entry
+-->
+
+<!ELEMENT env-entry-value (#PCDATA)>
+
+<!--
+The env-entry-type element contains the fully qualified Java type
+of the environment entry value that is expected by the application
+code. The following are the legal values of env-entry-type:
+java.lang.Boolean, java.lang.String, java.lang.Integer,
+java.lang.Double, java.lang.Float.
+-->
+
+<!ELEMENT env-entry-type (#PCDATA)>
+
+<!--
+The ejb-ref element is used to declare a reference to an
+enterprise bean. 
+-->
+
+<!ELEMENT ejb-ref (description?, ejb-ref-name, ejb-ref-type, home, remote,
+ejb-link?)>
+
+<!--
+The ejb-ref-name element contains the name of an EJB
+reference. This is the JNDI name that the servlet code uses to get a
+reference to the enterprise bean.
+-->
+
+<!ELEMENT ejb-ref-name (#PCDATA)>
+
+<!--
+The ejb-ref-type element contains the expected java class type of
+the referenced EJB.
+-->
+
+<!ELEMENT ejb-ref-type (#PCDATA)>
+
+<!--
+The ejb-home element contains the fully qualified name of the
+EJB's home interface
+-->
+
+<!ELEMENT home (#PCDATA)>
+
+<!--
+The ejb-remote element contains the fully qualified name of the
+EJB's remote interface
+-->
+
+<!ELEMENT remote (#PCDATA)>
+
+<!--
+The ejb-link element is used in the ejb-ref element to specify
+that an EJB reference is linked to an EJB in an encompassing Java2
+Enterprise Edition (J2EE) application package. The value of the
+ejb-link element must be the ejb-name of and EJB in the J2EE
+application package.
+-->
+
+<!ELEMENT ejb-link (#PCDATA)>
+
+<!--
+The ID mechanism is to allow tools to easily make tool-specific
+references to the elements of the deployment descriptor. This allows
+tools that produce additional deployment information (i.e information
+beyond the standard deployment descriptor information) to store the
+non-standard information in a separate file, and easily refer from
+these tools-specific files to the information in the standard web-app
+deployment descriptor.
+-->
+
+<!ATTLIST web-app id ID #IMPLIED>
+<!ATTLIST icon id ID #IMPLIED>
+<!ATTLIST small-icon id ID #IMPLIED>
+<!ATTLIST large-icon id ID #IMPLIED>
+<!ATTLIST display-name id ID #IMPLIED>
+<!ATTLIST description id ID #IMPLIED>
+<!ATTLIST distributable id ID #IMPLIED>
+<!ATTLIST context-param id ID #IMPLIED>
+<!ATTLIST param-name id ID #IMPLIED>
+<!ATTLIST param-value id ID #IMPLIED>
+<!ATTLIST servlet id ID #IMPLIED>
+<!ATTLIST servlet-name id ID #IMPLIED>
+<!ATTLIST servlet-class id ID #IMPLIED>
+<!ATTLIST jsp-file id ID #IMPLIED>
+<!ATTLIST init-param id ID #IMPLIED>
+<!ATTLIST load-on-startup id ID #IMPLIED>
+<!ATTLIST servlet-mapping id ID #IMPLIED>
+<!ATTLIST url-pattern id ID #IMPLIED>
+<!ATTLIST session-config id ID #IMPLIED>
+<!ATTLIST session-timeout id ID #IMPLIED>
+<!ATTLIST mime-mapping id ID #IMPLIED>
+<!ATTLIST extension id ID #IMPLIED>
+<!ATTLIST mime-type id ID #IMPLIED>
+<!ATTLIST welcome-file-list id ID #IMPLIED>
+<!ATTLIST welcome-file id ID #IMPLIED>
+<!ATTLIST taglib id ID #IMPLIED>
+<!ATTLIST taglib-uri id ID #IMPLIED>
+<!ATTLIST taglib-location id ID #IMPLIED>
+<!ATTLIST error-page id ID #IMPLIED>
+<!ATTLIST error-code id ID #IMPLIED>
+<!ATTLIST exception-type id ID #IMPLIED>
+<!ATTLIST location id ID #IMPLIED>
+<!ATTLIST resource-ref id ID #IMPLIED>
+<!ATTLIST res-ref-name id ID #IMPLIED>
+<!ATTLIST res-type id ID #IMPLIED>
+<!ATTLIST res-auth id ID #IMPLIED>
+<!ATTLIST security-constraint id ID #IMPLIED>
+<!ATTLIST web-resource-collection id ID #IMPLIED>
+<!ATTLIST web-resource-name id ID #IMPLIED>
+<!ATTLIST http-method id ID #IMPLIED>
+<!ATTLIST user-data-constraint id ID #IMPLIED>
+<!ATTLIST transport-guarantee id ID #IMPLIED>
+<!ATTLIST auth-constraint id ID #IMPLIED>
+<!ATTLIST role-name id ID #IMPLIED>
+<!ATTLIST login-config id ID #IMPLIED>
+<!ATTLIST realm-name id ID #IMPLIED>
+<!ATTLIST form-login-config id ID #IMPLIED>
+<!ATTLIST form-login-page id ID #IMPLIED>
+<!ATTLIST form-error-page id ID #IMPLIED>
+<!ATTLIST auth-method id ID #IMPLIED>
+<!ATTLIST security-role id ID #IMPLIED>
+<!ATTLIST security-role-ref id ID #IMPLIED>
+<!ATTLIST role-link id ID #IMPLIED>
+<!ATTLIST env-entry id ID #IMPLIED>
+<!ATTLIST env-entry-name id ID #IMPLIED>
+<!ATTLIST env-entry-value id ID #IMPLIED>
+<!ATTLIST env-entry-type id ID #IMPLIED>
+<!ATTLIST ejb-ref id ID #IMPLIED>
+<!ATTLIST ejb-ref-name id ID #IMPLIED>
+<!ATTLIST ejb-ref-type id ID #IMPLIED>
+<!ATTLIST home id ID #IMPLIED>
+<!ATTLIST remote id ID #IMPLIED>
+<!ATTLIST ejb-link id ID #IMPLIED>

Added: project_src/website/Tomcat/work/web/loader/org/apache/struts/resources/web-app_2_3.dtd
===================================================================
--- project_src/website/Tomcat/work/web/loader/org/apache/struts/resources/web-app_2_3.dtd	2004-12-14 18:42:22 UTC (rev 247)
+++ project_src/website/Tomcat/work/web/loader/org/apache/struts/resources/web-app_2_3.dtd	2004-12-27 13:04:03 UTC (rev 248)
@@ -0,0 +1,1059 @@
+<!--
+Copyright 2000-2001 Sun Microsystems, Inc. 901 San Antonio Road,
+Palo Alto, CA  94303, U.S.A.  All rights reserved.
+
+This product or document is protected by copyright and distributed
+under licenses restricting its use, copying, distribution, and
+decompilation.  No part of this product or documentation may be
+reproduced in any form by any means without prior written authorization
+of Sun and its licensors, if any.
+
+Third party software, including font technology, is copyrighted and
+licensed from Sun suppliers.
+
+Sun, Sun Microsystems, the Sun Logo, Solaris, Java, JavaServer Pages, Java
+Naming and Directory Interface, JDBC, JDK, JavaMail and Enterprise JavaBeans,
+are trademarks or registered trademarks of Sun Microsystems, Inc in the U.S.
+and other countries.
+
+All SPARC trademarks are used under license and are trademarks
+or registered trademarks of SPARC International, Inc.
+in the U.S. and other countries. Products bearing SPARC
+trademarks are based upon an architecture developed by Sun Microsystems, Inc.
+
+PostScript is a registered trademark of Adobe Systems, Inc.
+
+Federal Acquisitions: Commercial Software - Government Users Subject to
+Standard License Terms and Conditions.
+
+DOCUMENTATION IS PROVIDED "AS IS" AND ALL EXPRESS OR IMPLIED
+CONDITIONS, REPRESENTATIONS AND WARRANTIES, INCLUDING ANY
+IMPLIED WARRANTY OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
+PURPOSE OR NON-INFRINGEMENT, ARE DISCLAIMED, EXCEPT
+TO THE EXTENT THAT SUCH DISCLAIMERS ARE HELD TO BE LEGALLY
+INVALID.
+
+_________________________________________________________________________
+
+Copyright 2000-2001 Sun Microsystems, Inc.,
+901 San Antonio Road, Palo Alto, CA  94303, Etats-Unis.
+Tous droits re'serve's.
+
+
+Ce produit ou document est prote'ge' par un copyright et distribue' avec
+des licences qui en restreignent l'utilisation, la copie, la distribution,
+et la de'compilation.  Aucune partie de ce produit ou de sa documentation
+associe'e ne peut e^tre reproduite sous aucune forme, par quelque moyen
+que ce soit, sans l'autorisation pre'alable et e'crite de Sun et de ses
+bailleurs de licence, s'il y en a.
+
+Le logiciel de'tenu par des tiers, et qui comprend la technologie
+relative aux polices de caracte`res, est prote'ge' par un copyright
+et licencie' par des fournisseurs de Sun.
+
+Sun, Sun Microsystems, le logo Sun, Solaris, Java, JavaServer Pages, Java
+Naming and Directory Interface, JDBC, JDK, JavaMail, et Enterprise JavaBeans,
+sont des marques de fabrique ou des marques de'pose'es de Sun
+Microsystems, Inc. aux Etats-Unis et dans d'autres pays.
+
+Toutes les marques SPARC sont utilise'es sous licence et sont
+des marques de fabrique ou des marques de'pose'es de SPARC
+International, Inc. aux Etats-Unis et  dans
+d'autres pays. Les produits portant les marques SPARC sont
+base's sur une architecture de'veloppe'e par Sun Microsystems, Inc.
+
+Postcript est une marque enregistre'e d'Adobe Systems Inc.
+
+LA DOCUMENTATION EST FOURNIE "EN L'ETAT" ET TOUTES AUTRES CONDITIONS,
+DECLARATIONS ET GARANTIES EXPRESSES OU TACITES SONT FORMELLEMENT EXCLUES,
+DANS LA MESURE AUTORISEE PAR LA LOI APPLICABLE, Y COMPRIS NOTAMMENT
+TOUTE GARANTIE IMPLICITE RELATIVE A LA QUALITE MARCHANDE, A L'APTITUDE
+A UNE UTILISATION PARTICULIERE OU A L'ABSENCE DE CONTREFACON.
+-->
+
+<!--
+This is the XML DTD for the Servlet 2.3 deployment descriptor.
+All Servlet 2.3 deployment descriptors must include a DOCTYPE
+of the following form:
+
+  <!DOCTYPE web-app PUBLIC
+	"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
+	"http://java.sun.com/dtd/web-app_2_3.dtd">
+
+-->
+
+<!--
+The following conventions apply to all J2EE deployment descriptor
+elements unless indicated otherwise.
+
+- In elements that contain PCDATA, leading and trailing whitespace
+  in the data may be ignored.
+
+- In elements whose value is an "enumerated type", the value is
+  case sensitive.
+
+- In elements that specify a pathname to a file within the same
+  JAR file, relative filenames (i.e., those not starting with "/")
+  are considered relative to the root of the JAR file's namespace.
+  Absolute filenames (i.e., those starting with "/") also specify
+  names in the root of the JAR file's namespace.  In general, relative
+  names are preferred.  The exception is .war files where absolute
+  names are preferred for consistency with the servlet API.
+-->
+
+
+<!--
+The web-app element is the root of the deployment descriptor for
+a web application.
+-->
+<!ELEMENT web-app (icon?, display-name?, description?, distributable?,
+context-param*, filter*, filter-mapping*, listener*, servlet*,
+servlet-mapping*, session-config?, mime-mapping*, welcome-file-list?,
+error-page*, taglib*, resource-env-ref*, resource-ref*, security-constraint*,
+login-config?, security-role*, env-entry*, ejb-ref*,  ejb-local-ref*)>
+
+<!--
+The auth-constraint element indicates the user roles that should
+be permitted access to this resource collection. The role-name
+used here must either correspond to the role-name of one of the
+security-role elements defined for this web application, or be
+the specially reserved role-name "*" that is a compact syntax for
+indicating all roles in the web application. If both "*" and
+rolenames appear, the container interprets this as all roles.
+If no roles are defined, no user is allowed access to the portion of
+the web application described by the containing security-constraint.
+The container matches role names case sensitively when determining
+access.
+
+
+Used in: security-constraint
+-->
+<!ELEMENT auth-constraint (description?, role-name*)>
+
+<!--
+The auth-method element is used to configure the authentication
+mechanism for the web application. As a prerequisite to gaining access to any web resources which are protected by an authorization
+constraint, a user must have authenticated using the configured
+mechanism. Legal values for this element are "BASIC", "DIGEST",
+"FORM", or "CLIENT-CERT".
+
+Used in: login-config
+-->
+<!ELEMENT auth-method (#PCDATA)>
+
+<!--
+The context-param element contains the declaration of a web
+application's servlet context initialization parameters.
+
+Used in: web-app
+-->
+<!ELEMENT context-param (param-name, param-value, description?)>
+
+<!--
+The description element is used to provide text describing the parent
+element.  The description element should include any information that
+the web application war file producer wants to provide to the consumer of
+the web application war file (i.e., to the Deployer). Typically, the tools
+used by the web application war file consumer will display the description
+when processing the parent element that contains the description.
+
+Used in: auth-constraint, context-param, ejb-local-ref, ejb-ref,
+env-entry, filter, init-param, resource-env-ref, resource-ref, run-as,
+security-role, security-role-ref, servlet, user-data-constraint,
+web-app, web-resource-collection
+-->
+<!ELEMENT description (#PCDATA)>
+
+<!--
+The display-name element contains a short name that is intended to be
+displayed by tools.  The display name need not be unique.
+
+Used in: filter, security-constraint, servlet, web-app
+
+Example:
+
+<display-name>Employee Self Service</display-name>
+-->
+<!ELEMENT display-name (#PCDATA)>
+
+<!--
+The distributable element, by its presence in a web application
+deployment descriptor, indicates that this web application is
+programmed appropriately to be deployed into a distributed servlet
+container
+
+Used in: web-app
+-->
+<!ELEMENT distributable EMPTY>
+
+<!--
+The ejb-link element is used in the ejb-ref or ejb-local-ref
+elements to specify that an EJB reference is linked to an
+enterprise bean.
+
+The name in the ejb-link element is composed of a
+path name specifying the ejb-jar containing the referenced enterprise
+bean with the ejb-name of the target bean appended and separated from
+the path name by "#".  The path name is relative to the war file
+containing the web application that is referencing the enterprise bean.
+This allows multiple enterprise beans with the same ejb-name to be
+uniquely identified.
+
+Used in: ejb-local-ref, ejb-ref
+
+Examples:
+
+	<ejb-link>EmployeeRecord</ejb-link>
+
+	<ejb-link>../products/product.jar#ProductEJB</ejb-link>
+
+-->
+<!ELEMENT ejb-link (#PCDATA)>
+
+<!--
+The ejb-local-ref element is used for the declaration of a reference to
+an enterprise bean's local home. The declaration consists of:
+
+	- an optional description
+	- the EJB reference name used in the code of the web application
+	  that's referencing the enterprise bean
+	- the expected type of the referenced enterprise bean
+	- the expected local home and local interfaces of the referenced
+	  enterprise bean
+	- optional ejb-link information, used to specify the referenced
+	  enterprise bean
+
+Used in: web-app
+-->
+<!ELEMENT ejb-local-ref (description?, ejb-ref-name, ejb-ref-type,
+		local-home, local, ejb-link?)>
+
+<!--
+The ejb-ref element is used for the declaration of a reference to
+an enterprise bean's home. The declaration consists of:
+
+	- an optional description
+	- the EJB reference name used in the code of
+	  the web application that's referencing the enterprise bean
+	- the expected type of the referenced enterprise bean
+	- the expected home and remote interfaces of the referenced
+	  enterprise bean
+	- optional ejb-link information, used to specify the referenced
+	  enterprise bean
+
+Used in: web-app
+-->
+<!ELEMENT ejb-ref (description?, ejb-ref-name, ejb-ref-type,
+		home, remote, ejb-link?)>
+
+<!--
+The ejb-ref-name element contains the name of an EJB reference. The
+EJB reference is an entry in the web application's environment and is
+relative to the java:comp/env context.  The name must be unique
+within the web application.
+
+It is recommended that name is prefixed with "ejb/".
+
+Used in: ejb-local-ref, ejb-ref
+
+Example:
+
+<ejb-ref-name>ejb/Payroll</ejb-ref-name>
+-->
+<!ELEMENT ejb-ref-name (#PCDATA)>
+
+<!--
+The ejb-ref-type element contains the expected type of the
+referenced enterprise bean.
+
+The ejb-ref-type element must be one of the following:
+
+	<ejb-ref-type>Entity</ejb-ref-type>
+	<ejb-ref-type>Session</ejb-ref-type>
+
+Used in: ejb-local-ref, ejb-ref
+-->
+<!ELEMENT ejb-ref-type (#PCDATA)>
+
+<!--
+The env-entry element contains the declaration of a web application's
+environment entry. The declaration consists of an optional
+description, the name of the environment entry, and an optional
+value.  If a value is not specified, one must be supplied
+during deployment.
+-->
+<!ELEMENT env-entry (description?, env-entry-name, env-entry-value?,
+env-entry-type)>
+
+<!--
+The env-entry-name element contains the name of a web applications's
+environment entry.  The name is a JNDI name relative to the
+java:comp/env context.  The name must be unique within a web application.
+
+Example:
+
+<env-entry-name>minAmount</env-entry-name>
+
+Used in: env-entry
+-->
+<!ELEMENT env-entry-name (#PCDATA)>
+
+<!--
+The env-entry-type element contains the fully-qualified Java type of
+the environment entry value that is expected by the web application's
+code.
+
+The following are the legal values of env-entry-type:
+
+	java.lang.Boolean
+	java.lang.Byte
+	java.lang.Character
+	java.lang.String
+	java.lang.Short
+	java.lang.Integer
+	java.lang.Long
+	java.lang.Float
+	java.lang.Double
+
+Used in: env-entry
+-->
+<!ELEMENT env-entry-type (#PCDATA)>
+
+<!--
+The env-entry-value element contains the value of a web application's
+environment entry. The value must be a String that is valid for the
+constructor of the specified type that takes a single String
+parameter, or for java.lang.Character, a single character.
+
+Example:
+
+<env-entry-value>100.00</env-entry-value>
+
+Used in: env-entry
+-->
+<!ELEMENT env-entry-value (#PCDATA)>
+
+<!--
+The error-code contains an HTTP error code, ex: 404
+
+Used in: error-page
+-->
+<!ELEMENT error-code (#PCDATA)>
+
+<!--
+The error-page element contains a mapping between an error code
+or exception type to the path of a resource in the web application
+
+Used in: web-app
+-->
+<!ELEMENT error-page ((error-code | exception-type), location)>
+
+<!--
+The exception type contains a fully qualified class name of a
+Java exception type.
+
+Used in: error-page
+-->
+<!ELEMENT exception-type (#PCDATA)>
+
+<!--
+The extension element contains a string describing an
+extension. example: "txt"
+
+Used in: mime-mapping
+-->
+<!ELEMENT extension (#PCDATA)>
+
+<!--
+Declares a filter in the web application. The filter is mapped to
+either a servlet or a URL pattern in the filter-mapping element, using
+the filter-name value to reference. Filters can access the
+initialization parameters declared in the deployment descriptor at
+runtime via the FilterConfig interface.
+
+Used in: web-app
+-->
+<!ELEMENT filter (icon?, filter-name, display-name?, description?,
+filter-class, init-param*)>
+
+<!--
+The fully qualified classname of the filter.
+
+Used in: filter
+-->
+<!ELEMENT filter-class (#PCDATA)>
+
+<!--
+Declaration of the filter mappings in this web application. The
+container uses the filter-mapping declarations to decide which filters
+to apply to a request, and in what order. The container matches the
+request URI to a Servlet in the normal way. To determine which filters
+to apply it matches filter-mapping declarations either on servlet-name,
+or on url-pattern for each filter-mapping element, depending on which
+style is used. The order in which filters are invoked is the order in
+which filter-mapping declarations that match a request URI for a
+servlet appear in the list of filter-mapping elements.The filter-name
+value must be the value of the <filter-name> sub-elements of one of the
+<filter> declarations in the deployment descriptor.
+
+Used in: web-app
+-->
+<!ELEMENT filter-mapping (filter-name, (url-pattern | servlet-name))>
+
+<!--
+The logical name of the filter. This name is used to map the filter.
+Each filter name is unique within the web application.
+
+Used in: filter, filter-mapping
+-->
+<!ELEMENT filter-name (#PCDATA)>
+
+<!--
+The form-error-page element defines the location in the web app
+where the error page that is displayed when login is not successful
+can be found. The path begins with a leading / and is interpreted
+relative to the root of the WAR.
+
+Used in: form-login-config
+-->
+<!ELEMENT form-error-page (#PCDATA)>
+
+<!--
+The form-login-config element specifies the login and error pages
+that should be used in form based login. If form based authentication
+is not used, these elements are ignored.
+
+Used in: login-config
+-->
+<!ELEMENT form-login-config (form-login-page, form-error-page)>
+
+<!--
+The form-login-page element defines the location in the web app
+where the page that can be used for login can be found. The path
+begins with a leading / and is interpreted relative to the root of the WAR.
+
+Used in: form-login-config
+-->
+<!ELEMENT form-login-page (#PCDATA)>
+
+<!--
+The home element contains the fully-qualified name of the enterprise
+bean's home interface.
+
+Used in: ejb-ref
+
+Example:
+
+<home>com.aardvark.payroll.PayrollHome</home>
+-->
+<!ELEMENT home (#PCDATA)>
+
+<!--
+The http-method contains an HTTP method (GET | POST |...).
+
+Used in: web-resource-collection
+-->
+<!ELEMENT http-method (#PCDATA)>
+
+<!--
+The icon element contains small-icon and large-icon elements that
+specify the file names for small and a large GIF or JPEG icon images
+used to represent the parent element in a GUI tool.
+
+Used in: filter, servlet, web-app
+-->
+<!ELEMENT icon (small-icon?, large-icon?)>
+
+<!--
+The init-param element contains a name/value pair as an
+initialization param of the servlet
+
+Used in: filter, servlet
+-->
+<!ELEMENT init-param (param-name, param-value, description?)>
+
+<!--
+The jsp-file element contains the full path to a JSP file within
+the web application beginning with a `/'.
+
+Used in: servlet
+-->
+<!ELEMENT jsp-file (#PCDATA)>
+
+<!--
+The large-icon element contains the name of a file
+containing a large (32 x 32) icon image. The file
+name is a relative path within the web application's
+war file.
+
+The image may be either in the JPEG or GIF format.
+The icon can be used by tools.
+
+Used in: icon
+
+Example:
+
+<large-icon>employee-service-icon32x32.jpg</large-icon>
+-->
+<!ELEMENT large-icon (#PCDATA)>
+
+<!--
+The listener element indicates the deployment properties for a web
+application listener bean.
+
+Used in: web-app
+-->
+<!ELEMENT listener (listener-class)>
+
+<!--
+The listener-class element declares a class in the application must be
+registered as a web application listener bean. The value is the fully qualified classname of the listener class.
+
+
+Used in: listener
+-->
+<!ELEMENT listener-class (#PCDATA)>
+
+<!--
+The load-on-startup element indicates that this servlet should be
+loaded (instantiated and have its init() called) on the startup
+of the web application. The optional contents of
+these element must be an integer indicating the order in which
+the servlet should be loaded. If the value is a negative integer,
+or the element is not present, the container is free to load the
+servlet whenever it chooses. If the value is a positive integer
+or 0, the container must load and initialize the servlet as the
+application is deployed. The container must guarantee that
+servlets marked with lower integers are loaded before servlets
+marked with higher integers. The container may choose the order
+of loading of servlets with the same load-on-start-up value.
+
+Used in: servlet
+-->
+<!ELEMENT load-on-startup (#PCDATA)>
+
+<!--
+
+The local element contains the fully-qualified name of the
+enterprise bean's local interface.
+
+Used in: ejb-local-ref
+
+-->
+<!ELEMENT local (#PCDATA)>
+
+<!--
+
+The local-home element contains the fully-qualified name of the
+enterprise bean's local home interface.
+
+Used in: ejb-local-ref
+-->
+<!ELEMENT local-home (#PCDATA)>
+
+<!--
+The location element contains the location of the resource in the web
+application relative to the root of the web application. The value of
+the location must have a leading `/'.
+
+Used in: error-page
+-->
+<!ELEMENT location (#PCDATA)>
+
+<!--
+The login-config element is used to configure the authentication
+method that should be used, the realm name that should be used for
+this application, and the attributes that are needed by the form login
+mechanism.
+
+Used in: web-app
+-->
+<!ELEMENT login-config (auth-method?, realm-name?, form-login-config?)>
+
+<!--
+The mime-mapping element defines a mapping between an extension
+and a mime type.
+
+Used in: web-app
+-->
+<!ELEMENT mime-mapping (extension, mime-type)>
+
+<!--
+The mime-type element contains a defined mime type. example:
+"text/plain"
+
+Used in: mime-mapping
+-->
+<!ELEMENT mime-type (#PCDATA)>
+
+<!--
+The param-name element contains the name of a parameter. Each parameter
+name must be unique in the web application.
+
+
+Used in: context-param, init-param
+-->
+<!ELEMENT param-name (#PCDATA)>
+
+<!--
+The param-value element contains the value of a parameter.
+
+Used in: context-param, init-param
+-->
+<!ELEMENT param-value (#PCDATA)>
+
+<!--
+The realm name element specifies the realm name to use in HTTP
+Basic authorization.
+
+Used in: login-config
+-->
+<!ELEMENT realm-name (#PCDATA)>
+
+<!--
+The remote element contains the fully-qualified name of the enterprise
+bean's remote interface.
+
+Used in: ejb-ref
+
+Example:
+
+<remote>com.wombat.empl.EmployeeService</remote>
+-->
+<!ELEMENT remote (#PCDATA)>
+
+<!--
+The res-auth element specifies whether the web application code signs
+on programmatically to the resource manager, or whether the Container
+will sign on to the resource manager on behalf of the web application. In the
+latter case, the Container uses information that is supplied by the
+Deployer.
+
+The value of this element must be one of the two following:
+
+	<res-auth>Application</res-auth>
+	<res-auth>Container</res-auth>
+
+Used in: resource-ref
+-->
+<!ELEMENT res-auth (#PCDATA)>
+
+<!--
+The res-ref-name element specifies the name of a resource manager
+connection factory reference.  The name is a JNDI name relative to the
+java:comp/env context.  The name must be unique within a web application.
+
+Used in: resource-ref
+-->
+<!ELEMENT res-ref-name (#PCDATA)>
+
+<!--
+The res-sharing-scope element specifies whether connections obtained
+through the given resource manager connection factory reference can be
+shared. The value of this element, if specified, must be one of the
+two following:
+
+	<res-sharing-scope>Shareable</res-sharing-scope>
+	<res-sharing-scope>Unshareable</res-sharing-scope>
+
+The default value is Shareable.
+
+Used in: resource-ref
+-->
+<!ELEMENT res-sharing-scope (#PCDATA)>
+
+<!--
+The res-type element specifies the type of the data source. The type
+is specified by the fully qualified Java language class or interface
+expected to be implemented by the data source.
+
+Used in: resource-ref
+-->
+<!ELEMENT res-type (#PCDATA)>
+
+<!--
+The resource-env-ref element contains a declaration of a web application's
+reference to an administered object associated with a resource
+in the web application's environment.  It consists of an optional
+description, the resource environment reference name, and an
+indication of the resource environment reference type expected by
+the web application code.
+
+Used in: web-app
+
+Example:
+
+<resource-env-ref>
+    <resource-env-ref-name>jms/StockQueue</resource-env-ref-name>
+    <resource-env-ref-type>javax.jms.Queue</resource-env-ref-type>
+</resource-env-ref>
+-->
+<!ELEMENT resource-env-ref (description?, resource-env-ref-name,
+		resource-env-ref-type)>
+
+<!--
+The resource-env-ref-name element specifies the name of a resource
+environment reference; its value is the environment entry name used in
+the web application code.  The name is a JNDI name relative to the
+java:comp/env context and must be unique within a web application.
+
+Used in: resource-env-ref
+-->
+<!ELEMENT resource-env-ref-name (#PCDATA)>
+
+<!--
+The resource-env-ref-type element specifies the type of a resource
+environment reference.  It is the fully qualified name of a Java
+language class or interface.
+
+Used in: resource-env-ref
+-->
+<!ELEMENT resource-env-ref-type (#PCDATA)>
+
+<!--
+The resource-ref element contains a declaration of a web application's
+reference to an external resource. It consists of an optional
+description, the resource manager connection factory reference name,
+the indication of the resource manager connection factory type
+expected by the web application code, the type of authentication
+(Application or Container), and an optional specification of the
+shareability of connections obtained from the resource (Shareable or
+Unshareable).
+
+Used in: web-app
+
+Example:
+
+    <resource-ref>
+	<res-ref-name>jdbc/EmployeeAppDB</res-ref-name>
+	<res-type>javax.sql.DataSource</res-type>
+	<res-auth>Container</res-auth>
+	<res-sharing-scope>Shareable</res-sharing-scope>
+    </resource-ref>
+-->
+<!ELEMENT resource-ref (description?, res-ref-name, res-type, res-auth,
+		res-sharing-scope?)>
+
+<!--
+The role-link element is a reference to a defined security role. The
+role-link element must contain the name of one of the security roles
+defined in the security-role elements.
+
+Used in: security-role-ref
+-->
+<!ELEMENT role-link (#PCDATA)>
+
+<!--
+The role-name element contains the name of a security role.
+
+The name must conform to the lexical rules for an NMTOKEN.
+
+Used in: auth-constraint, run-as, security-role, security-role-ref
+-->
+<!ELEMENT role-name (#PCDATA)>
+
+<!--
+The run-as element specifies the run-as identity to be used for the
+execution of the web application. It contains an optional description, and
+the name of a security role.
+
+Used in: servlet
+-->
+<!ELEMENT run-as (description?, role-name)>
+
+<!--
+The security-constraint element is used to associate security
+constraints with one or more web resource collections
+
+Used in: web-app
+-->
+<!ELEMENT security-constraint (display-name?, web-resource-collection+,
+auth-constraint?, user-data-constraint?)>
+
+<!--
+The security-role element contains the definition of a security
+role. The definition consists of an optional description of the
+security role, and the security role name.
+
+Used in: web-app
+
+Example:
+
+    <security-role>
+	<description>
+	    This role includes all employees who are authorized
+	    to access the employee service application.
+	</description>
+	<role-name>employee</role-name>
+    </security-role>
+-->
+<!ELEMENT security-role (description?, role-name)>
+
+<!--
+The security-role-ref element contains the declaration of a security
+role reference in the web application's code. The declaration consists
+of an optional description, the security role name used in the code,
+and an optional link to a security role. If the security role is not
+specified, the Deployer must choose an appropriate security role.
+
+The value of the role-name element must be the String used as the
+parameter to the EJBContext.isCallerInRole(String roleName) method
+or the HttpServletRequest.isUserInRole(String role) method.
+
+Used in: servlet
+
+-->
+<!ELEMENT security-role-ref (description?, role-name, role-link?)>
+
+<!--
+The servlet element contains the declarative data of a
+servlet. If a jsp-file is specified and the load-on-startup element is
+present, then the JSP should be precompiled and loaded.
+
+Used in: web-app
+-->
+<!ELEMENT servlet (icon?, servlet-name, display-name?, description?,
+(servlet-class|jsp-file), init-param*, load-on-startup?, run-as?, security-role-ref*)>
+
+<!--
+The servlet-class element contains the fully qualified class name
+of the servlet.
+
+Used in: servlet
+-->
+<!ELEMENT servlet-class (#PCDATA)>
+
+<!--
+The servlet-mapping element defines a mapping between a servlet
+and a url pattern
+
+Used in: web-app
+-->
+<!ELEMENT servlet-mapping (servlet-name, url-pattern)>
+
+<!--
+The servlet-name element contains the canonical name of the
+servlet. Each servlet name is unique within the web application.
+
+Used in: filter-mapping, servlet, servlet-mapping
+-->
+<!ELEMENT servlet-name (#PCDATA)>
+
+<!--
+The session-config element defines the session parameters for
+this web application.
+
+Used in: web-app
+-->
+<!ELEMENT session-config (session-timeout?)>
+
+<!--
+The session-timeout element defines the default session timeout
+interval for all sessions created in this web application. The
+specified timeout must be expressed in a whole number of minutes.
+If the timeout is 0 or less, the container ensures the default
+behaviour of sessions is never to time out.
+
+Used in: session-config
+-->
+<!ELEMENT session-timeout (#PCDATA)>
+
+<!--
+The small-icon element contains the name of a file
+containing a small (16 x 16) icon image. The file
+name is a relative path within the web application's
+war file.
+
+The image may be either in the JPEG or GIF format.
+The icon can be used by tools.
+
+Used in: icon
+
+Example:
+
+<small-icon>employee-service-icon16x16.jpg</small-icon>
+-->
+<!ELEMENT small-icon (#PCDATA)>
+
+<!--
+The taglib element is used to describe a JSP tag library.
+
+Used in: web-app
+-->
+<!ELEMENT taglib (taglib-uri, taglib-location)>
+
+<!--
+the taglib-location element contains the location (as a resource
+relative to the root of the web application) where to find the Tag
+Libary Description file for the tag library.
+
+Used in: taglib
+-->
+<!ELEMENT taglib-location (#PCDATA)>
+
+<!--
+The taglib-uri element describes a URI, relative to the location
+of the web.xml document, identifying a Tag Library used in the Web
+Application.
+
+Used in: taglib
+-->
+<!ELEMENT taglib-uri (#PCDATA)>
+
+<!--
+The transport-guarantee element specifies that the communication
+between client and server should be NONE, INTEGRAL, or
+CONFIDENTIAL. NONE means that the application does not require any
+transport guarantees. A value of INTEGRAL means that the application
+requires that the data sent between the client and server be sent in
+such a way that it can't be changed in transit. CONFIDENTIAL means
+that the application requires that the data be transmitted in a
+fashion that prevents other entities from observing the contents of
+the transmission. In most cases, the presence of the INTEGRAL or
+CONFIDENTIAL flag will indicate that the use of SSL is required.
+
+Used in: user-data-constraint
+-->
+<!ELEMENT transport-guarantee (#PCDATA)>
+
+<!--
+The url-pattern element contains the url pattern of the mapping. Must
+follow the rules specified in Section 11.2 of the Servlet API
+Specification.
+
+Used in: filter-mapping, servlet-mapping, web-resource-collection
+-->
+<!ELEMENT url-pattern (#PCDATA)>
+
+<!--
+The user-data-constraint element is used to indicate how data
+communicated between the client and container should be protected.
+
+Used in: security-constraint
+-->
+<!ELEMENT user-data-constraint (description?, transport-guarantee)>
+
+<!--
+The web-resource-collection element is used to identify a subset
+of the resources and HTTP methods on those resources within a web
+application to which a security constraint applies. If no HTTP methods
+are specified, then the security constraint applies to all HTTP
+methods.
+
+Used in: security-constraint
+-->
+<!ELEMENT web-resource-collection (web-resource-name, description?,
+url-pattern*, http-method*)>
+
+<!--
+The web-resource-name contains the name of this web resource
+collection.
+
+Used in: web-resource-collection
+-->
+<!ELEMENT web-resource-name (#PCDATA)>
+
+<!--
+The welcome-file element contains file name to use as a default
+welcome file, such as index.html
+
+Used in: welcome-file-list
+-->
+<!ELEMENT welcome-file (#PCDATA)>
+
+<!--
+The welcome-file-list contains an ordered list of welcome files
+elements.
+
+Used in: web-app
+-->
+<!ELEMENT welcome-file-list (welcome-file+)>
+
+<!--
+The ID mechanism is to allow tools that produce additional deployment
+information (i.e., information beyond the standard deployment
+descriptor information) to store the non-standard information in a
+separate file, and easily refer from these tool-specific files to the
+information in the standard deployment descriptor.
+
+Tools are not allowed to add the non-standard information into the
+standard deployment descriptor.
+-->
+
+<!ATTLIST auth-constraint id ID #IMPLIED>
+<!ATTLIST auth-method id ID #IMPLIED>
+<!ATTLIST context-param id ID #IMPLIED>
+<!ATTLIST description id ID #IMPLIED>
+<!ATTLIST display-name id ID #IMPLIED>
+<!ATTLIST distributable id ID #IMPLIED>
+<!ATTLIST ejb-link id ID #IMPLIED>
+<!ATTLIST ejb-local-ref id ID #IMPLIED>
+<!ATTLIST ejb-ref id ID #IMPLIED>
+<!ATTLIST ejb-ref-name id ID #IMPLIED>
+<!ATTLIST ejb-ref-type id ID #IMPLIED>
+<!ATTLIST env-entry id ID #IMPLIED>
+<!ATTLIST env-entry-name id ID #IMPLIED>
+<!ATTLIST env-entry-type id ID #IMPLIED>
+<!ATTLIST env-entry-value id ID #IMPLIED>
+<!ATTLIST error-code id ID #IMPLIED>
+<!ATTLIST error-page id ID #IMPLIED>
+<!ATTLIST exception-type id ID #IMPLIED>
+<!ATTLIST extension id ID #IMPLIED>
+<!ATTLIST filter id ID #IMPLIED>
+<!ATTLIST filter-class id ID #IMPLIED>
+<!ATTLIST filter-mapping id ID #IMPLIED>
+<!ATTLIST filter-name id ID #IMPLIED>
+<!ATTLIST form-error-page id ID #IMPLIED>
+<!ATTLIST form-login-config id ID #IMPLIED>
+<!ATTLIST form-login-page id ID #IMPLIED>
+<!ATTLIST home id ID #IMPLIED>
+<!ATTLIST http-method id ID #IMPLIED>
+<!ATTLIST icon id ID #IMPLIED>
+<!ATTLIST init-param id ID #IMPLIED>
+<!ATTLIST jsp-file id ID #IMPLIED>
+<!ATTLIST large-icon id ID #IMPLIED>
+<!ATTLIST listener id ID #IMPLIED>
+<!ATTLIST listener-class id ID #IMPLIED>
+<!ATTLIST load-on-startup id ID #IMPLIED>
+<!ATTLIST local id ID #IMPLIED>
+<!ATTLIST local-home id ID #IMPLIED>
+<!ATTLIST location id ID #IMPLIED>
+<!ATTLIST login-config id ID #IMPLIED>
+<!ATTLIST mime-mapping id ID #IMPLIED>
+<!ATTLIST mime-type id ID #IMPLIED>
+<!ATTLIST param-name id ID #IMPLIED>
+<!ATTLIST param-value id ID #IMPLIED>
+<!ATTLIST realm-name id ID #IMPLIED>
+<!ATTLIST remote id ID #IMPLIED>
+<!ATTLIST res-auth id ID #IMPLIED>
+<!ATTLIST res-ref-name id ID #IMPLIED>
+<!ATTLIST res-sharing-scope id ID #IMPLIED>
+<!ATTLIST res-type id ID #IMPLIED>
+<!ATTLIST resource-env-ref id ID #IMPLIED>
+<!ATTLIST resource-env-ref-name id ID #IMPLIED>
+<!ATTLIST resource-env-ref-type id ID #IMPLIED>
+<!ATTLIST resource-ref id ID #IMPLIED>
+<!ATTLIST role-link id ID #IMPLIED>
+<!ATTLIST role-name id ID #IMPLIED>
+<!ATTLIST run-as id ID #IMPLIED>
+<!ATTLIST security-constraint id ID #IMPLIED>
+<!ATTLIST security-role id ID #IMPLIED>
+<!ATTLIST security-role-ref id ID #IMPLIED>
+<!ATTLIST servlet id ID #IMPLIED>
+<!ATTLIST servlet-class id ID #IMPLIED>
+<!ATTLIST servlet-mapping id ID #IMPLIED>
+<!ATTLIST servlet-name id ID #IMPLIED>
+<!ATTLIST session-config id ID #IMPLIED>
+<!ATTLIST session-timeout id ID #IMPLIED>
+<!ATTLIST small-icon id ID #IMPLIED>
+<!ATTLIST taglib id ID #IMPLIED>
+<!ATTLIST taglib-location id ID #IMPLIED>
+<!ATTLIST taglib-uri id ID #IMPLIED>
+<!ATTLIST transport-guarantee id ID #IMPLIED>
+<!ATTLIST url-pattern id ID #IMPLIED>
+<!ATTLIST user-data-constraint id ID #IMPLIED>
+<!ATTLIST web-app id ID #IMPLIED>
+<!ATTLIST web-resource-collection id ID #IMPLIED>
+<!ATTLIST web-resource-name id ID #IMPLIED>
+<!ATTLIST welcome-file id ID #IMPLIED>
+<!ATTLIST welcome-file-list id ID #IMPLIED>

Added: project_src/website/Tomcat/work/web/loader/org/apache/struts/taglib/bean/LocalStrings.properties
===================================================================
--- project_src/website/Tomcat/work/web/loader/org/apache/struts/taglib/bean/LocalStrings.properties	2004-12-14 18:42:22 UTC (rev 247)
+++ project_src/website/Tomcat/work/web/loader/org/apache/struts/taglib/bean/LocalStrings.properties	2004-12-27 13:04:03 UTC (rev 248)
@@ -0,0 +1,22 @@
+cookie.get=No cookie {0} was included in this request
+define.null=Define tag cannot set a null value
+define.value=Define tag can contain only one of name attribute, value attribute, or body content
+header.get=No header {0} was included in this request
+include.destination=You must specify exactly one of forward, href, or page
+include.forward=Missing ActionForward entry {0}
+include.forwards=Missing ActionForwards application scope bean
+include.malformed=Cannot create URL for {0}
+include.open=Exception opening resource {0}: {1}
+include.read=Exception reading resource {0}: {1}
+include.url=Cannot create include URL: {0}
+message.message=Missing message for key {0}
+message.property=Property for message key must be a String
+message.resources=Missing resources attribute {0}
+page.selector=Invalid page context selector {0}
+parameter.get=No parameter {0} was included in this request
+resource.get=No resource {0} available in this application
+size.collection=No valid collection specified for size tag
+size.noCollectionOrName=Must specify either a collection or name attribute for size tag
+struts.missing=No Struts internal object named {0} is available
+struts.selector=You must specify exactly one of formBean, forward, or mapping
+write.format=Wrong format string: '{0}'

Added: project_src/website/Tomcat/work/web/loader/org/apache/struts/taglib/html/LocalStrings.properties
===================================================================
--- project_src/website/Tomcat/work/web/loader/org/apache/struts/taglib/html/LocalStrings.properties	2004-12-14 18:42:22 UTC (rev 247)
+++ project_src/website/Tomcat/work/web/loader/org/apache/struts/taglib/html/LocalStrings.properties	2004-12-27 13:04:03 UTC (rev 248)
@@ -0,0 +1,43 @@
+common.both=You can specify either the literal value or a message key but not both
+common.io=Encountered input/output error: {0}
+enumerateTag.enumeration=Cannot create enumeration for {0}
+formTag.collections=Cannot find ActionMappings or ActionFormBeans collection
+formTag.create=Exception creating bean of class {0}: {1}
+formTag.formBean=Cannot retrieve definition for form bean {0}
+formTag.mapping=Cannot retrieve mapping for action {0}
+formTag.nameType=Must specify type attribute if name is specified
+forwardTag.forward=Error forwarding to page {0}: {1}
+forwardTag.lookup=Cannot find global forward named {0}
+forwardTag.redirect=Error redirecting to path {0}: {1}
+getter.access=Cannot access property {0} for bean under name {1}
+getter.bean=Cannot find bean under name {0}
+getter.method=No getter method available for property {0} for bean under name {1}
+getter.name=You must specify a name attribute if the property attribute is present
+getter.property=Property {0} returned a null value
+getter.result=Getter for property {0} threw exception: {1}
+imgTag.alt=You may specify either alt or altKey but not both
+imgTag.bundle=Cannot find message resources bundle under key {0}
+imgTag.src=You must specify exactly one of src, srcKey, page, or pageKey
+imgTag.title=You may specify either title or titleKey but not both
+imgTag.type=Object must be of type Map
+includeTag.include=Error including page {0}: {1}
+includeTag.lookup=Cannot find global forward named {0}
+indexed.noEnclosingIterate=indexed=\"true\" is only valid within an enclosing iterate tag
+iterateTag.iterator=Cannot create iterator for {0}
+linkTag.destination=You must specify exactly one of 'forward', 'href', or 'page'
+linkTag.forward=Cannot locate global forwarding for {0}
+linkTag.forwards=Cannot locate forwards mapping table
+linkTag.type=Object must be of type Map
+linkTag.type1=Object must be of type Dictionary
+linkTag.url=Cannot create link URL: {0}
+messageTag.message=Missing message for key {0}
+messageTag.resources=Missing resources attribute {0}
+multiboxTag.value=You must specify the value attribute or nested tag content
+optionsCollectionTag.collection=Failed to obtain specified collection
+optionsCollectionTag.iterator=Cannot create iterator for {0}
+optionsCollectionTag.select=OptionsCollection tag must be nested in a Select tag
+optionsTag.enumeration=Cannot create enumeration for {0}
+optionsTag.iterator=Cannot create iterator for {0}
+optionsTag.select=Options tag must be nested in a Select tag
+optionTag.select=Option tag must be nested in a Select tag
+rewrite.url=Cannot create rewrite URL: {0}

Added: project_src/website/Tomcat/work/web/loader/org/apache/struts/taglib/logic/LocalStrings.properties
===================================================================
--- project_src/website/Tomcat/work/web/loader/org/apache/struts/taglib/logic/LocalStrings.properties	2004-12-14 18:42:22 UTC (rev 247)
+++ project_src/website/Tomcat/work/web/loader/org/apache/struts/taglib/logic/LocalStrings.properties	2004-12-27 13:04:03 UTC (rev 248)
@@ -0,0 +1,16 @@
+empty.noNameAttribute=No name attribute was specified
+forward.forward=Exception forwarding for name {0}: {1}
+forward.lookup=Cannot find global ActionForward for name {0}
+forward.redirect=Exception redirecting for name {0}: {1}
+iterate.collection=No collection found
+iterate.iterator=Cannot create iterator for this collection
+logic.bean=No bean found under attribute key {0}
+logic.property=Exception accessing property {1} for bean {0}: {2}
+logic.selector=No selector attribute (cookie/header/name/parameter) was specified
+logic.variable=Cannot compare null variable to value {0}
+logic.location=Invalid match location {0}
+redirect.destination=You must specify exactly one of forward, href, or page
+redirect.forward=Missing ActionForward for {0}
+redirect.forwards=Missing ActionForwards collection
+redirect.map=Property {0} of bean {1} is not a Map
+redirect.url=Cannot create redirect URL: {0}

Added: project_src/website/Tomcat/work/web/loader/org/apache/struts/util/LocalStrings.properties
===================================================================
--- project_src/website/Tomcat/work/web/loader/org/apache/struts/util/LocalStrings.properties	2004-12-14 18:42:22 UTC (rev 247)
+++ project_src/website/Tomcat/work/web/loader/org/apache/struts/util/LocalStrings.properties	2004-12-27 13:04:03 UTC (rev 248)
@@ -0,0 +1,30 @@
+actionErrors.errors=Cannot process ActionErrors instance of class {0}
+
+actionMessages.errors=Cannot process ActionMessages instance of class {0}
+
+computeURL.forward=Cannot retrieve ActionForward named {0}
+
+computeURL.forwards=Cannot retrieve ActionForwards collection
+
+computeURL.specifier=You must specify exactly one of "forward", "href", "page" or "action"
+
+lookup.access=Invalid access looking up property {0} of bean {1}
+
+lookup.bean.any=Cannot find bean {0} in any scope
+
+lookup.bean=Cannot find bean {0} in scope {1}
+
+lookup.method=No getter method for property {0} of bean {1}
+
+lookup.scope=Invalid bean scope {0}
+
+lookup.target=Exception thrown by getter for property {0} of bean {1}
+
+message.bundle=Cannot find message resources under key {0}
+
+parameters.multi=Cannot cast to Map for name={0} property={1} scope={2}
+
+parameters.single=Cannot cast to String for name={0} property={1} scope={2}
+
+write.io=Input/output error: {0}
+

Added: project_src/website/Tomcat/work/web/tldCache.ser
===================================================================
(Binary files differ)


Property changes on: project_src/website/Tomcat/work/web/tldCache.ser
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/website/classes/ApplicationResources.properties
===================================================================

Added: project_src/website/classes/Generated Source/.jsp/web/org/apache/jsp/basket_jsp.java
===================================================================
--- project_src/website/classes/Generated Source/.jsp/web/org/apache/jsp/basket_jsp.java	2004-12-14 18:42:22 UTC (rev 247)
+++ project_src/website/classes/Generated Source/.jsp/web/org/apache/jsp/basket_jsp.java	2004-12-27 13:04:03 UTC (rev 248)
@@ -0,0 +1,217 @@
+package org.apache.jsp;
+
+import javax.servlet.*;
+import javax.servlet.http.*;
+import javax.servlet.jsp.*;
+
+public final class basket_jsp extends org.apache.jasper.runtime.HttpJspBase
+    implements org.apache.jasper.runtime.JspSourceDependent {
+
+  private static java.util.Vector _jspx_dependants;
+
+  static {
+    _jspx_dependants = new java.util.Vector(2);
+    _jspx_dependants.add("/WEB-INF/taglib/struts-tiles.tld");
+    _jspx_dependants.add("/WEB-INF/taglib/struts-logic.tld");
+  }
+
+  private org.apache.jasper.runtime.TagHandlerPool _jspx_tagPool_tiles_insert_page_flush;
+  private org.apache.jasper.runtime.TagHandlerPool _jspx_tagPool_tiles_put_value_name_nobody;
+  private org.apache.jasper.runtime.TagHandlerPool _jspx_tagPool_tiles_put_type_name;
+
+  public java.util.List getDependants() {
+    return _jspx_dependants;
+  }
+
+  public void _jspInit() {
+    _jspx_tagPool_tiles_insert_page_flush = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
+    _jspx_tagPool_tiles_put_value_name_nobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
+    _jspx_tagPool_tiles_put_type_name = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
+  }
+
+  public void _jspDestroy() {
+    _jspx_tagPool_tiles_insert_page_flush.release();
+    _jspx_tagPool_tiles_put_value_name_nobody.release();
+    _jspx_tagPool_tiles_put_type_name.release();
+  }
+
+  public void _jspService(HttpServletRequest request, HttpServletResponse response)
+        throws java.io.IOException, ServletException {
+
+    JspFactory _jspxFactory = null;
+    PageContext pageContext = null;
+    HttpSession session = null;
+    ServletContext application = null;
+    ServletConfig config = null;
+    JspWriter out = null;
+    Object page = this;
+    JspWriter _jspx_out = null;
+    PageContext _jspx_page_context = null;
+
+
+    try {
+      _jspxFactory = JspFactory.getDefaultFactory();
+      response.setContentType("text/html");
+      pageContext = _jspxFactory.getPageContext(this, request, response,
+      			null, true, 8192, true);
+      _jspx_page_context = pageContext;
+      application = pageContext.getServletContext();
+      config = pageContext.getServletConfig();
+      session = pageContext.getSession();
+      out = pageContext.getOut();
+      _jspx_out = out;
+
+      out.write("\r\n\r\n\r\n");
+      if (_jspx_meth_tiles_insert_0(_jspx_page_context))
+        return;
+      out.write("\r\n\r\n\r\n\r\n");
+    } catch (Throwable t) {
+      if (!(t instanceof SkipPageException)){
+        out = _jspx_out;
+        if (out != null && out.getBufferSize() != 0)
+          out.clearBuffer();
+        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
+      }
+    } finally {
+      if (_jspxFactory != null) _jspxFactory.releasePageContext(_jspx_page_context);
+    }
+  }
+
+  private boolean _jspx_meth_tiles_insert_0(PageContext _jspx_page_context)
+          throws Throwable {
+    PageContext pageContext = _jspx_page_context;
+    JspWriter out = _jspx_page_context.getOut();
+    //  tiles:insert
+    org.apache.struts.taglib.tiles.InsertTag _jspx_th_tiles_insert_0 = (org.apache.struts.taglib.tiles.InsertTag) _jspx_tagPool_tiles_insert_page_flush.get(org.apache.struts.taglib.tiles.InsertTag.class);
+    _jspx_th_tiles_insert_0.setPageContext(_jspx_page_context);
+    _jspx_th_tiles_insert_0.setParent(null);
+    _jspx_th_tiles_insert_0.setPage("/templates/main.jsp");
+    _jspx_th_tiles_insert_0.setFlush(true);
+    int _jspx_eval_tiles_insert_0 = _jspx_th_tiles_insert_0.doStartTag();
+    if (_jspx_eval_tiles_insert_0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
+      do {
+        out.write("\r\n\r\n");
+        if (_jspx_meth_tiles_put_0(_jspx_th_tiles_insert_0, _jspx_page_context))
+          return true;
+        out.write('\r');
+        out.write('\n');
+        if (_jspx_meth_tiles_put_1(_jspx_th_tiles_insert_0, _jspx_page_context))
+          return true;
+        out.write("\r\n\r\n");
+        if (_jspx_meth_tiles_put_2(_jspx_th_tiles_insert_0, _jspx_page_context))
+          return true;
+        out.write("\r\n\r\n");
+        if (_jspx_meth_tiles_put_3(_jspx_th_tiles_insert_0, _jspx_page_context))
+          return true;
+        out.write('\r');
+        out.write('\n');
+        int evalDoAfterBody = _jspx_th_tiles_insert_0.doAfterBody();
+        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
+          break;
+      } while (true);
+    }
+    if (_jspx_th_tiles_insert_0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+      return true;
+    _jspx_tagPool_tiles_insert_page_flush.reuse(_jspx_th_tiles_insert_0);
+    return false;
+  }
+
+  private boolean _jspx_meth_tiles_put_0(javax.servlet.jsp.tagext.JspTag _jspx_th_tiles_insert_0, PageContext _jspx_page_context)
+          throws Throwable {
+    PageContext pageContext = _jspx_page_context;
+    JspWriter out = _jspx_page_context.getOut();
+    //  tiles:put
+    org.apache.struts.taglib.tiles.PutTag _jspx_th_tiles_put_0 = (org.apache.struts.taglib.tiles.PutTag) _jspx_tagPool_tiles_put_value_name_nobody.get(org.apache.struts.taglib.tiles.PutTag.class);
+    _jspx_th_tiles_put_0.setPageContext(_jspx_page_context);
+    _jspx_th_tiles_put_0.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_tiles_insert_0);
+    _jspx_th_tiles_put_0.setName("title");
+    _jspx_th_tiles_put_0.setValue("Top 10");
+    int _jspx_eval_tiles_put_0 = _jspx_th_tiles_put_0.doStartTag();
+    if (_jspx_th_tiles_put_0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+      return true;
+    _jspx_tagPool_tiles_put_value_name_nobody.reuse(_jspx_th_tiles_put_0);
+    return false;
+  }
+
+  private boolean _jspx_meth_tiles_put_1(javax.servlet.jsp.tagext.JspTag _jspx_th_tiles_insert_0, PageContext _jspx_page_context)
+          throws Throwable {
+    PageContext pageContext = _jspx_page_context;
+    JspWriter out = _jspx_page_context.getOut();
+    //  tiles:put
+    org.apache.struts.taglib.tiles.PutTag _jspx_th_tiles_put_1 = (org.apache.struts.taglib.tiles.PutTag) _jspx_tagPool_tiles_put_value_name_nobody.get(org.apache.struts.taglib.tiles.PutTag.class);
+    _jspx_th_tiles_put_1.setPageContext(_jspx_page_context);
+    _jspx_th_tiles_put_1.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_tiles_insert_0);
+    _jspx_th_tiles_put_1.setName("top10month_link");
+    _jspx_th_tiles_put_1.setValue("top10.jsp");
+    int _jspx_eval_tiles_put_1 = _jspx_th_tiles_put_1.doStartTag();
+    if (_jspx_th_tiles_put_1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+      return true;
+    _jspx_tagPool_tiles_put_value_name_nobody.reuse(_jspx_th_tiles_put_1);
+    return false;
+  }
+
+  private boolean _jspx_meth_tiles_put_2(javax.servlet.jsp.tagext.JspTag _jspx_th_tiles_insert_0, PageContext _jspx_page_context)
+          throws Throwable {
+    PageContext pageContext = _jspx_page_context;
+    JspWriter out = _jspx_page_context.getOut();
+    //  tiles:put
+    org.apache.struts.taglib.tiles.PutTag _jspx_th_tiles_put_2 = (org.apache.struts.taglib.tiles.PutTag) _jspx_tagPool_tiles_put_type_name.get(org.apache.struts.taglib.tiles.PutTag.class);
+    _jspx_th_tiles_put_2.setPageContext(_jspx_page_context);
+    _jspx_th_tiles_put_2.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_tiles_insert_0);
+    _jspx_th_tiles_put_2.setName("head_login");
+    _jspx_th_tiles_put_2.setType("string");
+    int _jspx_eval_tiles_put_2 = _jspx_th_tiles_put_2.doStartTag();
+    if (_jspx_eval_tiles_put_2 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
+      if (_jspx_eval_tiles_put_2 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE) {
+        out = _jspx_page_context.pushBody();
+        _jspx_th_tiles_put_2.setBodyContent((javax.servlet.jsp.tagext.BodyContent) out);
+        _jspx_th_tiles_put_2.doInitBody();
+      }
+      do {
+        out.write("\r\n  <span class=\"pref\">Meine Daten&nbsp;</span>\r\n    <span class=\"pref\"><a href=\"basket.jsp\">Warenkorb</a></span>\r\n");
+        int evalDoAfterBody = _jspx_th_tiles_put_2.doAfterBody();
+        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
+          break;
+      } while (true);
+      if (_jspx_eval_tiles_put_2 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE)
+        out = _jspx_page_context.popBody();
+    }
+    if (_jspx_th_tiles_put_2.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+      return true;
+    _jspx_tagPool_tiles_put_type_name.reuse(_jspx_th_tiles_put_2);
+    return false;
+  }
+
+  private boolean _jspx_meth_tiles_put_3(javax.servlet.jsp.tagext.JspTag _jspx_th_tiles_insert_0, PageContext _jspx_page_context)
+          throws Throwable {
+    PageContext pageContext = _jspx_page_context;
+    JspWriter out = _jspx_page_context.getOut();
+    //  tiles:put
+    org.apache.struts.taglib.tiles.PutTag _jspx_th_tiles_put_3 = (org.apache.struts.taglib.tiles.PutTag) _jspx_tagPool_tiles_put_type_name.get(org.apache.struts.taglib.tiles.PutTag.class);
+    _jspx_th_tiles_put_3.setPageContext(_jspx_page_context);
+    _jspx_th_tiles_put_3.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_tiles_insert_0);
+    _jspx_th_tiles_put_3.setName("contentbody");
+    _jspx_th_tiles_put_3.setType("string");
+    int _jspx_eval_tiles_put_3 = _jspx_th_tiles_put_3.doStartTag();
+    if (_jspx_eval_tiles_put_3 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
+      if (_jspx_eval_tiles_put_3 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE) {
+        out = _jspx_page_context.pushBody();
+        _jspx_th_tiles_put_3.setBodyContent((javax.servlet.jsp.tagext.BodyContent) out);
+        _jspx_th_tiles_put_3.doInitBody();
+      }
+      do {
+        out.write("\r\n\r\n\r\n<!--main list start -->\r\n\r\n            <table style=\"width: 90%; text-align: left;\" align=\"center\" border=\"1\" cellpadding=\"0\" cellspacing=\"0\">\r\n\t\t\t<thead class=\"basket_head\">\r\n                <tr>\r\n                  <th style=\"width: 10%; text-align: center;\">Pos<br>\r\n                  </th>\r\n                  <th style=\"width: 44%; text-align: left;\">DVD - Name<br>\r\n                  </th>\r\n                  <th style=\"width: 15%; text-align: center;\">Tage<br>\r\n                  </th>\r\n                  <th style=\"width: 15%; text-align: center;\">Vorhanden<br>\r\n                  </th>\r\n                  <th style=\"width: 1%;\"><br>\r\n                  </th>\r\n                  <th style=\"width: 15%; text-align: center;\">Preis<br>\r\n                  </th>\r\n                </tr>\r\n             </thead>\r\n\t\t\t<tbody class=\"basket_item\">\r\n                <tr>\r\n                  <!
 td><br>\r\n                  </td>\r\n                  <td><br>\r\n                  </td>\r\n                  <td><br>\r\n                  </td>\r\n");
+        out.write("                  <td><br>\r\n                  </td>\r\n                  <td><br>\r\n                  </td>\r\n                  <td><br>\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <td><br>\r\n                  </td>\r\n                  <td><br>\r\n                  </td>\r\n                  <td><br>\r\n                  </td>\r\n                  <td><br>\r\n                  </td>\r\n                  <td><br>\r\n                  </td>\r\n                  <td><br>\r\n                  </td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n\r\n\r\n<!--main list end -->\r\n  ");
+        int evalDoAfterBody = _jspx_th_tiles_put_3.doAfterBody();
+        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
+          break;
+      } while (true);
+      if (_jspx_eval_tiles_put_3 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE)
+        out = _jspx_page_context.popBody();
+    }
+    if (_jspx_th_tiles_put_3.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+      return true;
+    _jspx_tagPool_tiles_put_type_name.reuse(_jspx_th_tiles_put_3);
+    return false;
+  }
+}

Added: project_src/website/classes/Generated Source/.jsp/web/org/apache/jsp/details_jsp.java
===================================================================
--- project_src/website/classes/Generated Source/.jsp/web/org/apache/jsp/details_jsp.java	2004-12-14 18:42:22 UTC (rev 247)
+++ project_src/website/classes/Generated Source/.jsp/web/org/apache/jsp/details_jsp.java	2004-12-27 13:04:03 UTC (rev 248)
@@ -0,0 +1,218 @@
+package org.apache.jsp;
+
+import javax.servlet.*;
+import javax.servlet.http.*;
+import javax.servlet.jsp.*;
+
+public final class details_jsp extends org.apache.jasper.runtime.HttpJspBase
+    implements org.apache.jasper.runtime.JspSourceDependent {
+
+  private static java.util.Vector _jspx_dependants;
+
+  static {
+    _jspx_dependants = new java.util.Vector(2);
+    _jspx_dependants.add("/WEB-INF/taglib/struts-tiles.tld");
+    _jspx_dependants.add("/WEB-INF/taglib/struts-logic.tld");
+  }
+
+  private org.apache.jasper.runtime.TagHandlerPool _jspx_tagPool_tiles_insert_page_flush;
+  private org.apache.jasper.runtime.TagHandlerPool _jspx_tagPool_tiles_put_value_name_nobody;
+  private org.apache.jasper.runtime.TagHandlerPool _jspx_tagPool_tiles_put_type_name;
+
+  public java.util.List getDependants() {
+    return _jspx_dependants;
+  }
+
+  public void _jspInit() {
+    _jspx_tagPool_tiles_insert_page_flush = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
+    _jspx_tagPool_tiles_put_value_name_nobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
+    _jspx_tagPool_tiles_put_type_name = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
+  }
+
+  public void _jspDestroy() {
+    _jspx_tagPool_tiles_insert_page_flush.release();
+    _jspx_tagPool_tiles_put_value_name_nobody.release();
+    _jspx_tagPool_tiles_put_type_name.release();
+  }
+
+  public void _jspService(HttpServletRequest request, HttpServletResponse response)
+        throws java.io.IOException, ServletException {
+
+    JspFactory _jspxFactory = null;
+    PageContext pageContext = null;
+    HttpSession session = null;
+    ServletContext application = null;
+    ServletConfig config = null;
+    JspWriter out = null;
+    Object page = this;
+    JspWriter _jspx_out = null;
+    PageContext _jspx_page_context = null;
+
+
+    try {
+      _jspxFactory = JspFactory.getDefaultFactory();
+      response.setContentType("text/html");
+      pageContext = _jspxFactory.getPageContext(this, request, response,
+      			null, true, 8192, true);
+      _jspx_page_context = pageContext;
+      application = pageContext.getServletContext();
+      config = pageContext.getServletConfig();
+      session = pageContext.getSession();
+      out = pageContext.getOut();
+      _jspx_out = out;
+
+      out.write("\r\n\r\n\r\n");
+      if (_jspx_meth_tiles_insert_0(_jspx_page_context))
+        return;
+      out.write("\r\n\r\n\r\n\r\n");
+    } catch (Throwable t) {
+      if (!(t instanceof SkipPageException)){
+        out = _jspx_out;
+        if (out != null && out.getBufferSize() != 0)
+          out.clearBuffer();
+        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
+      }
+    } finally {
+      if (_jspxFactory != null) _jspxFactory.releasePageContext(_jspx_page_context);
+    }
+  }
+
+  private boolean _jspx_meth_tiles_insert_0(PageContext _jspx_page_context)
+          throws Throwable {
+    PageContext pageContext = _jspx_page_context;
+    JspWriter out = _jspx_page_context.getOut();
+    //  tiles:insert
+    org.apache.struts.taglib.tiles.InsertTag _jspx_th_tiles_insert_0 = (org.apache.struts.taglib.tiles.InsertTag) _jspx_tagPool_tiles_insert_page_flush.get(org.apache.struts.taglib.tiles.InsertTag.class);
+    _jspx_th_tiles_insert_0.setPageContext(_jspx_page_context);
+    _jspx_th_tiles_insert_0.setParent(null);
+    _jspx_th_tiles_insert_0.setPage("/templates/main.jsp");
+    _jspx_th_tiles_insert_0.setFlush(true);
+    int _jspx_eval_tiles_insert_0 = _jspx_th_tiles_insert_0.doStartTag();
+    if (_jspx_eval_tiles_insert_0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
+      do {
+        out.write("\r\n\r\n");
+        if (_jspx_meth_tiles_put_0(_jspx_th_tiles_insert_0, _jspx_page_context))
+          return true;
+        out.write('\r');
+        out.write('\n');
+        if (_jspx_meth_tiles_put_1(_jspx_th_tiles_insert_0, _jspx_page_context))
+          return true;
+        out.write("\r\n\r\n");
+        if (_jspx_meth_tiles_put_2(_jspx_th_tiles_insert_0, _jspx_page_context))
+          return true;
+        out.write("\r\n\r\n");
+        if (_jspx_meth_tiles_put_3(_jspx_th_tiles_insert_0, _jspx_page_context))
+          return true;
+        out.write('\r');
+        out.write('\n');
+        int evalDoAfterBody = _jspx_th_tiles_insert_0.doAfterBody();
+        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
+          break;
+      } while (true);
+    }
+    if (_jspx_th_tiles_insert_0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+      return true;
+    _jspx_tagPool_tiles_insert_page_flush.reuse(_jspx_th_tiles_insert_0);
+    return false;
+  }
+
+  private boolean _jspx_meth_tiles_put_0(javax.servlet.jsp.tagext.JspTag _jspx_th_tiles_insert_0, PageContext _jspx_page_context)
+          throws Throwable {
+    PageContext pageContext = _jspx_page_context;
+    JspWriter out = _jspx_page_context.getOut();
+    //  tiles:put
+    org.apache.struts.taglib.tiles.PutTag _jspx_th_tiles_put_0 = (org.apache.struts.taglib.tiles.PutTag) _jspx_tagPool_tiles_put_value_name_nobody.get(org.apache.struts.taglib.tiles.PutTag.class);
+    _jspx_th_tiles_put_0.setPageContext(_jspx_page_context);
+    _jspx_th_tiles_put_0.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_tiles_insert_0);
+    _jspx_th_tiles_put_0.setName("title");
+    _jspx_th_tiles_put_0.setValue("Top 10");
+    int _jspx_eval_tiles_put_0 = _jspx_th_tiles_put_0.doStartTag();
+    if (_jspx_th_tiles_put_0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+      return true;
+    _jspx_tagPool_tiles_put_value_name_nobody.reuse(_jspx_th_tiles_put_0);
+    return false;
+  }
+
+  private boolean _jspx_meth_tiles_put_1(javax.servlet.jsp.tagext.JspTag _jspx_th_tiles_insert_0, PageContext _jspx_page_context)
+          throws Throwable {
+    PageContext pageContext = _jspx_page_context;
+    JspWriter out = _jspx_page_context.getOut();
+    //  tiles:put
+    org.apache.struts.taglib.tiles.PutTag _jspx_th_tiles_put_1 = (org.apache.struts.taglib.tiles.PutTag) _jspx_tagPool_tiles_put_value_name_nobody.get(org.apache.struts.taglib.tiles.PutTag.class);
+    _jspx_th_tiles_put_1.setPageContext(_jspx_page_context);
+    _jspx_th_tiles_put_1.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_tiles_insert_0);
+    _jspx_th_tiles_put_1.setName("top10month_link");
+    _jspx_th_tiles_put_1.setValue("top10.jsp");
+    int _jspx_eval_tiles_put_1 = _jspx_th_tiles_put_1.doStartTag();
+    if (_jspx_th_tiles_put_1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+      return true;
+    _jspx_tagPool_tiles_put_value_name_nobody.reuse(_jspx_th_tiles_put_1);
+    return false;
+  }
+
+  private boolean _jspx_meth_tiles_put_2(javax.servlet.jsp.tagext.JspTag _jspx_th_tiles_insert_0, PageContext _jspx_page_context)
+          throws Throwable {
+    PageContext pageContext = _jspx_page_context;
+    JspWriter out = _jspx_page_context.getOut();
+    //  tiles:put
+    org.apache.struts.taglib.tiles.PutTag _jspx_th_tiles_put_2 = (org.apache.struts.taglib.tiles.PutTag) _jspx_tagPool_tiles_put_type_name.get(org.apache.struts.taglib.tiles.PutTag.class);
+    _jspx_th_tiles_put_2.setPageContext(_jspx_page_context);
+    _jspx_th_tiles_put_2.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_tiles_insert_0);
+    _jspx_th_tiles_put_2.setName("head_login");
+    _jspx_th_tiles_put_2.setType("string");
+    int _jspx_eval_tiles_put_2 = _jspx_th_tiles_put_2.doStartTag();
+    if (_jspx_eval_tiles_put_2 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
+      if (_jspx_eval_tiles_put_2 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE) {
+        out = _jspx_page_context.pushBody();
+        _jspx_th_tiles_put_2.setBodyContent((javax.servlet.jsp.tagext.BodyContent) out);
+        _jspx_th_tiles_put_2.doInitBody();
+      }
+      do {
+        out.write("\r\n  <span class=\"pref\">Meine Daten&nbsp;</span>\r\n  <span class=\"pref\"><a href=\"basket.jsp\">Warenkorb</a></span>\r\n");
+        int evalDoAfterBody = _jspx_th_tiles_put_2.doAfterBody();
+        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
+          break;
+      } while (true);
+      if (_jspx_eval_tiles_put_2 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE)
+        out = _jspx_page_context.popBody();
+    }
+    if (_jspx_th_tiles_put_2.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+      return true;
+    _jspx_tagPool_tiles_put_type_name.reuse(_jspx_th_tiles_put_2);
+    return false;
+  }
+
+  private boolean _jspx_meth_tiles_put_3(javax.servlet.jsp.tagext.JspTag _jspx_th_tiles_insert_0, PageContext _jspx_page_context)
+          throws Throwable {
+    PageContext pageContext = _jspx_page_context;
+    JspWriter out = _jspx_page_context.getOut();
+    //  tiles:put
+    org.apache.struts.taglib.tiles.PutTag _jspx_th_tiles_put_3 = (org.apache.struts.taglib.tiles.PutTag) _jspx_tagPool_tiles_put_type_name.get(org.apache.struts.taglib.tiles.PutTag.class);
+    _jspx_th_tiles_put_3.setPageContext(_jspx_page_context);
+    _jspx_th_tiles_put_3.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_tiles_insert_0);
+    _jspx_th_tiles_put_3.setName("contentbody");
+    _jspx_th_tiles_put_3.setType("string");
+    int _jspx_eval_tiles_put_3 = _jspx_th_tiles_put_3.doStartTag();
+    if (_jspx_eval_tiles_put_3 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
+      if (_jspx_eval_tiles_put_3 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE) {
+        out = _jspx_page_context.pushBody();
+        _jspx_th_tiles_put_3.setBodyContent((javax.servlet.jsp.tagext.BodyContent) out);
+        _jspx_th_tiles_put_3.doInitBody();
+      }
+      do {
+        out.write("\r\n\r\n<!--main list start -->\r\n\r\n            <table style=\"width: 95%;\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\">\r\n              <tbody>\r\n                <tr>\r\n                  <td align=\"center\" width=\"20%\"><img style=\"width: 156px; height: 180px;\" src=\"\" alt=\"Mainpicture\" title=\"Mainpicture\"></td>\r\n                  <td>\r\n                  <span class=\"detail_title\">Titel des Films Over </span><br/>\r\n<span class=\"detail_genre\">Genre1, Genre2</span><br>\r\n<span class=\"detail_describ\">ganz lang </span>\r\nund dann drei Punkte . . .<br>\r\nVorhanden: 3 DVD's<br>\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <td style=\"width: 100%;\" colspan=\"2\"> <span class=\"detail_hartist\">Darsteller</span><br/>\r\n                    <span class=\"detail_artist\">Max Schmeling</span>\r\n                  </td>\r\n                </tr>\r\n              !
   <tr>\r\n                  <td style=\"width: 100%;\" colspan=\"2\"> <span class=\"detail_hdir\">Regie </span><br/>\r\n                    <span class=\"detail_dir\">&nbsp;</span>\r\n");
+        out.write("                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <td style=\"width: 100%;\" colspan=\"2\"> <span class=\"detail_haudio\">AudioFormate</span><br/>\r\n                    <span class=\"detail_audio\">&nbsp;</span>\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <td style=\"width: 100%;\" colspan=\"2\"> <span class=\"detail_hvideo\">VideoFormate</span><br/>\r\n                    <span class=\"detail_video\">&nbsp;</span>\r\n                  </td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n            <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" style=\"width: 90%;\" align=\"center\">\r\n              <tbody>\r\n                <tr>\r\n                  <th colspan=\"4\" class=\"detail_hpicture\" style=\"text-align:left;\">Weitere Bilder </th>\r\n                </tr>\r\n                <tr>\r\n                  <td cla!
 ss=\"detail_picture\">Bild 1</td>\r\n                  <td class=\"detail_picture\">Bild 2</td>\r\n                  <td class=\"detail_picture\">Bild 3</td>\r\n");
+        out.write("                  <td class=\"detail_picture\">Bild 4</td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n\r\n\r\n\r\n<!--main list end -->\r\n\r\n\r\n\r\n\r\n  ");
+        int evalDoAfterBody = _jspx_th_tiles_put_3.doAfterBody();
+        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
+          break;
+      } while (true);
+      if (_jspx_eval_tiles_put_3 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE)
+        out = _jspx_page_context.popBody();
+    }
+    if (_jspx_th_tiles_put_3.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+      return true;
+    _jspx_tagPool_tiles_put_type_name.reuse(_jspx_th_tiles_put_3);
+    return false;
+  }
+}

Added: project_src/website/classes/Generated Source/.jsp/web/org/apache/jsp/index_jsp.java
===================================================================
--- project_src/website/classes/Generated Source/.jsp/web/org/apache/jsp/index_jsp.java	2004-12-14 18:42:22 UTC (rev 247)
+++ project_src/website/classes/Generated Source/.jsp/web/org/apache/jsp/index_jsp.java	2004-12-27 13:04:03 UTC (rev 248)
@@ -0,0 +1,215 @@
+package org.apache.jsp;
+
+import javax.servlet.*;
+import javax.servlet.http.*;
+import javax.servlet.jsp.*;
+
+public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
+    implements org.apache.jasper.runtime.JspSourceDependent {
+
+  private static java.util.Vector _jspx_dependants;
+
+  static {
+    _jspx_dependants = new java.util.Vector(1);
+    _jspx_dependants.add("/WEB-INF/taglib/struts-tiles.tld");
+  }
+
+  private org.apache.jasper.runtime.TagHandlerPool _jspx_tagPool_tiles_insert_page_flush;
+  private org.apache.jasper.runtime.TagHandlerPool _jspx_tagPool_tiles_put_value_name_nobody;
+  private org.apache.jasper.runtime.TagHandlerPool _jspx_tagPool_tiles_put_type_name;
+
+  public java.util.List getDependants() {
+    return _jspx_dependants;
+  }
+
+  public void _jspInit() {
+    _jspx_tagPool_tiles_insert_page_flush = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
+    _jspx_tagPool_tiles_put_value_name_nobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
+    _jspx_tagPool_tiles_put_type_name = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
+  }
+
+  public void _jspDestroy() {
+    _jspx_tagPool_tiles_insert_page_flush.release();
+    _jspx_tagPool_tiles_put_value_name_nobody.release();
+    _jspx_tagPool_tiles_put_type_name.release();
+  }
+
+  public void _jspService(HttpServletRequest request, HttpServletResponse response)
+        throws java.io.IOException, ServletException {
+
+    JspFactory _jspxFactory = null;
+    PageContext pageContext = null;
+    HttpSession session = null;
+    ServletContext application = null;
+    ServletConfig config = null;
+    JspWriter out = null;
+    Object page = this;
+    JspWriter _jspx_out = null;
+    PageContext _jspx_page_context = null;
+
+
+    try {
+      _jspxFactory = JspFactory.getDefaultFactory();
+      response.setContentType("text/html");
+      pageContext = _jspxFactory.getPageContext(this, request, response,
+      			null, true, 8192, true);
+      _jspx_page_context = pageContext;
+      application = pageContext.getServletContext();
+      config = pageContext.getServletConfig();
+      session = pageContext.getSession();
+      out = pageContext.getOut();
+      _jspx_out = out;
+
+      out.write("\r\n\r\n");
+      if (_jspx_meth_tiles_insert_0(_jspx_page_context))
+        return;
+      out.write("\r\n\r\n\r\n\r\n");
+    } catch (Throwable t) {
+      if (!(t instanceof SkipPageException)){
+        out = _jspx_out;
+        if (out != null && out.getBufferSize() != 0)
+          out.clearBuffer();
+        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
+      }
+    } finally {
+      if (_jspxFactory != null) _jspxFactory.releasePageContext(_jspx_page_context);
+    }
+  }
+
+  private boolean _jspx_meth_tiles_insert_0(PageContext _jspx_page_context)
+          throws Throwable {
+    PageContext pageContext = _jspx_page_context;
+    JspWriter out = _jspx_page_context.getOut();
+    //  tiles:insert
+    org.apache.struts.taglib.tiles.InsertTag _jspx_th_tiles_insert_0 = (org.apache.struts.taglib.tiles.InsertTag) _jspx_tagPool_tiles_insert_page_flush.get(org.apache.struts.taglib.tiles.InsertTag.class);
+    _jspx_th_tiles_insert_0.setPageContext(_jspx_page_context);
+    _jspx_th_tiles_insert_0.setParent(null);
+    _jspx_th_tiles_insert_0.setPage("/templates/main.jsp");
+    _jspx_th_tiles_insert_0.setFlush(true);
+    int _jspx_eval_tiles_insert_0 = _jspx_th_tiles_insert_0.doStartTag();
+    if (_jspx_eval_tiles_insert_0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
+      do {
+        out.write("\r\n\r\n");
+        if (_jspx_meth_tiles_put_0(_jspx_th_tiles_insert_0, _jspx_page_context))
+          return true;
+        out.write('\r');
+        out.write('\n');
+        if (_jspx_meth_tiles_put_1(_jspx_th_tiles_insert_0, _jspx_page_context))
+          return true;
+        out.write("\r\n\r\n");
+        if (_jspx_meth_tiles_put_2(_jspx_th_tiles_insert_0, _jspx_page_context))
+          return true;
+        out.write("\r\n\r\n");
+        if (_jspx_meth_tiles_put_3(_jspx_th_tiles_insert_0, _jspx_page_context))
+          return true;
+        out.write('\r');
+        out.write('\n');
+        int evalDoAfterBody = _jspx_th_tiles_insert_0.doAfterBody();
+        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
+          break;
+      } while (true);
+    }
+    if (_jspx_th_tiles_insert_0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+      return true;
+    _jspx_tagPool_tiles_insert_page_flush.reuse(_jspx_th_tiles_insert_0);
+    return false;
+  }
+
+  private boolean _jspx_meth_tiles_put_0(javax.servlet.jsp.tagext.JspTag _jspx_th_tiles_insert_0, PageContext _jspx_page_context)
+          throws Throwable {
+    PageContext pageContext = _jspx_page_context;
+    JspWriter out = _jspx_page_context.getOut();
+    //  tiles:put
+    org.apache.struts.taglib.tiles.PutTag _jspx_th_tiles_put_0 = (org.apache.struts.taglib.tiles.PutTag) _jspx_tagPool_tiles_put_value_name_nobody.get(org.apache.struts.taglib.tiles.PutTag.class);
+    _jspx_th_tiles_put_0.setPageContext(_jspx_page_context);
+    _jspx_th_tiles_put_0.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_tiles_insert_0);
+    _jspx_th_tiles_put_0.setName("title");
+    _jspx_th_tiles_put_0.setValue("PROfessional VIdeo RENTalStore");
+    int _jspx_eval_tiles_put_0 = _jspx_th_tiles_put_0.doStartTag();
+    if (_jspx_th_tiles_put_0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+      return true;
+    _jspx_tagPool_tiles_put_value_name_nobody.reuse(_jspx_th_tiles_put_0);
+    return false;
+  }
+
+  private boolean _jspx_meth_tiles_put_1(javax.servlet.jsp.tagext.JspTag _jspx_th_tiles_insert_0, PageContext _jspx_page_context)
+          throws Throwable {
+    PageContext pageContext = _jspx_page_context;
+    JspWriter out = _jspx_page_context.getOut();
+    //  tiles:put
+    org.apache.struts.taglib.tiles.PutTag _jspx_th_tiles_put_1 = (org.apache.struts.taglib.tiles.PutTag) _jspx_tagPool_tiles_put_value_name_nobody.get(org.apache.struts.taglib.tiles.PutTag.class);
+    _jspx_th_tiles_put_1.setPageContext(_jspx_page_context);
+    _jspx_th_tiles_put_1.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_tiles_insert_0);
+    _jspx_th_tiles_put_1.setName("top10month_link");
+    _jspx_th_tiles_put_1.setValue("top10.jsp");
+    int _jspx_eval_tiles_put_1 = _jspx_th_tiles_put_1.doStartTag();
+    if (_jspx_th_tiles_put_1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+      return true;
+    _jspx_tagPool_tiles_put_value_name_nobody.reuse(_jspx_th_tiles_put_1);
+    return false;
+  }
+
+  private boolean _jspx_meth_tiles_put_2(javax.servlet.jsp.tagext.JspTag _jspx_th_tiles_insert_0, PageContext _jspx_page_context)
+          throws Throwable {
+    PageContext pageContext = _jspx_page_context;
+    JspWriter out = _jspx_page_context.getOut();
+    //  tiles:put
+    org.apache.struts.taglib.tiles.PutTag _jspx_th_tiles_put_2 = (org.apache.struts.taglib.tiles.PutTag) _jspx_tagPool_tiles_put_type_name.get(org.apache.struts.taglib.tiles.PutTag.class);
+    _jspx_th_tiles_put_2.setPageContext(_jspx_page_context);
+    _jspx_th_tiles_put_2.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_tiles_insert_0);
+    _jspx_th_tiles_put_2.setName("contentbody");
+    _jspx_th_tiles_put_2.setType("string");
+    int _jspx_eval_tiles_put_2 = _jspx_th_tiles_put_2.doStartTag();
+    if (_jspx_eval_tiles_put_2 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
+      if (_jspx_eval_tiles_put_2 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE) {
+        out = _jspx_page_context.pushBody();
+        _jspx_th_tiles_put_2.setBodyContent((javax.servlet.jsp.tagext.BodyContent) out);
+        _jspx_th_tiles_put_2.doInitBody();
+      }
+      do {
+        out.write("\r\n  Willkommen auf unserer neuen Webseite<br/>\r\n");
+        int evalDoAfterBody = _jspx_th_tiles_put_2.doAfterBody();
+        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
+          break;
+      } while (true);
+      if (_jspx_eval_tiles_put_2 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE)
+        out = _jspx_page_context.popBody();
+    }
+    if (_jspx_th_tiles_put_2.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+      return true;
+    _jspx_tagPool_tiles_put_type_name.reuse(_jspx_th_tiles_put_2);
+    return false;
+  }
+
+  private boolean _jspx_meth_tiles_put_3(javax.servlet.jsp.tagext.JspTag _jspx_th_tiles_insert_0, PageContext _jspx_page_context)
+          throws Throwable {
+    PageContext pageContext = _jspx_page_context;
+    JspWriter out = _jspx_page_context.getOut();
+    //  tiles:put
+    org.apache.struts.taglib.tiles.PutTag _jspx_th_tiles_put_3 = (org.apache.struts.taglib.tiles.PutTag) _jspx_tagPool_tiles_put_type_name.get(org.apache.struts.taglib.tiles.PutTag.class);
+    _jspx_th_tiles_put_3.setPageContext(_jspx_page_context);
+    _jspx_th_tiles_put_3.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_tiles_insert_0);
+    _jspx_th_tiles_put_3.setName("head_login");
+    _jspx_th_tiles_put_3.setType("string");
+    int _jspx_eval_tiles_put_3 = _jspx_th_tiles_put_3.doStartTag();
+    if (_jspx_eval_tiles_put_3 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
+      if (_jspx_eval_tiles_put_3 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE) {
+        out = _jspx_page_context.pushBody();
+        _jspx_th_tiles_put_3.setBodyContent((javax.servlet.jsp.tagext.BodyContent) out);
+        _jspx_th_tiles_put_3.doInitBody();
+      }
+      do {
+        out.write("\r\n                        <form id=\"login\" action=\"\" method=\"post\" name=\"LoginForm\">\r\n                        <label class=\"login_label\">Benutzername:</label>\r\n                        <input class=\"login\" style=\"font-weight: bold;\" name=\"username\" size=\"13\" type=\"text\"/>\r\n                        <label class=\"login_label\">Password:</label>\r\n                        <input class=\"login\" name=\"userpassword\" size=\"14\" type=\"password\"/>\r\n                        <input id=\"submit_search\" type=\"submit\" value=\"login\" />\r\n                      </form>\r\n");
+        int evalDoAfterBody = _jspx_th_tiles_put_3.doAfterBody();
+        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
+          break;
+      } while (true);
+      if (_jspx_eval_tiles_put_3 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE)
+        out = _jspx_page_context.popBody();
+    }
+    if (_jspx_th_tiles_put_3.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+      return true;
+    _jspx_tagPool_tiles_put_type_name.reuse(_jspx_th_tiles_put_3);
+    return false;
+  }
+}

Added: project_src/website/classes/Generated Source/.jsp/web/org/apache/jsp/templates/head_jsp.java
===================================================================
--- project_src/website/classes/Generated Source/.jsp/web/org/apache/jsp/templates/head_jsp.java	2004-12-14 18:42:22 UTC (rev 247)
+++ project_src/website/classes/Generated Source/.jsp/web/org/apache/jsp/templates/head_jsp.java	2004-12-27 13:04:03 UTC (rev 248)
@@ -0,0 +1,55 @@
+package org.apache.jsp.templates;
+
+import javax.servlet.*;
+import javax.servlet.http.*;
+import javax.servlet.jsp.*;
+
+public final class head_jsp extends org.apache.jasper.runtime.HttpJspBase
+    implements org.apache.jasper.runtime.JspSourceDependent {
+
+  private static java.util.Vector _jspx_dependants;
+
+  public java.util.List getDependants() {
+    return _jspx_dependants;
+  }
+
+  public void _jspService(HttpServletRequest request, HttpServletResponse response)
+        throws java.io.IOException, ServletException {
+
+    JspFactory _jspxFactory = null;
+    PageContext pageContext = null;
+    HttpSession session = null;
+    ServletContext application = null;
+    ServletConfig config = null;
+    JspWriter out = null;
+    Object page = this;
+    JspWriter _jspx_out = null;
+    PageContext _jspx_page_context = null;
+
+
+    try {
+      _jspxFactory = JspFactory.getDefaultFactory();
+      response.setContentType("text/html");
+      pageContext = _jspxFactory.getPageContext(this, request, response,
+      			null, true, 8192, true);
+      _jspx_page_context = pageContext;
+      application = pageContext.getServletContext();
+      config = pageContext.getServletConfig();
+      session = pageContext.getSession();
+      out = pageContext.getOut();
+      _jspx_out = out;
+
+      out.write('\r');
+      out.write('\n');
+    } catch (Throwable t) {
+      if (!(t instanceof SkipPageException)){
+        out = _jspx_out;
+        if (out != null && out.getBufferSize() != 0)
+          out.clearBuffer();
+        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
+      }
+    } finally {
+      if (_jspxFactory != null) _jspxFactory.releasePageContext(_jspx_page_context);
+    }
+  }
+}

Added: project_src/website/classes/Generated Source/.jsp/web/org/apache/jsp/templates/main_jsp.java
===================================================================
--- project_src/website/classes/Generated Source/.jsp/web/org/apache/jsp/templates/main_jsp.java	2004-12-14 18:42:22 UTC (rev 247)
+++ project_src/website/classes/Generated Source/.jsp/web/org/apache/jsp/templates/main_jsp.java	2004-12-27 13:04:03 UTC (rev 248)
@@ -0,0 +1,200 @@
+package org.apache.jsp.templates;
+
+import javax.servlet.*;
+import javax.servlet.http.*;
+import javax.servlet.jsp.*;
+
+public final class main_jsp extends org.apache.jasper.runtime.HttpJspBase
+    implements org.apache.jasper.runtime.JspSourceDependent {
+
+  private static java.util.Vector _jspx_dependants;
+
+  static {
+    _jspx_dependants = new java.util.Vector(2);
+    _jspx_dependants.add("/WEB-INF/taglib/struts-tiles.tld");
+    _jspx_dependants.add("/WEB-INF/taglib/struts-html.tld");
+  }
+
+  private org.apache.jasper.runtime.TagHandlerPool _jspx_tagPool_tiles_getAsString_name_nobody;
+  private org.apache.jasper.runtime.TagHandlerPool _jspx_tagPool_html_base_nobody;
+  private org.apache.jasper.runtime.TagHandlerPool _jspx_tagPool_html_rewrite_page_nobody;
+  private org.apache.jasper.runtime.TagHandlerPool _jspx_tagPool_tiles_insert_attribute_nobody;
+
+  public java.util.List getDependants() {
+    return _jspx_dependants;
+  }
+
+  public void _jspInit() {
+    _jspx_tagPool_tiles_getAsString_name_nobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
+    _jspx_tagPool_html_base_nobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
+    _jspx_tagPool_html_rewrite_page_nobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
+    _jspx_tagPool_tiles_insert_attribute_nobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
+  }
+
+  public void _jspDestroy() {
+    _jspx_tagPool_tiles_getAsString_name_nobody.release();
+    _jspx_tagPool_html_base_nobody.release();
+    _jspx_tagPool_html_rewrite_page_nobody.release();
+    _jspx_tagPool_tiles_insert_attribute_nobody.release();
+  }
+
+  public void _jspService(HttpServletRequest request, HttpServletResponse response)
+        throws java.io.IOException, ServletException {
+
+    JspFactory _jspxFactory = null;
+    PageContext pageContext = null;
+    HttpSession session = null;
+    ServletContext application = null;
+    ServletConfig config = null;
+    JspWriter out = null;
+    Object page = this;
+    JspWriter _jspx_out = null;
+    PageContext _jspx_page_context = null;
+
+
+    try {
+      _jspxFactory = JspFactory.getDefaultFactory();
+      response.setContentType("text/html");
+      pageContext = _jspxFactory.getPageContext(this, request, response,
+      			null, true, 8192, true);
+      _jspx_page_context = pageContext;
+      application = pageContext.getServletContext();
+      config = pageContext.getServletConfig();
+      session = pageContext.getSession();
+      out = pageContext.getOut();
+      _jspx_out = out;
+
+      out.write("\r\n\r\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n<html>\r\n<head>\r\n  <title>");
+      if (_jspx_meth_tiles_getAsString_0(_jspx_page_context))
+        return;
+      out.write("</title>\r\n  ");
+      if (_jspx_meth_html_base_0(_jspx_page_context))
+        return;
+      out.write("\r\n  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\">\r\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"");
+      if (_jspx_meth_html_rewrite_0(_jspx_page_context))
+        return;
+      out.write("\" title=\"externe Styles\">\r\n</head>\r\n\r\n<body>\r\n<table align=\"center\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\">\r\n  <tbody>\r\n    <tr>\r\n      <td width=\"10%\">&nbsp;</td>\r\n      <td>&nbsp;</td>\r\n      <td width=\"10%\">&nbsp;</td>\r\n    </tr>\r\n    <tr>\r\n      <td>&nbsp;</td>\r\n      <td>\r\n      <table align=\"center\" bgcolor=\"#c2d9c1\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\">\r\n        <tbody>\r\n          <tr>\r\n            <td colspan=\"7\" bgcolor=\"#000000\"><img src=\"images/1pxtrans.gif\" alt=\"\"></td>\r\n            <td style=\"background-image: url(images/border_r.gif);\"><img src=\"images/1pxtrans.gif\" height=\"1\" width=\"3\" alt=\"\"></td>\r\n          </tr>\r\n          <tr>\r\n            <td bgcolor=\"#000000\" width=\"1\"><img src=\"images/1pxtrans.gif\" alt=\"\"></td>\r\n            <td colspan=\"5\" height=\"70\">Logo</td>\r\n            <td bgcolor=\"#000000\"!
  width=\"1\"><img src=\"images/1pxtrans.gif\" alt=\"\"></td>\r\n            <td style=\"background-image: url(images/border_r.gif);\"><img src=\"images/1pxtrans.gif\" width=\"3\" alt=\"\"></td>\r\n");
+      out.write("          </tr>\r\n          <tr>\r\n            <td colspan=\"7\" bgcolor=\"#000000\"><img src=\"images/1pxtrans.gif\" alt=\"\"></td>\r\n            <td style=\"background-image: url(images/border_r.gif);\"><img src=\"images/1pxtrans.gif\" height=\"1\" width=\"3\" alt=\"\"></td>\r\n          </tr>\r\n          <tr>\r\n            <td bgcolor=\"#000000\" width=\"1\"><img src=\"images/1pxtrans.gif\" alt=\"\"></td>\r\n            <td colspan=\"5\" height=\"20\" valign=\"middle\">\r\n            <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\">\r\n              <tbody>\r\n                <tr>\r\n                  <td width=\"53%\">\r\n                    <!--head start-->\r\n                    <div align=\"left\">\r\n                      ");
+      if (_jspx_meth_tiles_insert_0(_jspx_page_context))
+        return;
+      out.write("\r\n                    </div>\r\n                  </td>\r\n                  <td width=\"50%\">\r\n                    <div class=\"head_menue\" align=\"right\">\r\n                      <a href=\"\">&Uuml;bersicht</a>&nbsp;|&nbsp;<a href=\"\">Impressum</a>&nbsp;|&nbsp;<a href=\"\">Hilfe</a>&nbsp;\r\n                    </div>\r\n\r\n                    <!--head end-->\r\n                  </td>\r\n </tr>\r\n              </tbody>\r\n            </table>\r\n            </td>\r\n            <td bgcolor=\"#000000\" width=\"1\"><img src=\"images/1pxtrans.gif\" alt=\"\"></td>\r\n            <td style=\"background-image: url(images/border_r.gif);\"><img src=\"images/1pxtrans.gif\" width=\"3\" alt=\"\"></td>\r\n          </tr>\r\n          <tr>\r\n            <td colspan=\"7\" bgcolor=\"#000000\"><img src=\"images/1pxtrans.gif\" alt=\"\"></td>\r\n            <td style=\"background-image: url(images/border_r.gif);\"><img src=\"images/1pxtrans.gif\" height=\"1\" !
 width=\"3\" alt=\"\"></td>\r\n          </tr>\r\n          <tr>\r\n            <td colspan=\"7\" bgcolor=\"#f9efd2\" height=\"2\"><img src=\"images/1pxtrans.gif\" alt=\"\"></td>\r\n");
+      out.write("            <td bgcolor=\"#f9efd2\"><img src=\"images/1pxtrans.gif\" height=\"1\" width=\"3\" alt=\"\"></td>\r\n          </tr>\r\n          <tr>\r\n            <td colspan=\"3\" bgcolor=\"#000000\"><img src=\"images/1pxtrans.gif\" alt=\"\"></td>\r\n            <td colspan=\"1\" bgcolor=\"#f9efd2\" width=\"2\"><img src=\"images/1pxtrans.gif\" alt=\"\"></td>\r\n            <td colspan=\"3\" bgcolor=\"#000000\"><img src=\"images/1pxtrans.gif\" alt=\"\"></td>\r\n            <td style=\"background-image: url(images/border_r.gif);\"><img src=\"images/1pxtrans.gif\" height=\"1\" width=\"3\" alt=\"\"></td>\r\n          </tr>\r\n          <tr>\r\n            <td bgcolor=\"#000000\" width=\"1\"><img src=\"images/1pxtrans.gif\" alt=\"\"></td>\r\n            <td valign=\"top\">\r\n<!--menue start-->\r\n            <table class=\"menue_tbl\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\r\n              <thead class=\"menue_tbl\"> <tr>\r\n                <th>Aktuel!
 les</th>\r\n              </tr>\r\n              </thead> <tbody class=\"menue_tbl\">\r\n                <tr>\r\n                  <td class=\"menue_tbl\"><a href=\"#\" class=\"menue_tbl\">Neuheiten</a></td>\r\n");
+      out.write("                </tr>\r\n                <tr>\r\n                  <td class=\"menue_tbl\"><a href=\"");
+      if (_jspx_meth_tiles_getAsString_1(_jspx_page_context))
+        return;
+      out.write("\">Top 10 Monat</td>\r\n                </tr>\r\n                <tr>\r\n                  <td class=\"menue_tbl\"><a href=\"#\">Top 100 Jahr</a></td>\r\n                </tr>\r\n                <tr>\r\n                  <td class=\"menue_tbl\"><a href=\"#\">Vorschau</a></td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n            <br>\r\n            <table class=\"menue_suche\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\r\n              <thead class=\"menue_tbl\"> <tr>\r\n                <th colspan=\"2\">Suche</th>\r\n              </tr>\r\n              </thead> <tbody>\r\n                <tr>\r\n                \t<td colspan=\"2\">\r\n                  \t\t<form id=\"search\" action=\"\" method=\"post\" name=\"SearchForm\">\r\n\t                  \t<input name=\"searchfor\" size=\"16\" type=\"text\">\r\n    \t            </td>\r\n    \t        </tr>\r\n    \t        <tr>\r\n\t\t\t\t\t<td>\r\n        \t           !
  <select name=\"selectName\" size=\"1\" id=\"select_search\">\r\n\t\t                    <option value=\"0\">all</option>\r\n\t\t                    <option value=\"1\">Movie</option>\r\n");
+      out.write("        \t\t            <option value=\"2\">Artist</option>\r\n                \t\t    <option value=\"3\">genre</option>\r\n\t                    </select>\r\n                    </td>\r\n                    <td>\r\n    \t                <input value=\"Suche\" id=\"submit_search\" type=\"submit\">\r\n    \t                </form>\r\n                  </td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n            <br>\r\n            <table class=\"menue_tbl\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\r\n              <thead class=\"menue_tbl\"> <tr>\r\n                <th>Genre</th>\r\n              </tr>\r\n              </thead> <tbody  class=\"menue_tbl\">\r\n                <tr>\r\n                  <td class=\"menue_tbl\"><a href=\"#\"> Action </a></td>\r\n                </tr>\r\n                <tr>\r\n                  <td class=\"menue_tbl\"><a href=\"#\"> Drama </a></td>\r\n                </tr>\r\n        !
         <tr>\r\n                  <td class=\"menue_tbl\"><a href=\"#\"> Comedy </a></td>\r\n                </tr>\r\n                <tr>\r\n                  <td class=\"menue_tbl\"><a href=\"#\"> Thriller </a></td>\r\n");
+      out.write("                </tr>\r\n              </tbody>\r\n            </table>\r\n\r\n\r\n<!--menue end--> </td>\r\n            <td bgcolor=\"#000000\" width=\"1\"><img src=\"images/1pxtrans.gif\" alt=\"\"></td>\r\n            <td bgcolor=\"#f9efd2\" width=\"3\"><img src=\"images/1pxtrans.gif\" alt=\"\"></td>\r\n            <td bgcolor=\"#000000\" width=\"1\"><img src=\"images/1pxtrans.gif\" alt=\"\"></td>\r\n            <td valign=\"top\" width=\"85%\">\r\n<!--main start-->\r\n");
+      if (_jspx_meth_tiles_insert_1(_jspx_page_context))
+        return;
+      out.write("\r\n\r\n&nbsp; <br>\r\n            <table style=\"width: 95%; text-align: left;\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\">\r\n              <tbody>\r\n                <tr>\r\n                  <td class=\"prev_page_browse\">&nbsp;&nbsp; <a href=\"\">&lt;&lt; zur&uuml;ck &lt;&lt;</a><br>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</td>\r\n                  <td class=\"overview_page_browse\" style=\"\">&nbsp;Seite 1 / 5 <br>\r\n                  <a href=\"\" class=\"single_page_browse\">1</a>&nbsp;&nbsp;\r\n                  <a href=\"\" class=\"single_page_browse\">2</a>&nbsp;&nbsp;\r\n                  <a href=\"\" class=\"single_page_browse\">3</a>&nbsp;&nbsp;\r\n                  <a href=\"\" class=\"single_page_browse\">4</a>&nbsp;&nbsp;\r\n                  <a href=\"\" class=\"single_page_browse\">5</a>&nbsp;&nbsp;\r\n                  </td>\r\n                  <td class=\"next_page_browse\">&nbsp;<a href=\"\">&gt;&gt; vor &gt;&gt;</a>&nbs!
 p;&nbsp;<br>\r\n                  </td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n            <br>\r\n            <br>\r\n");
+      out.write("            <br>\r\n\r\n\r\n&nbsp; <br>\r\n\r\n            <br>\r\n            <br>\r\n            <br>\r\n            <br>\r\n            <br>\r\n<!--main end--> </td>\r\n            <td bgcolor=\"#000000\" width=\"1\"><img src=\"images/1pxtrans.gif\" alt=\"\"></td>\r\n            <td style=\"background-image: url(images/border_r.gif);\"><img src=\"images/1pxtrans.gif\" width=\"3\" alt=\"\"></td>\r\n          </tr>\r\n          <tr>\r\n            <td colspan=\"3\" bgcolor=\"#000000\"><img src=\"images/1pxtrans.gif\" alt=\"\"></td>\r\n            <td colspan=\"1\" bgcolor=\"#f9efd2\" width=\"2\"><img src=\"images/1pxtrans.gif\" alt=\"\"></td>\r\n            <td colspan=\"3\" bgcolor=\"#000000\"><img src=\"images/1pxtrans.gif\" alt=\"\"></td>\r\n            <td style=\"background-image: url(images/border_r.gif);\"><img src=\"images/1pxtrans.gif\" height=\"1\" width=\"3\" alt=\"\"></td>\r\n          </tr>\r\n          <tr>\r\n            <td colspan=\"7\" bg!
 color=\"#f9efd2\" height=\"2\"><img src=\"images/1pxtrans.gif\" alt=\"\"></td>\r\n            <td bgcolor=\"#f9efd2\"><img src=\"images/1pxtrans.gif\" height=\"1\" width=\"1\" alt=\"\"></td>\r\n");
+      out.write("          </tr>\r\n          <tr>\r\n            <td colspan=\"7\" bgcolor=\"#000000\"><img src=\"images/1pxtrans.gif\" alt=\"\"></td>\r\n            <td style=\"background-image: url(images/border_r.gif);\"><img src=\"images/1pxtrans.gif\" height=\"1\" width=\"3\" alt=\"\"></td>\r\n          </tr>\r\n          <tr>\r\n            <td bgcolor=\"#000000\" width=\"1\"><img src=\"images/1pxtrans.gif\" alt=\"\"></td>\r\n            <td colspan=\"5\">\r\n            <div class=\"copyright\">&copy;\r\nRemo Griesch,\r\nStefan Forstner, Philipp Schneider<br>\r\n            </div>\r\n            </td>\r\n            <td bgcolor=\"#000000\" width=\"1\"><img src=\"images/1pxtrans.gif\" alt=\"\"></td>\r\n            <td style=\"background-image: url(images/border_r.gif);\"><img src=\"images/1pxtrans.gif\" width=\"3\" alt=\"\"></td>\r\n          </tr>\r\n          <tr>\r\n            <td colspan=\"7\" bgcolor=\"#000000\"><img src=\"images/1pxtrans.gif\" alt=\"\"></td>\r!
 \n            <td style=\"background-image: url(images/border_r.gif);\"><img src=\"images/1pxtrans.gif\" height=\"1\" width=\"3\" alt=\"\"></td>\r\n          </tr>\r\n");
+      out.write("          <tr>\r\n            <td colspan=\"7\" style=\"background-image: url(images/border.gif);\"><img src=\"border_bl.gif\" height=\"7\" alt=\"\"></td>\r\n            <td style=\"background-image: url(images/border_br.gif);\"><img src=\"images/1pxtrans.gif\" height=\"1\" width=\"3\" alt=\"\"></td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n      </td>\r\n      <td>&nbsp;</td>\r\n    </tr>\r\n    <tr>\r\n      <td>&nbsp;</td>\r\n      <td>&nbsp;</td>\r\n      <td>&nbsp;</td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n\r\n\r\n\r\n</body>\r\n</html>\r\n");
+    } catch (Throwable t) {
+      if (!(t instanceof SkipPageException)){
+        out = _jspx_out;
+        if (out != null && out.getBufferSize() != 0)
+          out.clearBuffer();
+        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
+      }
+    } finally {
+      if (_jspxFactory != null) _jspxFactory.releasePageContext(_jspx_page_context);
+    }
+  }
+
+  private boolean _jspx_meth_tiles_getAsString_0(PageContext _jspx_page_context)
+          throws Throwable {
+    PageContext pageContext = _jspx_page_context;
+    JspWriter out = _jspx_page_context.getOut();
+    //  tiles:getAsString
+    org.apache.struts.taglib.tiles.GetAttributeTag _jspx_th_tiles_getAsString_0 = (org.apache.struts.taglib.tiles.GetAttributeTag) _jspx_tagPool_tiles_getAsString_name_nobody.get(org.apache.struts.taglib.tiles.GetAttributeTag.class);
+    _jspx_th_tiles_getAsString_0.setPageContext(_jspx_page_context);
+    _jspx_th_tiles_getAsString_0.setParent(null);
+    _jspx_th_tiles_getAsString_0.setName("title");
+    int _jspx_eval_tiles_getAsString_0 = _jspx_th_tiles_getAsString_0.doStartTag();
+    if (_jspx_th_tiles_getAsString_0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+      return true;
+    _jspx_tagPool_tiles_getAsString_name_nobody.reuse(_jspx_th_tiles_getAsString_0);
+    return false;
+  }
+
+  private boolean _jspx_meth_html_base_0(PageContext _jspx_page_context)
+          throws Throwable {
+    PageContext pageContext = _jspx_page_context;
+    JspWriter out = _jspx_page_context.getOut();
+    //  html:base
+    org.apache.struts.taglib.html.BaseTag _jspx_th_html_base_0 = (org.apache.struts.taglib.html.BaseTag) _jspx_tagPool_html_base_nobody.get(org.apache.struts.taglib.html.BaseTag.class);
+    _jspx_th_html_base_0.setPageContext(_jspx_page_context);
+    _jspx_th_html_base_0.setParent(null);
+    int _jspx_eval_html_base_0 = _jspx_th_html_base_0.doStartTag();
+    if (_jspx_th_html_base_0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+      return true;
+    _jspx_tagPool_html_base_nobody.reuse(_jspx_th_html_base_0);
+    return false;
+  }
+
+  private boolean _jspx_meth_html_rewrite_0(PageContext _jspx_page_context)
+          throws Throwable {
+    PageContext pageContext = _jspx_page_context;
+    JspWriter out = _jspx_page_context.getOut();
+    //  html:rewrite
+    org.apache.struts.taglib.html.RewriteTag _jspx_th_html_rewrite_0 = (org.apache.struts.taglib.html.RewriteTag) _jspx_tagPool_html_rewrite_page_nobody.get(org.apache.struts.taglib.html.RewriteTag.class);
+    _jspx_th_html_rewrite_0.setPageContext(_jspx_page_context);
+    _jspx_th_html_rewrite_0.setParent(null);
+    _jspx_th_html_rewrite_0.setPage("/style.css");
+    int _jspx_eval_html_rewrite_0 = _jspx_th_html_rewrite_0.doStartTag();
+    if (_jspx_th_html_rewrite_0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+      return true;
+    _jspx_tagPool_html_rewrite_page_nobody.reuse(_jspx_th_html_rewrite_0);
+    return false;
+  }
+
+  private boolean _jspx_meth_tiles_insert_0(PageContext _jspx_page_context)
+          throws Throwable {
+    PageContext pageContext = _jspx_page_context;
+    JspWriter out = _jspx_page_context.getOut();
+    //  tiles:insert
+    org.apache.struts.taglib.tiles.InsertTag _jspx_th_tiles_insert_0 = (org.apache.struts.taglib.tiles.InsertTag) _jspx_tagPool_tiles_insert_attribute_nobody.get(org.apache.struts.taglib.tiles.InsertTag.class);
+    _jspx_th_tiles_insert_0.setPageContext(_jspx_page_context);
+    _jspx_th_tiles_insert_0.setParent(null);
+    _jspx_th_tiles_insert_0.setAttribute("head_login");
+    int _jspx_eval_tiles_insert_0 = _jspx_th_tiles_insert_0.doStartTag();
+    if (_jspx_th_tiles_insert_0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+      return true;
+    _jspx_tagPool_tiles_insert_attribute_nobody.reuse(_jspx_th_tiles_insert_0);
+    return false;
+  }
+
+  private boolean _jspx_meth_tiles_getAsString_1(PageContext _jspx_page_context)
+          throws Throwable {
+    PageContext pageContext = _jspx_page_context;
+    JspWriter out = _jspx_page_context.getOut();
+    //  tiles:getAsString
+    org.apache.struts.taglib.tiles.GetAttributeTag _jspx_th_tiles_getAsString_1 = (org.apache.struts.taglib.tiles.GetAttributeTag) _jspx_tagPool_tiles_getAsString_name_nobody.get(org.apache.struts.taglib.tiles.GetAttributeTag.class);
+    _jspx_th_tiles_getAsString_1.setPageContext(_jspx_page_context);
+    _jspx_th_tiles_getAsString_1.setParent(null);
+    _jspx_th_tiles_getAsString_1.setName("top10month_link");
+    int _jspx_eval_tiles_getAsString_1 = _jspx_th_tiles_getAsString_1.doStartTag();
+    if (_jspx_th_tiles_getAsString_1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+      return true;
+    _jspx_tagPool_tiles_getAsString_name_nobody.reuse(_jspx_th_tiles_getAsString_1);
+    return false;
+  }
+
+  private boolean _jspx_meth_tiles_insert_1(PageContext _jspx_page_context)
+          throws Throwable {
+    PageContext pageContext = _jspx_page_context;
+    JspWriter out = _jspx_page_context.getOut();
+    //  tiles:insert
+    org.apache.struts.taglib.tiles.InsertTag _jspx_th_tiles_insert_1 = (org.apache.struts.taglib.tiles.InsertTag) _jspx_tagPool_tiles_insert_attribute_nobody.get(org.apache.struts.taglib.tiles.InsertTag.class);
+    _jspx_th_tiles_insert_1.setPageContext(_jspx_page_context);
+    _jspx_th_tiles_insert_1.setParent(null);
+    _jspx_th_tiles_insert_1.setAttribute("contentbody");
+    int _jspx_eval_tiles_insert_1 = _jspx_th_tiles_insert_1.doStartTag();
+    if (_jspx_th_tiles_insert_1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+      return true;
+    _jspx_tagPool_tiles_insert_attribute_nobody.reuse(_jspx_th_tiles_insert_1);
+    return false;
+  }
+}

Added: project_src/website/classes/Generated Source/.jsp/web/org/apache/jsp/templates/menu_jsp.java
===================================================================
--- project_src/website/classes/Generated Source/.jsp/web/org/apache/jsp/templates/menu_jsp.java	2004-12-14 18:42:22 UTC (rev 247)
+++ project_src/website/classes/Generated Source/.jsp/web/org/apache/jsp/templates/menu_jsp.java	2004-12-27 13:04:03 UTC (rev 248)
@@ -0,0 +1,55 @@
+package org.apache.jsp.templates;
+
+import javax.servlet.*;
+import javax.servlet.http.*;
+import javax.servlet.jsp.*;
+
+public final class menu_jsp extends org.apache.jasper.runtime.HttpJspBase
+    implements org.apache.jasper.runtime.JspSourceDependent {
+
+  private static java.util.Vector _jspx_dependants;
+
+  public java.util.List getDependants() {
+    return _jspx_dependants;
+  }
+
+  public void _jspService(HttpServletRequest request, HttpServletResponse response)
+        throws java.io.IOException, ServletException {
+
+    JspFactory _jspxFactory = null;
+    PageContext pageContext = null;
+    HttpSession session = null;
+    ServletContext application = null;
+    ServletConfig config = null;
+    JspWriter out = null;
+    Object page = this;
+    JspWriter _jspx_out = null;
+    PageContext _jspx_page_context = null;
+
+
+    try {
+      _jspxFactory = JspFactory.getDefaultFactory();
+      response.setContentType("text/html");
+      pageContext = _jspxFactory.getPageContext(this, request, response,
+      			null, true, 8192, true);
+      _jspx_page_context = pageContext;
+      application = pageContext.getServletContext();
+      config = pageContext.getServletConfig();
+      session = pageContext.getSession();
+      out = pageContext.getOut();
+      _jspx_out = out;
+
+      out.write('\r');
+      out.write('\n');
+    } catch (Throwable t) {
+      if (!(t instanceof SkipPageException)){
+        out = _jspx_out;
+        if (out != null && out.getBufferSize() != 0)
+          out.clearBuffer();
+        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
+      }
+    } finally {
+      if (_jspxFactory != null) _jspxFactory.releasePageContext(_jspx_page_context);
+    }
+  }
+}

Added: project_src/website/classes/Generated Source/.jsp/web/org/apache/jsp/top10_jsp.java
===================================================================
--- project_src/website/classes/Generated Source/.jsp/web/org/apache/jsp/top10_jsp.java	2004-12-14 18:42:22 UTC (rev 247)
+++ project_src/website/classes/Generated Source/.jsp/web/org/apache/jsp/top10_jsp.java	2004-12-27 13:04:03 UTC (rev 248)
@@ -0,0 +1,218 @@
+package org.apache.jsp;
+
+import javax.servlet.*;
+import javax.servlet.http.*;
+import javax.servlet.jsp.*;
+
+public final class top10_jsp extends org.apache.jasper.runtime.HttpJspBase
+    implements org.apache.jasper.runtime.JspSourceDependent {
+
+  private static java.util.Vector _jspx_dependants;
+
+  static {
+    _jspx_dependants = new java.util.Vector(2);
+    _jspx_dependants.add("/WEB-INF/taglib/struts-tiles.tld");
+    _jspx_dependants.add("/WEB-INF/taglib/struts-logic.tld");
+  }
+
+  private org.apache.jasper.runtime.TagHandlerPool _jspx_tagPool_tiles_insert_page_flush;
+  private org.apache.jasper.runtime.TagHandlerPool _jspx_tagPool_tiles_put_value_name_nobody;
+  private org.apache.jasper.runtime.TagHandlerPool _jspx_tagPool_tiles_put_type_name;
+
+  public java.util.List getDependants() {
+    return _jspx_dependants;
+  }
+
+  public void _jspInit() {
+    _jspx_tagPool_tiles_insert_page_flush = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
+    _jspx_tagPool_tiles_put_value_name_nobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
+    _jspx_tagPool_tiles_put_type_name = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
+  }
+
+  public void _jspDestroy() {
+    _jspx_tagPool_tiles_insert_page_flush.release();
+    _jspx_tagPool_tiles_put_value_name_nobody.release();
+    _jspx_tagPool_tiles_put_type_name.release();
+  }
+
+  public void _jspService(HttpServletRequest request, HttpServletResponse response)
+        throws java.io.IOException, ServletException {
+
+    JspFactory _jspxFactory = null;
+    PageContext pageContext = null;
+    HttpSession session = null;
+    ServletContext application = null;
+    ServletConfig config = null;
+    JspWriter out = null;
+    Object page = this;
+    JspWriter _jspx_out = null;
+    PageContext _jspx_page_context = null;
+
+
+    try {
+      _jspxFactory = JspFactory.getDefaultFactory();
+      response.setContentType("text/html");
+      pageContext = _jspxFactory.getPageContext(this, request, response,
+      			null, true, 8192, true);
+      _jspx_page_context = pageContext;
+      application = pageContext.getServletContext();
+      config = pageContext.getServletConfig();
+      session = pageContext.getSession();
+      out = pageContext.getOut();
+      _jspx_out = out;
+
+      out.write("\r\n\r\n\r\n");
+      if (_jspx_meth_tiles_insert_0(_jspx_page_context))
+        return;
+      out.write("\r\n\r\n\r\n\r\n");
+    } catch (Throwable t) {
+      if (!(t instanceof SkipPageException)){
+        out = _jspx_out;
+        if (out != null && out.getBufferSize() != 0)
+          out.clearBuffer();
+        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
+      }
+    } finally {
+      if (_jspxFactory != null) _jspxFactory.releasePageContext(_jspx_page_context);
+    }
+  }
+
+  private boolean _jspx_meth_tiles_insert_0(PageContext _jspx_page_context)
+          throws Throwable {
+    PageContext pageContext = _jspx_page_context;
+    JspWriter out = _jspx_page_context.getOut();
+    //  tiles:insert
+    org.apache.struts.taglib.tiles.InsertTag _jspx_th_tiles_insert_0 = (org.apache.struts.taglib.tiles.InsertTag) _jspx_tagPool_tiles_insert_page_flush.get(org.apache.struts.taglib.tiles.InsertTag.class);
+    _jspx_th_tiles_insert_0.setPageContext(_jspx_page_context);
+    _jspx_th_tiles_insert_0.setParent(null);
+    _jspx_th_tiles_insert_0.setPage("/templates/main.jsp");
+    _jspx_th_tiles_insert_0.setFlush(true);
+    int _jspx_eval_tiles_insert_0 = _jspx_th_tiles_insert_0.doStartTag();
+    if (_jspx_eval_tiles_insert_0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
+      do {
+        out.write("\r\n\r\n");
+        if (_jspx_meth_tiles_put_0(_jspx_th_tiles_insert_0, _jspx_page_context))
+          return true;
+        out.write('\r');
+        out.write('\n');
+        if (_jspx_meth_tiles_put_1(_jspx_th_tiles_insert_0, _jspx_page_context))
+          return true;
+        out.write("\r\n\r\n");
+        if (_jspx_meth_tiles_put_2(_jspx_th_tiles_insert_0, _jspx_page_context))
+          return true;
+        out.write("\r\n\r\n");
+        if (_jspx_meth_tiles_put_3(_jspx_th_tiles_insert_0, _jspx_page_context))
+          return true;
+        out.write('\r');
+        out.write('\n');
+        int evalDoAfterBody = _jspx_th_tiles_insert_0.doAfterBody();
+        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
+          break;
+      } while (true);
+    }
+    if (_jspx_th_tiles_insert_0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+      return true;
+    _jspx_tagPool_tiles_insert_page_flush.reuse(_jspx_th_tiles_insert_0);
+    return false;
+  }
+
+  private boolean _jspx_meth_tiles_put_0(javax.servlet.jsp.tagext.JspTag _jspx_th_tiles_insert_0, PageContext _jspx_page_context)
+          throws Throwable {
+    PageContext pageContext = _jspx_page_context;
+    JspWriter out = _jspx_page_context.getOut();
+    //  tiles:put
+    org.apache.struts.taglib.tiles.PutTag _jspx_th_tiles_put_0 = (org.apache.struts.taglib.tiles.PutTag) _jspx_tagPool_tiles_put_value_name_nobody.get(org.apache.struts.taglib.tiles.PutTag.class);
+    _jspx_th_tiles_put_0.setPageContext(_jspx_page_context);
+    _jspx_th_tiles_put_0.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_tiles_insert_0);
+    _jspx_th_tiles_put_0.setName("title");
+    _jspx_th_tiles_put_0.setValue("Top 10");
+    int _jspx_eval_tiles_put_0 = _jspx_th_tiles_put_0.doStartTag();
+    if (_jspx_th_tiles_put_0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+      return true;
+    _jspx_tagPool_tiles_put_value_name_nobody.reuse(_jspx_th_tiles_put_0);
+    return false;
+  }
+
+  private boolean _jspx_meth_tiles_put_1(javax.servlet.jsp.tagext.JspTag _jspx_th_tiles_insert_0, PageContext _jspx_page_context)
+          throws Throwable {
+    PageContext pageContext = _jspx_page_context;
+    JspWriter out = _jspx_page_context.getOut();
+    //  tiles:put
+    org.apache.struts.taglib.tiles.PutTag _jspx_th_tiles_put_1 = (org.apache.struts.taglib.tiles.PutTag) _jspx_tagPool_tiles_put_value_name_nobody.get(org.apache.struts.taglib.tiles.PutTag.class);
+    _jspx_th_tiles_put_1.setPageContext(_jspx_page_context);
+    _jspx_th_tiles_put_1.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_tiles_insert_0);
+    _jspx_th_tiles_put_1.setName("top10month_link");
+    _jspx_th_tiles_put_1.setValue("top10.jsp");
+    int _jspx_eval_tiles_put_1 = _jspx_th_tiles_put_1.doStartTag();
+    if (_jspx_th_tiles_put_1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+      return true;
+    _jspx_tagPool_tiles_put_value_name_nobody.reuse(_jspx_th_tiles_put_1);
+    return false;
+  }
+
+  private boolean _jspx_meth_tiles_put_2(javax.servlet.jsp.tagext.JspTag _jspx_th_tiles_insert_0, PageContext _jspx_page_context)
+          throws Throwable {
+    PageContext pageContext = _jspx_page_context;
+    JspWriter out = _jspx_page_context.getOut();
+    //  tiles:put
+    org.apache.struts.taglib.tiles.PutTag _jspx_th_tiles_put_2 = (org.apache.struts.taglib.tiles.PutTag) _jspx_tagPool_tiles_put_type_name.get(org.apache.struts.taglib.tiles.PutTag.class);
+    _jspx_th_tiles_put_2.setPageContext(_jspx_page_context);
+    _jspx_th_tiles_put_2.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_tiles_insert_0);
+    _jspx_th_tiles_put_2.setName("head_login");
+    _jspx_th_tiles_put_2.setType("string");
+    int _jspx_eval_tiles_put_2 = _jspx_th_tiles_put_2.doStartTag();
+    if (_jspx_eval_tiles_put_2 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
+      if (_jspx_eval_tiles_put_2 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE) {
+        out = _jspx_page_context.pushBody();
+        _jspx_th_tiles_put_2.setBodyContent((javax.servlet.jsp.tagext.BodyContent) out);
+        _jspx_th_tiles_put_2.doInitBody();
+      }
+      do {
+        out.write("\r\n  <span class=\"pref\">Meine Daten&nbsp;</span>\r\n  <span class=\"pref\"><a href=\"basket.jsp\">Warenkorb</a></span>\r\n");
+        int evalDoAfterBody = _jspx_th_tiles_put_2.doAfterBody();
+        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
+          break;
+      } while (true);
+      if (_jspx_eval_tiles_put_2 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE)
+        out = _jspx_page_context.popBody();
+    }
+    if (_jspx_th_tiles_put_2.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+      return true;
+    _jspx_tagPool_tiles_put_type_name.reuse(_jspx_th_tiles_put_2);
+    return false;
+  }
+
+  private boolean _jspx_meth_tiles_put_3(javax.servlet.jsp.tagext.JspTag _jspx_th_tiles_insert_0, PageContext _jspx_page_context)
+          throws Throwable {
+    PageContext pageContext = _jspx_page_context;
+    JspWriter out = _jspx_page_context.getOut();
+    //  tiles:put
+    org.apache.struts.taglib.tiles.PutTag _jspx_th_tiles_put_3 = (org.apache.struts.taglib.tiles.PutTag) _jspx_tagPool_tiles_put_type_name.get(org.apache.struts.taglib.tiles.PutTag.class);
+    _jspx_th_tiles_put_3.setPageContext(_jspx_page_context);
+    _jspx_th_tiles_put_3.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_tiles_insert_0);
+    _jspx_th_tiles_put_3.setName("contentbody");
+    _jspx_th_tiles_put_3.setType("string");
+    int _jspx_eval_tiles_put_3 = _jspx_th_tiles_put_3.doStartTag();
+    if (_jspx_eval_tiles_put_3 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
+      if (_jspx_eval_tiles_put_3 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE) {
+        out = _jspx_page_context.pushBody();
+        _jspx_th_tiles_put_3.setBodyContent((javax.servlet.jsp.tagext.BodyContent) out);
+        _jspx_th_tiles_put_3.doInitBody();
+      }
+      do {
+        out.write("\r\n<!--top browse start -->\r\n            <table style=\"width: 95%; text-align: left;\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\">\r\n              <tbody>\r\n                <tr>\r\n                  <td class=\"prev_page_browse\">&nbsp;&nbsp; <a href=\"\">&lt;&lt; zur&uuml;ck &lt;&lt;</a><br>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</td>\r\n                  <td class=\"overview_page_browse\" style=\"\">&nbsp;Seite 1 / 5 <br>\r\n                  </td>\r\n                  <td class=\"next_page_browse\">&nbsp;<a href=\"\">&gt;&gt; vor &gt;&gt;</a>&nbsp;&nbsp;<br>\r\n                  </td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n<!--top browse end -->\r\n\r\n<!--main list start -->\r\n\r\n\r\n<!-- 1 start-->\r\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\">\r\n  <tbody>\r\n    <tr>\r\n      <td align=\"center\" width=\"20%\"><img style=\"width: 75px; height: 75px;\" src=\"\" !
 alt=\"\" border=\"0\"></td>\r\n        <td>\r\n          <span class=\"list_title\">Titel des Films </span>\r\n          <span class=\"list_summary\">Hier kommt ein ganz kurzer Text rein<br>\r\n");
+        out.write("            ganz lang <br>\r\n              und dann drei Punkte . . . <a href=\"details.jsp\">&gt;&gt;mehr&lt;&lt;</a> </span></td>\r\n              <td width=\"10%\"><a href=\"#\">Bestellen</a></td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n<!-- 1 end-->\r\n\r\n<!-- 2 start-->\r\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\">\r\n  <tbody>\r\n    <tr>\r\n      <td align=\"center\" width=\"20%\"><img style=\"width: 75px; height: 75px;\" src=\"\" alt=\"\" border=\"0\"></td>\r\n        <td>\r\n          <span class=\"list_title\">Titel des Films </span>\r\n          <span class=\"list_summary\">Hier kommt ein ganz kurzer Text rein<br>\r\n            ganz lang <br>\r\n              und dann drei Punkte . . . <a href=\"details.jsp\">&gt;&gt;mehr&lt;&lt;</a> </span></td>\r\n              <td width=\"10%\"><a href=\"#\">Bestellen</a></td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n<!--2 end!
 -->\r\n\r\n\r\n<!--main list end -->\r\n\r\n<!--bottom browse start -->\r\n            <table style=\"width: 95%; text-align: left;\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\">\r\n");
+        out.write("              <tbody>\r\n                <tr>\r\n                  <td class=\"prev_page_browse\">&nbsp;&nbsp; <a href=\"\">&lt;&lt; zur&uuml;ck &lt;&lt;</a><br>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</td>\r\n                  <td class=\"overview_page_browse\" style=\"\">&nbsp;Seite 1 / 5 <br>\r\n                  <a href=\"\" class=\"single_page_browse\">1</a>&nbsp;&nbsp;\r\n                  <a href=\"\" class=\"single_page_browse\">2</a>&nbsp;&nbsp;\r\n                  <a href=\"\" class=\"single_page_browse\">3</a>&nbsp;&nbsp;\r\n                  <a href=\"\" class=\"single_page_browse\">4</a>&nbsp;&nbsp;\r\n                  <a href=\"\" class=\"single_page_browse\">5</a>&nbsp;&nbsp;\r\n                  </td>\r\n                  <td class=\"next_page_browse\">&nbsp;<a href=\"\">&gt;&gt; vor &gt;&gt;</a>&nbsp;&nbsp;<br>\r\n                  </td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n<!--bottom browse end -->\r\n\r\!
 n\r\n\r\n  ");
+        int evalDoAfterBody = _jspx_th_tiles_put_3.doAfterBody();
+        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
+          break;
+      } while (true);
+      if (_jspx_eval_tiles_put_3 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE)
+        out = _jspx_page_context.popBody();
+    }
+    if (_jspx_th_tiles_put_3.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+      return true;
+    _jspx_tagPool_tiles_put_type_name.reuse(_jspx_th_tiles_put_3);
+    return false;
+  }
+}

Added: project_src/website/classes/jsp cache/web/org/apache/jsp/basket_jsp.class
===================================================================
(Binary files differ)


Property changes on: project_src/website/classes/jsp cache/web/org/apache/jsp/basket_jsp.class
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/website/classes/jsp cache/web/org/apache/jsp/details_jsp.class
===================================================================
(Binary files differ)


Property changes on: project_src/website/classes/jsp cache/web/org/apache/jsp/details_jsp.class
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/website/classes/jsp cache/web/org/apache/jsp/index_jsp.class
===================================================================
(Binary files differ)


Property changes on: project_src/website/classes/jsp cache/web/org/apache/jsp/index_jsp.class
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/website/classes/jsp cache/web/org/apache/jsp/templates/head_jsp.class
===================================================================
(Binary files differ)


Property changes on: project_src/website/classes/jsp cache/web/org/apache/jsp/templates/head_jsp.class
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/website/classes/jsp cache/web/org/apache/jsp/templates/main_jsp.class
===================================================================
(Binary files differ)


Property changes on: project_src/website/classes/jsp cache/web/org/apache/jsp/templates/main_jsp.class
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/website/classes/jsp cache/web/org/apache/jsp/templates/menu_jsp.class
===================================================================
(Binary files differ)


Property changes on: project_src/website/classes/jsp cache/web/org/apache/jsp/templates/menu_jsp.class
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/website/classes/jsp cache/web/org/apache/jsp/top10_jsp.class
===================================================================
(Binary files differ)


Property changes on: project_src/website/classes/jsp cache/web/org/apache/jsp/top10_jsp.class
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/website/classes/jsp cache/web/package cache/org.apache.jsp.dep2
===================================================================
(Binary files differ)


Property changes on: project_src/website/classes/jsp cache/web/package cache/org.apache.jsp.dep2
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/website/classes/jsp cache/web/package cache/org.apache.jsp.templates.dep2
===================================================================
(Binary files differ)


Property changes on: project_src/website/classes/jsp cache/web/package cache/org.apache.jsp.templates.dep2
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/website/src/ApplicationResources.properties
===================================================================

Added: project_src/website/test/cactus.properties
===================================================================
--- project_src/website/test/cactus.properties	2004-12-14 18:42:22 UTC (rev 247)
+++ project_src/website/test/cactus.properties	2004-12-27 13:04:03 UTC (rev 248)
@@ -0,0 +1,31 @@
+# Configuration file for Cactus.
+
+# Each project using Cactus need to have such a file put in the client side
+# CLASSPATH (Meaning the directory containgin this file should be in the client
+# side CLASSPATH, not the file itself of course ... :) )
+
+# Defines the URLs that will be used by Cactus to call it's redirectors.
+# You need to specify in these URLs the webapp context that you use for your
+# application. In the example below, the context is "test".
+
+# Web app Context under which our application to test runs
+cactus.contextURL=http://localhost:8080/web
+
+# Default Servlet Redirector Name. Used by ServletTestCase test cases.
+cactus.servletRedirectorName = ServletRedirector
+
+# Default JSP Redirector Name. Used by JspTestCase test cases.
+cactus.jspRedirectorName = JspRedirector
+
+# NOTE: Some servlet 2.3 containers need to map the filter to a valid
+# resource (Orion 1.5.2 for example). Others, like Tomcat, are happy
+# with just any mapping.
+#
+# For example, the following would work with Tomcat (and this is what I would
+# have expected !) :
+# cactus.filterRedirectorName = FilterRedirector
+
+cactus.filterRedirectorName=/FilterRedirector
+
+# Enable Cactus internal logging
+cactus.enableLogging=true

Added: project_src/website/test/log_client.properties
===================================================================
--- project_src/website/test/log_client.properties	2004-12-14 18:42:22 UTC (rev 247)
+++ project_src/website/test/log_client.properties	2004-12-27 13:04:03 UTC (rev 248)
@@ -0,0 +1,18 @@
+
+# Properties for configuring Log4j
+# This is the configuring for logging on the JUnit side (i.e. the client side)
+
+log4j.appender.cactus = org.apache.log4j.FileAppender
+log4j.appender.cactus.File=D:/a_provirent/project_src/website/cactus_client.log
+log4j.appender.cactus.Append = false
+log4j.appender.cactus.layout = org.apache.log4j.PatternLayout
+log4j.appender.cactus.layout.ConversionPattern = %d{ABSOLUTE} [%t] %-5p %-30.30c{2} %x - %m %n
+
+# Any application log which uses Log4J will be logged to the Cactus log file
+log4j.rootCategory=DEBUG, cactus
+
+# By default we don't log at the DEBUG level for Cactus log, in order not to generate too
+# many logs. However, should a problem arise and logs need to be sent to the Cactus dev team,
+# then we will ask you to change this to DEBUG.
+log4j.category.org.apache.cactus = WARN, cactus
+log4j.additivity.org.apache.cactus=false

Added: project_src/website/test/log_server.properties
===================================================================
--- project_src/website/test/log_server.properties	2004-12-14 18:42:22 UTC (rev 247)
+++ project_src/website/test/log_server.properties	2004-12-27 13:04:03 UTC (rev 248)
@@ -0,0 +1,18 @@
+
+# Properties for configuring Log4j
+# This is the configuring for logging on the server side
+
+log4j.appender.cactus = org.apache.log4j.FileAppender
+log4j.appender.cactus.File=D:/a_provirent/project_src/website/cactus_server.log
+log4j.appender.cactus.Append = false
+log4j.appender.cactus.layout = org.apache.log4j.PatternLayout
+log4j.appender.cactus.layout.ConversionPattern = %d{ABSOLUTE} [%t] %-5p %-30.30c{2} %x - %m %n
+
+# Any application log which uses Log4J will be logged to the Cactus log file
+log4j.rootCategory=DEBUG, cactus
+
+# By default we don't log at the DEBUG level for Cactus log, in order not to generate too
+# many logs. However, should a problem arise and logs need to be sent to the Cactus dev team,
+# then we will ask you to change this to DEBUG.
+log4j.category.org.apache.cactus = WARN, cactus
+log4j.additivity.org.apache.cactus=false

Added: project_src/website/web/WEB-INF/lib/commons-beanutils.jar
===================================================================
(Binary files differ)


Property changes on: project_src/website/web/WEB-INF/lib/commons-beanutils.jar
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/website/web/WEB-INF/lib/commons-collections.jar
===================================================================
(Binary files differ)


Property changes on: project_src/website/web/WEB-INF/lib/commons-collections.jar
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/website/web/WEB-INF/lib/commons-digester.jar
===================================================================
(Binary files differ)


Property changes on: project_src/website/web/WEB-INF/lib/commons-digester.jar
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/website/web/WEB-INF/lib/commons-fileupload.jar
===================================================================
(Binary files differ)


Property changes on: project_src/website/web/WEB-INF/lib/commons-fileupload.jar
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/website/web/WEB-INF/lib/commons-lang.jar
===================================================================
(Binary files differ)


Property changes on: project_src/website/web/WEB-INF/lib/commons-lang.jar
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/website/web/WEB-INF/lib/commons-logging.jar
===================================================================
(Binary files differ)


Property changes on: project_src/website/web/WEB-INF/lib/commons-logging.jar
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/website/web/WEB-INF/lib/commons-validator.jar
===================================================================
(Binary files differ)


Property changes on: project_src/website/web/WEB-INF/lib/commons-validator.jar
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/website/web/WEB-INF/lib/jakarta-oro.jar
===================================================================
(Binary files differ)


Property changes on: project_src/website/web/WEB-INF/lib/jakarta-oro.jar
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/website/web/WEB-INF/lib/jstl.jar
===================================================================
(Binary files differ)


Property changes on: project_src/website/web/WEB-INF/lib/jstl.jar
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/website/web/WEB-INF/lib/standard.jar
===================================================================
(Binary files differ)


Property changes on: project_src/website/web/WEB-INF/lib/standard.jar
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/website/web/WEB-INF/lib/struts.jar
===================================================================
(Binary files differ)


Property changes on: project_src/website/web/WEB-INF/lib/struts.jar
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/website/web/WEB-INF/struts-bean.tld
===================================================================
--- project_src/website/web/WEB-INF/struts-bean.tld	2004-12-14 18:42:22 UTC (rev 247)
+++ project_src/website/web/WEB-INF/struts-bean.tld	2004-12-27 13:04:03 UTC (rev 248)
@@ -0,0 +1,382 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+
+
+
+
+
+
+<!DOCTYPE taglib PUBLIC "-//Sun Microsystems, Inc.//DTD JSP Tag Library 1.1//EN" "http://java.sun.com/j2ee/dtds/web-jsptaglibrary_1_1.dtd">
+<taglib>
+<tlibversion>1.0</tlibversion>
+<jspversion>1.1</jspversion>
+<shortname>bean</shortname>
+<uri>http://jakarta.apache.org/struts/tags-bean</uri>
+<tag>
+<name>cookie</name>
+<tagclass>org.apache.struts.taglib.bean.CookieTag</tagclass>
+<teiclass>org.apache.struts.taglib.bean.CookieTei</teiclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>id</name>
+<required>true</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>multiple</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>define</name>
+<tagclass>org.apache.struts.taglib.bean.DefineTag</tagclass>
+<teiclass>org.apache.struts.taglib.bean.DefineTei</teiclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>id</name>
+<required>true</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>toScope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>type</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>header</name>
+<tagclass>org.apache.struts.taglib.bean.HeaderTag</tagclass>
+<teiclass>org.apache.struts.taglib.bean.HeaderTei</teiclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>id</name>
+<required>true</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>multiple</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>include</name>
+<tagclass>org.apache.struts.taglib.bean.IncludeTag</tagclass>
+<teiclass>org.apache.struts.taglib.bean.IncludeTei</teiclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>anchor</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>forward</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>href</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>id</name>
+<required>true</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>page</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>transaction</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>message</name>
+<tagclass>org.apache.struts.taglib.bean.MessageTag</tagclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>arg0</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>arg1</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>arg2</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>arg3</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>arg4</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>bundle</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>key</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>locale</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>page</name>
+<tagclass>org.apache.struts.taglib.bean.PageTag</tagclass>
+<teiclass>org.apache.struts.taglib.bean.PageTei</teiclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>id</name>
+<required>true</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>parameter</name>
+<tagclass>org.apache.struts.taglib.bean.ParameterTag</tagclass>
+<teiclass>org.apache.struts.taglib.bean.ParameterTei</teiclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>id</name>
+<required>true</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>multiple</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>resource</name>
+<tagclass>org.apache.struts.taglib.bean.ResourceTag</tagclass>
+<teiclass>org.apache.struts.taglib.bean.ResourceTei</teiclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>id</name>
+<required>true</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>input</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>size</name>
+<tagclass>org.apache.struts.taglib.bean.SizeTag</tagclass>
+<teiclass>org.apache.struts.taglib.bean.SizeTei</teiclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>collection</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>id</name>
+<required>true</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>struts</name>
+<tagclass>org.apache.struts.taglib.bean.StrutsTag</tagclass>
+<teiclass>org.apache.struts.taglib.bean.StrutsTei</teiclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>id</name>
+<required>true</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>formBean</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>forward</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>mapping</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>write</name>
+<tagclass>org.apache.struts.taglib.bean.WriteTag</tagclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>bundle</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>filter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>format</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>formatKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ignore</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>locale</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+</taglib>
+
+
+

Added: project_src/website/web/WEB-INF/struts-config.xml
===================================================================
--- project_src/website/web/WEB-INF/struts-config.xml	2004-12-14 18:42:22 UTC (rev 247)
+++ project_src/website/web/WEB-INF/struts-config.xml	2004-12-27 13:04:03 UTC (rev 248)
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE struts-config PUBLIC "-//Apache Software Foundation//DTD Struts Configuration 1.1//EN" "http://jakarta.apache.org/struts/dtds/struts-config_1_1.dtd">
+<struts-config>
+  <plug-in className="org.apache.struts.validator.ValidatorPlugIn">
+    <set-property property="pathnames" value="/WEB-INF/validator-rules.xml,/WEB-INF/validation.xml" />
+  </plug-in>
+  <plug-in className="org.apache.struts.tiles.TilesPlugin">
+    <set-property property="definitions-config" value="/WEB-INF/tiles-defs.xml" />
+  </plug-in>
+</struts-config>

Added: project_src/website/web/WEB-INF/struts-html.tld
===================================================================
--- project_src/website/web/WEB-INF/struts-html.tld	2004-12-14 18:42:22 UTC (rev 247)
+++ project_src/website/web/WEB-INF/struts-html.tld	2004-12-27 13:04:03 UTC (rev 248)
@@ -0,0 +1,2972 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+
+
+
+
+
+
+<!DOCTYPE taglib PUBLIC "-//Sun Microsystems, Inc.//DTD JSP Tag Library 1.1//EN" "http://java.sun.com/j2ee/dtds/web-jsptaglibrary_1_1.dtd">
+<taglib>
+<tlibversion>1.0</tlibversion>
+<jspversion>1.1</jspversion>
+<shortname>html</shortname>
+<uri>http://jakarta.apache.org/struts/tags-html</uri>
+<tag>
+<name>base</name>
+<tagclass>org.apache.struts.taglib.html.BaseTag</tagclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>target</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>server</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>button</name>
+<tagclass>org.apache.struts.taglib.html.ButtonTag</tagclass>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>disabled</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexed</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onchange</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>cancel</name>
+<tagclass>org.apache.struts.taglib.html.CancelTag</tagclass>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>disabled</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onchange</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>checkbox</name>
+<tagclass>org.apache.struts.taglib.html.CheckboxTag</tagclass>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>disabled</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexed</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onchange</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>errors</name>
+<tagclass>org.apache.struts.taglib.html.ErrorsTag</tagclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>bundle</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>locale</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>file</name>
+<tagclass>org.apache.struts.taglib.html.FileTag</tagclass>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>accept</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>disabled</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexed</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>maxlength</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onchange</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>size</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>form</name>
+<tagclass>org.apache.struts.taglib.html.FormTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>action</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>enctype</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>focus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>focusIndex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>method</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onreset</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onsubmit</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>target</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>type</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>frame</name>
+<tagclass>org.apache.struts.taglib.html.FrameTag</tagclass>
+<attribute>
+<name>action</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>anchor</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>forward</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>frameborder</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>frameName</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>href</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>longdesc</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>marginheight</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>marginwidth</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>noresize</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>page</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramName</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramProperty</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramScope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scrolling</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>transaction</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>hidden</name>
+<tagclass>org.apache.struts.taglib.html.HiddenTag</tagclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexed</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onchange</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>write</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>html</name>
+<tagclass>org.apache.struts.taglib.html.HtmlTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>locale</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>xhtml</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>image</name>
+<tagclass>org.apache.struts.taglib.html.ImageTag</tagclass>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>align</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>border</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>bundle</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>disabled</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexed</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>locale</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onchange</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>page</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>pageKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>src</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>srcKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>img</name>
+<tagclass>org.apache.struts.taglib.html.ImgTag</tagclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>align</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>border</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>bundle</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>height</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>hspace</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>imageName</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ismap</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>locale</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>lowsrc</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>page</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>pageKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramName</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramProperty</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramScope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>src</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>srcKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>usemap</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>vspace</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>width</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>javascript</name>
+<tagclass>org.apache.struts.taglib.html.JavascriptValidatorTag</tagclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>cdata</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>dynamicJavascript</name>
+<required>false</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>formName</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>method</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>page</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>src</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>staticJavascript</name>
+<required>false</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>htmlComment</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>link</name>
+<tagclass>org.apache.struts.taglib.html.LinkTag</tagclass>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>action</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>anchor</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>forward</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>href</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexed</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>linkName</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>page</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramName</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramProperty</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramScope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>target</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>transaction</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>messages</name>
+<tagclass>org.apache.struts.taglib.html.MessagesTag</tagclass>
+<teiclass>org.apache.struts.taglib.html.MessagesTei</teiclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>id</name>
+<required>true</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>bundle</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>locale</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>header</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>footer</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>message</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>multibox</name>
+<tagclass>org.apache.struts.taglib.html.MultiboxTag</tagclass>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>disabled</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onchange</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>option</name>
+<tagclass>org.apache.struts.taglib.html.OptionTag</tagclass>
+<attribute>
+<name>bundle</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>disabled</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>key</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>locale</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>options</name>
+<tagclass>org.apache.struts.taglib.html.OptionsTag</tagclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>collection</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>filter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>labelName</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>labelProperty</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>optionsCollection</name>
+<tagclass>org.apache.struts.taglib.html.OptionsCollectionTag</tagclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>filter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>label</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>password</name>
+<tagclass>org.apache.struts.taglib.html.PasswordTag</tagclass>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>disabled</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexed</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>maxlength</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onchange</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>readonly</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>redisplay</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>size</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>radio</name>
+<tagclass>org.apache.struts.taglib.html.RadioTag</tagclass>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>disabled</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexed</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onchange</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>idName</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>reset</name>
+<tagclass>org.apache.struts.taglib.html.ResetTag</tagclass>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>disabled</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onchange</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>rewrite</name>
+<tagclass>org.apache.struts.taglib.html.RewriteTag</tagclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>anchor</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>forward</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>href</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>page</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramName</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramProperty</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramScope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>transaction</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>select</name>
+<tagclass>org.apache.struts.taglib.html.SelectTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>disabled</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexed</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>multiple</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onchange</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>size</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>submit</name>
+<tagclass>org.apache.struts.taglib.html.SubmitTag</tagclass>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>disabled</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexed</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onchange</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>text</name>
+<tagclass>org.apache.struts.taglib.html.TextTag</tagclass>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>disabled</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexed</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>maxlength</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onchange</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>readonly</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>size</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>textarea</name>
+<tagclass>org.apache.struts.taglib.html.TextareaTag</tagclass>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>cols</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>disabled</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexed</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onchange</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>readonly</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>rows</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>xhtml</name>
+<tagclass>org.apache.struts.taglib.html.XhtmlTag</tagclass>
+<bodycontent>empty</bodycontent>
+</tag>
+</taglib>
+

Added: project_src/website/web/WEB-INF/struts-logic.tld
===================================================================
--- project_src/website/web/WEB-INF/struts-logic.tld	2004-12-14 18:42:22 UTC (rev 247)
+++ project_src/website/web/WEB-INF/struts-logic.tld	2004-12-27 13:04:03 UTC (rev 248)
@@ -0,0 +1,642 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+
+
+
+
+
+<!DOCTYPE taglib PUBLIC "-//Sun Microsystems, Inc.//DTD JSP Tag Library 1.1//EN" "http://java.sun.com/j2ee/dtds/web-jsptaglibrary_1_1.dtd">
+<taglib>
+<tlibversion>1.0</tlibversion>
+<jspversion>1.1</jspversion>
+<shortname>logic</shortname>
+<uri>http://jakarta.apache.org/struts/tags-logic</uri>
+<tag>
+<name>empty</name>
+<tagclass>org.apache.struts.taglib.logic.EmptyTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>equal</name>
+<tagclass>org.apache.struts.taglib.logic.EqualTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>cookie</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>header</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>parameter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>forward</name>
+<tagclass>org.apache.struts.taglib.logic.ForwardTag</tagclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>name</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>greaterEqual</name>
+<tagclass>org.apache.struts.taglib.logic.GreaterEqualTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>cookie</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>header</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>parameter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>greaterThan</name>
+<tagclass>org.apache.struts.taglib.logic.GreaterThanTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>cookie</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>header</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>parameter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>iterate</name>
+<tagclass>org.apache.struts.taglib.logic.IterateTag</tagclass>
+<teiclass>org.apache.struts.taglib.logic.IterateTei</teiclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>collection</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>id</name>
+<required>true</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexId</name>
+<required>false</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>length</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>offset</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>type</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>lessEqual</name>
+<tagclass>org.apache.struts.taglib.logic.LessEqualTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>cookie</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>header</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>parameter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>lessThan</name>
+<tagclass>org.apache.struts.taglib.logic.LessThanTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>cookie</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>header</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>parameter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>match</name>
+<tagclass>org.apache.struts.taglib.logic.MatchTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>cookie</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>header</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>location</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>parameter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>messagesNotPresent</name>
+<tagclass>org.apache.struts.taglib.logic.MessagesNotPresentTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>message</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>messagesPresent</name>
+<tagclass>org.apache.struts.taglib.logic.MessagesPresentTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>message</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>notEmpty</name>
+<tagclass>org.apache.struts.taglib.logic.NotEmptyTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>notEqual</name>
+<tagclass>org.apache.struts.taglib.logic.NotEqualTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>cookie</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>header</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>parameter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>notMatch</name>
+<tagclass>org.apache.struts.taglib.logic.NotMatchTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>cookie</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>header</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>location</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>parameter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>notPresent</name>
+<tagclass>org.apache.struts.taglib.logic.NotPresentTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>cookie</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>header</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>parameter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>role</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>user</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>present</name>
+<tagclass>org.apache.struts.taglib.logic.PresentTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>cookie</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>header</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>parameter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>role</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>user</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>redirect</name>
+<tagclass>org.apache.struts.taglib.logic.RedirectTag</tagclass>
+<attribute>
+<name>anchor</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>forward</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>href</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>page</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramName</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramProperty</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramScope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>transaction</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+</taglib>
+
+
+

Added: project_src/website/web/WEB-INF/struts-nested.tld
===================================================================
--- project_src/website/web/WEB-INF/struts-nested.tld	2004-12-14 18:42:22 UTC (rev 247)
+++ project_src/website/web/WEB-INF/struts-nested.tld	2004-12-27 13:04:03 UTC (rev 248)
@@ -0,0 +1,2870 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+
+
+
+
+
+<!DOCTYPE taglib PUBLIC "-//Sun Microsystems, Inc.//DTD JSP Tag Library 1.1//EN" "http://java.sun.com/j2ee/dtds/web-jsptaglibrary_1_1.dtd">
+<taglib>
+<tlibversion>1.0</tlibversion>
+<jspversion>1.1</jspversion>
+<shortname>nested</shortname>
+<uri>http://jakarta.apache.org/struts/tags-nested</uri>
+<tag>
+<name>nest</name>
+<tagclass>org.apache.struts.taglib.nested.NestedPropertyTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>writeNesting</name>
+<tagclass>org.apache.struts.taglib.nested.NestedWriteNestingTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>filter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>root</name>
+<tagclass>org.apache.struts.taglib.nested.NestedRootTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>define</name>
+<tagclass>org.apache.struts.taglib.nested.bean.NestedDefineTag</tagclass>
+<teiclass>org.apache.struts.taglib.nested.bean.NestedDefineTei</teiclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>id</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>toScope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>type</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>message</name>
+<tagclass>org.apache.struts.taglib.nested.bean.NestedMessageTag</tagclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>arg0</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>arg1</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>arg2</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>arg3</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>arg4</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>bundle</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>key</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>locale</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>size</name>
+<tagclass>org.apache.struts.taglib.nested.bean.NestedSizeTag</tagclass>
+<teiclass>org.apache.struts.taglib.bean.SizeTei</teiclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>collection</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>id</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>write</name>
+<tagclass>org.apache.struts.taglib.nested.bean.NestedWriteTag</tagclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>bundle</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>filter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>format</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>formatKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ignore</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>locale</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>checkbox</name>
+<tagclass>org.apache.struts.taglib.nested.html.NestedCheckboxTag</tagclass>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>disabled</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexed</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onchange</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>errors</name>
+<tagclass>org.apache.struts.taglib.nested.html.NestedErrorsTag</tagclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>bundle</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>locale</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>file</name>
+<tagclass>org.apache.struts.taglib.nested.html.NestedFileTag</tagclass>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>accept</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>disabled</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexed</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>maxlength</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onchange</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>size</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>form</name>
+<tagclass>org.apache.struts.taglib.nested.html.NestedFormTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>action</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>enctype</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>focus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>method</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onreset</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onsubmit</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>target</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>type</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>hidden</name>
+<tagclass>org.apache.struts.taglib.nested.html.NestedHiddenTag</tagclass>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexed</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>image</name>
+<tagclass>org.apache.struts.taglib.nested.html.NestedImageTag</tagclass>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>align</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>border</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>bundle</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>disabled</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexed</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>locale</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onchange</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>page</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>pageKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>src</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>srcKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>img</name>
+<tagclass>org.apache.struts.taglib.nested.html.NestedImgTag</tagclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>align</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>border</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>bundle</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>height</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>hspace</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>imageName</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ismap</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>locale</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>lowsrc</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>page</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>pageKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramName</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramProperty</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramScope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>src</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>srcKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>usemap</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>vspace</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>width</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>link</name>
+<tagclass>org.apache.struts.taglib.nested.html.NestedLinkTag</tagclass>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>action</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>anchor</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>forward</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>href</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexed</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>linkName</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>page</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramName</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramProperty</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramScope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>target</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>transaction</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>messages</name>
+<tagclass>org.apache.struts.taglib.nested.html.NestedMessagesTag</tagclass>
+<teiclass>org.apache.struts.taglib.html.MessagesTei</teiclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>id</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>bundle</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>locale</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>header</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>footer</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>message</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>multibox</name>
+<tagclass>org.apache.struts.taglib.nested.html.NestedMultiboxTag</tagclass>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>disabled</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onchange</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>options</name>
+<tagclass>org.apache.struts.taglib.nested.html.NestedOptionsTag</tagclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>collection</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>labelName</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>labelProperty</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>optionsCollection</name>
+<tagclass>org.apache.struts.taglib.nested.html.NestedOptionsCollectionTag</tagclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>label</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>password</name>
+<tagclass>org.apache.struts.taglib.nested.html.NestedPasswordTag</tagclass>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>disabled</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexed</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>maxlength</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onchange</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>readonly</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>redisplay</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>size</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>radio</name>
+<tagclass>org.apache.struts.taglib.nested.html.NestedRadioTag</tagclass>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>disabled</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexed</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onchange</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>select</name>
+<tagclass>org.apache.struts.taglib.nested.html.NestedSelectTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>disabled</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexed</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>multiple</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onchange</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>size</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>submit</name>
+<tagclass>org.apache.struts.taglib.nested.html.NestedSubmitTag</tagclass>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>disabled</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexed</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onchange</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>text</name>
+<tagclass>org.apache.struts.taglib.nested.html.NestedTextTag</tagclass>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>disabled</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexed</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>maxlength</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onchange</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>readonly</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>size</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>textarea</name>
+<tagclass>org.apache.struts.taglib.nested.html.NestedTextareaTag</tagclass>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>cols</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>disabled</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexed</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onchange</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>readonly</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>rows</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>empty</name>
+<tagclass>org.apache.struts.taglib.nested.logic.NestedEmptyTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>equal</name>
+<tagclass>org.apache.struts.taglib.nested.logic.NestedEqualTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>cookie</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>header</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>parameter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>greaterEqual</name>
+<tagclass>org.apache.struts.taglib.nested.logic.NestedGreaterEqualTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>cookie</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>header</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>parameter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>greaterThan</name>
+<tagclass>org.apache.struts.taglib.nested.logic.NestedGreaterThanTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>cookie</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>header</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>parameter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>iterate</name>
+<tagclass>org.apache.struts.taglib.nested.logic.NestedIterateTag</tagclass>
+<teiclass>org.apache.struts.taglib.nested.logic.NestedIterateTei</teiclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>collection</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>id</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>length</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>offset</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>type</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>lessEqual</name>
+<tagclass>org.apache.struts.taglib.nested.logic.NestedLessEqualTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>cookie</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>header</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>parameter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>lessThan</name>
+<tagclass>org.apache.struts.taglib.nested.logic.NestedLessThanTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>cookie</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>header</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>parameter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>match</name>
+<tagclass>org.apache.struts.taglib.nested.logic.NestedMatchTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>cookie</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>header</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>location</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>parameter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>messagesNotPresent</name>
+<tagclass>org.apache.struts.taglib.nested.logic.NestedMessagesNotPresentTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>message</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>messagesPresent</name>
+<tagclass>org.apache.struts.taglib.nested.logic.NestedMessagesPresentTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>message</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>notEmpty</name>
+<tagclass>org.apache.struts.taglib.nested.logic.NestedNotEmptyTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>notEqual</name>
+<tagclass>org.apache.struts.taglib.nested.logic.NestedNotEqualTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>cookie</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>header</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>parameter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>notMatch</name>
+<tagclass>org.apache.struts.taglib.nested.logic.NestedNotMatchTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>cookie</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>header</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>location</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>parameter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>notPresent</name>
+<tagclass>org.apache.struts.taglib.nested.logic.NestedNotPresentTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>cookie</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>header</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>parameter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>role</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>user</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>present</name>
+<tagclass>org.apache.struts.taglib.nested.logic.NestedPresentTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>cookie</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>header</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>parameter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>role</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>user</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+</taglib>
+
+
+

Added: project_src/website/web/WEB-INF/struts-template.tld
===================================================================
--- project_src/website/web/WEB-INF/struts-template.tld	2004-12-14 18:42:22 UTC (rev 247)
+++ project_src/website/web/WEB-INF/struts-template.tld	2004-12-27 13:04:03 UTC (rev 248)
@@ -0,0 +1,73 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+
+
+
+
+
+
+<!DOCTYPE taglib PUBLIC "-//Sun Microsystems, Inc.//DTD JSP Tag Library 1.1//EN" "http://java.sun.com/j2ee/dtds/web-jsptaglibrary_1_1.dtd">
+<taglib>
+<tlibversion>1.0</tlibversion>
+<jspversion>1.1</jspversion>
+<shortname>template</shortname>
+<uri>http://jakarta.apache.org/struts/tags-template</uri>
+<tag>
+<name>insert</name>
+<tagclass>org.apache.struts.taglib.template.InsertTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>template</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>put</name>
+<tagclass>org.apache.struts.taglib.template.PutTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>name</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>role</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>content</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>direct</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>get</name>
+<tagclass>org.apache.struts.taglib.template.GetTag</tagclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>flush</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>role</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+</taglib>
+
+
+

Added: project_src/website/web/WEB-INF/struts-tiles.tld
===================================================================
--- project_src/website/web/WEB-INF/struts-tiles.tld	2004-12-14 18:42:22 UTC (rev 247)
+++ project_src/website/web/WEB-INF/struts-tiles.tld	2004-12-27 13:04:03 UTC (rev 248)
@@ -0,0 +1,344 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+
+
+
+
+
+
+<!DOCTYPE taglib PUBLIC "-//Sun Microsystems, Inc.//DTD JSP Tag Library 1.1//EN" "http://java.sun.com/j2ee/dtds/web-jsptaglibrary_1_1.dtd">
+<taglib>
+<tlibversion>1.0</tlibversion>
+<jspversion>1.1</jspversion>
+<shortname>tiles</shortname>
+<uri>http://jakarta.apache.org/struts/tags-tiles</uri>
+<tag>
+<name>insert</name>
+<tagclass>org.apache.struts.taglib.tiles.InsertTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>template</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>component</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>page</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>definition</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>attribute</name>
+<required>false</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>beanName</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>beanProperty</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>beanScope</name>
+<required>false</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>flush</name>
+<required>false</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>ignore</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>role</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>controllerUrl</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>controllerClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>definition</name>
+<tagclass>org.apache.struts.taglib.tiles.DefinitionTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>id</name>
+<required>true</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>template</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>page</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>role</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>extends</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>put</name>
+<tagclass>org.apache.struts.taglib.tiles.PutTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>content</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>direct</name>
+<required>false</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>type</name>
+<required>false</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>beanName</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>beanProperty</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>beanScope</name>
+<required>false</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>role</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>putList</name>
+<tagclass>org.apache.struts.taglib.tiles.PutListTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>name</name>
+<required>true</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>add</name>
+<tagclass>org.apache.struts.taglib.tiles.AddTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>content</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>direct</name>
+<required>false</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>type</name>
+<required>false</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>beanName</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>beanProperty</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>beanScope</name>
+<required>false</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>role</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>get</name>
+<tagclass>org.apache.struts.taglib.tiles.GetTag</tagclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>name</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ignore</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>flush</name>
+<required>false</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>role</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>getAsString</name>
+<tagclass>org.apache.struts.taglib.tiles.GetAttributeTag</tagclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>name</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ignore</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>role</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>useAttribute</name>
+<tagclass>org.apache.struts.taglib.tiles.UseAttributeTag</tagclass>
+<teiclass>org.apache.struts.taglib.tiles.UseAttributeTei</teiclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>id</name>
+<required>false</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>classname</name>
+<required>false</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ignore</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>importAttribute</name>
+<tagclass>org.apache.struts.taglib.tiles.ImportAttributeTag</tagclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>ignore</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>initComponentDefinitions</name>
+<tagclass>org.apache.struts.taglib.tiles.InitDefinitionsTag</tagclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>file</name>
+<required>true</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>classname</name>
+<required>false</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+</tag>
+</taglib>
+
+
+

Added: project_src/website/web/WEB-INF/taglib/struts-bean.tld
===================================================================
--- project_src/website/web/WEB-INF/taglib/struts-bean.tld	2004-12-14 18:42:22 UTC (rev 247)
+++ project_src/website/web/WEB-INF/taglib/struts-bean.tld	2004-12-27 13:04:03 UTC (rev 248)
@@ -0,0 +1,382 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+
+
+
+
+
+
+<!DOCTYPE taglib PUBLIC "-//Sun Microsystems, Inc.//DTD JSP Tag Library 1.1//EN" "http://java.sun.com/j2ee/dtds/web-jsptaglibrary_1_1.dtd">
+<taglib>
+<tlibversion>1.0</tlibversion>
+<jspversion>1.1</jspversion>
+<shortname>bean</shortname>
+<uri>http://jakarta.apache.org/struts/tags-bean</uri>
+<tag>
+<name>cookie</name>
+<tagclass>org.apache.struts.taglib.bean.CookieTag</tagclass>
+<teiclass>org.apache.struts.taglib.bean.CookieTei</teiclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>id</name>
+<required>true</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>multiple</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>define</name>
+<tagclass>org.apache.struts.taglib.bean.DefineTag</tagclass>
+<teiclass>org.apache.struts.taglib.bean.DefineTei</teiclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>id</name>
+<required>true</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>toScope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>type</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>header</name>
+<tagclass>org.apache.struts.taglib.bean.HeaderTag</tagclass>
+<teiclass>org.apache.struts.taglib.bean.HeaderTei</teiclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>id</name>
+<required>true</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>multiple</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>include</name>
+<tagclass>org.apache.struts.taglib.bean.IncludeTag</tagclass>
+<teiclass>org.apache.struts.taglib.bean.IncludeTei</teiclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>anchor</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>forward</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>href</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>id</name>
+<required>true</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>page</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>transaction</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>message</name>
+<tagclass>org.apache.struts.taglib.bean.MessageTag</tagclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>arg0</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>arg1</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>arg2</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>arg3</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>arg4</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>bundle</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>key</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>locale</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>page</name>
+<tagclass>org.apache.struts.taglib.bean.PageTag</tagclass>
+<teiclass>org.apache.struts.taglib.bean.PageTei</teiclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>id</name>
+<required>true</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>parameter</name>
+<tagclass>org.apache.struts.taglib.bean.ParameterTag</tagclass>
+<teiclass>org.apache.struts.taglib.bean.ParameterTei</teiclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>id</name>
+<required>true</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>multiple</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>resource</name>
+<tagclass>org.apache.struts.taglib.bean.ResourceTag</tagclass>
+<teiclass>org.apache.struts.taglib.bean.ResourceTei</teiclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>id</name>
+<required>true</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>input</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>size</name>
+<tagclass>org.apache.struts.taglib.bean.SizeTag</tagclass>
+<teiclass>org.apache.struts.taglib.bean.SizeTei</teiclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>collection</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>id</name>
+<required>true</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>struts</name>
+<tagclass>org.apache.struts.taglib.bean.StrutsTag</tagclass>
+<teiclass>org.apache.struts.taglib.bean.StrutsTei</teiclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>id</name>
+<required>true</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>formBean</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>forward</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>mapping</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>write</name>
+<tagclass>org.apache.struts.taglib.bean.WriteTag</tagclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>bundle</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>filter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>format</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>formatKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ignore</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>locale</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+</taglib>
+
+
+

Added: project_src/website/web/WEB-INF/taglib/struts-html.tld
===================================================================
--- project_src/website/web/WEB-INF/taglib/struts-html.tld	2004-12-14 18:42:22 UTC (rev 247)
+++ project_src/website/web/WEB-INF/taglib/struts-html.tld	2004-12-27 13:04:03 UTC (rev 248)
@@ -0,0 +1,2972 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+
+
+
+
+
+
+<!DOCTYPE taglib PUBLIC "-//Sun Microsystems, Inc.//DTD JSP Tag Library 1.1//EN" "http://java.sun.com/j2ee/dtds/web-jsptaglibrary_1_1.dtd">
+<taglib>
+<tlibversion>1.0</tlibversion>
+<jspversion>1.1</jspversion>
+<shortname>html</shortname>
+<uri>http://jakarta.apache.org/struts/tags-html</uri>
+<tag>
+<name>base</name>
+<tagclass>org.apache.struts.taglib.html.BaseTag</tagclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>target</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>server</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>button</name>
+<tagclass>org.apache.struts.taglib.html.ButtonTag</tagclass>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>disabled</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexed</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onchange</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>cancel</name>
+<tagclass>org.apache.struts.taglib.html.CancelTag</tagclass>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>disabled</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onchange</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>checkbox</name>
+<tagclass>org.apache.struts.taglib.html.CheckboxTag</tagclass>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>disabled</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexed</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onchange</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>errors</name>
+<tagclass>org.apache.struts.taglib.html.ErrorsTag</tagclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>bundle</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>locale</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>file</name>
+<tagclass>org.apache.struts.taglib.html.FileTag</tagclass>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>accept</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>disabled</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexed</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>maxlength</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onchange</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>size</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>form</name>
+<tagclass>org.apache.struts.taglib.html.FormTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>action</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>enctype</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>focus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>focusIndex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>method</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onreset</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onsubmit</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>target</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>type</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>frame</name>
+<tagclass>org.apache.struts.taglib.html.FrameTag</tagclass>
+<attribute>
+<name>action</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>anchor</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>forward</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>frameborder</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>frameName</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>href</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>longdesc</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>marginheight</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>marginwidth</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>noresize</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>page</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramName</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramProperty</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramScope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scrolling</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>transaction</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>hidden</name>
+<tagclass>org.apache.struts.taglib.html.HiddenTag</tagclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexed</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onchange</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>write</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>html</name>
+<tagclass>org.apache.struts.taglib.html.HtmlTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>locale</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>xhtml</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>image</name>
+<tagclass>org.apache.struts.taglib.html.ImageTag</tagclass>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>align</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>border</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>bundle</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>disabled</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexed</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>locale</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onchange</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>page</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>pageKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>src</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>srcKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>img</name>
+<tagclass>org.apache.struts.taglib.html.ImgTag</tagclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>align</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>border</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>bundle</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>height</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>hspace</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>imageName</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ismap</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>locale</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>lowsrc</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>page</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>pageKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramName</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramProperty</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramScope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>src</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>srcKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>usemap</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>vspace</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>width</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>javascript</name>
+<tagclass>org.apache.struts.taglib.html.JavascriptValidatorTag</tagclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>cdata</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>dynamicJavascript</name>
+<required>false</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>formName</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>method</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>page</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>src</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>staticJavascript</name>
+<required>false</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>htmlComment</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>link</name>
+<tagclass>org.apache.struts.taglib.html.LinkTag</tagclass>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>action</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>anchor</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>forward</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>href</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexed</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>linkName</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>page</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramName</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramProperty</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramScope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>target</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>transaction</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>messages</name>
+<tagclass>org.apache.struts.taglib.html.MessagesTag</tagclass>
+<teiclass>org.apache.struts.taglib.html.MessagesTei</teiclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>id</name>
+<required>true</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>bundle</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>locale</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>header</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>footer</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>message</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>multibox</name>
+<tagclass>org.apache.struts.taglib.html.MultiboxTag</tagclass>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>disabled</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onchange</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>option</name>
+<tagclass>org.apache.struts.taglib.html.OptionTag</tagclass>
+<attribute>
+<name>bundle</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>disabled</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>key</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>locale</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>options</name>
+<tagclass>org.apache.struts.taglib.html.OptionsTag</tagclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>collection</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>filter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>labelName</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>labelProperty</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>optionsCollection</name>
+<tagclass>org.apache.struts.taglib.html.OptionsCollectionTag</tagclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>filter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>label</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>password</name>
+<tagclass>org.apache.struts.taglib.html.PasswordTag</tagclass>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>disabled</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexed</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>maxlength</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onchange</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>readonly</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>redisplay</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>size</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>radio</name>
+<tagclass>org.apache.struts.taglib.html.RadioTag</tagclass>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>disabled</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexed</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onchange</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>idName</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>reset</name>
+<tagclass>org.apache.struts.taglib.html.ResetTag</tagclass>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>disabled</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onchange</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>rewrite</name>
+<tagclass>org.apache.struts.taglib.html.RewriteTag</tagclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>anchor</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>forward</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>href</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>page</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramName</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramProperty</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramScope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>transaction</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>select</name>
+<tagclass>org.apache.struts.taglib.html.SelectTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>disabled</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexed</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>multiple</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onchange</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>size</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>submit</name>
+<tagclass>org.apache.struts.taglib.html.SubmitTag</tagclass>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>disabled</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexed</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onchange</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>text</name>
+<tagclass>org.apache.struts.taglib.html.TextTag</tagclass>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>disabled</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexed</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>maxlength</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onchange</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>readonly</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>size</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>textarea</name>
+<tagclass>org.apache.struts.taglib.html.TextareaTag</tagclass>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>cols</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>disabled</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexed</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onchange</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>readonly</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>rows</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>xhtml</name>
+<tagclass>org.apache.struts.taglib.html.XhtmlTag</tagclass>
+<bodycontent>empty</bodycontent>
+</tag>
+</taglib>
+

Added: project_src/website/web/WEB-INF/taglib/struts-logic.tld
===================================================================
--- project_src/website/web/WEB-INF/taglib/struts-logic.tld	2004-12-14 18:42:22 UTC (rev 247)
+++ project_src/website/web/WEB-INF/taglib/struts-logic.tld	2004-12-27 13:04:03 UTC (rev 248)
@@ -0,0 +1,642 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+
+
+
+
+
+<!DOCTYPE taglib PUBLIC "-//Sun Microsystems, Inc.//DTD JSP Tag Library 1.1//EN" "http://java.sun.com/j2ee/dtds/web-jsptaglibrary_1_1.dtd">
+<taglib>
+<tlibversion>1.0</tlibversion>
+<jspversion>1.1</jspversion>
+<shortname>logic</shortname>
+<uri>http://jakarta.apache.org/struts/tags-logic</uri>
+<tag>
+<name>empty</name>
+<tagclass>org.apache.struts.taglib.logic.EmptyTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>equal</name>
+<tagclass>org.apache.struts.taglib.logic.EqualTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>cookie</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>header</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>parameter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>forward</name>
+<tagclass>org.apache.struts.taglib.logic.ForwardTag</tagclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>name</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>greaterEqual</name>
+<tagclass>org.apache.struts.taglib.logic.GreaterEqualTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>cookie</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>header</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>parameter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>greaterThan</name>
+<tagclass>org.apache.struts.taglib.logic.GreaterThanTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>cookie</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>header</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>parameter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>iterate</name>
+<tagclass>org.apache.struts.taglib.logic.IterateTag</tagclass>
+<teiclass>org.apache.struts.taglib.logic.IterateTei</teiclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>collection</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>id</name>
+<required>true</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexId</name>
+<required>false</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>length</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>offset</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>type</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>lessEqual</name>
+<tagclass>org.apache.struts.taglib.logic.LessEqualTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>cookie</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>header</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>parameter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>lessThan</name>
+<tagclass>org.apache.struts.taglib.logic.LessThanTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>cookie</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>header</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>parameter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>match</name>
+<tagclass>org.apache.struts.taglib.logic.MatchTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>cookie</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>header</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>location</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>parameter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>messagesNotPresent</name>
+<tagclass>org.apache.struts.taglib.logic.MessagesNotPresentTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>message</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>messagesPresent</name>
+<tagclass>org.apache.struts.taglib.logic.MessagesPresentTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>message</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>notEmpty</name>
+<tagclass>org.apache.struts.taglib.logic.NotEmptyTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>notEqual</name>
+<tagclass>org.apache.struts.taglib.logic.NotEqualTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>cookie</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>header</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>parameter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>notMatch</name>
+<tagclass>org.apache.struts.taglib.logic.NotMatchTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>cookie</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>header</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>location</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>parameter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>notPresent</name>
+<tagclass>org.apache.struts.taglib.logic.NotPresentTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>cookie</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>header</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>parameter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>role</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>user</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>present</name>
+<tagclass>org.apache.struts.taglib.logic.PresentTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>cookie</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>header</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>parameter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>role</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>user</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>redirect</name>
+<tagclass>org.apache.struts.taglib.logic.RedirectTag</tagclass>
+<attribute>
+<name>anchor</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>forward</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>href</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>page</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramName</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramProperty</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramScope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>transaction</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+</taglib>
+
+
+

Added: project_src/website/web/WEB-INF/taglib/struts-nested.tld
===================================================================
--- project_src/website/web/WEB-INF/taglib/struts-nested.tld	2004-12-14 18:42:22 UTC (rev 247)
+++ project_src/website/web/WEB-INF/taglib/struts-nested.tld	2004-12-27 13:04:03 UTC (rev 248)
@@ -0,0 +1,2870 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+
+
+
+
+
+<!DOCTYPE taglib PUBLIC "-//Sun Microsystems, Inc.//DTD JSP Tag Library 1.1//EN" "http://java.sun.com/j2ee/dtds/web-jsptaglibrary_1_1.dtd">
+<taglib>
+<tlibversion>1.0</tlibversion>
+<jspversion>1.1</jspversion>
+<shortname>nested</shortname>
+<uri>http://jakarta.apache.org/struts/tags-nested</uri>
+<tag>
+<name>nest</name>
+<tagclass>org.apache.struts.taglib.nested.NestedPropertyTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>writeNesting</name>
+<tagclass>org.apache.struts.taglib.nested.NestedWriteNestingTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>filter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>root</name>
+<tagclass>org.apache.struts.taglib.nested.NestedRootTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>define</name>
+<tagclass>org.apache.struts.taglib.nested.bean.NestedDefineTag</tagclass>
+<teiclass>org.apache.struts.taglib.nested.bean.NestedDefineTei</teiclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>id</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>toScope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>type</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>message</name>
+<tagclass>org.apache.struts.taglib.nested.bean.NestedMessageTag</tagclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>arg0</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>arg1</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>arg2</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>arg3</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>arg4</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>bundle</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>key</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>locale</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>size</name>
+<tagclass>org.apache.struts.taglib.nested.bean.NestedSizeTag</tagclass>
+<teiclass>org.apache.struts.taglib.bean.SizeTei</teiclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>collection</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>id</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>write</name>
+<tagclass>org.apache.struts.taglib.nested.bean.NestedWriteTag</tagclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>bundle</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>filter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>format</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>formatKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ignore</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>locale</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>checkbox</name>
+<tagclass>org.apache.struts.taglib.nested.html.NestedCheckboxTag</tagclass>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>disabled</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexed</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onchange</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>errors</name>
+<tagclass>org.apache.struts.taglib.nested.html.NestedErrorsTag</tagclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>bundle</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>locale</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>file</name>
+<tagclass>org.apache.struts.taglib.nested.html.NestedFileTag</tagclass>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>accept</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>disabled</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexed</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>maxlength</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onchange</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>size</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>form</name>
+<tagclass>org.apache.struts.taglib.nested.html.NestedFormTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>action</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>enctype</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>focus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>method</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onreset</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onsubmit</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>target</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>type</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>hidden</name>
+<tagclass>org.apache.struts.taglib.nested.html.NestedHiddenTag</tagclass>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexed</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>image</name>
+<tagclass>org.apache.struts.taglib.nested.html.NestedImageTag</tagclass>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>align</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>border</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>bundle</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>disabled</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexed</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>locale</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onchange</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>page</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>pageKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>src</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>srcKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>img</name>
+<tagclass>org.apache.struts.taglib.nested.html.NestedImgTag</tagclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>align</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>border</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>bundle</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>height</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>hspace</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>imageName</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ismap</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>locale</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>lowsrc</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>page</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>pageKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramName</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramProperty</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramScope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>src</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>srcKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>usemap</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>vspace</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>width</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>link</name>
+<tagclass>org.apache.struts.taglib.nested.html.NestedLinkTag</tagclass>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>action</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>anchor</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>forward</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>href</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexed</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>linkName</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>page</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramName</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramProperty</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramScope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>target</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>transaction</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>messages</name>
+<tagclass>org.apache.struts.taglib.nested.html.NestedMessagesTag</tagclass>
+<teiclass>org.apache.struts.taglib.html.MessagesTei</teiclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>id</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>bundle</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>locale</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>header</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>footer</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>message</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>multibox</name>
+<tagclass>org.apache.struts.taglib.nested.html.NestedMultiboxTag</tagclass>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>disabled</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onchange</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>options</name>
+<tagclass>org.apache.struts.taglib.nested.html.NestedOptionsTag</tagclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>collection</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>labelName</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>labelProperty</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>optionsCollection</name>
+<tagclass>org.apache.struts.taglib.nested.html.NestedOptionsCollectionTag</tagclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>label</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>password</name>
+<tagclass>org.apache.struts.taglib.nested.html.NestedPasswordTag</tagclass>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>disabled</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexed</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>maxlength</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onchange</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>readonly</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>redisplay</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>size</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>radio</name>
+<tagclass>org.apache.struts.taglib.nested.html.NestedRadioTag</tagclass>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>disabled</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexed</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onchange</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>select</name>
+<tagclass>org.apache.struts.taglib.nested.html.NestedSelectTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>disabled</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexed</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>multiple</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onchange</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>size</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>submit</name>
+<tagclass>org.apache.struts.taglib.nested.html.NestedSubmitTag</tagclass>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>disabled</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexed</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onchange</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>text</name>
+<tagclass>org.apache.struts.taglib.nested.html.NestedTextTag</tagclass>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>disabled</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexed</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>maxlength</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onchange</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>readonly</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>size</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>textarea</name>
+<tagclass>org.apache.struts.taglib.nested.html.NestedTextareaTag</tagclass>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>cols</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>disabled</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexed</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onchange</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>readonly</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>rows</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>empty</name>
+<tagclass>org.apache.struts.taglib.nested.logic.NestedEmptyTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>equal</name>
+<tagclass>org.apache.struts.taglib.nested.logic.NestedEqualTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>cookie</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>header</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>parameter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>greaterEqual</name>
+<tagclass>org.apache.struts.taglib.nested.logic.NestedGreaterEqualTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>cookie</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>header</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>parameter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>greaterThan</name>
+<tagclass>org.apache.struts.taglib.nested.logic.NestedGreaterThanTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>cookie</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>header</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>parameter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>iterate</name>
+<tagclass>org.apache.struts.taglib.nested.logic.NestedIterateTag</tagclass>
+<teiclass>org.apache.struts.taglib.nested.logic.NestedIterateTei</teiclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>collection</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>id</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>length</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>offset</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>type</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>lessEqual</name>
+<tagclass>org.apache.struts.taglib.nested.logic.NestedLessEqualTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>cookie</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>header</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>parameter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>lessThan</name>
+<tagclass>org.apache.struts.taglib.nested.logic.NestedLessThanTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>cookie</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>header</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>parameter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>match</name>
+<tagclass>org.apache.struts.taglib.nested.logic.NestedMatchTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>cookie</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>header</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>location</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>parameter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>messagesNotPresent</name>
+<tagclass>org.apache.struts.taglib.nested.logic.NestedMessagesNotPresentTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>message</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>messagesPresent</name>
+<tagclass>org.apache.struts.taglib.nested.logic.NestedMessagesPresentTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>message</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>notEmpty</name>
+<tagclass>org.apache.struts.taglib.nested.logic.NestedNotEmptyTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>notEqual</name>
+<tagclass>org.apache.struts.taglib.nested.logic.NestedNotEqualTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>cookie</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>header</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>parameter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>notMatch</name>
+<tagclass>org.apache.struts.taglib.nested.logic.NestedNotMatchTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>cookie</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>header</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>location</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>parameter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>notPresent</name>
+<tagclass>org.apache.struts.taglib.nested.logic.NestedNotPresentTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>cookie</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>header</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>parameter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>role</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>user</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>present</name>
+<tagclass>org.apache.struts.taglib.nested.logic.NestedPresentTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>cookie</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>header</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>parameter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>role</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>user</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+</taglib>
+
+
+

Added: project_src/website/web/WEB-INF/taglib/struts-template.tld
===================================================================
--- project_src/website/web/WEB-INF/taglib/struts-template.tld	2004-12-14 18:42:22 UTC (rev 247)
+++ project_src/website/web/WEB-INF/taglib/struts-template.tld	2004-12-27 13:04:03 UTC (rev 248)
@@ -0,0 +1,73 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+
+
+
+
+
+
+<!DOCTYPE taglib PUBLIC "-//Sun Microsystems, Inc.//DTD JSP Tag Library 1.1//EN" "http://java.sun.com/j2ee/dtds/web-jsptaglibrary_1_1.dtd">
+<taglib>
+<tlibversion>1.0</tlibversion>
+<jspversion>1.1</jspversion>
+<shortname>template</shortname>
+<uri>http://jakarta.apache.org/struts/tags-template</uri>
+<tag>
+<name>insert</name>
+<tagclass>org.apache.struts.taglib.template.InsertTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>template</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>put</name>
+<tagclass>org.apache.struts.taglib.template.PutTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>name</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>role</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>content</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>direct</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>get</name>
+<tagclass>org.apache.struts.taglib.template.GetTag</tagclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>flush</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>role</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+</taglib>
+
+
+

Added: project_src/website/web/WEB-INF/taglib/struts-tiles.tld
===================================================================
--- project_src/website/web/WEB-INF/taglib/struts-tiles.tld	2004-12-14 18:42:22 UTC (rev 247)
+++ project_src/website/web/WEB-INF/taglib/struts-tiles.tld	2004-12-27 13:04:03 UTC (rev 248)
@@ -0,0 +1,344 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+
+
+
+
+
+
+<!DOCTYPE taglib PUBLIC "-//Sun Microsystems, Inc.//DTD JSP Tag Library 1.1//EN" "http://java.sun.com/j2ee/dtds/web-jsptaglibrary_1_1.dtd">
+<taglib>
+<tlibversion>1.0</tlibversion>
+<jspversion>1.1</jspversion>
+<shortname>tiles</shortname>
+<uri>http://jakarta.apache.org/struts/tags-tiles</uri>
+<tag>
+<name>insert</name>
+<tagclass>org.apache.struts.taglib.tiles.InsertTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>template</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>component</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>page</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>definition</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>attribute</name>
+<required>false</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>beanName</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>beanProperty</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>beanScope</name>
+<required>false</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>flush</name>
+<required>false</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>ignore</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>role</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>controllerUrl</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>controllerClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>definition</name>
+<tagclass>org.apache.struts.taglib.tiles.DefinitionTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>id</name>
+<required>true</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>template</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>page</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>role</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>extends</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>put</name>
+<tagclass>org.apache.struts.taglib.tiles.PutTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>content</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>direct</name>
+<required>false</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>type</name>
+<required>false</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>beanName</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>beanProperty</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>beanScope</name>
+<required>false</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>role</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>putList</name>
+<tagclass>org.apache.struts.taglib.tiles.PutListTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>name</name>
+<required>true</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>add</name>
+<tagclass>org.apache.struts.taglib.tiles.AddTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>content</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>direct</name>
+<required>false</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>type</name>
+<required>false</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>beanName</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>beanProperty</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>beanScope</name>
+<required>false</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>role</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>get</name>
+<tagclass>org.apache.struts.taglib.tiles.GetTag</tagclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>name</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ignore</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>flush</name>
+<required>false</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>role</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>getAsString</name>
+<tagclass>org.apache.struts.taglib.tiles.GetAttributeTag</tagclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>name</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ignore</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>role</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>useAttribute</name>
+<tagclass>org.apache.struts.taglib.tiles.UseAttributeTag</tagclass>
+<teiclass>org.apache.struts.taglib.tiles.UseAttributeTei</teiclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>id</name>
+<required>false</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>classname</name>
+<required>false</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ignore</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>importAttribute</name>
+<tagclass>org.apache.struts.taglib.tiles.ImportAttributeTag</tagclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>ignore</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>initComponentDefinitions</name>
+<tagclass>org.apache.struts.taglib.tiles.InitDefinitionsTag</tagclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>file</name>
+<required>true</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>classname</name>
+<required>false</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+</tag>
+</taglib>
+
+
+

Added: project_src/website/web/WEB-INF/tiles-defs.xml
===================================================================
--- project_src/website/web/WEB-INF/tiles-defs.xml	2004-12-14 18:42:22 UTC (rev 247)
+++ project_src/website/web/WEB-INF/tiles-defs.xml	2004-12-27 13:04:03 UTC (rev 248)
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE tiles-definitions PUBLIC "-//Apache Software Foundation//DTD Tiles Configuration 1.1//EN" "http://jakarta.apache.org/struts/dtds/tiles-config_1_1.dtd">
+<tiles-definitions>
+  <definition name="definition" />
+</tiles-definitions>

Added: project_src/website/web/WEB-INF/validation.xml
===================================================================
--- project_src/website/web/WEB-INF/validation.xml	2004-12-14 18:42:22 UTC (rev 247)
+++ project_src/website/web/WEB-INF/validation.xml	2004-12-27 13:04:03 UTC (rev 248)
@@ -0,0 +1,3 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE form-validation PUBLIC "-//Apache Software Foundation//DTD Commons Validator Rules Configuration 1.0//EN" "http://jakarta.apache.org/commons/dtds/validator_1_0.dtd">
+<form-validation />

Added: project_src/website/web/WEB-INF/validator-rules.xml
===================================================================
--- project_src/website/web/WEB-INF/validator-rules.xml	2004-12-14 18:42:22 UTC (rev 247)
+++ project_src/website/web/WEB-INF/validator-rules.xml	2004-12-27 13:04:03 UTC (rev 248)
@@ -0,0 +1,1044 @@
+<!DOCTYPE form-validation PUBLIC
+          "-//Apache Software Foundation//DTD Commons Validator Rules Configuration 1.0//EN"
+          "http://jakarta.apache.org/commons/dtds/validator_1_0.dtd">
+<!--
+
+   This file contains the default Struts Validator pluggable validator
+   definitions.  It should be placed somewhere under /WEB-INF and
+   referenced in the struts-config.xml under the plug-in element
+   for the ValidatorPlugIn.
+
+      <plug-in className="org.apache.struts.validator.ValidatorPlugIn">
+        <set-property property="pathnames" value="/WEB-INF/validator-rules.xml,
+                                                  /WEB-INF/validation.xml"/>
+      </plug-in>
+
+   These are the default error messages associated with
+   each validator defined in this file.  They should be
+   added to your projects ApplicationResources.properties
+   file or you can associate new ones by modifying the
+   pluggable validators msg attributes in this file.
+
+   # Struts Validator Error Messages
+   errors.required={0} is required.
+   errors.minlength={0} can not be less than {1} characters.
+   errors.maxlength={0} can not be greater than {1} characters.
+   errors.invalid={0} is invalid.
+
+   errors.byte={0} must be a byte.
+   errors.short={0} must be a short.
+   errors.integer={0} must be an integer.
+   errors.long={0} must be a long.
+   errors.float={0} must be a float.
+   errors.double={0} must be a double.
+
+   errors.date={0} is not a date.
+   errors.range={0} is not in the range {1} through {2}.
+   errors.creditcard={0} is an invalid credit card number.
+   errors.email={0} is an invalid e-mail address.
+
+-->
+
+<form-validation>
+
+   <global>
+
+      <validator name="required"
+            classname="org.apache.struts.validator.FieldChecks"
+               method="validateRequired"
+         methodParams="java.lang.Object,
+                       org.apache.commons.validator.ValidatorAction,
+                       org.apache.commons.validator.Field,
+                       org.apache.struts.action.ActionErrors,
+                       javax.servlet.http.HttpServletRequest"
+                  msg="errors.required">
+
+         <javascript><![CDATA[
+            function validateRequired(form) {
+                var isValid = true;
+                var focusField = null;
+                var i = 0;
+                var fields = new Array();
+                oRequired = new required();
+                for (x in oRequired) {
+                	var field = form[oRequired[x][0]];
+                	
+                    if (field.type == 'text' ||
+                        field.type == 'textarea' ||
+                        field.type == 'file' ||
+                        field.type == 'select-one' ||
+                        field.type == 'radio' ||
+                        field.type == 'password') {
+                        
+                        var value = '';
+						// get field's value
+						if (field.type == "select-one") {
+							var si = field.selectedIndex;
+							if (si >= 0) {
+								value = field.options[si].value;
+							}
+						} else {
+							value = field.value;
+						}
+                        
+                        if (trim(value).length == 0) {
+                        
+	                        if (i == 0) {
+	                            focusField = field;
+	                        }
+	                        fields[i++] = oRequired[x][1];
+	                        isValid = false;
+                        }
+                    }
+                }
+                if (fields.length > 0) {
+                   focusField.focus();
+                   alert(fields.join('\n'));
+                }
+                return isValid;
+            }
+            
+            // Trim whitespace from left and right sides of s.
+            function trim(s) {
+                return s.replace( /^\s*/, "" ).replace( /\s*$/, "" );
+            }
+            
+            ]]>
+         </javascript>
+
+      </validator>
+
+      <validator name="requiredif"
+                 classname="org.apache.struts.validator.FieldChecks"
+                 method="validateRequiredIf"
+                 methodParams="java.lang.Object,
+                               org.apache.commons.validator.ValidatorAction,
+                               org.apache.commons.validator.Field,
+                               org.apache.struts.action.ActionErrors,
+                               org.apache.commons.validator.Validator,
+                               javax.servlet.http.HttpServletRequest"
+                 msg="errors.required">
+      </validator>
+
+      <validator name="minlength"
+            classname="org.apache.struts.validator.FieldChecks"
+               method="validateMinLength"
+         methodParams="java.lang.Object,
+                       org.apache.commons.validator.ValidatorAction,
+                       org.apache.commons.validator.Field,
+                       org.apache.struts.action.ActionErrors,
+                       javax.servlet.http.HttpServletRequest"
+              depends=""
+                  msg="errors.minlength">
+
+         <javascript><![CDATA[
+            function validateMinLength(form) {
+                var isValid = true;
+                var focusField = null;
+                var i = 0;
+                var fields = new Array();
+                oMinLength = new minlength();
+                for (x in oMinLength) {
+                    var field = form[oMinLength[x][0]];
+                    
+                    if (field.type == 'text' ||
+                        field.type == 'textarea') {
+                        
+                        var iMin = parseInt(oMinLength[x][2]("minlength"));
+                        if ((trim(field.value).length > 0) && (field.value.length < iMin)) {
+                            if (i == 0) {
+                                focusField = field;
+                            }
+                            fields[i++] = oMinLength[x][1];
+                            isValid = false;
+                        }
+                    }
+                }
+                if (fields.length > 0) {
+                   focusField.focus();
+                   alert(fields.join('\n'));
+                }
+                return isValid;
+            }]]>
+         </javascript>
+
+      </validator>
+
+
+      <validator name="maxlength"
+            classname="org.apache.struts.validator.FieldChecks"
+               method="validateMaxLength"
+         methodParams="java.lang.Object,
+                       org.apache.commons.validator.ValidatorAction,
+                       org.apache.commons.validator.Field,
+                       org.apache.struts.action.ActionErrors,
+                       javax.servlet.http.HttpServletRequest"
+              depends=""
+                  msg="errors.maxlength">
+
+         <javascript><![CDATA[
+            function validateMaxLength(form) {
+                var isValid = true;
+                var focusField = null;
+                var i = 0;
+                var fields = new Array();
+                oMaxLength = new maxlength();
+                for (x in oMaxLength) {
+                    var field = form[oMaxLength[x][0]];
+                    
+                    if (field.type == 'text' ||
+                        field.type == 'textarea') {
+                        
+                        var iMax = parseInt(oMaxLength[x][2]("maxlength"));
+                        if (field.value.length > iMax) {
+                            if (i == 0) {
+                                focusField = field;
+                            }
+                            fields[i++] = oMaxLength[x][1];
+                            isValid = false;
+                        }
+                    }
+                }
+                if (fields.length > 0) {
+                   focusField.focus();
+                   alert(fields.join('\n'));
+                }
+                return isValid;
+            }]]>
+         </javascript>
+
+      </validator>
+
+
+      <validator name="mask"
+            classname="org.apache.struts.validator.FieldChecks"
+               method="validateMask"
+         methodParams="java.lang.Object,
+                       org.apache.commons.validator.ValidatorAction,
+                       org.apache.commons.validator.Field,
+                       org.apache.struts.action.ActionErrors,
+                       javax.servlet.http.HttpServletRequest"
+              depends=""
+                  msg="errors.invalid">
+
+         <javascript><![CDATA[
+            function validateMask(form) {
+                var isValid = true;
+                var focusField = null;
+                var i = 0;
+                var fields = new Array();
+                oMasked = new mask();
+                for (x in oMasked) {
+                    var field = form[oMasked[x][0]];
+                    
+                    if ((field.type == 'text' || 
+                         field.type == 'textarea') && 
+                         (field.value.length > 0)) {
+                        
+                        if (!matchPattern(field.value, oMasked[x][2]("mask"))) {
+                            if (i == 0) {
+                                focusField = field;
+                            }
+                            fields[i++] = oMasked[x][1];
+                            isValid = false;
+                        }
+                    }
+                }
+                
+                if (fields.length > 0) {
+                   focusField.focus();
+                   alert(fields.join('\n'));
+                }
+                return isValid;
+            }
+
+            function matchPattern(value, mask) {
+               return mask.exec(value);
+            }]]>
+         </javascript>
+
+      </validator>
+
+
+      <validator name="byte"
+            classname="org.apache.struts.validator.FieldChecks"
+               method="validateByte"
+         methodParams="java.lang.Object,
+                       org.apache.commons.validator.ValidatorAction,
+                       org.apache.commons.validator.Field,
+                       org.apache.struts.action.ActionErrors,
+                       javax.servlet.http.HttpServletRequest"
+              depends=""
+                  msg="errors.byte"
+       jsFunctionName="ByteValidations">
+
+         <javascript><![CDATA[
+            function validateByte(form) {
+                var bValid = true;
+                var focusField = null;
+                var i = 0;
+                var fields = new Array();
+                oByte = new ByteValidations();
+                for (x in oByte) {
+                	var field = form[oByte[x][0]];
+                	
+                    if (field.type == 'text' ||
+                        field.type == 'textarea' ||
+                        field.type == 'select-one' ||
+						field.type == 'radio') {
+
+						var value = '';
+						// get field's value
+						if (field.type == "select-one") {
+							var si = field.selectedIndex;
+							if (si >= 0) {
+								value = field.options[si].value;
+							}
+						} else {
+							value = field.value;
+						}
+                        
+                        if (value.length > 0) {
+                            if (!isAllDigits(value)) {
+                                bValid = false;
+                                if (i == 0) {
+                                    focusField = field;
+                                }
+                                fields[i++] = oByte[x][1];
+
+                            } else {
+
+	                            var iValue = parseInt(value);
+	                            if (isNaN(iValue) || !(iValue >= -128 && iValue <= 127)) {
+	                                if (i == 0) {
+	                                    focusField = field;
+	                                }
+	                                fields[i++] = oByte[x][1];
+	                                bValid = false;
+	                            }
+                            }
+						}
+						
+                    }
+                }
+                if (fields.length > 0) {
+                   focusField.focus();
+                   alert(fields.join('\n'));
+                }
+                return bValid;
+            }]]>
+         </javascript>
+
+      </validator>
+
+
+      <validator name="short"
+            classname="org.apache.struts.validator.FieldChecks"
+               method="validateShort"
+         methodParams="java.lang.Object,
+                       org.apache.commons.validator.ValidatorAction,
+                       org.apache.commons.validator.Field,
+                       org.apache.struts.action.ActionErrors,
+                       javax.servlet.http.HttpServletRequest"
+              depends=""
+                  msg="errors.short"
+       jsFunctionName="ShortValidations">
+
+         <javascript><![CDATA[
+            function validateShort(form) {
+                var bValid = true;
+                var focusField = null;
+                var i = 0;
+                var fields = new Array();
+                oShort = new ShortValidations();
+                for (x in oShort) {
+                	var field = form[oShort[x][0]];
+                	
+                    if (field.type == 'text' ||
+                        field.type == 'textarea' ||
+                        field.type == 'select-one' ||
+                        field.type == 'radio') {
+                        
+                        var value = '';
+						// get field's value
+						if (field.type == "select-one") {
+							var si = field.selectedIndex;
+							if (si >= 0) {
+								value = field.options[si].value;
+							}
+						} else {
+							value = field.value;
+						}
+                        
+                        if (value.length > 0) {
+                            if (!isAllDigits(value)) {
+                                bValid = false;
+                                if (i == 0) {
+                                    focusField = field;
+                                }
+                                fields[i++] = oShort[x][1];
+
+                            } else {
+                        
+	                            var iValue = parseInt(value);
+	                            if (isNaN(iValue) || !(iValue >= -32768 && iValue <= 32767)) {
+	                                if (i == 0) {
+	                                    focusField = field;
+	                                }
+	                                fields[i++] = oShort[x][1];
+	                                bValid = false;
+	                            }
+	                       }
+                       }
+                    }
+                }
+                if (fields.length > 0) {
+                   focusField.focus();
+                   alert(fields.join('\n'));
+                }
+                return bValid;
+            }]]>
+         </javascript>
+
+      </validator>
+
+
+      <validator name="integer"
+            classname="org.apache.struts.validator.FieldChecks"
+               method="validateInteger"
+         methodParams="java.lang.Object,
+                       org.apache.commons.validator.ValidatorAction,
+                       org.apache.commons.validator.Field,
+                       org.apache.struts.action.ActionErrors,
+                       javax.servlet.http.HttpServletRequest"
+              depends=""
+                  msg="errors.integer"
+       jsFunctionName="IntegerValidations">
+
+         <javascript><![CDATA[
+            function validateInteger(form) {
+                var bValid = true;
+                var focusField = null;
+                var i = 0;
+                var fields = new Array();
+                oInteger = new IntegerValidations();
+                for (x in oInteger) {
+                	var field = form[oInteger[x][0]];
+
+                    if (field.type == 'text' ||
+                        field.type == 'textarea' ||
+                        field.type == 'select-one' ||
+                        field.type == 'radio') {
+                        
+                        var value = '';
+						// get field's value
+						if (field.type == "select-one") {
+							var si = field.selectedIndex;
+						    if (si >= 0) {
+							    value = field.options[si].value;
+						    }
+						} else {
+							value = field.value;
+						}
+                        
+                        if (value.length > 0) {
+                        
+                            if (!isAllDigits(value)) {
+                                bValid = false;
+                                if (i == 0) {
+	                                focusField = field;
+	                            }
+						        fields[i++] = oInteger[x][1];
+						        
+                            } else {
+	                            var iValue = parseInt(value);
+	                            if (isNaN(iValue) || !(iValue >= -2147483648 && iValue <= 2147483647)) {
+	                                if (i == 0) {
+	                                    focusField = field;
+	                                }
+	                                fields[i++] = oInteger[x][1];
+	                                bValid = false;
+	                           }
+                           }
+                       }
+                    }
+                }
+                if (fields.length > 0) {
+                   focusField.focus();
+                   alert(fields.join('\n'));
+                }
+                return bValid;
+            }
+
+            function isAllDigits(argvalue) {
+                argvalue = argvalue.toString();
+                var validChars = "0123456789";
+                var startFrom = 0;
+                if (argvalue.substring(0, 2) == "0x") {
+                   validChars = "0123456789abcdefABCDEF";
+                   startFrom = 2;
+                } else if (argvalue.charAt(0) == "0") {
+                   validChars = "01234567";
+                   startFrom = 1;
+                } else if (argvalue.charAt(0) == "-") {
+                    startFrom = 1;
+                }
+                
+                for (var n = startFrom; n < argvalue.length; n++) {
+                    if (validChars.indexOf(argvalue.substring(n, n+1)) == -1) return false;
+                }
+                return true;
+            }]]>
+         </javascript>
+
+      </validator>
+
+
+      <validator name="long"
+            classname="org.apache.struts.validator.FieldChecks"
+               method="validateLong"
+         methodParams="java.lang.Object,
+                       org.apache.commons.validator.ValidatorAction,
+                       org.apache.commons.validator.Field,
+                       org.apache.struts.action.ActionErrors,
+                       javax.servlet.http.HttpServletRequest"
+              depends=""
+                  msg="errors.long"/>
+
+
+      <validator name="float"
+            classname="org.apache.struts.validator.FieldChecks"
+               method="validateFloat"
+         methodParams="java.lang.Object,
+                       org.apache.commons.validator.ValidatorAction,
+                       org.apache.commons.validator.Field,
+                       org.apache.struts.action.ActionErrors,
+                       javax.servlet.http.HttpServletRequest"
+              depends=""
+                  msg="errors.float"
+       jsFunctionName="FloatValidations">
+
+         <javascript><![CDATA[
+            function validateFloat(form) {
+                var bValid = true;
+                var focusField = null;
+                var i = 0;
+                var fields = new Array();
+                oFloat = new FloatValidations();
+                for (x in oFloat) {
+                	var field = form[oFloat[x][0]];
+                	
+                    if (field.type == 'text' ||
+                        field.type == 'textarea' ||
+                        field.type == 'select-one' ||
+                        field.type == 'radio') {
+                        
+                    	var value = '';
+						// get field's value
+						if (field.type == "select-one") {
+							var si = field.selectedIndex;
+							if (si >= 0) {
+							    value = field.options[si].value;
+							}
+						} else {
+							value = field.value;
+						}
+                        
+                        if (value.length > 0) {
+                            // remove '.' before checking digits
+                            var tempArray = value.split('.');
+                            var joinedString= tempArray.join('');
+
+                            if (!isAllDigits(joinedString)) {
+                                bValid = false;
+                                if (i == 0) {
+                                    focusField = field;
+                                }
+                                fields[i++] = oFloat[x][1];
+
+                            } else {
+	                            var iValue = parseFloat(value);
+	                            if (isNaN(iValue)) {
+	                                if (i == 0) {
+	                                    focusField = field;
+	                                }
+	                                fields[i++] = oFloat[x][1];
+	                                bValid = false;
+	                            }
+                            }
+                        }
+                    }
+                }
+                if (fields.length > 0) {
+                   focusField.focus();
+                   alert(fields.join('\n'));
+                }
+                return bValid;
+            }]]>
+         </javascript>
+
+      </validator>
+
+
+      <validator name="double"
+            classname="org.apache.struts.validator.FieldChecks"
+               method="validateDouble"
+         methodParams="java.lang.Object,
+                       org.apache.commons.validator.ValidatorAction,
+                       org.apache.commons.validator.Field,
+                       org.apache.struts.action.ActionErrors,
+                       javax.servlet.http.HttpServletRequest"
+              depends=""
+                  msg="errors.double"/>
+
+
+      <validator name="date"
+            classname="org.apache.struts.validator.FieldChecks"
+               method="validateDate"
+         methodParams="java.lang.Object,
+                       org.apache.commons.validator.ValidatorAction,
+                       org.apache.commons.validator.Field,
+                       org.apache.struts.action.ActionErrors,
+                       javax.servlet.http.HttpServletRequest"
+              depends=""
+                  msg="errors.date"
+       jsFunctionName="DateValidations">
+
+         <javascript><![CDATA[
+            function validateDate(form) {
+               var bValid = true;
+               var focusField = null;
+               var i = 0;
+               var fields = new Array();
+               oDate = new DateValidations();
+               for (x in oDate) {
+                   var value = form[oDate[x][0]].value;
+                   var datePattern = oDate[x][2]("datePatternStrict");
+                   if ((form[oDate[x][0]].type == 'text' ||
+                        form[oDate[x][0]].type == 'textarea') &&
+                       (value.length > 0) &&
+                       (datePattern.length > 0)) {
+                     var MONTH = "MM";
+                     var DAY = "dd";
+                     var YEAR = "yyyy";
+                     var orderMonth = datePattern.indexOf(MONTH);
+                     var orderDay = datePattern.indexOf(DAY);
+                     var orderYear = datePattern.indexOf(YEAR);
+                     if ((orderDay < orderYear && orderDay > orderMonth)) {
+                         var iDelim1 = orderMonth + MONTH.length;
+                         var iDelim2 = orderDay + DAY.length;
+                         var delim1 = datePattern.substring(iDelim1, iDelim1 + 1);
+                         var delim2 = datePattern.substring(iDelim2, iDelim2 + 1);
+                         if (iDelim1 == orderDay && iDelim2 == orderYear) {
+                            dateRegexp = new RegExp("^(\\d{2})(\\d{2})(\\d{4})$");
+                         } else if (iDelim1 == orderDay) {
+                            dateRegexp = new RegExp("^(\\d{2})(\\d{2})[" + delim2 + "](\\d{4})$");
+                         } else if (iDelim2 == orderYear) {
+                            dateRegexp = new RegExp("^(\\d{2})[" + delim1 + "](\\d{2})(\\d{4})$");
+                         } else {
+                            dateRegexp = new RegExp("^(\\d{2})[" + delim1 + "](\\d{2})[" + delim2 + "](\\d{4})$");
+                         }
+                         var matched = dateRegexp.exec(value);
+                         if(matched != null) {
+                            if (!isValidDate(matched[2], matched[1], matched[3])) {
+                               if (i == 0) {
+                                   focusField = form[oDate[x][0]];
+                               }
+                               fields[i++] = oDate[x][1];
+                               bValid =  false;
+                            }
+                         } else {
+                            if (i == 0) {
+                                focusField = form[oDate[x][0]];
+                            }
+                            fields[i++] = oDate[x][1];
+                            bValid =  false;
+                         }
+                     } else if ((orderMonth < orderYear && orderMonth > orderDay)) {
+                         var iDelim1 = orderDay + DAY.length;
+                         var iDelim2 = orderMonth + MONTH.length;
+                         var delim1 = datePattern.substring(iDelim1, iDelim1 + 1);
+                         var delim2 = datePattern.substring(iDelim2, iDelim2 + 1);
+                         if (iDelim1 == orderMonth && iDelim2 == orderYear) {
+                             dateRegexp = new RegExp("^(\\d{2})(\\d{2})(\\d{4})$");
+                         } else if (iDelim1 == orderMonth) {
+                             dateRegexp = new RegExp("^(\\d{2})(\\d{2})[" + delim2 + "](\\d{4})$");
+                         } else if (iDelim2 == orderYear) {
+                             dateRegexp = new RegExp("^(\\d{2})[" + delim1 + "](\\d{2})(\\d{4})$");
+                         } else {
+                             dateRegexp = new RegExp("^(\\d{2})[" + delim1 + "](\\d{2})[" + delim2 + "](\\d{4})$");
+                         }
+                         var matched = dateRegexp.exec(value);
+                         if(matched != null) {
+                             if (!isValidDate(matched[1], matched[2], matched[3])) {
+                                 if (i == 0) {
+                                     focusField = form[oDate[x][0]];
+                                 }
+                                 fields[i++] = oDate[x][1];
+                                 bValid =  false;
+                              }
+                         } else {
+                             if (i == 0) {
+                                 focusField = form[oDate[x][0]];
+                             }
+                             fields[i++] = oDate[x][1];
+                             bValid =  false;
+                         }
+                     } else if ((orderMonth > orderYear && orderMonth < orderDay)) {
+                         var iDelim1 = orderYear + YEAR.length;
+                         var iDelim2 = orderMonth + MONTH.length;
+                         var delim1 = datePattern.substring(iDelim1, iDelim1 + 1);
+                         var delim2 = datePattern.substring(iDelim2, iDelim2 + 1);
+                         if (iDelim1 == orderMonth && iDelim2 == orderDay) {
+                             dateRegexp = new RegExp("^(\\d{4})(\\d{2})(\\d{2})$");
+                         } else if (iDelim1 == orderMonth) {
+                             dateRegexp = new RegExp("^(\\d{4})(\\d{2})[" + delim2 + "](\\d{2})$");
+                         } else if (iDelim2 == orderDay) {
+                             dateRegexp = new RegExp("^(\\d{4})[" + delim1 + "](\\d{2})(\\d{2})$");
+                         } else {
+                             dateRegexp = new RegExp("^(\\d{4})[" + delim1 + "](\\d{2})[" + delim2 + "](\\d{2})$");
+                         }
+                         var matched = dateRegexp.exec(value);
+                         if(matched != null) {
+                             if (!isValidDate(matched[3], matched[2], matched[1])) {
+                                 if (i == 0) {
+                                     focusField = form[oDate[x][0]];
+                                  }
+                                  fields[i++] = oDate[x][1];
+                                  bValid =  false;
+                              }
+                          } else {
+                              if (i == 0) {
+                                  focusField = form[oDate[x][0]];
+                              }
+                              fields[i++] = oDate[x][1];
+                              bValid =  false;
+                          }
+                     } else {
+                         if (i == 0) {
+                             focusField = form[oDate[x][0]];
+                         }
+                         fields[i++] = oDate[x][1];
+                         bValid =  false;
+                     }
+                  }
+               }
+               if (fields.length > 0) {
+                  focusField.focus();
+                  alert(fields.join('\n'));
+               }
+               return bValid;
+            }
+
+	    function isValidDate(day, month, year) {
+	        if (month < 1 || month > 12) {
+                    return false;
+                }
+                if (day < 1 || day > 31) {
+                    return false;
+                }
+                if ((month == 4 || month == 6 || month == 9 || month == 11) &&
+                    (day == 31)) {
+                    return false;
+                }
+                if (month == 2) {
+                    var leap = (year % 4 == 0 &&
+                               (year % 100 != 0 || year % 400 == 0));
+                    if (day>29 || (day == 29 && !leap)) {
+                        return false;
+                    }
+                }
+                return true;
+            }]]>
+         </javascript>
+
+      </validator>
+
+<!-- range is deprecated use intRange instead -->
+      <validator name="range"
+            classname="org.apache.struts.validator.FieldChecks"
+               method="validateIntRange"
+         methodParams="java.lang.Object,
+                       org.apache.commons.validator.ValidatorAction,
+                       org.apache.commons.validator.Field,
+                       org.apache.struts.action.ActionErrors,
+                       javax.servlet.http.HttpServletRequest"
+              depends="integer"
+                  msg="errors.range">
+
+         <javascript><![CDATA[
+            function validateRange(form) {
+                return validateIntRange(form);
+            }]]>
+         </javascript>
+
+      </validator>
+
+      <validator name="intRange"
+            classname="org.apache.struts.validator.FieldChecks"
+               method="validateIntRange"
+         methodParams="java.lang.Object,
+                       org.apache.commons.validator.ValidatorAction,
+                       org.apache.commons.validator.Field,
+                       org.apache.struts.action.ActionErrors,
+                       javax.servlet.http.HttpServletRequest"
+              depends="integer"
+                  msg="errors.range">
+
+         <javascript><![CDATA[
+            function validateIntRange(form) {
+                var isValid = true;
+                var focusField = null;
+                var i = 0;
+                var fields = new Array();
+                oRange = new intRange();
+                for (x in oRange) {
+                    var field = form[oRange[x][0]];
+                    
+                    if ((field.type == 'text' ||
+                         field.type == 'textarea') &&
+                        (field.value.length > 0)) {
+                        
+                        var iMin = parseInt(oRange[x][2]("min"));
+                        var iMax = parseInt(oRange[x][2]("max"));
+                        var iValue = parseInt(field.value);
+                        if (!(iValue >= iMin && iValue <= iMax)) {
+                            if (i == 0) {
+                                focusField = field;
+                            }
+                            fields[i++] = oRange[x][1];
+                            isValid = false;
+                        }
+                    }
+                }
+                if (fields.length > 0) {
+                    focusField.focus();
+                    alert(fields.join('\n'));
+                }
+                return isValid;
+            }]]>
+         </javascript>
+
+      </validator>
+
+      <validator name="floatRange"
+            classname="org.apache.struts.validator.FieldChecks"
+               method="validateFloatRange"
+         methodParams="java.lang.Object,
+                       org.apache.commons.validator.ValidatorAction,
+                       org.apache.commons.validator.Field,
+                       org.apache.struts.action.ActionErrors,
+                       javax.servlet.http.HttpServletRequest"
+              depends="float"
+                  msg="errors.range">
+
+         <javascript><![CDATA[
+            function validateFloatRange(form) {
+                var isValid = true;
+                var focusField = null;
+                var i = 0;
+                var fields = new Array();
+                oRange = new floatRange();
+                for (x in oRange) {
+                    var field = form[oRange[x][0]];
+                    
+                    if ((field.type == 'text' ||
+                         field.type == 'textarea') &&
+                        (field.value.length > 0)) {
+                        
+                        var fMin = parseFloat(oRange[x][2]("min"));
+                        var fMax = parseFloat(oRange[x][2]("max"));
+                        var fValue = parseFloat(field.value);
+                        if (!(fValue >= fMin && fValue <= fMax)) {
+                            if (i == 0) {
+                                focusField = field;
+                            }
+                            fields[i++] = oRange[x][1];
+                            isValid = false;
+                        }
+                    }
+                }
+                if (fields.length > 0) {
+                    focusField.focus();
+                    alert(fields.join('\n'));
+                }
+                return isValid;
+            }]]>
+         </javascript>
+
+      </validator>
+
+      <validator name="creditCard"
+            classname="org.apache.struts.validator.FieldChecks"
+               method="validateCreditCard"
+         methodParams="java.lang.Object,
+                       org.apache.commons.validator.ValidatorAction,
+                       org.apache.commons.validator.Field,
+                       org.apache.struts.action.ActionErrors,
+                       javax.servlet.http.HttpServletRequest"
+              depends=""
+                  msg="errors.creditcard">
+
+         <javascript><![CDATA[
+            function validateCreditCard(form) {
+                var bValid = true;
+                var focusField = null;
+                var i = 0;
+                var fields = new Array();
+                oCreditCard = new creditCard();
+                for (x in oCreditCard) {
+                    if ((form[oCreditCard[x][0]].type == 'text' ||
+                         form[oCreditCard[x][0]].type == 'textarea') &&
+                        (form[oCreditCard[x][0]].value.length > 0)) {
+                        if (!luhnCheck(form[oCreditCard[x][0]].value)) {
+                            if (i == 0) {
+                                focusField = form[oCreditCard[x][0]];
+                            }
+                            fields[i++] = oCreditCard[x][1];
+                            bValid = false;
+                        }
+                    }
+                }
+                if (fields.length > 0) {
+                    focusField.focus();
+                    alert(fields.join('\n'));
+                }
+                return bValid;
+            }
+
+            /**
+             * Reference: http://www.ling.nwu.edu/~sburke/pub/luhn_lib.pl
+             */
+            function luhnCheck(cardNumber) {
+                if (isLuhnNum(cardNumber)) {
+                    var no_digit = cardNumber.length;
+                    var oddoeven = no_digit & 1;
+                    var sum = 0;
+                    for (var count = 0; count < no_digit; count++) {
+                        var digit = parseInt(cardNumber.charAt(count));
+                        if (!((count & 1) ^ oddoeven)) {
+                            digit *= 2;
+                            if (digit > 9) digit -= 9;
+                        };
+                        sum += digit;
+                    };
+                    if (sum == 0) return false;
+                    if (sum % 10 == 0) return true;
+                };
+                return false;
+            }
+
+            function isLuhnNum(argvalue) {
+                argvalue = argvalue.toString();
+                if (argvalue.length == 0) {
+                    return false;
+                }
+                for (var n = 0; n < argvalue.length; n++) {
+                    if ((argvalue.substring(n, n+1) < "0") ||
+                        (argvalue.substring(n,n+1) > "9")) {
+                        return false;
+                    }
+                }
+                return true;
+            }]]>
+         </javascript>
+
+      </validator>
+
+
+      <validator name="email"
+            classname="org.apache.struts.validator.FieldChecks"
+               method="validateEmail"
+         methodParams="java.lang.Object,
+                       org.apache.commons.validator.ValidatorAction,
+                       org.apache.commons.validator.Field,
+                       org.apache.struts.action.ActionErrors,
+                       javax.servlet.http.HttpServletRequest"
+              depends=""
+                  msg="errors.email">
+
+         <javascript><![CDATA[
+            function validateEmail(form) {
+                var bValid = true;
+                var focusField = null;
+                var i = 0;
+                var fields = new Array();
+                oEmail = new email();
+                for (x in oEmail) {
+                    if ((form[oEmail[x][0]].type == 'text' ||
+                         form[oEmail[x][0]].type == 'textarea') &&
+                        (form[oEmail[x][0]].value.length > 0)) {
+                        if (!checkEmail(form[oEmail[x][0]].value)) {
+                            if (i == 0) {
+                                focusField = form[oEmail[x][0]];
+                            }
+                            fields[i++] = oEmail[x][1];
+                            bValid = false;
+                        }
+                    }
+                }
+                if (fields.length > 0) {
+                    focusField.focus();
+                    alert(fields.join('\n'));
+                }
+                return bValid;
+            }
+
+            /**
+             * Reference: Sandeep V. Tamhankar (stamhankar at hotmail.com),
+             * http://javascript.internet.com
+             */
+            function checkEmail(emailStr) {
+               if (emailStr.length == 0) {
+                   return true;
+               }
+               var emailPat=/^(.+)@(.+)$/;
+               var specialChars="\\(\\)<>@,;:\\\\\\\"\\.\\[\\]";
+               var validChars="\[^\\s" + specialChars + "\]";
+               var quotedUser="(\"[^\"]*\")";
+               var ipDomainPat=/^(\d{1,3})[.](\d{1,3})[.](\d{1,3})[.](\d{1,3})$/;
+               var atom=validChars + '+';
+               var word="(" + atom + "|" + quotedUser + ")";
+               var userPat=new RegExp("^" + word + "(\\." + word + ")*$");
+               var domainPat=new RegExp("^" + atom + "(\\." + atom + ")*$");
+               var matchArray=emailStr.match(emailPat);
+               if (matchArray == null) {
+                   return false;
+               }
+               var user=matchArray[1];
+               var domain=matchArray[2];
+               if (user.match(userPat) == null) {
+                   return false;
+               }
+               var IPArray = domain.match(ipDomainPat);
+               if (IPArray != null) {
+                   for (var i = 1; i <= 4; i++) {
+                      if (IPArray[i] > 255) {
+                         return false;
+                      }
+                   }
+                   return true;
+               }
+               var domainArray=domain.match(domainPat);
+               if (domainArray == null) {
+                   return false;
+               }
+               var atomPat=new RegExp(atom,"g");
+               var domArr=domain.match(atomPat);
+               var len=domArr.length;
+               if ((domArr[domArr.length-1].length < 2) ||
+                   (domArr[domArr.length-1].length > 3)) {
+                   return false;
+               }
+               if (len < 2) {
+                   return false;
+               }
+               return true;
+            }]]>
+         </javascript>
+
+      </validator>
+
+   </global>
+
+</form-validation>

Added: project_src/website/web/WEB-INF/web.xml
===================================================================
--- project_src/website/web/WEB-INF/web.xml	2004-12-14 18:42:22 UTC (rev 247)
+++ project_src/website/web/WEB-INF/web.xml	2004-12-27 13:04:03 UTC (rev 248)
@@ -0,0 +1,89 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<web-app xmlns="http://java.sun.com/xml/ns/j2ee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd" version="2.4">
+  <display-name>web</display-name>
+  <jsp-config>
+    <taglib>
+      <taglib-uri>/WEB-INF/struts-bean.tld</taglib-uri>
+      <taglib-location>/WEB-INF/struts-bean.tld</taglib-location>
+    </taglib>
+    <taglib>
+      <taglib-uri>/WEB-INF/struts-html.tld</taglib-uri>
+      <taglib-location>/WEB-INF/struts-html.tld</taglib-location>
+    </taglib>
+    <taglib>
+      <taglib-uri>/WEB-INF/struts-logic.tld</taglib-uri>
+      <taglib-location>/WEB-INF/struts-logic.tld</taglib-location>
+    </taglib>
+    <taglib>
+      <taglib-uri>/WEB-INF/struts-template.tld</taglib-uri>
+      <taglib-location>/WEB-INF/struts-template.tld</taglib-location>
+    </taglib>
+    <taglib>
+      <taglib-uri>/WEB-INF/struts-tiles.tld</taglib-uri>
+      <taglib-location>/WEB-INF/struts-tiles.tld</taglib-location>
+    </taglib>
+    <taglib>
+      <taglib-uri>/WEB-INF/struts-nested.tld</taglib-uri>
+      <taglib-location>/WEB-INF/struts-nested.tld</taglib-location>
+    </taglib>
+  </jsp-config>
+  <servlet>
+    <servlet-name>action</servlet-name>
+    <servlet-class>org.apache.struts.action.ActionServlet</servlet-class>
+    <init-param>
+      <param-name>config</param-name>
+      <param-value>/WEB-INF/struts-config.xml</param-value>
+    </init-param>
+    <init-param>
+      <param-name>debug</param-name>
+      <param-value>2</param-value>
+    </init-param>
+    <init-param>
+      <param-name>application</param-name>
+      <param-value>ApplicationResources</param-value>
+    </init-param>
+    <load-on-startup>2</load-on-startup>
+  </servlet>
+  <servlet-mapping>
+    <servlet-name>action</servlet-name>
+    <url-pattern>*.do</url-pattern>
+  </servlet-mapping>
+  <servlet>
+    <description>Added by JBuilder to compile JSPs with debug info</description>
+    <servlet-name>debugjsp</servlet-name>
+    <servlet-class>org.apache.jasper.servlet.JspServlet</servlet-class>
+    <init-param>
+      <param-name>classdebuginfo</param-name>
+      <param-value>true</param-value>
+    </init-param>
+    <load-on-startup>3</load-on-startup>
+  </servlet>
+  <servlet-mapping>
+    <servlet-name>debugjsp</servlet-name>
+    <url-pattern>*.jsp</url-pattern>
+  </servlet-mapping>
+  <servlet>
+    <servlet-name>ServletRedirector</servlet-name>
+    <servlet-class>org.apache.cactus.server.ServletTestRedirector</servlet-class>
+  </servlet>
+  <servlet>
+    <servlet-name>JspRedirector</servlet-name>
+    <jsp-file>/jspRedirector.jsp</jsp-file>
+  </servlet>
+  <filter>
+    <filter-name>FilterRedirector</filter-name>
+    <filter-class>org.apache.cactus.server.FilterTestRedirector</filter-class>
+  </filter>
+  <servlet-mapping>
+    <servlet-name>ServletRedirector</servlet-name>
+    <url-pattern>/ServletRedirector</url-pattern>
+  </servlet-mapping>
+  <servlet-mapping>
+    <servlet-name>JspRedirector</servlet-name>
+    <url-pattern>/JspRedirector</url-pattern>
+  </servlet-mapping>
+  <filter-mapping>
+    <filter-name>FilterRedirector</filter-name>
+    <url-pattern>/FilterRedirector</url-pattern>
+  </filter-mapping>
+</web-app>

Added: project_src/website/web/basket.jsp
===================================================================
--- project_src/website/web/basket.jsp	2004-12-14 18:42:22 UTC (rev 247)
+++ project_src/website/web/basket.jsp	2004-12-27 13:04:03 UTC (rev 248)
@@ -0,0 +1,75 @@
+<%@ taglib uri="/WEB-INF/taglib/struts-tiles.tld" prefix="tiles"%>
+<%@ taglib uri="/WEB-INF/taglib/struts-logic.tld" prefix="logic"%>
+
+<tiles:insert page="/templates/main.jsp" flush="true">
+
+<tiles:put name="title" value="Top 10" />
+<tiles:put name="top10month_link" value="top10.jsp" />
+
+<tiles:put name="head_login" type="string">
+  <span class="pref"><a href="pref.jsp" class="pref">Meine Daten</a>&nbsp;</span>
+  <span class="pref"><a href="basket.jsp" class="pref">Warenkorb</a>&nbsp;</span>
+  <span class="pref"><a href="logout.jsp" class="pref">Logout</a></span>
+</tiles:put>
+
+<tiles:put name="contentbody" type="string">
+
+
+<!--main list start -->
+
+            <table style="width: 90%; text-align: left;" align="center" border="1" cellpadding="0" cellspacing="0">
+			<thead class="basket_head">
+                <tr>
+                  <th style="width: 10%; text-align: center;">Pos<br>
+                  </th>
+                  <th style="width: 44%; text-align: left;">DVD - Name<br>
+                  </th>
+                  <th style="width: 15%; text-align: center;">Tage<br>
+                  </th>
+                  <th style="width: 15%; text-align: center;">Vorhanden<br>
+                  </th>
+                  <th style="width: 1%;"><br>
+                  </th>
+                  <th style="width: 15%; text-align: center;">Preis<br>
+                  </th>
+                </tr>
+             </thead>
+			<tbody class="basket_item">
+                <tr>
+                  <td><br>
+                  </td>
+                  <td><br>
+                  </td>
+                  <td><br>
+                  </td>
+                  <td><br>
+                  </td>
+                  <td><br>
+                  </td>
+                  <td><br>
+                  </td>
+                </tr>
+                <tr>
+                  <td><br>
+                  </td>
+                  <td><br>
+                  </td>
+                  <td><br>
+                  </td>
+                  <td><br>
+                  </td>
+                  <td><br>
+                  </td>
+                  <td><br>
+                  </td>
+                </tr>
+              </tbody>
+            </table>
+
+
+<!--main list end -->
+  </tiles:put>
+</tiles:insert>
+
+
+

Added: project_src/website/web/details.jsp
===================================================================
--- project_src/website/web/details.jsp	2004-12-14 18:42:22 UTC (rev 247)
+++ project_src/website/web/details.jsp	2004-12-27 13:04:03 UTC (rev 248)
@@ -0,0 +1,78 @@
+<%@ taglib uri="/WEB-INF/taglib/struts-tiles.tld" prefix="tiles"%>
+<%@ taglib uri="/WEB-INF/taglib/struts-logic.tld" prefix="logic"%>
+
+<tiles:insert page="/templates/main.jsp" flush="true">
+
+<tiles:put name="title" value="Top 10" />
+<tiles:put name="top10month_link" value="top10.jsp" />
+
+<tiles:put name="head_login" type="string">
+  <span class="pref"><a href="pref.jsp" class="pref">Meine Daten</a>&nbsp;</span>
+  <span class="pref"><a href="basket.jsp" class="pref">Warenkorb</a></span>
+  <span class="pref"><a href="logout.jsp" class="pref">Logout</a></span>
+</tiles:put>
+
+<tiles:put name="contentbody" type="string">
+
+<!--main list start -->
+
+            <table style="width: 95%;" border="0" cellpadding="0" cellspacing="0" align="center">
+              <tbody>
+                <tr>
+                  <td align="center" width="20%"><img style="width: 156px; height: 180px;" src="" alt="Mainpicture" title="Mainpicture"></td>
+                  <td>
+                  <span class="detail_title">Titel des Films Over </span><br/>
+<span class="detail_genre">Genre1, Genre2</span><br>
+<span class="detail_describ">ganz lang </span>
+und dann drei Punkte . . .<br>
+Vorhanden: 3 DVD's<br>
+                  </td>
+                </tr>
+                <tr>
+                  <td style="width: 100%;" colspan="2"> <span class="detail_hartist">Darsteller</span><br/>
+                    <span class="detail_artist">Max Schmeling</span>
+                  </td>
+                </tr>
+                <tr>
+                  <td style="width: 100%;" colspan="2"> <span class="detail_hdir">Regie </span><br/>
+                    <span class="detail_dir">&nbsp;</span>
+                  </td>
+                </tr>
+                <tr>
+                  <td style="width: 100%;" colspan="2"> <span class="detail_haudio">AudioFormate</span><br/>
+                    <span class="detail_audio">&nbsp;</span>
+                  </td>
+                </tr>
+                <tr>
+                  <td style="width: 100%;" colspan="2"> <span class="detail_hvideo">VideoFormate</span><br/>
+                    <span class="detail_video">&nbsp;</span>
+                  </td>
+                </tr>
+              </tbody>
+            </table>
+            <table border="1" cellpadding="0" cellspacing="0" style="width: 90%;" align="center">
+              <tbody>
+                <tr>
+                  <th colspan="4" class="detail_hpicture" style="text-align:left;">Weitere Bilder </th>
+                </tr>
+                <tr>
+                  <td class="detail_picture">Bild 1</td>
+                  <td class="detail_picture">Bild 2</td>
+                  <td class="detail_picture">Bild 3</td>
+                  <td class="detail_picture">Bild 4</td>
+                </tr>
+              </tbody>
+            </table>
+
+
+
+<!--main list end -->
+
+
+
+
+  </tiles:put>
+</tiles:insert>
+
+
+

Added: project_src/website/web/images/1pxtrans.gif
===================================================================
(Binary files differ)


Property changes on: project_src/website/web/images/1pxtrans.gif
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/website/web/images/border.gif
===================================================================
(Binary files differ)


Property changes on: project_src/website/web/images/border.gif
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/website/web/images/border_bl.gif
===================================================================
(Binary files differ)


Property changes on: project_src/website/web/images/border_bl.gif
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/website/web/images/border_br.gif
===================================================================
(Binary files differ)


Property changes on: project_src/website/web/images/border_br.gif
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/website/web/images/border_r.gif
===================================================================
(Binary files differ)


Property changes on: project_src/website/web/images/border_r.gif
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/website/web/images/border_tr.gif
===================================================================
(Binary files differ)


Property changes on: project_src/website/web/images/border_tr.gif
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/website/web/index.jsp
===================================================================
--- project_src/website/web/index.jsp	2004-12-14 18:42:22 UTC (rev 247)
+++ project_src/website/web/index.jsp	2004-12-27 13:04:03 UTC (rev 248)
@@ -0,0 +1,24 @@
+<%@ taglib uri="/WEB-INF/taglib/struts-tiles.tld" prefix="tiles"%>
+
+<tiles:insert page="/templates/main.jsp" flush="true">
+
+<tiles:put name="title" value="PROfessional VIdeo RENTalStore" />
+<tiles:put name="top10month_link" value="top10.jsp" />
+
+<tiles:put name="contentbody" type="string">
+  Willkommen auf unserer neuen Webseite<br/>
+</tiles:put>
+
+<tiles:put name="head_login" type="string">
+                        <form id="login" action="" method="post" name="LoginForm">
+                        <label class="login_label">Benutzername:</label>
+                        <input class="login" style="font-weight: bold;" name="username" size="13" type="text"/>
+                        <label class="login_label">Password:</label>
+                        <input class="login" name="userpassword" size="14" type="password"/>
+                        <input id="submit_search" type="submit" value="login" />
+                      </form>
+</tiles:put>
+</tiles:insert>
+
+
+

Added: project_src/website/web/style.css
===================================================================
--- project_src/website/web/style.css	2004-12-14 18:42:22 UTC (rev 247)
+++ project_src/website/web/style.css	2004-12-27 13:04:03 UTC (rev 248)
@@ -0,0 +1,155 @@
+.body{
+	background-color: #F9EFD2;
+}
+a:hover, a:active, a:focus, a:link, a:visited  {
+	color: Black;
+	text-decoration: none;
+}
+
+a:link{
+	text-decoration: underline;
+}
+
+.head_menue {
+	font-family: Verdana, Arial, Helvetica, sans-serif;
+	font-size: 12px;
+}
+.copyright {
+	font-family: "Courier New", Courier, monospace;
+	font-size: 12px;
+	font-weight: bold;
+	text-align: center;
+}
+.menue_tbl, .menue_suche{
+	font-size: 12px;
+	background-color: #CCDDCE;
+	margin: 5px;
+	width: 90%;
+
+}
+a.menue_tbl:hover, a.menue_suche:hover{
+
+}
+
+thead.menue_tbl {
+	background-color: #B0CAB1;
+	text-align: center;
+	margin: 5px;
+
+
+}
+
+tbody.menue_tbl{
+background-color: #CCDDCE;
+	font-weight: bolder;
+	margin: 10px;
+}
+
+a:hover.menue_tbl{
+	text-decoration: underline;
+
+}
+
+td.menue_tbl{
+	display: block;
+	height: 10px;
+}
+
+
+
+.head_menue{
+
+}
+
+a.head_menue{
+  	text-decoration: underline;
+}
+a:hover.head_menue{
+
+	text-decoration: none;
+}
+
+
+a.pref, a:visited.pref{
+	text-decoration: underline;
+}
+
+a:hover.pref{
+  text-decoration: none;
+}
+
+input{
+ background-color: #F9EFD2;
+	border-top: #BABABA 2px solid;
+	border-left: #BABABA 2px solid;
+	border-right: #AFAFAF 3px solid;
+	border-bottom: #AFAFAF 3px solid;
+}
+
+#submit_search{
+	background-color: #8CB390;
+	border-top: #558059 2px solid;
+	border-left: #558059 2px solid;
+	border-right: #558059 3px solid;
+	border-bottom: #558059 3px solid;
+
+}
+
+#select_search{
+	background-color: #F9EFD2;
+	border-top: #BABABA 2px solid;
+	border-left: #BABABA 2px solid;
+	border-right: #AFAFAF 3px solid;
+	border-bottom: #AFAFAF 3px solid;
+}
+
+td.prev_page_browse{
+	text-align: left;
+	width: 20%;
+	padding-left: 5px;
+}
+.prev_page_browse, .next_page_browse{
+	font-family: Verdana, Geneva, Arial, Helvetica, sans-serif;
+	font-size: 11px;
+}
+
+.next_page_browse{
+	text-align: right; width: 20%;
+}
+
+td.overview_page_browse{
+	text-align: center;
+}
+.overview_page_browse{
+		font-family: Verdana, Geneva, Arial, Helvetica, sans-serif;
+		font-size: 11px;
+}
+
+a.single_page_browse{
+	text-decoration: underline;
+}
+a:hover.single_page_browse{
+	text-decoration: line-through;
+}
+
+
+
+.list_title{
+
+}
+
+.list_summary{
+
+}
+
+.detail_title, .detail_artist, .detail_hartist, .detail_describ,
+.detail_genre, .detail_hartist, .detail_artist, .detail_hdir, .detail_dir,
+.detail_haudio, .detail_audio, .detail_hvideo, .detail_video, .detail_hpicture, .detail_picture  {
+
+}
+
+
+.basket_head, .basket_item{
+
+
+}

Added: project_src/website/web/templates/main.jsp
===================================================================
--- project_src/website/web/templates/main.jsp	2004-12-14 18:42:22 UTC (rev 247)
+++ project_src/website/web/templates/main.jsp	2004-12-27 13:04:03 UTC (rev 248)
@@ -0,0 +1,213 @@
+<%@ taglib uri="/WEB-INF/taglib/struts-tiles.tld" prefix="tiles"%>
+<%@ taglib uri="/WEB-INF/taglib/struts-html.tld" prefix="html" %>
+<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
+<html>
+<head>
+  <title><tiles:getAsString name="title"/></title>
+  <html:base/>
+  <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
+  <link rel="stylesheet" type="text/css" href="<html:rewrite page='/style.css'/>" title="externe Styles">
+</head>
+
+<body>
+<table align="center" border="0" cellpadding="0" cellspacing="0" width="100%">
+  <tbody>
+    <tr>
+      <td width="10%">&nbsp;</td>
+      <td>&nbsp;</td>
+      <td width="10%">&nbsp;</td>
+    </tr>
+    <tr>
+      <td>&nbsp;</td>
+      <td>
+      <table align="center" bgcolor="#c2d9c1" border="0" cellpadding="0" cellspacing="0" width="100%">
+        <tbody>
+          <tr>
+            <td colspan="7" bgcolor="#000000"><img src="images/1pxtrans.gif" alt=""></td>
+            <td style="background-image: url(images/border_r.gif);"><img src="images/1pxtrans.gif" height="1" width="3" alt=""></td>
+          </tr>
+          <tr>
+            <td bgcolor="#000000" width="1"><img src="images/1pxtrans.gif" alt=""></td>
+            <td colspan="5" height="70">Logo</td>
+            <td bgcolor="#000000" width="1"><img src="images/1pxtrans.gif" alt=""></td>
+            <td style="background-image: url(images/border_r.gif);"><img src="images/1pxtrans.gif" width="3" alt=""></td>
+          </tr>
+          <tr>
+            <td colspan="7" bgcolor="#000000"><img src="images/1pxtrans.gif" alt=""></td>
+            <td style="background-image: url(images/border_r.gif);"><img src="images/1pxtrans.gif" height="1" width="3" alt=""></td>
+          </tr>
+          <tr>
+            <td bgcolor="#000000" width="1"><img src="images/1pxtrans.gif" alt=""></td>
+            <td colspan="5" height="20" valign="middle">
+            <table border="0" cellpadding="0" cellspacing="0" width="100%">
+              <tbody>
+                <tr>
+                  <td width="53%">
+                    <!--head start-->
+                    <div align="left">
+                      <tiles:insert attribute='head_login' />
+                    </div>
+                  </td>
+                  <td width="50%">
+                    <div class="head_menue" align="right">
+                     	<a href="index.jsp" class="head_menue">&Uuml;bersicht</a>&nbsp;|&nbsp;<a href="index.jsp" class="head_menue">Impressum</a>&nbsp;|&nbsp;<a href="index.jsp" class="head_menue">Hilfe</a>&nbsp;
+                    </div>
+
+                    <!--head end-->
+                  </td>
+ </tr>
+              </tbody>
+            </table>
+            </td>
+            <td bgcolor="#000000" width="1"><img src="images/1pxtrans.gif" alt=""></td>
+            <td style="background-image: url(images/border_r.gif);"><img src="images/1pxtrans.gif" width="3" alt=""></td>
+          </tr>
+          <tr>
+            <td colspan="7" bgcolor="#000000"><img src="images/1pxtrans.gif" alt=""></td>
+            <td style="background-image: url(images/border_r.gif);"><img src="images/1pxtrans.gif" height="1" width="3" alt=""></td>
+          </tr>
+          <tr>
+            <td colspan="7" bgcolor="#f9efd2" height="2"><img src="images/1pxtrans.gif" alt=""></td>
+            <td bgcolor="#f9efd2"><img src="images/1pxtrans.gif" height="1" width="3" alt=""></td>
+          </tr>
+          <tr>
+            <td colspan="3" bgcolor="#000000"><img src="images/1pxtrans.gif" alt=""></td>
+            <td colspan="1" bgcolor="#f9efd2" width="2"><img src="images/1pxtrans.gif" alt=""></td>
+            <td colspan="3" bgcolor="#000000"><img src="images/1pxtrans.gif" alt=""></td>
+            <td style="background-image: url(images/border_r.gif);"><img src="images/1pxtrans.gif" height="1" width="3" alt=""></td>
+          </tr>
+          <tr>
+            <td bgcolor="#000000" width="1"><img src="images/1pxtrans.gif" alt=""></td>
+            <td valign="top">
+<!--menue start-->
+            <table class="menue_tbl" border="0" cellpadding="0" cellspacing="0">
+              <thead class="menue_tbl"> <tr>
+                <th>Aktuelles</th>
+              </tr>
+              </thead> <tbody class="menue_tbl">
+                <tr>
+                  <td class="menue_tbl"><a href="#" class="menue_tbl">Neuheiten</a></td>
+                </tr>
+                <tr>
+                  <td class="menue_tbl"><a href="<tiles:getAsString name="top10month_link"/>" class="menue_tbl">Top 10 Monat</td>
+                </tr>
+                <tr>
+                  <td class="menue_tbl"><a href="#" class="menue_tbl">Top 100 Jahr</a></td>
+                </tr>
+                <tr>
+                  <td class="menue_tbl"><a href="#" class="menue_tbl">Vorschau</a></td>
+                </tr>
+              </tbody>
+            </table>
+            <br>
+            <table class="menue_suche" border="0" cellpadding="0" cellspacing="0">
+              <thead class="menue_tbl"> <tr>
+                <th colspan="2">Suche</th>
+              </tr>
+              </thead> <tbody>
+                <tr>
+                	<td colspan="2">
+                  		<form id="search" action="" method="post" name="SearchForm">
+	                  	<input name="searchfor" size="16" type="text">
+    	            </td>
+    	        </tr>
+    	        <tr>
+					<td>
+        	            <select name="selectName" size="1" id="select_search">
+		                    <option value="0">all</option>
+		                    <option value="1">Movie</option>
+        		            <option value="2">Artist</option>
+                		    <option value="3">genre</option>
+	                    </select>
+                    </td>
+                    <td>
+    	                <input value="Suche" id="submit_search" type="submit">
+    	                </form>
+                  </td>
+                </tr>
+              </tbody>
+            </table>
+            <br>
+            <table class="menue_tbl" border="0" cellpadding="0" cellspacing="0">
+              <thead class="menue_tbl"> <tr>
+                <th>Genre</th>
+              </tr>
+              </thead> <tbody  class="menue_tbl">
+                <tr>
+                  <td class="menue_tbl"><a href="#" class="menue_tbl"> Action </a></td>
+                </tr>
+                <tr>
+                  <td class="menue_tbl"><a href="#" class="menue_tbl"> Drama </a></td>
+                </tr>
+                <tr>
+                  <td class="menue_tbl"><a href="#" class="menue_tbl"> Comedy </a></td>
+                </tr>
+                <tr>
+                  <td class="menue_tbl"><a href="#" class="menue_tbl"> Thriller </a></td>
+                </tr>
+              </tbody>
+            </table>
+
+
+<!--menue end--> </td>
+            <td bgcolor="#000000" width="1"><img src="images/1pxtrans.gif" alt=""></td>
+            <td bgcolor="#f9efd2" width="3"><img src="images/1pxtrans.gif" alt=""></td>
+            <td bgcolor="#000000" width="1"><img src="images/1pxtrans.gif" alt=""></td>
+            <td valign="top" width="85%" style="padding-top:20px; padding-right:1px; padding-left: 1px;">
+<!--main start-->
+<tiles:insert attribute='contentbody' />
+
+<!--main end--> </td>
+            <td bgcolor="#000000" width="1"><img src="images/1pxtrans.gif" alt=""></td>
+            <td style="background-image: url(images/border_r.gif);"><img src="images/1pxtrans.gif" width="3" alt=""></td>
+          </tr>
+          <tr>
+            <td colspan="3" bgcolor="#000000"><img src="images/1pxtrans.gif" alt=""></td>
+            <td colspan="1" bgcolor="#f9efd2" width="2"><img src="images/1pxtrans.gif" alt=""></td>
+            <td colspan="3" bgcolor="#000000"><img src="images/1pxtrans.gif" alt=""></td>
+            <td style="background-image: url(images/border_r.gif);"><img src="images/1pxtrans.gif" height="1" width="3" alt=""></td>
+          </tr>
+          <tr>
+            <td colspan="7" bgcolor="#f9efd2" height="2"><img src="images/1pxtrans.gif" alt=""></td>
+            <td bgcolor="#f9efd2"><img src="images/1pxtrans.gif" height="1" width="1" alt=""></td>
+          </tr>
+          <tr>
+            <td colspan="7" bgcolor="#000000"><img src="images/1pxtrans.gif" alt=""></td>
+            <td style="background-image: url(images/border_r.gif);"><img src="images/1pxtrans.gif" height="1" width="3" alt=""></td>
+          </tr>
+          <tr>
+            <td bgcolor="#000000" width="1"><img src="images/1pxtrans.gif" alt=""></td>
+            <td colspan="5">
+            <div class="copyright">&copy;
+Remo Griesch,
+Stefan Forstner, Philipp Schneider<br>
+            </div>
+            </td>
+            <td bgcolor="#000000" width="1"><img src="images/1pxtrans.gif" alt=""></td>
+            <td style="background-image: url(images/border_r.gif);"><img src="images/1pxtrans.gif" width="3" alt=""></td>
+          </tr>
+          <tr>
+            <td colspan="7" bgcolor="#000000"><img src="images/1pxtrans.gif" alt=""></td>
+            <td style="background-image: url(images/border_r.gif);"><img src="images/1pxtrans.gif" height="1" width="3" alt=""></td>
+          </tr>
+          <tr>
+            <td colspan="7" style="background-image: url(images/border.gif);"><img src="border_bl.gif" height="7" alt=""></td>
+            <td style="background-image: url(images/border_br.gif);"><img src="images/1pxtrans.gif" height="1" width="3" alt=""></td>
+          </tr>
+        </tbody>
+      </table>
+      </td>
+      <td>&nbsp;</td>
+    </tr>
+    <tr>
+      <td>&nbsp;</td>
+      <td>&nbsp;</td>
+      <td>&nbsp;</td>
+    </tr>
+  </tbody>
+</table>
+
+
+
+</body>
+</html>

Added: project_src/website/web/top10.jsp
===================================================================
--- project_src/website/web/top10.jsp	2004-12-14 18:42:22 UTC (rev 247)
+++ project_src/website/web/top10.jsp	2004-12-27 13:04:03 UTC (rev 248)
@@ -0,0 +1,95 @@
+<%@ taglib uri="/WEB-INF/taglib/struts-tiles.tld" prefix="tiles"%>
+<%@ taglib uri="/WEB-INF/taglib/struts-logic.tld" prefix="logic"%>
+
+<tiles:insert page="/templates/main.jsp" flush="true">
+
+<tiles:put name="title" value="Top 10" />
+<tiles:put name="top10month_link" value="top10.jsp" />
+
+<tiles:put name="head_login" type="string">
+  <span class="pref"><a href="pref.jsp" class="pref">Meine Daten</a>&nbsp;</span>
+  <span class="pref"><a href="basket.jsp" class="pref">Warenkorb</a></span>
+  <span class="pref"><a href="logout.jsp" class="pref">Logout</a></span>
+</tiles:put>
+
+<tiles:put name="contentbody" type="string">
+<!--top browse start -->
+            <table style="width: 95%; text-align: left;" border="0" cellpadding="0" cellspacing="0" align="center">
+              <tbody>
+                <tr>
+                  <td class="prev_page_browse">&nbsp;&nbsp; <a href="">&lt;&lt; zur&uuml;ck &lt;&lt;</a><br>
+													</td>
+                  <td class="overview_page_browse" style="">&nbsp;Seite 1 / 5 <br>
+                  </td>
+                  <td class="next_page_browse">&nbsp;<a href="">&gt;&gt; vor &gt;&gt;</a>&nbsp;&nbsp;<br>
+                  </td>
+                </tr>
+              </tbody>
+            </table>
+<!--top browse end -->
+
+<!--main list start -->
+
+
+<!-- 1 start-->
+<table border="0" cellpadding="0" cellspacing="0" width="100%">
+  <tbody>
+    <tr>
+      <td align="center" width="20%"><img style="width: 75px; height: 75px;" src="" alt="" border="0"></td>
+        <td>
+          <span class="list_title">Titel des Films </span>
+          <span class="list_summary">Hier kommt ein ganz kurzer Text rein<br>
+            ganz lang <br>
+              und dann drei Punkte . . . <a href="details.jsp">&gt;&gt;mehr&lt;&lt;</a> </span></td>
+              <td width="10%"><a href="#">Bestellen</a></td>
+            </tr>
+          </tbody>
+        </table>
+<!-- 1 end-->
+
+<!-- 2 start-->
+<table border="0" cellpadding="0" cellspacing="0" width="100%">
+  <tbody>
+    <tr>
+      <td align="center" width="20%"><img style="width: 75px; height: 75px;" src="" alt="" border="0"></td>
+        <td>
+          <span class="list_title">Titel des Films </span>
+          <span class="list_summary">Hier kommt ein ganz kurzer Text rein<br>
+            ganz lang <br>
+              und dann drei Punkte . . . <a href="details.jsp">&gt;&gt;mehr&lt;&lt;</a> </span></td>
+              <td width="10%"><a href="#">Bestellen</a></td>
+            </tr>
+          </tbody>
+        </table>
+<!--2 end-->
+
+
+<!--main list end -->
+
+<!--bottom browse start -->
+            <table style="width: 95%; text-align: left;" border="0" cellpadding="0" cellspacing="0" align="center">
+              <tbody>
+                <tr>
+                  <td class="prev_page_browse">&nbsp;&nbsp; <a href="">&lt;&lt; zur&uuml;ck &lt;&lt;</a><br>
+													</td>
+                  <td class="overview_page_browse" style="">&nbsp;Seite 1 / 5 <br>
+                  <a href="" class="single_page_browse">1</a>&nbsp;&nbsp;
+                  <a href="" class="single_page_browse">2</a>&nbsp;&nbsp;
+                  <a href="" class="single_page_browse">3</a>&nbsp;&nbsp;
+                  <a href="" class="single_page_browse">4</a>&nbsp;&nbsp;
+                  <a href="" class="single_page_browse">5</a>&nbsp;&nbsp;
+                  </td>
+                  <td class="next_page_browse">&nbsp;<a href="">&gt;&gt; vor &gt;&gt;</a>&nbsp;&nbsp;<br>
+                  </td>
+                </tr>
+              </tbody>
+            </table>
+<!--bottom browse end -->
+
+
+
+  </tiles:put>
+</tiles:insert>
+
+
+

Added: project_src/website/website.jpx
===================================================================
--- project_src/website/website.jpx	2004-12-14 18:42:22 UTC (rev 247)
+++ project_src/website/website.jpx	2004-12-27 13:04:03 UTC (rev 248)
@@ -0,0 +1,135 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--JBuilder XML Project-->
+<project>
+  <property category="generalFormatting" name="baseCodeStyle" value="java/Java Standard.codestyle"/>
+  <property category="generalFormatting2" name="blockIndent" value="4"/>
+  <property category="generalFormatting2" name="continuationIndent" value="8"/>
+  <property category="generalFormatting2" name="overrideBasicFormatting" value="1"/>
+  <property category="javaFormatting" name="alignMultilineAssign" value="1"/>
+  <property category="javaFormatting" name="arrayInitDataOnNewLine" value="0"/>
+  <property category="javaFormatting" name="blankLinesAfterClass" value="2"/>
+  <property category="javaFormatting" name="catchOnNewLine" value="0"/>
+  <property category="javaFormatting" name="elseOnNewLine" value="0"/>
+  <property category="javaFormatting" name="extendsOnNewLine" value="0"/>
+  <property category="javaFormatting" name="finallyOnNewLine" value="0"/>
+  <property category="javaFormatting" name="implementsOnNewLine" value="0"/>
+  <property category="javaFormatting" name="indentCase" value="0"/>
+  <property category="javaFormatting" name="packagePrefixGroups" value="java;BLANK_LINE;javax;BLANK_LINE;(*)"/>
+  <property category="javaFormatting" name="packageThreshold" value="0"/>
+  <property category="javaFormatting" name="preservedBlankLinesInDecl" value="2"/>
+  <property category="javaFormatting" name="spaceBeforeLparen" value="0"/>
+  <property category="javaFormatting" name="whileOnNewLine" value="0"/>
+  <property category="javadoc" name="custom.tags.1" value="todo;a;To Do:"/>
+  <property category="module" name="ProjectConvertedToEnsureModulesHaveSupportedFeatures" value="1"/>
+  <property category="module" name="ProjectConvertedToUseFilesAndDependenciesAsDefaultContent" value="1"/>
+  <property category="module" name="ProjectConvertedToUseProperModuleDefaults" value="1"/>
+  <property category="module" name="last.wizard.module.name" value="web"/>
+  <property category="module" name="projectConvertedFromModuleExtensionsToModuleFileTypes" value="1"/>
+  <property category="runtime" name="DefaultConfiguration" value="-1"/>
+  <property category="runtime.0" name="ConfigurationName" value="index"/>
+  <property category="runtime.0" name="RunnableType" value="com.borland.jbuilder.runtime.ServerRunner"/>
+  <property category="runtime.0" name="jsp.launchuri" value="/web/templates/index.jsp"/>
+  <property category="runtime.0" name="jsprunner.launchuri" value="/web/templates/index.jsp"/>
+  <property category="runtime.0" name="server.name" value="Tomcat 5.0"/>
+  <property category="serverservices" name="disabled.services" value="jdatastore;sqlj"/>
+  <property category="serverservices" name="single.server.name" value="Tomcat 5.0"/>
+  <property category="sys" name="AuthorLabel" value="@author"/>
+  <property category="sys" name="BackupPath" value="bak"/>
+  <property category="sys" name="CheckStable" value="1"/>
+  <property category="sys" name="Company" value=""/>
+  <property category="sys" name="CompanyLabel" value="Company:"/>
+  <property category="sys" name="Copyright" value="Copyright (c) 2004"/>
+  <property category="sys" name="CopyrightLabel" value="Copyright:"/>
+  <property category="sys" name="DefaultPath" value="src"/>
+  <property category="sys" name="Description" value=""/>
+  <property category="sys" name="DescriptionLabel" value="Description:"/>
+  <property category="sys" name="DocPath" value="doc"/>
+  <property category="sys" name="ExcludeClassEnabled" value="0"/>
+  <property category="sys" name="IncludeTestPath" value="1"/>
+  <property category="sys" name="InstanceVisibility" value="2"/>
+  <property category="sys" name="JDK" value="java version 1.4.2_04-b05"/>
+  <property category="sys" name="JvmVersion" value="1.2"/>
+  <property category="sys" name="LastTag" value="0"/>
+  <property category="sys" name="Libraries" value="Servlet;JSTL 1.1;Struts;Cactus Client"/>
+  <property category="sys" name="MakeStable" value="0"/>
+  <property category="sys" name="OutPath" value="classes"/>
+  <property category="sys" name="SourcePath" value="src;test"/>
+  <property category="sys" name="TestPath" value="test"/>
+  <property category="sys" name="Title" value=""/>
+  <property category="sys" name="TitleLabel" value="Title:"/>
+  <property category="sys" name="Version" value="1.0"/>
+  <property category="sys" name="VersionLabel" value="@version"/>
+  <property category="sys" name="WorkingDirectory" value="."/>
+  <property category="team" name="ignorePath.0" value="Tomcat"/>
+  <property category="webModule" name="last.wizard.module.name" value="web"/>
+  <node name="Additional Settings" type="Folder">
+    <property category="sys" name="SettingsFolder" value="1"/>
+  </node>
+  <node name="taglibs" type="Folder"/>
+  <node name="web" type="WebModuleNode">
+    <property category="archiving" name="archiverClass" value="com.borland.jbuilder.enterprise.module.web.WebModuleArchiver"/>
+    <property category="archiving" name="contentRules.1" value="i:jar"/>
+    <property category="archiving" name="contentRules.10" value="i:jsp"/>
+    <property category="archiving" name="contentRules.11" value="i:tld"/>
+    <property category="archiving" name="contentRules.12" value="i:opentools"/>
+    <property category="archiving" name="contentRules.13" value="i:png"/>
+    <property category="archiving" name="contentRules.14" value="i:properties"/>
+    <property category="archiving" name="contentRules.15" value="i:au"/>
+    <property category="archiving" name="contentRules.16" value="i:txt"/>
+    <property category="archiving" name="contentRules.17" value="i:ram"/>
+    <property category="archiving" name="contentRules.18" value="i:css"/>
+    <property category="archiving" name="contentRules.19" value="i:wml"/>
+    <property category="archiving" name="contentRules.2" value="i:cab"/>
+    <property category="archiving" name="contentRules.20" value="i:xml"/>
+    <property category="archiving" name="contentRules.21" value="i:xul"/>
+    <property category="archiving" name="contentRules.22" value="i:xpi"/>
+    <property category="archiving" name="contentRules.23" value="i:xsl"/>
+    <property category="archiving" name="contentRules.3" value="i:rpt"/>
+    <property category="archiving" name="contentRules.4" value="i:gif"/>
+    <property category="archiving" name="contentRules.5" value="i:html"/>
+    <property category="archiving" name="contentRules.6" value="i:class"/>
+    <property category="archiving" name="contentRules.7" value="i:jnlp"/>
+    <property category="archiving" name="contentRules.8" value="i:js"/>
+    <property category="archiving" name="contentRules.9" value="i:jpg"/>
+    <property category="archiving" name="defaultLibraryState" value="3"/>
+    <property category="archiving" name="includeDeps" value="1"/>
+    <property category="archiving" name="libraryStates.1" value="0:Servlet"/>
+    <property category="archiving" name="libraryStates.2" value="0:Tomcat 5.0 Servlet"/>
+    <property category="archiving" name="obfuscator" value="RetroGuard for J2ME"/>
+    <property category="archiving" name="outPathState" value="4"/>
+    <property category="archiving" name="targetPath" value="web.war"/>
+    <property category="archiving" name="usingRules" value="1"/>
+    <property category="kit.struts" name="struts-config.1" value="WEB-INF/struts-config.xml"/>
+    <property category="kit.struts" name="tiles-defs.1" value="1:WEB-INF/tiles-defs.xml"/>
+    <property category="kit.struts" name="validator-defs.1" value="1:WEB-INF/validator-rules.xml"/>
+    <property category="kit.struts" name="validator-defs.2" value="1:WEB-INF/validation.xml"/>
+    <property category="module" name="buildModuleArchiveWithModuleNode" value="0"/>
+    <property category="module" name="buildModuleArchiveWithProject" value="0"/>
+    <property category="module" name="buildModuleExplodedArchiveWithModuleNode" value="1"/>
+    <property category="module" name="buildModuleExplodedArchiveWithProject" value="1"/>
+    <property category="module" name="cleanRules.1" value="I:WEB-INF/classes/**"/>
+    <property category="module" name="cleanRules.2" value="I:WEB-INF/lib/**"/>
+    <property category="module" name="cleanRules.3" value="X:WEB-INF/**/*.ds"/>
+    <property category="module" name="cleanRules.4" value="X:WEB-INF/**/*.wsdd"/>
+    <property category="module" name="cleanRules.5" value="X:WEB-INF/**/cocoon.xconf"/>
+    <property category="module" name="cleanRules.6" value="X:WEB-INF/**/logkit.xconf"/>
+    <property category="module" name="cleanRules.7" value="X:WEB-INF/*.xml"/>
+    <property category="module" name="cleanRules.8" value="X:WEB-INF/*.xmi"/>
+    <property category="module" name="directory" value="web"/>
+    <property category="module" name="extraDefaultDirectoriesToKeepOnClean.1" value=".cvsignore"/>
+    <property category="module" name="lastServer" value="Tomcat 5.0"/>
+    <property category="module" name="nodeJBuilderVersion" value="JBuilder 200"/>
+    <property category="module" name="supported.features.1" value="Servlet 2.4"/>
+    <property category="module" name="supported.features.2" value="JSP 2.0"/>
+    <property category="web" name="context-root" value="web"/>
+    <property category="webModule" name="kit.1" value="struts"/>
+    <property category="webModule" name="kit.2" value="struts/struts_tiles"/>
+    <property category="webModule" name="kit.3" value="struts/struts_validation"/>
+    <property category="webModule" name="kit.4" value="jstl"/>
+    <property category="webModule" name="kitlib.1" value="Struts"/>
+    <property category="webModule" name="kitlib.2" value="Struts"/>
+    <property category="webModule" name="kitlib.3" value="Struts"/>
+    <property category="webModule" name="kitlib.4" value="JSTL 1.1"/>
+    <property category="webModule" name="launch.uri" value="/"/>
+  </node>
+</project>

Added: project_src/website/website.jpx.local
===================================================================
--- project_src/website/website.jpx.local	2004-12-14 18:42:22 UTC (rev 247)
+++ project_src/website/website.jpx.local	2004-12-27 13:04:03 UTC (rev 248)
@@ -0,0 +1,61 @@
+build.menu.1[0]=com.borland.jbuilder.build.ProjectBuilder$ProjectBuildAction;make
+build.menu.2[0]=com.borland.jbuilder.build.ProjectBuilder$ProjectBuildAction;rebuild
+content.layout.xml.[0]=<project-layout><tab_container selected_index="3"><tab node_name="web/index.jsp"/><tab node_name="web/templates/main.jsp"/><tab node_name="web/style.css"/><tab node_name="web/top10.jsp"/></tab_container></project-layout>
+debug.NoTracingClasses.1[0]=23 com.borland.datastore.*1  1 -1
+debug.NoTracingClasses.10[0]=7  javax.*1  1 -1
+debug.NoTracingClasses.11[0]=5  sun.*1  1 -1
+debug.NoTracingClasses.12[0]=23 com.borland.appclient.*1  1 -1
+debug.NoTracingClasses.13[0]=21 com.borland.console.*1  1 -1
+debug.NoTracingClasses.14[0]=17 com.borland.ejb.*1  1 -1
+debug.NoTracingClasses.15[0]=24 com.borland.enterprise.*1  1 -1
+debug.NoTracingClasses.16[0]=18 com.borland.jafa.*1  1 -1
+debug.NoTracingClasses.17[0]=17 com.borland.jss.*1  1 -1
+debug.NoTracingClasses.18[0]=24 com.borland.management.*1  1 -1
+debug.NoTracingClasses.19[0]=23 com.borland.primetime.*1  1 -1
+debug.NoTracingClasses.2[0]=21 com.borland.dbswing.*1  1 -1
+debug.NoTracingClasses.20[0]=22 com.borland.security.*1  1 -1
+debug.NoTracingClasses.21[0]=18 com.borland.util.*1  1 -1
+debug.NoTracingClasses.22[0]=17 com.borland.xml.*1  1 -1
+debug.NoTracingClasses.23[0]=13 com.inprise.*1  1 -1
+debug.NoTracingClasses.24[0]=15 com.visigenic.*1  1 -1
+debug.NoTracingClasses.25[0]=9  org.omg.*1  1 -1
+debug.NoTracingClasses.3[0]=16 com.borland.dx.*1  1 -1
+debug.NoTracingClasses.4[0]=16 com.borland.jb.*1  1 -1
+debug.NoTracingClasses.5[0]=18 com.borland.jbcl.*1  1 -1
+debug.NoTracingClasses.6[0]=30 com.borland.jbuilder.runtime.*1  1 -1
+debug.NoTracingClasses.7[0]=17 com.borland.sql.*1  1 -1
+debug.NoTracingClasses.8[0]=9  com.sun.*1  1 -1
+debug.NoTracingClasses.9[0]=6  java.*1  1 -1
+history.files.active[0]=web/index.jsp,F;1,245
+history.files.open.1[0]=web/style.css,F;44,663
+history.files.open.2[0]=web/details.jsp,F;1,379
+history.files.open.3[0]=web/templates/main.jsp,F;166,8027
+history.files.open.4[0]=web/index.jsp,F;1,245
+history.files.open.5[0]=web/top10.jsp,F;28,2165
+history.files.open.6[0]=web/basket.jsp,F;1,379
+import.optimize.legacyPropertiesRead[0]=1
+sys.Author[0]=
+sys.DefaultPackage[0]=website
+sys.ReopenHistory.1[0]=src/org/apache/jasper/servlet/JspServlet.java
+sys.ReopenHistory.10[0]=web/border_br.gif
+sys.ReopenHistory.11[0]=web/1pxtrans.gif
+sys.ReopenHistory.12[0]=web/border_r.gif
+sys.ReopenHistory.13[0]=web/templates/main.jsp
+sys.ReopenHistory.14[0]=web/templates/index.jsp
+sys.ReopenHistory.15[0]=web/WEB-INF/struts-config.xml
+sys.ReopenHistory.16[0]=web/WEB-INF/struts-tiles.tld
+sys.ReopenHistory.17[0]=web/WEB-INF/struts-template.tld
+sys.ReopenHistory.18[0]=web/WEB-INF/struts-nested.tld
+sys.ReopenHistory.19[0]=web/WEB-INF/struts-html.tld
+sys.ReopenHistory.2[0]=web/templates/menu.jsp
+sys.ReopenHistory.20[0]=web/WEB-INF/struts-logic.tld
+sys.ReopenHistory.21[0]=web/WEB-INF/struts-bean.tld
+sys.ReopenHistory.3[0]=web/templates/head.jsp
+sys.ReopenHistory.4[0]=web/WEB-INF/tiles-defs.xml
+sys.ReopenHistory.5[0]=web/index.jsp
+sys.ReopenHistory.6[0]=web/templates/menu
+sys.ReopenHistory.7[0]=web/border_bl.gif
+sys.ReopenHistory.8[0]=web/border.gif
+sys.ReopenHistory.9[0]=web/border_tr.gif
+team.lastScanned[0]=1104151913567
+wizard.package.package_history.1[0]=website



From pschneider at sheep.berlios.de  Mon Dec 27 14:10:09 2004
From: pschneider at sheep.berlios.de (Philipp Schneider at BerliOS)
Date: Mon, 27 Dec 2004 14:10:09 +0100
Subject: [Provirent-svn-commit] r249 - project_src/website/web/WEB-INF/lib
Message-ID: <200412271310.iBRDA9xV012152@sheep.berlios.de>

Author: pschneider
Date: 2004-12-27 14:10:09 +0100 (Mon, 27 Dec 2004)
New Revision: 249

Added:
   project_src/website/web/WEB-INF/lib/provirent_objects.jar
Log:
- jar mit den unseren Klassen 

Added: project_src/website/web/WEB-INF/lib/provirent_objects.jar
===================================================================
(Binary files differ)


Property changes on: project_src/website/web/WEB-INF/lib/provirent_objects.jar
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream



From pschneider at sheep.berlios.de  Mon Dec 27 18:22:03 2004
From: pschneider at sheep.berlios.de (Philipp Schneider at BerliOS)
Date: Mon, 27 Dec 2004 18:22:03 +0100
Subject: [Provirent-svn-commit] r250 - html
Message-ID: <200412271722.iBRHM3G3026896@sheep.berlios.de>

Author: pschneider
Date: 2004-12-27 18:21:59 +0100 (Mon, 27 Dec 2004)
New Revision: 250

Added:
   html/style.css
Modified:
   html/border.gif
   html/border_bl.gif
   html/border_br.gif
   html/border_r.gif
   html/border_tr.gif
   html/test.html
Log:


Modified: html/border.gif
===================================================================
(Binary files differ)

Modified: html/border_bl.gif
===================================================================
(Binary files differ)

Modified: html/border_br.gif
===================================================================
(Binary files differ)

Modified: html/border_r.gif
===================================================================
(Binary files differ)

Modified: html/border_tr.gif
===================================================================
(Binary files differ)

Added: html/style.css
===================================================================
--- html/style.css	2004-12-27 13:10:09 UTC (rev 249)
+++ html/style.css	2004-12-27 17:21:59 UTC (rev 250)
@@ -0,0 +1,146 @@
+.body{
+	background-color: #F9EFD2;
+}
+a:hover, a:active, a:focus, a:link, a:visited  {
+	color: Black;
+	text-decoration: none;
+}
+
+a:link{
+	text-decoration: underline;
+}
+
+.head_menue {
+	font-family: Verdana, Arial, Helvetica, sans-serif;
+	font-size: 12px;
+}
+.copyright {
+	font-family: "Courier New", Courier, monospace;
+	font-size: 12px;
+	font-weight: bold;
+	text-align: center;
+}
+.menue_tbl, .menue_suche{
+	font-size: 12px;
+	background-color: #CCDDCE;
+	margin: 5px;
+	width: 90%;
+	
+}
+a.menue_tbl:hover, a.menue_suche:hover{
+
+}
+
+thead.menue_tbl {
+	background-color: #B0CAB1;
+	text-align: center;
+	margin: 5px;
+
+
+}
+
+tbody.menue_tbl{
+background-color: #CCDDCE;
+	font-weight: bolder;
+	margin: 10px;
+}
+
+a:hover.menue_tbl{
+	text-decoration: underline;
+
+}
+
+td.menue_tbl{
+	display: block;
+	height: 10px;
+}
+
+
+
+.head_menue{
+	
+}
+
+a.head_menue{
+	text-decoration: underline;
+}
+a:hover.head_menue{
+	
+	text-decoration: none;
+}
+
+input{
+ background-color: #F9EFD2;
+	border-top: #BABABA 2px solid;
+	border-left: #BABABA 2px solid;
+	border-right: #AFAFAF 3px solid;
+	border-bottom: #AFAFAF 3px solid;
+}
+
+#submit_search{
+	background-color: #8CB390;
+	border-top: #558059 2px solid;
+	border-left: #558059 2px solid;
+	border-right: #558059 3px solid;
+	border-bottom: #558059 3px solid;
+
+}
+
+#select_search{
+	background-color: #F9EFD2;
+	border-top: #BABABA 2px solid;
+	border-left: #BABABA 2px solid;
+	border-right: #AFAFAF 3px solid;
+	border-bottom: #AFAFAF 3px solid;
+}
+
+td.prev_page_browse{
+	text-align: left; 
+	width: 20%;
+	padding-left: 5px;
+}
+.prev_page_browse, .next_page_browse{
+	font-family: Verdana, Geneva, Arial, Helvetica, sans-serif;
+	font-size: 11px;
+}
+
+.next_page_browse{
+	text-align: right; width: 20%;
+}
+
+td.overview_page_browse{
+	text-align: center;
+}
+.overview_page_browse{
+		font-family: Verdana, Geneva, Arial, Helvetica, sans-serif;
+		font-size: 11px;
+}
+
+a.single_page_browse{
+	text-decoration: underline;
+}
+a:hover.single_page_browse{
+	text-decoration: line-through;
+}
+
+
+
+.list_title{
+	
+}
+
+.list_summary{
+	
+}
+
+.detail_title, .detail_artist, .detail_hartist, .detail_describ,
+.detail_genre, .detail_hartist, .detail_artist, .detail_hdir, .detail_dir,
+.detail_haudio, .detail_audio, .detail_hvideo, .detail_video, .detail_hpicture, .detail_picture  {
+	
+}
+
+
+.basket_head, .basket_item{
+	
+	
+}
\ No newline at end of file

Modified: html/test.html
===================================================================
--- html/test.html	2004-12-27 13:10:09 UTC (rev 249)
+++ html/test.html	2004-12-27 17:21:59 UTC (rev 250)
@@ -1,122 +1,345 @@
-<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
-"http://www.w3.org/TR/html4/loose.dtd">
+<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
 <html>
 <head>
-<title>Unbenanntes Dokument</title>
-<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
-<style type="text/css">
-<!--
-.Stil5 {
-	font-family: Verdana, Arial, Helvetica, sans-serif;
-	font-size: 12px;
-}
-.Stil6 {
-	font-family: "Courier New", Courier, mono;
-	font-size: 12px;
-}
--->
-</style>
+  <title>PROfessional VIdeo RENTalStore</title>
+  <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
+  <link rel="stylesheet" type="text/css" href="style.css" title="externe Styles">
 </head>
-
-<body bgcolor="#F9EFD2">
-<table width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
-  <tr>
-    <td width="10%" >&nbsp;</td>
-    <td>&nbsp;</td>
-    <td width="10%">&nbsp;</td>
-  </tr>
-  <tr>
-    <td>&nbsp;</td>
-    <td>
-
-<table width="100%"  border="0" bgcolor="#C2D9C1"  align="center" cellpadding="0" cellspacing="0">
-<tr>
-    <td colspan="7" bgcolor="#000000"><img src="1pxtrans.gif"></td>
-    <td background=border_r.gif><img src="1pxtrans.gif" width="10px" height="1px"></td>
-</tr>
-<tr>
-	<td width="1px" bgcolor="#000000"><img src="1pxtrans.gif"></td>
-	<td colspan="5" height="70px">Logo</td>
-	<td width="1px" bgcolor="#000000"><img src="1pxtrans.gif"></td>
-	<td background=border_r.gif><img src="1pxtrans.gif" width="10px" ></td>
-</tr>
-<tr>
-    <td colspan="7" bgcolor="#000000"><img src="1pxtrans.gif"></td>
-    <td background=border_r.gif><img src="1pxtrans.gif" width="10px"  height="1px"></td>
-</tr>
-<tr>
-	<td width="1px" bgcolor="#000000"><img src="1pxtrans.gif"></td>
-	<td colspan="5" height="20px" valign="middle"><span class="Stil5">Home | Suche | ?bersicht | Hilfe | Impressum</span></td>
-	<td width="1px" bgcolor="#000000"><img src="1pxtrans.gif"></td>
-	<td background=border_r.gif><img src="1pxtrans.gif" width="10px"></td>
-</tr>
-<tr>
-    <td colspan="7" bgcolor="#000000"><img src="1pxtrans.gif"></td>
-    <td background=border_r.gif><img src="1pxtrans.gif" width="10px" height="1px"></td>
-</tr>
-<tr>
-	<td colspan="7" bgcolor="#F9EFD2" height="2px"><img src="1pxtrans.gif"></td>
-	<td bgcolor="#F9EFD2"><img src="1pxtrans.gif" width="1px" height="1px"></td>
-</tr>
-<tr>
-    <td colspan="3" bgcolor="#000000"><img src="1pxtrans.gif"></td>
-	<td colspan="1" bgcolor="#F9EFD2" width="2px"><img src="1pxtrans.gif"></td>
-	<td colspan="3" bgcolor="#000000"><img src="1pxtrans.gif"></td>
-	<td background=border_r.gif><img src="1pxtrans.gif" width="10px" height="1px"></td>
-</tr>
-<tr>
-    <td width="1px" bgcolor="#000000"><img src="1pxtrans.gif"></td>
-	<td height="300px">Menue</td>
-	<td width="1px" bgcolor="#000000"><img src="1pxtrans.gif"></td>
-	<td bgcolor="#F9EFD2" width="2px"><img src="1pxtrans.gif"></td>
-	<td width="1px" bgcolor="#000000"><img src="1pxtrans.gif"></td>
-	<td width="85%">Main</td>
-	<td width="1px" bgcolor="#000000"><img src="1pxtrans.gif"></td>
-	<td background=border_r.gif><img src="1pxtrans.gif" width="10px"></td>
-</tr>
-<tr>
-    <td colspan="3" bgcolor="#000000"><img src="1pxtrans.gif"></td>
-	<td colspan="1" bgcolor="#F9EFD2" width="2px"><img src="1pxtrans.gif"></td>
-	<td colspan="3" bgcolor="#000000"><img src="1pxtrans.gif"></td>
-	<td background=border_r.gif><img src="1pxtrans.gif" width="10px" height="1px"></td>
-</tr>
-<tr>
-    <td colspan="7" bgcolor="#F9EFD2" height="2px"><img src="1pxtrans.gif"></td>
-    <td bgcolor="#F9EFD2"><img src="1pxtrans.gif" width="1px" height="1px"></td>
-</tr>
-<tr>
-    <td colspan="7" bgcolor="#000000"><img src="1pxtrans.gif"></td>
-    <td background=border_r.gif><img src="1pxtrans.gif" width="10px" height="1px"></td>
-</tr>
-<tr>
-	<td width="1px" bgcolor="#000000"><img src="1pxtrans.gif"></td>
-	<td colspan="5"><div align="center" class="Stil6">Impressum</div></td>
-	<td width="1px" bgcolor="#000000"><img src="1pxtrans.gif"></td>
-	<td background=border_r.gif><img src="1pxtrans.gif" width="10px"></td>
-</tr>
-<tr>
-    <td colspan="7" bgcolor="#000000"><img src="1pxtrans.gif"></td>
-    <td background=border_r.gif><img src="1pxtrans.gif" width="10px" height="1px"></td>
-</tr>
-
-<tr>
-    <td colspan="7" background=border.gif><img src="border_bl.gif" height="10px"></td>
-    <td background=border_br.gif><img src="1pxtrans.gif" width="4px" height="1px"></td>
-</tr>
-
+<body>
+<table align="center" border="0" cellpadding="0" cellspacing="0" width="100%">
+  <tbody>
+    <tr>
+      <td width="10%">&nbsp;</td>
+      <td>&nbsp;</td>
+      <td width="10%">&nbsp;</td>
+    </tr>
+    <tr>
+      <td>&nbsp;</td>
+      <td>
+      <table align="center" bgcolor="#c2d9c1" border="0" cellpadding="0" cellspacing="0" width="100%">
+        <tbody>
+          <tr>
+            <td colspan="7" bgcolor="#000000"><img src="1pxtrans.gif"></td>
+            <td background="border_r.gif"><img src="1pxtrans.gif" height="1" width="3"></td>
+          </tr>
+          <tr>
+            <td bgcolor="#000000" width="1"><img src="1pxtrans.gif"></td>
+            <td colspan="5" height="70">Logo</td>
+            <td bgcolor="#000000" width="1"><img src="1pxtrans.gif"></td>
+            <td background="border_r.gif"><img src="1pxtrans.gif" width="3"></td>
+          </tr>
+          <tr>
+            <td colspan="7" bgcolor="#000000"><img src="1pxtrans.gif"></td>
+            <td background="border_r.gif"><img src="1pxtrans.gif" height="1" width="3"></td>
+          </tr>
+          <tr>
+            <td bgcolor="#000000" width="1"><img src="1pxtrans.gif"></td>
+            <td colspan="5" height="20" valign="middle">
+            <table border="0" cellpadding="0" cellspacing="0" width="100%">
+              <tbody>
+                <tr>
+<!--head start--> 
+				  <td width="53%">
+                  <div align="left">
+                  <form id="login" action="" method="post" name="LoginForm">
+                  <label class="login_label">Benutzername:</label>
+                  <input class="login" style="font-weight: bold;" name="username" size="13" type="text">
+                  <label class="login_label">Password:</label>
+                  <input class="login" name="userpassword" size="14" type="password">
+                  <input id="submit_search" type="submit" value="login" >
+                  </form>
+                  <span class="pref">Meine Daten&nbsp;</span>
+                  </div>
+                  </td>
+                  <td width="50%">
+                  <div class="head_menue" align="right">
+                  	<a href="index.jsp" class="head_menue">&Uuml;bersicht</a>&nbsp;|&nbsp;<a href="index.jsp" class="head_menue">Impressum</a>&nbsp;|&nbsp;<a href="index.jsp" class="head_menue">Hilfe</a>&nbsp;
+                  </div>
+                  </td>
+<!--head end--> </tr>
+              </tbody>
+            </table>
+            </td>
+            <td bgcolor="#000000" width="1"><img src="1pxtrans.gif"></td>
+            <td background="border_r.gif"><img src="1pxtrans.gif" width="3"></td>
+          </tr>
+          <tr>
+            <td colspan="7" bgcolor="#000000"><img src="1pxtrans.gif"></td>
+            <td background="border_r.gif"><img src="1pxtrans.gif" height="1" width="3"></td>
+          </tr>
+          <tr>
+            <td colspan="7" bgcolor="#f9efd2" height="2"><img src="1pxtrans.gif"></td>
+            <td bgcolor="#f9efd2"><img src="1pxtrans.gif" height="1" width="3"></td>
+          </tr>
+          <tr>
+            <td colspan="3" bgcolor="#000000"><img src="1pxtrans.gif"></td>
+            <td colspan="1" bgcolor="#f9efd2" width="2"><img src="1pxtrans.gif"></td>
+            <td colspan="3" bgcolor="#000000"><img src="1pxtrans.gif"></td>
+            <td background="border_r.gif"><img src="1pxtrans.gif" height="1" width="3"></td>
+          </tr>
+          <tr>
+            <td bgcolor="#000000" width="1"><img src="1pxtrans.gif"></td>
+            <td valign="top">
+<!--menue start-->
+            <table class="menue_tbl" border="0" cellpadding="0" cellspacing="0">
+              <thead class="menue_tbl"> <tr>
+                <th>Aktuelles</th>
+              </tr>
+              </thead> <tbody class="menue_tbl">
+                <tr>
+                  <td class="menue_tbl"><a href="#">Neuheiten</a></td>
+                </tr>
+                <tr>
+                  <td class="menue_tbl"><a href="http://www.web.de" class="menue_tbl">Top 10 Monat</a></td>
+                </tr>
+                <tr>
+                  <td class="menue_tbl"><a href="#">Top 100 Jahr</a></td>
+                </tr>
+                <tr>
+                  <td class="menue_tbl"><a href="#">Vorschau</a></td>
+                </tr>
+              </tbody>
+            </table>
+            <br>
+            <table class="menue_suche" border="0" cellpadding="0" cellspacing="0">
+              <thead class="menue_tbl"> <tr>
+                <th colspan="2">Suche</th>
+              </tr>
+              </thead> <tbody>
+                <tr>
+                	<td colspan="2">
+                  		<form id="search" action="" method="post" name="SearchForm">
+	                  	<input name="searchfor" size="16" type="text">
+    	            </td>
+    	        </tr>
+    	        <tr>
+					<td>
+        	            <select name="selectName" size="1" id="select_search">
+		                    <option value="0">all</option>
+		                    <option value="1">Movie</option>
+        		            <option value="2">Artist</option>
+                		    <option value="3">genre</option>
+	                    </select>
+                    </td>
+                    <td>
+    	                <input value="Suche" id="submit_search" type="submit">
+    	                </form>
+                  </td>
+                </tr>
+              </tbody>
+            </table>
+            <br>
+            <table class="menue_tbl" border="0" cellpadding="0" cellspacing="0">
+              <thead class="menue_tbl"> <tr>
+                <th>Genre</th>
+              </tr>
+              </thead> <tbody  class="menue_tbl">
+                <tr>
+                  <td class="menue_tbl"><a href="#"> Action </a></td>
+                </tr>
+                <tr>
+                  <td class="menue_tbl"><a href="#"> Drama </a></td>
+                </tr>
+                <tr>
+                  <td class="menue_tbl"><a href="#"> Comedy </a></td>
+                </tr>
+                <tr>
+                  <td class="menue_tbl"><a href="#"> Thriller </a></td>
+                </tr>
+              </tbody>
+            </table>
+<!--menue end--> </td>
+            <td bgcolor="#000000" width="1"><img src="1pxtrans.gif"></td>
+            <td bgcolor="#f9efd2" width="2"><img src="1pxtrans.gif"></td>
+            <td bgcolor="#000000" width="1"><img src="1pxtrans.gif"></td>
+            <td valign="top" width="85%">
+<!--main start-->
+			<br>
+            <table border="0" cellpadding="0" cellspacing="0" width="100%">
+              <tbody>
+                <tr>
+                  <td align="center" width="20%"><img style="width: 75px; height: 75px;" src="" alt="" border="0"></td>
+                  <td>
+                  <span class="list_title">Titel des Films </span>
+<span class="list_summary">Hier kommt ein ganz kurzer Text rein<br>
+ganz lang <br>
+und dann drei Punkte . . . <a href="#">&gt;&gt;mehr&lt;&lt;</a> </span></td>
+                  <td width="10%">
+Bestellen </td>
+                </tr>
+              </tbody>
+            </table>
+            <br>
+&nbsp; <br>
+            <table style="width: 95%; text-align: left;" border="0" cellpadding="0" cellspacing="0" align="center">
+              <tbody>
+                <tr>
+                  <td class="prev_page_browse">&nbsp;&nbsp; <a href="">&lt;&lt; zur&uuml;ck &lt;&lt;</a><br>
+													</td>
+                  <td class="overview_page_browse" style="">&nbsp;Seite 1 / 5 <br>
+                  <a href="" class="single_page_browse">1</a>&nbsp;&nbsp;
+                  <a href="" class="single_page_browse">2</a>&nbsp;&nbsp;
+                  <a href="" class="single_page_browse">3</a>&nbsp;&nbsp;
+                  <a href="" class="single_page_browse">4</a>&nbsp;&nbsp;
+                  <a href="" class="single_page_browse">5</a>&nbsp;&nbsp;
+                  </td>
+                  <td class="next_page_browse">&nbsp;<a href="">&gt;&gt; vor &gt;&gt;</a>&nbsp;&nbsp;<br>
+                  </td>
+                </tr>
+              </tbody>
+            </table>
+            <br>
+            <br>
+            <br>
+            <table style="width: 95%;" border="0" cellpadding="0" cellspacing="0" align="center">
+              <tbody>
+                <tr>
+                  <td align="center" width="20%"><img style="width: 156px; height: 180px;" src="" alt="Mainpicture" title="Mainpicture"></td>
+                  <td>
+                  <span class="detail_title">Titel des Films Over </span><br/>
+<span class="detail_genre">Genre1, Genre2</span><br>
+<span class="detail_describ">ganz lang </span>
+und dann drei Punkte . . .<br>
+Vorhanden: 3 DVD's<br>
+                  </td>
+                </tr>
+                <tr>
+                  <td style="width: 100%;" colspan="2"> <span class="detail_hartist">Darsteller</span><br/>
+                  										<span class="detail_artist">Max Schmeling</span>
+				  </td>
+                </tr>
+                <tr>
+                  <td style="width: 100%;" colspan="2"> <span class="detail_hdir">Regie </span><br/>
+                  										<span class="detail_dir">&nbsp;</span>
+                  </td>
+                </tr>
+                <tr>
+                  <td style="width: 100%;" colspan="2"> <span class="detail_haudio">AudioFormate</span><br/>
+                  										<span class="detail_audio">&nbsp;</span>
+                  </td>
+                </tr>
+                <tr>
+                  <td style="width: 100%;" colspan="2"> <span class="detail_hvideo">VideoFormate</span><br/>
+                  										<span class="detail_video">&nbsp;</span>
+                  </td>
+                </tr>
+              </tbody>
+            </table>
+            <table border="1" cellpadding="0" cellspacing="0" style="width: 90%;" align="center">
+              <tbody>
+                <tr>
+                  <th colspan="4" class="detail_hpicture" style="text-align:left;">Weitere Bilder </th>
+                </tr>
+                <tr>
+                  <td class="detail_picture">Bild 1</td>
+                  <td class="detail_picture">Bild 2</td>
+                  <td class="detail_picture">Bild 3</td>
+                  <td class="detail_picture">Bild 4</td>
+                </tr>
+              </tbody>
+            </table>
+&nbsp; <br>
+            <table style="width: 90%; text-align: left;" align="center" border="1" cellpadding="0" cellspacing="0">
+			<thead class="basket_head">
+                <tr>
+                  <th style="width: 10%; text-align: center;">Pos<br>
+                  </th>
+                  <th style="width: 44%; text-align: left;">DVD - Name<br>
+                  </th>
+                  <th style="width: 15%; text-align: center;">Tage<br>
+                  </th>
+                  <th style="width: 15%; text-align: center;">Vorhanden<br>
+                  </th>
+                  <th style="width: 1%;"><br>
+                  </th>
+                  <th style="width: 15%; text-align: center;">Preis<br>
+                  </th>
+                </tr>
+             </thead>
+			<tbody class="basket_item">
+                <tr>
+                  <td><br>
+                  </td>
+                  <td><br>
+                  </td>
+                  <td><br>
+                  </td>
+                  <td><br>
+                  </td>
+                  <td><br>
+                  </td>
+                  <td><br>
+                  </td>
+                </tr>
+                <tr>
+                  <td><br>
+                  </td>
+                  <td><br>
+                  </td>
+                  <td><br>
+                  </td>
+                  <td><br>
+                  </td>
+                  <td><br>
+                  </td>
+                  <td><br>
+                  </td>
+                </tr>
+              </tbody>
+            </table>
+            <br>
+            <br>
+            <br>
+            <br>
+            <br>
+<!--main end--> </td>
+            <td bgcolor="#000000" width="1"><img src="1pxtrans.gif"></td>
+            <td background="border_r.gif"><img src="1pxtrans.gif" width="3"></td>
+          </tr>
+          <tr>
+            <td colspan="3" bgcolor="#000000"><img src="1pxtrans.gif"></td>
+            <td colspan="1" bgcolor="#f9efd2" width="2"><img src="1pxtrans.gif"></td>
+            <td colspan="3" bgcolor="#000000"><img src="1pxtrans.gif"></td>
+            <td background="border_r.gif"><img src="1pxtrans.gif" height="1" width="3"></td>
+          </tr>
+          <tr>
+            <td colspan="7" bgcolor="#f9efd2" height="2"><img src="1pxtrans.gif"></td>
+            <td bgcolor="#f9efd2"><img src="1pxtrans.gif" height="1" width="1"></td>
+          </tr>
+          <tr>
+            <td colspan="7" bgcolor="#000000"><img src="1pxtrans.gif"></td>
+            <td background="border_r.gif"><img src="1pxtrans.gif" height="1" width="3"></td>
+          </tr>
+          <tr>
+            <td bgcolor="#000000" width="1"><img src="1pxtrans.gif"></td>
+            <td colspan="5">
+            <div class="copyright">&copy;
+Remo Griesch,
+Stefan Forstner, Philipp Schneider<br>
+            </div>
+            </td>
+            <td bgcolor="#000000" width="1"><img src="1pxtrans.gif"></td>
+            <td background="border_r.gif"><img src="1pxtrans.gif" width="3"></td>
+          </tr>
+          <tr>
+            <td colspan="7" bgcolor="#000000"><img src="1pxtrans.gif"></td>
+            <td background="border_r.gif"><img src="1pxtrans.gif" height="1" width="3"></td>
+          </tr>
+          <tr>
+            <td colspan="7" background="border.gif"><img src="border_bl.gif" height="7"></td>
+            <td background="border_br.gif"><img src="1pxtrans.gif" height="1" width="3"></td>
+          </tr>
+        </tbody>
+      </table>
+      </td>
+      <td>&nbsp;</td>
+    </tr>
+    <tr>
+      <td>&nbsp;</td>
+      <td>&nbsp;</td>
+      <td>&nbsp;</td>
+    </tr>
+  </tbody>
 </table>
-
-	
-	
-	
-	</td>
-    <td>&nbsp;</td>
-  </tr>
-  <tr>
-    <td>&nbsp;</td>
-    <td>&nbsp;</td>
-    <td>&nbsp;</td>
-  </tr>
-</table>
 </body>
 </html>



From pschneider at sheep.berlios.de  Wed Dec 29 22:54:43 2004
From: pschneider at sheep.berlios.de (Philipp Schneider at BerliOS)
Date: Wed, 29 Dec 2004 22:54:43 +0100
Subject: [Provirent-svn-commit] r251 - project_src
Message-ID: <200412292154.iBTLshEj027198@sheep.berlios.de>

Author: pschneider
Date: 2004-12-29 22:54:42 +0100 (Wed, 29 Dec 2004)
New Revision: 251

Removed:
   project_src/website/
Log:




From pschneider at sheep.berlios.de  Wed Dec 29 22:55:57 2004
From: pschneider at sheep.berlios.de (Philipp Schneider at BerliOS)
Date: Wed, 29 Dec 2004 22:55:57 +0100
Subject: [Provirent-svn-commit] r252 - in project_src: . website website/Tomcat website/Tomcat/webapps website/Tomcat/work website/Tomcat/work/web website/Tomcat/work/web/templates website/bak website/bak/de website/bak/de/provirent website/bak/de/provirent/web website/bak/web website/bak/web/WEB-INF website/classes website/classes/Generated Source website/classes/Generated Source/.jsp website/classes/Generated Source/.jsp/web website/classes/Generated Source/.jsp/web/templates website/classes/de website/classes/de/provirent website/classes/de/provirent/web website/classes/de/provirent/web/Action website/classes/de/provirent/web/Form website/classes/de/provirent/web/objects website/classes/jsp cache website/classes/jsp cache/web website/classes/jsp cache/web/package cache website/classes/jsp cache/web/templates website/classes/package cache website/src website/src/de website/src/de/provirent website/src/de/provirent/web website/src/de/provirent/web/Action website/src/de/provirent/web/Form website/!
 src/de/provirent/web/objects website/web
Message-ID: <200412292155.iBTLtv9m027277@sheep.berlios.de>

Author: pschneider
Date: 2004-12-29 22:55:56 +0100 (Wed, 29 Dec 2004)
New Revision: 252

Added:
   project_src/website/
   project_src/website/Servlet.library
   project_src/website/Tomcat/
   project_src/website/Tomcat/webapps/
   project_src/website/Tomcat/webapps/jb-web.xml
   project_src/website/Tomcat/work/
   project_src/website/Tomcat/work/web/
   project_src/website/Tomcat/work/web/index_jsp.class
   project_src/website/Tomcat/work/web/index_jsp.java
   project_src/website/Tomcat/work/web/templates/
   project_src/website/Tomcat/work/web/templates/main_jsp.class
   project_src/website/Tomcat/work/web/templates/main_jsp.java
   project_src/website/Tomcat/work/web/top10month_jsp.class
   project_src/website/Tomcat/work/web/top10month_jsp.java
   project_src/website/bak/
   project_src/website/bak/de/
   project_src/website/bak/de/provirent/
   project_src/website/bak/de/provirent/web/
   project_src/website/bak/de/provirent/web/Action/
   project_src/website/bak/de/provirent/web/Form/
   project_src/website/bak/de/provirent/web/objects/
   project_src/website/bak/web/
   project_src/website/bak/web/WEB-INF/
   project_src/website/bak/web/WEB-INF/classes/
   project_src/website/bak/web/templates/
   project_src/website/classes/
   project_src/website/classes/ApplicationResources.properties
   project_src/website/classes/Generated Source/
   project_src/website/classes/Generated Source/.jsp/
   project_src/website/classes/Generated Source/.jsp/web/
   project_src/website/classes/Generated Source/.jsp/web/index_0002ejsp_jsp.java
   project_src/website/classes/Generated Source/.jsp/web/jsp1_0002ejsp_jsp.java
   project_src/website/classes/Generated Source/.jsp/web/templates/
   project_src/website/classes/Generated Source/.jsp/web/templates/main_0002ejsp_jsp.java
   project_src/website/classes/Generated Source/.jsp/web/top10month_0002ejsp_jsp.java
   project_src/website/classes/de/
   project_src/website/classes/de/provirent/
   project_src/website/classes/de/provirent/web/
   project_src/website/classes/de/provirent/web/Action/
   project_src/website/classes/de/provirent/web/Action/LoginAction.class
   project_src/website/classes/de/provirent/web/Action/LogoutAction.class
   project_src/website/classes/de/provirent/web/Action/SearchAction.class
   project_src/website/classes/de/provirent/web/Action/Top10MonthAction.class
   project_src/website/classes/de/provirent/web/Constant.class
   project_src/website/classes/de/provirent/web/Form/
   project_src/website/classes/de/provirent/web/Form/LoginForm.class
   project_src/website/classes/de/provirent/web/Form/SearchForm.class
   project_src/website/classes/de/provirent/web/objects/
   project_src/website/classes/de/provirent/web/objects/DTOMovie.class
   project_src/website/classes/jsp cache/
   project_src/website/classes/jsp cache/web/
   project_src/website/classes/jsp cache/web/index_0002ejsp_jsp.class
   project_src/website/classes/jsp cache/web/jsp1_0002ejsp_jsp.class
   project_src/website/classes/jsp cache/web/package cache/
   project_src/website/classes/jsp cache/web/package cache/templates.dep2
   project_src/website/classes/jsp cache/web/package cache/unnamed package.dep2
   project_src/website/classes/jsp cache/web/templates/
   project_src/website/classes/jsp cache/web/templates/main_0002ejsp_jsp.class
   project_src/website/classes/jsp cache/web/top10month_0002ejsp_jsp.class
   project_src/website/classes/package cache/
   project_src/website/classes/package cache/de.provirent.web.Action.dep2
   project_src/website/classes/package cache/de.provirent.web.Form.dep2
   project_src/website/classes/package cache/de.provirent.web.dep2
   project_src/website/classes/package cache/de.provirent.web.objects.dep2
   project_src/website/src/
   project_src/website/src/ApplicationResources.properties
   project_src/website/src/de/
   project_src/website/src/de/provirent/
   project_src/website/src/de/provirent/web/
   project_src/website/src/de/provirent/web/Action/
   project_src/website/src/de/provirent/web/Action/DetailAction.java
   project_src/website/src/de/provirent/web/Action/LoginAction.java
   project_src/website/src/de/provirent/web/Action/LogoutAction.java
   project_src/website/src/de/provirent/web/Action/SearchAction.java
   project_src/website/src/de/provirent/web/Action/Top10MonthAction.java
   project_src/website/src/de/provirent/web/Constant.java
   project_src/website/src/de/provirent/web/Form/
   project_src/website/src/de/provirent/web/Form/LoginForm.java
   project_src/website/src/de/provirent/web/Form/SearchForm.java
   project_src/website/src/de/provirent/web/objects/
   project_src/website/src/de/provirent/web/objects/DTOMovie.java
   project_src/website/src/de/provirent/web/objects/DTOMovieShort.java
   project_src/website/web/
   project_src/website/web/details.jsp
Log:


Added: project_src/website/Servlet.library
===================================================================
--- project_src/website/Servlet.library	2004-12-29 21:54:42 UTC (rev 251)
+++ project_src/website/Servlet.library	2004-12-29 21:55:56 UTC (rev 252)
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<library>
+  <!--JBuilder Library Definition File-->
+  <fullname>Servlet</fullname>
+  <required>Tomcat 4.1 Servlet</required>
+  <lastmodsaved>1104253609506</lastmodsaved>
+</library>

Added: project_src/website/Tomcat/webapps/jb-web.xml
===================================================================
--- project_src/website/Tomcat/webapps/jb-web.xml	2004-12-29 21:54:42 UTC (rev 251)
+++ project_src/website/Tomcat/webapps/jb-web.xml	2004-12-29 21:55:56 UTC (rev 252)
@@ -0,0 +1,3 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--This comment marks this file as generated, so it may be deleted and regenerated at any time. To preserve manual changes to this file, delete this comment.-->
+<Context debug="0" docBase="D:\a_provirent\project_src\website\web" path="/web" reloadable="true" workDir="D:\a_provirent\project_src\website\Tomcat\work\web"/>

Added: project_src/website/Tomcat/work/web/index_jsp.class
===================================================================
(Binary files differ)


Property changes on: project_src/website/Tomcat/work/web/index_jsp.class
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/website/Tomcat/work/web/index_jsp.java
===================================================================
--- project_src/website/Tomcat/work/web/index_jsp.java	2004-12-29 21:54:42 UTC (rev 251)
+++ project_src/website/Tomcat/work/web/index_jsp.java	2004-12-29 21:55:56 UTC (rev 252)
@@ -0,0 +1,168 @@
+package org.apache.jsp;
+
+import javax.servlet.*;
+import javax.servlet.http.*;
+import javax.servlet.jsp.*;
+import org.apache.jasper.runtime.*;
+
+public class index_jsp extends HttpJspBase {
+
+
+  private static java.util.Vector _jspx_includes;
+
+  private org.apache.jasper.runtime.TagHandlerPool _jspx_tagPool_tiles_insert_page_flush;
+  private org.apache.jasper.runtime.TagHandlerPool _jspx_tagPool_tiles_put_value_name;
+  private org.apache.jasper.runtime.TagHandlerPool _jspx_tagPool_tiles_put_type_name;
+
+  public index_jsp() {
+    _jspx_tagPool_tiles_insert_page_flush = new org.apache.jasper.runtime.TagHandlerPool();
+    _jspx_tagPool_tiles_put_value_name = new org.apache.jasper.runtime.TagHandlerPool();
+    _jspx_tagPool_tiles_put_type_name = new org.apache.jasper.runtime.TagHandlerPool();
+  }
+
+  public java.util.List getIncludes() {
+    return _jspx_includes;
+  }
+
+  public void _jspDestroy() {
+    _jspx_tagPool_tiles_insert_page_flush.release();
+    _jspx_tagPool_tiles_put_value_name.release();
+    _jspx_tagPool_tiles_put_type_name.release();
+  }
+
+  public void _jspService(HttpServletRequest request, HttpServletResponse response)
+        throws java.io.IOException, ServletException {
+
+    JspFactory _jspxFactory = null;
+    javax.servlet.jsp.PageContext pageContext = null;
+    HttpSession session = null;
+    ServletContext application = null;
+    ServletConfig config = null;
+    JspWriter out = null;
+    Object page = this;
+    JspWriter _jspx_out = null;
+
+
+    try {
+      _jspxFactory = JspFactory.getDefaultFactory();
+      response.setContentType("text/html;charset=ISO-8859-1");
+      pageContext = _jspxFactory.getPageContext(this, request, response,
+      			null, true, 8192, true);
+      application = pageContext.getServletContext();
+      config = pageContext.getServletConfig();
+      session = pageContext.getSession();
+      out = pageContext.getOut();
+      _jspx_out = out;
+
+      out.write("\r\n\r\n");
+      if (_jspx_meth_tiles_insert_0(pageContext))
+        return;
+      out.write("\r\n\r\n\r\n\r\n");
+    } catch (Throwable t) {
+      out = _jspx_out;
+      if (out != null && out.getBufferSize() != 0)
+        out.clearBuffer();
+      if (pageContext != null) pageContext.handlePageException(t);
+    } finally {
+      if (_jspxFactory != null) _jspxFactory.releasePageContext(pageContext);
+    }
+  }
+
+  private boolean _jspx_meth_tiles_insert_0(javax.servlet.jsp.PageContext pageContext)
+          throws Throwable {
+    JspWriter out = pageContext.getOut();
+    /* ----  tiles:insert ---- */
+    org.apache.struts.taglib.tiles.InsertTag _jspx_th_tiles_insert_0 = (org.apache.struts.taglib.tiles.InsertTag) _jspx_tagPool_tiles_insert_page_flush.get(org.apache.struts.taglib.tiles.InsertTag.class);
+    _jspx_th_tiles_insert_0.setPageContext(pageContext);
+    _jspx_th_tiles_insert_0.setParent(null);
+    _jspx_th_tiles_insert_0.setPage("/templates/main.jsp");
+    _jspx_th_tiles_insert_0.setFlush(true);
+    int _jspx_eval_tiles_insert_0 = _jspx_th_tiles_insert_0.doStartTag();
+    if (_jspx_eval_tiles_insert_0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
+      do {
+        out.write("\r\n\r\n");
+        if (_jspx_meth_tiles_put_0(_jspx_th_tiles_insert_0, pageContext))
+          return true;
+        out.write("\r\n");
+        if (_jspx_meth_tiles_put_1(_jspx_th_tiles_insert_0, pageContext))
+          return true;
+        out.write("\r\n\r\n");
+        if (_jspx_meth_tiles_put_2(_jspx_th_tiles_insert_0, pageContext))
+          return true;
+        out.write("\r\n\r\n");
+        int evalDoAfterBody = _jspx_th_tiles_insert_0.doAfterBody();
+        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
+          break;
+      } while (true);
+    }
+    if (_jspx_th_tiles_insert_0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+      return true;
+    _jspx_tagPool_tiles_insert_page_flush.reuse(_jspx_th_tiles_insert_0);
+    return false;
+  }
+
+  private boolean _jspx_meth_tiles_put_0(javax.servlet.jsp.tagext.Tag _jspx_th_tiles_insert_0, javax.servlet.jsp.PageContext pageContext)
+          throws Throwable {
+    JspWriter out = pageContext.getOut();
+    /* ----  tiles:put ---- */
+    org.apache.struts.taglib.tiles.PutTag _jspx_th_tiles_put_0 = (org.apache.struts.taglib.tiles.PutTag) _jspx_tagPool_tiles_put_value_name.get(org.apache.struts.taglib.tiles.PutTag.class);
+    _jspx_th_tiles_put_0.setPageContext(pageContext);
+    _jspx_th_tiles_put_0.setParent(_jspx_th_tiles_insert_0);
+    _jspx_th_tiles_put_0.setName("title");
+    _jspx_th_tiles_put_0.setValue("PROfessional VIdeo RENTalStore");
+    int _jspx_eval_tiles_put_0 = _jspx_th_tiles_put_0.doStartTag();
+    if (_jspx_th_tiles_put_0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+      return true;
+    _jspx_tagPool_tiles_put_value_name.reuse(_jspx_th_tiles_put_0);
+    return false;
+  }
+
+  private boolean _jspx_meth_tiles_put_1(javax.servlet.jsp.tagext.Tag _jspx_th_tiles_insert_0, javax.servlet.jsp.PageContext pageContext)
+          throws Throwable {
+    JspWriter out = pageContext.getOut();
+    /* ----  tiles:put ---- */
+    org.apache.struts.taglib.tiles.PutTag _jspx_th_tiles_put_1 = (org.apache.struts.taglib.tiles.PutTag) _jspx_tagPool_tiles_put_value_name.get(org.apache.struts.taglib.tiles.PutTag.class);
+    _jspx_th_tiles_put_1.setPageContext(pageContext);
+    _jspx_th_tiles_put_1.setParent(_jspx_th_tiles_insert_0);
+    _jspx_th_tiles_put_1.setName("top10month_link");
+    _jspx_th_tiles_put_1.setValue("top10.jsp");
+    int _jspx_eval_tiles_put_1 = _jspx_th_tiles_put_1.doStartTag();
+    if (_jspx_th_tiles_put_1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+      return true;
+    _jspx_tagPool_tiles_put_value_name.reuse(_jspx_th_tiles_put_1);
+    return false;
+  }
+
+  private boolean _jspx_meth_tiles_put_2(javax.servlet.jsp.tagext.Tag _jspx_th_tiles_insert_0, javax.servlet.jsp.PageContext pageContext)
+          throws Throwable {
+    JspWriter out = pageContext.getOut();
+    /* ----  tiles:put ---- */
+    org.apache.struts.taglib.tiles.PutTag _jspx_th_tiles_put_2 = (org.apache.struts.taglib.tiles.PutTag) _jspx_tagPool_tiles_put_type_name.get(org.apache.struts.taglib.tiles.PutTag.class);
+    _jspx_th_tiles_put_2.setPageContext(pageContext);
+    _jspx_th_tiles_put_2.setParent(_jspx_th_tiles_insert_0);
+    _jspx_th_tiles_put_2.setName("contentbody");
+    _jspx_th_tiles_put_2.setType("string");
+    int _jspx_eval_tiles_put_2 = _jspx_th_tiles_put_2.doStartTag();
+    if (_jspx_eval_tiles_put_2 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
+      if (_jspx_eval_tiles_put_2 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE) {
+        javax.servlet.jsp.tagext.BodyContent _bc = pageContext.pushBody();
+        out = _bc;
+        _jspx_th_tiles_put_2.setBodyContent(_bc);
+        _jspx_th_tiles_put_2.doInitBody();
+      }
+      do {
+        out.write("\r\n  Willkommen auf unserer neuen Webseite");
+        out.write("<br/>\r\n");
+        int evalDoAfterBody = _jspx_th_tiles_put_2.doAfterBody();
+        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
+          break;
+      } while (true);
+      if (_jspx_eval_tiles_put_2 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE)
+        out = pageContext.popBody();
+    }
+    if (_jspx_th_tiles_put_2.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+      return true;
+    _jspx_tagPool_tiles_put_type_name.reuse(_jspx_th_tiles_put_2);
+    return false;
+  }
+}

Added: project_src/website/Tomcat/work/web/templates/main_jsp.class
===================================================================
(Binary files differ)


Property changes on: project_src/website/Tomcat/work/web/templates/main_jsp.class
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/website/Tomcat/work/web/templates/main_jsp.java
===================================================================
--- project_src/website/Tomcat/work/web/templates/main_jsp.java	2004-12-29 21:54:42 UTC (rev 251)
+++ project_src/website/Tomcat/work/web/templates/main_jsp.java	2004-12-29 21:55:56 UTC (rev 252)
@@ -0,0 +1,1140 @@
+package org.apache.jsp;
+
+import javax.servlet.*;
+import javax.servlet.http.*;
+import javax.servlet.jsp.*;
+import org.apache.jasper.runtime.*;
+
+public class main_jsp extends HttpJspBase {
+
+
+  private static java.util.Vector _jspx_includes;
+
+  private org.apache.jasper.runtime.TagHandlerPool _jspx_tagPool_tiles_getAsString_name;
+  private org.apache.jasper.runtime.TagHandlerPool _jspx_tagPool_html_base;
+  private org.apache.jasper.runtime.TagHandlerPool _jspx_tagPool_html_rewrite_page;
+  private org.apache.jasper.runtime.TagHandlerPool _jspx_tagPool_html_img_page_alt;
+  private org.apache.jasper.runtime.TagHandlerPool _jspx_tagPool_logic_present_name;
+  private org.apache.jasper.runtime.TagHandlerPool _jspx_tagPool_html_link_forward;
+  private org.apache.jasper.runtime.TagHandlerPool _jspx_tagPool_logic_notPresent_scope_name;
+  private org.apache.jasper.runtime.TagHandlerPool _jspx_tagPool_html_form_method_focus_action;
+  private org.apache.jasper.runtime.TagHandlerPool _jspx_tagPool_html_text_styleClass_size_property;
+  private org.apache.jasper.runtime.TagHandlerPool _jspx_tagPool_html_password_styleClass_size_redisplay_property;
+  private org.apache.jasper.runtime.TagHandlerPool _jspx_tagPool_html_submit_value_styleClass;
+  private org.apache.jasper.runtime.TagHandlerPool _jspx_tagPool_html_select_size_property_multiple;
+  private org.apache.jasper.runtime.TagHandlerPool _jspx_tagPool_html_option_value;
+  private org.apache.jasper.runtime.TagHandlerPool _jspx_tagPool_html_errors;
+  private org.apache.jasper.runtime.TagHandlerPool _jspx_tagPool_tiles_insert_attribute;
+
+  public main_jsp() {
+    _jspx_tagPool_tiles_getAsString_name = new org.apache.jasper.runtime.TagHandlerPool();
+    _jspx_tagPool_html_base = new org.apache.jasper.runtime.TagHandlerPool();
+    _jspx_tagPool_html_rewrite_page = new org.apache.jasper.runtime.TagHandlerPool();
+    _jspx_tagPool_html_img_page_alt = new org.apache.jasper.runtime.TagHandlerPool();
+    _jspx_tagPool_logic_present_name = new org.apache.jasper.runtime.TagHandlerPool();
+    _jspx_tagPool_html_link_forward = new org.apache.jasper.runtime.TagHandlerPool();
+    _jspx_tagPool_logic_notPresent_scope_name = new org.apache.jasper.runtime.TagHandlerPool();
+    _jspx_tagPool_html_form_method_focus_action = new org.apache.jasper.runtime.TagHandlerPool();
+    _jspx_tagPool_html_text_styleClass_size_property = new org.apache.jasper.runtime.TagHandlerPool();
+    _jspx_tagPool_html_password_styleClass_size_redisplay_property = new org.apache.jasper.runtime.TagHandlerPool();
+    _jspx_tagPool_html_submit_value_styleClass = new org.apache.jasper.runtime.TagHandlerPool();
+    _jspx_tagPool_html_select_size_property_multiple = new org.apache.jasper.runtime.TagHandlerPool();
+    _jspx_tagPool_html_option_value = new org.apache.jasper.runtime.TagHandlerPool();
+    _jspx_tagPool_html_errors = new org.apache.jasper.runtime.TagHandlerPool();
+    _jspx_tagPool_tiles_insert_attribute = new org.apache.jasper.runtime.TagHandlerPool();
+  }
+
+  public java.util.List getIncludes() {
+    return _jspx_includes;
+  }
+
+  public void _jspDestroy() {
+    _jspx_tagPool_tiles_getAsString_name.release();
+    _jspx_tagPool_html_base.release();
+    _jspx_tagPool_html_rewrite_page.release();
+    _jspx_tagPool_html_img_page_alt.release();
+    _jspx_tagPool_logic_present_name.release();
+    _jspx_tagPool_html_link_forward.release();
+    _jspx_tagPool_logic_notPresent_scope_name.release();
+    _jspx_tagPool_html_form_method_focus_action.release();
+    _jspx_tagPool_html_text_styleClass_size_property.release();
+    _jspx_tagPool_html_password_styleClass_size_redisplay_property.release();
+    _jspx_tagPool_html_submit_value_styleClass.release();
+    _jspx_tagPool_html_select_size_property_multiple.release();
+    _jspx_tagPool_html_option_value.release();
+    _jspx_tagPool_html_errors.release();
+    _jspx_tagPool_tiles_insert_attribute.release();
+  }
+
+  public void _jspService(HttpServletRequest request, HttpServletResponse response)
+        throws java.io.IOException, ServletException {
+
+    JspFactory _jspxFactory = null;
+    javax.servlet.jsp.PageContext pageContext = null;
+    HttpSession session = null;
+    ServletContext application = null;
+    ServletConfig config = null;
+    JspWriter out = null;
+    Object page = this;
+    JspWriter _jspx_out = null;
+
+
+    try {
+      _jspxFactory = JspFactory.getDefaultFactory();
+      response.setContentType("text/html;charset=ISO-8859-1");
+      pageContext = _jspxFactory.getPageContext(this, request, response,
+      			null, true, 8192, true);
+      application = pageContext.getServletContext();
+      config = pageContext.getServletConfig();
+      session = pageContext.getSession();
+      out = pageContext.getOut();
+      _jspx_out = out;
+
+      out.write("\r\n");
+      out.write("\r\n");
+      out.write("\r\n");
+      out.write("\r\n");
+      out.write("<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
+      out.write("<html>\r\n");
+      out.write("<head>\r\n  ");
+      out.write("<title>");
+      if (_jspx_meth_tiles_getAsString_0(pageContext))
+        return;
+      out.write("</title>\r\n  ");
+      if (_jspx_meth_html_base_0(pageContext))
+        return;
+      out.write("\r\n  ");
+      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\">\r\n  ");
+      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"");
+      if (_jspx_meth_html_rewrite_0(pageContext))
+        return;
+      out.write("\" title=\"externe Styles\">\r\n");
+      out.write("</head>\r\n\r\n");
+      out.write("<body>\r\n");
+      out.write("<table align=\"center\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\">\r\n  ");
+      out.write("<tbody>\r\n    ");
+      out.write("<tr>\r\n      ");
+      out.write("<td width=\"10%\">&nbsp;");
+      out.write("</td>\r\n      ");
+      out.write("<td>&nbsp;");
+      out.write("</td>\r\n      ");
+      out.write("<td width=\"10%\">&nbsp;");
+      out.write("</td>\r\n    ");
+      out.write("</tr>\r\n    ");
+      out.write("<tr>\r\n      ");
+      out.write("<td>&nbsp;");
+      out.write("</td>\r\n      ");
+      out.write("<td>\r\n      ");
+      out.write("<table align=\"center\" bgcolor=\"#c2d9c1\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\">\r\n        ");
+      out.write("<tbody>\r\n          ");
+      out.write("<tr>\r\n            ");
+      out.write("<td colspan=\"7\" bgcolor=\"#000000\">");
+      out.write("<img src=\"images/1pxtrans.gif\" alt=\"\">");
+      out.write("</td>\r\n            ");
+      out.write("<td style=\"background-image: url(images/border_r.gif);\">");
+      out.write("<img src=\"images/1pxtrans.gif\" height=\"1\" width=\"3\" alt=\"\">");
+      out.write("</td>\r\n          ");
+      out.write("</tr>\r\n          ");
+      out.write("<tr>\r\n            ");
+      out.write("<td bgcolor=\"#000000\" width=\"1\">");
+      out.write("<img src=\"images/1pxtrans.gif\" alt=\"\">");
+      out.write("</td>\r\n            ");
+      out.write("<td colspan=\"5\" height=\"70\">Logo");
+      out.write("</td>\r\n            ");
+      out.write("<td bgcolor=\"#000000\" width=\"1\">");
+      out.write("<img src=\"images/1pxtrans.gif\" alt=\"\">");
+      out.write("</td>\r\n            ");
+      out.write("<td style=\"background-image: url(images/border_r.gif);\">");
+      out.write("<img src=\"images/1pxtrans.gif\" width=\"3\" alt=\"\">");
+      out.write("</td>\r\n          ");
+      out.write("</tr>\r\n          ");
+      out.write("<tr>\r\n            ");
+      out.write("<td colspan=\"7\" bgcolor=\"#000000\">");
+      out.write("<img src=\"images/1pxtrans.gif\" alt=\"\">");
+      out.write("</td>\r\n            ");
+      out.write("<td style=\"background-image: url(images/border_r.gif);\">");
+      out.write("<img src=\"images/1pxtrans.gif\" height=\"1\" width=\"3\" alt=\"\">");
+      out.write("</td>\r\n          ");
+      out.write("</tr>\r\n          ");
+      out.write("<tr>\r\n            ");
+      out.write("<td bgcolor=\"#000000\" width=\"1\">");
+      if (_jspx_meth_html_img_0(pageContext))
+        return;
+      out.write("</td>\r\n            ");
+      out.write("<td colspan=\"5\" height=\"20\" valign=\"middle\">\r\n            ");
+      out.write("<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\">\r\n              ");
+      out.write("<tbody>\r\n                ");
+      out.write("<tr>\r\n                  ");
+      out.write("<td width=\"53%\">\r\n                    ");
+      out.write("<!--head start-->\r\n                    ");
+      out.write("<div align=\"left\">\r\n\r\n                      ");
+      if (_jspx_meth_logic_present_0(pageContext))
+        return;
+      out.write("\r\n                      ");
+      if (_jspx_meth_logic_notPresent_0(pageContext))
+        return;
+      out.write("\r\n\r\n                    ");
+      out.write("</div>\r\n                  ");
+      out.write("</td>\r\n                  ");
+      out.write("<td width=\"50%\">\r\n                    ");
+      out.write("<div class=\"head_menue\" align=\"right\">\r\n                     \t");
+      out.write("<a href=\"index.jsp\" class=\"head_menue\">&Uuml;bersicht");
+      out.write("</a>&nbsp;|&nbsp;");
+      out.write("<a href=\"index.jsp\" class=\"head_menue\">Impressum");
+      out.write("</a>&nbsp;|&nbsp;");
+      out.write("<a href=\"index.jsp\" class=\"head_menue\">Hilfe");
+      out.write("</a>&nbsp;\r\n                    ");
+      out.write("</div>\r\n\r\n                    ");
+      out.write("<!--head end-->\r\n                  ");
+      out.write("</td>\r\n ");
+      out.write("</tr>\r\n              ");
+      out.write("</tbody>\r\n            ");
+      out.write("</table>\r\n            ");
+      out.write("</td>\r\n            ");
+      out.write("<td bgcolor=\"#000000\" width=\"1\">");
+      out.write("<img src=\"images/1pxtrans.gif\" alt=\"\">");
+      out.write("</td>\r\n            ");
+      out.write("<td style=\"background-image: url(images/border_r.gif);\">");
+      out.write("<img src=\"images/1pxtrans.gif\" width=\"3\" alt=\"\">");
+      out.write("</td>\r\n          ");
+      out.write("</tr>\r\n          ");
+      out.write("<tr>\r\n            ");
+      out.write("<td colspan=\"7\" bgcolor=\"#000000\">");
+      out.write("<img src=\"images/1pxtrans.gif\" alt=\"\">");
+      out.write("</td>\r\n            ");
+      out.write("<td style=\"background-image: url(images/border_r.gif);\">");
+      out.write("<img src=\"images/1pxtrans.gif\" height=\"1\" width=\"3\" alt=\"\">");
+      out.write("</td>\r\n          ");
+      out.write("</tr>\r\n          ");
+      out.write("<tr>\r\n            ");
+      out.write("<td colspan=\"7\" bgcolor=\"#f9efd2\" height=\"2\">");
+      out.write("<img src=\"images/1pxtrans.gif\" alt=\"\">");
+      out.write("</td>\r\n            ");
+      out.write("<td bgcolor=\"#f9efd2\">");
+      out.write("<img src=\"images/1pxtrans.gif\" height=\"1\" width=\"3\" alt=\"\">");
+      out.write("</td>\r\n          ");
+      out.write("</tr>\r\n          ");
+      out.write("<tr>\r\n            ");
+      out.write("<td colspan=\"3\" bgcolor=\"#000000\">");
+      out.write("<img src=\"images/1pxtrans.gif\" alt=\"\">");
+      out.write("</td>\r\n            ");
+      out.write("<td colspan=\"1\" bgcolor=\"#f9efd2\" width=\"2\">");
+      out.write("<img src=\"images/1pxtrans.gif\" alt=\"\">");
+      out.write("</td>\r\n            ");
+      out.write("<td colspan=\"3\" bgcolor=\"#000000\">");
+      out.write("<img src=\"images/1pxtrans.gif\" alt=\"\">");
+      out.write("</td>\r\n            ");
+      out.write("<td style=\"background-image: url(images/border_r.gif);\">");
+      out.write("<img src=\"images/1pxtrans.gif\" height=\"1\" width=\"3\" alt=\"\">");
+      out.write("</td>\r\n          ");
+      out.write("</tr>\r\n          ");
+      out.write("<tr>\r\n            ");
+      out.write("<td bgcolor=\"#000000\" width=\"1\">");
+      out.write("<img src=\"images/1pxtrans.gif\" alt=\"\">");
+      out.write("</td>\r\n            ");
+      out.write("<td valign=\"top\">\r\n");
+      out.write("<!--menue start-->\r\n            ");
+      out.write("<table class=\"menue_tbl\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\r\n              ");
+      out.write("<thead class=\"menue_tbl\"> ");
+      out.write("<tr>\r\n                ");
+      out.write("<th>Aktuelles");
+      out.write("</th>\r\n              ");
+      out.write("</tr>\r\n              ");
+      out.write("</thead> ");
+      out.write("<tbody class=\"menue_tbl\">\r\n                ");
+      out.write("<tr>\r\n                  ");
+      out.write("<td class=\"menue_tbl\">");
+      if (_jspx_meth_html_link_3(pageContext))
+        return;
+      out.write("</td>\r\n                ");
+      out.write("</tr>\r\n                ");
+      out.write("<tr>\r\n                  ");
+      out.write("<td class=\"menue_tbl\">");
+      if (_jspx_meth_html_link_4(pageContext))
+        return;
+      out.write("</td>\r\n                ");
+      out.write("</tr>\r\n                ");
+      out.write("<tr>\r\n                  ");
+      out.write("<td class=\"menue_tbl\">");
+      if (_jspx_meth_html_link_5(pageContext))
+        return;
+      out.write("</td>\r\n                ");
+      out.write("</tr>\r\n                ");
+      out.write("<tr>\r\n                  ");
+      out.write("<td class=\"menue_tbl\">");
+      if (_jspx_meth_html_link_6(pageContext))
+        return;
+      out.write("</td>\r\n                ");
+      out.write("</tr>\r\n              ");
+      out.write("</tbody>\r\n            ");
+      out.write("</table>\r\n            ");
+      out.write("<br>\r\n            ");
+      out.write("<table class=\"menue_suche\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\r\n              ");
+      out.write("<thead class=\"menue_tbl\"> ");
+      out.write("<tr>\r\n                ");
+      out.write("<th colspan=\"2\">Suche");
+      out.write("</th>\r\n              ");
+      out.write("</tr>\r\n            ");
+      out.write("</thead> ");
+      out.write("<tbody>\r\n              ");
+      out.write("<tr>\r\n                ");
+      out.write("<td colspan=\"2\">\r\n\r\n                  ");
+      if (_jspx_meth_html_form_1(pageContext))
+        return;
+      out.write("\r\n\r\n\r\n\r\n\r\n                  ");
+      out.write("</td>\r\n                ");
+      out.write("</tr>\r\n              ");
+      out.write("</tbody>\r\n            ");
+      out.write("</table>\r\n            ");
+      out.write("<br>\r\n            ");
+      out.write("<table class=\"menue_tbl\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\r\n              ");
+      out.write("<thead class=\"menue_tbl\"> ");
+      out.write("<tr>\r\n                ");
+      out.write("<th>Genre");
+      out.write("</th>\r\n              ");
+      out.write("</tr>\r\n              ");
+      out.write("</thead> ");
+      out.write("<tbody  class=\"menue_tbl\">\r\n                ");
+      out.write("<tr>\r\n                  ");
+      out.write("<td class=\"menue_tbl\">");
+      out.write("<a href=\"#\" class=\"menue_tbl\"> Action ");
+      out.write("</a>");
+      out.write("</td>\r\n                ");
+      out.write("</tr>\r\n                ");
+      out.write("<tr>\r\n                  ");
+      out.write("<td class=\"menue_tbl\">");
+      out.write("<a href=\"#\" class=\"menue_tbl\"> Drama ");
+      out.write("</a>");
+      out.write("</td>\r\n                ");
+      out.write("</tr>\r\n                ");
+      out.write("<tr>\r\n                  ");
+      out.write("<td class=\"menue_tbl\">");
+      out.write("<a href=\"#\" class=\"menue_tbl\"> Comedy ");
+      out.write("</a>");
+      out.write("</td>\r\n                ");
+      out.write("</tr>\r\n                ");
+      out.write("<tr>\r\n                  ");
+      out.write("<td class=\"menue_tbl\">");
+      out.write("<a href=\"#\" class=\"menue_tbl\"> Thriller ");
+      out.write("</a>");
+      out.write("</td>\r\n                ");
+      out.write("</tr>\r\n              ");
+      out.write("</tbody>\r\n            ");
+      out.write("</table>\r\n\r\n\r\n");
+      out.write("<!--menue end--> ");
+      out.write("</td>\r\n            ");
+      out.write("<td bgcolor=\"#000000\" width=\"1\">");
+      out.write("<img src=\"images/1pxtrans.gif\" alt=\"\">");
+      out.write("</td>\r\n            ");
+      out.write("<td bgcolor=\"#f9efd2\" width=\"3\">");
+      out.write("<img src=\"images/1pxtrans.gif\" alt=\"\">");
+      out.write("</td>\r\n            ");
+      out.write("<td bgcolor=\"#000000\" width=\"1\">");
+      out.write("<img src=\"images/1pxtrans.gif\" alt=\"\">");
+      out.write("</td>\r\n            ");
+      out.write("<td valign=\"top\" width=\"85%\" style=\"padding-top:20px; padding-right:1px; padding-left: 1px;\">\r\n");
+      out.write("<!--main start-->\r\n");
+      if (_jspx_meth_html_errors_0(pageContext))
+        return;
+      out.write("\r\n&nbsp;");
+      out.write("<br />\r\n");
+      if (_jspx_meth_tiles_insert_0(pageContext))
+        return;
+      out.write("\r\n\r\n");
+      out.write("<!--main end--> ");
+      out.write("</td>\r\n            ");
+      out.write("<td bgcolor=\"#000000\" width=\"1\">");
+      out.write("<img src=\"images/1pxtrans.gif\" alt=\"\">");
+      out.write("</td>\r\n            ");
+      out.write("<td style=\"background-image: url(images/border_r.gif);\">");
+      out.write("<img src=\"images/1pxtrans.gif\" width=\"3\" alt=\"\">");
+      out.write("</td>\r\n          ");
+      out.write("</tr>\r\n          ");
+      out.write("<tr>\r\n            ");
+      out.write("<td colspan=\"3\" bgcolor=\"#000000\">");
+      out.write("<img src=\"images/1pxtrans.gif\" alt=\"\">");
+      out.write("</td>\r\n            ");
+      out.write("<td colspan=\"1\" bgcolor=\"#f9efd2\" width=\"2\">");
+      out.write("<img src=\"images/1pxtrans.gif\" alt=\"\">");
+      out.write("</td>\r\n            ");
+      out.write("<td colspan=\"3\" bgcolor=\"#000000\">");
+      out.write("<img src=\"images/1pxtrans.gif\" alt=\"\">");
+      out.write("</td>\r\n            ");
+      out.write("<td style=\"background-image: url(images/border_r.gif);\">");
+      out.write("<img src=\"images/1pxtrans.gif\" height=\"1\" width=\"3\" alt=\"\">");
+      out.write("</td>\r\n          ");
+      out.write("</tr>\r\n          ");
+      out.write("<tr>\r\n            ");
+      out.write("<td colspan=\"7\" bgcolor=\"#f9efd2\" height=\"2\">");
+      out.write("<img src=\"images/1pxtrans.gif\" alt=\"\">");
+      out.write("</td>\r\n            ");
+      out.write("<td bgcolor=\"#f9efd2\">");
+      out.write("<img src=\"images/1pxtrans.gif\" height=\"1\" width=\"1\" alt=\"\">");
+      out.write("</td>\r\n          ");
+      out.write("</tr>\r\n          ");
+      out.write("<tr>\r\n            ");
+      out.write("<td colspan=\"7\" bgcolor=\"#000000\">");
+      out.write("<img src=\"images/1pxtrans.gif\" alt=\"\">");
+      out.write("</td>\r\n            ");
+      out.write("<td style=\"background-image: url(images/border_r.gif);\">");
+      out.write("<img src=\"images/1pxtrans.gif\" height=\"1\" width=\"3\" alt=\"\">");
+      out.write("</td>\r\n          ");
+      out.write("</tr>\r\n          ");
+      out.write("<tr>\r\n            ");
+      out.write("<td bgcolor=\"#000000\" width=\"1\">");
+      out.write("<img src=\"images/1pxtrans.gif\" alt=\"\">");
+      out.write("</td>\r\n            ");
+      out.write("<td colspan=\"5\">\r\n            ");
+      out.write("<div class=\"copyright\">&copy;\r\nRemo Griesch,\r\nStefan Forstner, Philipp Schneider");
+      out.write("<br>\r\n            ");
+      out.write("</div>\r\n            ");
+      out.write("</td>\r\n            ");
+      out.write("<td bgcolor=\"#000000\" width=\"1\">");
+      out.write("<img src=\"images/1pxtrans.gif\" alt=\"\">");
+      out.write("</td>\r\n            ");
+      out.write("<td style=\"background-image: url(images/border_r.gif);\">");
+      out.write("<img src=\"images/1pxtrans.gif\" width=\"3\" alt=\"\">");
+      out.write("</td>\r\n          ");
+      out.write("</tr>\r\n          ");
+      out.write("<tr>\r\n            ");
+      out.write("<td colspan=\"7\" bgcolor=\"#000000\">");
+      out.write("<img src=\"images/1pxtrans.gif\" alt=\"\">");
+      out.write("</td>\r\n            ");
+      out.write("<td style=\"background-image: url(images/border_r.gif);\">");
+      out.write("<img src=\"images/1pxtrans.gif\" height=\"1\" width=\"3\" alt=\"\">");
+      out.write("</td>\r\n          ");
+      out.write("</tr>\r\n          ");
+      out.write("<tr>\r\n            ");
+      out.write("<td colspan=\"7\" style=\"background-image: url(images/border.gif);\">");
+      out.write("<img src=\"border_bl.gif\" height=\"7\" alt=\"\">");
+      out.write("</td>\r\n            ");
+      out.write("<td style=\"background-image: url(images/border_br.gif);\">");
+      out.write("<img src=\"images/1pxtrans.gif\" height=\"1\" width=\"3\" alt=\"\">");
+      out.write("</td>\r\n          ");
+      out.write("</tr>\r\n        ");
+      out.write("</tbody>\r\n      ");
+      out.write("</table>\r\n      ");
+      out.write("</td>\r\n      ");
+      out.write("<td>&nbsp;");
+      out.write("</td>\r\n    ");
+      out.write("</tr>\r\n    ");
+      out.write("<tr>\r\n      ");
+      out.write("<td>&nbsp;");
+      out.write("</td>\r\n      ");
+      out.write("<td>&nbsp;");
+      out.write("</td>\r\n      ");
+      out.write("<td>&nbsp;");
+      out.write("</td>\r\n    ");
+      out.write("</tr>\r\n  ");
+      out.write("</tbody>\r\n");
+      out.write("</table>\r\n\r\n\r\n\r\n");
+      out.write("</body>\r\n");
+      out.write("</html>\r\n");
+    } catch (Throwable t) {
+      out = _jspx_out;
+      if (out != null && out.getBufferSize() != 0)
+        out.clearBuffer();
+      if (pageContext != null) pageContext.handlePageException(t);
+    } finally {
+      if (_jspxFactory != null) _jspxFactory.releasePageContext(pageContext);
+    }
+  }
+
+  private boolean _jspx_meth_tiles_getAsString_0(javax.servlet.jsp.PageContext pageContext)
+          throws Throwable {
+    JspWriter out = pageContext.getOut();
+    /* ----  tiles:getAsString ---- */
+    org.apache.struts.taglib.tiles.GetAttributeTag _jspx_th_tiles_getAsString_0 = (org.apache.struts.taglib.tiles.GetAttributeTag) _jspx_tagPool_tiles_getAsString_name.get(org.apache.struts.taglib.tiles.GetAttributeTag.class);
+    _jspx_th_tiles_getAsString_0.setPageContext(pageContext);
+    _jspx_th_tiles_getAsString_0.setParent(null);
+    _jspx_th_tiles_getAsString_0.setName("title");
+    int _jspx_eval_tiles_getAsString_0 = _jspx_th_tiles_getAsString_0.doStartTag();
+    if (_jspx_th_tiles_getAsString_0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+      return true;
+    _jspx_tagPool_tiles_getAsString_name.reuse(_jspx_th_tiles_getAsString_0);
+    return false;
+  }
+
+  private boolean _jspx_meth_html_base_0(javax.servlet.jsp.PageContext pageContext)
+          throws Throwable {
+    JspWriter out = pageContext.getOut();
+    /* ----  html:base ---- */
+    org.apache.struts.taglib.html.BaseTag _jspx_th_html_base_0 = (org.apache.struts.taglib.html.BaseTag) _jspx_tagPool_html_base.get(org.apache.struts.taglib.html.BaseTag.class);
+    _jspx_th_html_base_0.setPageContext(pageContext);
+    _jspx_th_html_base_0.setParent(null);
+    int _jspx_eval_html_base_0 = _jspx_th_html_base_0.doStartTag();
+    if (_jspx_th_html_base_0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+      return true;
+    _jspx_tagPool_html_base.reuse(_jspx_th_html_base_0);
+    return false;
+  }
+
+  private boolean _jspx_meth_html_rewrite_0(javax.servlet.jsp.PageContext pageContext)
+          throws Throwable {
+    JspWriter out = pageContext.getOut();
+    /* ----  html:rewrite ---- */
+    org.apache.struts.taglib.html.RewriteTag _jspx_th_html_rewrite_0 = (org.apache.struts.taglib.html.RewriteTag) _jspx_tagPool_html_rewrite_page.get(org.apache.struts.taglib.html.RewriteTag.class);
+    _jspx_th_html_rewrite_0.setPageContext(pageContext);
+    _jspx_th_html_rewrite_0.setParent(null);
+    _jspx_th_html_rewrite_0.setPage("/style.css");
+    int _jspx_eval_html_rewrite_0 = _jspx_th_html_rewrite_0.doStartTag();
+    if (_jspx_th_html_rewrite_0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+      return true;
+    _jspx_tagPool_html_rewrite_page.reuse(_jspx_th_html_rewrite_0);
+    return false;
+  }
+
+  private boolean _jspx_meth_html_img_0(javax.servlet.jsp.PageContext pageContext)
+          throws Throwable {
+    JspWriter out = pageContext.getOut();
+    /* ----  html:img ---- */
+    org.apache.struts.taglib.html.ImgTag _jspx_th_html_img_0 = (org.apache.struts.taglib.html.ImgTag) _jspx_tagPool_html_img_page_alt.get(org.apache.struts.taglib.html.ImgTag.class);
+    _jspx_th_html_img_0.setPageContext(pageContext);
+    _jspx_th_html_img_0.setParent(null);
+    _jspx_th_html_img_0.setPage("/images/1pxtrans.gif");
+    _jspx_th_html_img_0.setAlt("");
+    int _jspx_eval_html_img_0 = _jspx_th_html_img_0.doStartTag();
+    if (_jspx_th_html_img_0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+      return true;
+    _jspx_tagPool_html_img_page_alt.reuse(_jspx_th_html_img_0);
+    return false;
+  }
+
+  private boolean _jspx_meth_logic_present_0(javax.servlet.jsp.PageContext pageContext)
+          throws Throwable {
+    JspWriter out = pageContext.getOut();
+    /* ----  logic:present ---- */
+    org.apache.struts.taglib.logic.PresentTag _jspx_th_logic_present_0 = (org.apache.struts.taglib.logic.PresentTag) _jspx_tagPool_logic_present_name.get(org.apache.struts.taglib.logic.PresentTag.class);
+    _jspx_th_logic_present_0.setPageContext(pageContext);
+    _jspx_th_logic_present_0.setParent(null);
+    _jspx_th_logic_present_0.setName("user");
+    int _jspx_eval_logic_present_0 = _jspx_th_logic_present_0.doStartTag();
+    if (_jspx_eval_logic_present_0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
+      do {
+        out.write("\r\n                        ");
+        out.write("<span class=\"pref\">\r\n                          ");
+        if (_jspx_meth_html_link_0(_jspx_th_logic_present_0, pageContext))
+          return true;
+        out.write("&nbsp;\r\n                          ");
+        if (_jspx_meth_html_link_1(_jspx_th_logic_present_0, pageContext))
+          return true;
+        out.write("&nbsp;\r\n                          ");
+        if (_jspx_meth_html_link_2(_jspx_th_logic_present_0, pageContext))
+          return true;
+        out.write("\r\n                        ");
+        out.write("</span>\r\n\r\n                      ");
+        int evalDoAfterBody = _jspx_th_logic_present_0.doAfterBody();
+        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
+          break;
+      } while (true);
+    }
+    if (_jspx_th_logic_present_0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+      return true;
+    _jspx_tagPool_logic_present_name.reuse(_jspx_th_logic_present_0);
+    return false;
+  }
+
+  private boolean _jspx_meth_html_link_0(javax.servlet.jsp.tagext.Tag _jspx_th_logic_present_0, javax.servlet.jsp.PageContext pageContext)
+          throws Throwable {
+    JspWriter out = pageContext.getOut();
+    /* ----  html:link ---- */
+    org.apache.struts.taglib.html.LinkTag _jspx_th_html_link_0 = (org.apache.struts.taglib.html.LinkTag) _jspx_tagPool_html_link_forward.get(org.apache.struts.taglib.html.LinkTag.class);
+    _jspx_th_html_link_0.setPageContext(pageContext);
+    _jspx_th_html_link_0.setParent(_jspx_th_logic_present_0);
+    _jspx_th_html_link_0.setForward("pref");
+    int _jspx_eval_html_link_0 = _jspx_th_html_link_0.doStartTag();
+    if (_jspx_eval_html_link_0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
+      if (_jspx_eval_html_link_0 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE) {
+        javax.servlet.jsp.tagext.BodyContent _bc = pageContext.pushBody();
+        out = _bc;
+        _jspx_th_html_link_0.setBodyContent(_bc);
+        _jspx_th_html_link_0.doInitBody();
+      }
+      do {
+        out.write("Meine Daten");
+        int evalDoAfterBody = _jspx_th_html_link_0.doAfterBody();
+        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
+          break;
+      } while (true);
+      if (_jspx_eval_html_link_0 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE)
+        out = pageContext.popBody();
+    }
+    if (_jspx_th_html_link_0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+      return true;
+    _jspx_tagPool_html_link_forward.reuse(_jspx_th_html_link_0);
+    return false;
+  }
+
+  private boolean _jspx_meth_html_link_1(javax.servlet.jsp.tagext.Tag _jspx_th_logic_present_0, javax.servlet.jsp.PageContext pageContext)
+          throws Throwable {
+    JspWriter out = pageContext.getOut();
+    /* ----  html:link ---- */
+    org.apache.struts.taglib.html.LinkTag _jspx_th_html_link_1 = (org.apache.struts.taglib.html.LinkTag) _jspx_tagPool_html_link_forward.get(org.apache.struts.taglib.html.LinkTag.class);
+    _jspx_th_html_link_1.setPageContext(pageContext);
+    _jspx_th_html_link_1.setParent(_jspx_th_logic_present_0);
+    _jspx_th_html_link_1.setForward("basket");
+    int _jspx_eval_html_link_1 = _jspx_th_html_link_1.doStartTag();
+    if (_jspx_eval_html_link_1 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
+      if (_jspx_eval_html_link_1 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE) {
+        javax.servlet.jsp.tagext.BodyContent _bc = pageContext.pushBody();
+        out = _bc;
+        _jspx_th_html_link_1.setBodyContent(_bc);
+        _jspx_th_html_link_1.doInitBody();
+      }
+      do {
+        out.write("Warenkorb");
+        int evalDoAfterBody = _jspx_th_html_link_1.doAfterBody();
+        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
+          break;
+      } while (true);
+      if (_jspx_eval_html_link_1 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE)
+        out = pageContext.popBody();
+    }
+    if (_jspx_th_html_link_1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+      return true;
+    _jspx_tagPool_html_link_forward.reuse(_jspx_th_html_link_1);
+    return false;
+  }
+
+  private boolean _jspx_meth_html_link_2(javax.servlet.jsp.tagext.Tag _jspx_th_logic_present_0, javax.servlet.jsp.PageContext pageContext)
+          throws Throwable {
+    JspWriter out = pageContext.getOut();
+    /* ----  html:link ---- */
+    org.apache.struts.taglib.html.LinkTag _jspx_th_html_link_2 = (org.apache.struts.taglib.html.LinkTag) _jspx_tagPool_html_link_forward.get(org.apache.struts.taglib.html.LinkTag.class);
+    _jspx_th_html_link_2.setPageContext(pageContext);
+    _jspx_th_html_link_2.setParent(_jspx_th_logic_present_0);
+    _jspx_th_html_link_2.setForward("logout");
+    int _jspx_eval_html_link_2 = _jspx_th_html_link_2.doStartTag();
+    if (_jspx_eval_html_link_2 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
+      if (_jspx_eval_html_link_2 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE) {
+        javax.servlet.jsp.tagext.BodyContent _bc = pageContext.pushBody();
+        out = _bc;
+        _jspx_th_html_link_2.setBodyContent(_bc);
+        _jspx_th_html_link_2.doInitBody();
+      }
+      do {
+        out.write("Logout");
+        int evalDoAfterBody = _jspx_th_html_link_2.doAfterBody();
+        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
+          break;
+      } while (true);
+      if (_jspx_eval_html_link_2 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE)
+        out = pageContext.popBody();
+    }
+    if (_jspx_th_html_link_2.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+      return true;
+    _jspx_tagPool_html_link_forward.reuse(_jspx_th_html_link_2);
+    return false;
+  }
+
+  private boolean _jspx_meth_logic_notPresent_0(javax.servlet.jsp.PageContext pageContext)
+          throws Throwable {
+    JspWriter out = pageContext.getOut();
+    /* ----  logic:notPresent ---- */
+    org.apache.struts.taglib.logic.NotPresentTag _jspx_th_logic_notPresent_0 = (org.apache.struts.taglib.logic.NotPresentTag) _jspx_tagPool_logic_notPresent_scope_name.get(org.apache.struts.taglib.logic.NotPresentTag.class);
+    _jspx_th_logic_notPresent_0.setPageContext(pageContext);
+    _jspx_th_logic_notPresent_0.setParent(null);
+    _jspx_th_logic_notPresent_0.setScope("session");
+    _jspx_th_logic_notPresent_0.setName("user");
+    int _jspx_eval_logic_notPresent_0 = _jspx_th_logic_notPresent_0.doStartTag();
+    if (_jspx_eval_logic_notPresent_0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
+      do {
+        out.write("\r\n                        ");
+        if (_jspx_meth_html_form_0(_jspx_th_logic_notPresent_0, pageContext))
+          return true;
+        out.write("\r\n                      ");
+        int evalDoAfterBody = _jspx_th_logic_notPresent_0.doAfterBody();
+        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
+          break;
+      } while (true);
+    }
+    if (_jspx_th_logic_notPresent_0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+      return true;
+    _jspx_tagPool_logic_notPresent_scope_name.reuse(_jspx_th_logic_notPresent_0);
+    return false;
+  }
+
+  private boolean _jspx_meth_html_form_0(javax.servlet.jsp.tagext.Tag _jspx_th_logic_notPresent_0, javax.servlet.jsp.PageContext pageContext)
+          throws Throwable {
+    JspWriter out = pageContext.getOut();
+    /* ----  html:form ---- */
+    org.apache.struts.taglib.html.FormTag _jspx_th_html_form_0 = (org.apache.struts.taglib.html.FormTag) _jspx_tagPool_html_form_method_focus_action.get(org.apache.struts.taglib.html.FormTag.class);
+    _jspx_th_html_form_0.setPageContext(pageContext);
+    _jspx_th_html_form_0.setParent(_jspx_th_logic_notPresent_0);
+    _jspx_th_html_form_0.setAction("/LogonSubmit");
+    _jspx_th_html_form_0.setFocus("username");
+    _jspx_th_html_form_0.setMethod("post");
+    int _jspx_eval_html_form_0 = _jspx_th_html_form_0.doStartTag();
+    if (_jspx_eval_html_form_0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
+      do {
+        out.write("\r\n                          ");
+        out.write("<span class=\"login_label\">Benutzername:");
+        out.write("</span>\r\n                          ");
+        if (_jspx_meth_html_text_0(_jspx_th_html_form_0, pageContext))
+          return true;
+        out.write("\r\n                          ");
+        out.write("<span class=\"login_label\">Password:");
+        out.write("</span>\r\n                          ");
+        if (_jspx_meth_html_password_0(_jspx_th_html_form_0, pageContext))
+          return true;
+        out.write("\r\n                          ");
+        if (_jspx_meth_html_submit_0(_jspx_th_html_form_0, pageContext))
+          return true;
+        out.write("\r\n                        ");
+        int evalDoAfterBody = _jspx_th_html_form_0.doAfterBody();
+        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
+          break;
+      } while (true);
+    }
+    if (_jspx_th_html_form_0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+      return true;
+    _jspx_tagPool_html_form_method_focus_action.reuse(_jspx_th_html_form_0);
+    return false;
+  }
+
+  private boolean _jspx_meth_html_text_0(javax.servlet.jsp.tagext.Tag _jspx_th_html_form_0, javax.servlet.jsp.PageContext pageContext)
+          throws Throwable {
+    JspWriter out = pageContext.getOut();
+    /* ----  html:text ---- */
+    org.apache.struts.taglib.html.TextTag _jspx_th_html_text_0 = (org.apache.struts.taglib.html.TextTag) _jspx_tagPool_html_text_styleClass_size_property.get(org.apache.struts.taglib.html.TextTag.class);
+    _jspx_th_html_text_0.setPageContext(pageContext);
+    _jspx_th_html_text_0.setParent(_jspx_th_html_form_0);
+    _jspx_th_html_text_0.setProperty("username");
+    _jspx_th_html_text_0.setSize("13");
+    _jspx_th_html_text_0.setStyleClass("login");
+    int _jspx_eval_html_text_0 = _jspx_th_html_text_0.doStartTag();
+    if (_jspx_th_html_text_0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+      return true;
+    _jspx_tagPool_html_text_styleClass_size_property.reuse(_jspx_th_html_text_0);
+    return false;
+  }
+
+  private boolean _jspx_meth_html_password_0(javax.servlet.jsp.tagext.Tag _jspx_th_html_form_0, javax.servlet.jsp.PageContext pageContext)
+          throws Throwable {
+    JspWriter out = pageContext.getOut();
+    /* ----  html:password ---- */
+    org.apache.struts.taglib.html.PasswordTag _jspx_th_html_password_0 = (org.apache.struts.taglib.html.PasswordTag) _jspx_tagPool_html_password_styleClass_size_redisplay_property.get(org.apache.struts.taglib.html.PasswordTag.class);
+    _jspx_th_html_password_0.setPageContext(pageContext);
+    _jspx_th_html_password_0.setParent(_jspx_th_html_form_0);
+    _jspx_th_html_password_0.setProperty("password");
+    _jspx_th_html_password_0.setSize("13");
+    _jspx_th_html_password_0.setStyleClass("login");
+    _jspx_th_html_password_0.setRedisplay(false);
+    int _jspx_eval_html_password_0 = _jspx_th_html_password_0.doStartTag();
+    if (_jspx_th_html_password_0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+      return true;
+    _jspx_tagPool_html_password_styleClass_size_redisplay_property.reuse(_jspx_th_html_password_0);
+    return false;
+  }
+
+  private boolean _jspx_meth_html_submit_0(javax.servlet.jsp.tagext.Tag _jspx_th_html_form_0, javax.servlet.jsp.PageContext pageContext)
+          throws Throwable {
+    JspWriter out = pageContext.getOut();
+    /* ----  html:submit ---- */
+    org.apache.struts.taglib.html.SubmitTag _jspx_th_html_submit_0 = (org.apache.struts.taglib.html.SubmitTag) _jspx_tagPool_html_submit_value_styleClass.get(org.apache.struts.taglib.html.SubmitTag.class);
+    _jspx_th_html_submit_0.setPageContext(pageContext);
+    _jspx_th_html_submit_0.setParent(_jspx_th_html_form_0);
+    _jspx_th_html_submit_0.setStyleClass("submit_search");
+    _jspx_th_html_submit_0.setValue("login");
+    int _jspx_eval_html_submit_0 = _jspx_th_html_submit_0.doStartTag();
+    if (_jspx_th_html_submit_0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+      return true;
+    _jspx_tagPool_html_submit_value_styleClass.reuse(_jspx_th_html_submit_0);
+    return false;
+  }
+
+  private boolean _jspx_meth_html_link_3(javax.servlet.jsp.PageContext pageContext)
+          throws Throwable {
+    JspWriter out = pageContext.getOut();
+    /* ----  html:link ---- */
+    org.apache.struts.taglib.html.LinkTag _jspx_th_html_link_3 = (org.apache.struts.taglib.html.LinkTag) _jspx_tagPool_html_link_forward.get(org.apache.struts.taglib.html.LinkTag.class);
+    _jspx_th_html_link_3.setPageContext(pageContext);
+    _jspx_th_html_link_3.setParent(null);
+    _jspx_th_html_link_3.setForward("search/new");
+    int _jspx_eval_html_link_3 = _jspx_th_html_link_3.doStartTag();
+    if (_jspx_eval_html_link_3 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
+      if (_jspx_eval_html_link_3 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE) {
+        javax.servlet.jsp.tagext.BodyContent _bc = pageContext.pushBody();
+        out = _bc;
+        _jspx_th_html_link_3.setBodyContent(_bc);
+        _jspx_th_html_link_3.doInitBody();
+      }
+      do {
+        out.write("Neuheiten");
+        int evalDoAfterBody = _jspx_th_html_link_3.doAfterBody();
+        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
+          break;
+      } while (true);
+      if (_jspx_eval_html_link_3 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE)
+        out = pageContext.popBody();
+    }
+    if (_jspx_th_html_link_3.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+      return true;
+    _jspx_tagPool_html_link_forward.reuse(_jspx_th_html_link_3);
+    return false;
+  }
+
+  private boolean _jspx_meth_html_link_4(javax.servlet.jsp.PageContext pageContext)
+          throws Throwable {
+    JspWriter out = pageContext.getOut();
+    /* ----  html:link ---- */
+    org.apache.struts.taglib.html.LinkTag _jspx_th_html_link_4 = (org.apache.struts.taglib.html.LinkTag) _jspx_tagPool_html_link_forward.get(org.apache.struts.taglib.html.LinkTag.class);
+    _jspx_th_html_link_4.setPageContext(pageContext);
+    _jspx_th_html_link_4.setParent(null);
+    _jspx_th_html_link_4.setForward("search/top10month");
+    int _jspx_eval_html_link_4 = _jspx_th_html_link_4.doStartTag();
+    if (_jspx_eval_html_link_4 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
+      if (_jspx_eval_html_link_4 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE) {
+        javax.servlet.jsp.tagext.BodyContent _bc = pageContext.pushBody();
+        out = _bc;
+        _jspx_th_html_link_4.setBodyContent(_bc);
+        _jspx_th_html_link_4.doInitBody();
+      }
+      do {
+        out.write("Top 10 Monat");
+        int evalDoAfterBody = _jspx_th_html_link_4.doAfterBody();
+        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
+          break;
+      } while (true);
+      if (_jspx_eval_html_link_4 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE)
+        out = pageContext.popBody();
+    }
+    if (_jspx_th_html_link_4.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+      return true;
+    _jspx_tagPool_html_link_forward.reuse(_jspx_th_html_link_4);
+    return false;
+  }
+
+  private boolean _jspx_meth_html_link_5(javax.servlet.jsp.PageContext pageContext)
+          throws Throwable {
+    JspWriter out = pageContext.getOut();
+    /* ----  html:link ---- */
+    org.apache.struts.taglib.html.LinkTag _jspx_th_html_link_5 = (org.apache.struts.taglib.html.LinkTag) _jspx_tagPool_html_link_forward.get(org.apache.struts.taglib.html.LinkTag.class);
+    _jspx_th_html_link_5.setPageContext(pageContext);
+    _jspx_th_html_link_5.setParent(null);
+    _jspx_th_html_link_5.setForward("search/top100year");
+    int _jspx_eval_html_link_5 = _jspx_th_html_link_5.doStartTag();
+    if (_jspx_eval_html_link_5 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
+      if (_jspx_eval_html_link_5 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE) {
+        javax.servlet.jsp.tagext.BodyContent _bc = pageContext.pushBody();
+        out = _bc;
+        _jspx_th_html_link_5.setBodyContent(_bc);
+        _jspx_th_html_link_5.doInitBody();
+      }
+      do {
+        out.write("Top 100 Jahr");
+        int evalDoAfterBody = _jspx_th_html_link_5.doAfterBody();
+        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
+          break;
+      } while (true);
+      if (_jspx_eval_html_link_5 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE)
+        out = pageContext.popBody();
+    }
+    if (_jspx_th_html_link_5.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+      return true;
+    _jspx_tagPool_html_link_forward.reuse(_jspx_th_html_link_5);
+    return false;
+  }
+
+  private boolean _jspx_meth_html_link_6(javax.servlet.jsp.PageContext pageContext)
+          throws Throwable {
+    JspWriter out = pageContext.getOut();
+    /* ----  html:link ---- */
+    org.apache.struts.taglib.html.LinkTag _jspx_th_html_link_6 = (org.apache.struts.taglib.html.LinkTag) _jspx_tagPool_html_link_forward.get(org.apache.struts.taglib.html.LinkTag.class);
+    _jspx_th_html_link_6.setPageContext(pageContext);
+    _jspx_th_html_link_6.setParent(null);
+    _jspx_th_html_link_6.setForward("search/preview");
+    int _jspx_eval_html_link_6 = _jspx_th_html_link_6.doStartTag();
+    if (_jspx_eval_html_link_6 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
+      if (_jspx_eval_html_link_6 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE) {
+        javax.servlet.jsp.tagext.BodyContent _bc = pageContext.pushBody();
+        out = _bc;
+        _jspx_th_html_link_6.setBodyContent(_bc);
+        _jspx_th_html_link_6.doInitBody();
+      }
+      do {
+        out.write("Vorschau");
+        int evalDoAfterBody = _jspx_th_html_link_6.doAfterBody();
+        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
+          break;
+      } while (true);
+      if (_jspx_eval_html_link_6 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE)
+        out = pageContext.popBody();
+    }
+    if (_jspx_th_html_link_6.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+      return true;
+    _jspx_tagPool_html_link_forward.reuse(_jspx_th_html_link_6);
+    return false;
+  }
+
+  private boolean _jspx_meth_html_form_1(javax.servlet.jsp.PageContext pageContext)
+          throws Throwable {
+    JspWriter out = pageContext.getOut();
+    /* ----  html:form ---- */
+    org.apache.struts.taglib.html.FormTag _jspx_th_html_form_1 = (org.apache.struts.taglib.html.FormTag) _jspx_tagPool_html_form_method_focus_action.get(org.apache.struts.taglib.html.FormTag.class);
+    _jspx_th_html_form_1.setPageContext(pageContext);
+    _jspx_th_html_form_1.setParent(null);
+    _jspx_th_html_form_1.setAction("/SearchSubmit");
+    _jspx_th_html_form_1.setFocus("username");
+    _jspx_th_html_form_1.setMethod("post");
+    int _jspx_eval_html_form_1 = _jspx_th_html_form_1.doStartTag();
+    if (_jspx_eval_html_form_1 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
+      do {
+        out.write("\r\n                    ");
+        if (_jspx_meth_html_text_1(_jspx_th_html_form_1, pageContext))
+          return true;
+        out.write("\r\n                  ");
+        out.write("</td>\r\n                ");
+        out.write("</tr>\r\n                ");
+        out.write("<tr>\r\n                  ");
+        out.write("<td>\r\n\r\n                    ");
+        if (_jspx_meth_html_select_0(_jspx_th_html_form_1, pageContext))
+          return true;
+        out.write("\r\n\r\n                  ");
+        out.write("</td>\r\n                  ");
+        out.write("<td>\r\n                    ");
+        if (_jspx_meth_html_submit_1(_jspx_th_html_form_1, pageContext))
+          return true;
+        out.write("\r\n                  ");
+        int evalDoAfterBody = _jspx_th_html_form_1.doAfterBody();
+        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
+          break;
+      } while (true);
+    }
+    if (_jspx_th_html_form_1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+      return true;
+    _jspx_tagPool_html_form_method_focus_action.reuse(_jspx_th_html_form_1);
+    return false;
+  }
+
+  private boolean _jspx_meth_html_text_1(javax.servlet.jsp.tagext.Tag _jspx_th_html_form_1, javax.servlet.jsp.PageContext pageContext)
+          throws Throwable {
+    JspWriter out = pageContext.getOut();
+    /* ----  html:text ---- */
+    org.apache.struts.taglib.html.TextTag _jspx_th_html_text_1 = (org.apache.struts.taglib.html.TextTag) _jspx_tagPool_html_text_styleClass_size_property.get(org.apache.struts.taglib.html.TextTag.class);
+    _jspx_th_html_text_1.setPageContext(pageContext);
+    _jspx_th_html_text_1.setParent(_jspx_th_html_form_1);
+    _jspx_th_html_text_1.setProperty("searchfor");
+    _jspx_th_html_text_1.setSize("13");
+    _jspx_th_html_text_1.setStyleClass("login");
+    int _jspx_eval_html_text_1 = _jspx_th_html_text_1.doStartTag();
+    if (_jspx_th_html_text_1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+      return true;
+    _jspx_tagPool_html_text_styleClass_size_property.reuse(_jspx_th_html_text_1);
+    return false;
+  }
+
+  private boolean _jspx_meth_html_select_0(javax.servlet.jsp.tagext.Tag _jspx_th_html_form_1, javax.servlet.jsp.PageContext pageContext)
+          throws Throwable {
+    JspWriter out = pageContext.getOut();
+    /* ----  html:select ---- */
+    org.apache.struts.taglib.html.SelectTag _jspx_th_html_select_0 = (org.apache.struts.taglib.html.SelectTag) _jspx_tagPool_html_select_size_property_multiple.get(org.apache.struts.taglib.html.SelectTag.class);
+    _jspx_th_html_select_0.setPageContext(pageContext);
+    _jspx_th_html_select_0.setParent(_jspx_th_html_form_1);
+    _jspx_th_html_select_0.setProperty("selectName");
+    _jspx_th_html_select_0.setSize("1");
+    _jspx_th_html_select_0.setMultiple("false");
+    int _jspx_eval_html_select_0 = _jspx_th_html_select_0.doStartTag();
+    if (_jspx_eval_html_select_0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
+      if (_jspx_eval_html_select_0 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE) {
+        javax.servlet.jsp.tagext.BodyContent _bc = pageContext.pushBody();
+        out = _bc;
+        _jspx_th_html_select_0.setBodyContent(_bc);
+        _jspx_th_html_select_0.doInitBody();
+      }
+      do {
+        out.write("\r\n                      ");
+        if (_jspx_meth_html_option_0(_jspx_th_html_select_0, pageContext))
+          return true;
+        out.write("\r\n                      ");
+        if (_jspx_meth_html_option_1(_jspx_th_html_select_0, pageContext))
+          return true;
+        out.write("\r\n                      ");
+        if (_jspx_meth_html_option_2(_jspx_th_html_select_0, pageContext))
+          return true;
+        out.write("\r\n                      ");
+        if (_jspx_meth_html_option_3(_jspx_th_html_select_0, pageContext))
+          return true;
+        out.write("\r\n                    ");
+        int evalDoAfterBody = _jspx_th_html_select_0.doAfterBody();
+        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
+          break;
+      } while (true);
+      if (_jspx_eval_html_select_0 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE)
+        out = pageContext.popBody();
+    }
+    if (_jspx_th_html_select_0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+      return true;
+    _jspx_tagPool_html_select_size_property_multiple.reuse(_jspx_th_html_select_0);
+    return false;
+  }
+
+  private boolean _jspx_meth_html_option_0(javax.servlet.jsp.tagext.Tag _jspx_th_html_select_0, javax.servlet.jsp.PageContext pageContext)
+          throws Throwable {
+    JspWriter out = pageContext.getOut();
+    /* ----  html:option ---- */
+    org.apache.struts.taglib.html.OptionTag _jspx_th_html_option_0 = (org.apache.struts.taglib.html.OptionTag) _jspx_tagPool_html_option_value.get(org.apache.struts.taglib.html.OptionTag.class);
+    _jspx_th_html_option_0.setPageContext(pageContext);
+    _jspx_th_html_option_0.setParent(_jspx_th_html_select_0);
+    _jspx_th_html_option_0.setValue("0");
+    int _jspx_eval_html_option_0 = _jspx_th_html_option_0.doStartTag();
+    if (_jspx_eval_html_option_0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
+      if (_jspx_eval_html_option_0 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE) {
+        javax.servlet.jsp.tagext.BodyContent _bc = pageContext.pushBody();
+        out = _bc;
+        _jspx_th_html_option_0.setBodyContent(_bc);
+        _jspx_th_html_option_0.doInitBody();
+      }
+      do {
+        out.write("all");
+        int evalDoAfterBody = _jspx_th_html_option_0.doAfterBody();
+        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
+          break;
+      } while (true);
+      if (_jspx_eval_html_option_0 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE)
+        out = pageContext.popBody();
+    }
+    if (_jspx_th_html_option_0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+      return true;
+    _jspx_tagPool_html_option_value.reuse(_jspx_th_html_option_0);
+    return false;
+  }
+
+  private boolean _jspx_meth_html_option_1(javax.servlet.jsp.tagext.Tag _jspx_th_html_select_0, javax.servlet.jsp.PageContext pageContext)
+          throws Throwable {
+    JspWriter out = pageContext.getOut();
+    /* ----  html:option ---- */
+    org.apache.struts.taglib.html.OptionTag _jspx_th_html_option_1 = (org.apache.struts.taglib.html.OptionTag) _jspx_tagPool_html_option_value.get(org.apache.struts.taglib.html.OptionTag.class);
+    _jspx_th_html_option_1.setPageContext(pageContext);
+    _jspx_th_html_option_1.setParent(_jspx_th_html_select_0);
+    _jspx_th_html_option_1.setValue("1");
+    int _jspx_eval_html_option_1 = _jspx_th_html_option_1.doStartTag();
+    if (_jspx_eval_html_option_1 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
+      if (_jspx_eval_html_option_1 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE) {
+        javax.servlet.jsp.tagext.BodyContent _bc = pageContext.pushBody();
+        out = _bc;
+        _jspx_th_html_option_1.setBodyContent(_bc);
+        _jspx_th_html_option_1.doInitBody();
+      }
+      do {
+        out.write("Movie");
+        int evalDoAfterBody = _jspx_th_html_option_1.doAfterBody();
+        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
+          break;
+      } while (true);
+      if (_jspx_eval_html_option_1 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE)
+        out = pageContext.popBody();
+    }
+    if (_jspx_th_html_option_1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+      return true;
+    _jspx_tagPool_html_option_value.reuse(_jspx_th_html_option_1);
+    return false;
+  }
+
+  private boolean _jspx_meth_html_option_2(javax.servlet.jsp.tagext.Tag _jspx_th_html_select_0, javax.servlet.jsp.PageContext pageContext)
+          throws Throwable {
+    JspWriter out = pageContext.getOut();
+    /* ----  html:option ---- */
+    org.apache.struts.taglib.html.OptionTag _jspx_th_html_option_2 = (org.apache.struts.taglib.html.OptionTag) _jspx_tagPool_html_option_value.get(org.apache.struts.taglib.html.OptionTag.class);
+    _jspx_th_html_option_2.setPageContext(pageContext);
+    _jspx_th_html_option_2.setParent(_jspx_th_html_select_0);
+    _jspx_th_html_option_2.setValue("2");
+    int _jspx_eval_html_option_2 = _jspx_th_html_option_2.doStartTag();
+    if (_jspx_eval_html_option_2 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
+      if (_jspx_eval_html_option_2 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE) {
+        javax.servlet.jsp.tagext.BodyContent _bc = pageContext.pushBody();
+        out = _bc;
+        _jspx_th_html_option_2.setBodyContent(_bc);
+        _jspx_th_html_option_2.doInitBody();
+      }
+      do {
+        out.write("Artist");
+        int evalDoAfterBody = _jspx_th_html_option_2.doAfterBody();
+        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
+          break;
+      } while (true);
+      if (_jspx_eval_html_option_2 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE)
+        out = pageContext.popBody();
+    }
+    if (_jspx_th_html_option_2.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+      return true;
+    _jspx_tagPool_html_option_value.reuse(_jspx_th_html_option_2);
+    return false;
+  }
+
+  private boolean _jspx_meth_html_option_3(javax.servlet.jsp.tagext.Tag _jspx_th_html_select_0, javax.servlet.jsp.PageContext pageContext)
+          throws Throwable {
+    JspWriter out = pageContext.getOut();
+    /* ----  html:option ---- */
+    org.apache.struts.taglib.html.OptionTag _jspx_th_html_option_3 = (org.apache.struts.taglib.html.OptionTag) _jspx_tagPool_html_option_value.get(org.apache.struts.taglib.html.OptionTag.class);
+    _jspx_th_html_option_3.setPageContext(pageContext);
+    _jspx_th_html_option_3.setParent(_jspx_th_html_select_0);
+    _jspx_th_html_option_3.setValue("3");
+    int _jspx_eval_html_option_3 = _jspx_th_html_option_3.doStartTag();
+    if (_jspx_eval_html_option_3 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
+      if (_jspx_eval_html_option_3 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE) {
+        javax.servlet.jsp.tagext.BodyContent _bc = pageContext.pushBody();
+        out = _bc;
+        _jspx_th_html_option_3.setBodyContent(_bc);
+        _jspx_th_html_option_3.doInitBody();
+      }
+      do {
+        out.write("Genre");
+        int evalDoAfterBody = _jspx_th_html_option_3.doAfterBody();
+        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
+          break;
+      } while (true);
+      if (_jspx_eval_html_option_3 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE)
+        out = pageContext.popBody();
+    }
+    if (_jspx_th_html_option_3.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+      return true;
+    _jspx_tagPool_html_option_value.reuse(_jspx_th_html_option_3);
+    return false;
+  }
+
+  private boolean _jspx_meth_html_submit_1(javax.servlet.jsp.tagext.Tag _jspx_th_html_form_1, javax.servlet.jsp.PageContext pageContext)
+          throws Throwable {
+    JspWriter out = pageContext.getOut();
+    /* ----  html:submit ---- */
+    org.apache.struts.taglib.html.SubmitTag _jspx_th_html_submit_1 = (org.apache.struts.taglib.html.SubmitTag) _jspx_tagPool_html_submit_value_styleClass.get(org.apache.struts.taglib.html.SubmitTag.class);
+    _jspx_th_html_submit_1.setPageContext(pageContext);
+    _jspx_th_html_submit_1.setParent(_jspx_th_html_form_1);
+    _jspx_th_html_submit_1.setStyleClass("submit_search");
+    _jspx_th_html_submit_1.setValue("Suche");
+    int _jspx_eval_html_submit_1 = _jspx_th_html_submit_1.doStartTag();
+    if (_jspx_th_html_submit_1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+      return true;
+    _jspx_tagPool_html_submit_value_styleClass.reuse(_jspx_th_html_submit_1);
+    return false;
+  }
+
+  private boolean _jspx_meth_html_errors_0(javax.servlet.jsp.PageContext pageContext)
+          throws Throwable {
+    JspWriter out = pageContext.getOut();
+    /* ----  html:errors ---- */
+    org.apache.struts.taglib.html.ErrorsTag _jspx_th_html_errors_0 = (org.apache.struts.taglib.html.ErrorsTag) _jspx_tagPool_html_errors.get(org.apache.struts.taglib.html.ErrorsTag.class);
+    _jspx_th_html_errors_0.setPageContext(pageContext);
+    _jspx_th_html_errors_0.setParent(null);
+    int _jspx_eval_html_errors_0 = _jspx_th_html_errors_0.doStartTag();
+    if (_jspx_th_html_errors_0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+      return true;
+    _jspx_tagPool_html_errors.reuse(_jspx_th_html_errors_0);
+    return false;
+  }
+
+  private boolean _jspx_meth_tiles_insert_0(javax.servlet.jsp.PageContext pageContext)
+          throws Throwable {
+    JspWriter out = pageContext.getOut();
+    /* ----  tiles:insert ---- */
+    org.apache.struts.taglib.tiles.InsertTag _jspx_th_tiles_insert_0 = (org.apache.struts.taglib.tiles.InsertTag) _jspx_tagPool_tiles_insert_attribute.get(org.apache.struts.taglib.tiles.InsertTag.class);
+    _jspx_th_tiles_insert_0.setPageContext(pageContext);
+    _jspx_th_tiles_insert_0.setParent(null);
+    _jspx_th_tiles_insert_0.setAttribute("contentbody");
+    int _jspx_eval_tiles_insert_0 = _jspx_th_tiles_insert_0.doStartTag();
+    if (_jspx_th_tiles_insert_0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+      return true;
+    _jspx_tagPool_tiles_insert_attribute.reuse(_jspx_th_tiles_insert_0);
+    return false;
+  }
+}

Added: project_src/website/Tomcat/work/web/top10month_jsp.class
===================================================================
(Binary files differ)


Property changes on: project_src/website/Tomcat/work/web/top10month_jsp.class
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/website/Tomcat/work/web/top10month_jsp.java
===================================================================
--- project_src/website/Tomcat/work/web/top10month_jsp.java	2004-12-29 21:54:42 UTC (rev 251)
+++ project_src/website/Tomcat/work/web/top10month_jsp.java	2004-12-29 21:55:56 UTC (rev 252)
@@ -0,0 +1,359 @@
+package org.apache.jsp;
+
+import javax.servlet.*;
+import javax.servlet.http.*;
+import javax.servlet.jsp.*;
+import org.apache.jasper.runtime.*;
+
+public class top10month_jsp extends HttpJspBase {
+
+
+  private static java.util.Vector _jspx_includes;
+
+  private org.apache.jasper.runtime.TagHandlerPool _jspx_tagPool_tiles_insert_page_flush;
+  private org.apache.jasper.runtime.TagHandlerPool _jspx_tagPool_tiles_put_value_name;
+  private org.apache.jasper.runtime.TagHandlerPool _jspx_tagPool_tiles_put_type_name;
+  private org.apache.jasper.runtime.TagHandlerPool _jspx_tagPool_logic_present_name;
+  private org.apache.jasper.runtime.TagHandlerPool _jspx_tagPool_logic_iterate_name_id;
+  private org.apache.jasper.runtime.TagHandlerPool _jspx_tagPool_bean_write_property_name;
+  private org.apache.jasper.runtime.TagHandlerPool _jspx_tagPool_html_link_paramProperty_paramName_paramId_forward;
+
+  public top10month_jsp() {
+    _jspx_tagPool_tiles_insert_page_flush = new org.apache.jasper.runtime.TagHandlerPool();
+    _jspx_tagPool_tiles_put_value_name = new org.apache.jasper.runtime.TagHandlerPool();
+    _jspx_tagPool_tiles_put_type_name = new org.apache.jasper.runtime.TagHandlerPool();
+    _jspx_tagPool_logic_present_name = new org.apache.jasper.runtime.TagHandlerPool();
+    _jspx_tagPool_logic_iterate_name_id = new org.apache.jasper.runtime.TagHandlerPool();
+    _jspx_tagPool_bean_write_property_name = new org.apache.jasper.runtime.TagHandlerPool();
+    _jspx_tagPool_html_link_paramProperty_paramName_paramId_forward = new org.apache.jasper.runtime.TagHandlerPool();
+  }
+
+  public java.util.List getIncludes() {
+    return _jspx_includes;
+  }
+
+  public void _jspDestroy() {
+    _jspx_tagPool_tiles_insert_page_flush.release();
+    _jspx_tagPool_tiles_put_value_name.release();
+    _jspx_tagPool_tiles_put_type_name.release();
+    _jspx_tagPool_logic_present_name.release();
+    _jspx_tagPool_logic_iterate_name_id.release();
+    _jspx_tagPool_bean_write_property_name.release();
+    _jspx_tagPool_html_link_paramProperty_paramName_paramId_forward.release();
+  }
+
+  public void _jspService(HttpServletRequest request, HttpServletResponse response)
+        throws java.io.IOException, ServletException {
+
+    JspFactory _jspxFactory = null;
+    javax.servlet.jsp.PageContext pageContext = null;
+    HttpSession session = null;
+    ServletContext application = null;
+    ServletConfig config = null;
+    JspWriter out = null;
+    Object page = this;
+    JspWriter _jspx_out = null;
+
+
+    try {
+      _jspxFactory = JspFactory.getDefaultFactory();
+      response.setContentType("text/html;charset=ISO-8859-1");
+      pageContext = _jspxFactory.getPageContext(this, request, response,
+      			null, true, 8192, true);
+      application = pageContext.getServletContext();
+      config = pageContext.getServletConfig();
+      session = pageContext.getSession();
+      out = pageContext.getOut();
+      _jspx_out = out;
+
+      out.write("\r\n");
+      out.write("\r\n");
+      out.write("\r\n");
+      out.write("\r\n");
+      /* ----  tiles:insert ---- */
+      org.apache.struts.taglib.tiles.InsertTag _jspx_th_tiles_insert_0 = (org.apache.struts.taglib.tiles.InsertTag) _jspx_tagPool_tiles_insert_page_flush.get(org.apache.struts.taglib.tiles.InsertTag.class);
+      _jspx_th_tiles_insert_0.setPageContext(pageContext);
+      _jspx_th_tiles_insert_0.setParent(null);
+      _jspx_th_tiles_insert_0.setPage("/templates/main.jsp");
+      _jspx_th_tiles_insert_0.setFlush(true);
+      int _jspx_eval_tiles_insert_0 = _jspx_th_tiles_insert_0.doStartTag();
+      if (_jspx_eval_tiles_insert_0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
+        do {
+          out.write("\r\n\r\n");
+          if (_jspx_meth_tiles_put_0(_jspx_th_tiles_insert_0, pageContext))
+            return;
+          out.write("\r\n");
+          if (_jspx_meth_tiles_put_1(_jspx_th_tiles_insert_0, pageContext))
+            return;
+          out.write("\r\n\r\n");
+          /* ----  tiles:put ---- */
+          org.apache.struts.taglib.tiles.PutTag _jspx_th_tiles_put_2 = (org.apache.struts.taglib.tiles.PutTag) _jspx_tagPool_tiles_put_type_name.get(org.apache.struts.taglib.tiles.PutTag.class);
+          _jspx_th_tiles_put_2.setPageContext(pageContext);
+          _jspx_th_tiles_put_2.setParent(_jspx_th_tiles_insert_0);
+          _jspx_th_tiles_put_2.setName("contentbody");
+          _jspx_th_tiles_put_2.setType("string");
+          int _jspx_eval_tiles_put_2 = _jspx_th_tiles_put_2.doStartTag();
+          if (_jspx_eval_tiles_put_2 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
+            if (_jspx_eval_tiles_put_2 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE) {
+              javax.servlet.jsp.tagext.BodyContent _bc = pageContext.pushBody();
+              out = _bc;
+              _jspx_th_tiles_put_2.setBodyContent(_bc);
+              _jspx_th_tiles_put_2.doInitBody();
+            }
+            do {
+              out.write("\r\n\r\n\r\n\r\n");
+              /* ----  logic:present ---- */
+              org.apache.struts.taglib.logic.PresentTag _jspx_th_logic_present_0 = (org.apache.struts.taglib.logic.PresentTag) _jspx_tagPool_logic_present_name.get(org.apache.struts.taglib.logic.PresentTag.class);
+              _jspx_th_logic_present_0.setPageContext(pageContext);
+              _jspx_th_logic_present_0.setParent(_jspx_th_tiles_put_2);
+              _jspx_th_logic_present_0.setName("SearchResults");
+              int _jspx_eval_logic_present_0 = _jspx_th_logic_present_0.doStartTag();
+              if (_jspx_eval_logic_present_0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
+                do {
+                  out.write("\r\n");
+                  out.write("<!--top browse start -->\r\n            ");
+                  out.write("<table style=\"width: 95%; text-align: left;\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\">\r\n              ");
+                  out.write("<tbody>\r\n                ");
+                  out.write("<tr>\r\n                  ");
+                  out.write("<td class=\"prev_page_browse\">&nbsp;&nbsp; ");
+                  out.write("<a href=\"\">&lt;&lt; zur&uuml;ck &lt;&lt;");
+                  out.write("</a>");
+                  out.write("<br>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t");
+                  out.write("</td>\r\n                  ");
+                  out.write("<td class=\"overview_page_browse\" style=\"\">&nbsp;Seite 1 / 5 ");
+                  out.write("<br>\r\n                  ");
+                  out.write("</td>\r\n                  ");
+                  out.write("<td class=\"next_page_browse\">&nbsp;");
+                  out.write("<a href=\"\">&gt;&gt; vor &gt;&gt;");
+                  out.write("</a>&nbsp;&nbsp;");
+                  out.write("<br>\r\n                  ");
+                  out.write("</td>\r\n                ");
+                  out.write("</tr>\r\n              ");
+                  out.write("</tbody>\r\n            ");
+                  out.write("</table>\r\n");
+                  out.write("<!--top browse end -->\r\n\r\n  ");
+                  /* ----  logic:iterate ---- */
+                  org.apache.struts.taglib.logic.IterateTag _jspx_th_logic_iterate_0 = (org.apache.struts.taglib.logic.IterateTag) _jspx_tagPool_logic_iterate_name_id.get(org.apache.struts.taglib.logic.IterateTag.class);
+                  _jspx_th_logic_iterate_0.setPageContext(pageContext);
+                  _jspx_th_logic_iterate_0.setParent(_jspx_th_logic_present_0);
+                  _jspx_th_logic_iterate_0.setId("movie");
+                  _jspx_th_logic_iterate_0.setName("SearchResults");
+                  int _jspx_eval_logic_iterate_0 = _jspx_th_logic_iterate_0.doStartTag();
+                  if (_jspx_eval_logic_iterate_0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
+                    java.lang.Object movie = null;
+                    if (_jspx_eval_logic_iterate_0 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE) {
+                      javax.servlet.jsp.tagext.BodyContent _bc = pageContext.pushBody();
+                      out = _bc;
+                      _jspx_th_logic_iterate_0.setBodyContent(_bc);
+                      _jspx_th_logic_iterate_0.doInitBody();
+                    }
+                    movie = (java.lang.Object) pageContext.findAttribute("movie");
+                    do {
+                      out.write("\r\n\r\n    ");
+                      out.write("<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\">\r\n      ");
+                      out.write("<tbody>\r\n        ");
+                      out.write("<tr>\r\n          ");
+                      out.write("<td align=\"center\" width=\"20%\">");
+                      out.write("<img style=\"width: 75px; height: 75px;\" src=\"\" alt=\"\" border=\"0\">\r\n          ");
+                      out.write("</td>\r\n          ");
+                      out.write("<td>\r\n            ");
+                      out.write("<span class=\"list_title\">");
+                      if (_jspx_meth_bean_write_0(_jspx_th_logic_iterate_0, pageContext))
+                        return;
+                      out.write("</span>\r\n            ");
+                      out.write("<span class=\"list_summary\">");
+                      if (_jspx_meth_bean_write_1(_jspx_th_logic_iterate_0, pageContext))
+                        return;
+                      out.write("\r\n              ");
+                      if (_jspx_meth_html_link_0(_jspx_th_logic_iterate_0, pageContext))
+                        return;
+                      out.write("\r\n            ");
+                      out.write("</span>\r\n          ");
+                      out.write("</td>\r\n          ");
+                      out.write("<td width=\"10%\">\r\n            ");
+                      out.write("<a href=\"#\">Bestellen");
+                      out.write("</a>\r\n          ");
+                      out.write("</td>\r\n        ");
+                      out.write("</tr>\r\n      ");
+                      out.write("</tbody>\r\n    ");
+                      out.write("</table>\r\n  ");
+                      int evalDoAfterBody = _jspx_th_logic_iterate_0.doAfterBody();
+                      movie = (java.lang.Object) pageContext.findAttribute("movie");
+                      if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
+                        break;
+                    } while (true);
+                    if (_jspx_eval_logic_iterate_0 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE)
+                      out = pageContext.popBody();
+                  }
+                  if (_jspx_th_logic_iterate_0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+                    return;
+                  _jspx_tagPool_logic_iterate_name_id.reuse(_jspx_th_logic_iterate_0);
+                  out.write("\r\n\r\n\r\n  ");
+                  out.write("<!--bottom browse start -->\r\n            ");
+                  out.write("<table style=\"width: 95%; text-align: left;\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\">\r\n              ");
+                  out.write("<tbody>\r\n                ");
+                  out.write("<tr>\r\n                  ");
+                  out.write("<td class=\"prev_page_browse\">&nbsp;&nbsp; ");
+                  out.write("<a href=\"\">&lt;&lt; zur&uuml;ck &lt;&lt;");
+                  out.write("</a>");
+                  out.write("<br>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t");
+                  out.write("</td>\r\n                  ");
+                  out.write("<td class=\"overview_page_browse\" style=\"\">&nbsp;Seite 1 / 5 ");
+                  out.write("<br>\r\n                  ");
+                  out.write("<a href=\"\" class=\"single_page_browse\">1");
+                  out.write("</a>&nbsp;&nbsp;\r\n                  ");
+                  out.write("<a href=\"\" class=\"single_page_browse\">2");
+                  out.write("</a>&nbsp;&nbsp;\r\n                  ");
+                  out.write("<a href=\"\" class=\"single_page_browse\">3");
+                  out.write("</a>&nbsp;&nbsp;\r\n                  ");
+                  out.write("<a href=\"\" class=\"single_page_browse\">4");
+                  out.write("</a>&nbsp;&nbsp;\r\n                  ");
+                  out.write("<a href=\"\" class=\"single_page_browse\">5");
+                  out.write("</a>&nbsp;&nbsp;\r\n                  ");
+                  out.write("</td>\r\n                  ");
+                  out.write("<td class=\"next_page_browse\">&nbsp;");
+                  out.write("<a href=\"\">&gt;&gt; vor &gt;&gt;");
+                  out.write("</a>&nbsp;&nbsp;");
+                  out.write("<br>\r\n                  ");
+                  out.write("</td>\r\n                ");
+                  out.write("</tr>\r\n              ");
+                  out.write("</tbody>\r\n            ");
+                  out.write("</table>\r\n");
+                  out.write("<!--bottom browse end -->\r\n\r\n");
+                  int evalDoAfterBody = _jspx_th_logic_present_0.doAfterBody();
+                  if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
+                    break;
+                } while (true);
+              }
+              if (_jspx_th_logic_present_0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+                return;
+              _jspx_tagPool_logic_present_name.reuse(_jspx_th_logic_present_0);
+              out.write("\r\n");
+              int evalDoAfterBody = _jspx_th_tiles_put_2.doAfterBody();
+              if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
+                break;
+            } while (true);
+            if (_jspx_eval_tiles_put_2 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE)
+              out = pageContext.popBody();
+          }
+          if (_jspx_th_tiles_put_2.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+            return;
+          _jspx_tagPool_tiles_put_type_name.reuse(_jspx_th_tiles_put_2);
+          out.write("\r\n\r\n");
+          int evalDoAfterBody = _jspx_th_tiles_insert_0.doAfterBody();
+          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
+            break;
+        } while (true);
+      }
+      if (_jspx_th_tiles_insert_0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+        return;
+      _jspx_tagPool_tiles_insert_page_flush.reuse(_jspx_th_tiles_insert_0);
+      out.write("\r\n");
+    } catch (Throwable t) {
+      out = _jspx_out;
+      if (out != null && out.getBufferSize() != 0)
+        out.clearBuffer();
+      if (pageContext != null) pageContext.handlePageException(t);
+    } finally {
+      if (_jspxFactory != null) _jspxFactory.releasePageContext(pageContext);
+    }
+  }
+
+  private boolean _jspx_meth_tiles_put_0(javax.servlet.jsp.tagext.Tag _jspx_th_tiles_insert_0, javax.servlet.jsp.PageContext pageContext)
+          throws Throwable {
+    JspWriter out = pageContext.getOut();
+    /* ----  tiles:put ---- */
+    org.apache.struts.taglib.tiles.PutTag _jspx_th_tiles_put_0 = (org.apache.struts.taglib.tiles.PutTag) _jspx_tagPool_tiles_put_value_name.get(org.apache.struts.taglib.tiles.PutTag.class);
+    _jspx_th_tiles_put_0.setPageContext(pageContext);
+    _jspx_th_tiles_put_0.setParent(_jspx_th_tiles_insert_0);
+    _jspx_th_tiles_put_0.setName("title");
+    _jspx_th_tiles_put_0.setValue("PROfessional VIdeo RENTalStore");
+    int _jspx_eval_tiles_put_0 = _jspx_th_tiles_put_0.doStartTag();
+    if (_jspx_th_tiles_put_0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+      return true;
+    _jspx_tagPool_tiles_put_value_name.reuse(_jspx_th_tiles_put_0);
+    return false;
+  }
+
+  private boolean _jspx_meth_tiles_put_1(javax.servlet.jsp.tagext.Tag _jspx_th_tiles_insert_0, javax.servlet.jsp.PageContext pageContext)
+          throws Throwable {
+    JspWriter out = pageContext.getOut();
+    /* ----  tiles:put ---- */
+    org.apache.struts.taglib.tiles.PutTag _jspx_th_tiles_put_1 = (org.apache.struts.taglib.tiles.PutTag) _jspx_tagPool_tiles_put_value_name.get(org.apache.struts.taglib.tiles.PutTag.class);
+    _jspx_th_tiles_put_1.setPageContext(pageContext);
+    _jspx_th_tiles_put_1.setParent(_jspx_th_tiles_insert_0);
+    _jspx_th_tiles_put_1.setName("top10month_link");
+    _jspx_th_tiles_put_1.setValue("top10.jsp");
+    int _jspx_eval_tiles_put_1 = _jspx_th_tiles_put_1.doStartTag();
+    if (_jspx_th_tiles_put_1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+      return true;
+    _jspx_tagPool_tiles_put_value_name.reuse(_jspx_th_tiles_put_1);
+    return false;
+  }
+
+  private boolean _jspx_meth_bean_write_0(javax.servlet.jsp.tagext.Tag _jspx_th_logic_iterate_0, javax.servlet.jsp.PageContext pageContext)
+          throws Throwable {
+    JspWriter out = pageContext.getOut();
+    /* ----  bean:write ---- */
+    org.apache.struts.taglib.bean.WriteTag _jspx_th_bean_write_0 = (org.apache.struts.taglib.bean.WriteTag) _jspx_tagPool_bean_write_property_name.get(org.apache.struts.taglib.bean.WriteTag.class);
+    _jspx_th_bean_write_0.setPageContext(pageContext);
+    _jspx_th_bean_write_0.setParent(_jspx_th_logic_iterate_0);
+    _jspx_th_bean_write_0.setName("movie");
+    _jspx_th_bean_write_0.setProperty("title");
+    int _jspx_eval_bean_write_0 = _jspx_th_bean_write_0.doStartTag();
+    if (_jspx_th_bean_write_0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+      return true;
+    _jspx_tagPool_bean_write_property_name.reuse(_jspx_th_bean_write_0);
+    return false;
+  }
+
+  private boolean _jspx_meth_bean_write_1(javax.servlet.jsp.tagext.Tag _jspx_th_logic_iterate_0, javax.servlet.jsp.PageContext pageContext)
+          throws Throwable {
+    JspWriter out = pageContext.getOut();
+    /* ----  bean:write ---- */
+    org.apache.struts.taglib.bean.WriteTag _jspx_th_bean_write_1 = (org.apache.struts.taglib.bean.WriteTag) _jspx_tagPool_bean_write_property_name.get(org.apache.struts.taglib.bean.WriteTag.class);
+    _jspx_th_bean_write_1.setPageContext(pageContext);
+    _jspx_th_bean_write_1.setParent(_jspx_th_logic_iterate_0);
+    _jspx_th_bean_write_1.setName("movie");
+    _jspx_th_bean_write_1.setProperty("describ");
+    int _jspx_eval_bean_write_1 = _jspx_th_bean_write_1.doStartTag();
+    if (_jspx_th_bean_write_1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+      return true;
+    _jspx_tagPool_bean_write_property_name.reuse(_jspx_th_bean_write_1);
+    return false;
+  }
+
+  private boolean _jspx_meth_html_link_0(javax.servlet.jsp.tagext.Tag _jspx_th_logic_iterate_0, javax.servlet.jsp.PageContext pageContext)
+          throws Throwable {
+    JspWriter out = pageContext.getOut();
+    /* ----  html:link ---- */
+    org.apache.struts.taglib.html.LinkTag _jspx_th_html_link_0 = (org.apache.struts.taglib.html.LinkTag) _jspx_tagPool_html_link_paramProperty_paramName_paramId_forward.get(org.apache.struts.taglib.html.LinkTag.class);
+    _jspx_th_html_link_0.setPageContext(pageContext);
+    _jspx_th_html_link_0.setParent(_jspx_th_logic_iterate_0);
+    _jspx_th_html_link_0.setForward("logout");
+    _jspx_th_html_link_0.setParamId("id");
+    _jspx_th_html_link_0.setParamProperty("id");
+    _jspx_th_html_link_0.setParamName("movie");
+    int _jspx_eval_html_link_0 = _jspx_th_html_link_0.doStartTag();
+    if (_jspx_eval_html_link_0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
+      if (_jspx_eval_html_link_0 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE) {
+        javax.servlet.jsp.tagext.BodyContent _bc = pageContext.pushBody();
+        out = _bc;
+        _jspx_th_html_link_0.setBodyContent(_bc);
+        _jspx_th_html_link_0.doInitBody();
+      }
+      do {
+        out.write("\r\n                &gt;&gt;mehr&lt;&lt;\r\n              ");
+        int evalDoAfterBody = _jspx_th_html_link_0.doAfterBody();
+        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
+          break;
+      } while (true);
+      if (_jspx_eval_html_link_0 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE)
+        out = pageContext.popBody();
+    }
+    if (_jspx_th_html_link_0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+      return true;
+    _jspx_tagPool_html_link_paramProperty_paramName_paramId_forward.reuse(_jspx_th_html_link_0);
+    return false;
+  }
+}

Added: project_src/website/classes/ApplicationResources.properties
===================================================================
--- project_src/website/classes/ApplicationResources.properties	2004-12-29 21:54:42 UTC (rev 251)
+++ project_src/website/classes/ApplicationResources.properties	2004-12-29 21:55:56 UTC (rev 252)
@@ -0,0 +1,9 @@
+
+login.error.username.empty=Username leer
+login.error.password.empty=Passwort leer
+
+error.logon.invalid=falsches passwort
+
+
+search.error.searchfor.empty=Suchfeld leer
+search.error.selectName.empty=Suchkategorie leer

Added: project_src/website/classes/Generated Source/.jsp/web/index_0002ejsp_jsp.java
===================================================================
--- project_src/website/classes/Generated Source/.jsp/web/index_0002ejsp_jsp.java	2004-12-29 21:54:42 UTC (rev 251)
+++ project_src/website/classes/Generated Source/.jsp/web/index_0002ejsp_jsp.java	2004-12-29 21:55:56 UTC (rev 252)
@@ -0,0 +1,166 @@
+import javax.servlet.*;
+import javax.servlet.http.*;
+import javax.servlet.jsp.*;
+import org.apache.jasper.runtime.*;
+
+public class index_0002ejsp_jsp extends HttpJspBase {
+
+
+  private static java.util.Vector _jspx_includes;
+
+  private org.apache.jasper.runtime.TagHandlerPool _jspx_tagPool_tiles_insert_page_flush;
+  private org.apache.jasper.runtime.TagHandlerPool _jspx_tagPool_tiles_put_value_name;
+  private org.apache.jasper.runtime.TagHandlerPool _jspx_tagPool_tiles_put_type_name;
+
+  public index_0002ejsp_jsp() {
+    _jspx_tagPool_tiles_insert_page_flush = new org.apache.jasper.runtime.TagHandlerPool();
+    _jspx_tagPool_tiles_put_value_name = new org.apache.jasper.runtime.TagHandlerPool();
+    _jspx_tagPool_tiles_put_type_name = new org.apache.jasper.runtime.TagHandlerPool();
+  }
+
+  public java.util.List getIncludes() {
+    return _jspx_includes;
+  }
+
+  public void _jspDestroy() {
+    _jspx_tagPool_tiles_insert_page_flush.release();
+    _jspx_tagPool_tiles_put_value_name.release();
+    _jspx_tagPool_tiles_put_type_name.release();
+  }
+
+  public void _jspService(HttpServletRequest request, HttpServletResponse response)
+        throws java.io.IOException, ServletException {
+
+    JspFactory _jspxFactory = null;
+    javax.servlet.jsp.PageContext pageContext = null;
+    HttpSession session = null;
+    ServletContext application = null;
+    ServletConfig config = null;
+    JspWriter out = null;
+    Object page = this;
+    JspWriter _jspx_out = null;
+
+
+    try {
+      _jspxFactory = JspFactory.getDefaultFactory();
+      response.setContentType("text/html;charset=ISO-8859-1");
+      pageContext = _jspxFactory.getPageContext(this, request, response,
+      			null, true, 8192, true);
+      application = pageContext.getServletContext();
+      config = pageContext.getServletConfig();
+      session = pageContext.getSession();
+      out = pageContext.getOut();
+      _jspx_out = out;
+
+      out.write("\r\n\r\n");
+      if (_jspx_meth_tiles_insert_0(pageContext))
+        return;
+      out.write("\r\n\r\n\r\n\r\n");
+    } catch (Throwable t) {
+      out = _jspx_out;
+      if (out != null && out.getBufferSize() != 0)
+        out.clearBuffer();
+      if (pageContext != null) pageContext.handlePageException(t);
+    } finally {
+      if (_jspxFactory != null) _jspxFactory.releasePageContext(pageContext);
+    }
+  }
+
+  private boolean _jspx_meth_tiles_insert_0(javax.servlet.jsp.PageContext pageContext)
+          throws Throwable {
+    JspWriter out = pageContext.getOut();
+    /* ----  tiles:insert ---- */
+    org.apache.struts.taglib.tiles.InsertTag _jspx_th_tiles_insert_0 = (org.apache.struts.taglib.tiles.InsertTag) _jspx_tagPool_tiles_insert_page_flush.get(org.apache.struts.taglib.tiles.InsertTag.class);
+    _jspx_th_tiles_insert_0.setPageContext(pageContext);
+    _jspx_th_tiles_insert_0.setParent(null);
+    _jspx_th_tiles_insert_0.setPage("/templates/main.jsp");
+    _jspx_th_tiles_insert_0.setFlush(true);
+    int _jspx_eval_tiles_insert_0 = _jspx_th_tiles_insert_0.doStartTag();
+    if (_jspx_eval_tiles_insert_0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
+      do {
+        out.write("\r\n\r\n");
+        if (_jspx_meth_tiles_put_0(_jspx_th_tiles_insert_0, pageContext))
+          return true;
+        out.write("\r\n");
+        if (_jspx_meth_tiles_put_1(_jspx_th_tiles_insert_0, pageContext))
+          return true;
+        out.write("\r\n\r\n");
+        if (_jspx_meth_tiles_put_2(_jspx_th_tiles_insert_0, pageContext))
+          return true;
+        out.write("\r\n\r\n");
+        int evalDoAfterBody = _jspx_th_tiles_insert_0.doAfterBody();
+        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
+          break;
+      } while (true);
+    }
+    if (_jspx_th_tiles_insert_0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+      return true;
+    _jspx_tagPool_tiles_insert_page_flush.reuse(_jspx_th_tiles_insert_0);
+    return false;
+  }
+
+  private boolean _jspx_meth_tiles_put_0(javax.servlet.jsp.tagext.Tag _jspx_th_tiles_insert_0, javax.servlet.jsp.PageContext pageContext)
+          throws Throwable {
+    JspWriter out = pageContext.getOut();
+    /* ----  tiles:put ---- */
+    org.apache.struts.taglib.tiles.PutTag _jspx_th_tiles_put_0 = (org.apache.struts.taglib.tiles.PutTag) _jspx_tagPool_tiles_put_value_name.get(org.apache.struts.taglib.tiles.PutTag.class);
+    _jspx_th_tiles_put_0.setPageContext(pageContext);
+    _jspx_th_tiles_put_0.setParent(_jspx_th_tiles_insert_0);
+    _jspx_th_tiles_put_0.setName("title");
+    _jspx_th_tiles_put_0.setValue("PROfessional VIdeo RENTalStore");
+    int _jspx_eval_tiles_put_0 = _jspx_th_tiles_put_0.doStartTag();
+    if (_jspx_th_tiles_put_0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+      return true;
+    _jspx_tagPool_tiles_put_value_name.reuse(_jspx_th_tiles_put_0);
+    return false;
+  }
+
+  private boolean _jspx_meth_tiles_put_1(javax.servlet.jsp.tagext.Tag _jspx_th_tiles_insert_0, javax.servlet.jsp.PageContext pageContext)
+          throws Throwable {
+    JspWriter out = pageContext.getOut();
+    /* ----  tiles:put ---- */
+    org.apache.struts.taglib.tiles.PutTag _jspx_th_tiles_put_1 = (org.apache.struts.taglib.tiles.PutTag) _jspx_tagPool_tiles_put_value_name.get(org.apache.struts.taglib.tiles.PutTag.class);
+    _jspx_th_tiles_put_1.setPageContext(pageContext);
+    _jspx_th_tiles_put_1.setParent(_jspx_th_tiles_insert_0);
+    _jspx_th_tiles_put_1.setName("top10month_link");
+    _jspx_th_tiles_put_1.setValue("top10.jsp");
+    int _jspx_eval_tiles_put_1 = _jspx_th_tiles_put_1.doStartTag();
+    if (_jspx_th_tiles_put_1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+      return true;
+    _jspx_tagPool_tiles_put_value_name.reuse(_jspx_th_tiles_put_1);
+    return false;
+  }
+
+  private boolean _jspx_meth_tiles_put_2(javax.servlet.jsp.tagext.Tag _jspx_th_tiles_insert_0, javax.servlet.jsp.PageContext pageContext)
+          throws Throwable {
+    JspWriter out = pageContext.getOut();
+    /* ----  tiles:put ---- */
+    org.apache.struts.taglib.tiles.PutTag _jspx_th_tiles_put_2 = (org.apache.struts.taglib.tiles.PutTag) _jspx_tagPool_tiles_put_type_name.get(org.apache.struts.taglib.tiles.PutTag.class);
+    _jspx_th_tiles_put_2.setPageContext(pageContext);
+    _jspx_th_tiles_put_2.setParent(_jspx_th_tiles_insert_0);
+    _jspx_th_tiles_put_2.setName("contentbody");
+    _jspx_th_tiles_put_2.setType("string");
+    int _jspx_eval_tiles_put_2 = _jspx_th_tiles_put_2.doStartTag();
+    if (_jspx_eval_tiles_put_2 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
+      if (_jspx_eval_tiles_put_2 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE) {
+        javax.servlet.jsp.tagext.BodyContent _bc = pageContext.pushBody();
+        out = _bc;
+        _jspx_th_tiles_put_2.setBodyContent(_bc);
+        _jspx_th_tiles_put_2.doInitBody();
+      }
+      do {
+        out.write("\r\n  Willkommen auf unserer neuen Webseite");
+        out.write("<br/>\r\n");
+        int evalDoAfterBody = _jspx_th_tiles_put_2.doAfterBody();
+        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
+          break;
+      } while (true);
+      if (_jspx_eval_tiles_put_2 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE)
+        out = pageContext.popBody();
+    }
+    if (_jspx_th_tiles_put_2.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+      return true;
+    _jspx_tagPool_tiles_put_type_name.reuse(_jspx_th_tiles_put_2);
+    return false;
+  }
+}

Added: project_src/website/classes/Generated Source/.jsp/web/jsp1_0002ejsp_jsp.java
===================================================================
--- project_src/website/classes/Generated Source/.jsp/web/jsp1_0002ejsp_jsp.java	2004-12-29 21:54:42 UTC (rev 251)
+++ project_src/website/classes/Generated Source/.jsp/web/jsp1_0002ejsp_jsp.java	2004-12-29 21:55:56 UTC (rev 252)
@@ -0,0 +1,58 @@
+import javax.servlet.*;
+import javax.servlet.http.*;
+import javax.servlet.jsp.*;
+import org.apache.jasper.runtime.*;
+
+public class jsp1_0002ejsp_jsp extends HttpJspBase {
+
+
+  private static java.util.Vector _jspx_includes;
+
+  public java.util.List getIncludes() {
+    return _jspx_includes;
+  }
+
+  public void _jspService(HttpServletRequest request, HttpServletResponse response)
+        throws java.io.IOException, ServletException {
+
+    JspFactory _jspxFactory = null;
+    javax.servlet.jsp.PageContext pageContext = null;
+    HttpSession session = null;
+    ServletContext application = null;
+    ServletConfig config = null;
+    JspWriter out = null;
+    Object page = this;
+    JspWriter _jspx_out = null;
+
+
+    try {
+      _jspxFactory = JspFactory.getDefaultFactory();
+      response.setContentType("text/html;charset=ISO-8859-1");
+      pageContext = _jspxFactory.getPageContext(this, request, response,
+      			null, true, 8192, true);
+      application = pageContext.getServletContext();
+      config = pageContext.getServletConfig();
+      session = pageContext.getSession();
+      out = pageContext.getOut();
+      _jspx_out = out;
+
+      out.write("<html>\r\n");
+      out.write("<head>\r\n");
+      out.write("<title>\r\njsp1\r\n");
+      out.write("</title>\r\n");
+      out.write("</head>\r\n");
+      out.write("<body bgcolor=\"#ffffff\">\r\n");
+      out.write("<h1>\r\nJBuilder Generated JSP\r\n");
+      out.write("</h1>\r\n");
+      out.write("</body>\r\n");
+      out.write("</html>\r\n");
+    } catch (Throwable t) {
+      out = _jspx_out;
+      if (out != null && out.getBufferSize() != 0)
+        out.clearBuffer();
+      if (pageContext != null) pageContext.handlePageException(t);
+    } finally {
+      if (_jspxFactory != null) _jspxFactory.releasePageContext(pageContext);
+    }
+  }
+}

Added: project_src/website/classes/Generated Source/.jsp/web/templates/main_0002ejsp_jsp.java
===================================================================
--- project_src/website/classes/Generated Source/.jsp/web/templates/main_0002ejsp_jsp.java	2004-12-29 21:54:42 UTC (rev 251)
+++ project_src/website/classes/Generated Source/.jsp/web/templates/main_0002ejsp_jsp.java	2004-12-29 21:55:56 UTC (rev 252)
@@ -0,0 +1,1140 @@
+package templates;
+
+import javax.servlet.*;
+import javax.servlet.http.*;
+import javax.servlet.jsp.*;
+import org.apache.jasper.runtime.*;
+
+public class main_0002ejsp_jsp extends HttpJspBase {
+
+
+  private static java.util.Vector _jspx_includes;
+
+  private org.apache.jasper.runtime.TagHandlerPool _jspx_tagPool_tiles_getAsString_name;
+  private org.apache.jasper.runtime.TagHandlerPool _jspx_tagPool_html_base;
+  private org.apache.jasper.runtime.TagHandlerPool _jspx_tagPool_html_rewrite_page;
+  private org.apache.jasper.runtime.TagHandlerPool _jspx_tagPool_html_img_page_alt;
+  private org.apache.jasper.runtime.TagHandlerPool _jspx_tagPool_logic_present_name;
+  private org.apache.jasper.runtime.TagHandlerPool _jspx_tagPool_html_link_forward;
+  private org.apache.jasper.runtime.TagHandlerPool _jspx_tagPool_logic_notPresent_scope_name;
+  private org.apache.jasper.runtime.TagHandlerPool _jspx_tagPool_html_form_method_focus_action;
+  private org.apache.jasper.runtime.TagHandlerPool _jspx_tagPool_html_text_styleClass_size_property;
+  private org.apache.jasper.runtime.TagHandlerPool _jspx_tagPool_html_password_styleClass_size_redisplay_property;
+  private org.apache.jasper.runtime.TagHandlerPool _jspx_tagPool_html_submit_value_styleClass;
+  private org.apache.jasper.runtime.TagHandlerPool _jspx_tagPool_html_select_size_property_multiple;
+  private org.apache.jasper.runtime.TagHandlerPool _jspx_tagPool_html_option_value;
+  private org.apache.jasper.runtime.TagHandlerPool _jspx_tagPool_html_errors;
+  private org.apache.jasper.runtime.TagHandlerPool _jspx_tagPool_tiles_insert_attribute;
+
+  public main_0002ejsp_jsp() {
+    _jspx_tagPool_tiles_getAsString_name = new org.apache.jasper.runtime.TagHandlerPool();
+    _jspx_tagPool_html_base = new org.apache.jasper.runtime.TagHandlerPool();
+    _jspx_tagPool_html_rewrite_page = new org.apache.jasper.runtime.TagHandlerPool();
+    _jspx_tagPool_html_img_page_alt = new org.apache.jasper.runtime.TagHandlerPool();
+    _jspx_tagPool_logic_present_name = new org.apache.jasper.runtime.TagHandlerPool();
+    _jspx_tagPool_html_link_forward = new org.apache.jasper.runtime.TagHandlerPool();
+    _jspx_tagPool_logic_notPresent_scope_name = new org.apache.jasper.runtime.TagHandlerPool();
+    _jspx_tagPool_html_form_method_focus_action = new org.apache.jasper.runtime.TagHandlerPool();
+    _jspx_tagPool_html_text_styleClass_size_property = new org.apache.jasper.runtime.TagHandlerPool();
+    _jspx_tagPool_html_password_styleClass_size_redisplay_property = new org.apache.jasper.runtime.TagHandlerPool();
+    _jspx_tagPool_html_submit_value_styleClass = new org.apache.jasper.runtime.TagHandlerPool();
+    _jspx_tagPool_html_select_size_property_multiple = new org.apache.jasper.runtime.TagHandlerPool();
+    _jspx_tagPool_html_option_value = new org.apache.jasper.runtime.TagHandlerPool();
+    _jspx_tagPool_html_errors = new org.apache.jasper.runtime.TagHandlerPool();
+    _jspx_tagPool_tiles_insert_attribute = new org.apache.jasper.runtime.TagHandlerPool();
+  }
+
+  public java.util.List getIncludes() {
+    return _jspx_includes;
+  }
+
+  public void _jspDestroy() {
+    _jspx_tagPool_tiles_getAsString_name.release();
+    _jspx_tagPool_html_base.release();
+    _jspx_tagPool_html_rewrite_page.release();
+    _jspx_tagPool_html_img_page_alt.release();
+    _jspx_tagPool_logic_present_name.release();
+    _jspx_tagPool_html_link_forward.release();
+    _jspx_tagPool_logic_notPresent_scope_name.release();
+    _jspx_tagPool_html_form_method_focus_action.release();
+    _jspx_tagPool_html_text_styleClass_size_property.release();
+    _jspx_tagPool_html_password_styleClass_size_redisplay_property.release();
+    _jspx_tagPool_html_submit_value_styleClass.release();
+    _jspx_tagPool_html_select_size_property_multiple.release();
+    _jspx_tagPool_html_option_value.release();
+    _jspx_tagPool_html_errors.release();
+    _jspx_tagPool_tiles_insert_attribute.release();
+  }
+
+  public void _jspService(HttpServletRequest request, HttpServletResponse response)
+        throws java.io.IOException, ServletException {
+
+    JspFactory _jspxFactory = null;
+    javax.servlet.jsp.PageContext pageContext = null;
+    HttpSession session = null;
+    ServletContext application = null;
+    ServletConfig config = null;
+    JspWriter out = null;
+    Object page = this;
+    JspWriter _jspx_out = null;
+
+
+    try {
+      _jspxFactory = JspFactory.getDefaultFactory();
+      response.setContentType("text/html;charset=ISO-8859-1");
+      pageContext = _jspxFactory.getPageContext(this, request, response,
+      			null, true, 8192, true);
+      application = pageContext.getServletContext();
+      config = pageContext.getServletConfig();
+      session = pageContext.getSession();
+      out = pageContext.getOut();
+      _jspx_out = out;
+
+      out.write("\r\n");
+      out.write("\r\n");
+      out.write("\r\n");
+      out.write("\r\n");
+      out.write("<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
+      out.write("<html>\r\n");
+      out.write("<head>\r\n  ");
+      out.write("<title>");
+      if (_jspx_meth_tiles_getAsString_0(pageContext))
+        return;
+      out.write("</title>\r\n  ");
+      if (_jspx_meth_html_base_0(pageContext))
+        return;
+      out.write("\r\n  ");
+      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\">\r\n  ");
+      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"");
+      if (_jspx_meth_html_rewrite_0(pageContext))
+        return;
+      out.write("\" title=\"externe Styles\">\r\n");
+      out.write("</head>\r\n\r\n");
+      out.write("<body>\r\n");
+      out.write("<table align=\"center\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\">\r\n  ");
+      out.write("<tbody>\r\n    ");
+      out.write("<tr>\r\n      ");
+      out.write("<td width=\"10%\">&nbsp;");
+      out.write("</td>\r\n      ");
+      out.write("<td>&nbsp;");
+      out.write("</td>\r\n      ");
+      out.write("<td width=\"10%\">&nbsp;");
+      out.write("</td>\r\n    ");
+      out.write("</tr>\r\n    ");
+      out.write("<tr>\r\n      ");
+      out.write("<td>&nbsp;");
+      out.write("</td>\r\n      ");
+      out.write("<td>\r\n      ");
+      out.write("<table align=\"center\" bgcolor=\"#c2d9c1\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\">\r\n        ");
+      out.write("<tbody>\r\n          ");
+      out.write("<tr>\r\n            ");
+      out.write("<td colspan=\"7\" bgcolor=\"#000000\">");
+      out.write("<img src=\"images/1pxtrans.gif\" alt=\"\">");
+      out.write("</td>\r\n            ");
+      out.write("<td style=\"background-image: url(images/border_r.gif);\">");
+      out.write("<img src=\"images/1pxtrans.gif\" height=\"1\" width=\"3\" alt=\"\">");
+      out.write("</td>\r\n          ");
+      out.write("</tr>\r\n          ");
+      out.write("<tr>\r\n            ");
+      out.write("<td bgcolor=\"#000000\" width=\"1\">");
+      out.write("<img src=\"images/1pxtrans.gif\" alt=\"\">");
+      out.write("</td>\r\n            ");
+      out.write("<td colspan=\"5\" height=\"70\">Logo");
+      out.write("</td>\r\n            ");
+      out.write("<td bgcolor=\"#000000\" width=\"1\">");
+      out.write("<img src=\"images/1pxtrans.gif\" alt=\"\">");
+      out.write("</td>\r\n            ");
+      out.write("<td style=\"background-image: url(images/border_r.gif);\">");
+      out.write("<img src=\"images/1pxtrans.gif\" width=\"3\" alt=\"\">");
+      out.write("</td>\r\n          ");
+      out.write("</tr>\r\n          ");
+      out.write("<tr>\r\n            ");
+      out.write("<td colspan=\"7\" bgcolor=\"#000000\">");
+      out.write("<img src=\"images/1pxtrans.gif\" alt=\"\">");
+      out.write("</td>\r\n            ");
+      out.write("<td style=\"background-image: url(images/border_r.gif);\">");
+      out.write("<img src=\"images/1pxtrans.gif\" height=\"1\" width=\"3\" alt=\"\">");
+      out.write("</td>\r\n          ");
+      out.write("</tr>\r\n          ");
+      out.write("<tr>\r\n            ");
+      out.write("<td bgcolor=\"#000000\" width=\"1\">");
+      if (_jspx_meth_html_img_0(pageContext))
+        return;
+      out.write("</td>\r\n            ");
+      out.write("<td colspan=\"5\" height=\"20\" valign=\"middle\">\r\n            ");
+      out.write("<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\">\r\n              ");
+      out.write("<tbody>\r\n                ");
+      out.write("<tr>\r\n                  ");
+      out.write("<td width=\"53%\">\r\n                    ");
+      out.write("<!--head start-->\r\n                    ");
+      out.write("<div align=\"left\">\r\n\r\n                      ");
+      if (_jspx_meth_logic_present_0(pageContext))
+        return;
+      out.write("\r\n                      ");
+      if (_jspx_meth_logic_notPresent_0(pageContext))
+        return;
+      out.write("\r\n\r\n                    ");
+      out.write("</div>\r\n                  ");
+      out.write("</td>\r\n                  ");
+      out.write("<td width=\"50%\">\r\n                    ");
+      out.write("<div class=\"head_menue\" align=\"right\">\r\n                     \t");
+      out.write("<a href=\"index.jsp\" class=\"head_menue\">&Uuml;bersicht");
+      out.write("</a>&nbsp;|&nbsp;");
+      out.write("<a href=\"index.jsp\" class=\"head_menue\">Impressum");
+      out.write("</a>&nbsp;|&nbsp;");
+      out.write("<a href=\"index.jsp\" class=\"head_menue\">Hilfe");
+      out.write("</a>&nbsp;\r\n                    ");
+      out.write("</div>\r\n\r\n                    ");
+      out.write("<!--head end-->\r\n                  ");
+      out.write("</td>\r\n ");
+      out.write("</tr>\r\n              ");
+      out.write("</tbody>\r\n            ");
+      out.write("</table>\r\n            ");
+      out.write("</td>\r\n            ");
+      out.write("<td bgcolor=\"#000000\" width=\"1\">");
+      out.write("<img src=\"images/1pxtrans.gif\" alt=\"\">");
+      out.write("</td>\r\n            ");
+      out.write("<td style=\"background-image: url(images/border_r.gif);\">");
+      out.write("<img src=\"images/1pxtrans.gif\" width=\"3\" alt=\"\">");
+      out.write("</td>\r\n          ");
+      out.write("</tr>\r\n          ");
+      out.write("<tr>\r\n            ");
+      out.write("<td colspan=\"7\" bgcolor=\"#000000\">");
+      out.write("<img src=\"images/1pxtrans.gif\" alt=\"\">");
+      out.write("</td>\r\n            ");
+      out.write("<td style=\"background-image: url(images/border_r.gif);\">");
+      out.write("<img src=\"images/1pxtrans.gif\" height=\"1\" width=\"3\" alt=\"\">");
+      out.write("</td>\r\n          ");
+      out.write("</tr>\r\n          ");
+      out.write("<tr>\r\n            ");
+      out.write("<td colspan=\"7\" bgcolor=\"#f9efd2\" height=\"2\">");
+      out.write("<img src=\"images/1pxtrans.gif\" alt=\"\">");
+      out.write("</td>\r\n            ");
+      out.write("<td bgcolor=\"#f9efd2\">");
+      out.write("<img src=\"images/1pxtrans.gif\" height=\"1\" width=\"3\" alt=\"\">");
+      out.write("</td>\r\n          ");
+      out.write("</tr>\r\n          ");
+      out.write("<tr>\r\n            ");
+      out.write("<td colspan=\"3\" bgcolor=\"#000000\">");
+      out.write("<img src=\"images/1pxtrans.gif\" alt=\"\">");
+      out.write("</td>\r\n            ");
+      out.write("<td colspan=\"1\" bgcolor=\"#f9efd2\" width=\"2\">");
+      out.write("<img src=\"images/1pxtrans.gif\" alt=\"\">");
+      out.write("</td>\r\n            ");
+      out.write("<td colspan=\"3\" bgcolor=\"#000000\">");
+      out.write("<img src=\"images/1pxtrans.gif\" alt=\"\">");
+      out.write("</td>\r\n            ");
+      out.write("<td style=\"background-image: url(images/border_r.gif);\">");
+      out.write("<img src=\"images/1pxtrans.gif\" height=\"1\" width=\"3\" alt=\"\">");
+      out.write("</td>\r\n          ");
+      out.write("</tr>\r\n          ");
+      out.write("<tr>\r\n            ");
+      out.write("<td bgcolor=\"#000000\" width=\"1\">");
+      out.write("<img src=\"images/1pxtrans.gif\" alt=\"\">");
+      out.write("</td>\r\n            ");
+      out.write("<td valign=\"top\">\r\n");
+      out.write("<!--menue start-->\r\n            ");
+      out.write("<table class=\"menue_tbl\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\r\n              ");
+      out.write("<thead class=\"menue_tbl\"> ");
+      out.write("<tr>\r\n                ");
+      out.write("<th>Aktuelles");
+      out.write("</th>\r\n              ");
+      out.write("</tr>\r\n              ");
+      out.write("</thead> ");
+      out.write("<tbody class=\"menue_tbl\">\r\n                ");
+      out.write("<tr>\r\n                  ");
+      out.write("<td class=\"menue_tbl\">");
+      if (_jspx_meth_html_link_3(pageContext))
+        return;
+      out.write("</td>\r\n                ");
+      out.write("</tr>\r\n                ");
+      out.write("<tr>\r\n                  ");
+      out.write("<td class=\"menue_tbl\">");
+      if (_jspx_meth_html_link_4(pageContext))
+        return;
+      out.write("</td>\r\n                ");
+      out.write("</tr>\r\n                ");
+      out.write("<tr>\r\n                  ");
+      out.write("<td class=\"menue_tbl\">");
+      if (_jspx_meth_html_link_5(pageContext))
+        return;
+      out.write("</td>\r\n                ");
+      out.write("</tr>\r\n                ");
+      out.write("<tr>\r\n                  ");
+      out.write("<td class=\"menue_tbl\">");
+      if (_jspx_meth_html_link_6(pageContext))
+        return;
+      out.write("</td>\r\n                ");
+      out.write("</tr>\r\n              ");
+      out.write("</tbody>\r\n            ");
+      out.write("</table>\r\n            ");
+      out.write("<br>\r\n            ");
+      out.write("<table class=\"menue_suche\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\r\n              ");
+      out.write("<thead class=\"menue_tbl\"> ");
+      out.write("<tr>\r\n                ");
+      out.write("<th colspan=\"2\">Suche");
+      out.write("</th>\r\n              ");
+      out.write("</tr>\r\n            ");
+      out.write("</thead> ");
+      out.write("<tbody>\r\n              ");
+      out.write("<tr>\r\n                ");
+      out.write("<td colspan=\"2\">\r\n\r\n                  ");
+      if (_jspx_meth_html_form_1(pageContext))
+        return;
+      out.write("\r\n\r\n\r\n\r\n\r\n                  ");
+      out.write("</td>\r\n                ");
+      out.write("</tr>\r\n              ");
+      out.write("</tbody>\r\n            ");
+      out.write("</table>\r\n            ");
+      out.write("<br>\r\n            ");
+      out.write("<table class=\"menue_tbl\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\r\n              ");
+      out.write("<thead class=\"menue_tbl\"> ");
+      out.write("<tr>\r\n                ");
+      out.write("<th>Genre");
+      out.write("</th>\r\n              ");
+      out.write("</tr>\r\n              ");
+      out.write("</thead> ");
+      out.write("<tbody  class=\"menue_tbl\">\r\n                ");
+      out.write("<tr>\r\n                  ");
+      out.write("<td class=\"menue_tbl\">");
+      out.write("<a href=\"#\" class=\"menue_tbl\"> Action ");
+      out.write("</a>");
+      out.write("</td>\r\n                ");
+      out.write("</tr>\r\n                ");
+      out.write("<tr>\r\n                  ");
+      out.write("<td class=\"menue_tbl\">");
+      out.write("<a href=\"#\" class=\"menue_tbl\"> Drama ");
+      out.write("</a>");
+      out.write("</td>\r\n                ");
+      out.write("</tr>\r\n                ");
+      out.write("<tr>\r\n                  ");
+      out.write("<td class=\"menue_tbl\">");
+      out.write("<a href=\"#\" class=\"menue_tbl\"> Comedy ");
+      out.write("</a>");
+      out.write("</td>\r\n                ");
+      out.write("</tr>\r\n                ");
+      out.write("<tr>\r\n                  ");
+      out.write("<td class=\"menue_tbl\">");
+      out.write("<a href=\"#\" class=\"menue_tbl\"> Thriller ");
+      out.write("</a>");
+      out.write("</td>\r\n                ");
+      out.write("</tr>\r\n              ");
+      out.write("</tbody>\r\n            ");
+      out.write("</table>\r\n\r\n\r\n");
+      out.write("<!--menue end--> ");
+      out.write("</td>\r\n            ");
+      out.write("<td bgcolor=\"#000000\" width=\"1\">");
+      out.write("<img src=\"images/1pxtrans.gif\" alt=\"\">");
+      out.write("</td>\r\n            ");
+      out.write("<td bgcolor=\"#f9efd2\" width=\"3\">");
+      out.write("<img src=\"images/1pxtrans.gif\" alt=\"\">");
+      out.write("</td>\r\n            ");
+      out.write("<td bgcolor=\"#000000\" width=\"1\">");
+      out.write("<img src=\"images/1pxtrans.gif\" alt=\"\">");
+      out.write("</td>\r\n            ");
+      out.write("<td valign=\"top\" width=\"85%\" style=\"padding-top:20px; padding-right:1px; padding-left: 1px;\">\r\n");
+      out.write("<!--main start-->\r\n");
+      if (_jspx_meth_html_errors_0(pageContext))
+        return;
+      out.write("\r\n&nbsp;");
+      out.write("<br />\r\n");
+      if (_jspx_meth_tiles_insert_0(pageContext))
+        return;
+      out.write("\r\n\r\n");
+      out.write("<!--main end--> ");
+      out.write("</td>\r\n            ");
+      out.write("<td bgcolor=\"#000000\" width=\"1\">");
+      out.write("<img src=\"images/1pxtrans.gif\" alt=\"\">");
+      out.write("</td>\r\n            ");
+      out.write("<td style=\"background-image: url(images/border_r.gif);\">");
+      out.write("<img src=\"images/1pxtrans.gif\" width=\"3\" alt=\"\">");
+      out.write("</td>\r\n          ");
+      out.write("</tr>\r\n          ");
+      out.write("<tr>\r\n            ");
+      out.write("<td colspan=\"3\" bgcolor=\"#000000\">");
+      out.write("<img src=\"images/1pxtrans.gif\" alt=\"\">");
+      out.write("</td>\r\n            ");
+      out.write("<td colspan=\"1\" bgcolor=\"#f9efd2\" width=\"2\">");
+      out.write("<img src=\"images/1pxtrans.gif\" alt=\"\">");
+      out.write("</td>\r\n            ");
+      out.write("<td colspan=\"3\" bgcolor=\"#000000\">");
+      out.write("<img src=\"images/1pxtrans.gif\" alt=\"\">");
+      out.write("</td>\r\n            ");
+      out.write("<td style=\"background-image: url(images/border_r.gif);\">");
+      out.write("<img src=\"images/1pxtrans.gif\" height=\"1\" width=\"3\" alt=\"\">");
+      out.write("</td>\r\n          ");
+      out.write("</tr>\r\n          ");
+      out.write("<tr>\r\n            ");
+      out.write("<td colspan=\"7\" bgcolor=\"#f9efd2\" height=\"2\">");
+      out.write("<img src=\"images/1pxtrans.gif\" alt=\"\">");
+      out.write("</td>\r\n            ");
+      out.write("<td bgcolor=\"#f9efd2\">");
+      out.write("<img src=\"images/1pxtrans.gif\" height=\"1\" width=\"1\" alt=\"\">");
+      out.write("</td>\r\n          ");
+      out.write("</tr>\r\n          ");
+      out.write("<tr>\r\n            ");
+      out.write("<td colspan=\"7\" bgcolor=\"#000000\">");
+      out.write("<img src=\"images/1pxtrans.gif\" alt=\"\">");
+      out.write("</td>\r\n            ");
+      out.write("<td style=\"background-image: url(images/border_r.gif);\">");
+      out.write("<img src=\"images/1pxtrans.gif\" height=\"1\" width=\"3\" alt=\"\">");
+      out.write("</td>\r\n          ");
+      out.write("</tr>\r\n          ");
+      out.write("<tr>\r\n            ");
+      out.write("<td bgcolor=\"#000000\" width=\"1\">");
+      out.write("<img src=\"images/1pxtrans.gif\" alt=\"\">");
+      out.write("</td>\r\n            ");
+      out.write("<td colspan=\"5\">\r\n            ");
+      out.write("<div class=\"copyright\">&copy;\r\nRemo Griesch,\r\nStefan Forstner, Philipp Schneider");
+      out.write("<br>\r\n            ");
+      out.write("</div>\r\n            ");
+      out.write("</td>\r\n            ");
+      out.write("<td bgcolor=\"#000000\" width=\"1\">");
+      out.write("<img src=\"images/1pxtrans.gif\" alt=\"\">");
+      out.write("</td>\r\n            ");
+      out.write("<td style=\"background-image: url(images/border_r.gif);\">");
+      out.write("<img src=\"images/1pxtrans.gif\" width=\"3\" alt=\"\">");
+      out.write("</td>\r\n          ");
+      out.write("</tr>\r\n          ");
+      out.write("<tr>\r\n            ");
+      out.write("<td colspan=\"7\" bgcolor=\"#000000\">");
+      out.write("<img src=\"images/1pxtrans.gif\" alt=\"\">");
+      out.write("</td>\r\n            ");
+      out.write("<td style=\"background-image: url(images/border_r.gif);\">");
+      out.write("<img src=\"images/1pxtrans.gif\" height=\"1\" width=\"3\" alt=\"\">");
+      out.write("</td>\r\n          ");
+      out.write("</tr>\r\n          ");
+      out.write("<tr>\r\n            ");
+      out.write("<td colspan=\"7\" style=\"background-image: url(images/border.gif);\">");
+      out.write("<img src=\"border_bl.gif\" height=\"7\" alt=\"\">");
+      out.write("</td>\r\n            ");
+      out.write("<td style=\"background-image: url(images/border_br.gif);\">");
+      out.write("<img src=\"images/1pxtrans.gif\" height=\"1\" width=\"3\" alt=\"\">");
+      out.write("</td>\r\n          ");
+      out.write("</tr>\r\n        ");
+      out.write("</tbody>\r\n      ");
+      out.write("</table>\r\n      ");
+      out.write("</td>\r\n      ");
+      out.write("<td>&nbsp;");
+      out.write("</td>\r\n    ");
+      out.write("</tr>\r\n    ");
+      out.write("<tr>\r\n      ");
+      out.write("<td>&nbsp;");
+      out.write("</td>\r\n      ");
+      out.write("<td>&nbsp;");
+      out.write("</td>\r\n      ");
+      out.write("<td>&nbsp;");
+      out.write("</td>\r\n    ");
+      out.write("</tr>\r\n  ");
+      out.write("</tbody>\r\n");
+      out.write("</table>\r\n\r\n\r\n\r\n");
+      out.write("</body>\r\n");
+      out.write("</html>\r\n");
+    } catch (Throwable t) {
+      out = _jspx_out;
+      if (out != null && out.getBufferSize() != 0)
+        out.clearBuffer();
+      if (pageContext != null) pageContext.handlePageException(t);
+    } finally {
+      if (_jspxFactory != null) _jspxFactory.releasePageContext(pageContext);
+    }
+  }
+
+  private boolean _jspx_meth_tiles_getAsString_0(javax.servlet.jsp.PageContext pageContext)
+          throws Throwable {
+    JspWriter out = pageContext.getOut();
+    /* ----  tiles:getAsString ---- */
+    org.apache.struts.taglib.tiles.GetAttributeTag _jspx_th_tiles_getAsString_0 = (org.apache.struts.taglib.tiles.GetAttributeTag) _jspx_tagPool_tiles_getAsString_name.get(org.apache.struts.taglib.tiles.GetAttributeTag.class);
+    _jspx_th_tiles_getAsString_0.setPageContext(pageContext);
+    _jspx_th_tiles_getAsString_0.setParent(null);
+    _jspx_th_tiles_getAsString_0.setName("title");
+    int _jspx_eval_tiles_getAsString_0 = _jspx_th_tiles_getAsString_0.doStartTag();
+    if (_jspx_th_tiles_getAsString_0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+      return true;
+    _jspx_tagPool_tiles_getAsString_name.reuse(_jspx_th_tiles_getAsString_0);
+    return false;
+  }
+
+  private boolean _jspx_meth_html_base_0(javax.servlet.jsp.PageContext pageContext)
+          throws Throwable {
+    JspWriter out = pageContext.getOut();
+    /* ----  html:base ---- */
+    org.apache.struts.taglib.html.BaseTag _jspx_th_html_base_0 = (org.apache.struts.taglib.html.BaseTag) _jspx_tagPool_html_base.get(org.apache.struts.taglib.html.BaseTag.class);
+    _jspx_th_html_base_0.setPageContext(pageContext);
+    _jspx_th_html_base_0.setParent(null);
+    int _jspx_eval_html_base_0 = _jspx_th_html_base_0.doStartTag();
+    if (_jspx_th_html_base_0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+      return true;
+    _jspx_tagPool_html_base.reuse(_jspx_th_html_base_0);
+    return false;
+  }
+
+  private boolean _jspx_meth_html_rewrite_0(javax.servlet.jsp.PageContext pageContext)
+          throws Throwable {
+    JspWriter out = pageContext.getOut();
+    /* ----  html:rewrite ---- */
+    org.apache.struts.taglib.html.RewriteTag _jspx_th_html_rewrite_0 = (org.apache.struts.taglib.html.RewriteTag) _jspx_tagPool_html_rewrite_page.get(org.apache.struts.taglib.html.RewriteTag.class);
+    _jspx_th_html_rewrite_0.setPageContext(pageContext);
+    _jspx_th_html_rewrite_0.setParent(null);
+    _jspx_th_html_rewrite_0.setPage("/style.css");
+    int _jspx_eval_html_rewrite_0 = _jspx_th_html_rewrite_0.doStartTag();
+    if (_jspx_th_html_rewrite_0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+      return true;
+    _jspx_tagPool_html_rewrite_page.reuse(_jspx_th_html_rewrite_0);
+    return false;
+  }
+
+  private boolean _jspx_meth_html_img_0(javax.servlet.jsp.PageContext pageContext)
+          throws Throwable {
+    JspWriter out = pageContext.getOut();
+    /* ----  html:img ---- */
+    org.apache.struts.taglib.html.ImgTag _jspx_th_html_img_0 = (org.apache.struts.taglib.html.ImgTag) _jspx_tagPool_html_img_page_alt.get(org.apache.struts.taglib.html.ImgTag.class);
+    _jspx_th_html_img_0.setPageContext(pageContext);
+    _jspx_th_html_img_0.setParent(null);
+    _jspx_th_html_img_0.setPage("/images/1pxtrans.gif");
+    _jspx_th_html_img_0.setAlt("");
+    int _jspx_eval_html_img_0 = _jspx_th_html_img_0.doStartTag();
+    if (_jspx_th_html_img_0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+      return true;
+    _jspx_tagPool_html_img_page_alt.reuse(_jspx_th_html_img_0);
+    return false;
+  }
+
+  private boolean _jspx_meth_logic_present_0(javax.servlet.jsp.PageContext pageContext)
+          throws Throwable {
+    JspWriter out = pageContext.getOut();
+    /* ----  logic:present ---- */
+    org.apache.struts.taglib.logic.PresentTag _jspx_th_logic_present_0 = (org.apache.struts.taglib.logic.PresentTag) _jspx_tagPool_logic_present_name.get(org.apache.struts.taglib.logic.PresentTag.class);
+    _jspx_th_logic_present_0.setPageContext(pageContext);
+    _jspx_th_logic_present_0.setParent(null);
+    _jspx_th_logic_present_0.setName("user");
+    int _jspx_eval_logic_present_0 = _jspx_th_logic_present_0.doStartTag();
+    if (_jspx_eval_logic_present_0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
+      do {
+        out.write("\r\n                        ");
+        out.write("<span class=\"pref\">\r\n                          ");
+        if (_jspx_meth_html_link_0(_jspx_th_logic_present_0, pageContext))
+          return true;
+        out.write("&nbsp;\r\n                          ");
+        if (_jspx_meth_html_link_1(_jspx_th_logic_present_0, pageContext))
+          return true;
+        out.write("&nbsp;\r\n                          ");
+        if (_jspx_meth_html_link_2(_jspx_th_logic_present_0, pageContext))
+          return true;
+        out.write("\r\n                        ");
+        out.write("</span>\r\n\r\n                      ");
+        int evalDoAfterBody = _jspx_th_logic_present_0.doAfterBody();
+        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
+          break;
+      } while (true);
+    }
+    if (_jspx_th_logic_present_0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+      return true;
+    _jspx_tagPool_logic_present_name.reuse(_jspx_th_logic_present_0);
+    return false;
+  }
+
+  private boolean _jspx_meth_html_link_0(javax.servlet.jsp.tagext.Tag _jspx_th_logic_present_0, javax.servlet.jsp.PageContext pageContext)
+          throws Throwable {
+    JspWriter out = pageContext.getOut();
+    /* ----  html:link ---- */
+    org.apache.struts.taglib.html.LinkTag _jspx_th_html_link_0 = (org.apache.struts.taglib.html.LinkTag) _jspx_tagPool_html_link_forward.get(org.apache.struts.taglib.html.LinkTag.class);
+    _jspx_th_html_link_0.setPageContext(pageContext);
+    _jspx_th_html_link_0.setParent(_jspx_th_logic_present_0);
+    _jspx_th_html_link_0.setForward("pref");
+    int _jspx_eval_html_link_0 = _jspx_th_html_link_0.doStartTag();
+    if (_jspx_eval_html_link_0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
+      if (_jspx_eval_html_link_0 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE) {
+        javax.servlet.jsp.tagext.BodyContent _bc = pageContext.pushBody();
+        out = _bc;
+        _jspx_th_html_link_0.setBodyContent(_bc);
+        _jspx_th_html_link_0.doInitBody();
+      }
+      do {
+        out.write("Meine Daten");
+        int evalDoAfterBody = _jspx_th_html_link_0.doAfterBody();
+        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
+          break;
+      } while (true);
+      if (_jspx_eval_html_link_0 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE)
+        out = pageContext.popBody();
+    }
+    if (_jspx_th_html_link_0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+      return true;
+    _jspx_tagPool_html_link_forward.reuse(_jspx_th_html_link_0);
+    return false;
+  }
+
+  private boolean _jspx_meth_html_link_1(javax.servlet.jsp.tagext.Tag _jspx_th_logic_present_0, javax.servlet.jsp.PageContext pageContext)
+          throws Throwable {
+    JspWriter out = pageContext.getOut();
+    /* ----  html:link ---- */
+    org.apache.struts.taglib.html.LinkTag _jspx_th_html_link_1 = (org.apache.struts.taglib.html.LinkTag) _jspx_tagPool_html_link_forward.get(org.apache.struts.taglib.html.LinkTag.class);
+    _jspx_th_html_link_1.setPageContext(pageContext);
+    _jspx_th_html_link_1.setParent(_jspx_th_logic_present_0);
+    _jspx_th_html_link_1.setForward("basket");
+    int _jspx_eval_html_link_1 = _jspx_th_html_link_1.doStartTag();
+    if (_jspx_eval_html_link_1 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
+      if (_jspx_eval_html_link_1 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE) {
+        javax.servlet.jsp.tagext.BodyContent _bc = pageContext.pushBody();
+        out = _bc;
+        _jspx_th_html_link_1.setBodyContent(_bc);
+        _jspx_th_html_link_1.doInitBody();
+      }
+      do {
+        out.write("Warenkorb");
+        int evalDoAfterBody = _jspx_th_html_link_1.doAfterBody();
+        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
+          break;
+      } while (true);
+      if (_jspx_eval_html_link_1 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE)
+        out = pageContext.popBody();
+    }
+    if (_jspx_th_html_link_1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+      return true;
+    _jspx_tagPool_html_link_forward.reuse(_jspx_th_html_link_1);
+    return false;
+  }
+
+  private boolean _jspx_meth_html_link_2(javax.servlet.jsp.tagext.Tag _jspx_th_logic_present_0, javax.servlet.jsp.PageContext pageContext)
+          throws Throwable {
+    JspWriter out = pageContext.getOut();
+    /* ----  html:link ---- */
+    org.apache.struts.taglib.html.LinkTag _jspx_th_html_link_2 = (org.apache.struts.taglib.html.LinkTag) _jspx_tagPool_html_link_forward.get(org.apache.struts.taglib.html.LinkTag.class);
+    _jspx_th_html_link_2.setPageContext(pageContext);
+    _jspx_th_html_link_2.setParent(_jspx_th_logic_present_0);
+    _jspx_th_html_link_2.setForward("logout");
+    int _jspx_eval_html_link_2 = _jspx_th_html_link_2.doStartTag();
+    if (_jspx_eval_html_link_2 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
+      if (_jspx_eval_html_link_2 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE) {
+        javax.servlet.jsp.tagext.BodyContent _bc = pageContext.pushBody();
+        out = _bc;
+        _jspx_th_html_link_2.setBodyContent(_bc);
+        _jspx_th_html_link_2.doInitBody();
+      }
+      do {
+        out.write("Logout");
+        int evalDoAfterBody = _jspx_th_html_link_2.doAfterBody();
+        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
+          break;
+      } while (true);
+      if (_jspx_eval_html_link_2 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE)
+        out = pageContext.popBody();
+    }
+    if (_jspx_th_html_link_2.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+      return true;
+    _jspx_tagPool_html_link_forward.reuse(_jspx_th_html_link_2);
+    return false;
+  }
+
+  private boolean _jspx_meth_logic_notPresent_0(javax.servlet.jsp.PageContext pageContext)
+          throws Throwable {
+    JspWriter out = pageContext.getOut();
+    /* ----  logic:notPresent ---- */
+    org.apache.struts.taglib.logic.NotPresentTag _jspx_th_logic_notPresent_0 = (org.apache.struts.taglib.logic.NotPresentTag) _jspx_tagPool_logic_notPresent_scope_name.get(org.apache.struts.taglib.logic.NotPresentTag.class);
+    _jspx_th_logic_notPresent_0.setPageContext(pageContext);
+    _jspx_th_logic_notPresent_0.setParent(null);
+    _jspx_th_logic_notPresent_0.setScope("session");
+    _jspx_th_logic_notPresent_0.setName("user");
+    int _jspx_eval_logic_notPresent_0 = _jspx_th_logic_notPresent_0.doStartTag();
+    if (_jspx_eval_logic_notPresent_0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
+      do {
+        out.write("\r\n                        ");
+        if (_jspx_meth_html_form_0(_jspx_th_logic_notPresent_0, pageContext))
+          return true;
+        out.write("\r\n                      ");
+        int evalDoAfterBody = _jspx_th_logic_notPresent_0.doAfterBody();
+        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
+          break;
+      } while (true);
+    }
+    if (_jspx_th_logic_notPresent_0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+      return true;
+    _jspx_tagPool_logic_notPresent_scope_name.reuse(_jspx_th_logic_notPresent_0);
+    return false;
+  }
+
+  private boolean _jspx_meth_html_form_0(javax.servlet.jsp.tagext.Tag _jspx_th_logic_notPresent_0, javax.servlet.jsp.PageContext pageContext)
+          throws Throwable {
+    JspWriter out = pageContext.getOut();
+    /* ----  html:form ---- */
+    org.apache.struts.taglib.html.FormTag _jspx_th_html_form_0 = (org.apache.struts.taglib.html.FormTag) _jspx_tagPool_html_form_method_focus_action.get(org.apache.struts.taglib.html.FormTag.class);
+    _jspx_th_html_form_0.setPageContext(pageContext);
+    _jspx_th_html_form_0.setParent(_jspx_th_logic_notPresent_0);
+    _jspx_th_html_form_0.setAction("/LogonSubmit");
+    _jspx_th_html_form_0.setFocus("username");
+    _jspx_th_html_form_0.setMethod("post");
+    int _jspx_eval_html_form_0 = _jspx_th_html_form_0.doStartTag();
+    if (_jspx_eval_html_form_0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
+      do {
+        out.write("\r\n                          ");
+        out.write("<span class=\"login_label\">Benutzername:");
+        out.write("</span>\r\n                          ");
+        if (_jspx_meth_html_text_0(_jspx_th_html_form_0, pageContext))
+          return true;
+        out.write("\r\n                          ");
+        out.write("<span class=\"login_label\">Password:");
+        out.write("</span>\r\n                          ");
+        if (_jspx_meth_html_password_0(_jspx_th_html_form_0, pageContext))
+          return true;
+        out.write("\r\n                          ");
+        if (_jspx_meth_html_submit_0(_jspx_th_html_form_0, pageContext))
+          return true;
+        out.write("\r\n                        ");
+        int evalDoAfterBody = _jspx_th_html_form_0.doAfterBody();
+        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
+          break;
+      } while (true);
+    }
+    if (_jspx_th_html_form_0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+      return true;
+    _jspx_tagPool_html_form_method_focus_action.reuse(_jspx_th_html_form_0);
+    return false;
+  }
+
+  private boolean _jspx_meth_html_text_0(javax.servlet.jsp.tagext.Tag _jspx_th_html_form_0, javax.servlet.jsp.PageContext pageContext)
+          throws Throwable {
+    JspWriter out = pageContext.getOut();
+    /* ----  html:text ---- */
+    org.apache.struts.taglib.html.TextTag _jspx_th_html_text_0 = (org.apache.struts.taglib.html.TextTag) _jspx_tagPool_html_text_styleClass_size_property.get(org.apache.struts.taglib.html.TextTag.class);
+    _jspx_th_html_text_0.setPageContext(pageContext);
+    _jspx_th_html_text_0.setParent(_jspx_th_html_form_0);
+    _jspx_th_html_text_0.setProperty("username");
+    _jspx_th_html_text_0.setSize("13");
+    _jspx_th_html_text_0.setStyleClass("login");
+    int _jspx_eval_html_text_0 = _jspx_th_html_text_0.doStartTag();
+    if (_jspx_th_html_text_0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+      return true;
+    _jspx_tagPool_html_text_styleClass_size_property.reuse(_jspx_th_html_text_0);
+    return false;
+  }
+
+  private boolean _jspx_meth_html_password_0(javax.servlet.jsp.tagext.Tag _jspx_th_html_form_0, javax.servlet.jsp.PageContext pageContext)
+          throws Throwable {
+    JspWriter out = pageContext.getOut();
+    /* ----  html:password ---- */
+    org.apache.struts.taglib.html.PasswordTag _jspx_th_html_password_0 = (org.apache.struts.taglib.html.PasswordTag) _jspx_tagPool_html_password_styleClass_size_redisplay_property.get(org.apache.struts.taglib.html.PasswordTag.class);
+    _jspx_th_html_password_0.setPageContext(pageContext);
+    _jspx_th_html_password_0.setParent(_jspx_th_html_form_0);
+    _jspx_th_html_password_0.setProperty("password");
+    _jspx_th_html_password_0.setSize("13");
+    _jspx_th_html_password_0.setStyleClass("login");
+    _jspx_th_html_password_0.setRedisplay(false);
+    int _jspx_eval_html_password_0 = _jspx_th_html_password_0.doStartTag();
+    if (_jspx_th_html_password_0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+      return true;
+    _jspx_tagPool_html_password_styleClass_size_redisplay_property.reuse(_jspx_th_html_password_0);
+    return false;
+  }
+
+  private boolean _jspx_meth_html_submit_0(javax.servlet.jsp.tagext.Tag _jspx_th_html_form_0, javax.servlet.jsp.PageContext pageContext)
+          throws Throwable {
+    JspWriter out = pageContext.getOut();
+    /* ----  html:submit ---- */
+    org.apache.struts.taglib.html.SubmitTag _jspx_th_html_submit_0 = (org.apache.struts.taglib.html.SubmitTag) _jspx_tagPool_html_submit_value_styleClass.get(org.apache.struts.taglib.html.SubmitTag.class);
+    _jspx_th_html_submit_0.setPageContext(pageContext);
+    _jspx_th_html_submit_0.setParent(_jspx_th_html_form_0);
+    _jspx_th_html_submit_0.setStyleClass("submit_search");
+    _jspx_th_html_submit_0.setValue("login");
+    int _jspx_eval_html_submit_0 = _jspx_th_html_submit_0.doStartTag();
+    if (_jspx_th_html_submit_0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+      return true;
+    _jspx_tagPool_html_submit_value_styleClass.reuse(_jspx_th_html_submit_0);
+    return false;
+  }
+
+  private boolean _jspx_meth_html_link_3(javax.servlet.jsp.PageContext pageContext)
+          throws Throwable {
+    JspWriter out = pageContext.getOut();
+    /* ----  html:link ---- */
+    org.apache.struts.taglib.html.LinkTag _jspx_th_html_link_3 = (org.apache.struts.taglib.html.LinkTag) _jspx_tagPool_html_link_forward.get(org.apache.struts.taglib.html.LinkTag.class);
+    _jspx_th_html_link_3.setPageContext(pageContext);
+    _jspx_th_html_link_3.setParent(null);
+    _jspx_th_html_link_3.setForward("search/new");
+    int _jspx_eval_html_link_3 = _jspx_th_html_link_3.doStartTag();
+    if (_jspx_eval_html_link_3 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
+      if (_jspx_eval_html_link_3 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE) {
+        javax.servlet.jsp.tagext.BodyContent _bc = pageContext.pushBody();
+        out = _bc;
+        _jspx_th_html_link_3.setBodyContent(_bc);
+        _jspx_th_html_link_3.doInitBody();
+      }
+      do {
+        out.write("Neuheiten");
+        int evalDoAfterBody = _jspx_th_html_link_3.doAfterBody();
+        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
+          break;
+      } while (true);
+      if (_jspx_eval_html_link_3 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE)
+        out = pageContext.popBody();
+    }
+    if (_jspx_th_html_link_3.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+      return true;
+    _jspx_tagPool_html_link_forward.reuse(_jspx_th_html_link_3);
+    return false;
+  }
+
+  private boolean _jspx_meth_html_link_4(javax.servlet.jsp.PageContext pageContext)
+          throws Throwable {
+    JspWriter out = pageContext.getOut();
+    /* ----  html:link ---- */
+    org.apache.struts.taglib.html.LinkTag _jspx_th_html_link_4 = (org.apache.struts.taglib.html.LinkTag) _jspx_tagPool_html_link_forward.get(org.apache.struts.taglib.html.LinkTag.class);
+    _jspx_th_html_link_4.setPageContext(pageContext);
+    _jspx_th_html_link_4.setParent(null);
+    _jspx_th_html_link_4.setForward("search/top10month");
+    int _jspx_eval_html_link_4 = _jspx_th_html_link_4.doStartTag();
+    if (_jspx_eval_html_link_4 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
+      if (_jspx_eval_html_link_4 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE) {
+        javax.servlet.jsp.tagext.BodyContent _bc = pageContext.pushBody();
+        out = _bc;
+        _jspx_th_html_link_4.setBodyContent(_bc);
+        _jspx_th_html_link_4.doInitBody();
+      }
+      do {
+        out.write("Top 10 Monat");
+        int evalDoAfterBody = _jspx_th_html_link_4.doAfterBody();
+        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
+          break;
+      } while (true);
+      if (_jspx_eval_html_link_4 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE)
+        out = pageContext.popBody();
+    }
+    if (_jspx_th_html_link_4.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+      return true;
+    _jspx_tagPool_html_link_forward.reuse(_jspx_th_html_link_4);
+    return false;
+  }
+
+  private boolean _jspx_meth_html_link_5(javax.servlet.jsp.PageContext pageContext)
+          throws Throwable {
+    JspWriter out = pageContext.getOut();
+    /* ----  html:link ---- */
+    org.apache.struts.taglib.html.LinkTag _jspx_th_html_link_5 = (org.apache.struts.taglib.html.LinkTag) _jspx_tagPool_html_link_forward.get(org.apache.struts.taglib.html.LinkTag.class);
+    _jspx_th_html_link_5.setPageContext(pageContext);
+    _jspx_th_html_link_5.setParent(null);
+    _jspx_th_html_link_5.setForward("search/top100year");
+    int _jspx_eval_html_link_5 = _jspx_th_html_link_5.doStartTag();
+    if (_jspx_eval_html_link_5 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
+      if (_jspx_eval_html_link_5 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE) {
+        javax.servlet.jsp.tagext.BodyContent _bc = pageContext.pushBody();
+        out = _bc;
+        _jspx_th_html_link_5.setBodyContent(_bc);
+        _jspx_th_html_link_5.doInitBody();
+      }
+      do {
+        out.write("Top 100 Jahr");
+        int evalDoAfterBody = _jspx_th_html_link_5.doAfterBody();
+        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
+          break;
+      } while (true);
+      if (_jspx_eval_html_link_5 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE)
+        out = pageContext.popBody();
+    }
+    if (_jspx_th_html_link_5.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+      return true;
+    _jspx_tagPool_html_link_forward.reuse(_jspx_th_html_link_5);
+    return false;
+  }
+
+  private boolean _jspx_meth_html_link_6(javax.servlet.jsp.PageContext pageContext)
+          throws Throwable {
+    JspWriter out = pageContext.getOut();
+    /* ----  html:link ---- */
+    org.apache.struts.taglib.html.LinkTag _jspx_th_html_link_6 = (org.apache.struts.taglib.html.LinkTag) _jspx_tagPool_html_link_forward.get(org.apache.struts.taglib.html.LinkTag.class);
+    _jspx_th_html_link_6.setPageContext(pageContext);
+    _jspx_th_html_link_6.setParent(null);
+    _jspx_th_html_link_6.setForward("search/preview");
+    int _jspx_eval_html_link_6 = _jspx_th_html_link_6.doStartTag();
+    if (_jspx_eval_html_link_6 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
+      if (_jspx_eval_html_link_6 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE) {
+        javax.servlet.jsp.tagext.BodyContent _bc = pageContext.pushBody();
+        out = _bc;
+        _jspx_th_html_link_6.setBodyContent(_bc);
+        _jspx_th_html_link_6.doInitBody();
+      }
+      do {
+        out.write("Vorschau");
+        int evalDoAfterBody = _jspx_th_html_link_6.doAfterBody();
+        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
+          break;
+      } while (true);
+      if (_jspx_eval_html_link_6 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE)
+        out = pageContext.popBody();
+    }
+    if (_jspx_th_html_link_6.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+      return true;
+    _jspx_tagPool_html_link_forward.reuse(_jspx_th_html_link_6);
+    return false;
+  }
+
+  private boolean _jspx_meth_html_form_1(javax.servlet.jsp.PageContext pageContext)
+          throws Throwable {
+    JspWriter out = pageContext.getOut();
+    /* ----  html:form ---- */
+    org.apache.struts.taglib.html.FormTag _jspx_th_html_form_1 = (org.apache.struts.taglib.html.FormTag) _jspx_tagPool_html_form_method_focus_action.get(org.apache.struts.taglib.html.FormTag.class);
+    _jspx_th_html_form_1.setPageContext(pageContext);
+    _jspx_th_html_form_1.setParent(null);
+    _jspx_th_html_form_1.setAction("/SearchSubmit");
+    _jspx_th_html_form_1.setFocus("username");
+    _jspx_th_html_form_1.setMethod("post");
+    int _jspx_eval_html_form_1 = _jspx_th_html_form_1.doStartTag();
+    if (_jspx_eval_html_form_1 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
+      do {
+        out.write("\r\n                    ");
+        if (_jspx_meth_html_text_1(_jspx_th_html_form_1, pageContext))
+          return true;
+        out.write("\r\n                  ");
+        out.write("</td>\r\n                ");
+        out.write("</tr>\r\n                ");
+        out.write("<tr>\r\n                  ");
+        out.write("<td>\r\n\r\n                    ");
+        if (_jspx_meth_html_select_0(_jspx_th_html_form_1, pageContext))
+          return true;
+        out.write("\r\n\r\n                  ");
+        out.write("</td>\r\n                  ");
+        out.write("<td>\r\n                    ");
+        if (_jspx_meth_html_submit_1(_jspx_th_html_form_1, pageContext))
+          return true;
+        out.write("\r\n                  ");
+        int evalDoAfterBody = _jspx_th_html_form_1.doAfterBody();
+        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
+          break;
+      } while (true);
+    }
+    if (_jspx_th_html_form_1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+      return true;
+    _jspx_tagPool_html_form_method_focus_action.reuse(_jspx_th_html_form_1);
+    return false;
+  }
+
+  private boolean _jspx_meth_html_text_1(javax.servlet.jsp.tagext.Tag _jspx_th_html_form_1, javax.servlet.jsp.PageContext pageContext)
+          throws Throwable {
+    JspWriter out = pageContext.getOut();
+    /* ----  html:text ---- */
+    org.apache.struts.taglib.html.TextTag _jspx_th_html_text_1 = (org.apache.struts.taglib.html.TextTag) _jspx_tagPool_html_text_styleClass_size_property.get(org.apache.struts.taglib.html.TextTag.class);
+    _jspx_th_html_text_1.setPageContext(pageContext);
+    _jspx_th_html_text_1.setParent(_jspx_th_html_form_1);
+    _jspx_th_html_text_1.setProperty("searchfor");
+    _jspx_th_html_text_1.setSize("13");
+    _jspx_th_html_text_1.setStyleClass("login");
+    int _jspx_eval_html_text_1 = _jspx_th_html_text_1.doStartTag();
+    if (_jspx_th_html_text_1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+      return true;
+    _jspx_tagPool_html_text_styleClass_size_property.reuse(_jspx_th_html_text_1);
+    return false;
+  }
+
+  private boolean _jspx_meth_html_select_0(javax.servlet.jsp.tagext.Tag _jspx_th_html_form_1, javax.servlet.jsp.PageContext pageContext)
+          throws Throwable {
+    JspWriter out = pageContext.getOut();
+    /* ----  html:select ---- */
+    org.apache.struts.taglib.html.SelectTag _jspx_th_html_select_0 = (org.apache.struts.taglib.html.SelectTag) _jspx_tagPool_html_select_size_property_multiple.get(org.apache.struts.taglib.html.SelectTag.class);
+    _jspx_th_html_select_0.setPageContext(pageContext);
+    _jspx_th_html_select_0.setParent(_jspx_th_html_form_1);
+    _jspx_th_html_select_0.setProperty("selectName");
+    _jspx_th_html_select_0.setSize("1");
+    _jspx_th_html_select_0.setMultiple("false");
+    int _jspx_eval_html_select_0 = _jspx_th_html_select_0.doStartTag();
+    if (_jspx_eval_html_select_0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
+      if (_jspx_eval_html_select_0 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE) {
+        javax.servlet.jsp.tagext.BodyContent _bc = pageContext.pushBody();
+        out = _bc;
+        _jspx_th_html_select_0.setBodyContent(_bc);
+        _jspx_th_html_select_0.doInitBody();
+      }
+      do {
+        out.write("\r\n                      ");
+        if (_jspx_meth_html_option_0(_jspx_th_html_select_0, pageContext))
+          return true;
+        out.write("\r\n                      ");
+        if (_jspx_meth_html_option_1(_jspx_th_html_select_0, pageContext))
+          return true;
+        out.write("\r\n                      ");
+        if (_jspx_meth_html_option_2(_jspx_th_html_select_0, pageContext))
+          return true;
+        out.write("\r\n                      ");
+        if (_jspx_meth_html_option_3(_jspx_th_html_select_0, pageContext))
+          return true;
+        out.write("\r\n                    ");
+        int evalDoAfterBody = _jspx_th_html_select_0.doAfterBody();
+        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
+          break;
+      } while (true);
+      if (_jspx_eval_html_select_0 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE)
+        out = pageContext.popBody();
+    }
+    if (_jspx_th_html_select_0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+      return true;
+    _jspx_tagPool_html_select_size_property_multiple.reuse(_jspx_th_html_select_0);
+    return false;
+  }
+
+  private boolean _jspx_meth_html_option_0(javax.servlet.jsp.tagext.Tag _jspx_th_html_select_0, javax.servlet.jsp.PageContext pageContext)
+          throws Throwable {
+    JspWriter out = pageContext.getOut();
+    /* ----  html:option ---- */
+    org.apache.struts.taglib.html.OptionTag _jspx_th_html_option_0 = (org.apache.struts.taglib.html.OptionTag) _jspx_tagPool_html_option_value.get(org.apache.struts.taglib.html.OptionTag.class);
+    _jspx_th_html_option_0.setPageContext(pageContext);
+    _jspx_th_html_option_0.setParent(_jspx_th_html_select_0);
+    _jspx_th_html_option_0.setValue("0");
+    int _jspx_eval_html_option_0 = _jspx_th_html_option_0.doStartTag();
+    if (_jspx_eval_html_option_0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
+      if (_jspx_eval_html_option_0 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE) {
+        javax.servlet.jsp.tagext.BodyContent _bc = pageContext.pushBody();
+        out = _bc;
+        _jspx_th_html_option_0.setBodyContent(_bc);
+        _jspx_th_html_option_0.doInitBody();
+      }
+      do {
+        out.write("all");
+        int evalDoAfterBody = _jspx_th_html_option_0.doAfterBody();
+        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
+          break;
+      } while (true);
+      if (_jspx_eval_html_option_0 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE)
+        out = pageContext.popBody();
+    }
+    if (_jspx_th_html_option_0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+      return true;
+    _jspx_tagPool_html_option_value.reuse(_jspx_th_html_option_0);
+    return false;
+  }
+
+  private boolean _jspx_meth_html_option_1(javax.servlet.jsp.tagext.Tag _jspx_th_html_select_0, javax.servlet.jsp.PageContext pageContext)
+          throws Throwable {
+    JspWriter out = pageContext.getOut();
+    /* ----  html:option ---- */
+    org.apache.struts.taglib.html.OptionTag _jspx_th_html_option_1 = (org.apache.struts.taglib.html.OptionTag) _jspx_tagPool_html_option_value.get(org.apache.struts.taglib.html.OptionTag.class);
+    _jspx_th_html_option_1.setPageContext(pageContext);
+    _jspx_th_html_option_1.setParent(_jspx_th_html_select_0);
+    _jspx_th_html_option_1.setValue("1");
+    int _jspx_eval_html_option_1 = _jspx_th_html_option_1.doStartTag();
+    if (_jspx_eval_html_option_1 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
+      if (_jspx_eval_html_option_1 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE) {
+        javax.servlet.jsp.tagext.BodyContent _bc = pageContext.pushBody();
+        out = _bc;
+        _jspx_th_html_option_1.setBodyContent(_bc);
+        _jspx_th_html_option_1.doInitBody();
+      }
+      do {
+        out.write("Movie");
+        int evalDoAfterBody = _jspx_th_html_option_1.doAfterBody();
+        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
+          break;
+      } while (true);
+      if (_jspx_eval_html_option_1 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE)
+        out = pageContext.popBody();
+    }
+    if (_jspx_th_html_option_1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+      return true;
+    _jspx_tagPool_html_option_value.reuse(_jspx_th_html_option_1);
+    return false;
+  }
+
+  private boolean _jspx_meth_html_option_2(javax.servlet.jsp.tagext.Tag _jspx_th_html_select_0, javax.servlet.jsp.PageContext pageContext)
+          throws Throwable {
+    JspWriter out = pageContext.getOut();
+    /* ----  html:option ---- */
+    org.apache.struts.taglib.html.OptionTag _jspx_th_html_option_2 = (org.apache.struts.taglib.html.OptionTag) _jspx_tagPool_html_option_value.get(org.apache.struts.taglib.html.OptionTag.class);
+    _jspx_th_html_option_2.setPageContext(pageContext);
+    _jspx_th_html_option_2.setParent(_jspx_th_html_select_0);
+    _jspx_th_html_option_2.setValue("2");
+    int _jspx_eval_html_option_2 = _jspx_th_html_option_2.doStartTag();
+    if (_jspx_eval_html_option_2 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
+      if (_jspx_eval_html_option_2 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE) {
+        javax.servlet.jsp.tagext.BodyContent _bc = pageContext.pushBody();
+        out = _bc;
+        _jspx_th_html_option_2.setBodyContent(_bc);
+        _jspx_th_html_option_2.doInitBody();
+      }
+      do {
+        out.write("Artist");
+        int evalDoAfterBody = _jspx_th_html_option_2.doAfterBody();
+        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
+          break;
+      } while (true);
+      if (_jspx_eval_html_option_2 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE)
+        out = pageContext.popBody();
+    }
+    if (_jspx_th_html_option_2.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+      return true;
+    _jspx_tagPool_html_option_value.reuse(_jspx_th_html_option_2);
+    return false;
+  }
+
+  private boolean _jspx_meth_html_option_3(javax.servlet.jsp.tagext.Tag _jspx_th_html_select_0, javax.servlet.jsp.PageContext pageContext)
+          throws Throwable {
+    JspWriter out = pageContext.getOut();
+    /* ----  html:option ---- */
+    org.apache.struts.taglib.html.OptionTag _jspx_th_html_option_3 = (org.apache.struts.taglib.html.OptionTag) _jspx_tagPool_html_option_value.get(org.apache.struts.taglib.html.OptionTag.class);
+    _jspx_th_html_option_3.setPageContext(pageContext);
+    _jspx_th_html_option_3.setParent(_jspx_th_html_select_0);
+    _jspx_th_html_option_3.setValue("3");
+    int _jspx_eval_html_option_3 = _jspx_th_html_option_3.doStartTag();
+    if (_jspx_eval_html_option_3 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
+      if (_jspx_eval_html_option_3 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE) {
+        javax.servlet.jsp.tagext.BodyContent _bc = pageContext.pushBody();
+        out = _bc;
+        _jspx_th_html_option_3.setBodyContent(_bc);
+        _jspx_th_html_option_3.doInitBody();
+      }
+      do {
+        out.write("Genre");
+        int evalDoAfterBody = _jspx_th_html_option_3.doAfterBody();
+        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
+          break;
+      } while (true);
+      if (_jspx_eval_html_option_3 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE)
+        out = pageContext.popBody();
+    }
+    if (_jspx_th_html_option_3.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+      return true;
+    _jspx_tagPool_html_option_value.reuse(_jspx_th_html_option_3);
+    return false;
+  }
+
+  private boolean _jspx_meth_html_submit_1(javax.servlet.jsp.tagext.Tag _jspx_th_html_form_1, javax.servlet.jsp.PageContext pageContext)
+          throws Throwable {
+    JspWriter out = pageContext.getOut();
+    /* ----  html:submit ---- */
+    org.apache.struts.taglib.html.SubmitTag _jspx_th_html_submit_1 = (org.apache.struts.taglib.html.SubmitTag) _jspx_tagPool_html_submit_value_styleClass.get(org.apache.struts.taglib.html.SubmitTag.class);
+    _jspx_th_html_submit_1.setPageContext(pageContext);
+    _jspx_th_html_submit_1.setParent(_jspx_th_html_form_1);
+    _jspx_th_html_submit_1.setStyleClass("submit_search");
+    _jspx_th_html_submit_1.setValue("Suche");
+    int _jspx_eval_html_submit_1 = _jspx_th_html_submit_1.doStartTag();
+    if (_jspx_th_html_submit_1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+      return true;
+    _jspx_tagPool_html_submit_value_styleClass.reuse(_jspx_th_html_submit_1);
+    return false;
+  }
+
+  private boolean _jspx_meth_html_errors_0(javax.servlet.jsp.PageContext pageContext)
+          throws Throwable {
+    JspWriter out = pageContext.getOut();
+    /* ----  html:errors ---- */
+    org.apache.struts.taglib.html.ErrorsTag _jspx_th_html_errors_0 = (org.apache.struts.taglib.html.ErrorsTag) _jspx_tagPool_html_errors.get(org.apache.struts.taglib.html.ErrorsTag.class);
+    _jspx_th_html_errors_0.setPageContext(pageContext);
+    _jspx_th_html_errors_0.setParent(null);
+    int _jspx_eval_html_errors_0 = _jspx_th_html_errors_0.doStartTag();
+    if (_jspx_th_html_errors_0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+      return true;
+    _jspx_tagPool_html_errors.reuse(_jspx_th_html_errors_0);
+    return false;
+  }
+
+  private boolean _jspx_meth_tiles_insert_0(javax.servlet.jsp.PageContext pageContext)
+          throws Throwable {
+    JspWriter out = pageContext.getOut();
+    /* ----  tiles:insert ---- */
+    org.apache.struts.taglib.tiles.InsertTag _jspx_th_tiles_insert_0 = (org.apache.struts.taglib.tiles.InsertTag) _jspx_tagPool_tiles_insert_attribute.get(org.apache.struts.taglib.tiles.InsertTag.class);
+    _jspx_th_tiles_insert_0.setPageContext(pageContext);
+    _jspx_th_tiles_insert_0.setParent(null);
+    _jspx_th_tiles_insert_0.setAttribute("contentbody");
+    int _jspx_eval_tiles_insert_0 = _jspx_th_tiles_insert_0.doStartTag();
+    if (_jspx_th_tiles_insert_0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+      return true;
+    _jspx_tagPool_tiles_insert_attribute.reuse(_jspx_th_tiles_insert_0);
+    return false;
+  }
+}

Added: project_src/website/classes/Generated Source/.jsp/web/top10month_0002ejsp_jsp.java
===================================================================
--- project_src/website/classes/Generated Source/.jsp/web/top10month_0002ejsp_jsp.java	2004-12-29 21:54:42 UTC (rev 251)
+++ project_src/website/classes/Generated Source/.jsp/web/top10month_0002ejsp_jsp.java	2004-12-29 21:55:56 UTC (rev 252)
@@ -0,0 +1,357 @@
+import javax.servlet.*;
+import javax.servlet.http.*;
+import javax.servlet.jsp.*;
+import org.apache.jasper.runtime.*;
+
+public class top10month_0002ejsp_jsp extends HttpJspBase {
+
+
+  private static java.util.Vector _jspx_includes;
+
+  private org.apache.jasper.runtime.TagHandlerPool _jspx_tagPool_tiles_insert_page_flush;
+  private org.apache.jasper.runtime.TagHandlerPool _jspx_tagPool_tiles_put_value_name;
+  private org.apache.jasper.runtime.TagHandlerPool _jspx_tagPool_tiles_put_type_name;
+  private org.apache.jasper.runtime.TagHandlerPool _jspx_tagPool_logic_present_name;
+  private org.apache.jasper.runtime.TagHandlerPool _jspx_tagPool_logic_iterate_name_id;
+  private org.apache.jasper.runtime.TagHandlerPool _jspx_tagPool_bean_write_property_name;
+  private org.apache.jasper.runtime.TagHandlerPool _jspx_tagPool_html_link_paramProperty_paramName_paramId_forward;
+
+  public top10month_0002ejsp_jsp() {
+    _jspx_tagPool_tiles_insert_page_flush = new org.apache.jasper.runtime.TagHandlerPool();
+    _jspx_tagPool_tiles_put_value_name = new org.apache.jasper.runtime.TagHandlerPool();
+    _jspx_tagPool_tiles_put_type_name = new org.apache.jasper.runtime.TagHandlerPool();
+    _jspx_tagPool_logic_present_name = new org.apache.jasper.runtime.TagHandlerPool();
+    _jspx_tagPool_logic_iterate_name_id = new org.apache.jasper.runtime.TagHandlerPool();
+    _jspx_tagPool_bean_write_property_name = new org.apache.jasper.runtime.TagHandlerPool();
+    _jspx_tagPool_html_link_paramProperty_paramName_paramId_forward = new org.apache.jasper.runtime.TagHandlerPool();
+  }
+
+  public java.util.List getIncludes() {
+    return _jspx_includes;
+  }
+
+  public void _jspDestroy() {
+    _jspx_tagPool_tiles_insert_page_flush.release();
+    _jspx_tagPool_tiles_put_value_name.release();
+    _jspx_tagPool_tiles_put_type_name.release();
+    _jspx_tagPool_logic_present_name.release();
+    _jspx_tagPool_logic_iterate_name_id.release();
+    _jspx_tagPool_bean_write_property_name.release();
+    _jspx_tagPool_html_link_paramProperty_paramName_paramId_forward.release();
+  }
+
+  public void _jspService(HttpServletRequest request, HttpServletResponse response)
+        throws java.io.IOException, ServletException {
+
+    JspFactory _jspxFactory = null;
+    javax.servlet.jsp.PageContext pageContext = null;
+    HttpSession session = null;
+    ServletContext application = null;
+    ServletConfig config = null;
+    JspWriter out = null;
+    Object page = this;
+    JspWriter _jspx_out = null;
+
+
+    try {
+      _jspxFactory = JspFactory.getDefaultFactory();
+      response.setContentType("text/html;charset=ISO-8859-1");
+      pageContext = _jspxFactory.getPageContext(this, request, response,
+      			null, true, 8192, true);
+      application = pageContext.getServletContext();
+      config = pageContext.getServletConfig();
+      session = pageContext.getSession();
+      out = pageContext.getOut();
+      _jspx_out = out;
+
+      out.write("\r\n");
+      out.write("\r\n");
+      out.write("\r\n");
+      out.write("\r\n");
+      /* ----  tiles:insert ---- */
+      org.apache.struts.taglib.tiles.InsertTag _jspx_th_tiles_insert_0 = (org.apache.struts.taglib.tiles.InsertTag) _jspx_tagPool_tiles_insert_page_flush.get(org.apache.struts.taglib.tiles.InsertTag.class);
+      _jspx_th_tiles_insert_0.setPageContext(pageContext);
+      _jspx_th_tiles_insert_0.setParent(null);
+      _jspx_th_tiles_insert_0.setPage("/templates/main.jsp");
+      _jspx_th_tiles_insert_0.setFlush(true);
+      int _jspx_eval_tiles_insert_0 = _jspx_th_tiles_insert_0.doStartTag();
+      if (_jspx_eval_tiles_insert_0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
+        do {
+          out.write("\r\n\r\n");
+          if (_jspx_meth_tiles_put_0(_jspx_th_tiles_insert_0, pageContext))
+            return;
+          out.write("\r\n");
+          if (_jspx_meth_tiles_put_1(_jspx_th_tiles_insert_0, pageContext))
+            return;
+          out.write("\r\n\r\n");
+          /* ----  tiles:put ---- */
+          org.apache.struts.taglib.tiles.PutTag _jspx_th_tiles_put_2 = (org.apache.struts.taglib.tiles.PutTag) _jspx_tagPool_tiles_put_type_name.get(org.apache.struts.taglib.tiles.PutTag.class);
+          _jspx_th_tiles_put_2.setPageContext(pageContext);
+          _jspx_th_tiles_put_2.setParent(_jspx_th_tiles_insert_0);
+          _jspx_th_tiles_put_2.setName("contentbody");
+          _jspx_th_tiles_put_2.setType("string");
+          int _jspx_eval_tiles_put_2 = _jspx_th_tiles_put_2.doStartTag();
+          if (_jspx_eval_tiles_put_2 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
+            if (_jspx_eval_tiles_put_2 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE) {
+              javax.servlet.jsp.tagext.BodyContent _bc = pageContext.pushBody();
+              out = _bc;
+              _jspx_th_tiles_put_2.setBodyContent(_bc);
+              _jspx_th_tiles_put_2.doInitBody();
+            }
+            do {
+              out.write("\r\n\r\n\r\n\r\n");
+              /* ----  logic:present ---- */
+              org.apache.struts.taglib.logic.PresentTag _jspx_th_logic_present_0 = (org.apache.struts.taglib.logic.PresentTag) _jspx_tagPool_logic_present_name.get(org.apache.struts.taglib.logic.PresentTag.class);
+              _jspx_th_logic_present_0.setPageContext(pageContext);
+              _jspx_th_logic_present_0.setParent(_jspx_th_tiles_put_2);
+              _jspx_th_logic_present_0.setName("SearchResults");
+              int _jspx_eval_logic_present_0 = _jspx_th_logic_present_0.doStartTag();
+              if (_jspx_eval_logic_present_0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
+                do {
+                  out.write("\r\n");
+                  out.write("<!--top browse start -->\r\n            ");
+                  out.write("<table style=\"width: 95%; text-align: left;\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\">\r\n              ");
+                  out.write("<tbody>\r\n                ");
+                  out.write("<tr>\r\n                  ");
+                  out.write("<td class=\"prev_page_browse\">&nbsp;&nbsp; ");
+                  out.write("<a href=\"\">&lt;&lt; zur&uuml;ck &lt;&lt;");
+                  out.write("</a>");
+                  out.write("<br>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t");
+                  out.write("</td>\r\n                  ");
+                  out.write("<td class=\"overview_page_browse\" style=\"\">&nbsp;Seite 1 / 5 ");
+                  out.write("<br>\r\n                  ");
+                  out.write("</td>\r\n                  ");
+                  out.write("<td class=\"next_page_browse\">&nbsp;");
+                  out.write("<a href=\"\">&gt;&gt; vor &gt;&gt;");
+                  out.write("</a>&nbsp;&nbsp;");
+                  out.write("<br>\r\n                  ");
+                  out.write("</td>\r\n                ");
+                  out.write("</tr>\r\n              ");
+                  out.write("</tbody>\r\n            ");
+                  out.write("</table>\r\n");
+                  out.write("<!--top browse end -->\r\n\r\n  ");
+                  /* ----  logic:iterate ---- */
+                  org.apache.struts.taglib.logic.IterateTag _jspx_th_logic_iterate_0 = (org.apache.struts.taglib.logic.IterateTag) _jspx_tagPool_logic_iterate_name_id.get(org.apache.struts.taglib.logic.IterateTag.class);
+                  _jspx_th_logic_iterate_0.setPageContext(pageContext);
+                  _jspx_th_logic_iterate_0.setParent(_jspx_th_logic_present_0);
+                  _jspx_th_logic_iterate_0.setId("movie");
+                  _jspx_th_logic_iterate_0.setName("SearchResults");
+                  int _jspx_eval_logic_iterate_0 = _jspx_th_logic_iterate_0.doStartTag();
+                  if (_jspx_eval_logic_iterate_0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
+                    java.lang.Object movie = null;
+                    if (_jspx_eval_logic_iterate_0 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE) {
+                      javax.servlet.jsp.tagext.BodyContent _bc = pageContext.pushBody();
+                      out = _bc;
+                      _jspx_th_logic_iterate_0.setBodyContent(_bc);
+                      _jspx_th_logic_iterate_0.doInitBody();
+                    }
+                    movie = (java.lang.Object) pageContext.findAttribute("movie");
+                    do {
+                      out.write("\r\n\r\n    ");
+                      out.write("<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\">\r\n      ");
+                      out.write("<tbody>\r\n        ");
+                      out.write("<tr>\r\n          ");
+                      out.write("<td align=\"center\" width=\"20%\">");
+                      out.write("<img style=\"width: 75px; height: 75px;\" src=\"\" alt=\"\" border=\"0\">\r\n          ");
+                      out.write("</td>\r\n          ");
+                      out.write("<td>\r\n            ");
+                      out.write("<span class=\"list_title\">");
+                      if (_jspx_meth_bean_write_0(_jspx_th_logic_iterate_0, pageContext))
+                        return;
+                      out.write("</span>\r\n            ");
+                      out.write("<span class=\"list_summary\">");
+                      if (_jspx_meth_bean_write_1(_jspx_th_logic_iterate_0, pageContext))
+                        return;
+                      out.write("\r\n              ");
+                      if (_jspx_meth_html_link_0(_jspx_th_logic_iterate_0, pageContext))
+                        return;
+                      out.write("\r\n            ");
+                      out.write("</span>\r\n          ");
+                      out.write("</td>\r\n          ");
+                      out.write("<td width=\"10%\">\r\n            ");
+                      out.write("<a href=\"#\">Bestellen");
+                      out.write("</a>\r\n          ");
+                      out.write("</td>\r\n        ");
+                      out.write("</tr>\r\n      ");
+                      out.write("</tbody>\r\n    ");
+                      out.write("</table>\r\n  ");
+                      int evalDoAfterBody = _jspx_th_logic_iterate_0.doAfterBody();
+                      movie = (java.lang.Object) pageContext.findAttribute("movie");
+                      if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
+                        break;
+                    } while (true);
+                    if (_jspx_eval_logic_iterate_0 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE)
+                      out = pageContext.popBody();
+                  }
+                  if (_jspx_th_logic_iterate_0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+                    return;
+                  _jspx_tagPool_logic_iterate_name_id.reuse(_jspx_th_logic_iterate_0);
+                  out.write("\r\n\r\n\r\n  ");
+                  out.write("<!--bottom browse start -->\r\n            ");
+                  out.write("<table style=\"width: 95%; text-align: left;\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\">\r\n              ");
+                  out.write("<tbody>\r\n                ");
+                  out.write("<tr>\r\n                  ");
+                  out.write("<td class=\"prev_page_browse\">&nbsp;&nbsp; ");
+                  out.write("<a href=\"\">&lt;&lt; zur&uuml;ck &lt;&lt;");
+                  out.write("</a>");
+                  out.write("<br>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t");
+                  out.write("</td>\r\n                  ");
+                  out.write("<td class=\"overview_page_browse\" style=\"\">&nbsp;Seite 1 / 5 ");
+                  out.write("<br>\r\n                  ");
+                  out.write("<a href=\"\" class=\"single_page_browse\">1");
+                  out.write("</a>&nbsp;&nbsp;\r\n                  ");
+                  out.write("<a href=\"\" class=\"single_page_browse\">2");
+                  out.write("</a>&nbsp;&nbsp;\r\n                  ");
+                  out.write("<a href=\"\" class=\"single_page_browse\">3");
+                  out.write("</a>&nbsp;&nbsp;\r\n                  ");
+                  out.write("<a href=\"\" class=\"single_page_browse\">4");
+                  out.write("</a>&nbsp;&nbsp;\r\n                  ");
+                  out.write("<a href=\"\" class=\"single_page_browse\">5");
+                  out.write("</a>&nbsp;&nbsp;\r\n                  ");
+                  out.write("</td>\r\n                  ");
+                  out.write("<td class=\"next_page_browse\">&nbsp;");
+                  out.write("<a href=\"\">&gt;&gt; vor &gt;&gt;");
+                  out.write("</a>&nbsp;&nbsp;");
+                  out.write("<br>\r\n                  ");
+                  out.write("</td>\r\n                ");
+                  out.write("</tr>\r\n              ");
+                  out.write("</tbody>\r\n            ");
+                  out.write("</table>\r\n");
+                  out.write("<!--bottom browse end -->\r\n\r\n");
+                  int evalDoAfterBody = _jspx_th_logic_present_0.doAfterBody();
+                  if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
+                    break;
+                } while (true);
+              }
+              if (_jspx_th_logic_present_0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+                return;
+              _jspx_tagPool_logic_present_name.reuse(_jspx_th_logic_present_0);
+              out.write("\r\n");
+              int evalDoAfterBody = _jspx_th_tiles_put_2.doAfterBody();
+              if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
+                break;
+            } while (true);
+            if (_jspx_eval_tiles_put_2 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE)
+              out = pageContext.popBody();
+          }
+          if (_jspx_th_tiles_put_2.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+            return;
+          _jspx_tagPool_tiles_put_type_name.reuse(_jspx_th_tiles_put_2);
+          out.write("\r\n\r\n");
+          int evalDoAfterBody = _jspx_th_tiles_insert_0.doAfterBody();
+          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
+            break;
+        } while (true);
+      }
+      if (_jspx_th_tiles_insert_0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+        return;
+      _jspx_tagPool_tiles_insert_page_flush.reuse(_jspx_th_tiles_insert_0);
+      out.write("\r\n");
+    } catch (Throwable t) {
+      out = _jspx_out;
+      if (out != null && out.getBufferSize() != 0)
+        out.clearBuffer();
+      if (pageContext != null) pageContext.handlePageException(t);
+    } finally {
+      if (_jspxFactory != null) _jspxFactory.releasePageContext(pageContext);
+    }
+  }
+
+  private boolean _jspx_meth_tiles_put_0(javax.servlet.jsp.tagext.Tag _jspx_th_tiles_insert_0, javax.servlet.jsp.PageContext pageContext)
+          throws Throwable {
+    JspWriter out = pageContext.getOut();
+    /* ----  tiles:put ---- */
+    org.apache.struts.taglib.tiles.PutTag _jspx_th_tiles_put_0 = (org.apache.struts.taglib.tiles.PutTag) _jspx_tagPool_tiles_put_value_name.get(org.apache.struts.taglib.tiles.PutTag.class);
+    _jspx_th_tiles_put_0.setPageContext(pageContext);
+    _jspx_th_tiles_put_0.setParent(_jspx_th_tiles_insert_0);
+    _jspx_th_tiles_put_0.setName("title");
+    _jspx_th_tiles_put_0.setValue("PROfessional VIdeo RENTalStore");
+    int _jspx_eval_tiles_put_0 = _jspx_th_tiles_put_0.doStartTag();
+    if (_jspx_th_tiles_put_0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+      return true;
+    _jspx_tagPool_tiles_put_value_name.reuse(_jspx_th_tiles_put_0);
+    return false;
+  }
+
+  private boolean _jspx_meth_tiles_put_1(javax.servlet.jsp.tagext.Tag _jspx_th_tiles_insert_0, javax.servlet.jsp.PageContext pageContext)
+          throws Throwable {
+    JspWriter out = pageContext.getOut();
+    /* ----  tiles:put ---- */
+    org.apache.struts.taglib.tiles.PutTag _jspx_th_tiles_put_1 = (org.apache.struts.taglib.tiles.PutTag) _jspx_tagPool_tiles_put_value_name.get(org.apache.struts.taglib.tiles.PutTag.class);
+    _jspx_th_tiles_put_1.setPageContext(pageContext);
+    _jspx_th_tiles_put_1.setParent(_jspx_th_tiles_insert_0);
+    _jspx_th_tiles_put_1.setName("top10month_link");
+    _jspx_th_tiles_put_1.setValue("top10.jsp");
+    int _jspx_eval_tiles_put_1 = _jspx_th_tiles_put_1.doStartTag();
+    if (_jspx_th_tiles_put_1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+      return true;
+    _jspx_tagPool_tiles_put_value_name.reuse(_jspx_th_tiles_put_1);
+    return false;
+  }
+
+  private boolean _jspx_meth_bean_write_0(javax.servlet.jsp.tagext.Tag _jspx_th_logic_iterate_0, javax.servlet.jsp.PageContext pageContext)
+          throws Throwable {
+    JspWriter out = pageContext.getOut();
+    /* ----  bean:write ---- */
+    org.apache.struts.taglib.bean.WriteTag _jspx_th_bean_write_0 = (org.apache.struts.taglib.bean.WriteTag) _jspx_tagPool_bean_write_property_name.get(org.apache.struts.taglib.bean.WriteTag.class);
+    _jspx_th_bean_write_0.setPageContext(pageContext);
+    _jspx_th_bean_write_0.setParent(_jspx_th_logic_iterate_0);
+    _jspx_th_bean_write_0.setName("movie");
+    _jspx_th_bean_write_0.setProperty("title");
+    int _jspx_eval_bean_write_0 = _jspx_th_bean_write_0.doStartTag();
+    if (_jspx_th_bean_write_0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+      return true;
+    _jspx_tagPool_bean_write_property_name.reuse(_jspx_th_bean_write_0);
+    return false;
+  }
+
+  private boolean _jspx_meth_bean_write_1(javax.servlet.jsp.tagext.Tag _jspx_th_logic_iterate_0, javax.servlet.jsp.PageContext pageContext)
+          throws Throwable {
+    JspWriter out = pageContext.getOut();
+    /* ----  bean:write ---- */
+    org.apache.struts.taglib.bean.WriteTag _jspx_th_bean_write_1 = (org.apache.struts.taglib.bean.WriteTag) _jspx_tagPool_bean_write_property_name.get(org.apache.struts.taglib.bean.WriteTag.class);
+    _jspx_th_bean_write_1.setPageContext(pageContext);
+    _jspx_th_bean_write_1.setParent(_jspx_th_logic_iterate_0);
+    _jspx_th_bean_write_1.setName("movie");
+    _jspx_th_bean_write_1.setProperty("describ");
+    int _jspx_eval_bean_write_1 = _jspx_th_bean_write_1.doStartTag();
+    if (_jspx_th_bean_write_1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+      return true;
+    _jspx_tagPool_bean_write_property_name.reuse(_jspx_th_bean_write_1);
+    return false;
+  }
+
+  private boolean _jspx_meth_html_link_0(javax.servlet.jsp.tagext.Tag _jspx_th_logic_iterate_0, javax.servlet.jsp.PageContext pageContext)
+          throws Throwable {
+    JspWriter out = pageContext.getOut();
+    /* ----  html:link ---- */
+    org.apache.struts.taglib.html.LinkTag _jspx_th_html_link_0 = (org.apache.struts.taglib.html.LinkTag) _jspx_tagPool_html_link_paramProperty_paramName_paramId_forward.get(org.apache.struts.taglib.html.LinkTag.class);
+    _jspx_th_html_link_0.setPageContext(pageContext);
+    _jspx_th_html_link_0.setParent(_jspx_th_logic_iterate_0);
+    _jspx_th_html_link_0.setForward("/search/preview");
+    _jspx_th_html_link_0.setParamId("id");
+    _jspx_th_html_link_0.setParamProperty("id");
+    _jspx_th_html_link_0.setParamName("movie");
+    int _jspx_eval_html_link_0 = _jspx_th_html_link_0.doStartTag();
+    if (_jspx_eval_html_link_0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
+      if (_jspx_eval_html_link_0 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE) {
+        javax.servlet.jsp.tagext.BodyContent _bc = pageContext.pushBody();
+        out = _bc;
+        _jspx_th_html_link_0.setBodyContent(_bc);
+        _jspx_th_html_link_0.doInitBody();
+      }
+      do {
+        out.write("\r\n                &gt;&gt;mehr&lt;&lt;\r\n              ");
+        int evalDoAfterBody = _jspx_th_html_link_0.doAfterBody();
+        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
+          break;
+      } while (true);
+      if (_jspx_eval_html_link_0 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE)
+        out = pageContext.popBody();
+    }
+    if (_jspx_th_html_link_0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)
+      return true;
+    _jspx_tagPool_html_link_paramProperty_paramName_paramId_forward.reuse(_jspx_th_html_link_0);
+    return false;
+  }
+}

Added: project_src/website/classes/de/provirent/web/Action/LoginAction.class
===================================================================
(Binary files differ)


Property changes on: project_src/website/classes/de/provirent/web/Action/LoginAction.class
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/website/classes/de/provirent/web/Action/LogoutAction.class
===================================================================
(Binary files differ)


Property changes on: project_src/website/classes/de/provirent/web/Action/LogoutAction.class
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/website/classes/de/provirent/web/Action/SearchAction.class
===================================================================
(Binary files differ)


Property changes on: project_src/website/classes/de/provirent/web/Action/SearchAction.class
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/website/classes/de/provirent/web/Action/Top10MonthAction.class
===================================================================
(Binary files differ)


Property changes on: project_src/website/classes/de/provirent/web/Action/Top10MonthAction.class
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/website/classes/de/provirent/web/Constant.class
===================================================================
(Binary files differ)


Property changes on: project_src/website/classes/de/provirent/web/Constant.class
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/website/classes/de/provirent/web/Form/LoginForm.class
===================================================================
(Binary files differ)


Property changes on: project_src/website/classes/de/provirent/web/Form/LoginForm.class
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/website/classes/de/provirent/web/Form/SearchForm.class
===================================================================
(Binary files differ)


Property changes on: project_src/website/classes/de/provirent/web/Form/SearchForm.class
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/website/classes/de/provirent/web/objects/DTOMovie.class
===================================================================
(Binary files differ)


Property changes on: project_src/website/classes/de/provirent/web/objects/DTOMovie.class
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/website/classes/jsp cache/web/index_0002ejsp_jsp.class
===================================================================
(Binary files differ)


Property changes on: project_src/website/classes/jsp cache/web/index_0002ejsp_jsp.class
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/website/classes/jsp cache/web/jsp1_0002ejsp_jsp.class
===================================================================
(Binary files differ)


Property changes on: project_src/website/classes/jsp cache/web/jsp1_0002ejsp_jsp.class
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/website/classes/jsp cache/web/package cache/templates.dep2
===================================================================
(Binary files differ)


Property changes on: project_src/website/classes/jsp cache/web/package cache/templates.dep2
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/website/classes/jsp cache/web/package cache/unnamed package.dep2
===================================================================
(Binary files differ)


Property changes on: project_src/website/classes/jsp cache/web/package cache/unnamed package.dep2
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/website/classes/jsp cache/web/templates/main_0002ejsp_jsp.class
===================================================================
(Binary files differ)


Property changes on: project_src/website/classes/jsp cache/web/templates/main_0002ejsp_jsp.class
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/website/classes/jsp cache/web/top10month_0002ejsp_jsp.class
===================================================================
(Binary files differ)


Property changes on: project_src/website/classes/jsp cache/web/top10month_0002ejsp_jsp.class
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/website/classes/package cache/de.provirent.web.Action.dep2
===================================================================
(Binary files differ)


Property changes on: project_src/website/classes/package cache/de.provirent.web.Action.dep2
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/website/classes/package cache/de.provirent.web.Form.dep2
===================================================================
(Binary files differ)


Property changes on: project_src/website/classes/package cache/de.provirent.web.Form.dep2
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/website/classes/package cache/de.provirent.web.dep2
===================================================================
(Binary files differ)


Property changes on: project_src/website/classes/package cache/de.provirent.web.dep2
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/website/classes/package cache/de.provirent.web.objects.dep2
===================================================================
(Binary files differ)


Property changes on: project_src/website/classes/package cache/de.provirent.web.objects.dep2
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/website/src/ApplicationResources.properties
===================================================================
--- project_src/website/src/ApplicationResources.properties	2004-12-29 21:54:42 UTC (rev 251)
+++ project_src/website/src/ApplicationResources.properties	2004-12-29 21:55:56 UTC (rev 252)
@@ -0,0 +1,14 @@
+errors.header=<UL>
+errors.footer</UL>
+errors.prefix=<LI>
+errors.suffix=</LI>
+
+
+login.error.username.empty=Username leer
+login.error.password.empty=Passwort leer
+
+error.logon.invalid=falsches passwort
+
+
+search.error.searchfor.empty=Suchfeld leer
+search.error.selectName.empty=Suchkategorie leer

Added: project_src/website/src/de/provirent/web/Action/DetailAction.java
===================================================================
--- project_src/website/src/de/provirent/web/Action/DetailAction.java	2004-12-29 21:54:42 UTC (rev 251)
+++ project_src/website/src/de/provirent/web/Action/DetailAction.java	2004-12-29 21:55:56 UTC (rev 252)
@@ -0,0 +1,36 @@
+package de.provirent.web.Action;
+
+import org.apache.struts.action.ActionMapping;
+import org.apache.struts.action.ActionForm;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+import org.apache.struts.action.ActionForward;
+import org.apache.struts.action.Action;
+
+import de.provirent.web.Constant;
+
+public class DetailAction extends Action {
+    public ActionForward execute(ActionMapping actionMapping,
+                                 ActionForm actionForm,
+                                 HttpServletRequest request,
+                                 HttpServletResponse response) {
+
+
+        String parameter = request.getParameter(Constant.PARAM_DETAIL);
+
+        if (parameter == null || parameter.length() < 1 ){
+            // Parameter wurde nicht gefunden FEHLER
+        }
+
+        try {
+            int id = Integer.parseInt(parameter);
+
+
+        } catch (NumberFormatException ex) {
+            //Parameter ist keine Zahl FEHLER
+
+        }
+
+        return actionMapping.getInputForward();
+    }
+}

Added: project_src/website/src/de/provirent/web/Action/LoginAction.java
===================================================================
--- project_src/website/src/de/provirent/web/Action/LoginAction.java	2004-12-29 21:54:42 UTC (rev 251)
+++ project_src/website/src/de/provirent/web/Action/LoginAction.java	2004-12-29 21:55:56 UTC (rev 252)
@@ -0,0 +1,50 @@
+package de.provirent.web.Action;
+
+import org.apache.struts.action.ActionMapping;
+import org.apache.struts.action.ActionForm;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+import org.apache.struts.action.ActionForward;
+import org.apache.struts.action.Action;
+import org.apache.struts.action.ActionError;
+import org.apache.struts.action.ActionErrors;
+import javax.servlet.http.HttpSession;
+
+import de.provirent.web.Form.*;
+import de.provirent.web.Constant;
+
+public class LoginAction extends Action {
+
+
+    private final String _username ="Phil";
+    private final String _password = "123";
+
+    public ActionForward execute(ActionMapping actionMapping,
+                                 ActionForm actionForm,
+                                 HttpServletRequest servletRequest,
+                                 HttpServletResponse servletResponse) {
+        LoginForm loginForm = (LoginForm) actionForm;
+
+
+System.out.println("Teste login");
+        loginForm.getUsername();
+        loginForm.getPassword();
+        if ( loginForm.getUsername().equals(_username) && loginForm.getPassword().equals(_password) ){
+
+            HttpSession session = servletRequest.getSession();
+            session.setAttribute(Constant.USER_KEY, actionForm);
+           return actionMapping.findForward(Constant.FW_SUCCESS);
+        }
+
+        ActionErrors errors = new ActionErrors();
+        errors.add(ActionErrors.GLOBAL_ERROR,
+                   new ActionError("error.logon.invalid"));
+        saveErrors(servletRequest,errors);
+            // return to input page
+            return (new ActionForward(actionMapping.getInput()));
+
+
+    }
+
+
+}

Added: project_src/website/src/de/provirent/web/Action/LogoutAction.java
===================================================================
--- project_src/website/src/de/provirent/web/Action/LogoutAction.java	2004-12-29 21:54:42 UTC (rev 251)
+++ project_src/website/src/de/provirent/web/Action/LogoutAction.java	2004-12-29 21:55:56 UTC (rev 252)
@@ -0,0 +1,27 @@
+package de.provirent.web.Action;
+
+import org.apache.struts.action.ActionMapping;
+import org.apache.struts.action.ActionForm;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+import org.apache.struts.action.ActionForward;
+import org.apache.struts.action.Action;
+import javax.servlet.http.HttpSession;
+
+import de.provirent.web.Constant;
+
+public class LogoutAction extends Action {
+    public ActionForward execute(ActionMapping actionMapping,
+                                 ActionForm actionForm,
+                                 HttpServletRequest servletRequest,
+                                 HttpServletResponse servletResponse) {
+        System.out.println("Versuche Session zu l?schen");
+
+        HttpSession session = servletRequest.getSession();
+        // Remove user login
+
+        session.removeAttribute(Constant.USER_KEY);
+
+        return actionMapping.findForward("success");
+    }
+}

Added: project_src/website/src/de/provirent/web/Action/SearchAction.java
===================================================================
--- project_src/website/src/de/provirent/web/Action/SearchAction.java	2004-12-29 21:54:42 UTC (rev 251)
+++ project_src/website/src/de/provirent/web/Action/SearchAction.java	2004-12-29 21:55:56 UTC (rev 252)
@@ -0,0 +1,21 @@
+package de.provirent.web.Action;
+
+import org.apache.struts.action.ActionMapping;
+import org.apache.struts.action.ActionForm;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+import org.apache.struts.action.ActionForward;
+import org.apache.struts.action.Action;
+
+import de.provirent.web.Form.*;
+
+public class SearchAction extends Action {
+    public ActionForward execute(ActionMapping actionMapping,
+                                 ActionForm actionForm,
+                                 HttpServletRequest servletRequest,
+                                 HttpServletResponse servletResponse) {
+        SearchForm searchForm = (SearchForm) actionForm;
+
+        return actionMapping.getInputForward();
+    }
+}

Added: project_src/website/src/de/provirent/web/Action/Top10MonthAction.java
===================================================================
--- project_src/website/src/de/provirent/web/Action/Top10MonthAction.java	2004-12-29 21:54:42 UTC (rev 251)
+++ project_src/website/src/de/provirent/web/Action/Top10MonthAction.java	2004-12-29 21:55:56 UTC (rev 252)
@@ -0,0 +1,33 @@
+package de.provirent.web.Action;
+
+import org.apache.struts.action.ActionMapping;
+import org.apache.struts.action.ActionForm;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+import org.apache.struts.action.ActionForward;
+import org.apache.struts.action.Action;
+import javax.servlet.http.HttpSession;
+import java.util.ArrayList;
+import java.util.List;
+
+import de.provirent.web.objects.DTOMovieShort;
+
+public class Top10MonthAction extends Action {
+    public ActionForward execute(ActionMapping actionMapping,
+                                 ActionForm actionForm,
+                                 HttpServletRequest servletRequest,
+                                 HttpServletResponse servletResponse) {
+
+        List results = new ArrayList();
+
+        for (int i = 1; i < 10; i++) {
+            results.add(new DTOMovieShort("Titel" + i, "Beschreibung " + i, i+""));
+        }
+
+        HttpSession session = servletRequest.getSession();
+        session.setAttribute("SearchResults", results);
+
+        return actionMapping.getInputForward();
+
+    }
+}

Added: project_src/website/src/de/provirent/web/Constant.java
===================================================================
--- project_src/website/src/de/provirent/web/Constant.java	2004-12-29 21:54:42 UTC (rev 251)
+++ project_src/website/src/de/provirent/web/Constant.java	2004-12-29 21:55:56 UTC (rev 252)
@@ -0,0 +1,11 @@
+package de.provirent.web;
+
+public class Constant {
+
+    public static final String USER_KEY ="user";
+
+    public static final String FW_SUCCESS ="success";
+
+    public static final String PARAM_DETAIL ="id";
+
+}

Added: project_src/website/src/de/provirent/web/Form/LoginForm.java
===================================================================
--- project_src/website/src/de/provirent/web/Form/LoginForm.java	2004-12-29 21:54:42 UTC (rev 251)
+++ project_src/website/src/de/provirent/web/Form/LoginForm.java	2004-12-29 21:55:56 UTC (rev 252)
@@ -0,0 +1,46 @@
+package de.provirent.web.Form;
+
+import org.apache.struts.action.ActionForm;
+import org.apache.struts.action.ActionErrors;
+import org.apache.struts.action.ActionMapping;
+import javax.servlet.http.HttpServletRequest;
+import org.apache.struts.action.ActionError;
+
+public class LoginForm extends ActionForm {
+
+    protected String username ="";
+    protected String password ="";
+
+    public ActionErrors validate(ActionMapping actionMapping,
+                                 HttpServletRequest httpServletRequest) {
+        ActionErrors errors = new ActionErrors();
+        if( username ==  null || username.length() < 1){
+            errors.add(username, new ActionError("login.error.username.empty") );
+        }
+        if( password == null || password.length() < 1 ){
+            errors.add(password, new ActionError("login.error.password.empty") );
+        }
+
+        return errors;
+    }
+
+    public void reset(ActionMapping actionMapping,
+                      HttpServletRequest servletRequest) {
+    }
+
+    public String getUsername() {
+        return username;
+    }
+
+    public void setPassword(String password) {
+        this.password = password;
+    }
+
+    public void setUsername(String username) {
+        this.username = username;
+    }
+
+    public String getPassword() {
+        return password;
+    }
+}

Added: project_src/website/src/de/provirent/web/Form/SearchForm.java
===================================================================
--- project_src/website/src/de/provirent/web/Form/SearchForm.java	2004-12-29 21:54:42 UTC (rev 251)
+++ project_src/website/src/de/provirent/web/Form/SearchForm.java	2004-12-29 21:55:56 UTC (rev 252)
@@ -0,0 +1,48 @@
+package de.provirent.web.Form;
+
+import org.apache.struts.action.ActionForm;
+import org.apache.struts.action.ActionErrors;
+import org.apache.struts.action.ActionMapping;
+import javax.servlet.http.HttpServletRequest;
+import org.apache.struts.action.ActionError;
+
+public class SearchForm extends ActionForm {
+    private String searchfor;
+    private String selectName;
+
+    public String getSearchfor() {
+        return searchfor;
+    }
+
+    public void setSearchfor(String searchfor) {
+        this.searchfor = searchfor;
+    }
+
+    public void setSelectName(String selectName) {
+        this.selectName = selectName;
+    }
+
+    public String getSelectName() {
+        return selectName;
+    }
+
+    public ActionErrors validate(ActionMapping actionMapping,
+                                 HttpServletRequest httpServletRequest) {
+           ActionErrors errors = new ActionErrors();
+
+           if (searchfor == null || searchfor.length() < 1){
+               errors.add("searchfor",new ActionError("search.error.searchfor.empty"));
+           }
+
+           if (selectName == null || selectName.length() < 1){
+    errors.add("selectName",new ActionError("search.error.selectName.empty"));
+}
+
+
+        return errors;
+    }
+
+    public void reset(ActionMapping actionMapping,
+                      HttpServletRequest servletRequest) {
+    }
+}

Added: project_src/website/src/de/provirent/web/objects/DTOMovie.java
===================================================================
--- project_src/website/src/de/provirent/web/objects/DTOMovie.java	2004-12-29 21:54:42 UTC (rev 251)
+++ project_src/website/src/de/provirent/web/objects/DTOMovie.java	2004-12-29 21:55:56 UTC (rev 252)
@@ -0,0 +1,44 @@
+package de.provirent.web.objects;
+
+public class DTOMovie {
+
+    private String title = "";
+    private String describ = "";
+    private String id = "";
+
+    public DTOMovie() {
+
+    }
+
+    public DTOMovie(String title, String describ, String id) {
+        this.title = title;
+        this.describ = describ;
+        this.id = id;
+    }
+
+
+    public void setTitle(String title) {
+        this.title = title;
+    }
+
+    public void setDescrib(String describ) {
+        this.describ = describ;
+    }
+
+    public void setId(String id) {
+        this.id = id;
+    }
+
+    public String getId() {
+        return id;
+
+    }
+
+    public String getTitle() {
+        return title;
+    }
+
+    public String getDescrib() {
+        return describ;
+    }
+}

Added: project_src/website/src/de/provirent/web/objects/DTOMovieShort.java
===================================================================
--- project_src/website/src/de/provirent/web/objects/DTOMovieShort.java	2004-12-29 21:54:42 UTC (rev 251)
+++ project_src/website/src/de/provirent/web/objects/DTOMovieShort.java	2004-12-29 21:55:56 UTC (rev 252)
@@ -0,0 +1,46 @@
+package de.provirent.web.objects;
+
+public class DTOMovieShort {
+
+    private String movietitle = "";
+    private String moviedescrib = "";
+    private String movieid = "";
+
+    public DTOMovieShort() {
+
+    }
+
+    public DTOMovieShort(String title, String describ, String id) {
+        this.movietitle = title;
+        this.moviedescrib = describ;
+        this.movieid = id;
+    }
+
+
+    public void setTitle(String title) {
+        this.movietitle = title;
+    }
+
+    public void setDescrib(String describ) {
+        this.moviedescrib = describ;
+    }
+
+    public void setId(String id) {
+        this.movieid = id;
+    }
+
+    public String getId() {
+        return movieid;
+
+    }
+
+    public String getTitle() {
+        return movietitle;
+    }
+
+    public String getDescrib() {
+        return moviedescrib;
+    }
+
+
+}

Added: project_src/website/web/details.jsp
===================================================================
--- project_src/website/web/details.jsp	2004-12-29 21:54:42 UTC (rev 251)
+++ project_src/website/web/details.jsp	2004-12-29 21:55:56 UTC (rev 252)
@@ -0,0 +1,65 @@
+<%@ taglib uri="/WEB-INF/struts-bean.tld" prefix="bean" %>
+<%@ taglib uri="/WEB-INF/struts-html.tld" prefix="html" %>
+<%@ taglib uri="/WEB-INF/struts-tiles.tld" prefix="tiles" %>
+<%@ taglib uri="/WEB-INF/struts-logic.tld" prefix="logic" %>
+<tiles:insert page="/templates/main.jsp" flush="true">
+
+  <tiles:put name="title" value="PROfessional VIdeo RENTalStore" />
+
+  <tiles:put name="contentbody" type="string">
+
+    <logic:present name="MovieDetails">
+
+    <table style="width: 95%;" border="0" cellpadding="0" cellspacing="0" align="center">
+      <tbody>
+        <tr>
+          <td align="center" width="20%"><img style="width: 156px; height: 180px;" src="" alt="Mainpicture" title="Mainpicture"></td>
+            <td>
+              <span class="detail_title"><bean:write name="MovieDetails" property=""/></span><br/>
+              <span class="detail_genre">Genre1, Genre2</span><br/>
+              <span class="detail_describ"><bean:write name="MovieDetails" property=""/></span>
+            </td>
+                </tr>
+                <tr>
+                  <td style="width: 100%;" colspan="2"> <span class="detail_hartist">Darsteller</span><br/>
+                    <span class="detail_artist"><bean:write name="MovieDetails" property=""/></span>
+                  </td>
+                </tr>
+                <tr>
+                  <td style="width: 100%;" colspan="2"> <span class="detail_hdir">Regie </span><br/>
+                    <span class="detail_dir"><bean:write name="MovieDetails" property=""/></span>
+                  </td>
+                </tr>
+                <tr>
+                  <td style="width: 100%;" colspan="2"> <span class="detail_haudio">AudioFormate</span><br/>
+                    <span class="detail_audio"><bean:write name="MovieDetails" property=""/></span>
+                  </td>
+                </tr>
+                <tr>
+                  <td style="width: 100%;" colspan="2"> <span class="detail_hvideo">VideoFormate</span><br/>
+                    <span class="detail_video"><bean:write name="MovieDetails" property=""/></span>
+                  </td>
+                </tr>
+              </tbody>
+            </table>
+            <table border="1" cellpadding="0" cellspacing="0" style="width: 90%;" align="center">
+              <tbody>
+                <tr>
+                  <th colspan="4" class="detail_hpicture" style="text-align:left;">Weitere Bilder </th>
+                </tr>
+                <tr>
+                  <td class="detail_picture">Bild 1</td>
+                  <td class="detail_picture">Bild 2</td>
+                  <td class="detail_picture">Bild 3</td>
+                  <td class="detail_picture">Bild 4</td>
+                </tr>
+              </tbody>
+            </table>
+      </logic:present>
+
+      <logic:notPresent name="MovieDetails">
+        Keine Details zu diesem Film gefunden
+      </logic:notPresent>
+          </tiles:put>
+
+        </tiles:insert>



From pschneider at sheep.berlios.de  Wed Dec 29 22:58:47 2004
From: pschneider at sheep.berlios.de (Philipp Schneider at BerliOS)
Date: Wed, 29 Dec 2004 22:58:47 +0100
Subject: [Provirent-svn-commit] r253 - in project_src/website: . web web/WEB-INF web/WEB-INF/classes web/WEB-INF/classes/de web/WEB-INF/classes/de/provirent web/WEB-INF/classes/de/provirent/web web/WEB-INF/classes/de/provirent/web/Action web/WEB-INF/classes/de/provirent/web/Form web/WEB-INF/classes/de/provirent/web/objects web/WEB-INF/lib
Message-ID: <200412292158.iBTLwlRA027349@sheep.berlios.de>

Author: pschneider
Date: 2004-12-29 22:58:46 +0100 (Wed, 29 Dec 2004)
New Revision: 253

Added:
   project_src/website/web/WEB-INF/
   project_src/website/web/WEB-INF/classes/
   project_src/website/web/WEB-INF/classes/ApplicationResources.properties
   project_src/website/web/WEB-INF/classes/de/
   project_src/website/web/WEB-INF/classes/de/provirent/
   project_src/website/web/WEB-INF/classes/de/provirent/web/
   project_src/website/web/WEB-INF/classes/de/provirent/web/Action/
   project_src/website/web/WEB-INF/classes/de/provirent/web/Action/LoginAction.class
   project_src/website/web/WEB-INF/classes/de/provirent/web/Action/LogoutAction.class
   project_src/website/web/WEB-INF/classes/de/provirent/web/Action/SearchAction.class
   project_src/website/web/WEB-INF/classes/de/provirent/web/Action/Top10MonthAction.class
   project_src/website/web/WEB-INF/classes/de/provirent/web/Form/
   project_src/website/web/WEB-INF/classes/de/provirent/web/Form/LoginForm.class
   project_src/website/web/WEB-INF/classes/de/provirent/web/Form/SearchForm.class
   project_src/website/web/WEB-INF/classes/de/provirent/web/objects/
   project_src/website/web/WEB-INF/classes/de/provirent/web/objects/DTOMovie.class
   project_src/website/web/WEB-INF/lib/
   project_src/website/web/WEB-INF/lib/commons-beanutils.jar
   project_src/website/web/WEB-INF/lib/commons-collections.jar
   project_src/website/web/WEB-INF/lib/commons-digester.jar
   project_src/website/web/WEB-INF/lib/commons-fileupload.jar
   project_src/website/web/WEB-INF/lib/commons-lang.jar
   project_src/website/web/WEB-INF/lib/commons-logging.jar
   project_src/website/web/WEB-INF/lib/commons-validator.jar
   project_src/website/web/WEB-INF/lib/jakarta-oro.jar
   project_src/website/web/WEB-INF/lib/provirent_objects.jar
   project_src/website/web/WEB-INF/lib/struts.jar
   project_src/website/web/WEB-INF/struts-bean.tld
   project_src/website/web/WEB-INF/struts-config.xml
   project_src/website/web/WEB-INF/struts-html.tld
   project_src/website/web/WEB-INF/struts-logic.tld
   project_src/website/web/WEB-INF/struts-nested.tld
   project_src/website/web/WEB-INF/struts-template.tld
   project_src/website/web/WEB-INF/struts-tiles.tld
   project_src/website/web/WEB-INF/tiles-defs.xml
   project_src/website/web/WEB-INF/validation.xml
   project_src/website/web/WEB-INF/validator-rules.xml
   project_src/website/web/WEB-INF/web.xml
   project_src/website/web/index.jsp
   project_src/website/web/style.css
   project_src/website/web/top10month.jsp
   project_src/website/website.jpx
   project_src/website/website.jpx.local
   project_src/website/website.oif
Log:


Added: project_src/website/web/WEB-INF/classes/ApplicationResources.properties
===================================================================
--- project_src/website/web/WEB-INF/classes/ApplicationResources.properties	2004-12-29 21:55:56 UTC (rev 252)
+++ project_src/website/web/WEB-INF/classes/ApplicationResources.properties	2004-12-29 21:58:46 UTC (rev 253)
@@ -0,0 +1,9 @@
+
+login.error.username.empty=Username leer
+login.error.password.empty=Passwort leer
+
+error.logon.invalid=falsches passwort
+
+
+search.error.searchfor.empty=Suchfeld leer
+search.error.selectName.empty=Suchkategorie leer

Added: project_src/website/web/WEB-INF/classes/de/provirent/web/Action/LoginAction.class
===================================================================
(Binary files differ)


Property changes on: project_src/website/web/WEB-INF/classes/de/provirent/web/Action/LoginAction.class
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/website/web/WEB-INF/classes/de/provirent/web/Action/LogoutAction.class
===================================================================
(Binary files differ)


Property changes on: project_src/website/web/WEB-INF/classes/de/provirent/web/Action/LogoutAction.class
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/website/web/WEB-INF/classes/de/provirent/web/Action/SearchAction.class
===================================================================
(Binary files differ)


Property changes on: project_src/website/web/WEB-INF/classes/de/provirent/web/Action/SearchAction.class
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/website/web/WEB-INF/classes/de/provirent/web/Action/Top10MonthAction.class
===================================================================
(Binary files differ)


Property changes on: project_src/website/web/WEB-INF/classes/de/provirent/web/Action/Top10MonthAction.class
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/website/web/WEB-INF/classes/de/provirent/web/Form/LoginForm.class
===================================================================
(Binary files differ)


Property changes on: project_src/website/web/WEB-INF/classes/de/provirent/web/Form/LoginForm.class
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/website/web/WEB-INF/classes/de/provirent/web/Form/SearchForm.class
===================================================================
(Binary files differ)


Property changes on: project_src/website/web/WEB-INF/classes/de/provirent/web/Form/SearchForm.class
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/website/web/WEB-INF/classes/de/provirent/web/objects/DTOMovie.class
===================================================================
(Binary files differ)


Property changes on: project_src/website/web/WEB-INF/classes/de/provirent/web/objects/DTOMovie.class
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/website/web/WEB-INF/lib/commons-beanutils.jar
===================================================================
(Binary files differ)


Property changes on: project_src/website/web/WEB-INF/lib/commons-beanutils.jar
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/website/web/WEB-INF/lib/commons-collections.jar
===================================================================
(Binary files differ)


Property changes on: project_src/website/web/WEB-INF/lib/commons-collections.jar
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/website/web/WEB-INF/lib/commons-digester.jar
===================================================================
(Binary files differ)


Property changes on: project_src/website/web/WEB-INF/lib/commons-digester.jar
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/website/web/WEB-INF/lib/commons-fileupload.jar
===================================================================
(Binary files differ)


Property changes on: project_src/website/web/WEB-INF/lib/commons-fileupload.jar
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/website/web/WEB-INF/lib/commons-lang.jar
===================================================================
(Binary files differ)


Property changes on: project_src/website/web/WEB-INF/lib/commons-lang.jar
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/website/web/WEB-INF/lib/commons-logging.jar
===================================================================
(Binary files differ)


Property changes on: project_src/website/web/WEB-INF/lib/commons-logging.jar
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/website/web/WEB-INF/lib/commons-validator.jar
===================================================================
(Binary files differ)


Property changes on: project_src/website/web/WEB-INF/lib/commons-validator.jar
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/website/web/WEB-INF/lib/jakarta-oro.jar
===================================================================
(Binary files differ)


Property changes on: project_src/website/web/WEB-INF/lib/jakarta-oro.jar
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/website/web/WEB-INF/lib/provirent_objects.jar
===================================================================
(Binary files differ)


Property changes on: project_src/website/web/WEB-INF/lib/provirent_objects.jar
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/website/web/WEB-INF/lib/struts.jar
===================================================================
(Binary files differ)


Property changes on: project_src/website/web/WEB-INF/lib/struts.jar
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/website/web/WEB-INF/struts-bean.tld
===================================================================
--- project_src/website/web/WEB-INF/struts-bean.tld	2004-12-29 21:55:56 UTC (rev 252)
+++ project_src/website/web/WEB-INF/struts-bean.tld	2004-12-29 21:58:46 UTC (rev 253)
@@ -0,0 +1,382 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+
+
+
+
+
+
+<!DOCTYPE taglib PUBLIC "-//Sun Microsystems, Inc.//DTD JSP Tag Library 1.1//EN" "http://java.sun.com/j2ee/dtds/web-jsptaglibrary_1_1.dtd">
+<taglib>
+<tlibversion>1.0</tlibversion>
+<jspversion>1.1</jspversion>
+<shortname>bean</shortname>
+<uri>http://jakarta.apache.org/struts/tags-bean</uri>
+<tag>
+<name>cookie</name>
+<tagclass>org.apache.struts.taglib.bean.CookieTag</tagclass>
+<teiclass>org.apache.struts.taglib.bean.CookieTei</teiclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>id</name>
+<required>true</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>multiple</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>define</name>
+<tagclass>org.apache.struts.taglib.bean.DefineTag</tagclass>
+<teiclass>org.apache.struts.taglib.bean.DefineTei</teiclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>id</name>
+<required>true</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>toScope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>type</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>header</name>
+<tagclass>org.apache.struts.taglib.bean.HeaderTag</tagclass>
+<teiclass>org.apache.struts.taglib.bean.HeaderTei</teiclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>id</name>
+<required>true</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>multiple</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>include</name>
+<tagclass>org.apache.struts.taglib.bean.IncludeTag</tagclass>
+<teiclass>org.apache.struts.taglib.bean.IncludeTei</teiclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>anchor</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>forward</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>href</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>id</name>
+<required>true</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>page</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>transaction</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>message</name>
+<tagclass>org.apache.struts.taglib.bean.MessageTag</tagclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>arg0</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>arg1</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>arg2</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>arg3</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>arg4</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>bundle</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>key</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>locale</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>page</name>
+<tagclass>org.apache.struts.taglib.bean.PageTag</tagclass>
+<teiclass>org.apache.struts.taglib.bean.PageTei</teiclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>id</name>
+<required>true</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>parameter</name>
+<tagclass>org.apache.struts.taglib.bean.ParameterTag</tagclass>
+<teiclass>org.apache.struts.taglib.bean.ParameterTei</teiclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>id</name>
+<required>true</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>multiple</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>resource</name>
+<tagclass>org.apache.struts.taglib.bean.ResourceTag</tagclass>
+<teiclass>org.apache.struts.taglib.bean.ResourceTei</teiclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>id</name>
+<required>true</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>input</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>size</name>
+<tagclass>org.apache.struts.taglib.bean.SizeTag</tagclass>
+<teiclass>org.apache.struts.taglib.bean.SizeTei</teiclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>collection</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>id</name>
+<required>true</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>struts</name>
+<tagclass>org.apache.struts.taglib.bean.StrutsTag</tagclass>
+<teiclass>org.apache.struts.taglib.bean.StrutsTei</teiclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>id</name>
+<required>true</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>formBean</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>forward</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>mapping</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>write</name>
+<tagclass>org.apache.struts.taglib.bean.WriteTag</tagclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>bundle</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>filter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>format</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>formatKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ignore</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>locale</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+</taglib>
+
+
+

Added: project_src/website/web/WEB-INF/struts-config.xml
===================================================================
--- project_src/website/web/WEB-INF/struts-config.xml	2004-12-29 21:55:56 UTC (rev 252)
+++ project_src/website/web/WEB-INF/struts-config.xml	2004-12-29 21:58:46 UTC (rev 253)
@@ -0,0 +1,31 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE struts-config PUBLIC "-//Apache Software Foundation//DTD Struts Configuration 1.1//EN" "http://jakarta.apache.org/struts/dtds/struts-config_1_1.dtd">
+<struts-config>
+  <form-beans>
+    <form-bean name="loginActionForm" type="de.provirent.web.Form.LoginForm" />
+    <form-bean name="searchForm" type="de.provirent.web.Form.SearchForm" />
+  </form-beans>
+  <global-forwards>
+    <forward name="pref" path="/Pref.do" />
+    <forward name="basket" path="/Basket.do" />
+    <forward name="logout" path="/Logout.do" />
+    <forward name="search/new" path="/Search/New.do" />
+    <forward name="search/top10month" path="/Search/Top10Month.do" />
+    <forward name="search/top100year" path="/Search/Top100Year.do" />
+    <forward name="search/preview" path="/Logout.do" />
+  </global-forwards>
+  <action-mappings>
+    <action input="/index.jsp" name="loginActionForm" path="/LogonSubmit" scope="request" type="de.provirent.web.Action.LoginAction">
+      <forward name="success" path="/index.jsp" />
+    </action>
+    <action path="/Logout" type="de.provirent.web.Action.LogoutAction">
+      <forward name="success" path="/index.jsp" />
+    </action>
+    <action input="/index.jsp" name="searchForm" path="/SearchSubmit" scope="request" type="de.provirent.web.Action.SearchAction" validate="true" />
+    <action input="/top10month.jsp" path="/Search/Top10Month" scope="request" type="de.provirent.web.Action.Top10MonthAction" />
+    <action input="/details.jsp" path="/detailAction" type="de.provirent.web.Action.DetailAction" />
+  </action-mappings>
+  <plug-in className="org.apache.struts.validator.ValidatorPlugIn">
+    <set-property property="pathnames" value="/WEB-INF/validator-rules.xml,/WEB-INF/validation.xml" />
+  </plug-in>
+</struts-config>

Added: project_src/website/web/WEB-INF/struts-html.tld
===================================================================
--- project_src/website/web/WEB-INF/struts-html.tld	2004-12-29 21:55:56 UTC (rev 252)
+++ project_src/website/web/WEB-INF/struts-html.tld	2004-12-29 21:58:46 UTC (rev 253)
@@ -0,0 +1,2972 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+
+
+
+
+
+
+<!DOCTYPE taglib PUBLIC "-//Sun Microsystems, Inc.//DTD JSP Tag Library 1.1//EN" "http://java.sun.com/j2ee/dtds/web-jsptaglibrary_1_1.dtd">
+<taglib>
+<tlibversion>1.0</tlibversion>
+<jspversion>1.1</jspversion>
+<shortname>html</shortname>
+<uri>http://jakarta.apache.org/struts/tags-html</uri>
+<tag>
+<name>base</name>
+<tagclass>org.apache.struts.taglib.html.BaseTag</tagclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>target</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>server</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>button</name>
+<tagclass>org.apache.struts.taglib.html.ButtonTag</tagclass>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>disabled</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexed</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onchange</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>cancel</name>
+<tagclass>org.apache.struts.taglib.html.CancelTag</tagclass>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>disabled</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onchange</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>checkbox</name>
+<tagclass>org.apache.struts.taglib.html.CheckboxTag</tagclass>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>disabled</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexed</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onchange</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>errors</name>
+<tagclass>org.apache.struts.taglib.html.ErrorsTag</tagclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>bundle</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>locale</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>file</name>
+<tagclass>org.apache.struts.taglib.html.FileTag</tagclass>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>accept</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>disabled</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexed</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>maxlength</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onchange</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>size</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>form</name>
+<tagclass>org.apache.struts.taglib.html.FormTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>action</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>enctype</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>focus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>focusIndex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>method</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onreset</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onsubmit</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>target</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>type</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>frame</name>
+<tagclass>org.apache.struts.taglib.html.FrameTag</tagclass>
+<attribute>
+<name>action</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>anchor</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>forward</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>frameborder</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>frameName</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>href</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>longdesc</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>marginheight</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>marginwidth</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>noresize</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>page</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramName</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramProperty</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramScope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scrolling</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>transaction</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>hidden</name>
+<tagclass>org.apache.struts.taglib.html.HiddenTag</tagclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexed</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onchange</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>write</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>html</name>
+<tagclass>org.apache.struts.taglib.html.HtmlTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>locale</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>xhtml</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>image</name>
+<tagclass>org.apache.struts.taglib.html.ImageTag</tagclass>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>align</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>border</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>bundle</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>disabled</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexed</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>locale</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onchange</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>page</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>pageKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>src</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>srcKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>img</name>
+<tagclass>org.apache.struts.taglib.html.ImgTag</tagclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>align</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>border</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>bundle</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>height</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>hspace</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>imageName</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ismap</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>locale</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>lowsrc</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>page</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>pageKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramName</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramProperty</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramScope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>src</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>srcKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>usemap</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>vspace</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>width</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>javascript</name>
+<tagclass>org.apache.struts.taglib.html.JavascriptValidatorTag</tagclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>cdata</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>dynamicJavascript</name>
+<required>false</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>formName</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>method</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>page</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>src</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>staticJavascript</name>
+<required>false</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>htmlComment</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>link</name>
+<tagclass>org.apache.struts.taglib.html.LinkTag</tagclass>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>action</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>anchor</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>forward</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>href</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexed</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>linkName</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>page</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramName</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramProperty</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramScope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>target</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>transaction</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>messages</name>
+<tagclass>org.apache.struts.taglib.html.MessagesTag</tagclass>
+<teiclass>org.apache.struts.taglib.html.MessagesTei</teiclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>id</name>
+<required>true</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>bundle</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>locale</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>header</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>footer</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>message</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>multibox</name>
+<tagclass>org.apache.struts.taglib.html.MultiboxTag</tagclass>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>disabled</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onchange</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>option</name>
+<tagclass>org.apache.struts.taglib.html.OptionTag</tagclass>
+<attribute>
+<name>bundle</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>disabled</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>key</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>locale</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>options</name>
+<tagclass>org.apache.struts.taglib.html.OptionsTag</tagclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>collection</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>filter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>labelName</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>labelProperty</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>optionsCollection</name>
+<tagclass>org.apache.struts.taglib.html.OptionsCollectionTag</tagclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>filter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>label</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>password</name>
+<tagclass>org.apache.struts.taglib.html.PasswordTag</tagclass>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>disabled</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexed</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>maxlength</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onchange</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>readonly</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>redisplay</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>size</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>radio</name>
+<tagclass>org.apache.struts.taglib.html.RadioTag</tagclass>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>disabled</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexed</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onchange</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>idName</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>reset</name>
+<tagclass>org.apache.struts.taglib.html.ResetTag</tagclass>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>disabled</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onchange</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>rewrite</name>
+<tagclass>org.apache.struts.taglib.html.RewriteTag</tagclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>anchor</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>forward</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>href</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>page</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramName</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramProperty</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramScope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>transaction</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>select</name>
+<tagclass>org.apache.struts.taglib.html.SelectTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>disabled</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexed</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>multiple</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onchange</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>size</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>submit</name>
+<tagclass>org.apache.struts.taglib.html.SubmitTag</tagclass>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>disabled</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexed</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onchange</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>text</name>
+<tagclass>org.apache.struts.taglib.html.TextTag</tagclass>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>disabled</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexed</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>maxlength</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onchange</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>readonly</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>size</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>textarea</name>
+<tagclass>org.apache.struts.taglib.html.TextareaTag</tagclass>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>cols</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>disabled</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexed</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onchange</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>readonly</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>rows</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>xhtml</name>
+<tagclass>org.apache.struts.taglib.html.XhtmlTag</tagclass>
+<bodycontent>empty</bodycontent>
+</tag>
+</taglib>
+

Added: project_src/website/web/WEB-INF/struts-logic.tld
===================================================================
--- project_src/website/web/WEB-INF/struts-logic.tld	2004-12-29 21:55:56 UTC (rev 252)
+++ project_src/website/web/WEB-INF/struts-logic.tld	2004-12-29 21:58:46 UTC (rev 253)
@@ -0,0 +1,642 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+
+
+
+
+
+<!DOCTYPE taglib PUBLIC "-//Sun Microsystems, Inc.//DTD JSP Tag Library 1.1//EN" "http://java.sun.com/j2ee/dtds/web-jsptaglibrary_1_1.dtd">
+<taglib>
+<tlibversion>1.0</tlibversion>
+<jspversion>1.1</jspversion>
+<shortname>logic</shortname>
+<uri>http://jakarta.apache.org/struts/tags-logic</uri>
+<tag>
+<name>empty</name>
+<tagclass>org.apache.struts.taglib.logic.EmptyTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>equal</name>
+<tagclass>org.apache.struts.taglib.logic.EqualTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>cookie</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>header</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>parameter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>forward</name>
+<tagclass>org.apache.struts.taglib.logic.ForwardTag</tagclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>name</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>greaterEqual</name>
+<tagclass>org.apache.struts.taglib.logic.GreaterEqualTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>cookie</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>header</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>parameter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>greaterThan</name>
+<tagclass>org.apache.struts.taglib.logic.GreaterThanTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>cookie</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>header</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>parameter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>iterate</name>
+<tagclass>org.apache.struts.taglib.logic.IterateTag</tagclass>
+<teiclass>org.apache.struts.taglib.logic.IterateTei</teiclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>collection</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>id</name>
+<required>true</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexId</name>
+<required>false</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>length</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>offset</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>type</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>lessEqual</name>
+<tagclass>org.apache.struts.taglib.logic.LessEqualTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>cookie</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>header</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>parameter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>lessThan</name>
+<tagclass>org.apache.struts.taglib.logic.LessThanTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>cookie</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>header</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>parameter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>match</name>
+<tagclass>org.apache.struts.taglib.logic.MatchTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>cookie</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>header</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>location</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>parameter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>messagesNotPresent</name>
+<tagclass>org.apache.struts.taglib.logic.MessagesNotPresentTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>message</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>messagesPresent</name>
+<tagclass>org.apache.struts.taglib.logic.MessagesPresentTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>message</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>notEmpty</name>
+<tagclass>org.apache.struts.taglib.logic.NotEmptyTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>notEqual</name>
+<tagclass>org.apache.struts.taglib.logic.NotEqualTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>cookie</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>header</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>parameter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>notMatch</name>
+<tagclass>org.apache.struts.taglib.logic.NotMatchTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>cookie</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>header</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>location</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>parameter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>notPresent</name>
+<tagclass>org.apache.struts.taglib.logic.NotPresentTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>cookie</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>header</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>parameter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>role</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>user</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>present</name>
+<tagclass>org.apache.struts.taglib.logic.PresentTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>cookie</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>header</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>parameter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>role</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>user</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>redirect</name>
+<tagclass>org.apache.struts.taglib.logic.RedirectTag</tagclass>
+<attribute>
+<name>anchor</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>forward</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>href</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>page</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramName</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramProperty</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramScope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>transaction</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+</taglib>
+
+
+

Added: project_src/website/web/WEB-INF/struts-nested.tld
===================================================================
--- project_src/website/web/WEB-INF/struts-nested.tld	2004-12-29 21:55:56 UTC (rev 252)
+++ project_src/website/web/WEB-INF/struts-nested.tld	2004-12-29 21:58:46 UTC (rev 253)
@@ -0,0 +1,2870 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+
+
+
+
+
+<!DOCTYPE taglib PUBLIC "-//Sun Microsystems, Inc.//DTD JSP Tag Library 1.1//EN" "http://java.sun.com/j2ee/dtds/web-jsptaglibrary_1_1.dtd">
+<taglib>
+<tlibversion>1.0</tlibversion>
+<jspversion>1.1</jspversion>
+<shortname>nested</shortname>
+<uri>http://jakarta.apache.org/struts/tags-nested</uri>
+<tag>
+<name>nest</name>
+<tagclass>org.apache.struts.taglib.nested.NestedPropertyTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>writeNesting</name>
+<tagclass>org.apache.struts.taglib.nested.NestedWriteNestingTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>filter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>root</name>
+<tagclass>org.apache.struts.taglib.nested.NestedRootTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>define</name>
+<tagclass>org.apache.struts.taglib.nested.bean.NestedDefineTag</tagclass>
+<teiclass>org.apache.struts.taglib.nested.bean.NestedDefineTei</teiclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>id</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>toScope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>type</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>message</name>
+<tagclass>org.apache.struts.taglib.nested.bean.NestedMessageTag</tagclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>arg0</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>arg1</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>arg2</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>arg3</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>arg4</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>bundle</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>key</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>locale</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>size</name>
+<tagclass>org.apache.struts.taglib.nested.bean.NestedSizeTag</tagclass>
+<teiclass>org.apache.struts.taglib.bean.SizeTei</teiclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>collection</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>id</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>write</name>
+<tagclass>org.apache.struts.taglib.nested.bean.NestedWriteTag</tagclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>bundle</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>filter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>format</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>formatKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ignore</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>locale</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>checkbox</name>
+<tagclass>org.apache.struts.taglib.nested.html.NestedCheckboxTag</tagclass>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>disabled</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexed</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onchange</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>errors</name>
+<tagclass>org.apache.struts.taglib.nested.html.NestedErrorsTag</tagclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>bundle</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>locale</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>file</name>
+<tagclass>org.apache.struts.taglib.nested.html.NestedFileTag</tagclass>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>accept</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>disabled</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexed</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>maxlength</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onchange</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>size</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>form</name>
+<tagclass>org.apache.struts.taglib.nested.html.NestedFormTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>action</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>enctype</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>focus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>method</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onreset</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onsubmit</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>target</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>type</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>hidden</name>
+<tagclass>org.apache.struts.taglib.nested.html.NestedHiddenTag</tagclass>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexed</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>image</name>
+<tagclass>org.apache.struts.taglib.nested.html.NestedImageTag</tagclass>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>align</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>border</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>bundle</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>disabled</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexed</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>locale</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onchange</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>page</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>pageKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>src</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>srcKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>img</name>
+<tagclass>org.apache.struts.taglib.nested.html.NestedImgTag</tagclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>align</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>border</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>bundle</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>height</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>hspace</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>imageName</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ismap</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>locale</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>lowsrc</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>page</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>pageKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramName</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramProperty</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramScope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>src</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>srcKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>usemap</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>vspace</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>width</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>link</name>
+<tagclass>org.apache.struts.taglib.nested.html.NestedLinkTag</tagclass>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>action</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>anchor</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>forward</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>href</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexed</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>linkName</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>page</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramName</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramProperty</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>paramScope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>target</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>transaction</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>messages</name>
+<tagclass>org.apache.struts.taglib.nested.html.NestedMessagesTag</tagclass>
+<teiclass>org.apache.struts.taglib.html.MessagesTei</teiclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>id</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>bundle</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>locale</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>header</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>footer</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>message</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>multibox</name>
+<tagclass>org.apache.struts.taglib.nested.html.NestedMultiboxTag</tagclass>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>disabled</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onchange</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>options</name>
+<tagclass>org.apache.struts.taglib.nested.html.NestedOptionsTag</tagclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>collection</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>labelName</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>labelProperty</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>optionsCollection</name>
+<tagclass>org.apache.struts.taglib.nested.html.NestedOptionsCollectionTag</tagclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>label</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>password</name>
+<tagclass>org.apache.struts.taglib.nested.html.NestedPasswordTag</tagclass>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>disabled</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexed</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>maxlength</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onchange</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>readonly</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>redisplay</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>size</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>radio</name>
+<tagclass>org.apache.struts.taglib.nested.html.NestedRadioTag</tagclass>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>disabled</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexed</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onchange</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>select</name>
+<tagclass>org.apache.struts.taglib.nested.html.NestedSelectTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>disabled</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexed</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>multiple</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onchange</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>size</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>submit</name>
+<tagclass>org.apache.struts.taglib.nested.html.NestedSubmitTag</tagclass>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>disabled</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexed</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onchange</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>text</name>
+<tagclass>org.apache.struts.taglib.nested.html.NestedTextTag</tagclass>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>disabled</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexed</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>maxlength</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onchange</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>readonly</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>size</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>textarea</name>
+<tagclass>org.apache.struts.taglib.nested.html.NestedTextareaTag</tagclass>
+<attribute>
+<name>accesskey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>alt</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>altKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>cols</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>disabled</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexed</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onblur</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onchange</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ondblclick</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onfocus</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeydown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeypress</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onkeyup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousedown</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmousemove</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseout</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseover</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>onmouseup</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>readonly</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>rows</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>style</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>styleId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>tabindex</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>title</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>titleKey</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>empty</name>
+<tagclass>org.apache.struts.taglib.nested.logic.NestedEmptyTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>equal</name>
+<tagclass>org.apache.struts.taglib.nested.logic.NestedEqualTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>cookie</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>header</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>parameter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>greaterEqual</name>
+<tagclass>org.apache.struts.taglib.nested.logic.NestedGreaterEqualTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>cookie</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>header</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>parameter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>greaterThan</name>
+<tagclass>org.apache.struts.taglib.nested.logic.NestedGreaterThanTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>cookie</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>header</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>parameter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>iterate</name>
+<tagclass>org.apache.struts.taglib.nested.logic.NestedIterateTag</tagclass>
+<teiclass>org.apache.struts.taglib.nested.logic.NestedIterateTei</teiclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>collection</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>id</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>indexId</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>length</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>offset</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>type</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>lessEqual</name>
+<tagclass>org.apache.struts.taglib.nested.logic.NestedLessEqualTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>cookie</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>header</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>parameter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>lessThan</name>
+<tagclass>org.apache.struts.taglib.nested.logic.NestedLessThanTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>cookie</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>header</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>parameter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>match</name>
+<tagclass>org.apache.struts.taglib.nested.logic.NestedMatchTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>cookie</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>header</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>location</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>parameter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>messagesNotPresent</name>
+<tagclass>org.apache.struts.taglib.nested.logic.NestedMessagesNotPresentTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>message</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>messagesPresent</name>
+<tagclass>org.apache.struts.taglib.nested.logic.NestedMessagesPresentTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>message</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>notEmpty</name>
+<tagclass>org.apache.struts.taglib.nested.logic.NestedNotEmptyTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>notEqual</name>
+<tagclass>org.apache.struts.taglib.nested.logic.NestedNotEqualTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>cookie</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>header</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>parameter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>notMatch</name>
+<tagclass>org.apache.struts.taglib.nested.logic.NestedNotMatchTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>cookie</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>header</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>location</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>parameter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>notPresent</name>
+<tagclass>org.apache.struts.taglib.nested.logic.NestedNotPresentTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>cookie</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>header</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>parameter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>role</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>user</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>present</name>
+<tagclass>org.apache.struts.taglib.nested.logic.NestedPresentTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>cookie</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>header</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>parameter</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>property</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>role</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>user</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+</taglib>
+
+
+

Added: project_src/website/web/WEB-INF/struts-template.tld
===================================================================
--- project_src/website/web/WEB-INF/struts-template.tld	2004-12-29 21:55:56 UTC (rev 252)
+++ project_src/website/web/WEB-INF/struts-template.tld	2004-12-29 21:58:46 UTC (rev 253)
@@ -0,0 +1,73 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+
+
+
+
+
+
+<!DOCTYPE taglib PUBLIC "-//Sun Microsystems, Inc.//DTD JSP Tag Library 1.1//EN" "http://java.sun.com/j2ee/dtds/web-jsptaglibrary_1_1.dtd">
+<taglib>
+<tlibversion>1.0</tlibversion>
+<jspversion>1.1</jspversion>
+<shortname>template</shortname>
+<uri>http://jakarta.apache.org/struts/tags-template</uri>
+<tag>
+<name>insert</name>
+<tagclass>org.apache.struts.taglib.template.InsertTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>template</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>put</name>
+<tagclass>org.apache.struts.taglib.template.PutTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>name</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>role</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>content</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>direct</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>get</name>
+<tagclass>org.apache.struts.taglib.template.GetTag</tagclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>flush</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>role</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+</taglib>
+
+
+

Added: project_src/website/web/WEB-INF/struts-tiles.tld
===================================================================
--- project_src/website/web/WEB-INF/struts-tiles.tld	2004-12-29 21:55:56 UTC (rev 252)
+++ project_src/website/web/WEB-INF/struts-tiles.tld	2004-12-29 21:58:46 UTC (rev 253)
@@ -0,0 +1,344 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+
+
+
+
+
+
+<!DOCTYPE taglib PUBLIC "-//Sun Microsystems, Inc.//DTD JSP Tag Library 1.1//EN" "http://java.sun.com/j2ee/dtds/web-jsptaglibrary_1_1.dtd">
+<taglib>
+<tlibversion>1.0</tlibversion>
+<jspversion>1.1</jspversion>
+<shortname>tiles</shortname>
+<uri>http://jakarta.apache.org/struts/tags-tiles</uri>
+<tag>
+<name>insert</name>
+<tagclass>org.apache.struts.taglib.tiles.InsertTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>template</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>component</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>page</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>definition</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>attribute</name>
+<required>false</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>beanName</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>beanProperty</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>beanScope</name>
+<required>false</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>flush</name>
+<required>false</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>ignore</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>role</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>controllerUrl</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>controllerClass</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>definition</name>
+<tagclass>org.apache.struts.taglib.tiles.DefinitionTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>id</name>
+<required>true</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>template</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>page</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>role</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>extends</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>put</name>
+<tagclass>org.apache.struts.taglib.tiles.PutTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>content</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>direct</name>
+<required>false</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>type</name>
+<required>false</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>beanName</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>beanProperty</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>beanScope</name>
+<required>false</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>role</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>putList</name>
+<tagclass>org.apache.struts.taglib.tiles.PutListTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>name</name>
+<required>true</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>add</name>
+<tagclass>org.apache.struts.taglib.tiles.AddTag</tagclass>
+<bodycontent>JSP</bodycontent>
+<attribute>
+<name>value</name>
+<required>false</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>content</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>direct</name>
+<required>false</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>type</name>
+<required>false</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>beanName</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>beanProperty</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>beanScope</name>
+<required>false</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>role</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>get</name>
+<tagclass>org.apache.struts.taglib.tiles.GetTag</tagclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>name</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ignore</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>flush</name>
+<required>false</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>role</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>getAsString</name>
+<tagclass>org.apache.struts.taglib.tiles.GetAttributeTag</tagclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>name</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ignore</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>role</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>useAttribute</name>
+<tagclass>org.apache.struts.taglib.tiles.UseAttributeTag</tagclass>
+<teiclass>org.apache.struts.taglib.tiles.UseAttributeTei</teiclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>id</name>
+<required>false</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>classname</name>
+<required>false</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>name</name>
+<required>true</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>ignore</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>importAttribute</name>
+<tagclass>org.apache.struts.taglib.tiles.ImportAttributeTag</tagclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>name</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+<attribute>
+<name>scope</name>
+<required>false</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>ignore</name>
+<required>false</required>
+<rtexprvalue>true</rtexprvalue>
+</attribute>
+</tag>
+<tag>
+<name>initComponentDefinitions</name>
+<tagclass>org.apache.struts.taglib.tiles.InitDefinitionsTag</tagclass>
+<bodycontent>empty</bodycontent>
+<attribute>
+<name>file</name>
+<required>true</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+<attribute>
+<name>classname</name>
+<required>false</required>
+<rtexprvalue>false</rtexprvalue>
+</attribute>
+</tag>
+</taglib>
+
+
+

Added: project_src/website/web/WEB-INF/tiles-defs.xml
===================================================================
--- project_src/website/web/WEB-INF/tiles-defs.xml	2004-12-29 21:55:56 UTC (rev 252)
+++ project_src/website/web/WEB-INF/tiles-defs.xml	2004-12-29 21:58:46 UTC (rev 253)
@@ -0,0 +1,3 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE tiles-definitions PUBLIC "-//Apache Software Foundation//DTD Tiles Configuration 1.1//EN" "http://jakarta.apache.org/struts/dtds/tiles-config_1_1.dtd">
+<tiles-definitions />

Added: project_src/website/web/WEB-INF/validation.xml
===================================================================
--- project_src/website/web/WEB-INF/validation.xml	2004-12-29 21:55:56 UTC (rev 252)
+++ project_src/website/web/WEB-INF/validation.xml	2004-12-29 21:58:46 UTC (rev 253)
@@ -0,0 +1,3 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE form-validation PUBLIC "-//Apache Software Foundation//DTD Commons Validator Rules Configuration 1.0//EN" "http://jakarta.apache.org/commons/dtds/validator_1_0.dtd">
+<form-validation />

Added: project_src/website/web/WEB-INF/validator-rules.xml
===================================================================
--- project_src/website/web/WEB-INF/validator-rules.xml	2004-12-29 21:55:56 UTC (rev 252)
+++ project_src/website/web/WEB-INF/validator-rules.xml	2004-12-29 21:58:46 UTC (rev 253)
@@ -0,0 +1,1044 @@
+<!DOCTYPE form-validation PUBLIC
+          "-//Apache Software Foundation//DTD Commons Validator Rules Configuration 1.0//EN"
+          "http://jakarta.apache.org/commons/dtds/validator_1_0.dtd">
+<!--
+
+   This file contains the default Struts Validator pluggable validator
+   definitions.  It should be placed somewhere under /WEB-INF and
+   referenced in the struts-config.xml under the plug-in element
+   for the ValidatorPlugIn.
+
+      <plug-in className="org.apache.struts.validator.ValidatorPlugIn">
+        <set-property property="pathnames" value="/WEB-INF/validator-rules.xml,
+                                                  /WEB-INF/validation.xml"/>
+      </plug-in>
+
+   These are the default error messages associated with
+   each validator defined in this file.  They should be
+   added to your projects ApplicationResources.properties
+   file or you can associate new ones by modifying the
+   pluggable validators msg attributes in this file.
+
+   # Struts Validator Error Messages
+   errors.required={0} is required.
+   errors.minlength={0} can not be less than {1} characters.
+   errors.maxlength={0} can not be greater than {1} characters.
+   errors.invalid={0} is invalid.
+
+   errors.byte={0} must be a byte.
+   errors.short={0} must be a short.
+   errors.integer={0} must be an integer.
+   errors.long={0} must be a long.
+   errors.float={0} must be a float.
+   errors.double={0} must be a double.
+
+   errors.date={0} is not a date.
+   errors.range={0} is not in the range {1} through {2}.
+   errors.creditcard={0} is an invalid credit card number.
+   errors.email={0} is an invalid e-mail address.
+
+-->
+
+<form-validation>
+
+   <global>
+
+      <validator name="required"
+            classname="org.apache.struts.validator.FieldChecks"
+               method="validateRequired"
+         methodParams="java.lang.Object,
+                       org.apache.commons.validator.ValidatorAction,
+                       org.apache.commons.validator.Field,
+                       org.apache.struts.action.ActionErrors,
+                       javax.servlet.http.HttpServletRequest"
+                  msg="errors.required">
+
+         <javascript><![CDATA[
+            function validateRequired(form) {
+                var isValid = true;
+                var focusField = null;
+                var i = 0;
+                var fields = new Array();
+                oRequired = new required();
+                for (x in oRequired) {
+                	var field = form[oRequired[x][0]];
+                	
+                    if (field.type == 'text' ||
+                        field.type == 'textarea' ||
+                        field.type == 'file' ||
+                        field.type == 'select-one' ||
+                        field.type == 'radio' ||
+                        field.type == 'password') {
+                        
+                        var value = '';
+						// get field's value
+						if (field.type == "select-one") {
+							var si = field.selectedIndex;
+							if (si >= 0) {
+								value = field.options[si].value;
+							}
+						} else {
+							value = field.value;
+						}
+                        
+                        if (trim(value).length == 0) {
+                        
+	                        if (i == 0) {
+	                            focusField = field;
+	                        }
+	                        fields[i++] = oRequired[x][1];
+	                        isValid = false;
+                        }
+                    }
+                }
+                if (fields.length > 0) {
+                   focusField.focus();
+                   alert(fields.join('\n'));
+                }
+                return isValid;
+            }
+            
+            // Trim whitespace from left and right sides of s.
+            function trim(s) {
+                return s.replace( /^\s*/, "" ).replace( /\s*$/, "" );
+            }
+            
+            ]]>
+         </javascript>
+
+      </validator>
+
+      <validator name="requiredif"
+                 classname="org.apache.struts.validator.FieldChecks"
+                 method="validateRequiredIf"
+                 methodParams="java.lang.Object,
+                               org.apache.commons.validator.ValidatorAction,
+                               org.apache.commons.validator.Field,
+                               org.apache.struts.action.ActionErrors,
+                               org.apache.commons.validator.Validator,
+                               javax.servlet.http.HttpServletRequest"
+                 msg="errors.required">
+      </validator>
+
+      <validator name="minlength"
+            classname="org.apache.struts.validator.FieldChecks"
+               method="validateMinLength"
+         methodParams="java.lang.Object,
+                       org.apache.commons.validator.ValidatorAction,
+                       org.apache.commons.validator.Field,
+                       org.apache.struts.action.ActionErrors,
+                       javax.servlet.http.HttpServletRequest"
+              depends=""
+                  msg="errors.minlength">
+
+         <javascript><![CDATA[
+            function validateMinLength(form) {
+                var isValid = true;
+                var focusField = null;
+                var i = 0;
+                var fields = new Array();
+                oMinLength = new minlength();
+                for (x in oMinLength) {
+                    var field = form[oMinLength[x][0]];
+                    
+                    if (field.type == 'text' ||
+                        field.type == 'textarea') {
+                        
+                        var iMin = parseInt(oMinLength[x][2]("minlength"));
+                        if ((trim(field.value).length > 0) && (field.value.length < iMin)) {
+                            if (i == 0) {
+                                focusField = field;
+                            }
+                            fields[i++] = oMinLength[x][1];
+                            isValid = false;
+                        }
+                    }
+                }
+                if (fields.length > 0) {
+                   focusField.focus();
+                   alert(fields.join('\n'));
+                }
+                return isValid;
+            }]]>
+         </javascript>
+
+      </validator>
+
+
+      <validator name="maxlength"
+            classname="org.apache.struts.validator.FieldChecks"
+               method="validateMaxLength"
+         methodParams="java.lang.Object,
+                       org.apache.commons.validator.ValidatorAction,
+                       org.apache.commons.validator.Field,
+                       org.apache.struts.action.ActionErrors,
+                       javax.servlet.http.HttpServletRequest"
+              depends=""
+                  msg="errors.maxlength">
+
+         <javascript><![CDATA[
+            function validateMaxLength(form) {
+                var isValid = true;
+                var focusField = null;
+                var i = 0;
+                var fields = new Array();
+                oMaxLength = new maxlength();
+                for (x in oMaxLength) {
+                    var field = form[oMaxLength[x][0]];
+                    
+                    if (field.type == 'text' ||
+                        field.type == 'textarea') {
+                        
+                        var iMax = parseInt(oMaxLength[x][2]("maxlength"));
+                        if (field.value.length > iMax) {
+                            if (i == 0) {
+                                focusField = field;
+                            }
+                            fields[i++] = oMaxLength[x][1];
+                            isValid = false;
+                        }
+                    }
+                }
+                if (fields.length > 0) {
+                   focusField.focus();
+                   alert(fields.join('\n'));
+                }
+                return isValid;
+            }]]>
+         </javascript>
+
+      </validator>
+
+
+      <validator name="mask"
+            classname="org.apache.struts.validator.FieldChecks"
+               method="validateMask"
+         methodParams="java.lang.Object,
+                       org.apache.commons.validator.ValidatorAction,
+                       org.apache.commons.validator.Field,
+                       org.apache.struts.action.ActionErrors,
+                       javax.servlet.http.HttpServletRequest"
+              depends=""
+                  msg="errors.invalid">
+
+         <javascript><![CDATA[
+            function validateMask(form) {
+                var isValid = true;
+                var focusField = null;
+                var i = 0;
+                var fields = new Array();
+                oMasked = new mask();
+                for (x in oMasked) {
+                    var field = form[oMasked[x][0]];
+                    
+                    if ((field.type == 'text' || 
+                         field.type == 'textarea') && 
+                         (field.value.length > 0)) {
+                        
+                        if (!matchPattern(field.value, oMasked[x][2]("mask"))) {
+                            if (i == 0) {
+                                focusField = field;
+                            }
+                            fields[i++] = oMasked[x][1];
+                            isValid = false;
+                        }
+                    }
+                }
+                
+                if (fields.length > 0) {
+                   focusField.focus();
+                   alert(fields.join('\n'));
+                }
+                return isValid;
+            }
+
+            function matchPattern(value, mask) {
+               return mask.exec(value);
+            }]]>
+         </javascript>
+
+      </validator>
+
+
+      <validator name="byte"
+            classname="org.apache.struts.validator.FieldChecks"
+               method="validateByte"
+         methodParams="java.lang.Object,
+                       org.apache.commons.validator.ValidatorAction,
+                       org.apache.commons.validator.Field,
+                       org.apache.struts.action.ActionErrors,
+                       javax.servlet.http.HttpServletRequest"
+              depends=""
+                  msg="errors.byte"
+       jsFunctionName="ByteValidations">
+
+         <javascript><![CDATA[
+            function validateByte(form) {
+                var bValid = true;
+                var focusField = null;
+                var i = 0;
+                var fields = new Array();
+                oByte = new ByteValidations();
+                for (x in oByte) {
+                	var field = form[oByte[x][0]];
+                	
+                    if (field.type == 'text' ||
+                        field.type == 'textarea' ||
+                        field.type == 'select-one' ||
+						field.type == 'radio') {
+
+						var value = '';
+						// get field's value
+						if (field.type == "select-one") {
+							var si = field.selectedIndex;
+							if (si >= 0) {
+								value = field.options[si].value;
+							}
+						} else {
+							value = field.value;
+						}
+                        
+                        if (value.length > 0) {
+                            if (!isAllDigits(value)) {
+                                bValid = false;
+                                if (i == 0) {
+                                    focusField = field;
+                                }
+                                fields[i++] = oByte[x][1];
+
+                            } else {
+
+	                            var iValue = parseInt(value);
+	                            if (isNaN(iValue) || !(iValue >= -128 && iValue <= 127)) {
+	                                if (i == 0) {
+	                                    focusField = field;
+	                                }
+	                                fields[i++] = oByte[x][1];
+	                                bValid = false;
+	                            }
+                            }
+						}
+						
+                    }
+                }
+                if (fields.length > 0) {
+                   focusField.focus();
+                   alert(fields.join('\n'));
+                }
+                return bValid;
+            }]]>
+         </javascript>
+
+      </validator>
+
+
+      <validator name="short"
+            classname="org.apache.struts.validator.FieldChecks"
+               method="validateShort"
+         methodParams="java.lang.Object,
+                       org.apache.commons.validator.ValidatorAction,
+                       org.apache.commons.validator.Field,
+                       org.apache.struts.action.ActionErrors,
+                       javax.servlet.http.HttpServletRequest"
+              depends=""
+                  msg="errors.short"
+       jsFunctionName="ShortValidations">
+
+         <javascript><![CDATA[
+            function validateShort(form) {
+                var bValid = true;
+                var focusField = null;
+                var i = 0;
+                var fields = new Array();
+                oShort = new ShortValidations();
+                for (x in oShort) {
+                	var field = form[oShort[x][0]];
+                	
+                    if (field.type == 'text' ||
+                        field.type == 'textarea' ||
+                        field.type == 'select-one' ||
+                        field.type == 'radio') {
+                        
+                        var value = '';
+						// get field's value
+						if (field.type == "select-one") {
+							var si = field.selectedIndex;
+							if (si >= 0) {
+								value = field.options[si].value;
+							}
+						} else {
+							value = field.value;
+						}
+                        
+                        if (value.length > 0) {
+                            if (!isAllDigits(value)) {
+                                bValid = false;
+                                if (i == 0) {
+                                    focusField = field;
+                                }
+                                fields[i++] = oShort[x][1];
+
+                            } else {
+                        
+	                            var iValue = parseInt(value);
+	                            if (isNaN(iValue) || !(iValue >= -32768 && iValue <= 32767)) {
+	                                if (i == 0) {
+	                                    focusField = field;
+	                                }
+	                                fields[i++] = oShort[x][1];
+	                                bValid = false;
+	                            }
+	                       }
+                       }
+                    }
+                }
+                if (fields.length > 0) {
+                   focusField.focus();
+                   alert(fields.join('\n'));
+                }
+                return bValid;
+            }]]>
+         </javascript>
+
+      </validator>
+
+
+      <validator name="integer"
+            classname="org.apache.struts.validator.FieldChecks"
+               method="validateInteger"
+         methodParams="java.lang.Object,
+                       org.apache.commons.validator.ValidatorAction,
+                       org.apache.commons.validator.Field,
+                       org.apache.struts.action.ActionErrors,
+                       javax.servlet.http.HttpServletRequest"
+              depends=""
+                  msg="errors.integer"
+       jsFunctionName="IntegerValidations">
+
+         <javascript><![CDATA[
+            function validateInteger(form) {
+                var bValid = true;
+                var focusField = null;
+                var i = 0;
+                var fields = new Array();
+                oInteger = new IntegerValidations();
+                for (x in oInteger) {
+                	var field = form[oInteger[x][0]];
+
+                    if (field.type == 'text' ||
+                        field.type == 'textarea' ||
+                        field.type == 'select-one' ||
+                        field.type == 'radio') {
+                        
+                        var value = '';
+						// get field's value
+						if (field.type == "select-one") {
+							var si = field.selectedIndex;
+						    if (si >= 0) {
+							    value = field.options[si].value;
+						    }
+						} else {
+							value = field.value;
+						}
+                        
+                        if (value.length > 0) {
+                        
+                            if (!isAllDigits(value)) {
+                                bValid = false;
+                                if (i == 0) {
+	                                focusField = field;
+	                            }
+						        fields[i++] = oInteger[x][1];
+						        
+                            } else {
+	                            var iValue = parseInt(value);
+	                            if (isNaN(iValue) || !(iValue >= -2147483648 && iValue <= 2147483647)) {
+	                                if (i == 0) {
+	                                    focusField = field;
+	                                }
+	                                fields[i++] = oInteger[x][1];
+	                                bValid = false;
+	                           }
+                           }
+                       }
+                    }
+                }
+                if (fields.length > 0) {
+                   focusField.focus();
+                   alert(fields.join('\n'));
+                }
+                return bValid;
+            }
+
+            function isAllDigits(argvalue) {
+                argvalue = argvalue.toString();
+                var validChars = "0123456789";
+                var startFrom = 0;
+                if (argvalue.substring(0, 2) == "0x") {
+                   validChars = "0123456789abcdefABCDEF";
+                   startFrom = 2;
+                } else if (argvalue.charAt(0) == "0") {
+                   validChars = "01234567";
+                   startFrom = 1;
+                } else if (argvalue.charAt(0) == "-") {
+                    startFrom = 1;
+                }
+                
+                for (var n = startFrom; n < argvalue.length; n++) {
+                    if (validChars.indexOf(argvalue.substring(n, n+1)) == -1) return false;
+                }
+                return true;
+            }]]>
+         </javascript>
+
+      </validator>
+
+
+      <validator name="long"
+            classname="org.apache.struts.validator.FieldChecks"
+               method="validateLong"
+         methodParams="java.lang.Object,
+                       org.apache.commons.validator.ValidatorAction,
+                       org.apache.commons.validator.Field,
+                       org.apache.struts.action.ActionErrors,
+                       javax.servlet.http.HttpServletRequest"
+              depends=""
+                  msg="errors.long"/>
+
+
+      <validator name="float"
+            classname="org.apache.struts.validator.FieldChecks"
+               method="validateFloat"
+         methodParams="java.lang.Object,
+                       org.apache.commons.validator.ValidatorAction,
+                       org.apache.commons.validator.Field,
+                       org.apache.struts.action.ActionErrors,
+                       javax.servlet.http.HttpServletRequest"
+              depends=""
+                  msg="errors.float"
+       jsFunctionName="FloatValidations">
+
+         <javascript><![CDATA[
+            function validateFloat(form) {
+                var bValid = true;
+                var focusField = null;
+                var i = 0;
+                var fields = new Array();
+                oFloat = new FloatValidations();
+                for (x in oFloat) {
+                	var field = form[oFloat[x][0]];
+                	
+                    if (field.type == 'text' ||
+                        field.type == 'textarea' ||
+                        field.type == 'select-one' ||
+                        field.type == 'radio') {
+                        
+                    	var value = '';
+						// get field's value
+						if (field.type == "select-one") {
+							var si = field.selectedIndex;
+							if (si >= 0) {
+							    value = field.options[si].value;
+							}
+						} else {
+							value = field.value;
+						}
+                        
+                        if (value.length > 0) {
+                            // remove '.' before checking digits
+                            var tempArray = value.split('.');
+                            var joinedString= tempArray.join('');
+
+                            if (!isAllDigits(joinedString)) {
+                                bValid = false;
+                                if (i == 0) {
+                                    focusField = field;
+                                }
+                                fields[i++] = oFloat[x][1];
+
+                            } else {
+	                            var iValue = parseFloat(value);
+	                            if (isNaN(iValue)) {
+	                                if (i == 0) {
+	                                    focusField = field;
+	                                }
+	                                fields[i++] = oFloat[x][1];
+	                                bValid = false;
+	                            }
+                            }
+                        }
+                    }
+                }
+                if (fields.length > 0) {
+                   focusField.focus();
+                   alert(fields.join('\n'));
+                }
+                return bValid;
+            }]]>
+         </javascript>
+
+      </validator>
+
+
+      <validator name="double"
+            classname="org.apache.struts.validator.FieldChecks"
+               method="validateDouble"
+         methodParams="java.lang.Object,
+                       org.apache.commons.validator.ValidatorAction,
+                       org.apache.commons.validator.Field,
+                       org.apache.struts.action.ActionErrors,
+                       javax.servlet.http.HttpServletRequest"
+              depends=""
+                  msg="errors.double"/>
+
+
+      <validator name="date"
+            classname="org.apache.struts.validator.FieldChecks"
+               method="validateDate"
+         methodParams="java.lang.Object,
+                       org.apache.commons.validator.ValidatorAction,
+                       org.apache.commons.validator.Field,
+                       org.apache.struts.action.ActionErrors,
+                       javax.servlet.http.HttpServletRequest"
+              depends=""
+                  msg="errors.date"
+       jsFunctionName="DateValidations">
+
+         <javascript><![CDATA[
+            function validateDate(form) {
+               var bValid = true;
+               var focusField = null;
+               var i = 0;
+               var fields = new Array();
+               oDate = new DateValidations();
+               for (x in oDate) {
+                   var value = form[oDate[x][0]].value;
+                   var datePattern = oDate[x][2]("datePatternStrict");
+                   if ((form[oDate[x][0]].type == 'text' ||
+                        form[oDate[x][0]].type == 'textarea') &&
+                       (value.length > 0) &&
+                       (datePattern.length > 0)) {
+                     var MONTH = "MM";
+                     var DAY = "dd";
+                     var YEAR = "yyyy";
+                     var orderMonth = datePattern.indexOf(MONTH);
+                     var orderDay = datePattern.indexOf(DAY);
+                     var orderYear = datePattern.indexOf(YEAR);
+                     if ((orderDay < orderYear && orderDay > orderMonth)) {
+                         var iDelim1 = orderMonth + MONTH.length;
+                         var iDelim2 = orderDay + DAY.length;
+                         var delim1 = datePattern.substring(iDelim1, iDelim1 + 1);
+                         var delim2 = datePattern.substring(iDelim2, iDelim2 + 1);
+                         if (iDelim1 == orderDay && iDelim2 == orderYear) {
+                            dateRegexp = new RegExp("^(\\d{2})(\\d{2})(\\d{4})$");
+                         } else if (iDelim1 == orderDay) {
+                            dateRegexp = new RegExp("^(\\d{2})(\\d{2})[" + delim2 + "](\\d{4})$");
+                         } else if (iDelim2 == orderYear) {
+                            dateRegexp = new RegExp("^(\\d{2})[" + delim1 + "](\\d{2})(\\d{4})$");
+                         } else {
+                            dateRegexp = new RegExp("^(\\d{2})[" + delim1 + "](\\d{2})[" + delim2 + "](\\d{4})$");
+                         }
+                         var matched = dateRegexp.exec(value);
+                         if(matched != null) {
+                            if (!isValidDate(matched[2], matched[1], matched[3])) {
+                               if (i == 0) {
+                                   focusField = form[oDate[x][0]];
+                               }
+                               fields[i++] = oDate[x][1];
+                               bValid =  false;
+                            }
+                         } else {
+                            if (i == 0) {
+                                focusField = form[oDate[x][0]];
+                            }
+                            fields[i++] = oDate[x][1];
+                            bValid =  false;
+                         }
+                     } else if ((orderMonth < orderYear && orderMonth > orderDay)) {
+                         var iDelim1 = orderDay + DAY.length;
+                         var iDelim2 = orderMonth + MONTH.length;
+                         var delim1 = datePattern.substring(iDelim1, iDelim1 + 1);
+                         var delim2 = datePattern.substring(iDelim2, iDelim2 + 1);
+                         if (iDelim1 == orderMonth && iDelim2 == orderYear) {
+                             dateRegexp = new RegExp("^(\\d{2})(\\d{2})(\\d{4})$");
+                         } else if (iDelim1 == orderMonth) {
+                             dateRegexp = new RegExp("^(\\d{2})(\\d{2})[" + delim2 + "](\\d{4})$");
+                         } else if (iDelim2 == orderYear) {
+                             dateRegexp = new RegExp("^(\\d{2})[" + delim1 + "](\\d{2})(\\d{4})$");
+                         } else {
+                             dateRegexp = new RegExp("^(\\d{2})[" + delim1 + "](\\d{2})[" + delim2 + "](\\d{4})$");
+                         }
+                         var matched = dateRegexp.exec(value);
+                         if(matched != null) {
+                             if (!isValidDate(matched[1], matched[2], matched[3])) {
+                                 if (i == 0) {
+                                     focusField = form[oDate[x][0]];
+                                 }
+                                 fields[i++] = oDate[x][1];
+                                 bValid =  false;
+                              }
+                         } else {
+                             if (i == 0) {
+                                 focusField = form[oDate[x][0]];
+                             }
+                             fields[i++] = oDate[x][1];
+                             bValid =  false;
+                         }
+                     } else if ((orderMonth > orderYear && orderMonth < orderDay)) {
+                         var iDelim1 = orderYear + YEAR.length;
+                         var iDelim2 = orderMonth + MONTH.length;
+                         var delim1 = datePattern.substring(iDelim1, iDelim1 + 1);
+                         var delim2 = datePattern.substring(iDelim2, iDelim2 + 1);
+                         if (iDelim1 == orderMonth && iDelim2 == orderDay) {
+                             dateRegexp = new RegExp("^(\\d{4})(\\d{2})(\\d{2})$");
+                         } else if (iDelim1 == orderMonth) {
+                             dateRegexp = new RegExp("^(\\d{4})(\\d{2})[" + delim2 + "](\\d{2})$");
+                         } else if (iDelim2 == orderDay) {
+                             dateRegexp = new RegExp("^(\\d{4})[" + delim1 + "](\\d{2})(\\d{2})$");
+                         } else {
+                             dateRegexp = new RegExp("^(\\d{4})[" + delim1 + "](\\d{2})[" + delim2 + "](\\d{2})$");
+                         }
+                         var matched = dateRegexp.exec(value);
+                         if(matched != null) {
+                             if (!isValidDate(matched[3], matched[2], matched[1])) {
+                                 if (i == 0) {
+                                     focusField = form[oDate[x][0]];
+                                  }
+                                  fields[i++] = oDate[x][1];
+                                  bValid =  false;
+                              }
+                          } else {
+                              if (i == 0) {
+                                  focusField = form[oDate[x][0]];
+                              }
+                              fields[i++] = oDate[x][1];
+                              bValid =  false;
+                          }
+                     } else {
+                         if (i == 0) {
+                             focusField = form[oDate[x][0]];
+                         }
+                         fields[i++] = oDate[x][1];
+                         bValid =  false;
+                     }
+                  }
+               }
+               if (fields.length > 0) {
+                  focusField.focus();
+                  alert(fields.join('\n'));
+               }
+               return bValid;
+            }
+
+	    function isValidDate(day, month, year) {
+	        if (month < 1 || month > 12) {
+                    return false;
+                }
+                if (day < 1 || day > 31) {
+                    return false;
+                }
+                if ((month == 4 || month == 6 || month == 9 || month == 11) &&
+                    (day == 31)) {
+                    return false;
+                }
+                if (month == 2) {
+                    var leap = (year % 4 == 0 &&
+                               (year % 100 != 0 || year % 400 == 0));
+                    if (day>29 || (day == 29 && !leap)) {
+                        return false;
+                    }
+                }
+                return true;
+            }]]>
+         </javascript>
+
+      </validator>
+
+<!-- range is deprecated use intRange instead -->
+      <validator name="range"
+            classname="org.apache.struts.validator.FieldChecks"
+               method="validateIntRange"
+         methodParams="java.lang.Object,
+                       org.apache.commons.validator.ValidatorAction,
+                       org.apache.commons.validator.Field,
+                       org.apache.struts.action.ActionErrors,
+                       javax.servlet.http.HttpServletRequest"
+              depends="integer"
+                  msg="errors.range">
+
+         <javascript><![CDATA[
+            function validateRange(form) {
+                return validateIntRange(form);
+            }]]>
+         </javascript>
+
+      </validator>
+
+      <validator name="intRange"
+            classname="org.apache.struts.validator.FieldChecks"
+               method="validateIntRange"
+         methodParams="java.lang.Object,
+                       org.apache.commons.validator.ValidatorAction,
+                       org.apache.commons.validator.Field,
+                       org.apache.struts.action.ActionErrors,
+                       javax.servlet.http.HttpServletRequest"
+              depends="integer"
+                  msg="errors.range">
+
+         <javascript><![CDATA[
+            function validateIntRange(form) {
+                var isValid = true;
+                var focusField = null;
+                var i = 0;
+                var fields = new Array();
+                oRange = new intRange();
+                for (x in oRange) {
+                    var field = form[oRange[x][0]];
+                    
+                    if ((field.type == 'text' ||
+                         field.type == 'textarea') &&
+                        (field.value.length > 0)) {
+                        
+                        var iMin = parseInt(oRange[x][2]("min"));
+                        var iMax = parseInt(oRange[x][2]("max"));
+                        var iValue = parseInt(field.value);
+                        if (!(iValue >= iMin && iValue <= iMax)) {
+                            if (i == 0) {
+                                focusField = field;
+                            }
+                            fields[i++] = oRange[x][1];
+                            isValid = false;
+                        }
+                    }
+                }
+                if (fields.length > 0) {
+                    focusField.focus();
+                    alert(fields.join('\n'));
+                }
+                return isValid;
+            }]]>
+         </javascript>
+
+      </validator>
+
+      <validator name="floatRange"
+            classname="org.apache.struts.validator.FieldChecks"
+               method="validateFloatRange"
+         methodParams="java.lang.Object,
+                       org.apache.commons.validator.ValidatorAction,
+                       org.apache.commons.validator.Field,
+                       org.apache.struts.action.ActionErrors,
+                       javax.servlet.http.HttpServletRequest"
+              depends="float"
+                  msg="errors.range">
+
+         <javascript><![CDATA[
+            function validateFloatRange(form) {
+                var isValid = true;
+                var focusField = null;
+                var i = 0;
+                var fields = new Array();
+                oRange = new floatRange();
+                for (x in oRange) {
+                    var field = form[oRange[x][0]];
+                    
+                    if ((field.type == 'text' ||
+                         field.type == 'textarea') &&
+                        (field.value.length > 0)) {
+                        
+                        var fMin = parseFloat(oRange[x][2]("min"));
+                        var fMax = parseFloat(oRange[x][2]("max"));
+                        var fValue = parseFloat(field.value);
+                        if (!(fValue >= fMin && fValue <= fMax)) {
+                            if (i == 0) {
+                                focusField = field;
+                            }
+                            fields[i++] = oRange[x][1];
+                            isValid = false;
+                        }
+                    }
+                }
+                if (fields.length > 0) {
+                    focusField.focus();
+                    alert(fields.join('\n'));
+                }
+                return isValid;
+            }]]>
+         </javascript>
+
+      </validator>
+
+      <validator name="creditCard"
+            classname="org.apache.struts.validator.FieldChecks"
+               method="validateCreditCard"
+         methodParams="java.lang.Object,
+                       org.apache.commons.validator.ValidatorAction,
+                       org.apache.commons.validator.Field,
+                       org.apache.struts.action.ActionErrors,
+                       javax.servlet.http.HttpServletRequest"
+              depends=""
+                  msg="errors.creditcard">
+
+         <javascript><![CDATA[
+            function validateCreditCard(form) {
+                var bValid = true;
+                var focusField = null;
+                var i = 0;
+                var fields = new Array();
+                oCreditCard = new creditCard();
+                for (x in oCreditCard) {
+                    if ((form[oCreditCard[x][0]].type == 'text' ||
+                         form[oCreditCard[x][0]].type == 'textarea') &&
+                        (form[oCreditCard[x][0]].value.length > 0)) {
+                        if (!luhnCheck(form[oCreditCard[x][0]].value)) {
+                            if (i == 0) {
+                                focusField = form[oCreditCard[x][0]];
+                            }
+                            fields[i++] = oCreditCard[x][1];
+                            bValid = false;
+                        }
+                    }
+                }
+                if (fields.length > 0) {
+                    focusField.focus();
+                    alert(fields.join('\n'));
+                }
+                return bValid;
+            }
+
+            /**
+             * Reference: http://www.ling.nwu.edu/~sburke/pub/luhn_lib.pl
+             */
+            function luhnCheck(cardNumber) {
+                if (isLuhnNum(cardNumber)) {
+                    var no_digit = cardNumber.length;
+                    var oddoeven = no_digit & 1;
+                    var sum = 0;
+                    for (var count = 0; count < no_digit; count++) {
+                        var digit = parseInt(cardNumber.charAt(count));
+                        if (!((count & 1) ^ oddoeven)) {
+                            digit *= 2;
+                            if (digit > 9) digit -= 9;
+                        };
+                        sum += digit;
+                    };
+                    if (sum == 0) return false;
+                    if (sum % 10 == 0) return true;
+                };
+                return false;
+            }
+
+            function isLuhnNum(argvalue) {
+                argvalue = argvalue.toString();
+                if (argvalue.length == 0) {
+                    return false;
+                }
+                for (var n = 0; n < argvalue.length; n++) {
+                    if ((argvalue.substring(n, n+1) < "0") ||
+                        (argvalue.substring(n,n+1) > "9")) {
+                        return false;
+                    }
+                }
+                return true;
+            }]]>
+         </javascript>
+
+      </validator>
+
+
+      <validator name="email"
+            classname="org.apache.struts.validator.FieldChecks"
+               method="validateEmail"
+         methodParams="java.lang.Object,
+                       org.apache.commons.validator.ValidatorAction,
+                       org.apache.commons.validator.Field,
+                       org.apache.struts.action.ActionErrors,
+                       javax.servlet.http.HttpServletRequest"
+              depends=""
+                  msg="errors.email">
+
+         <javascript><![CDATA[
+            function validateEmail(form) {
+                var bValid = true;
+                var focusField = null;
+                var i = 0;
+                var fields = new Array();
+                oEmail = new email();
+                for (x in oEmail) {
+                    if ((form[oEmail[x][0]].type == 'text' ||
+                         form[oEmail[x][0]].type == 'textarea') &&
+                        (form[oEmail[x][0]].value.length > 0)) {
+                        if (!checkEmail(form[oEmail[x][0]].value)) {
+                            if (i == 0) {
+                                focusField = form[oEmail[x][0]];
+                            }
+                            fields[i++] = oEmail[x][1];
+                            bValid = false;
+                        }
+                    }
+                }
+                if (fields.length > 0) {
+                    focusField.focus();
+                    alert(fields.join('\n'));
+                }
+                return bValid;
+            }
+
+            /**
+             * Reference: Sandeep V. Tamhankar (stamhankar at hotmail.com),
+             * http://javascript.internet.com
+             */
+            function checkEmail(emailStr) {
+               if (emailStr.length == 0) {
+                   return true;
+               }
+               var emailPat=/^(.+)@(.+)$/;
+               var specialChars="\\(\\)<>@,;:\\\\\\\"\\.\\[\\]";
+               var validChars="\[^\\s" + specialChars + "\]";
+               var quotedUser="(\"[^\"]*\")";
+               var ipDomainPat=/^(\d{1,3})[.](\d{1,3})[.](\d{1,3})[.](\d{1,3})$/;
+               var atom=validChars + '+';
+               var word="(" + atom + "|" + quotedUser + ")";
+               var userPat=new RegExp("^" + word + "(\\." + word + ")*$");
+               var domainPat=new RegExp("^" + atom + "(\\." + atom + ")*$");
+               var matchArray=emailStr.match(emailPat);
+               if (matchArray == null) {
+                   return false;
+               }
+               var user=matchArray[1];
+               var domain=matchArray[2];
+               if (user.match(userPat) == null) {
+                   return false;
+               }
+               var IPArray = domain.match(ipDomainPat);
+               if (IPArray != null) {
+                   for (var i = 1; i <= 4; i++) {
+                      if (IPArray[i] > 255) {
+                         return false;
+                      }
+                   }
+                   return true;
+               }
+               var domainArray=domain.match(domainPat);
+               if (domainArray == null) {
+                   return false;
+               }
+               var atomPat=new RegExp(atom,"g");
+               var domArr=domain.match(atomPat);
+               var len=domArr.length;
+               if ((domArr[domArr.length-1].length < 2) ||
+                   (domArr[domArr.length-1].length > 3)) {
+                   return false;
+               }
+               if (len < 2) {
+                   return false;
+               }
+               return true;
+            }]]>
+         </javascript>
+
+      </validator>
+
+   </global>
+
+</form-validation>

Added: project_src/website/web/WEB-INF/web.xml
===================================================================
--- project_src/website/web/WEB-INF/web.xml	2004-12-29 21:55:56 UTC (rev 252)
+++ project_src/website/web/WEB-INF/web.xml	2004-12-29 21:58:46 UTC (rev 253)
@@ -0,0 +1,50 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE web-app PUBLIC "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN" "http://java.sun.com/dtd/web-app_2_3.dtd">
+<web-app>
+  <display-name>web</display-name>
+  <servlet>
+    <servlet-name>action</servlet-name>
+    <servlet-class>org.apache.struts.action.ActionServlet</servlet-class>
+    <init-param>
+      <param-name>config</param-name>
+      <param-value>/WEB-INF/struts-config.xml</param-value>
+    </init-param>
+    <init-param>
+      <param-name>debug</param-name>
+      <param-value>2</param-value>
+    </init-param>
+    <init-param>
+      <param-name>application</param-name>
+      <param-value>ApplicationResources</param-value>
+    </init-param>
+    <load-on-startup>2</load-on-startup>
+  </servlet>
+  <servlet-mapping>
+    <servlet-name>action</servlet-name>
+    <url-pattern>*.do</url-pattern>
+  </servlet-mapping>
+  <taglib>
+    <taglib-uri>/taglib/struts-bean</taglib-uri>
+    <taglib-location>/WEB-INF/struts-bean.tld</taglib-location>
+  </taglib>
+  <taglib>
+    <taglib-uri>/taglib/struts-html</taglib-uri>
+    <taglib-location>/WEB-INF/struts-html.tld</taglib-location>
+  </taglib>
+  <taglib>
+    <taglib-uri>/taglib/struts-logic</taglib-uri>
+    <taglib-location>/WEB-INF/struts-logic.tld</taglib-location>
+  </taglib>
+  <taglib>
+    <taglib-uri>/taglib/struts-template</taglib-uri>
+    <taglib-location>/WEB-INF/struts-template.tld</taglib-location>
+  </taglib>
+  <taglib>
+    <taglib-uri>/taglib/struts-tiles</taglib-uri>
+    <taglib-location>/WEB-INF/struts-tiles.tld</taglib-location>
+  </taglib>
+  <taglib>
+    <taglib-uri>/taglib/struts-nested</taglib-uri>
+    <taglib-location>/WEB-INF/struts-nested.tld</taglib-location>
+  </taglib>
+</web-app>

Added: project_src/website/web/index.jsp
===================================================================
--- project_src/website/web/index.jsp	2004-12-29 21:55:56 UTC (rev 252)
+++ project_src/website/web/index.jsp	2004-12-29 21:58:46 UTC (rev 253)
@@ -0,0 +1,14 @@
+<%@ taglib uri="/taglib/struts-tiles" prefix="tiles"%>
+
+<tiles:insert page="/templates/main.jsp" flush="true">
+
+<tiles:put name="title" value="PROfessional VIdeo RENTalStore" />
+
+<tiles:put name="contentbody" type="string">
+  Willkommen auf unserer neuen Webseite<br/>
+</tiles:put>
+
+</tiles:insert>
+
+
+

Added: project_src/website/web/style.css
===================================================================
--- project_src/website/web/style.css	2004-12-29 21:55:56 UTC (rev 252)
+++ project_src/website/web/style.css	2004-12-29 21:58:46 UTC (rev 253)
@@ -0,0 +1,155 @@
+.body{
+	background-color: #F9EFD2;
+}
+a:hover, a:active, a:focus, a:link, a:visited  {
+	color: Black;
+	text-decoration: none;
+}
+
+a:link{
+	text-decoration: underline;
+}
+
+.head_menue {
+	font-family: Verdana, Arial, Helvetica, sans-serif;
+	font-size: 12px;
+}
+.copyright {
+	font-family: "Courier New", Courier, monospace;
+	font-size: 12px;
+	font-weight: bold;
+	text-align: center;
+}
+.menue_tbl, .menue_suche{
+	font-size: 12px;
+	background-color: #CCDDCE;
+	margin: 5px;
+	width: 90%;
+
+}
+a.menue_tbl:hover, a.menue_suche:hover{
+
+}
+
+thead.menue_tbl {
+	background-color: #B0CAB1;
+	text-align: center;
+	margin: 5px;
+
+
+}
+
+tbody.menue_tbl{
+background-color: #CCDDCE;
+	font-weight: bolder;
+	margin: 10px;
+}
+
+a:hover.menue_tbl{
+	text-decoration: underline;
+
+}
+
+td.menue_tbl{
+	display: block;
+	height: 10px;
+}
+
+
+
+.head_menue{
+
+}
+
+a.head_menue{
+  	text-decoration: underline;
+}
+a:hover.head_menue{
+
+	text-decoration: none;
+}
+
+
+a.pref, a:visited.pref{
+	text-decoration: underline;
+}
+
+a:hover.pref{
+  text-decoration: none;
+}
+
+input{
+ background-color: #F9EFD2;
+	border-top: #BABABA 2px solid;
+	border-left: #BABABA 2px solid;
+	border-right: #AFAFAF 3px solid;
+	border-bottom: #AFAFAF 3px solid;
+}
+
+#submit_search{
+	background-color: #8CB390;
+	border-top: #558059 2px solid;
+	border-left: #558059 2px solid;
+	border-right: #558059 3px solid;
+	border-bottom: #558059 3px solid;
+
+}
+
+#select_search{
+	background-color: #F9EFD2;
+	border-top: #BABABA 2px solid;
+	border-left: #BABABA 2px solid;
+	border-right: #AFAFAF 3px solid;
+	border-bottom: #AFAFAF 3px solid;
+}
+
+td.prev_page_browse{
+	text-align: left;
+	width: 20%;
+	padding-left: 5px;
+}
+.prev_page_browse, .next_page_browse{
+	font-family: Verdana, Geneva, Arial, Helvetica, sans-serif;
+	font-size: 11px;
+}
+
+.next_page_browse{
+	text-align: right; width: 20%;
+}
+
+td.overview_page_browse{
+	text-align: center;
+}
+.overview_page_browse{
+		font-family: Verdana, Geneva, Arial, Helvetica, sans-serif;
+		font-size: 11px;
+}
+
+a.single_page_browse{
+	text-decoration: underline;
+}
+a:hover.single_page_browse{
+	text-decoration: line-through;
+}
+
+
+
+.list_title{
+
+}
+
+.list_summary{
+
+}
+
+.detail_title, .detail_artist, .detail_hartist, .detail_describ,
+.detail_genre, .detail_hartist, .detail_artist, .detail_hdir, .detail_dir,
+.detail_haudio, .detail_audio, .detail_hvideo, .detail_video, .detail_hpicture, .detail_picture  {
+
+}
+
+
+.basket_head, .basket_item{
+
+
+}

Added: project_src/website/web/top10month.jsp
===================================================================
--- project_src/website/web/top10month.jsp	2004-12-29 21:55:56 UTC (rev 252)
+++ project_src/website/web/top10month.jsp	2004-12-29 21:58:46 UTC (rev 253)
@@ -0,0 +1,77 @@
+<%@ taglib uri="/WEB-INF/struts-bean.tld" prefix="bean" %>
+<%@ taglib uri="/WEB-INF/struts-html.tld" prefix="html" %>
+<%@ taglib uri="/WEB-INF/struts-logic.tld" prefix="logic" %>
+<%@ taglib uri="/WEB-INF/struts-tiles.tld" prefix="tiles" %>
+<tiles:insert page="/templates/main.jsp" flush="true">
+
+<tiles:put name="title" value="PROfessional VIdeo RENTalStore" />
+<tiles:put name="top10month_link" value="top10.jsp" />
+
+<tiles:put name="contentbody" type="string">
+
+
+
+<logic:present name="SearchResults">
+<!--top browse start -->
+            <table style="width: 95%; text-align: left;" border="0" cellpadding="0" cellspacing="0" align="center">
+              <tbody>
+                <tr>
+                  <td class="prev_page_browse">&nbsp;&nbsp; <a href="">&lt;&lt; zur&uuml;ck &lt;&lt;</a><br>
+													</td>
+                  <td class="overview_page_browse" style="">&nbsp;Seite 1 / 5 <br>
+                  </td>
+                  <td class="next_page_browse">&nbsp;<a href="">&gt;&gt; vor &gt;&gt;</a>&nbsp;&nbsp;<br>
+                  </td>
+                </tr>
+              </tbody>
+            </table>
+<!--top browse end -->
+
+  <logic:iterate id="movie" name="SearchResults">
+
+    <table border="0" cellpadding="0" cellspacing="0" width="100%">
+      <tbody>
+        <tr>
+          <td align="center" width="20%"><img style="width: 75px; height: 75px;" src="" alt="" border="0">
+          </td>
+          <td>
+            <span class="list_title"><bean:write name="movie" property="movietitle"/></span>
+            <span class="list_summary"><bean:write name="movie" property="moviedescrib"/>
+              <html:link forward="logout" paramId="id" paramProperty="movieid" paramName="movie">
+                &gt;&gt;mehr&lt;&lt;
+              </html:link>
+            </span>
+          </td>
+          <td width="10%">
+            <a href="#">Bestellen</a>
+          </td>
+        </tr>
+      </tbody>
+    </table>
+  </logic:iterate>
+
+
+  <!--bottom browse start -->
+            <table style="width: 95%; text-align: left;" border="0" cellpadding="0" cellspacing="0" align="center">
+              <tbody>
+                <tr>
+                  <td class="prev_page_browse">&nbsp;&nbsp; <a href="">&lt;&lt; zur&uuml;ck &lt;&lt;</a><br>
+													</td>
+                  <td class="overview_page_browse" style="">&nbsp;Seite 1 / 5 <br>
+                  <a href="" class="single_page_browse">1</a>&nbsp;&nbsp;
+                  <a href="" class="single_page_browse">2</a>&nbsp;&nbsp;
+                  <a href="" class="single_page_browse">3</a>&nbsp;&nbsp;
+                  <a href="" class="single_page_browse">4</a>&nbsp;&nbsp;
+                  <a href="" class="single_page_browse">5</a>&nbsp;&nbsp;
+                  </td>
+                  <td class="next_page_browse">&nbsp;<a href="">&gt;&gt; vor &gt;&gt;</a>&nbsp;&nbsp;<br>
+                  </td>
+                </tr>
+              </tbody>
+            </table>
+<!--bottom browse end -->
+
+</logic:present>
+</tiles:put>
+
+</tiles:insert>

Added: project_src/website/website.jpx
===================================================================
--- project_src/website/website.jpx	2004-12-29 21:55:56 UTC (rev 252)
+++ project_src/website/website.jpx	2004-12-29 21:58:46 UTC (rev 253)
@@ -0,0 +1,146 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--JBuilder XML Project-->
+<project>
+  <property category="debug.0" name="ShowFilesModified" value="0"/>
+  <property category="debug.0" name="SmartStep" value="0"/>
+  <property category="debug.0" name="SmartStepRedefineClasses" value="0"/>
+  <property category="generalFormatting" name="baseCodeStyle" value="java/Java Standard.codestyle"/>
+  <property category="generalFormatting2" name="blockIndent" value="4"/>
+  <property category="generalFormatting2" name="continuationIndent" value="8"/>
+  <property category="generalFormatting2" name="overrideBasicFormatting" value="1"/>
+  <property category="javaFormatting" name="alignMultilineAssign" value="1"/>
+  <property category="javaFormatting" name="arrayInitDataOnNewLine" value="0"/>
+  <property category="javaFormatting" name="blankLinesAfterClass" value="2"/>
+  <property category="javaFormatting" name="catchOnNewLine" value="0"/>
+  <property category="javaFormatting" name="elseOnNewLine" value="0"/>
+  <property category="javaFormatting" name="extendsOnNewLine" value="0"/>
+  <property category="javaFormatting" name="finallyOnNewLine" value="0"/>
+  <property category="javaFormatting" name="implementsOnNewLine" value="0"/>
+  <property category="javaFormatting" name="indentCase" value="0"/>
+  <property category="javaFormatting" name="packagePrefixGroups" value="java;BLANK_LINE;javax;BLANK_LINE;(*)"/>
+  <property category="javaFormatting" name="packageThreshold" value="0"/>
+  <property category="javaFormatting" name="preservedBlankLinesInDecl" value="2"/>
+  <property category="javaFormatting" name="spaceBeforeLparen" value="0"/>
+  <property category="javaFormatting" name="whileOnNewLine" value="0"/>
+  <property category="javadoc" name="custom.tags.1" value="todo;a;To Do:"/>
+  <property category="module" name="ProjectConvertedToEnsureModulesHaveSupportedFeatures" value="1"/>
+  <property category="module" name="ProjectConvertedToUseFilesAndDependenciesAsDefaultContent" value="1"/>
+  <property category="module" name="ProjectConvertedToUseProperModuleDefaults" value="1"/>
+  <property category="module" name="last.wizard.module.name" value="web"/>
+  <property category="module" name="projectConvertedFromModuleExtensionsToModuleFileTypes" value="1"/>
+  <property category="optimize.0" name="OptimizableType" value="intuitive.ide.borland.jb10.ProfilerBootstrap"/>
+  <property category="optimize.0" name="oicc.FilterFile" value="D:\a_provirent\project_src\website\website.oif"/>
+  <property category="optimize.0" name="oipr.FilterFile" value="D:\a_provirent\project_src\website\website.oif"/>
+  <property category="optimize.0" name="oira.FilterFile" value="D:\a_provirent\project_src\website\website.oif"/>
+  <property category="runtime" name="DefaultConfiguration" value="-1"/>
+  <property category="runtime.0" name="BuildTargetOnRun" value="com.borland.jbuilder.build.ProjectBuilder$ProjectBuildAction;make"/>
+  <property category="runtime.0" name="ConfigurationName" value="jsp1"/>
+  <property category="runtime.0" name="RunnableType" value="com.borland.jbuilder.runtime.ServerRunner"/>
+  <property category="runtime.0" name="appserver.parameters" value=""/>
+  <property category="runtime.0" name="appserver.servername" value=""/>
+  <property category="runtime.0" name="appserver.vmparameters" value=""/>
+  <property category="runtime.0" name="custom.init_required" value="0"/>
+  <property category="runtime.0" name="custom.required.1" value="Servlet"/>
+  <property category="runtime.0" name="custom.required.2" value="Struts"/>
+  <property category="runtime.0" name="enable.tcpmonitor" value="0"/>
+  <property category="runtime.0" name="enable.wsimonitor" value="0"/>
+  <property category="runtime.0" name="enabled.services" value="jsp;naming"/>
+  <property category="runtime.0" name="jsp.launchuri" value="/web/index.jsp"/>
+  <property category="runtime.0" name="jsprunner.launchuri" value="/web/index.jsp"/>
+  <property category="runtime.0" name="server.arguments" value=""/>
+  <property category="runtime.0" name="server.instance.name" value=""/>
+  <property category="runtime.0" name="server.name" value="Tomcat 4.1"/>
+  <property category="runtime.0" name="server.vmparameters" value=""/>
+  <property category="runtime.0" name="tcpmonitor.listenport" value=""/>
+  <property category="runtime.0" name="tcpmonitor.targethost" value=""/>
+  <property category="runtime.0" name="tcpmonitor.targetport" value=""/>
+  <property category="runtime.0" name="wsimonitor.listenport" value=""/>
+  <property category="runtime.0" name="wsimonitor.logfile" value=""/>
+  <property category="runtime.0" name="wsimonitor.targethost" value=""/>
+  <property category="runtime.0" name="wsimonitor.targetport" value=""/>
+  <property category="serverservices" name="disabled.services" value="jdatastore;sqlj"/>
+  <property category="serverservices" name="single.server.name" value="Tomcat 4.1"/>
+  <property category="sys" name="AuthorLabel" value="@author"/>
+  <property category="sys" name="BackupPath" value="bak"/>
+  <property category="sys" name="CheckStable" value="1"/>
+  <property category="sys" name="Company" value=""/>
+  <property category="sys" name="CompanyLabel" value="Company:"/>
+  <property category="sys" name="Copyright" value="Copyright (c) 2004"/>
+  <property category="sys" name="CopyrightLabel" value="Copyright:"/>
+  <property category="sys" name="DefaultPath" value="src"/>
+  <property category="sys" name="Description" value=""/>
+  <property category="sys" name="DescriptionLabel" value="Description:"/>
+  <property category="sys" name="DocPath" value="doc"/>
+  <property category="sys" name="ExcludeClassEnabled" value="0"/>
+  <property category="sys" name="IncludeTestPath" value="1"/>
+  <property category="sys" name="InstanceVisibility" value="2"/>
+  <property category="sys" name="JDK" value="java version 1.4.2_04-b05"/>
+  <property category="sys" name="JvmVersion" value="1.2"/>
+  <property category="sys" name="LastTag" value="0"/>
+  <property category="sys" name="Libraries" value="Servlet;Struts"/>
+  <property category="sys" name="MakeStable" value="0"/>
+  <property category="sys" name="OutPath" value="classes"/>
+  <property category="sys" name="SourcePath" value="src;test"/>
+  <property category="sys" name="TestPath" value="test"/>
+  <property category="sys" name="Title" value=""/>
+  <property category="sys" name="TitleLabel" value="Title:"/>
+  <property category="sys" name="Version" value="1.0"/>
+  <property category="sys" name="VersionLabel" value="@version"/>
+  <property category="sys" name="WorkingDirectory" value="."/>
+  <property category="team" name="ignorePath.0" value="Tomcat"/>
+  <property category="webModule" name="last.wizard.module.name" value="web"/>
+  <node name="web" type="WebModuleNode">
+    <property category="archiving" name="archiverClass" value="com.borland.jbuilder.enterprise.module.web.WebModuleArchiver"/>
+    <property category="archiving" name="contentRules.1" value="i:jar"/>
+    <property category="archiving" name="contentRules.10" value="i:jsp"/>
+    <property category="archiving" name="contentRules.11" value="i:tld"/>
+    <property category="archiving" name="contentRules.12" value="i:opentools"/>
+    <property category="archiving" name="contentRules.13" value="i:png"/>
+    <property category="archiving" name="contentRules.14" value="i:properties"/>
+    <property category="archiving" name="contentRules.15" value="i:au"/>
+    <property category="archiving" name="contentRules.16" value="i:txt"/>
+    <property category="archiving" name="contentRules.17" value="i:ram"/>
+    <property category="archiving" name="contentRules.18" value="i:css"/>
+    <property category="archiving" name="contentRules.19" value="i:wml"/>
+    <property category="archiving" name="contentRules.2" value="i:cab"/>
+    <property category="archiving" name="contentRules.20" value="i:xml"/>
+    <property category="archiving" name="contentRules.21" value="i:xul"/>
+    <property category="archiving" name="contentRules.22" value="i:xpi"/>
+    <property category="archiving" name="contentRules.23" value="i:xsl"/>
+    <property category="archiving" name="contentRules.3" value="i:rpt"/>
+    <property category="archiving" name="contentRules.4" value="i:gif"/>
+    <property category="archiving" name="contentRules.5" value="i:html"/>
+    <property category="archiving" name="contentRules.6" value="i:class"/>
+    <property category="archiving" name="contentRules.7" value="i:jnlp"/>
+    <property category="archiving" name="contentRules.8" value="i:js"/>
+    <property category="archiving" name="contentRules.9" value="i:jpg"/>
+    <property category="archiving" name="defaultLibraryState" value="3"/>
+    <property category="archiving" name="includeDeps" value="1"/>
+    <property category="archiving" name="libraryStates.1" value="0:Servlet"/>
+    <property category="archiving" name="libraryStates.2" value="0:Tomcat 4.1 Servlet"/>
+    <property category="archiving" name="outPathState" value="4"/>
+    <property category="archiving" name="targetPath" value="web.war"/>
+    <property category="archiving" name="usingRules" value="1"/>
+    <property category="kit.struts" name="struts-config.1" value="WEB-INF/struts-config.xml"/>
+    <property category="kit.struts" name="tiles-defs.1" value="1:WEB-INF/tiles-defs.xml"/>
+    <property category="kit.struts" name="validator-defs.1" value="1:WEB-INF/validator-rules.xml"/>
+    <property category="kit.struts" name="validator-defs.2" value="1:WEB-INF/validation.xml"/>
+    <property category="module" name="buildModuleArchiveWithModuleNode" value="0"/>
+    <property category="module" name="buildModuleArchiveWithProject" value="0"/>
+    <property category="module" name="directory" value="web"/>
+    <property category="module" name="extraDefaultDirectoriesToKeepOnClean.1" value=".cvsignore"/>
+    <property category="module" name="lastServer" value="Tomcat 4.1"/>
+    <property category="module" name="nodeJBuilderVersion" value="JBuilder 200"/>
+    <property category="module" name="supported.features.1" value="Servlet 2.3"/>
+    <property category="module" name="supported.features.2" value="JSP 1.2"/>
+    <property category="module" name="useModuleSpecificJavaFileNodesToBuild" value="1"/>
+    <property category="web" name="context-root" value="web"/>
+    <property category="webModule" name="kit.1" value="struts/struts_validation"/>
+    <property category="webModule" name="kit.2" value="struts/struts_tiles"/>
+    <property category="webModule" name="kit.3" value="struts"/>
+    <property category="webModule" name="kitlib.1" value="Struts"/>
+    <property category="webModule" name="kitlib.2" value="Struts"/>
+    <property category="webModule" name="kitlib.3" value="Struts"/>
+    <property category="webModule" name="launch.uri" value="/"/>
+  </node>
+</project>

Added: project_src/website/website.jpx.local
===================================================================
--- project_src/website/website.jpx.local	2004-12-29 21:55:56 UTC (rev 252)
+++ project_src/website/website.jpx.local	2004-12-29 21:58:46 UTC (rev 253)
@@ -0,0 +1,61 @@
+build.menu.1[0]=com.borland.jbuilder.build.ProjectBuilder$ProjectBuildAction;make
+build.menu.2[0]=com.borland.jbuilder.build.ProjectBuilder$ProjectBuildAction;rebuild
+content.layout.xml.[0]=<project-layout><tab_container selected_index="2"><tab node_name="src/de/provirent/web/Constant.java"/><tab node_name="src/de/provirent/web/Action/DetailAction.java"/><tab node_name="web/details.jsp"/><tab node_name="src/de/provirent/web/objects/DTOMovie.java"/><tab node_name="src/de/provirent/web/objects/DTOMovieShort.java"/><tab node_name="web/templates/main.jsp"/><tab node_name="web/WEB-INF/struts-config.xml"/></tab_container></project-layout>
+debug.NoTracingClasses.1[0]=23 com.borland.datastore.*1  1 -1
+debug.NoTracingClasses.10[0]=7  javax.*1  1 -1
+debug.NoTracingClasses.11[0]=5  sun.*1  1 -1
+debug.NoTracingClasses.12[0]=23 com.borland.appclient.*1  1 -1
+debug.NoTracingClasses.13[0]=21 com.borland.console.*1  1 -1
+debug.NoTracingClasses.14[0]=17 com.borland.ejb.*1  1 -1
+debug.NoTracingClasses.15[0]=24 com.borland.enterprise.*1  1 -1
+debug.NoTracingClasses.16[0]=18 com.borland.jafa.*1  1 -1
+debug.NoTracingClasses.17[0]=17 com.borland.jss.*1  1 -1
+debug.NoTracingClasses.18[0]=24 com.borland.management.*1  1 -1
+debug.NoTracingClasses.19[0]=23 com.borland.primetime.*1  1 -1
+debug.NoTracingClasses.2[0]=21 com.borland.dbswing.*1  1 -1
+debug.NoTracingClasses.20[0]=22 com.borland.security.*1  1 -1
+debug.NoTracingClasses.21[0]=18 com.borland.util.*1  1 -1
+debug.NoTracingClasses.22[0]=17 com.borland.xml.*1  1 -1
+debug.NoTracingClasses.23[0]=13 com.inprise.*1  1 -1
+debug.NoTracingClasses.24[0]=15 com.visigenic.*1  1 -1
+debug.NoTracingClasses.25[0]=9  org.omg.*1  1 -1
+debug.NoTracingClasses.3[0]=16 com.borland.dx.*1  1 -1
+debug.NoTracingClasses.4[0]=16 com.borland.jb.*1  1 -1
+debug.NoTracingClasses.5[0]=18 com.borland.jbcl.*1  1 -1
+debug.NoTracingClasses.6[0]=30 com.borland.jbuilder.runtime.*1  1 -1
+debug.NoTracingClasses.7[0]=17 com.borland.sql.*1  1 -1
+debug.NoTracingClasses.8[0]=9  com.sun.*1  1 -1
+debug.NoTracingClasses.9[0]=6  java.*1  1 -1
+history.files.active[0]=web/details.jsp,F;34,1985
+history.files.open.1[0]=src/de/provirent/web/Constant.java,F;1,52
+history.files.open.2[0]=src/de/provirent/web/Action/DetailAction.java,F;1,840
+history.files.open.3[0]=web/details.jsp,F;34,1985
+history.files.open.4[0]=src/de/provirent/web/objects/DTOMovie.java,F;1,124
+history.files.open.5[0]=src/de/provirent/web/objects/DTOMovieShort.java,F;1,780
+history.files.open.6[0]=web/templates/main.jsp,F;126,7041
+history.files.open.7[0]=web/WEB-INF/struts-config.xml,F;1,466
+import.optimize.legacyPropertiesRead[0]=1
+sys.Author[0]=
+sys.DefaultPackage[0]=de.provirent.web.objects
+sys.ReopenHistory.1[0]=web/top10month.jsp
+sys.ReopenHistory.10[0]=src/de/provirent/web/Action/LoginAction.java
+sys.ReopenHistory.11[0]=src/de/provirent/web/Action/LogoutAction.java
+sys.ReopenHistory.12[0]=src/de/provirent/web/LoginForm.java
+sys.ReopenHistory.13[0]=src/de/provirent/web/LogoutAction.java
+sys.ReopenHistory.14[0]=src/de/provirent/web/LoginAction.java
+sys.ReopenHistory.15[0]=web/WEB-INF/classes/ApplicationResources.properties
+sys.ReopenHistory.16[0]=web/WEB-INF/web.xml
+sys.ReopenHistory.2[0]=src/de/provirent/web/Action/Top10MonthAction.java
+sys.ReopenHistory.3[0]=web/jsp1.jsp
+sys.ReopenHistory.4[0]=src/ApplicationResources.properties
+sys.ReopenHistory.5[0]=web/index.jsp
+sys.ReopenHistory.6[0]=src/de/provirent/web/Form/LoginForm.java
+sys.ReopenHistory.7[0]=src/de/provirent/web/Action/SearchAction.java
+sys.ReopenHistory.8[0]=src/de/provirent/web/Form/SearchForm.java
+sys.ReopenHistory.9[0]=src/de/provirent/web/Form/SearchAction.java
+team.lastScanned[0]=1104349700571
+wizard.package.package_history.1[0]=de.provirent.web.objects
+wizard.package.package_history.2[0]=de.provirent.web.Action
+wizard.package.package_history.3[0]=de.provirent.web
+wizard.package.package_history.4[0]=de.provirent.web.Form
+wizard.package.package_history.5[0]=website

Added: project_src/website/website.oif
===================================================================
--- project_src/website/website.oif	2004-12-29 21:55:56 UTC (rev 252)
+++ project_src/website/website.oif	2004-12-29 21:58:46 UTC (rev 253)
@@ -0,0 +1,755 @@
+{
+    Content = (
+        {
+            ccex = t;
+            cnd = {
+                ID = _C_AWTClasses;
+                Name = "AWT classes";
+                Operation = OR;
+                PatternList = (
+                    java.awt.*,
+                    sun.awt.*,
+                    sun.java2d.*,
+                    com.apple.mrj.internal.awt.*
+                );
+            };
+            cpu = f;
+            grp = f;
+            mem = f;
+        },
+        {
+            ccex = t;
+            cnd = {
+                ID = _Y_ApacheJServ;
+                Name = "Apache JServ";
+                Operation = OR;
+                PatternList = ( org.apache.java.*, org.apache.jserv.* );
+            };
+            cpu = f;
+            grp = f;
+            mem = f;
+        },
+        {
+            ccex = t;
+            cnd = {
+                ID = _N_Orion;
+                Name = Orion;
+                Operation = OR;
+                PatternList = ( com.orionserver.*, com.evermind.*, javax.servlet.* );
+            };
+            cpu = f;
+            grp = f;
+            mem = f;
+        },
+        {
+            ccex = t;
+            cnd = {
+                ID = _F_BEAWebLogic;
+                Name = "WebLogic classes";
+                Operation = OR;
+                PatternList = (
+                    weblogic.*,
+                    com.bea.interop.*,
+                    com.bea.java2com.*,
+                    com.bea.jcom.*,
+                    com.bea.jvm.*,
+                    com.bea.utils.*,
+                    com.beasys.*,
+                    com.sun.management.jmx.*,
+                    "$Proxy*",
+                    com.sun.naming.*,
+                    com.sun.mail.*,
+                    com.sun.jndi.*,
+                    com.sun.activation.*,
+                    com.sun.rsajca.*,
+                    LDAP*,
+                    utils.*,
+                    jsp_servlet.*,
+                    javax.servlet.*
+                );
+            };
+            cpu = f;
+            grp = f;
+            mem = f;
+        },
+        {
+            ccex = t;
+            cnd = {
+                ID = _D_BES5;
+                Name = "BES Classes";
+                Operation = OR;
+                PatternList = (
+                    com.borland.enterprise.*,
+                    com.borland.datastore.*,
+                    com.borland.product.*,
+                    com.borland.dx.*,
+                    com.borland.compiler.*,
+                    com.borland.jbuilder.*,
+                    com.borland.sanctuary.*,
+                    com.borland.javamaker.*,
+                    com.borland.dbswing.*,
+                    com.borland.dbtools.*,
+                    com.borland.jb.*,
+                    com.borland.ejb.*,
+                    com.borland.jbcl.*,
+                    com.borland.sql.*,
+                    com.borland.jdbcx.*,
+                    com.borland.javax.*,
+                    com.borland.jss.*,
+                    com.borland.primetime.*,
+                    com.borland.product.*,
+                    com.borland.security.*,
+                    com.borland.xml.*,
+                    com.borland.jafa.*,
+                    com.borland.management.*,
+                    com.borland.console.*,
+                    com.inprise.*,
+                    com.visigenic.*,
+                    com.borland.catalina.*,
+                    com.borland.java.*,
+                    com.borland.vbroker.*,
+                    com.borland.appclient.*,
+                    flexlm.*,
+                    javax.servlet.*
+                );
+            };
+            cpu = f;
+            grp = f;
+            mem = f;
+        },
+        {
+            ccex = t;
+            cnd = {
+                ID = _O_SYBASEJaguar;
+                Name = "Sybase Jaguar";
+                Operation = OR;
+                PatternList = ( com.sybase.*, javax.servlet.* );
+            };
+            cpu = f;
+            grp = f;
+            mem = f;
+        },
+        {
+            ccex = t;
+            cnd = {
+                ID = _Q_Resin;
+                Name = Resin;
+                Operation = OR;
+                PatternList = (
+                    com.caucho.ejb.*,
+                    com.caucho.persist.*,
+                    com.caucho.burlap.*,
+                    com.caucho.hessian.*,
+                    com.caucho.util.*,
+                    com.caucho.iiop.*,
+                    com.caucho.jms.*,
+                    com.caucho.es.*,
+                    com.caucho.vfs.*,
+                    com.caucho.java.*,
+                    com.caucho.regexp.*,
+                    com.caucho.xml.*,
+                    com.caucho.eswrap.*,
+                    com.caucho.sql.*,
+                    com.caucho.transaction.*,
+                    com.caucho.xsl.*,
+                    com.caucho.transform.*,
+                    com.caucho.xpath.*,
+                    com.caucho.jsp.*,
+                    com.caucho.server.*,
+                    com.caucho.http.*,
+                    com.caucho.security.*,
+                    com.caucho.naming.*,
+                    com.caucho.tools.*,
+                    com.caucho.webutil.*,
+                    com.caucho.jslib.*,
+                    com.caucho.services.*,
+                    com.caucho.web.*,
+                    com.caucho.graphics.*,
+                    com.caucho.jdbc.*,
+                    _ejb.*_EJB*,
+                    _jsbean.*,
+                    javax.servlet.*
+                );
+            };
+            cpu = f;
+            grp = f;
+            mem = f;
+        },
+        {
+            ccex = t;
+            cnd = {
+                ID = _G_IBMWebSphere;
+                Name = "IBM WebSphere";
+                Operation = OR;
+                PatternList = (
+                    com.ibm.asn1.*,
+                    com.ibm.cfwk.*,
+                    com.ibm.gsk_sslight.*,
+                    com.ibm.sslight.*,
+                    com.ibm.util.*,
+                    com.ibm.ejs.*,
+                    com.ibm.db.*,
+                    com.ibm.ivj.*,
+                    com.ibm.debug.*,
+                    com.ibm.websphere.*,
+                    com.ibm.gsk.*,
+                    com.ibm.servlet.*,
+                    com.ibm.asn1.*,
+                    com.ibm.ldap.*,
+                    db.*,
+                    jdbc.*,
+                    com.ibm.ivb.*,
+                    com.ibm.ejb.*,
+                    com.ibm.cs.*,
+                    com.ibm.WAS35sslight.*,
+                    com.ibm.CORBA.*,
+                    com.ibm.IExtendedSecurity*,
+                    com.ibm.ISecurity*,
+                    com.ibm.NamingStringSyntax.*,
+                    com.ibm.ras.*,
+                    com.ibm.Security*,
+                    com.ibm.som.*,
+                    com.ibm.WebSphereSecurity.*,
+                    com.ibm.WebSphereSecurityImpl.*,
+                    com.ibm.vap.*,
+                    com.ibm.webtools.runtime.*,
+                    com.ibm.rmi.*,
+                    com.ibm.org.*,
+                    com.ibm.ws.*,
+                    com.ibm.connector2.*,
+                    com.ibm.etools.*,
+                    com.ibm.sw.*,
+                    com.ibm.gryphon.*,
+                    com.ibm.gryphonimpl.*,
+                    com.ibm.CBUtils.*,
+                    com.ibm.idl.*,
+                    com.ibm.ivf.*,
+                    com.ibm.xmi.*,
+                    com.ibm.ExtendedNaming.*,
+                    com.ibm.Wsn*,
+                    com.ibm.trl.*,
+                    com.ibm.uddi.*,
+                    com.ibm.vap.*,
+                    com.ibm.psh.*,
+                    com.ibm.dom.*,
+                    com.ibm.jsse.*,
+                    com.ibm.crypto.*,
+                    com.ibm.sslite.*,
+                    com.ibm.security.*,
+                    com.ibm.net.*,
+                    com.ibm.misc.*,
+                    com.ibm.logging.*,
+                    com.ibm.db2j.*,
+                    com.ibm.CSIv2Security.*,
+                    com.tivoli.*,
+                    db2j.*,
+                    javax.servlet.*
+                );
+            };
+            cpu = f;
+            grp = f;
+            mem = f;
+        },
+        {
+            ccex = t;
+            cnd = {
+                ID = _P_ATGDynamo;
+                Name = "ATG Dynamo";
+                Operation = OR;
+                PatternList = ( atg.*, javax.servlet.* );
+            };
+            cpu = f;
+            grp = f;
+            mem = f;
+        },
+        {
+            ccex = t;
+            cnd = {
+                ID = _A_JavaCoreClasses;
+                Name = "Java core classes";
+                Operation = OR;
+                PatternList = (
+                    java.*,
+                    javax.*,
+                    org.omg.*,
+                    org.ietf.*,
+                    sun.*,
+                    sunw.*,
+                    com.sun.security.*,
+                    com.sun.corba.*,
+                    com.sun.rsasign.*,
+                    com.sun.rsajca.*,
+                    com.sun.java.*,
+                    com.sun.org.*,
+                    com.sun.media.*,
+                    com.sun.image.*,
+                    com.sun.imageio.*,
+                    com.sun.rmi.*,
+                    com.sun.mail.*,
+                    com.sun.tools.*,
+                    com.sun.jdi.*,
+                    com.sun.activation.*,
+                    com.sun.javadoc.*,
+                    com.ibm.jvm.*
+                );
+            };
+            cpu = f;
+            grp = f;
+            mem = f;
+        },
+        {
+            ccex = t;
+            cnd = {
+                ID = _E_XMLClasses;
+                Name = "XML classes";
+                Operation = OR;
+                PatternList = (
+                    org.xml.*,
+                    org.w3c.*,
+                    javax.xml.*,
+                    org.apache.xerces.*,
+                    org.apache.xml.*,
+                    org.apache.xalan.*,
+                    org.apache.cocoon.*,
+                    org.apache.crimson.*,
+                    org.apache.xpath.*,
+                    com.sun.xml.*,
+                    org.apache.soap.*,
+                    org.apache.html.*,
+                    org.apache.wml.*,
+                    org.jdom.*,
+                    org.dom4j.*,
+                    com.ibm.xml.*
+                );
+            };
+            cpu = f;
+            grp = f;
+            mem = f;
+        },
+        {
+            ccex = t;
+            cnd = {
+                ID = _G_IBMDB2Client;
+                Name = "IBM DB2 Client";
+                Operation = OR;
+                PatternList = ( COM.ibm.db2.* );
+            };
+            cpu = f;
+            grp = f;
+            mem = f;
+        },
+        {
+            ccex = t;
+            cnd = {
+                ID = _B_JavaLang;
+                Name = "Java language classes";
+                Operation = OR;
+                PatternList = ( java.lang.* );
+            };
+            cpu = f;
+            grp = f;
+            mem = f;
+        },
+        {
+            ccex = t;
+            cnd = {
+                ID = _I_iPlanetWS;
+                Name = "iPlanet WS";
+                Operation = OR;
+                PatternList = ( com.iplanet.*, javax.servlet.* );
+            };
+            cpu = f;
+            grp = f;
+            mem = f;
+        },
+        {
+            ccex = t;
+            cnd = {
+                ID = _W_Iona;
+                Name = "Iona iPortal";
+                Operation = OR;
+                PatternList = ( com.iona.*, javax.servlet.* );
+            };
+            cpu = f;
+            grp = f;
+            mem = f;
+        },
+        {
+            ccex = t;
+            cnd = {
+                ID = _L_SilverStream;
+                Name = SilverStream;
+                Operation = OR;
+                PatternList = ( com.sssw.*, javax.servlet.* );
+            };
+            cpu = f;
+            grp = f;
+            mem = f;
+        },
+        {
+            ccex = t;
+            cnd = {
+                ID = _M_JBoss;
+                Name = JBoss;
+                Operation = OR;
+                PatternList = (
+                    org.jboss.*,
+                    org.jbossmq.*,
+                    org.enhydra.*,
+                    org.hsql.*,
+                    org.jnp.*,
+                    org.opentools.*,
+                    "$Proxy*",
+                    javax.servlet.*
+                );
+            };
+            cpu = f;
+            grp = f;
+            mem = f;
+        },
+        {
+            ccex = t;
+            cnd = {
+                ID = _D_SwingClasses;
+                Name = "Swing classes";
+                Operation = OR;
+                PatternList = (
+                    com.sun.java.swing.*,
+                    com.sun.java.accessibility.*,
+                    javax.swing.*,
+                    javax.accessibility.*,
+                    com.apple.mrj.swing.*
+                );
+            };
+            cpu = f;
+            grp = f;
+            mem = f;
+        },
+        {
+            ccex = t;
+            cnd = {
+                ID = _J_MacromediaJRun;
+                Name = "Macromedia JRun";
+                Operation = OR;
+                PatternList = ( com.livesoftware.*, allaire.jrun.*, javax.servlet.* );
+            };
+            cpu = f;
+            grp = f;
+            mem = f;
+        },
+        {
+            ccex = t;
+            cnd = {
+                ID = _K_Oracle9i;
+                Name = Oracle9i;
+                Operation = OR;
+                PatternList = ( com.evermind.*, org.apache.jserv.*, javax.servlet.* );
+            };
+            cpu = f;
+            grp = f;
+            mem = f;
+        },
+        {
+            ccex = t;
+            cnd = {
+                ID = _H_JakartaTomcat;
+                Name = "Jakarta Tomcat";
+                Operation = OR;
+                PatternList = (
+                    org.apache.tomcat.*,
+                    org.apache.catalina.*,
+                    org.apache.coyote.*,
+                    org.apache.tools.*,
+                    org.apache.jasper.*,
+                    org.apache.ajp.*,
+                    org.apache.naming.*,
+                    org.apache.commons.*,
+                    com.sun.naming.*,
+                    javax.servlet.*
+                );
+            };
+            cpu = f;
+            grp = f;
+            mem = f;
+        },
+        {
+            ccex = t;
+            cnd = {
+                ID = _O_JUnit;
+                Name = JUnit;
+                Operation = OR;
+                PatternList = ( junit.*, com.borland.jbuilder.unittest.* );
+            };
+            cpu = f;
+            grp = f;
+            mem = f;
+        },
+        {
+            ccex = t;
+            cnd = {
+                ID = _G_Ant;
+                Name = Ant;
+                Operation = OR;
+                PatternList = ( org.apache.tools.ant.*, org.apache.tools.tar.* );
+            };
+            cpu = f;
+            grp = f;
+            mem = f;
+        },
+        {
+            ccex = t;
+            cnd = {
+                ID = Z_JBoss3rdParty;
+                Name = "JBoss 3rd party classes";
+                Operation = OR;
+                PatternList = (
+                    sun.tools.*,
+                    com.sun.naming.*,
+                    com.sun.management.*,
+                    javax.naming.*,
+                    org.apache.log4j.*,
+                    org.hsqldb.*
+                );
+                ReadOnly = FALSE;
+            };
+            cpu = f;
+            grp = f;
+            mem = f;
+        },
+        {
+            ccex = t;
+            cnd = {
+                ID = Z_Resin3rdpartyXML;
+                Name = "Resin 3rd party XML classes";
+                Operation = OR;
+                PatternList = ( _xsl.* );
+                ReadOnly = FALSE;
+            };
+            cpu = f;
+            grp = f;
+            mem = f;
+        },
+        {
+            ccex = t;
+            cnd = {
+                ID = Z_BES3rdParty;
+                Name = "BES 3rd party classes";
+                Operation = OR;
+                PatternList = (
+                    com.sun.server.*,
+                    com.sun.net.*,
+                    com.sun.crypto.*,
+                    com.sun.jndi.*,
+                    com.sun.mail.*,
+                    com.sun.security.*,
+                    org.omg.CORBA.*,
+                    org.omg.PortableServer.*,
+                    org.omg.PortableInterceptor.*,
+                    org.omg.CosEventComm.*,
+                    org.omg.CosNaming.*,
+                    org.omg.CosTransactions.*,
+                    org.omg.firewall.*,
+                    org.omg.Messaging.*,
+                    org.omg.IOP.*,
+                    org.omg.CSIIOP.*,
+                    org.omg.SSLIOP.*,
+                    org.omg.GSSUP.*,
+                    gnu.regexp.*,
+                    COM.rsa.*,
+                    progress.message.*,
+                    HTTPClient.*,
+                    com.mortbay.*,
+                    org.apache.turbine.*,
+                    org.apache.java.*,
+                    org.apache.fop.*
+                );
+                ReadOnly = FALSE;
+            };
+            cpu = f;
+            grp = f;
+            mem = f;
+        },
+        {
+            ccex = t;
+            cnd = {
+                ID = Z_Orion3rdParty;
+                Name = "Orion 3rd party classes";
+                Operation = OR;
+                PatternList = (
+                    sun.tools.*,
+                    com.sun.naming.*,
+                    javax.naming.*,
+                    com.sun.activation.*,
+                    com.sun.net.ssl.*,
+                    com.sun.mail.*,
+                    COM.rsa.*
+                );
+                ReadOnly = FALSE;
+            };
+            cpu = f;
+            grp = f;
+            mem = f;
+        },
+        {
+            ccex = t;
+            cnd = {
+                ID = Z_Weblogic3rdParty;
+                Name = "WebLogic 3rd party classes";
+                Operation = OR;
+                PatternList = (
+                    COM.rsa.*,
+                    bsh.*,
+                    antlr.*,
+                    com.adventnet.*,
+                    com.rsa.*,
+                    com.octetstring.*,
+                    com.certicom.*,
+                    com.asn1c.*,
+                    com.linar.*,
+                    org.mozilla.*,
+                    com.sun.naming.*,
+                    com.sun.management.*,
+                    com.sun.activation.*,
+                    javax.naming.*,
+                    com.sun.net.*,
+                    com.sun.crypto.*,
+                    COM.jrockit.*
+                );
+                ReadOnly = FALSE;
+            };
+            cpu = f;
+            grp = f;
+            mem = f;
+        },
+        {
+            ccex = t;
+            cnd = {
+                ID = Z_Cloudscape;
+                Name = "Cloudscape JDBC Driver classes";
+                Operation = OR;
+                PatternList = (
+                    c8e.*,
+                    COM.cloudscape.*,
+                    COM.objectspace.*,
+                    com.objectspace.*
+                );
+                ReadOnly = FALSE;
+            };
+            cpu = f;
+            grp = f;
+            mem = f;
+        },
+        {
+            ccex = t;
+            cnd = {
+                ID = 1018649724232;
+                Name = "PointBase JDBC Driver classes";
+                Operation = OR;
+                PatternList = ( com.pointbase.* );
+                ReadOnly = FALSE;
+            };
+            cpu = f;
+            grp = f;
+            mem = f;
+        },
+        {
+            ccex = t;
+            cnd = {
+                ID = Z_WebSphere3rdParty;
+                Name = "WebSphere 3rd party classes";
+                Operation = OR;
+                PatternList = (
+                    com.klg.*,
+                    tcl.*,
+                    com.oroinc.*,
+                    com.ibm.bsf.*,
+                    org.mozilla.*,
+                    com.netscape.javascript.*,
+                    com.lotus.xml.*,
+                    com.lotus.xpath.*,
+                    com.lotus.xsl.*,
+                    com.merant.sequelink.*,
+                    demo.asn1.*,
+                    iaik.asn1*,
+                    iaik.pkcs.*,
+                    iaik.security.*,
+                    iaik.utils.*,
+                    iaik.x509.*,
+                    javax.crypto.*,
+                    iaik.java.security.*,
+                    javax.ejb.*,
+                    javax.naming.*,
+                    com.sun.naming.internal.*,
+                    javax.sql.*,
+                    javax.transaction.*,
+                    org.omg.CORBA.*,
+                    org.omg.CosNaming.*,
+                    org.omg.CosPropertyService.*,
+                    org.omg.CosTransactions.*,
+                    org.omg.Security*,
+                    org.omg.SendingContext.*,
+                    org.omg.stub.*,
+                    com.sun.server.*,
+                    com.sun.web.util.*,
+                    com.sun.jsp.*,
+                    org.apache.jasper,
+                    intersolv.jdbc.*
+                );
+                ReadOnly = FALSE;
+            };
+            cpu = f;
+            grp = f;
+            mem = f;
+        },
+        {
+            ccex = t;
+            cnd = {
+                ID = Z_EJBStubsSkels;
+                Name = "EJB stubs and skels";
+                Operation = OR;
+                PatternList = (
+                    *_Impl,
+                    *_EOImpl,
+                    *_HomeImpl,
+                    *_CMP_RDBMS,
+                    *_LocalHomeImpl,
+                    *_ELOImpl,
+                    *_WLStub,
+                    *_WLSkel,
+                    *._*_Stub,
+                    *._*_BaseStub,
+                    *._*_Tie,
+                    *._*_Skel,
+                    *Home_*,
+                    *HomeBean_*,
+                    *EJB_*,
+                    *EJBInjectorImpl_*,
+                    *EJBExtractor_*,
+                    *EJBCacheEntryImpl_*,
+                    *EJBAdaptorBinding_*,
+                    *BeanInjectorImpl_*,
+                    *BeanExtractor_*,
+                    *BeanCacheEntryImpl_*,
+                    *BeanAdaptorBinding_*,
+                    *EJBFunctionSet_*
+                );
+            };
+            cpu = f;
+            grp = f;
+            mem = f;
+        },
+        {
+            ccex = t;
+            cnd = {
+                ID = Z_Resin3rdParty;
+                Name = "Resin 3rd party classes";
+                Operation = OR;
+                PatternList = ( sun.tools.*, com.sun.naming.*, javax.naming.* );
+                ReadOnly = FALSE;
+            };
+            cpu = f;
+            grp = f;
+            mem = f;
+        }
+    );
+}
\ No newline at end of file



From pschneider at sheep.berlios.de  Wed Dec 29 23:00:41 2004
From: pschneider at sheep.berlios.de (Philipp Schneider at BerliOS)
Date: Wed, 29 Dec 2004 23:00:41 +0100
Subject: [Provirent-svn-commit] r254 - in project_src/website/web: . templates
Message-ID: <200412292200.iBTM0fP6027436@sheep.berlios.de>

Author: pschneider
Date: 2004-12-29 23:00:38 +0100 (Wed, 29 Dec 2004)
New Revision: 254

Added:
   project_src/website/web/templates/
   project_src/website/web/templates/main.jsp
Log:


Added: project_src/website/web/templates/main.jsp
===================================================================
--- project_src/website/web/templates/main.jsp	2004-12-29 21:58:46 UTC (rev 253)
+++ project_src/website/web/templates/main.jsp	2004-12-29 22:00:38 UTC (rev 254)
@@ -0,0 +1,242 @@
+<%@ taglib uri="/taglib/struts-bean" prefix="bean" %>
+<%@ taglib uri="/taglib/struts-html" prefix="html" %>
+<%@ taglib uri="/taglib/struts-logic" prefix="logic" %>
+<%@ taglib uri="/taglib/struts-tiles" prefix="tiles" %>
+<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
+<html>
+<head>
+  <title><tiles:getAsString name="title"/></title>
+  <html:base/>
+  <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
+  <link rel="stylesheet" type="text/css" href="<html:rewrite page='/style.css'/>" title="externe Styles">
+</head>
+
+<body>
+<table align="center" border="0" cellpadding="0" cellspacing="0" width="100%">
+  <tbody>
+    <tr>
+      <td width="10%">&nbsp;</td>
+      <td>&nbsp;</td>
+      <td width="10%">&nbsp;</td>
+    </tr>
+    <tr>
+      <td>&nbsp;</td>
+      <td>
+      <table align="center" bgcolor="#c2d9c1" border="0" cellpadding="0" cellspacing="0" width="100%">
+        <tbody>
+          <tr>
+            <td colspan="7" bgcolor="#000000"><img src="images/1pxtrans.gif" alt=""></td>
+            <td style="background-image: url(images/border_r.gif);"><img src="images/1pxtrans.gif" height="1" width="3" alt=""></td>
+          </tr>
+          <tr>
+            <td bgcolor="#000000" width="1"><img src="images/1pxtrans.gif" alt=""></td>
+            <td colspan="5" height="70">Logo</td>
+            <td bgcolor="#000000" width="1"><img src="images/1pxtrans.gif" alt=""></td>
+            <td style="background-image: url(images/border_r.gif);"><img src="images/1pxtrans.gif" width="3" alt=""></td>
+          </tr>
+          <tr>
+            <td colspan="7" bgcolor="#000000"><img src="images/1pxtrans.gif" alt=""></td>
+            <td style="background-image: url(images/border_r.gif);"><img src="images/1pxtrans.gif" height="1" width="3" alt=""></td>
+          </tr>
+          <tr>
+            <td bgcolor="#000000" width="1"><html:img page="/images/1pxtrans.gif" alt=""/></td>
+            <td colspan="5" height="20" valign="middle">
+            <table border="0" cellpadding="0" cellspacing="0" width="100%">
+              <tbody>
+                <tr>
+                  <td width="53%">
+                    <!--head start-->
+                    <div align="left">
+
+                      <logic:present name="user">
+                        <span class="pref">
+                          <html:link forward="pref">Meine Daten</html:link>&nbsp;
+                          <html:link forward="basket">Warenkorb</html:link>&nbsp;
+                          <html:link forward="logout">Logout</html:link>
+                        </span>
+
+                      </logic:present>
+                      <logic:notPresent scope="session" name="user">
+                        <html:form action="/LogonSubmit" focus="username" method="post">
+                          <span class="login_label">Benutzername:</span>
+                          <html:text property="username"size="13" styleClass="login"/>
+                          <span class="login_label">Password:</span>
+                          <html:password property="password" size="13" styleClass="login" redisplay="false"/>
+                          <html:submit styleClass="submit_search" value="login"/>
+                        </html:form>
+                      </logic:notPresent>
+
+                    </div>
+                  </td>
+                  <td width="50%">
+                    <div class="head_menue" align="right">
+                     	<a href="index.jsp" class="head_menue">&Uuml;bersicht</a>&nbsp;|&nbsp;<a href="index.jsp" class="head_menue">Impressum</a>&nbsp;|&nbsp;<a href="index.jsp" class="head_menue">Hilfe</a>&nbsp;
+                    </div>
+
+                    <!--head end-->
+                  </td>
+ </tr>
+              </tbody>
+            </table>
+            </td>
+            <td bgcolor="#000000" width="1"><img src="images/1pxtrans.gif" alt=""></td>
+            <td style="background-image: url(images/border_r.gif);"><img src="images/1pxtrans.gif" width="3" alt=""></td>
+          </tr>
+          <tr>
+            <td colspan="7" bgcolor="#000000"><img src="images/1pxtrans.gif" alt=""></td>
+            <td style="background-image: url(images/border_r.gif);"><img src="images/1pxtrans.gif" height="1" width="3" alt=""></td>
+          </tr>
+          <tr>
+            <td colspan="7" bgcolor="#f9efd2" height="2"><img src="images/1pxtrans.gif" alt=""></td>
+            <td bgcolor="#f9efd2"><img src="images/1pxtrans.gif" height="1" width="3" alt=""></td>
+          </tr>
+          <tr>
+            <td colspan="3" bgcolor="#000000"><img src="images/1pxtrans.gif" alt=""></td>
+            <td colspan="1" bgcolor="#f9efd2" width="2"><img src="images/1pxtrans.gif" alt=""></td>
+            <td colspan="3" bgcolor="#000000"><img src="images/1pxtrans.gif" alt=""></td>
+            <td style="background-image: url(images/border_r.gif);"><img src="images/1pxtrans.gif" height="1" width="3" alt=""></td>
+          </tr>
+          <tr>
+            <td bgcolor="#000000" width="1"><img src="images/1pxtrans.gif" alt=""></td>
+            <td valign="top">
+<!--menue start-->
+            <table class="menue_tbl" border="0" cellpadding="0" cellspacing="0">
+              <thead class="menue_tbl"> <tr>
+                <th>Aktuelles</th>
+              </tr>
+              </thead> <tbody class="menue_tbl">
+                <tr>
+                  <td class="menue_tbl"><html:link forward="search/new">Neuheiten</html:link></td>
+                </tr>
+                <tr>
+                  <td class="menue_tbl"><html:link forward="search/top10month">Top 10 Monat</html:link></td>
+                </tr>
+                <tr>
+                  <td class="menue_tbl"><html:link forward="search/top100year">Top 100 Jahr</html:link></td>
+                </tr>
+                <tr>
+                  <td class="menue_tbl"><html:link forward="search/preview">Vorschau</html:link></td>
+                </tr>
+              </tbody>
+            </table>
+            <br>
+            <table class="menue_suche" border="0" cellpadding="0" cellspacing="0">
+              <thead class="menue_tbl"> <tr>
+                <th colspan="2">Suche</th>
+              </tr>
+            </thead> <tbody>
+              <tr>
+                <td colspan="2">
+
+                  <html:form action="/SearchSubmit" focus="username" method="post">
+                    <html:text property="searchfor"size="13" styleClass="login"/>
+                  </td>
+                </tr>
+                <tr>
+                  <td>
+
+                    <html:select property="selectName" size="1" multiple="false">
+                      <html:option value="0">all</html:option>
+                      <html:option value="1">Movie</html:option>
+                      <html:option value="2">Artist</html:option>
+                      <html:option value="3">Genre</html:option>
+                    </html:select>
+
+                  </td>
+                  <td>
+                    <html:submit styleClass="submit_search" value="Suche"/>
+                  </html:form>
+
+
+
+
+                  </td>
+                </tr>
+              </tbody>
+            </table>
+            <br>
+            <table class="menue_tbl" border="0" cellpadding="0" cellspacing="0">
+              <thead class="menue_tbl"> <tr>
+                <th>Genre</th>
+              </tr>
+              </thead> <tbody  class="menue_tbl">
+                <tr>
+                  <td class="menue_tbl"><a href="#" class="menue_tbl"> Action </a></td>
+                </tr>
+                <tr>
+                  <td class="menue_tbl"><a href="#" class="menue_tbl"> Drama </a></td>
+                </tr>
+                <tr>
+                  <td class="menue_tbl"><a href="#" class="menue_tbl"> Comedy </a></td>
+                </tr>
+                <tr>
+                  <td class="menue_tbl"><a href="#" class="menue_tbl"> Thriller </a></td>
+                </tr>
+              </tbody>
+            </table>
+
+
+<!--menue end--> </td>
+            <td bgcolor="#000000" width="1"><img src="images/1pxtrans.gif" alt=""></td>
+            <td bgcolor="#f9efd2" width="3"><img src="images/1pxtrans.gif" alt=""></td>
+            <td bgcolor="#000000" width="1"><img src="images/1pxtrans.gif" alt=""></td>
+            <td valign="top" width="85%" style="padding-top:20px; padding-right:1px; padding-left: 1px;">
+<!--main start-->
+<html:errors/>
+&nbsp;<br />
+<tiles:insert attribute='contentbody' />
+
+<!--main end--> </td>
+            <td bgcolor="#000000" width="1"><img src="images/1pxtrans.gif" alt=""></td>
+            <td style="background-image: url(images/border_r.gif);"><img src="images/1pxtrans.gif" width="3" alt=""></td>
+          </tr>
+          <tr>
+            <td colspan="3" bgcolor="#000000"><img src="images/1pxtrans.gif" alt=""></td>
+            <td colspan="1" bgcolor="#f9efd2" width="2"><img src="images/1pxtrans.gif" alt=""></td>
+            <td colspan="3" bgcolor="#000000"><img src="images/1pxtrans.gif" alt=""></td>
+            <td style="background-image: url(images/border_r.gif);"><img src="images/1pxtrans.gif" height="1" width="3" alt=""></td>
+          </tr>
+          <tr>
+            <td colspan="7" bgcolor="#f9efd2" height="2"><img src="images/1pxtrans.gif" alt=""></td>
+            <td bgcolor="#f9efd2"><img src="images/1pxtrans.gif" height="1" width="1" alt=""></td>
+          </tr>
+          <tr>
+            <td colspan="7" bgcolor="#000000"><img src="images/1pxtrans.gif" alt=""></td>
+            <td style="background-image: url(images/border_r.gif);"><img src="images/1pxtrans.gif" height="1" width="3" alt=""></td>
+          </tr>
+          <tr>
+            <td bgcolor="#000000" width="1"><img src="images/1pxtrans.gif" alt=""></td>
+            <td colspan="5">
+            <div class="copyright">&copy;
+Remo Griesch,
+Stefan Forstner, Philipp Schneider<br>
+            </div>
+            </td>
+            <td bgcolor="#000000" width="1"><img src="images/1pxtrans.gif" alt=""></td>
+            <td style="background-image: url(images/border_r.gif);"><img src="images/1pxtrans.gif" width="3" alt=""></td>
+          </tr>
+          <tr>
+            <td colspan="7" bgcolor="#000000"><img src="images/1pxtrans.gif" alt=""></td>
+            <td style="background-image: url(images/border_r.gif);"><img src="images/1pxtrans.gif" height="1" width="3" alt=""></td>
+          </tr>
+          <tr>
+            <td colspan="7" style="background-image: url(images/border.gif);"><img src="border_bl.gif" height="7" alt=""></td>
+            <td style="background-image: url(images/border_br.gif);"><img src="images/1pxtrans.gif" height="1" width="3" alt=""></td>
+          </tr>
+        </tbody>
+      </table>
+      </td>
+      <td>&nbsp;</td>
+    </tr>
+    <tr>
+      <td>&nbsp;</td>
+      <td>&nbsp;</td>
+      <td>&nbsp;</td>
+    </tr>
+  </tbody>
+</table>
+
+
+
+</body>
+</html>



