From pschneider at sheep.berlios.de  Mon Nov  1 16:29:05 2004
From: pschneider at sheep.berlios.de (Philipp Schneider at BerliOS)
Date: Mon, 1 Nov 2004 16:29:05 +0100
Subject: [Provirent-svn-commit] r69 - in project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui: . language
Message-ID: <200411011529.iA1FT58A031065@sheep.berlios.de>

Author: pschneider
Date: 2004-11-01 16:29:04 +0100 (Mon, 01 Nov 2004)
New Revision: 69

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/CompositeFormate.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/language/formate.properties
Log:
- l?\195?\182schen angepasst
- sprachen hinzugef?\195?\188gt

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/CompositeFormate.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/CompositeFormate.java	2004-10-26 19:38:30 UTC (rev 68)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/CompositeFormate.java	2004-11-01 15:29:04 UTC (rev 69)
@@ -1,11 +1,13 @@
 package de.hsharz.provirent.managment.gui;
 
-import org.apache.log4j.Logger;
-
+import java.text.MessageFormat;
 import java.util.Locale;
 import java.util.PropertyResourceBundle;
 import java.util.ResourceBundle;
 
+import javax.swing.text.TabExpander;
+
+import org.apache.log4j.Logger;
 import org.eclipse.swt.SWT;
 import org.eclipse.swt.custom.SashForm;
 import org.eclipse.swt.events.FocusAdapter;
@@ -25,7 +27,6 @@
 import org.eclipse.swt.widgets.Label;
 import org.eclipse.swt.widgets.List;
 import org.eclipse.swt.widgets.Listener;
-import org.eclipse.swt.widgets.MessageBox;
 import org.eclipse.swt.widgets.Shell;
 import org.eclipse.swt.widgets.Table;
 import org.eclipse.swt.widgets.TableColumn;
@@ -151,6 +152,10 @@
 
     }
 
+    /* 
+     * Init die Sprache (properties Datei)
+     * @see de.hsharz.provirent.managment.gui.AbstractComposite#initLanguage(java.util.Locale)
+     */
     public void initLanguage(Locale locale) {
 
         l = PropertyResourceBundle.getBundle(
@@ -189,13 +194,24 @@
         }
     }
 
+    /**
+     * Konstruktor
+     * @param p
+     * @param style
+     * @param status Statusline der ?bergeordneten Instance
+     * @param l Locale die verwendet werden soll
+     */
     public CompositeFormate(Composite p, int style,
             StatusLineStyledText status, Locale l) {
         super(p, style, status, l);
         parent = p;
+        //Statusline wird gestzt
         statusLine = status;
+        
+        //sprache wird init
         initLanguage(l);
 
+        //die Gui wird aufgerufen
         initGUI();
     }
 
@@ -289,23 +305,38 @@
         tableVideoFormat.setHeaderVisible(true);
         tableVideoFormat.setLinesVisible(true);
         GridData table2LData = new GridData();
+        tableVideoFormat.addFocusListener(new FocusAdapter() {
+            public void focusLost(FocusEvent evt) {
+                System.out.println("tableVideoFormat.focusLost, event=" + evt);
+                //TODO add your code for tableVideoFormat.focusLost
+            }
+            public void focusGained(FocusEvent evt) {
+                System.out
+                    .println("tableVideoFormat.focusGained, event=" + evt);
+                //TODO add your code for tableVideoFormat.focusGained
+            }
+        });
         tableVideoFormat.addSelectionListener(new SelectionAdapter() {
             public void widgetSelected(SelectionEvent evt) {
                 if (logger.isDebugEnabled()) {
-                    logger.debug("widgetSelected(SelectionEvent evt = " + evt
-                            + ") - start");
+                    logger.debug("widgetSelected(SelectionEvent evt = "
+                        + evt
+                        + ") - start");
                 }
 
                 int index = tableVideoFormat.getSelectionIndex();
 
-                System.out.println("Table select. id: " + index + " TableItem:"
-                        + tableVideoFormat.getItem(index) + " id: "
-                        + tableVideoFormat.getItem(index).getText(0));
+                System.out.println("Table select. id: "
+                    + index
+                    + " TableItem:"
+                    + tableVideoFormat.getItem(index)
+                    + " id: "
+                    + tableVideoFormat.getItem(index).getText(0));
 
                 //es wurde ein Element aus Tabelle ausgewaehlt jetzt muss die
                 //Detailansicht aktualisiert werden
                 refreshVideoFormatDetail(tableVideoFormat.getItem(index)
-                        .getText(0));
+                    .getText(0));
 
                 if (logger.isDebugEnabled()) {
                     logger.debug("widgetSelected(SelectionEvent) - end");
@@ -320,15 +351,15 @@
         tableVideoFormat.setLayoutData(table2LData);
 
         tableColumn = new TableColumn(tableVideoFormat, SWT.CENTER);
-        tableColumn.setText("id");
+        tableColumn.setText(l.getString("videoformat.groupoverview.columnid"));
         tableColumn.setWidth(50);
 
         tableColumn = new TableColumn(tableVideoFormat, SWT.CENTER);
-        tableColumn.setText("Name");
+        tableColumn.setText(l.getString("videoformat.groupoverview.columnname"));
         tableColumn.setWidth(200);
 
         tableColumn = new TableColumn(tableVideoFormat, SWT.CENTER);
-        tableColumn.setText("Abk.");
+        tableColumn.setText(l.getString("videoformat.groupoverview.columnshortname"));
         tableColumn.setWidth(75);
 
         if (logger.isDebugEnabled()) {
@@ -339,18 +370,24 @@
     private void initVideoFormatDetailButtons() {
 
         buttonVideoFormatNew = new Button(composite2, SWT.PUSH | SWT.CENTER);
-        buttonVideoFormatNew.setText("Neu");
+        buttonVideoFormatNew.setText(l.getString("button.new"));
         buttonVideoFormatNew.addSelectionListener(new SelectionAdapter() {
             public void widgetSelected(SelectionEvent evt) {
 
-                buttonVideoFormatCancel.setEnabled(true);
+                textVideoFormatID.setText("");
+                textVideoFormatName.setText("");
+                textVideoFormatShortname.setText("");
+                
+
                 textVideoFormatName.setEditable(true);
                 textVideoFormatShortname.setEditable(true);
-                textVideoFormatID.setText("");
-                textVideoFormatName.setText("");
+                buttonVideoFormatCancel.setEnabled(true);
                 buttonVideoFormatSave.setEnabled(true);
+                buttonVideoFormatNew.setEnabled(false);
+                buttonVideoFormatEdit.setEnabled(false);
+                buttonVideoFormatDelete.setEnabled(false);
+                
                 textVideoFormatSearch.setEditable(false);
-                textVideoFormatShortname.setText("");
                 tableVideoFormat.setEnabled(false);
 
                 mode_VideoFormat = ManagmentGui.MODE_ADD;
@@ -359,7 +396,7 @@
         });
 
         buttonVideoFormatEdit = new Button(composite2, SWT.PUSH | SWT.CENTER);
-        buttonVideoFormatEdit.setText("Bearbeiten");
+        buttonVideoFormatEdit.setText(l.getString("button.edit"));
         buttonVideoFormatEdit.setEnabled(false);
         buttonVideoFormatEdit.addSelectionListener(new SelectionAdapter() {
             public void widgetSelected(SelectionEvent evt) {
@@ -387,7 +424,7 @@
         });
 
         buttonVideoFormatDelete = new Button(composite2, SWT.PUSH | SWT.CENTER);
-        buttonVideoFormatDelete.setText("L?schen");
+        buttonVideoFormatDelete.setText(l.getString("button.delete"));
         buttonVideoFormatDelete.setEnabled(false);
         buttonVideoFormatDelete.addSelectionListener(new SelectionAdapter() {
             public void widgetSelected(SelectionEvent evt) {
@@ -396,7 +433,13 @@
                                 + evt);
                 
                 
-               int question = showMsg("","", SWT.ICON_QUESTION | SWT.YES | SWT.NO);
+               String msg = MessageFormat.format(
+                       l.getString("videoformat.groupdetail.deletebutton.question.text"),
+                               new Object[]{textVideoFormatName.getText()+" "+textVideoFormatShortname.getText()});
+                
+               int question = showMsg(msg,
+                       l.getString("videoformat.groupdetail.deletebutton.question.header"), 
+                       SWT.ICON_QUESTION | SWT.YES | SWT.NO);
                
                if (question != SWT.YES){
                    return;
@@ -415,6 +458,16 @@
                     //?bersichtsTabelle aktualisieren
                     refreshVideoFormatTable(textVideoFormatSearch.getText());
                     
+                    //Detailansicht leeren
+                    textVideoFormatID.setText("");
+                    textVideoFormatName.setText("");
+                    textVideoFormatShortname.setText("");
+                    
+                    //in Tabelle n?chsten ausw?hlen
+                    try {
+                        tableVideoFormat.select(0);
+                    } catch (Exception ex) {}
+                    
                     //Statusline Nachricht sezten
                     statusLine.setStatus(1,l.getString("videoformat.groupdetail.deletebutton.newok"));
 
@@ -454,7 +507,7 @@
         buttonVideoFormatFill.setLayoutData(buttonVideoFormatFillLData);
 
         buttonVideoFormatSave = new Button(composite2, SWT.PUSH | SWT.CENTER);
-        buttonVideoFormatSave.setText("Speichern");
+        buttonVideoFormatSave.setText(l.getString("button.save"));
         buttonVideoFormatSave.setEnabled(false);
         buttonVideoFormatSave.addSelectionListener(new SelectionAdapter() {
             public void widgetSelected(SelectionEvent evt) {
@@ -489,12 +542,15 @@
                     try {
                         //object speichern
                         // Fehlerbehandlung
-                        Database.saveObject(
+                        Object o = Database.saveObject(
                                 new VideoFormat(textVideoFormatName.getText(),
                                         textVideoFormatShortname.getText()));
-                        //?bersichtsTabelle aktualisieren
-                        refreshVideoFormatTable(textVideoFormatSearch.getText());
                         
+                        // in ?bersichtstabelle einf?gen
+                        insertIntoVideoFormatTable((VideoFormat)o);
+                        textVideoFormatID.setText( ((VideoFormat)o).getVideoFormatId()+"" );
+                        
+                        
                         //Statusline Nachricht sezten
                         statusLine.setStatus(1,l.getString("videoformat.groupdetail.savebutton.newok"));
 
@@ -572,7 +628,7 @@
         });
 
         buttonVideoFormatCancel = new Button(composite2, SWT.PUSH | SWT.CENTER);
-        buttonVideoFormatCancel.setText("Abbruch");
+        buttonVideoFormatCancel.setText(l.getString("button.cancel"));
         buttonVideoFormatCancel.setEnabled(false);
         buttonVideoFormatCancel.addSelectionListener(new SelectionAdapter() {
             public void widgetSelected(SelectionEvent evt) {
@@ -718,6 +774,18 @@
             groupVideoFormat.setText(l.getString("videoformat.group.label"));
             groupVideoFormat.setSize(758, 284);
             FormData group2LData = new FormData();
+            groupVideoFormat.addFocusListener(new FocusAdapter() {
+                public void focusLost(FocusEvent evt) {
+                    System.out.println("groupVideoFormat.focusLost, event="
+                        + evt);
+                    buttonVideoFormatCancel.setEnabled(false);
+                    buttonVideoFormatDelete.setEnabled(false);
+                    buttonVideoFormatEdit.setEnabled(false);
+                    buttonVideoFormatNew.setEnabled(false);
+                    buttonVideoFormatSave.setEnabled(false);
+                    //TODO add your code for groupVideoFormat.focusLost
+                }
+            });
             groupVideoFormat.setLayout(group2Layout);
             groupVideoFormat.setLayoutData(group2LData);
             {

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/language/formate.properties
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/language/formate.properties	2004-10-26 19:38:30 UTC (rev 68)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/language/formate.properties	2004-11-01 15:29:04 UTC (rev 69)
@@ -1,7 +1,18 @@
 
 error=Fehler
+button.new=Neu
+button.edit=Bearbeiten
+button.delete=L?schen
+button.save=Speichern
+button.cancel=Abbruch
+
 videoformat.group.label=VideoFormat
 videoformat.groupoverview.label=?berblick
+videoformat.groupoverview.columnid=id
+videoformat.groupoverview.columnname=Name
+videoformat.groupoverview.columnshortname=Abk.
+
+
 videoformat.groupoverview.searchlabel=Suche nach
 videoformat.groupdetail.label=Detail
 videoformat.groupdetail.idlabel=VideoFormat ID
@@ -16,6 +27,8 @@
 videoformat.groupdetail.savebutton.errorsave=Datenbankfehler beim Speichern.
 videoformat.groupdetail.savebutton.errordb=Datenbankfehler beim Herstellen der Verbindung.(save).
 
+videoformat.groupdetail.deletebutton.question.header=Wirklich l?schen?
+videoformat.groupdetail.deletebutton.question.text=Wollen Sie den Datensatz {0} wirklich l?schen?
 videoformat.groupdetail.deletebutton.newok=Datensatz wurde erfolgreich gel?scht.
 videoformat.groupdetail.deletebutton.errorsave=Datenbankfehler beim L?schen.
 videoformat.groupdetail.deletebutton.errordb=Datenbankfehler beim Herstellen der Verbindung(del).



From pschneider at sheep.berlios.de  Mon Nov  1 17:19:38 2004
From: pschneider at sheep.berlios.de (Philipp Schneider at BerliOS)
Date: Mon, 1 Nov 2004 17:19:38 +0100
Subject: [Provirent-svn-commit] r70 - project_src/provirent_hibernate/src/de/hsharz/provirent
Message-ID: <200411011619.iA1GJcsN000415@sheep.berlios.de>

Author: pschneider
Date: 2004-11-01 17:19:37 +0100 (Mon, 01 Nov 2004)
New Revision: 70

Added:
   project_src/provirent_hibernate/src/de/hsharz/provirent/Util.java
Log:
- Util klasse mit statischen methoden die ?\195?\182fters gebraucht werden
- createHash Methode erzeugt

Added: project_src/provirent_hibernate/src/de/hsharz/provirent/Util.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/Util.java	2004-11-01 15:29:04 UTC (rev 69)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/Util.java	2004-11-01 16:19:37 UTC (rev 70)
@@ -0,0 +1,68 @@
+/*
+ * Created on 01.11.2004
+ *
+ * Copyright (c) 2004/2005, Remo Griesch/Stefan Forstner/Philipp Schneider
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * - Redistributions of source code must retain the above copyright notice,
+ * this list of conditions and the following disclaimer.
+ * - Redistributions in binary form must reproduce the above copyright notice,
+ * this list of conditions and the following disclaimer in the documentation
+ * and/or other materials provided with the distribution.
+ * - Neither the name of the Remo Griesch/Stefan Forstner/Philipp Schneider nor
+ * the names of its contributors may be used to endorse or promote products
+ * derived from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+package de.hsharz.provirent;
+
+import java.security.MessageDigest;
+
+import org.apache.log4j.Logger;
+
+/**
+ * @author Philipp Schneider
+ *
+ */
+public class Util {
+    /**
+     * Logger for this class
+     */
+    private static final Logger logger = Logger.getLogger(Util.class);
+    
+    static public String createHash(final String s) {
+        
+        try {
+            byte[] encryptbyte = MessageDigest.getInstance("SHA-1").digest(s.getBytes());
+            StringBuffer sb = new StringBuffer();
+
+            //create a StringBuffer for the hash
+            for (int i = 0; i < encryptbyte.length; i++) {
+                sb.append(Integer.toHexString(encryptbyte[i] & 0xff));
+            }
+
+            return new String(sb);
+            
+        } catch (Exception ex) {
+            logger.error("Fehler beim HashCode erstellen.",ex);
+            return null;
+        }
+    }
+
+}



From pschneider at sheep.berlios.de  Mon Nov  1 17:20:11 2004
From: pschneider at sheep.berlios.de (Philipp Schneider at BerliOS)
Date: Mon, 1 Nov 2004 17:20:11 +0100
Subject: [Provirent-svn-commit] r71 - project_src/provirent_hibernate/src/de/hsharz/provirent/persistence
Message-ID: <200411011620.iA1GKB1P000495@sheep.berlios.de>

Author: pschneider
Date: 2004-11-01 17:20:10 +0100 (Mon, 01 Nov 2004)
New Revision: 71

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java
Log:


Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java	2004-11-01 16:19:37 UTC (rev 70)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java	2004-11-01 16:20:10 UTC (rev 71)
@@ -157,7 +157,7 @@
         
 
     }
-    public static void saveObject(Object o) throws DataBaseException{
+    public static Object saveObject(Object o) throws DataBaseException{
         if (logger.isDebugEnabled()) {
             logger
                     .debug("saveObject(Object o = " + o
@@ -184,11 +184,12 @@
                 tx.commit();
                 
             } catch (HibernateException e) {
-                exception = 2;
+                //exception = 2;
                 logger
                 .error(
                         "saveObject() - Something went wrong here; discard all partial changes",
                         e);
+                
                 if (tx != null) {
                     try {
                         // Something went wrong; discard all partial changes
@@ -217,6 +218,7 @@
         if (logger.isDebugEnabled()) {
             logger.debug("saveObject(VideoFormat) - end");
         }
+        return o;
     }
     
   



From pschneider at sheep.berlios.de  Mon Nov  1 18:37:12 2004
From: pschneider at sheep.berlios.de (Philipp Schneider at BerliOS)
Date: Mon, 1 Nov 2004 18:37:12 +0100
Subject: [Provirent-svn-commit] r72 - project_src/provirent_hibernate/lib
Message-ID: <200411011737.iA1HbCd5026516@sheep.berlios.de>

Author: pschneider
Date: 2004-11-01 18:36:55 +0100 (Mon, 01 Nov 2004)
New Revision: 72

Added:
   project_src/provirent_hibernate/lib/activation.jar
   project_src/provirent_hibernate/lib/mail.jar
Log:
- werden zum Mailversand ben?\195?\182tigt

Added: project_src/provirent_hibernate/lib/activation.jar
===================================================================
(Binary files differ)


Property changes on: project_src/provirent_hibernate/lib/activation.jar
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/provirent_hibernate/lib/mail.jar
===================================================================
(Binary files differ)


Property changes on: project_src/provirent_hibernate/lib/mail.jar
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream



From pschneider at sheep.berlios.de  Mon Nov  1 19:07:11 2004
From: pschneider at sheep.berlios.de (Philipp Schneider at BerliOS)
Date: Mon, 1 Nov 2004 19:07:11 +0100
Subject: [Provirent-svn-commit] r73 - in project_src/provirent_hibernate: . src/de/hsharz/provirent
Message-ID: <200411011807.iA1I7BEb019014@sheep.berlios.de>

Author: pschneider
Date: 2004-11-01 19:07:10 +0100 (Mon, 01 Nov 2004)
New Revision: 73

Modified:
   project_src/provirent_hibernate/.classpath
   project_src/provirent_hibernate/src/de/hsharz/provirent/Util.java
Log:
- methode zum Email versand hinzugef?\195?\188gt

Modified: project_src/provirent_hibernate/.classpath
===================================================================
--- project_src/provirent_hibernate/.classpath	2004-11-01 17:36:55 UTC (rev 72)
+++ project_src/provirent_hibernate/.classpath	2004-11-01 18:07:10 UTC (rev 73)
@@ -40,5 +40,7 @@
 	<classpathentry kind="lib" path="lib/xerces-2.4.0.jar"/>
 	<classpathentry kind="lib" path="lib/xml-apis.jar"/>
 	<classpathentry sourcepath="ECLIPSE_HOME/plugins/org.eclipse.platform.source.win32.win32.x86_3.0.1/src/org.eclipse.swt.win32_3.0.1/ws/win32/swtsrc.zip" kind="var" path="ECLIPSE_HOME/plugins/org.eclipse.swt.win32_3.0.1/ws/win32/swt.jar"/>
+	<classpathentry kind="lib" path="lib/activation.jar"/>
+	<classpathentry kind="lib" path="lib/mail.jar"/>
 	<classpathentry kind="output" path="bin"/>
 </classpath>

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/Util.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/Util.java	2004-11-01 17:36:55 UTC (rev 72)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/Util.java	2004-11-01 18:07:10 UTC (rev 73)
@@ -32,24 +32,75 @@
  */
 package de.hsharz.provirent;
 
+import java.io.UnsupportedEncodingException;
 import java.security.MessageDigest;
+import java.util.Properties;
 
+import javax.mail.Address;
+import javax.mail.Message;
+import javax.mail.MessagingException;
+import javax.mail.Session;
+import javax.mail.Transport;
+import javax.mail.internet.InternetAddress;
+import javax.mail.internet.MimeMessage;
+
 import org.apache.log4j.Logger;
 
 /**
  * @author Philipp Schneider
- *
+ *  
  */
 public class Util {
     /**
      * Logger for this class
      */
     private static final Logger logger = Logger.getLogger(Util.class);
-    
-    static public String createHash(final String s) {
-        
+
+    private static final String MAIL_SERVER = "phil-schneider.de";
+
+    private static final String MAIL_PORT = "";
+
+    private static final String MAIL_USER = "web2_103p9";
+
+    private static final String MAIL_PASS = "jboss14";
+
+    public Util() {
+
+    }
+
+    public static void sendemail(final String toEmail, final String toName,
+            final String subject, final String plainText, final String htmlText)
+            throws MessagingException, UnsupportedEncodingException {
+
+        Properties props = new Properties();
+        Session session = Session.getDefaultInstance(props, null);
+        MimeMessage message = new MimeMessage(session);
+
+        message.setContent(htmlText, "text/html");
+        message.setContent(plainText, "text/plain");
+        message.setSubject(subject);
+
+        Address address = new InternetAddress(
+                "provirent-test at phil-schneider.de", "Provirent test");
+        message.setFrom(address);
+        message.setReplyTo(new Address[] { address });
+
+        Address toaddress = new InternetAddress(toEmail, toName);
+        message.addRecipient(Message.RecipientType.TO, toaddress);
+
+        message.saveChanges(); // implicit with send()
+        Transport transport = session.getTransport("smtp");
+        transport.connect(MAIL_SERVER, MAIL_USER, MAIL_PASS);
+        transport.sendMessage(message, message.getAllRecipients());
+        transport.close();
+
+    }
+
+    public static String createHash(final String s) {
+
         try {
-            byte[] encryptbyte = MessageDigest.getInstance("SHA-1").digest(s.getBytes());
+            byte[] encryptbyte = MessageDigest.getInstance("SHA-1").digest(
+                    s.getBytes());
             StringBuffer sb = new StringBuffer();
 
             //create a StringBuffer for the hash
@@ -58,11 +109,15 @@
             }
 
             return new String(sb);
-            
+
         } catch (Exception ex) {
-            logger.error("Fehler beim HashCode erstellen.",ex);
+            logger.error("Fehler beim HashCode erstellen.", ex);
             return null;
         }
     }
 
-}
+    public static void main(String[] args) {
+        Util h = new Util();
+
+    }
+}
\ No newline at end of file



From rgriesch at sheep.berlios.de  Mon Nov  1 20:01:15 2004
From: rgriesch at sheep.berlios.de (Remo Griesch at BerliOS)
Date: Mon, 1 Nov 2004 20:01:15 +0100
Subject: [Provirent-svn-commit] r74 - docu
Message-ID: <200411011901.iA1J1FCq021674@sheep.berlios.de>

Author: rgriesch
Date: 2004-11-01 20:01:13 +0100 (Mon, 01 Nov 2004)
New Revision: 74

Added:
   docu/Probleme in Management GUI.txt
Log:


Added: docu/Probleme in Management GUI.txt
===================================================================
--- docu/Probleme in Management GUI.txt	2004-11-01 18:07:10 UTC (rev 73)
+++ docu/Probleme in Management GUI.txt	2004-11-01 19:01:13 UTC (rev 74)
@@ -0,0 +1,17 @@
+Probleme:
+
+- Wenn Reiter Formate ausgew?hlt wird ist die Tabelle f?r den ?berblick leer
+- Wenn ?berblick den Focus verliert wird erst Datenbank geladen und daten angezeigt
+- Suche funktioniert, wenn aber suchfeld leer ist bleibt alter Suchwert aktiv(wenn     man nicht enter dr?ckt) und es wird nicht mehr die komplette Datenbank   angezeigt
+  Suche sollte eventuell auch f?r id funktionieren,wenn man f?r   bestimmte id das   entsprechende Format sucht
+- Eine Abk?rzung sollte nicht zweimal an verschiedene Formate vergeben werden
+  k?nnen
+- doppelte Formate
+- wenn doppelte Formate erlaubt sind dann sollte abk?rzung f?r alle ?bernommen werden
+- wie werden details gef?llt und wie f?gt man audioformate ein
+
+
+L?sung:
+- Sobald Reiter fokus erh?lt sollte Daten geladen bzw. angezeigt werden
+- doppelte Formate ?
+- bei leeren Suchfeld  sollte auch keine Suche aktiv sein ( Anwender wei? nicht das er erst suchfeld leeren und enter dr?cken mu?)



From sforstner at sheep.berlios.de  Tue Nov  2 14:17:40 2004
From: sforstner at sheep.berlios.de (Stefan at BerliOS)
Date: Tue, 2 Nov 2004 14:17:40 +0100
Subject: [Provirent-svn-commit] r75 - in project_src/strutstest: WEB-INF/classes/resources WEB-INF/src/resources pages
Message-ID: <200411021317.iA2DHeOF019596@sheep.berlios.de>

Author: sforstner
Date: 2004-11-02 14:17:39 +0100 (Tue, 02 Nov 2004)
New Revision: 75

Added:
   project_src/strutstest/pages/RegistrateForm.jsp
Modified:
   project_src/strutstest/WEB-INF/classes/resources/MessageResources_de.properties
   project_src/strutstest/WEB-INF/src/resources/MessageResources_de.properties
   project_src/strutstest/pages/EingabeFormular.jsp
Log:


Modified: project_src/strutstest/WEB-INF/classes/resources/MessageResources_de.properties
===================================================================
--- project_src/strutstest/WEB-INF/classes/resources/MessageResources_de.properties	2004-11-01 19:01:13 UTC (rev 74)
+++ project_src/strutstest/WEB-INF/classes/resources/MessageResources_de.properties	2004-11-02 13:17:39 UTC (rev 75)
@@ -33,3 +33,21 @@
 error.username.required=Fehler: Benutzername wird ben?tigt!
 error.password.required=Fehler: Passwort wird ben?tigt!
 
+registrate.title=Professional Video Rental
+registrate.heading=Registrierung
+registrate.message=Bitte f?llen Sie folgendes Formular aus, um sich f?r die Benutzung von Provirent anzumelden!
+registrate.UserName=Benutzername
+registrate.LastName=Nachname
+registrate.FirstName=Vorname
+registrate.Password=Passwort
+registrate.RePassword=Passwort wiederholen
+registrate.Email=Email-Adresse
+error.registrate.username.required=Fehler: Benutzername wird ben?tigt!
+error.registrate.lastname.required=Fehler: Nachname wird ben?tigt!
+error.registrate.firstname.required=Fehler: Vorname wird ben?tigt!
+error.registrate.password.required=Fehler: Passwort wird ben?tigt!
+error.registrate.repassword.required=Fehler: Bitte das Passwort 2x eingeben!
+error.registrate.repassword.notidentic=Fehler: Wiederholung des Passwortes stimmt nicht mit Passwort ?berein! 
+error.registrate.email.required=Fehler: Email-Adresse wird ben?tigt!
+
+

Modified: project_src/strutstest/WEB-INF/src/resources/MessageResources_de.properties
===================================================================
--- project_src/strutstest/WEB-INF/src/resources/MessageResources_de.properties	2004-11-01 19:01:13 UTC (rev 74)
+++ project_src/strutstest/WEB-INF/src/resources/MessageResources_de.properties	2004-11-02 13:17:39 UTC (rev 75)
@@ -33,3 +33,21 @@
 error.username.required=Fehler: Benutzername wird ben?tigt!
 error.password.required=Fehler: Passwort wird ben?tigt!
 
+registrate.title=Professional Video Rental
+registrate.heading=Registrierung
+registrate.message=Bitte f?llen Sie folgendes Formular aus, um sich f?r die Benutzung von Provirent anzumelden!
+registrate.UserName=Benutzername
+registrate.LastName=Nachname
+registrate.FirstName=Vorname
+registrate.Password=Passwort
+registrate.RePassword=Passwort wiederholen
+registrate.Email=Email-Adresse
+error.registrate.username.required=Fehler: Benutzername wird ben?tigt!
+error.registrate.lastname.required=Fehler: Nachname wird ben?tigt!
+error.registrate.firstname.required=Fehler: Vorname wird ben?tigt!
+error.registrate.password.required=Fehler: Passwort wird ben?tigt!
+error.registrate.repassword.required=Fehler: Bitte das Passwort 2x eingeben!
+error.registrate.repassword.notidentic=Fehler: Wiederholung des Passwortes stimmt nicht mit Passwort ?berein! 
+error.registrate.email.required=Fehler: Email-Adresse wird ben?tigt!
+
+

Modified: project_src/strutstest/pages/EingabeFormular.jsp
===================================================================
--- project_src/strutstest/pages/EingabeFormular.jsp	2004-11-01 19:01:13 UTC (rev 74)
+++ project_src/strutstest/pages/EingabeFormular.jsp	2004-11-02 13:17:39 UTC (rev 75)
@@ -25,6 +25,8 @@
     <font color=red><html:errors property="password" /></font></p>
 <p> <html:submit property="action" value="Weiter" />
     <html:submit property="action" value="Abbrechen" /></p>
+<p> <html:link property="action" value="registrate"</p>
+
 </html:form>
 
 </body>

Added: project_src/strutstest/pages/RegistrateForm.jsp
===================================================================
--- project_src/strutstest/pages/RegistrateForm.jsp	2004-11-01 19:01:13 UTC (rev 74)
+++ project_src/strutstest/pages/RegistrateForm.jsp	2004-11-02 13:17:39 UTC (rev 75)
@@ -0,0 +1,44 @@
+<%@ taglib uri="/WEB-INF/struts-bean.tld"  prefix="bean"  %>
+<%@ taglib uri="/WEB-INF/struts-html.tld"  prefix="html"  %>
+<%@ taglib uri="/WEB-INF/struts-logic.tld" prefix="logic" %>
+
+<html:html locale="true">
+<head>
+  <title><bean:message key="registrate.title" /></title>
+  <html:base />
+</head>
+<body bgcolor="white">
+
+<logic:notPresent name="org.apache.struts.action.MESSAGE" scope="application">
+  <font color="red">ERROR: Application resources not loaded</font>
+</logic:notPresent>
+
+<h3><bean:message key="registrate.heading" /></h3>
+<p> <bean:message key="registrate.message" /></p>
+
+<html:form action="/htmlFormActionPath" focus="username">
+<p> <bean:message key="registrate.UserName" />:
+    <html:text property="username" size="40" maxlength="40" /><br/>
+    <font color=red><html:errors property="username" /></font></p>
+<p> <bean:message key="registrate.LastName" />:
+    <html:text property="lastname" size="40" maxlength="40" /><br/>
+    <font color=red><html:errors property="lastname" /></font></p>
+<p> <bean:message key="registrate.FirstName" />:
+    <html:text property="firstname" size="40" maxlength="40" /><br/>
+    <font color=red><html:errors property="firstname" /></font></p>
+<p> <bean:message key="registrate.Password" />:
+    <html:text property="password" size="40" maxlength="40" /><br/>
+    <font color=red><html:errors property="password" /></font></p>
+<p> <bean:message key="registrate.RePassword" />:
+    <html:text property="repassword" size="40" maxlength="40" /><br/>
+    <font color=red><html:errors property="repassword" /></font></p>
+<p> <bean:message key="registrate.Email" />:
+    <html:text property="email" size="40" maxlength="40" /><br/>
+    <font color=red><html:errors property="email" /></font></p>
+<p> <html:submit property="action" value="Registrate" />
+    <html:submit property="action" value="Cancel" /></p>
+
+</html:form>
+
+</body>
+</html:html>
\ No newline at end of file



From pschneider at sheep.berlios.de  Tue Nov  2 16:16:21 2004
From: pschneider at sheep.berlios.de (Philipp Schneider at BerliOS)
Date: Tue, 2 Nov 2004 16:16:21 +0100
Subject: [Provirent-svn-commit] r76 - project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui
Message-ID: <200411021516.iA2FGLnD017308@sheep.berlios.de>

Author: pschneider
Date: 2004-11-02 16:16:21 +0100 (Tue, 02 Nov 2004)
New Revision: 76

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/CompositeFormate.java
Log:
- VideoFormattabelle wird jetzt beim ?\195?\182ffnen angezeigt
- kommentare hinzugef?\195?\188gt

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/CompositeFormate.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/CompositeFormate.java	2004-11-02 13:17:39 UTC (rev 75)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/CompositeFormate.java	2004-11-02 15:16:21 UTC (rev 76)
@@ -213,8 +213,15 @@
 
         //die Gui wird aufgerufen
         initGUI();
+        
+        //die VideoFormattabelle wird gef?llt
+        refreshVideoFormatTable("");
+        
     }
 
+    /**
+     * Zeigt die linke Gruppe des VideoFormates an
+     */
     private void initVideoFormatGroupOverview() {
         if (logger.isDebugEnabled()) {
             logger.debug("initVideoFormatGroupOverview() - start");
@@ -222,7 +229,7 @@
 
         groupVideoFormatOverview = new Group(sashFormVideoFormat, SWT.NONE);
         GridLayout group5Layout = new GridLayout();
-        group5Layout.numColumns = 6;
+        group5Layout.numColumns = 8;
         groupVideoFormatOverview.setText(l
                 .getString("videoformat.groupoverview.label"));
         FormData group5LData = new FormData();
@@ -231,8 +238,9 @@
         group5LData.top = new FormAttachment(0, 100, 0);
         groupVideoFormatOverview.setLayoutData(group5LData);
 
-        //Tabelle init
+        //Tabelle anzeigen
         initTableVideoFormat();
+        //Suche darunter anzeigen
         initVideoFormatSearch();
 
         if (logger.isDebugEnabled()) {
@@ -240,19 +248,24 @@
         }
     }
 
+    /**
+     * Suchfelder f?r die Suche
+     */
     private void initVideoFormatSearch() {
         if (logger.isDebugEnabled()) {
             logger.debug("initVideoFormatSearch() - start");
         }
 
+        //label f?r die Suche
         labelVideoFormatSearch = new Label(groupVideoFormatOverview, SWT.NONE);
         labelVideoFormatSearch.setText(l
                 .getString("videoformat.groupoverview.searchlabel")
                 + ":");
         GridData label2LData = new GridData();
-        label2LData.horizontalSpan = 2;
+        label2LData.horizontalSpan = 3;
         labelVideoFormatSearch.setLayoutData(label2LData);
 
+        //das Suchfeld
         textVideoFormatSearch = new Text(groupVideoFormatOverview, SWT.BORDER);
         GridData text2LData = new GridData();
         textVideoFormatSearch.addFocusListener(new FocusAdapter() {
@@ -286,15 +299,20 @@
         });
 
         text2LData.horizontalAlignment = GridData.FILL;
-        text2LData.horizontalSpan = 4;
+        text2LData.horizontalSpan = 5;
         text2LData.grabExcessHorizontalSpace = true;
         textVideoFormatSearch.setLayoutData(text2LData);
 
+
+
         if (logger.isDebugEnabled()) {
             logger.debug("initVideoFormatSearch() - end");
         }
     }
 
+    /**
+     * Tabelle f?r die ?bersicht aller vorhandenen Formate
+     */
     private void initTableVideoFormat() {
         if (logger.isDebugEnabled()) {
             logger.debug("initTableVideoFormat() - start");
@@ -345,11 +363,12 @@
         });
         table2LData.verticalAlignment = GridData.FILL;
         table2LData.horizontalAlignment = GridData.FILL;
-        table2LData.horizontalSpan = 6;
+        table2LData.horizontalSpan = 8;
         table2LData.grabExcessHorizontalSpace = true;
         table2LData.grabExcessVerticalSpace = true;
         tableVideoFormat.setLayoutData(table2LData);
 
+        //einzelne Spalten hinzuf?gen
         tableColumn = new TableColumn(tableVideoFormat, SWT.CENTER);
         tableColumn.setText(l.getString("videoformat.groupoverview.columnid"));
         tableColumn.setWidth(50);
@@ -367,6 +386,9 @@
         }
     }
 
+    /**
+     * Buttons f?r die VideoFormate
+     */
     private void initVideoFormatDetailButtons() {
 
         buttonVideoFormatNew = new Button(composite2, SWT.PUSH | SWT.CENTER);
@@ -498,6 +520,7 @@
             }
         );
 
+        //leerer nicht sichtbarer Button
         buttonVideoFormatFill = new Button(composite2, SWT.PUSH | SWT.CENTER);
         GridData buttonVideoFormatFillLData = new GridData();
         buttonVideoFormatFill.setVisible(false);
@@ -651,15 +674,17 @@
         textVideoFormatShortname.setEditable(false);
         textVideoFormatSearch.setEditable(true);
 
-        //                                          VideoTabelle
-        // aktivieren
+        // VideoTabelle aktivieren
         tableVideoFormat.setEnabled(true);
 
-        //VideoSearch
-        // aktivieren
+        //VideoSearch aktivieren
         textVideoFormatSearch.setEnabled(true);
     }
 
+    /**
+     * rechte Seite des VideoFormates
+     * Detailansicht
+     */
     private void initVideoFormatGroupDetail() {
 
         groupVideoFormatDetail = new Group(sashFormVideoFormat, SWT.NONE);
@@ -744,6 +769,7 @@
         }
         {
 
+            //die Buttons bekommen ein eigenes Composite
             composite2 = new Composite(groupVideoFormatDetail, SWT.EMBEDDED);
             GridLayout composite2Layout = new GridLayout();
             composite2Layout.numColumns = 6;
@@ -765,6 +791,9 @@
 
     }
 
+    /**
+     * Gruppe f?r das VideoFormat (oben)
+     */
     private void initVideoFormatGroup() {
         {
             //init a group for the videoformat
@@ -802,6 +831,7 @@
 
                 //init die Gruppe f?r VideoFormate ?berblick
                 initVideoFormatGroupOverview();
+                //init die Detailansicht
                 initVideoFormatGroupDetail();
 
             }



From pschneider at sheep.berlios.de  Tue Nov  2 17:00:10 2004
From: pschneider at sheep.berlios.de (Philipp Schneider at BerliOS)
Date: Tue, 2 Nov 2004 17:00:10 +0100
Subject: [Provirent-svn-commit] r77 - project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/language
Message-ID: <200411021600.iA2G0AOh019113@sheep.berlios.de>

Author: pschneider
Date: 2004-11-02 17:00:09 +0100 (Tue, 02 Nov 2004)
New Revision: 77

Added:
   project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/language/main.properties
   project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/language/main_de_DE.properties
Log:
- Sprachdateien f?\195?\188r das MainComposite

Added: project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/language/main.properties
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/language/main.properties	2004-11-02 15:16:21 UTC (rev 76)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/language/main.properties	2004-11-02 16:00:09 UTC (rev 77)
@@ -0,0 +1,39 @@
+mainwindow.title=Provirent Managment Application english
+menue.file=Datei
+menue.file.open=?ffnen
+menue.file.new=Neu
+menue.file.save=Speichern
+menue.file.close=Schlie?en
+menue.file.exit=Beenden
+
+
+menue.view=Ansicht
+menue.view.format=Formate
+
+menue.view.director=Regie
+
+menue.view.actor=Darsteller
+
+menue.view.genre=Genre
+
+menue.view.subtitle=Untertitel
+menue.view.language=Sprache
+
+menue.view.status=Status
+menue.view.condition=Zustand
+
+menue.view.movie=Film
+
+menue.view.dvd=DVD
+
+menue.view.bill=Rechnung
+
+tab.format.title=Video-/AudioFormate
+tab.director.title=
+tab.actor.title=
+tab.genre.title=
+tab.subtitle.title=
+tab.language.title=
+tab.status.title=
+tab.condition.title=
+tab.movie.title=

Added: project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/language/main_de_DE.properties
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/language/main_de_DE.properties	2004-11-02 15:16:21 UTC (rev 76)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/language/main_de_DE.properties	2004-11-02 16:00:09 UTC (rev 77)
@@ -0,0 +1 @@
+mainwindow.title=Provirent Managment Application Deutsch
\ No newline at end of file



From pschneider at sheep.berlios.de  Tue Nov  2 17:00:46 2004
From: pschneider at sheep.berlios.de (Philipp Schneider at BerliOS)
Date: Tue, 2 Nov 2004 17:00:46 +0100
Subject: [Provirent-svn-commit] r78 - project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui
Message-ID: <200411021600.iA2G0k79019168@sheep.berlios.de>

Author: pschneider
Date: 2004-11-02 17:00:45 +0100 (Tue, 02 Nov 2004)
New Revision: 78

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/ColorDef.java
Log:
- Standartgrau als Farbe hinzugef?\195?\188gt

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/ColorDef.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/ColorDef.java	2004-11-02 16:00:09 UTC (rev 77)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/ColorDef.java	2004-11-02 16:00:45 UTC (rev 78)
@@ -42,7 +42,14 @@
  */
 public class ColorDef {
     
+    public static final Color STANDARD = SWTResourceManager.getColor(
+            212,
+            208,
+            200);
 
+    
+    
+    
     public static final Color STATUS_B_STANDARD = SWTResourceManager.getColor(
             204,
             200,



From pschneider at sheep.berlios.de  Tue Nov  2 17:02:22 2004
From: pschneider at sheep.berlios.de (Philipp Schneider at BerliOS)
Date: Tue, 2 Nov 2004 17:02:22 +0100
Subject: [Provirent-svn-commit] r80 - project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui
Message-ID: <200411021602.iA2G2Mkh019300@sheep.berlios.de>

Author: pschneider
Date: 2004-11-02 17:02:21 +0100 (Tue, 02 Nov 2004)
New Revision: 80

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/ManagmentGui.java
Log:
- auf mehrsprachigkeit umgestellt
- ansicht menue erg?\195?\164nzt
- funktion f?\195?\188r ansicht-formate implementiert

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/ManagmentGui.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/ManagmentGui.java	2004-11-02 16:01:27 UTC (rev 79)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/ManagmentGui.java	2004-11-02 16:02:21 UTC (rev 80)
@@ -119,19 +119,6 @@
 
     private CTabItem tabItemFormat;
 
-    private List list3;
-
-    private Group group2Director;
-
-    private Text filterTextVideoFormat;
-
-    private Label filterLabelVideoFormat;
-
-    private TableColumn tableColumnDirectorFirstname;
-
-    private TableColumn tableColumnDirectorLastname;
-
-    private TableColumn tableColumnDirectorId;
     private CompositeFormate compositeFormate;
 
     private MenuItem aboutMenuItem;
@@ -144,19 +131,13 @@
 
     private MenuItem viewDirectorMenuItem;
 
-    private Table tableDirector;
-
-    private Group group1Director;
-
-    private SashForm sashFormDirector;
-
-    private CTabItem cTabItem2;
-
     private Shell shell;
 
     private Display display;
 
-    private MenuItem viewVideoFormatMenuItem;
+    private MenuItem viewFormatMenuItem,viewActorMenuItem,viewGenreMenuItem;
+    private MenuItem viewSubtitleMenuItem,viewLanguageMenuItem,viewStatusMenuItem;
+    private MenuItem viewConditionMenuItem,viewMovieMenuItem,viewDvdMenuItem, viewBillMenuItem;
 
     private Menu viewMenu;
 
@@ -238,7 +219,7 @@
         
         
         l = PropertyResourceBundle.getBundle(
-                "de.hsharz.provirent.managment.gui.language", locale);
+                "de.hsharz.provirent.managment.gui.language.main", locale);
 
         //hier muss noch was gemacht werden
         if (l == null) {
@@ -261,8 +242,7 @@
 
         shell.layout();
 
-        //init the db, so it saves time later
-        //does that in a new Thread
+        //init the db, so it saves time later, does that in a new Thread
         initDB();
         
         //init the rest
@@ -282,24 +262,24 @@
              */
         }
         fileMenuItem = new MenuItem(rootMenu, SWT.CASCADE);
-        fileMenuItem.setText("Datei");
+        fileMenuItem.setText(l.getString("menue.file"));
         fileMenu = new Menu(fileMenuItem);
         fileMenuItem.setMenu(fileMenu);
 
         openFileMenuItem = new MenuItem(fileMenu, SWT.CASCADE);
-        openFileMenuItem.setText("?ffnen");
+        openFileMenuItem.setText(l.getString("menue.file.open"));
 
         newFileMenuItem = new MenuItem(fileMenu, SWT.CASCADE);
-        newFileMenuItem.setText("Neu");
+        newFileMenuItem.setText(l.getString("menue.file.new"));
 
         saveFileMenuItem = new MenuItem(fileMenu, SWT.CASCADE);
-        saveFileMenuItem.setText("Speichern");
+        saveFileMenuItem.setText(l.getString("menue.file.save"));
 
         closeFileMenuItem = new MenuItem(fileMenu, SWT.CASCADE);
-        closeFileMenuItem.setText("Schlie?en");
+        closeFileMenuItem.setText(l.getString("menue.file.close"));
 
         exitMenuItem = new MenuItem(fileMenu, SWT.CASCADE);
-        exitMenuItem.setText("Beenden");
+        exitMenuItem.setText(l.getString("menue.file.exit"));
 
     }
 
@@ -316,31 +296,112 @@
         }
 
         viewMenuItem = new MenuItem(rootMenu, SWT.CASCADE);
-        viewMenuItem.setText("Ansicht");
+        viewMenuItem.setText(l.getString("menue.view"));
 
         viewMenu = new Menu(viewMenuItem);
         viewMenuItem.setMenu(viewMenu);
 
-        viewVideoFormatMenuItem = new MenuItem(viewMenu, SWT.CHECK);
-        viewVideoFormatMenuItem.setText("VideoFormat");
-        viewVideoFormatMenuItem.setSelection(false);
-        viewVideoFormatMenuItem.addSelectionListener(new SelectionAdapter() {
+        viewFormatMenuItem = new MenuItem(viewMenu, SWT.CHECK);
+        viewFormatMenuItem.setText(l.getString("menue.view.format"));
+        viewFormatMenuItem.setSelection(false);
+        viewFormatMenuItem.addSelectionListener(new SelectionAdapter() {
             public void widgetSelected(SelectionEvent evt) {
                 System.out
-                        .println("viewVideoFormatMenuItem.widgetSelected, event="
+                        .println("viewFormatMenuItem.widgetSelected, event="
                                 + evt);
-                setStatus(3, "Fehler aufgetreten");
-                //TODO add your code for
+                
+                if(tabItemFormat != null && !tabItemFormat.isDisposed()) {
+                    //cTabFolderMain.forceFocus();
+                    //cTabFolderMain.setSelection(tabItemFormat);
+                    tabItemFormat.dispose();
+                    return;
+                }
+                
+                if(tabItemFormat == null){
+                    initFormatTab();
+                    cTabFolderMain.setSelection(tabItemFormat);
+                    return;
+                }
+                
+                if(tabItemFormat.isDisposed()){
+                    initFormatTab();
+                    cTabFolderMain.setSelection(tabItemFormat);
+                }
+                //setStatus(3, "Fehler aufgetreten");
+
                 // viewVideoFormatMenuItem.widgetSelected
             }
         });
 
         viewDirectorMenuItem = new MenuItem(viewMenu, SWT.CHECK);
-        viewDirectorMenuItem.setText("Director");
+        viewDirectorMenuItem.setText(l.getString("menue.view.director"));
         viewDirectorMenuItem.setSelection(false);
 
+        viewActorMenuItem = new MenuItem(viewMenu, SWT.CHECK);
+        viewActorMenuItem.setText(l.getString("menue.view.actor"));
+        viewActorMenuItem.setSelection(false);
+        
+        viewGenreMenuItem = new MenuItem(viewMenu, SWT.CHECK);
+        viewGenreMenuItem.setText(l.getString("menue.view.genre"));
+        viewActorMenuItem.setSelection(false);
+
+        viewSubtitleMenuItem = new MenuItem(viewMenu, SWT.CHECK);
+        viewSubtitleMenuItem.setText(l.getString("menue.view.subtitle"));
+        viewSubtitleMenuItem.setSelection(false);
+        
+        viewLanguageMenuItem = new MenuItem(viewMenu, SWT.CHECK);
+        viewLanguageMenuItem.setText(l.getString("menue.view.language"));
+        viewLanguageMenuItem.setSelection(false);
+
+        viewStatusMenuItem = new MenuItem(viewMenu, SWT.CHECK);
+        viewStatusMenuItem.setText(l.getString("menue.view.status"));
+        viewStatusMenuItem.setSelection(false);
+
+        viewConditionMenuItem = new MenuItem(viewMenu, SWT.CHECK);
+        viewConditionMenuItem.setText(l.getString("menue.view.condition"));
+        viewConditionMenuItem.setSelection(false);
+
+        viewMovieMenuItem = new MenuItem(viewMenu, SWT.CHECK);
+        viewMovieMenuItem.setText(l.getString("menue.view.movie"));
+        viewMovieMenuItem.setSelection(false);
+
+        viewDvdMenuItem = new MenuItem(viewMenu, SWT.CHECK);
+        viewDvdMenuItem.setText(l.getString("menue.view.dvd"));
+        viewDvdMenuItem.setSelection(false);
+
+        viewBillMenuItem = new MenuItem(viewMenu, SWT.CHECK);
+        viewBillMenuItem.setText(l.getString("menue.view.bill"));
+        viewBillMenuItem.setSelection(false);
+
+        
     }
 
+    
+    private void initFormatTab() {
+        tabItemFormat = new CTabItem(cTabFolderMain, SWT.NONE);
+        tabItemFormat.setText(l.getString("tab.format.title"));
+        {
+            compositeFormate = new CompositeFormate(
+                cTabFolderMain,
+                SWT.NONE, statusLine, locale);
+            
+            tabItemFormat.setControl(compositeFormate);
+        }
+    }
+    
+    private void initDirectorTab() {
+        tabItemFormat = new CTabItem(cTabFolderMain, SWT.NONE);
+        tabItemFormat.setText(l.getString("tab.director.title"));
+        {
+            compositeFormate = new CompositeFormate(
+                cTabFolderMain,
+                SWT.NONE, statusLine, locale);
+            
+            tabItemFormat.setControl(compositeFormate);
+        }
+    }    
+    
+    
     /**
      * init the help menu
      */
@@ -408,6 +469,14 @@
     }
     
     private void initMainTabFolder() {
+        cTabFolderMain = new CTabFolder(compositeMain, SWT.CLOSE);
+        //cTabFolderMain.setSelection(null);
+        GridData cTabFolder1LData = new GridData();
+        cTabFolder1LData.grabExcessHorizontalSpace = true;
+        cTabFolder1LData.horizontalAlignment = GridData.FILL;
+        cTabFolder1LData.grabExcessVerticalSpace = true;
+        cTabFolder1LData.verticalAlignment = GridData.FILL;
+        cTabFolderMain.setLayoutData(cTabFolder1LData);
         
     }
     
@@ -429,191 +498,14 @@
 
             //set the Site
             shell.setSize(MAIN_WINDOW_WIDTH, MAIN_WINDOW_HEIGHT);
-            {
+
                 //the root composite
                 //this init's the maincomposite
                 initRootComposite();
                 initStatusComposite();
+                initMainTabFolder();
 
-                {
-                    {
-                        cTabFolderMain = new CTabFolder(compositeMain, SWT.CLOSE);
-                        //cTabFolderMain.setSelection(null);
-                        GridData cTabFolder1LData = new GridData();
-                        cTabFolder1LData.grabExcessHorizontalSpace = true;
-                        cTabFolder1LData.horizontalAlignment = GridData.FILL;
-                        cTabFolder1LData.grabExcessVerticalSpace = true;
-                        cTabFolder1LData.verticalAlignment = GridData.FILL;
-                        cTabFolderMain.setLayoutData(cTabFolder1LData);
-                        {
-                            tabItemFormat = new CTabItem(cTabFolderMain, SWT.NONE);
-                            tabItemFormat.setText("Formate");
-                            {
-                                compositeFormate = new CompositeFormate(
-                                    cTabFolderMain,
-                                    SWT.NONE, statusLine, locale);
-                                
-                                tabItemFormat.setControl(compositeFormate);
-                            }
-                        }
-                        {
-                            cTabItem2 = new CTabItem(cTabFolderMain, SWT.NONE);
-                            cTabItem2.setText("cTabItem2");
-                            {
-                                sashFormDirector = new SashForm(cTabFolderMain,
-                                        SWT.NONE);
-                                cTabItem2.setControl(sashFormDirector);
-                                FormLayout sashFormDirectorLayout = new FormLayout();
-                                sashFormDirector
-                                        .setLayout(sashFormDirectorLayout);
-                                {
-                                    group1Director = new Group(
-                                            sashFormDirector, SWT.NONE);
-                                    GridLayout gridLayout = new GridLayout();
-                                    gridLayout.numColumns = 6;
-                                    group1Director
-                                            .setText("Directors ?bersicht");
-                                    FormData formData = new FormData();
-                                    group1Director.setLayout(gridLayout);
-                                    formData.right = new FormAttachment(100,
-                                            100, -5);
-                                    formData.top = new FormAttachment(0, 100, 5);
-                                    formData.bottom = new FormAttachment(100,
-                                            100, -5);
-                                    group1Director.setLayoutData(formData);
-                                    {
-                                        tableDirector = new Table(
-                                                group1Director, SWT.SINGLE
-                                                        | SWT.FULL_SELECTION
-                                                        | SWT.V_SCROLL
-                                                        | SWT.BORDER);
-                                        tableDirector.setHeaderVisible(true);
-                                        tableDirector.setLinesVisible(true);
-                                        GridData griddata = new GridData();
-                                        tableDirector
-                                                .addSelectionListener(new SelectionAdapter() {
-                                                    public void widgetSelected(
-                                                            SelectionEvent evt) {
 
-                                                        int index = tableDirector
-                                                                .getSelectionIndex();
-                                                        System.out
-                                                                .println("Table select. id: "
-                                                                        + index
-                                                                        + " TableItem:"
-                                                                        + tableDirector
-                                                                                .getItem(index)
-                                                                        + " id: "
-                                                                        + tableDirector
-                                                                                .getItem(
-                                                                                        index)
-                                                                                .getText(
-                                                                                        0));
-                                                    }
-                                                });
-                                        griddata.verticalAlignment = GridData.FILL;
-                                        griddata.horizontalAlignment = GridData.FILL;
-                                        griddata.horizontalSpan = 6;
-                                        griddata.grabExcessHorizontalSpace = true;
-                                        griddata.grabExcessVerticalSpace = true;
-                                        tableDirector.setLayoutData(griddata);
-                                        {
-                                            tableColumnDirectorId = new TableColumn(
-                                                    tableDirector, SWT.CENTER);
-                                            tableColumnDirectorId.setText("id");
-                                            tableColumnDirectorId.setWidth(100);
-                                        }
-                                        {
-                                            tableColumnDirectorLastname = new TableColumn(
-                                                    tableDirector, SWT.CENTER);
-                                            tableColumnDirectorLastname
-                                                    .setText("Name");
-                                            tableColumnDirectorLastname
-                                                    .setWidth(100);
-
-                                        }
-                                        {
-                                            tableColumnDirectorFirstname = new TableColumn(
-                                                    tableDirector, SWT.CENTER);
-                                            tableColumnDirectorFirstname
-                                                    .setText("Short");
-                                            tableColumnDirectorFirstname
-                                                    .setWidth(100);
-
-                                        }
-                                    }
-                                    {
-                                        filterLabelVideoFormat = new Label(
-                                                group1Director, SWT.NONE);
-                                        filterLabelVideoFormat
-                                                .setText("Suche nach:");
-                                        GridData data1 = new GridData();
-                                        data1.horizontalSpan = 2;
-                                        filterLabelVideoFormat
-                                                .setLayoutData(data1);
-                                    }
-                                    {
-                                        filterTextVideoFormat = new Text(
-                                                group1Director, SWT.BORDER);
-                                        GridData data2 = new GridData();
-
-                                        data2.horizontalAlignment = GridData.FILL;
-                                        data2.horizontalSpan = 4;
-                                        data2.grabExcessHorizontalSpace = true;
-                                        filterTextVideoFormat
-                                                .setLayoutData(data2);
-                                    }
-                                }
-                                {
-                                    group2Director = new Group(
-                                            sashFormDirector, SWT.NONE);
-                                    GridLayout gridLayout = new GridLayout();
-                                    gridLayout.numColumns = 2;
-                                    group2Director.setText("Filmliste");
-                                    FormData formData = new FormData();
-                                    group2Director.setLayout(gridLayout);
-                                    formData.left = new FormAttachment(0, 100,
-                                            5);
-                                    formData.top = new FormAttachment(0, 100, 5);
-                                    formData.bottom = new FormAttachment(100,
-                                            100, -5);
-                                    group2Director.setLayoutData(formData);
-                                    {
-                                        list3 = new List(group2Director,
-                                                SWT.SINGLE | SWT.H_SCROLL
-                                                        | SWT.V_SCROLL
-                                                        | SWT.BORDER);
-                                        GridData list3LData = new GridData();
-                                        list3
-                                                .addSelectionListener(new SelectionAdapter() {
-                                                    public void widgetSelected(
-                                                            SelectionEvent evt) {
-                                                        System.out
-                                                                .println("list1.widgetSelected, event="
-                                                                        + evt);
-
-                                                        //TODO add your code for
-                                                        // list1.widgetSelected
-                                                    }
-                                                });
-                                        list3LData.verticalAlignment = GridData.FILL;
-                                        list3LData.horizontalAlignment = GridData.FILL;
-                                        list3LData.grabExcessHorizontalSpace = true;
-                                        list3LData.grabExcessVerticalSpace = true;
-                                        list3.setLayoutData(list3LData);
-                                    }
-                                }
-                            }
-                        }
-                    }
-                }
-                {
-                    //init the Composite for statusline
-                    
-                    //compositeFormate.setStatusLine(statusLine);
-
-                }
-            }
             shell.layout();
         } catch (Exception e) {
             e.printStackTrace();
@@ -638,6 +530,7 @@
         composite2LData.grabExcessHorizontalSpace = true;
         compositeStatusLine.setLayoutData(composite2LData);
 
+        //Statusline
         initStatusLine();
 
     }
@@ -704,6 +597,11 @@
 
     }
 
+    /**
+     * Ruft die DB zum erstmal auf
+     * da dies viel Zeit dauert(beim ersten mal) geschieht dies im
+     * Hintergrund
+     */
     private void initDB(){
         
 		new Thread() {



From pschneider at sheep.berlios.de  Tue Nov  2 17:01:28 2004
From: pschneider at sheep.berlios.de (Philipp Schneider at BerliOS)
Date: Tue, 2 Nov 2004 17:01:28 +0100
Subject: [Provirent-svn-commit] r79 - project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui
Message-ID: <200411021601.iA2G1S2B019219@sheep.berlios.de>

Author: pschneider
Date: 2004-11-02 17:01:27 +0100 (Tue, 02 Nov 2004)
New Revision: 79

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/CompositeFormate.java
Log:


Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/CompositeFormate.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/CompositeFormate.java	2004-11-02 16:00:45 UTC (rev 78)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/CompositeFormate.java	2004-11-02 16:01:27 UTC (rev 79)
@@ -5,8 +5,6 @@
 import java.util.PropertyResourceBundle;
 import java.util.ResourceBundle;
 
-import javax.swing.text.TabExpander;
-
 import org.apache.log4j.Logger;
 import org.eclipse.swt.SWT;
 import org.eclipse.swt.custom.SashForm;
@@ -14,6 +12,7 @@
 import org.eclipse.swt.events.FocusEvent;
 import org.eclipse.swt.events.SelectionAdapter;
 import org.eclipse.swt.events.SelectionEvent;
+import org.eclipse.swt.graphics.Color;
 import org.eclipse.swt.layout.FormAttachment;
 import org.eclipse.swt.layout.FormData;
 import org.eclipse.swt.layout.FormLayout;
@@ -54,6 +53,7 @@
      */
     private static final Logger logger = Logger
             .getLogger(CompositeFormate.class);
+    
 
     private SashForm sashForm1;
 
@@ -681,6 +681,8 @@
         textVideoFormatSearch.setEnabled(true);
     }
 
+
+    
     /**
      * rechte Seite des VideoFormates
      * Detailansicht
@@ -791,6 +793,7 @@
 
     }
 
+    
     /**
      * Gruppe f?r das VideoFormat (oben)
      */
@@ -839,8 +842,11 @@
 
     }
 
+   
+    
     private void initAudioFormatGroup() {
         groupAudioFormat = new Group(sashForm1, SWT.NONE);
+        
         GridLayout group1Layout = new GridLayout();
         group1Layout.makeColumnsEqualWidth = true;
         groupAudioFormat.setText("AudioFormat");



From pschneider at sheep.berlios.de  Tue Nov  2 17:05:48 2004
From: pschneider at sheep.berlios.de (Philipp Schneider at BerliOS)
Date: Tue, 2 Nov 2004 17:05:48 +0100
Subject: [Provirent-svn-commit] r81 - project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui
Message-ID: <200411021605.iA2G5mlf019643@sheep.berlios.de>

Author: pschneider
Date: 2004-11-02 17:05:48 +0100 (Tue, 02 Nov 2004)
New Revision: 81

Removed:
   project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/language.properties
   project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/language_de_DE.properties
Log:


Deleted: project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/language.properties
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/language.properties	2004-11-02 16:02:21 UTC (rev 80)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/language.properties	2004-11-02 16:05:48 UTC (rev 81)
@@ -1 +0,0 @@
-mainwindow.title=Provirent Managment Application english
\ No newline at end of file

Deleted: project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/language_de_DE.properties
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/language_de_DE.properties	2004-11-02 16:02:21 UTC (rev 80)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/language_de_DE.properties	2004-11-02 16:05:48 UTC (rev 81)
@@ -1 +0,0 @@
-mainwindow.title=Provirent Managment Application Deutsch
\ No newline at end of file



From pschneider at sheep.berlios.de  Tue Nov  2 22:50:04 2004
From: pschneider at sheep.berlios.de (Philipp Schneider at BerliOS)
Date: Tue, 2 Nov 2004 22:50:04 +0100
Subject: [Provirent-svn-commit] r82 - project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui
Message-ID: <200411022150.iA2Lo4KP009368@sheep.berlios.de>

Author: pschneider
Date: 2004-11-02 22:50:03 +0100 (Tue, 02 Nov 2004)
New Revision: 82

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/ManagmentGui.java
Log:


Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/ManagmentGui.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/ManagmentGui.java	2004-11-02 16:05:48 UTC (rev 81)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/ManagmentGui.java	2004-11-02 21:50:03 UTC (rev 82)
@@ -247,6 +247,9 @@
         
         //init the rest
         initGUI();
+        
+        //initMainTabFolder
+        initMainTabFolder();
 
     }
 



From rgriesch at sheep.berlios.de  Wed Nov  3 22:48:02 2004
From: rgriesch at sheep.berlios.de (Remo Griesch at BerliOS)
Date: Wed, 3 Nov 2004 22:48:02 +0100
Subject: [Provirent-svn-commit] r83 - in project_src/provirent_hibernate: bin bin/com bin/com/cloudgarden bin/com/cloudgarden/resource data
Message-ID: <200411032148.iA3Lm2Ds009861@sheep.berlios.de>

Author: rgriesch
Date: 2004-11-03 22:48:01 +0100 (Wed, 03 Nov 2004)
New Revision: 83

Added:
   project_src/provirent_hibernate/bin/com/
   project_src/provirent_hibernate/bin/com/cloudgarden/
   project_src/provirent_hibernate/bin/com/cloudgarden/resource/
   project_src/provirent_hibernate/bin/com/cloudgarden/resource/SWTResourceManager$1.class
   project_src/provirent_hibernate/bin/com/cloudgarden/resource/SWTResourceManager.class
Modified:
   project_src/provirent_hibernate/data/video.log
   project_src/provirent_hibernate/data/video.properties
Log:


Added: project_src/provirent_hibernate/bin/com/cloudgarden/resource/SWTResourceManager$1.class
===================================================================
(Binary files differ)


Property changes on: project_src/provirent_hibernate/bin/com/cloudgarden/resource/SWTResourceManager$1.class
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/provirent_hibernate/bin/com/cloudgarden/resource/SWTResourceManager.class
===================================================================
(Binary files differ)


Property changes on: project_src/provirent_hibernate/bin/com/cloudgarden/resource/SWTResourceManager.class
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Modified: project_src/provirent_hibernate/data/video.log
===================================================================
--- project_src/provirent_hibernate/data/video.log	2004-11-02 21:50:03 UTC (rev 82)
+++ project_src/provirent_hibernate/data/video.log	2004-11-03 21:48:01 UTC (rev 83)
@@ -1,2 +1,7 @@
 /*C2*/CONNECT USER SA
 SET AUTOCOMMIT FALSE
+INSERT INTO VIDEOFORMAT VALUES(23,'1:2','super')
+COMMIT
+DELETE FROM VIDEOFORMAT WHERE VIDEOFORMATID=8
+INSERT INTO VIDEOFORMAT VALUES(8,'16:10','test')
+COMMIT

Modified: project_src/provirent_hibernate/data/video.properties
===================================================================
--- project_src/provirent_hibernate/data/video.properties	2004-11-02 21:50:03 UTC (rev 82)
+++ project_src/provirent_hibernate/data/video.properties	2004-11-03 21:48:01 UTC (rev 83)
@@ -1,5 +1,5 @@
 #HSQL database
-#Wed Oct 20 23:34:20 CEST 2004
+#Wed Nov 03 22:40:53 CET 2004
 hsqldb.cache_file_scale=1
 runtime.gc_interval=0
 hsqldb.first_identity=0



From rgriesch at sheep.berlios.de  Wed Nov  3 23:09:41 2004
From: rgriesch at sheep.berlios.de (Remo Griesch at BerliOS)
Date: Wed, 3 Nov 2004 23:09:41 +0100
Subject: [Provirent-svn-commit] r84 - project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui
Message-ID: <200411032209.iA3M9fRY011535@sheep.berlios.de>

Author: rgriesch
Date: 2004-11-03 23:09:40 +0100 (Wed, 03 Nov 2004)
New Revision: 84

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/ManagmentGui.java
Log:


Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/ManagmentGui.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/ManagmentGui.java	2004-11-03 21:48:01 UTC (rev 83)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/ManagmentGui.java	2004-11-03 22:09:40 UTC (rev 84)
@@ -93,12 +93,14 @@
  import de.hsharz.provirent.managment.gui.CompositeFormate;
 /**
  * @author Philipp Schneider
- *  
+ *
  */
 public class ManagmentGui {
     /**
      * Logger for this class
      */
+    private static int test=0;
+
     private static final Logger logger = Logger.getLogger(ManagmentGui.class);
 
     public final static int MODE_VIEW = 0;
@@ -179,7 +181,7 @@
      * Bundle for multilanguage
      */
     private ResourceBundle l;
-    
+
     private Locale locale ;
 
     /**
@@ -214,10 +216,10 @@
             logger.debug("ManagmentGui() Locale: " + Locale.getDefault());
         }
 
-        
+
         locale = Locale.getDefault();
-        
-        
+
+
         l = PropertyResourceBundle.getBundle(
                 "de.hsharz.provirent.managment.gui.language.main", locale);
 
@@ -244,7 +246,7 @@
 
         //init the db, so it saves time later, does that in a new Thread
         initDB();
-        
+
         //init the rest
         initGUI();
         
@@ -447,9 +449,9 @@
         //init the MainComposite
         initMainComposite();
     }
-    
 
 
+
     private void initMainComposite(){
         compositeMain = new Composite(compositeRoot, SWT.EMBEDDED);
         GridLayout composite3Layout = new GridLayout();
@@ -467,11 +469,14 @@
         composite3LData.grabExcessHorizontalSpace = true;
         composite3LData.grabExcessVerticalSpace = true;
         compositeMain.setLayoutData(composite3LData);
-    
+
         //init the MainTabFolder
     }
-    
+
     private void initMainTabFolder() {
+<<<<<<< .mine
+
+=======
         cTabFolderMain = new CTabFolder(compositeMain, SWT.CLOSE);
         //cTabFolderMain.setSelection(null);
         GridData cTabFolder1LData = new GridData();
@@ -481,8 +486,9 @@
         cTabFolder1LData.verticalAlignment = GridData.FILL;
         cTabFolderMain.setLayoutData(cTabFolder1LData);
         
+>>>>>>> .r83
     }
-    
+
     private void initGUI() {
         try {
 
@@ -508,7 +514,191 @@
                 initStatusComposite();
                 initMainTabFolder();
 
+<<<<<<< .mine
+                {
+                    {
+                        cTabFolderMain = new CTabFolder(compositeMain, SWT.CLOSE);
+                        //cTabFolderMain.setSelection(null);
+                        GridData cTabFolder1LData = new GridData();
+                        cTabFolder1LData.grabExcessHorizontalSpace = true;
+                        cTabFolder1LData.horizontalAlignment = GridData.FILL;
+                        cTabFolder1LData.grabExcessVerticalSpace = true;
+                        cTabFolder1LData.verticalAlignment = GridData.FILL;
+                        cTabFolderMain.setLayoutData(cTabFolder1LData);
+                        {
+                            tabItemFormat = new CTabItem(cTabFolderMain, SWT.NONE);
+                            tabItemFormat.setText("Formate");
+                            {
+                                compositeFormate = new CompositeFormate(
+                                    cTabFolderMain,
+                                    SWT.NONE, statusLine, locale);
 
+                                tabItemFormat.setControl(compositeFormate);
+                            }
+                        }
+                        {
+                            cTabItem2 = new CTabItem(cTabFolderMain, SWT.NONE);
+                            cTabItem2.setText("cTabItem2");
+                            {
+                                sashFormDirector = new SashForm(cTabFolderMain,
+                                        SWT.NONE);
+                                cTabItem2.setControl(sashFormDirector);
+                                FormLayout sashFormDirectorLayout = new FormLayout();
+                                sashFormDirector
+                                        .setLayout(sashFormDirectorLayout);
+                                {
+                                    group1Director = new Group(
+                                            sashFormDirector, SWT.NONE);
+                                    GridLayout gridLayout = new GridLayout();
+                                    gridLayout.numColumns = 6;
+                                    group1Director
+                                            .setText("Directors ?bersicht");
+                                    FormData formData = new FormData();
+                                    group1Director.setLayout(gridLayout);
+                                    formData.right = new FormAttachment(100,
+                                            100, -5);
+                                    formData.top = new FormAttachment(0, 100, 5);
+                                    formData.bottom = new FormAttachment(100,
+                                            100, -5);
+                                    group1Director.setLayoutData(formData);
+                                    {
+                                        tableDirector = new Table(
+                                                group1Director, SWT.SINGLE
+                                                        | SWT.FULL_SELECTION
+                                                        | SWT.V_SCROLL
+                                                        | SWT.BORDER);
+                                        tableDirector.setHeaderVisible(true);
+                                        tableDirector.setLinesVisible(true);
+                                        GridData griddata = new GridData();
+                                        tableDirector
+                                                .addSelectionListener(new SelectionAdapter() {
+                                                    public void widgetSelected(
+                                                            SelectionEvent evt) {
+=======
+>>>>>>> .r83
+
+<<<<<<< .mine
+                                                        int index = tableDirector
+                                                                .getSelectionIndex();
+                                                        System.out
+                                                                .println("Table select. id: "
+                                                                        + index
+                                                                        + " TableItem:"
+                                                                        + tableDirector
+                                                                                .getItem(index)
+                                                                        + " id: "
+                                                                        + tableDirector
+                                                                                .getItem(
+                                                                                        index)
+                                                                                .getText(
+                                                                                        0));
+                                                    }
+                                                });
+                                        griddata.verticalAlignment = GridData.FILL;
+                                        griddata.horizontalAlignment = GridData.FILL;
+                                        griddata.horizontalSpan = 6;
+                                        griddata.grabExcessHorizontalSpace = true;
+                                        griddata.grabExcessVerticalSpace = true;
+                                        tableDirector.setLayoutData(griddata);
+                                        {
+                                            tableColumnDirectorId = new TableColumn(
+                                                    tableDirector, SWT.CENTER);
+                                            tableColumnDirectorId.setText("id");
+                                            tableColumnDirectorId.setWidth(100);
+                                        }
+                                        {
+                                            tableColumnDirectorLastname = new TableColumn(
+                                                    tableDirector, SWT.CENTER);
+                                            tableColumnDirectorLastname
+                                                    .setText("Name");
+                                            tableColumnDirectorLastname
+                                                    .setWidth(100);
+
+                                        }
+                                        {
+                                            tableColumnDirectorFirstname = new TableColumn(
+                                                    tableDirector, SWT.CENTER);
+                                            tableColumnDirectorFirstname
+                                                    .setText("Short");
+                                            tableColumnDirectorFirstname
+                                                    .setWidth(100);
+
+                                        }
+                                    }
+                                    {
+                                        filterLabelVideoFormat = new Label(
+                                                group1Director, SWT.NONE);
+                                        filterLabelVideoFormat
+                                                .setText("Suche nach:");
+                                        GridData data1 = new GridData();
+                                        data1.horizontalSpan = 2;
+                                        filterLabelVideoFormat
+                                                .setLayoutData(data1);
+                                    }
+                                    {
+                                        filterTextVideoFormat = new Text(
+                                                group1Director, SWT.BORDER);
+                                        GridData data2 = new GridData();
+
+                                        data2.horizontalAlignment = GridData.FILL;
+                                        data2.horizontalSpan = 4;
+                                        data2.grabExcessHorizontalSpace = true;
+                                        filterTextVideoFormat
+                                                .setLayoutData(data2);
+                                    }
+                                }
+                                {
+                                    group2Director = new Group(
+                                            sashFormDirector, SWT.NONE);
+                                    GridLayout gridLayout = new GridLayout();
+                                    gridLayout.numColumns = 2;
+                                    group2Director.setText("Filmliste");
+                                    FormData formData = new FormData();
+                                    group2Director.setLayout(gridLayout);
+                                    formData.left = new FormAttachment(0, 100,
+                                            5);
+                                    formData.top = new FormAttachment(0, 100, 5);
+                                    formData.bottom = new FormAttachment(100,
+                                            100, -5);
+                                    group2Director.setLayoutData(formData);
+                                    {
+                                        list3 = new List(group2Director,
+                                                SWT.SINGLE | SWT.H_SCROLL
+                                                        | SWT.V_SCROLL
+                                                        | SWT.BORDER);
+                                        GridData list3LData = new GridData();
+                                        list3
+                                                .addSelectionListener(new SelectionAdapter() {
+                                                    public void widgetSelected(
+                                                            SelectionEvent evt) {
+                                                        System.out
+                                                                .println("list1.widgetSelected, event="
+                                                                        + evt);
+
+                                                        //TODO add your code for
+                                                        // list1.widgetSelected
+                                                    }
+                                                });
+                                        list3LData.verticalAlignment = GridData.FILL;
+                                        list3LData.horizontalAlignment = GridData.FILL;
+                                        list3LData.grabExcessHorizontalSpace = true;
+                                        list3LData.grabExcessVerticalSpace = true;
+                                        list3.setLayoutData(list3LData);
+                                    }
+                                }
+                            }
+                        }
+                    }
+                }
+                {
+                    //init the Composite for statusline
+
+                    //compositeFormate.setStatusLine(statusLine);
+
+                }
+            }
+=======
+>>>>>>> .r83
             shell.layout();
         } catch (Exception e) {
             e.printStackTrace();
@@ -557,7 +747,7 @@
 
     /**
      * Sets a message for the Statusline
-     * 
+     *
      * @param mode
      * @param message
      */
@@ -565,7 +755,7 @@
         /**
          * mode values 0 normal message 1 information message 2 warn message 3
          * error message
-         *  
+         *
          */
         if (mode == 0) {
             statusLine.setBackground(ColorDef.STATUS_B_STANDARD);
@@ -585,7 +775,7 @@
 
 		new Thread() {
 			public void run() {
-				
+
 				try {Thread.sleep (1000 *5);} catch (Throwable th) {}
 					if (display.isDisposed()) return;
 					display.asyncExec(new Runnable() {
@@ -594,7 +784,7 @@
 				            statusLine.setForeground(ColorDef.STATUS_F_STANDARD);
 						}
 					});
-				
+
 			}
 		}.start();
 
@@ -606,7 +796,7 @@
      * Hintergrund
      */
     private void initDB(){
-        
+
 		new Thread() {
 			public void run() {
 			    Database.initDB();
@@ -614,7 +804,7 @@
 		}.start();
 
     }
-        
-    
-    
+
+
+
 }
\ No newline at end of file



From rgriesch at sheep.berlios.de  Wed Nov  3 23:10:22 2004
From: rgriesch at sheep.berlios.de (Remo Griesch at BerliOS)
Date: Wed, 3 Nov 2004 23:10:22 +0100
Subject: [Provirent-svn-commit] r85 - project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui
Message-ID: <200411032210.iA3MAMqL011612@sheep.berlios.de>

Author: rgriesch
Date: 2004-11-03 23:10:21 +0100 (Wed, 03 Nov 2004)
New Revision: 85

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/ManagmentGui.java
Log:


Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/ManagmentGui.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/ManagmentGui.java	2004-11-03 22:09:40 UTC (rev 84)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/ManagmentGui.java	2004-11-03 22:10:21 UTC (rev 85)
@@ -99,8 +99,6 @@
     /**
      * Logger for this class
      */
-    private static int test=0;
-
     private static final Logger logger = Logger.getLogger(ManagmentGui.class);
 
     public final static int MODE_VIEW = 0;



From rgriesch at sheep.berlios.de  Wed Nov  3 23:16:26 2004
From: rgriesch at sheep.berlios.de (Remo Griesch at BerliOS)
Date: Wed, 3 Nov 2004 23:16:26 +0100
Subject: [Provirent-svn-commit] r86 - project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui
Message-ID: <200411032216.iA3MGQUn012196@sheep.berlios.de>

Author: rgriesch
Date: 2004-11-03 23:16:25 +0100 (Wed, 03 Nov 2004)
New Revision: 86

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/ManagmentGui.java
Log:


Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/ManagmentGui.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/ManagmentGui.java	2004-11-03 22:10:21 UTC (rev 85)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/ManagmentGui.java	2004-11-03 22:16:25 UTC (rev 86)
@@ -93,7 +93,7 @@
  import de.hsharz.provirent.managment.gui.CompositeFormate;
 /**
  * @author Philipp Schneider
- *
+ *  
  */
 public class ManagmentGui {
     /**
@@ -104,6 +104,7 @@
     public final static int MODE_VIEW = 0;
 
     public final static int MODE_ADD = 1;
+    private CTabItem cTabItem1;
 
     public final static int MODE_EDIT = 2;
 
@@ -179,7 +180,7 @@
      * Bundle for multilanguage
      */
     private ResourceBundle l;
-
+    
     private Locale locale ;
 
     /**
@@ -214,10 +215,10 @@
             logger.debug("ManagmentGui() Locale: " + Locale.getDefault());
         }
 
-
+        
         locale = Locale.getDefault();
-
-
+        
+        
         l = PropertyResourceBundle.getBundle(
                 "de.hsharz.provirent.managment.gui.language.main", locale);
 
@@ -244,7 +245,7 @@
 
         //init the db, so it saves time later, does that in a new Thread
         initDB();
-
+        
         //init the rest
         initGUI();
         
@@ -447,9 +448,9 @@
         //init the MainComposite
         initMainComposite();
     }
+    
 
 
-
     private void initMainComposite(){
         compositeMain = new Composite(compositeRoot, SWT.EMBEDDED);
         GridLayout composite3Layout = new GridLayout();
@@ -467,14 +468,11 @@
         composite3LData.grabExcessHorizontalSpace = true;
         composite3LData.grabExcessVerticalSpace = true;
         compositeMain.setLayoutData(composite3LData);
-
+    
         //init the MainTabFolder
     }
-
+    
     private void initMainTabFolder() {
-<<<<<<< .mine
-
-=======
         cTabFolderMain = new CTabFolder(compositeMain, SWT.CLOSE);
         //cTabFolderMain.setSelection(null);
         GridData cTabFolder1LData = new GridData();
@@ -483,10 +481,13 @@
         cTabFolder1LData.grabExcessVerticalSpace = true;
         cTabFolder1LData.verticalAlignment = GridData.FILL;
         cTabFolderMain.setLayoutData(cTabFolder1LData);
-        
->>>>>>> .r83
-    }
+        {
+            cTabItem1 = new CTabItem(cTabFolderMain, SWT.NONE);
+            cTabItem1.setText("cTabItem1");
+        }
 
+    }
+    
     private void initGUI() {
         try {
 
@@ -512,191 +513,7 @@
                 initStatusComposite();
                 initMainTabFolder();
 
-<<<<<<< .mine
-                {
-                    {
-                        cTabFolderMain = new CTabFolder(compositeMain, SWT.CLOSE);
-                        //cTabFolderMain.setSelection(null);
-                        GridData cTabFolder1LData = new GridData();
-                        cTabFolder1LData.grabExcessHorizontalSpace = true;
-                        cTabFolder1LData.horizontalAlignment = GridData.FILL;
-                        cTabFolder1LData.grabExcessVerticalSpace = true;
-                        cTabFolder1LData.verticalAlignment = GridData.FILL;
-                        cTabFolderMain.setLayoutData(cTabFolder1LData);
-                        {
-                            tabItemFormat = new CTabItem(cTabFolderMain, SWT.NONE);
-                            tabItemFormat.setText("Formate");
-                            {
-                                compositeFormate = new CompositeFormate(
-                                    cTabFolderMain,
-                                    SWT.NONE, statusLine, locale);
 
-                                tabItemFormat.setControl(compositeFormate);
-                            }
-                        }
-                        {
-                            cTabItem2 = new CTabItem(cTabFolderMain, SWT.NONE);
-                            cTabItem2.setText("cTabItem2");
-                            {
-                                sashFormDirector = new SashForm(cTabFolderMain,
-                                        SWT.NONE);
-                                cTabItem2.setControl(sashFormDirector);
-                                FormLayout sashFormDirectorLayout = new FormLayout();
-                                sashFormDirector
-                                        .setLayout(sashFormDirectorLayout);
-                                {
-                                    group1Director = new Group(
-                                            sashFormDirector, SWT.NONE);
-                                    GridLayout gridLayout = new GridLayout();
-                                    gridLayout.numColumns = 6;
-                                    group1Director
-                                            .setText("Directors ?bersicht");
-                                    FormData formData = new FormData();
-                                    group1Director.setLayout(gridLayout);
-                                    formData.right = new FormAttachment(100,
-                                            100, -5);
-                                    formData.top = new FormAttachment(0, 100, 5);
-                                    formData.bottom = new FormAttachment(100,
-                                            100, -5);
-                                    group1Director.setLayoutData(formData);
-                                    {
-                                        tableDirector = new Table(
-                                                group1Director, SWT.SINGLE
-                                                        | SWT.FULL_SELECTION
-                                                        | SWT.V_SCROLL
-                                                        | SWT.BORDER);
-                                        tableDirector.setHeaderVisible(true);
-                                        tableDirector.setLinesVisible(true);
-                                        GridData griddata = new GridData();
-                                        tableDirector
-                                                .addSelectionListener(new SelectionAdapter() {
-                                                    public void widgetSelected(
-                                                            SelectionEvent evt) {
-=======
->>>>>>> .r83
-
-<<<<<<< .mine
-                                                        int index = tableDirector
-                                                                .getSelectionIndex();
-                                                        System.out
-                                                                .println("Table select. id: "
-                                                                        + index
-                                                                        + " TableItem:"
-                                                                        + tableDirector
-                                                                                .getItem(index)
-                                                                        + " id: "
-                                                                        + tableDirector
-                                                                                .getItem(
-                                                                                        index)
-                                                                                .getText(
-                                                                                        0));
-                                                    }
-                                                });
-                                        griddata.verticalAlignment = GridData.FILL;
-                                        griddata.horizontalAlignment = GridData.FILL;
-                                        griddata.horizontalSpan = 6;
-                                        griddata.grabExcessHorizontalSpace = true;
-                                        griddata.grabExcessVerticalSpace = true;
-                                        tableDirector.setLayoutData(griddata);
-                                        {
-                                            tableColumnDirectorId = new TableColumn(
-                                                    tableDirector, SWT.CENTER);
-                                            tableColumnDirectorId.setText("id");
-                                            tableColumnDirectorId.setWidth(100);
-                                        }
-                                        {
-                                            tableColumnDirectorLastname = new TableColumn(
-                                                    tableDirector, SWT.CENTER);
-                                            tableColumnDirectorLastname
-                                                    .setText("Name");
-                                            tableColumnDirectorLastname
-                                                    .setWidth(100);
-
-                                        }
-                                        {
-                                            tableColumnDirectorFirstname = new TableColumn(
-                                                    tableDirector, SWT.CENTER);
-                                            tableColumnDirectorFirstname
-                                                    .setText("Short");
-                                            tableColumnDirectorFirstname
-                                                    .setWidth(100);
-
-                                        }
-                                    }
-                                    {
-                                        filterLabelVideoFormat = new Label(
-                                                group1Director, SWT.NONE);
-                                        filterLabelVideoFormat
-                                                .setText("Suche nach:");
-                                        GridData data1 = new GridData();
-                                        data1.horizontalSpan = 2;
-                                        filterLabelVideoFormat
-                                                .setLayoutData(data1);
-                                    }
-                                    {
-                                        filterTextVideoFormat = new Text(
-                                                group1Director, SWT.BORDER);
-                                        GridData data2 = new GridData();
-
-                                        data2.horizontalAlignment = GridData.FILL;
-                                        data2.horizontalSpan = 4;
-                                        data2.grabExcessHorizontalSpace = true;
-                                        filterTextVideoFormat
-                                                .setLayoutData(data2);
-                                    }
-                                }
-                                {
-                                    group2Director = new Group(
-                                            sashFormDirector, SWT.NONE);
-                                    GridLayout gridLayout = new GridLayout();
-                                    gridLayout.numColumns = 2;
-                                    group2Director.setText("Filmliste");
-                                    FormData formData = new FormData();
-                                    group2Director.setLayout(gridLayout);
-                                    formData.left = new FormAttachment(0, 100,
-                                            5);
-                                    formData.top = new FormAttachment(0, 100, 5);
-                                    formData.bottom = new FormAttachment(100,
-                                            100, -5);
-                                    group2Director.setLayoutData(formData);
-                                    {
-                                        list3 = new List(group2Director,
-                                                SWT.SINGLE | SWT.H_SCROLL
-                                                        | SWT.V_SCROLL
-                                                        | SWT.BORDER);
-                                        GridData list3LData = new GridData();
-                                        list3
-                                                .addSelectionListener(new SelectionAdapter() {
-                                                    public void widgetSelected(
-                                                            SelectionEvent evt) {
-                                                        System.out
-                                                                .println("list1.widgetSelected, event="
-                                                                        + evt);
-
-                                                        //TODO add your code for
-                                                        // list1.widgetSelected
-                                                    }
-                                                });
-                                        list3LData.verticalAlignment = GridData.FILL;
-                                        list3LData.horizontalAlignment = GridData.FILL;
-                                        list3LData.grabExcessHorizontalSpace = true;
-                                        list3LData.grabExcessVerticalSpace = true;
-                                        list3.setLayoutData(list3LData);
-                                    }
-                                }
-                            }
-                        }
-                    }
-                }
-                {
-                    //init the Composite for statusline
-
-                    //compositeFormate.setStatusLine(statusLine);
-
-                }
-            }
-=======
->>>>>>> .r83
             shell.layout();
         } catch (Exception e) {
             e.printStackTrace();
@@ -745,7 +562,7 @@
 
     /**
      * Sets a message for the Statusline
-     *
+     * 
      * @param mode
      * @param message
      */
@@ -753,7 +570,7 @@
         /**
          * mode values 0 normal message 1 information message 2 warn message 3
          * error message
-         *
+         *  
          */
         if (mode == 0) {
             statusLine.setBackground(ColorDef.STATUS_B_STANDARD);
@@ -773,7 +590,7 @@
 
 		new Thread() {
 			public void run() {
-
+				
 				try {Thread.sleep (1000 *5);} catch (Throwable th) {}
 					if (display.isDisposed()) return;
 					display.asyncExec(new Runnable() {
@@ -782,7 +599,7 @@
 				            statusLine.setForeground(ColorDef.STATUS_F_STANDARD);
 						}
 					});
-
+				
 			}
 		}.start();
 
@@ -794,7 +611,7 @@
      * Hintergrund
      */
     private void initDB(){
-
+        
 		new Thread() {
 			public void run() {
 			    Database.initDB();
@@ -802,7 +619,7 @@
 		}.start();
 
     }
-
-
-
+        
+    
+    
 }
\ No newline at end of file



From rgriesch at sheep.berlios.de  Wed Nov  3 23:33:44 2004
From: rgriesch at sheep.berlios.de (Remo Griesch at BerliOS)
Date: Wed, 3 Nov 2004 23:33:44 +0100
Subject: [Provirent-svn-commit] r87 - project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui
Message-ID: <200411032233.iA3MXiHP013169@sheep.berlios.de>

Author: rgriesch
Date: 2004-11-03 23:33:43 +0100 (Wed, 03 Nov 2004)
New Revision: 87

Removed:
   project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/ManagmentGui.java
Log:


Deleted: project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/ManagmentGui.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/ManagmentGui.java	2004-11-03 22:16:25 UTC (rev 86)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/ManagmentGui.java	2004-11-03 22:33:43 UTC (rev 87)
@@ -1,625 +0,0 @@
-/*
- * Created on 11.10.2004
- *
- * Copyright (c) 2004/2005, Remo Griesch/Stefan Forstner/Philipp Schneider
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met:
- *
- * - Redistributions of source code must retain the above copyright notice,
- * this list of conditions and the following disclaimer.
- * - Redistributions in binary form must reproduce the above copyright notice,
- * this list of conditions and the following disclaimer in the documentation
- * and/or other materials provided with the distribution.
- * - Neither the name of the Remo Griesch/Stefan Forstner/Philipp Schneider nor
- * the names of its contributors may be used to endorse or promote products
- * derived from this software without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
- * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
- * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
- * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
- * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
- * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
- * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- * POSSIBILITY OF SUCH DAMAGE.
- *
- */
-
-package de.hsharz.provirent.managment.gui;
-
-
-import java.util.Locale;
-import java.util.PropertyResourceBundle;
-import java.util.ResourceBundle;
-
-import org.apache.log4j.Logger;
-import org.eclipse.swt.SWT;
-import org.eclipse.swt.custom.CTabFolder;
-import org.eclipse.swt.custom.CTabItem;
-import org.eclipse.swt.custom.SashForm;
-import org.eclipse.swt.custom.StyledText;
-import org.eclipse.swt.events.FocusAdapter;
-import org.eclipse.swt.events.FocusEvent;
-import org.eclipse.swt.events.SelectionAdapter;
-import org.eclipse.swt.events.SelectionEvent;
-import org.eclipse.swt.layout.FillLayout;
-import org.eclipse.swt.layout.FormAttachment;
-import org.eclipse.swt.layout.FormData;
-import org.eclipse.swt.layout.FormLayout;
-import org.eclipse.swt.layout.GridData;
-import org.eclipse.swt.layout.GridLayout;
-import org.eclipse.swt.widgets.Button;
-import org.eclipse.swt.widgets.Composite;
-import org.eclipse.swt.widgets.Display;
-import org.eclipse.swt.widgets.Event;
-import org.eclipse.swt.widgets.Group;
-import org.eclipse.swt.widgets.Label;
-import org.eclipse.swt.widgets.List;
-import org.eclipse.swt.widgets.Listener;
-import org.eclipse.swt.widgets.Menu;
-import org.eclipse.swt.widgets.MenuItem;
-import org.eclipse.swt.widgets.Shell;
-import org.eclipse.swt.widgets.Table;
-import org.eclipse.swt.widgets.TableColumn;
-import org.eclipse.swt.widgets.TableItem;
-import org.eclipse.swt.widgets.Text;
-
-import com.cloudgarden.resource.SWTResourceManager;
-
-import de.hsharz.provirent.managment.exceptions.GuiInitException;
-import de.hsharz.provirent.objects.VideoFormat;
-import de.hsharz.provirent.persistence.Database;
-
-/**
- * This code was generated using CloudGarden's Jigloo
- * SWT/Swing GUI Builder, which is free for non-commercial
- * use. If Jigloo is being used commercially (ie, by a corporation,
- * company or business for any purpose whatever) then you
- * should purchase a license for each developer using Jigloo.
- * Please visit www.cloudgarden.com for details.
- * Use of Jigloo implies acceptance of these licensing terms.
- * *************************************
- * A COMMERCIAL LICENSE HAS NOT BEEN PURCHASED
- * for this machine, so Jigloo or this code cannot be used legally
- * for any corporate or commercial purpose.
- * *************************************
- */
- import de.hsharz.provirent.managment.gui.CompositeFormate;
-/**
- * @author Philipp Schneider
- *  
- */
-public class ManagmentGui {
-    /**
-     * Logger for this class
-     */
-    private static final Logger logger = Logger.getLogger(ManagmentGui.class);
-
-    public final static int MODE_VIEW = 0;
-
-    public final static int MODE_ADD = 1;
-    private CTabItem cTabItem1;
-
-    public final static int MODE_EDIT = 2;
-
-    private int mode_VideoFormat = 0;
-
-    private int mode_AudioFormat = 0;
-
-    private static final int MAIN_WINDOW_WIDTH = 700;
-
-    private static final int MAIN_WINDOW_HEIGHT = 500;
-
-    private CTabFolder cTabFolderMain;
-
-    private CTabItem tabItemFormat;
-
-    private CompositeFormate compositeFormate;
-
-    private MenuItem aboutMenuItem;
-
-    private MenuItem contentsMenuItem;
-
-    private Menu helpMenu;
-
-    private MenuItem helpMenuItem;
-
-    private MenuItem viewDirectorMenuItem;
-
-    private Shell shell;
-
-    private Display display;
-
-    private MenuItem viewFormatMenuItem,viewActorMenuItem,viewGenreMenuItem;
-    private MenuItem viewSubtitleMenuItem,viewLanguageMenuItem,viewStatusMenuItem;
-    private MenuItem viewConditionMenuItem,viewMovieMenuItem,viewDvdMenuItem, viewBillMenuItem;
-
-    private Menu viewMenu;
-
-    private MenuItem viewMenuItem;
-
-    private MenuItem exitMenuItem;
-
-    private MenuItem closeFileMenuItem;
-
-    private MenuItem saveFileMenuItem;
-
-    private MenuItem newFileMenuItem;
-
-    private MenuItem openFileMenuItem;
-
-    private Menu fileMenu;
-
-    private MenuItem fileMenuItem;
-
-    private Menu rootMenu;
-
-    private TableColumn tableColumn6;
-
-    private TableColumn tableColumn5;
-
-    private TableColumn tableColumn4;
-
-    private StatusLineStyledText statusLine;
-
-    private Composite compositeStatusLine;
-
-    private Composite compositeMain;
-
-    private Composite compositeRoot;
-
-    private Text textVideoFormatId;
-
-    /**
-     * Bundle for multilanguage
-     */
-    private ResourceBundle l;
-    
-    private Locale locale ;
-
-    /**
-     * Auto-generated main method to display this
-     * org.eclipse.swt.widgets.Composite inside a new Shell.
-     */
-    public static void main(String[] args) {
-        ManagmentGui inst = new ManagmentGui();
-        inst.showGUI();
-        inst.run();
-    }
-
-    /**
-     * Auto-generated method to display this org.eclipse.swt.widgets.Composite
-     * inside a new Shell.
-     */
-    public void showGUI() {
-
-    }
-
-    public void run() {
-        shell.open();
-        while (!shell.isDisposed()) {
-            if (!display.readAndDispatch())
-                display.sleep();
-        }
-    }
-
-    public ManagmentGui() {
-
-        if (logger.isDebugEnabled()) {
-            logger.debug("ManagmentGui() Locale: " + Locale.getDefault());
-        }
-
-        
-        locale = Locale.getDefault();
-        
-        
-        l = PropertyResourceBundle.getBundle(
-                "de.hsharz.provirent.managment.gui.language.main", locale);
-
-        //hier muss noch was gemacht werden
-        if (l == null) {
-            System.exit(-1586);
-        }
-
-        display = Display.getDefault();
-
-        shell = new Shell(display);
-        shell.setText(l.getString("mainwindow.title"));
-
-        {
-            //Register as a resource user - SWTResourceManager will
-            //handle the obtaining and disposing of resources
-            SWTResourceManager.registerResourceUser(shell);
-        }
-
-        //shell.setLayout(new FormLayout());
-        shell.setLayout(new FillLayout());
-
-        shell.layout();
-
-        //init the db, so it saves time later, does that in a new Thread
-        initDB();
-        
-        //init the rest
-        initGUI();
-        
-        //initMainTabFolder
-        initMainTabFolder();
-
-    }
-
-    /**
-     *  init the File menu
-     */
-    private void initFileMenu() {
-        if (rootMenu == null) {
-            return;
-            /**
-             * @todo hier muesste eigentlich eine Exception geworfen werden, da
-             *       null nich ein darf
-             */
-        }
-        fileMenuItem = new MenuItem(rootMenu, SWT.CASCADE);
-        fileMenuItem.setText(l.getString("menue.file"));
-        fileMenu = new Menu(fileMenuItem);
-        fileMenuItem.setMenu(fileMenu);
-
-        openFileMenuItem = new MenuItem(fileMenu, SWT.CASCADE);
-        openFileMenuItem.setText(l.getString("menue.file.open"));
-
-        newFileMenuItem = new MenuItem(fileMenu, SWT.CASCADE);
-        newFileMenuItem.setText(l.getString("menue.file.new"));
-
-        saveFileMenuItem = new MenuItem(fileMenu, SWT.CASCADE);
-        saveFileMenuItem.setText(l.getString("menue.file.save"));
-
-        closeFileMenuItem = new MenuItem(fileMenu, SWT.CASCADE);
-        closeFileMenuItem.setText(l.getString("menue.file.close"));
-
-        exitMenuItem = new MenuItem(fileMenu, SWT.CASCADE);
-        exitMenuItem.setText(l.getString("menue.file.exit"));
-
-    }
-
-    /**
-     * init the View Menu
-     */
-    private void initViewMenu() {
-        if (rootMenu == null) {
-            return;
-            /**
-             * @todo hier muesste eigentlich eine Exception geworfen werden, da
-             *       null nich ein darf
-             */
-        }
-
-        viewMenuItem = new MenuItem(rootMenu, SWT.CASCADE);
-        viewMenuItem.setText(l.getString("menue.view"));
-
-        viewMenu = new Menu(viewMenuItem);
-        viewMenuItem.setMenu(viewMenu);
-
-        viewFormatMenuItem = new MenuItem(viewMenu, SWT.CHECK);
-        viewFormatMenuItem.setText(l.getString("menue.view.format"));
-        viewFormatMenuItem.setSelection(false);
-        viewFormatMenuItem.addSelectionListener(new SelectionAdapter() {
-            public void widgetSelected(SelectionEvent evt) {
-                System.out
-                        .println("viewFormatMenuItem.widgetSelected, event="
-                                + evt);
-                
-                if(tabItemFormat != null && !tabItemFormat.isDisposed()) {
-                    //cTabFolderMain.forceFocus();
-                    //cTabFolderMain.setSelection(tabItemFormat);
-                    tabItemFormat.dispose();
-                    return;
-                }
-                
-                if(tabItemFormat == null){
-                    initFormatTab();
-                    cTabFolderMain.setSelection(tabItemFormat);
-                    return;
-                }
-                
-                if(tabItemFormat.isDisposed()){
-                    initFormatTab();
-                    cTabFolderMain.setSelection(tabItemFormat);
-                }
-                //setStatus(3, "Fehler aufgetreten");
-
-                // viewVideoFormatMenuItem.widgetSelected
-            }
-        });
-
-        viewDirectorMenuItem = new MenuItem(viewMenu, SWT.CHECK);
-        viewDirectorMenuItem.setText(l.getString("menue.view.director"));
-        viewDirectorMenuItem.setSelection(false);
-
-        viewActorMenuItem = new MenuItem(viewMenu, SWT.CHECK);
-        viewActorMenuItem.setText(l.getString("menue.view.actor"));
-        viewActorMenuItem.setSelection(false);
-        
-        viewGenreMenuItem = new MenuItem(viewMenu, SWT.CHECK);
-        viewGenreMenuItem.setText(l.getString("menue.view.genre"));
-        viewActorMenuItem.setSelection(false);
-
-        viewSubtitleMenuItem = new MenuItem(viewMenu, SWT.CHECK);
-        viewSubtitleMenuItem.setText(l.getString("menue.view.subtitle"));
-        viewSubtitleMenuItem.setSelection(false);
-        
-        viewLanguageMenuItem = new MenuItem(viewMenu, SWT.CHECK);
-        viewLanguageMenuItem.setText(l.getString("menue.view.language"));
-        viewLanguageMenuItem.setSelection(false);
-
-        viewStatusMenuItem = new MenuItem(viewMenu, SWT.CHECK);
-        viewStatusMenuItem.setText(l.getString("menue.view.status"));
-        viewStatusMenuItem.setSelection(false);
-
-        viewConditionMenuItem = new MenuItem(viewMenu, SWT.CHECK);
-        viewConditionMenuItem.setText(l.getString("menue.view.condition"));
-        viewConditionMenuItem.setSelection(false);
-
-        viewMovieMenuItem = new MenuItem(viewMenu, SWT.CHECK);
-        viewMovieMenuItem.setText(l.getString("menue.view.movie"));
-        viewMovieMenuItem.setSelection(false);
-
-        viewDvdMenuItem = new MenuItem(viewMenu, SWT.CHECK);
-        viewDvdMenuItem.setText(l.getString("menue.view.dvd"));
-        viewDvdMenuItem.setSelection(false);
-
-        viewBillMenuItem = new MenuItem(viewMenu, SWT.CHECK);
-        viewBillMenuItem.setText(l.getString("menue.view.bill"));
-        viewBillMenuItem.setSelection(false);
-
-        
-    }
-
-    
-    private void initFormatTab() {
-        tabItemFormat = new CTabItem(cTabFolderMain, SWT.NONE);
-        tabItemFormat.setText(l.getString("tab.format.title"));
-        {
-            compositeFormate = new CompositeFormate(
-                cTabFolderMain,
-                SWT.NONE, statusLine, locale);
-            
-            tabItemFormat.setControl(compositeFormate);
-        }
-    }
-    
-    private void initDirectorTab() {
-        tabItemFormat = new CTabItem(cTabFolderMain, SWT.NONE);
-        tabItemFormat.setText(l.getString("tab.director.title"));
-        {
-            compositeFormate = new CompositeFormate(
-                cTabFolderMain,
-                SWT.NONE, statusLine, locale);
-            
-            tabItemFormat.setControl(compositeFormate);
-        }
-    }    
-    
-    
-    /**
-     * init the help menu
-     */
-    private void initHelpMenu() {
-        if (rootMenu == null) {
-            throw new GuiInitException();
-        }
-        helpMenuItem = new MenuItem(rootMenu, SWT.CASCADE);
-        {
-            helpMenu = new Menu(helpMenuItem);
-            helpMenuItem.setMenu(helpMenu);
-            {
-                contentsMenuItem = new MenuItem(helpMenu, SWT.CASCADE);
-            }
-            {
-                aboutMenuItem = new MenuItem(helpMenu, SWT.CASCADE);
-            }
-        }
-
-    }
-
-    private void initRootComposite() {
-
-        //set up the root composite incl. layout
-        compositeRoot = new Composite(shell, SWT.NONE);
-        GridLayout composite1Layout = new GridLayout();
-        composite1Layout.marginWidth = 0;
-        composite1Layout.marginHeight = 0;
-        composite1Layout.horizontalSpacing = 0;
-        composite1Layout.verticalSpacing = 0;
-        GridData composite1LData = new GridData();
-        compositeRoot.setLayout(composite1Layout);
-
-        composite1LData.verticalAlignment = GridData.FILL;
-        composite1LData.horizontalAlignment = GridData.FILL;
-        composite1LData.grabExcessHorizontalSpace = true;
-        composite1LData.grabExcessVerticalSpace = true;
-        compositeRoot.setLayoutData(composite1LData);
-
-        //init the MainComposite
-        initMainComposite();
-    }
-    
-
-
-    private void initMainComposite(){
-        compositeMain = new Composite(compositeRoot, SWT.EMBEDDED);
-        GridLayout composite3Layout = new GridLayout();
-        composite3Layout.makeColumnsEqualWidth = true;
-        composite3Layout.horizontalSpacing = 0;
-        composite3Layout.marginHeight = 0;
-        composite3Layout.marginWidth = 0;
-        composite3Layout.verticalSpacing = 0;
-        GridData composite3LData = new GridData();
-        compositeMain.setLayout(composite3Layout);
-        compositeMain.setForeground(SWTResourceManager.getColor(0,
-                255, 0));
-        composite3LData.verticalAlignment = GridData.FILL;
-        composite3LData.horizontalAlignment = GridData.FILL;
-        composite3LData.grabExcessHorizontalSpace = true;
-        composite3LData.grabExcessVerticalSpace = true;
-        compositeMain.setLayoutData(composite3LData);
-    
-        //init the MainTabFolder
-    }
-    
-    private void initMainTabFolder() {
-        cTabFolderMain = new CTabFolder(compositeMain, SWT.CLOSE);
-        //cTabFolderMain.setSelection(null);
-        GridData cTabFolder1LData = new GridData();
-        cTabFolder1LData.grabExcessHorizontalSpace = true;
-        cTabFolder1LData.horizontalAlignment = GridData.FILL;
-        cTabFolder1LData.grabExcessVerticalSpace = true;
-        cTabFolder1LData.verticalAlignment = GridData.FILL;
-        cTabFolderMain.setLayoutData(cTabFolder1LData);
-        {
-            cTabItem1 = new CTabItem(cTabFolderMain, SWT.NONE);
-            cTabItem1.setText("cTabItem1");
-        }
-
-    }
-    
-    private void initGUI() {
-        try {
-
-            //set't the menu
-            rootMenu = new Menu(shell, SWT.BAR);
-            shell.setMenuBar(rootMenu);
-
-            //init the other menu's
-            initFileMenu();
-            initViewMenu();
-            initHelpMenu();
-
-            //set the layout for the shell
-            FillLayout thisLayout = new FillLayout(SWT.HORIZONTAL);
-            shell.setLayout(thisLayout);
-
-            //set the Site
-            shell.setSize(MAIN_WINDOW_WIDTH, MAIN_WINDOW_HEIGHT);
-
-                //the root composite
-                //this init's the maincomposite
-                initRootComposite();
-                initStatusComposite();
-                initMainTabFolder();
-
-
-            shell.layout();
-        } catch (Exception e) {
-            e.printStackTrace();
-        }
-    }
-
-
-
-
-    private void initStatusComposite() {
-        compositeStatusLine = new Composite(compositeRoot, SWT.EMBEDDED);
-        GridLayout composite2Layout = new GridLayout();
-        composite2Layout.marginWidth = 0;
-        composite2Layout.marginHeight = 0;
-        composite2Layout.makeColumnsEqualWidth = true;
-        composite2Layout.horizontalSpacing = 0;
-        composite2Layout.verticalSpacing = 0;
-        GridData composite2LData = new GridData();
-        compositeStatusLine.setLayout(composite2Layout);
-        composite2LData.horizontalAlignment = GridData.FILL;
-        composite2LData.heightHint = 14;
-        composite2LData.grabExcessHorizontalSpace = true;
-        compositeStatusLine.setLayoutData(composite2LData);
-
-        //Statusline
-        initStatusLine();
-
-    }
-
-    private void initStatusLine() {
-        statusLine = new StatusLineStyledText(compositeStatusLine, SWT.READ_ONLY);
-        statusLine.setText("");
-        statusLine
-                .setToolTipText("Hier finden Sie wichtige Statusinformationen");
-        statusLine.setBackground(ColorDef.STATUS_B_STANDARD);
-        statusLine.setForeground(ColorDef.STATUS_F_STANDARD);
-        statusLine.setDoubleClickEnabled(false);
-        statusLine.setEditable(false);
-        statusLine.setEnabled(true);
-        GridData styledText1LData = new GridData();
-
-        styledText1LData.horizontalAlignment = GridData.FILL;
-        styledText1LData.grabExcessHorizontalSpace = true;
-        statusLine.setLayoutData(styledText1LData);
-    }
-
-    /**
-     * Sets a message for the Statusline
-     * 
-     * @param mode
-     * @param message
-     */
-    private void setStatus(final int mode, final String message) {
-        /**
-         * mode values 0 normal message 1 information message 2 warn message 3
-         * error message
-         *  
-         */
-        if (mode == 0) {
-            statusLine.setBackground(ColorDef.STATUS_B_STANDARD);
-            statusLine.setForeground(ColorDef.STATUS_F_STANDARD);
-        } else if (mode == 1) {
-            statusLine.setBackground(ColorDef.STATUS_B_INFO);
-            statusLine.setForeground(ColorDef.STATUS_F_INFO);
-        } else if (mode == 2) {
-            statusLine.setBackground(ColorDef.STATUS_B_WARN);
-            statusLine.setForeground(ColorDef.STATUS_F_WARN);
-        } else if (mode == 3) {
-            statusLine.setBackground(ColorDef.STATUS_B_ERROR);
-            statusLine.setForeground(ColorDef.STATUS_F_ERROR);
-        }
-
-        statusLine.setText(message);
-
-		new Thread() {
-			public void run() {
-				
-				try {Thread.sleep (1000 *5);} catch (Throwable th) {}
-					if (display.isDisposed()) return;
-					display.asyncExec(new Runnable() {
-						public void run() {
-				            statusLine.setBackground(ColorDef.STATUS_B_STANDARD);
-				            statusLine.setForeground(ColorDef.STATUS_F_STANDARD);
-						}
-					});
-				
-			}
-		}.start();
-
-    }
-
-    /**
-     * Ruft die DB zum erstmal auf
-     * da dies viel Zeit dauert(beim ersten mal) geschieht dies im
-     * Hintergrund
-     */
-    private void initDB(){
-        
-		new Thread() {
-			public void run() {
-			    Database.initDB();
-			}
-		}.start();
-
-    }
-        
-    
-    
-}
\ No newline at end of file



From rgriesch at sheep.berlios.de  Wed Nov  3 23:39:12 2004
From: rgriesch at sheep.berlios.de (Remo Griesch at BerliOS)
Date: Wed, 3 Nov 2004 23:39:12 +0100
Subject: [Provirent-svn-commit] r88 - project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui
Message-ID: <200411032239.iA3MdCvf013489@sheep.berlios.de>

Author: rgriesch
Date: 2004-11-03 23:39:11 +0100 (Wed, 03 Nov 2004)
New Revision: 88

Added:
   project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/ManagmentGui.java
Log:
Das d?\195?\188rfte reichen

Added: project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/ManagmentGui.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/ManagmentGui.java	2004-11-03 22:33:43 UTC (rev 87)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/ManagmentGui.java	2004-11-03 22:39:11 UTC (rev 88)
@@ -0,0 +1,719 @@
+/*
+ * Created on 11.10.2004
+ *
+ * Copyright (c) 2004/2005, Remo Griesch/Stefan Forstner/Philipp Schneider
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * - Redistributions of source code must retain the above copyright notice,
+ * this list of conditions and the following disclaimer.
+ * - Redistributions in binary form must reproduce the above copyright notice,
+ * this list of conditions and the following disclaimer in the documentation
+ * and/or other materials provided with the distribution.
+ * - Neither the name of the Remo Griesch/Stefan Forstner/Philipp Schneider nor
+ * the names of its contributors may be used to endorse or promote products
+ * derived from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+package de.hsharz.provirent.managment.gui;
+
+
+import java.util.Locale;
+import java.util.PropertyResourceBundle;
+import java.util.ResourceBundle;
+
+import org.apache.log4j.Logger;
+import org.eclipse.swt.SWT;
+import org.eclipse.swt.custom.CTabFolder;
+import org.eclipse.swt.custom.CTabItem;
+import org.eclipse.swt.custom.SashForm;
+import org.eclipse.swt.custom.StyledText;
+import org.eclipse.swt.events.FocusAdapter;
+import org.eclipse.swt.events.FocusEvent;
+import org.eclipse.swt.events.SelectionAdapter;
+import org.eclipse.swt.events.SelectionEvent;
+import org.eclipse.swt.layout.FillLayout;
+import org.eclipse.swt.layout.FormAttachment;
+import org.eclipse.swt.layout.FormData;
+import org.eclipse.swt.layout.FormLayout;
+import org.eclipse.swt.layout.GridData;
+import org.eclipse.swt.layout.GridLayout;
+import org.eclipse.swt.widgets.Button;
+import org.eclipse.swt.widgets.Composite;
+import org.eclipse.swt.widgets.Display;
+import org.eclipse.swt.widgets.Event;
+import org.eclipse.swt.widgets.Group;
+import org.eclipse.swt.widgets.Label;
+import org.eclipse.swt.widgets.List;
+import org.eclipse.swt.widgets.Listener;
+import org.eclipse.swt.widgets.Menu;
+import org.eclipse.swt.widgets.MenuItem;
+import org.eclipse.swt.widgets.Shell;
+import org.eclipse.swt.widgets.Table;
+import org.eclipse.swt.widgets.TableColumn;
+import org.eclipse.swt.widgets.TableItem;
+import org.eclipse.swt.widgets.Text;
+
+import com.cloudgarden.resource.SWTResourceManager;
+
+import de.hsharz.provirent.managment.exceptions.GuiInitException;
+import de.hsharz.provirent.objects.VideoFormat;
+import de.hsharz.provirent.persistence.Database;
+
+/**
+ * This code was generated using CloudGarden's Jigloo
+ * SWT/Swing GUI Builder, which is free for non-commercial
+ * use. If Jigloo is being used commercially (ie, by a corporation,
+ * company or business for any purpose whatever) then you
+ * should purchase a license for each developer using Jigloo.
+ * Please visit www.cloudgarden.com for details.
+ * Use of Jigloo implies acceptance of these licensing terms.
+ * *************************************
+ * A COMMERCIAL LICENSE HAS NOT BEEN PURCHASED
+ * for this machine, so Jigloo or this code cannot be used legally
+ * for any corporate or commercial purpose.
+ * *************************************
+ */
+ import de.hsharz.provirent.managment.gui.CompositeFormate;
+/**
+ * @author Philipp Schneider
+ *  
+ */
+public class ManagmentGui {
+    /**
+     * Logger for this class
+     */
+    private static final Logger logger = Logger.getLogger(ManagmentGui.class);
+
+    public final static int MODE_VIEW = 0;
+
+    public final static int MODE_ADD = 1;
+
+    public final static int MODE_EDIT = 2;
+
+    private int mode_VideoFormat = 0;
+
+    private int mode_AudioFormat = 0;
+
+    private static final int MAIN_WINDOW_WIDTH = 700;
+
+    private static final int MAIN_WINDOW_HEIGHT = 500;
+
+    private CTabFolder cTabFolderMain;
+
+    private CTabItem tabItemFormat;
+
+    private List list3;
+
+    private Group group2Director;
+
+    private Text filterTextVideoFormat;
+
+    private Label filterLabelVideoFormat;
+
+    private TableColumn tableColumnDirectorFirstname;
+
+    private TableColumn tableColumnDirectorLastname;
+
+    private TableColumn tableColumnDirectorId;
+    private CompositeFormate compositeFormate;
+
+    private MenuItem aboutMenuItem;
+
+    private MenuItem contentsMenuItem;
+
+    private Menu helpMenu;
+
+    private MenuItem helpMenuItem;
+
+    private MenuItem viewDirectorMenuItem;
+
+    private Table tableDirector;
+
+    private Group group1Director;
+
+    private SashForm sashFormDirector;
+
+    private CTabItem cTabItem2;
+
+    private Shell shell;
+
+    private Display display;
+
+    private MenuItem viewVideoFormatMenuItem;
+
+    private Menu viewMenu;
+
+    private MenuItem viewMenuItem;
+
+    private MenuItem exitMenuItem;
+
+    private MenuItem closeFileMenuItem;
+
+    private MenuItem saveFileMenuItem;
+
+    private MenuItem newFileMenuItem;
+
+    private MenuItem openFileMenuItem;
+
+    private Menu fileMenu;
+
+    private MenuItem fileMenuItem;
+
+    private Menu rootMenu;
+
+    private TableColumn tableColumn6;
+
+    private TableColumn tableColumn5;
+
+    private TableColumn tableColumn4;
+
+    private StatusLineStyledText statusLine;
+
+    private Composite compositeStatusLine;
+
+    private Composite compositeMain;
+
+    private Composite compositeRoot;
+
+    private Text textVideoFormatId;
+
+    /**
+     * Bundle for multilanguage
+     */
+    private ResourceBundle l;
+    
+    private Locale locale ;
+
+    /**
+     * Auto-generated main method to display this
+     * org.eclipse.swt.widgets.Composite inside a new Shell.
+     */
+    public static void main(String[] args) {
+        ManagmentGui inst = new ManagmentGui();
+        inst.showGUI();
+        inst.run();
+    }
+
+    /**
+     * Auto-generated method to display this org.eclipse.swt.widgets.Composite
+     * inside a new Shell.
+     */
+    public void showGUI() {
+
+    }
+
+    public void run() {
+        shell.open();
+        while (!shell.isDisposed()) {
+            if (!display.readAndDispatch())
+                display.sleep();
+        }
+    }
+
+    public ManagmentGui() {
+
+        if (logger.isDebugEnabled()) {
+            logger.debug("ManagmentGui() Locale: " + Locale.getDefault());
+        }
+
+        
+        locale = Locale.getDefault();
+        
+        
+        l = PropertyResourceBundle.getBundle(
+                "de.hsharz.provirent.managment.gui.language", locale);
+
+        //hier muss noch was gemacht werden
+        if (l == null) {
+            System.exit(-1586);
+        }
+
+        display = Display.getDefault();
+
+        shell = new Shell(display);
+        shell.setText(l.getString("mainwindow.title"));
+
+        {
+            //Register as a resource user - SWTResourceManager will
+            //handle the obtaining and disposing of resources
+            SWTResourceManager.registerResourceUser(shell);
+        }
+
+        //shell.setLayout(new FormLayout());
+        shell.setLayout(new FillLayout());
+
+        shell.layout();
+
+        //init the db, so it saves time later
+        //does that in a new Thread
+        initDB();
+        
+        //init the rest
+        initGUI();
+
+    }
+
+    /**
+     *  init the File menu
+     */
+    private void initFileMenu() {
+        if (rootMenu == null) {
+            return;
+            /**
+             * @todo hier muesste eigentlich eine Exception geworfen werden, da
+             *       null nich ein darf
+             */
+        }
+        fileMenuItem = new MenuItem(rootMenu, SWT.CASCADE);
+        fileMenuItem.setText("Datei");
+        fileMenu = new Menu(fileMenuItem);
+        fileMenuItem.setMenu(fileMenu);
+
+        openFileMenuItem = new MenuItem(fileMenu, SWT.CASCADE);
+        openFileMenuItem.setText("?ffnen");
+
+        newFileMenuItem = new MenuItem(fileMenu, SWT.CASCADE);
+        newFileMenuItem.setText("Neu");
+
+        saveFileMenuItem = new MenuItem(fileMenu, SWT.CASCADE);
+        saveFileMenuItem.setText("Speichern");
+
+        closeFileMenuItem = new MenuItem(fileMenu, SWT.CASCADE);
+        closeFileMenuItem.setText("Schlie?en");
+
+        exitMenuItem = new MenuItem(fileMenu, SWT.CASCADE);
+        exitMenuItem.setText("Beenden");
+
+    }
+
+    /**
+     * init the View Menu
+     */
+    private void initViewMenu() {
+        if (rootMenu == null) {
+            return;
+            /**
+             * @todo hier muesste eigentlich eine Exception geworfen werden, da
+             *       null nich ein darf
+             */
+        }
+
+        viewMenuItem = new MenuItem(rootMenu, SWT.CASCADE);
+        viewMenuItem.setText("Ansicht");
+
+        viewMenu = new Menu(viewMenuItem);
+        viewMenuItem.setMenu(viewMenu);
+
+        viewVideoFormatMenuItem = new MenuItem(viewMenu, SWT.CHECK);
+        viewVideoFormatMenuItem.setText("VideoFormat");
+        viewVideoFormatMenuItem.setSelection(false);
+        viewVideoFormatMenuItem.addSelectionListener(new SelectionAdapter() {
+            public void widgetSelected(SelectionEvent evt) {
+                System.out
+                        .println("viewVideoFormatMenuItem.widgetSelected, event="
+                                + evt);
+                setStatus(3, "Fehler aufgetreten");
+                //TODO add your code for
+                // viewVideoFormatMenuItem.widgetSelected
+            }
+        });
+
+        viewDirectorMenuItem = new MenuItem(viewMenu, SWT.CHECK);
+        viewDirectorMenuItem.setText("Director");
+        viewDirectorMenuItem.setSelection(false);
+
+    }
+
+    /**
+     * init the help menu
+     */
+    private void initHelpMenu() {
+        if (rootMenu == null) {
+            throw new GuiInitException();
+        }
+        helpMenuItem = new MenuItem(rootMenu, SWT.CASCADE);
+        {
+            helpMenu = new Menu(helpMenuItem);
+            helpMenuItem.setMenu(helpMenu);
+            {
+                contentsMenuItem = new MenuItem(helpMenu, SWT.CASCADE);
+            }
+            {
+                aboutMenuItem = new MenuItem(helpMenu, SWT.CASCADE);
+            }
+        }
+
+    }
+
+    private void initRootComposite() {
+
+        //set up the root composite incl. layout
+        compositeRoot = new Composite(shell, SWT.NONE);
+        GridLayout composite1Layout = new GridLayout();
+        composite1Layout.marginWidth = 0;
+        composite1Layout.marginHeight = 0;
+        composite1Layout.horizontalSpacing = 0;
+        composite1Layout.verticalSpacing = 0;
+        GridData composite1LData = new GridData();
+        compositeRoot.setLayout(composite1Layout);
+
+        composite1LData.verticalAlignment = GridData.FILL;
+        composite1LData.horizontalAlignment = GridData.FILL;
+        composite1LData.grabExcessHorizontalSpace = true;
+        composite1LData.grabExcessVerticalSpace = true;
+        compositeRoot.setLayoutData(composite1LData);
+
+        //init the MainComposite
+        initMainComposite();
+    }
+    
+
+
+    private void initMainComposite(){
+        compositeMain = new Composite(compositeRoot, SWT.EMBEDDED);
+        GridLayout composite3Layout = new GridLayout();
+        composite3Layout.makeColumnsEqualWidth = true;
+        composite3Layout.horizontalSpacing = 0;
+        composite3Layout.marginHeight = 0;
+        composite3Layout.marginWidth = 0;
+        composite3Layout.verticalSpacing = 0;
+        GridData composite3LData = new GridData();
+        compositeMain.setLayout(composite3Layout);
+        compositeMain.setForeground(SWTResourceManager.getColor(0,
+                255, 0));
+        composite3LData.verticalAlignment = GridData.FILL;
+        composite3LData.horizontalAlignment = GridData.FILL;
+        composite3LData.grabExcessHorizontalSpace = true;
+        composite3LData.grabExcessVerticalSpace = true;
+        compositeMain.setLayoutData(composite3LData);
+    
+        //init the MainTabFolder
+    }
+    
+    private void initMainTabFolder() {
+        
+    }
+    
+    private void initGUI() {
+        try {
+
+            //set't the menu
+            rootMenu = new Menu(shell, SWT.BAR);
+            shell.setMenuBar(rootMenu);
+
+            //init the other menu's
+            initFileMenu();
+            initViewMenu();
+            initHelpMenu();
+
+            //set the layout for the shell
+            FillLayout thisLayout = new FillLayout(SWT.HORIZONTAL);
+            shell.setLayout(thisLayout);
+
+            //set the Site
+            shell.setSize(MAIN_WINDOW_WIDTH, MAIN_WINDOW_HEIGHT);
+            {
+                //the root composite
+                //this init's the maincomposite
+                initRootComposite();
+                initStatusComposite();
+
+                {
+                    {
+                        cTabFolderMain = new CTabFolder(compositeMain, SWT.CLOSE);
+                        //cTabFolderMain.setSelection(null);
+                        GridData cTabFolder1LData = new GridData();
+                        cTabFolder1LData.grabExcessHorizontalSpace = true;
+                        cTabFolder1LData.horizontalAlignment = GridData.FILL;
+                        cTabFolder1LData.grabExcessVerticalSpace = true;
+                        cTabFolder1LData.verticalAlignment = GridData.FILL;
+                        cTabFolderMain.setLayoutData(cTabFolder1LData);
+                        {
+                            tabItemFormat = new CTabItem(cTabFolderMain, SWT.NONE);
+                            tabItemFormat.setText("Formate");
+                            {
+                                compositeFormate = new CompositeFormate(
+                                    cTabFolderMain,
+                                    SWT.NONE, statusLine, locale);
+                                
+                                tabItemFormat.setControl(compositeFormate);
+                            }
+                        }
+                        {
+                            cTabItem2 = new CTabItem(cTabFolderMain, SWT.NONE);
+                            cTabItem2.setText("cTabItem2");
+                            {
+                                sashFormDirector = new SashForm(cTabFolderMain,
+                                        SWT.NONE);
+                                cTabItem2.setControl(sashFormDirector);
+                                FormLayout sashFormDirectorLayout = new FormLayout();
+                                sashFormDirector
+                                        .setLayout(sashFormDirectorLayout);
+                                {
+                                    group1Director = new Group(
+                                            sashFormDirector, SWT.NONE);
+                                    GridLayout gridLayout = new GridLayout();
+                                    gridLayout.numColumns = 6;
+                                    group1Director
+                                            .setText("Directors ?bersicht");
+                                    FormData formData = new FormData();
+                                    group1Director.setLayout(gridLayout);
+                                    formData.right = new FormAttachment(100,
+                                            100, -5);
+                                    formData.top = new FormAttachment(0, 100, 5);
+                                    formData.bottom = new FormAttachment(100,
+                                            100, -5);
+                                    group1Director.setLayoutData(formData);
+                                    {
+                                        tableDirector = new Table(
+                                                group1Director, SWT.SINGLE
+                                                        | SWT.FULL_SELECTION
+                                                        | SWT.V_SCROLL
+                                                        | SWT.BORDER);
+                                        tableDirector.setHeaderVisible(true);
+                                        tableDirector.setLinesVisible(true);
+                                        GridData griddata = new GridData();
+                                        tableDirector
+                                                .addSelectionListener(new SelectionAdapter() {
+                                                    public void widgetSelected(
+                                                            SelectionEvent evt) {
+
+                                                        int index = tableDirector
+                                                                .getSelectionIndex();
+                                                        System.out
+                                                                .println("Table select. id: "
+                                                                        + index
+                                                                        + " TableItem:"
+                                                                        + tableDirector
+                                                                                .getItem(index)
+                                                                        + " id: "
+                                                                        + tableDirector
+                                                                                .getItem(
+                                                                                        index)
+                                                                                .getText(
+                                                                                        0));
+                                                    }
+                                                });
+                                        griddata.verticalAlignment = GridData.FILL;
+                                        griddata.horizontalAlignment = GridData.FILL;
+                                        griddata.horizontalSpan = 6;
+                                        griddata.grabExcessHorizontalSpace = true;
+                                        griddata.grabExcessVerticalSpace = true;
+                                        tableDirector.setLayoutData(griddata);
+                                        {
+                                            tableColumnDirectorId = new TableColumn(
+                                                    tableDirector, SWT.CENTER);
+                                            tableColumnDirectorId.setText("id");
+                                            tableColumnDirectorId.setWidth(100);
+                                        }
+                                        {
+                                            tableColumnDirectorLastname = new TableColumn(
+                                                    tableDirector, SWT.CENTER);
+                                            tableColumnDirectorLastname
+                                                    .setText("Name");
+                                            tableColumnDirectorLastname
+                                                    .setWidth(100);
+
+                                        }
+                                        {
+                                            tableColumnDirectorFirstname = new TableColumn(
+                                                    tableDirector, SWT.CENTER);
+                                            tableColumnDirectorFirstname
+                                                    .setText("Short");
+                                            tableColumnDirectorFirstname
+                                                    .setWidth(100);
+
+                                        }
+                                    }
+                                    {
+                                        filterLabelVideoFormat = new Label(
+                                                group1Director, SWT.NONE);
+                                        filterLabelVideoFormat
+                                                .setText("Suche nach:");
+                                        GridData data1 = new GridData();
+                                        data1.horizontalSpan = 2;
+                                        filterLabelVideoFormat
+                                                .setLayoutData(data1);
+                                    }
+                                    {
+                                        filterTextVideoFormat = new Text(
+                                                group1Director, SWT.BORDER);
+                                        GridData data2 = new GridData();
+
+                                        data2.horizontalAlignment = GridData.FILL;
+                                        data2.horizontalSpan = 4;
+                                        data2.grabExcessHorizontalSpace = true;
+                                        filterTextVideoFormat
+                                                .setLayoutData(data2);
+                                    }
+                                }
+                                {
+                                    group2Director = new Group(
+                                            sashFormDirector, SWT.NONE);
+                                    GridLayout gridLayout = new GridLayout();
+                                    gridLayout.numColumns = 2;
+                                    group2Director.setText("Filmliste");
+                                    FormData formData = new FormData();
+                                    group2Director.setLayout(gridLayout);
+                                    formData.left = new FormAttachment(0, 100,
+                                            5);
+                                    formData.top = new FormAttachment(0, 100, 5);
+                                    formData.bottom = new FormAttachment(100,
+                                            100, -5);
+                                    group2Director.setLayoutData(formData);
+                                    {
+                                        list3 = new List(group2Director,
+                                                SWT.SINGLE | SWT.H_SCROLL
+                                                        | SWT.V_SCROLL
+                                                        | SWT.BORDER);
+                                        GridData list3LData = new GridData();
+                                        list3
+                                                .addSelectionListener(new SelectionAdapter() {
+                                                    public void widgetSelected(
+                                                            SelectionEvent evt) {
+                                                        System.out
+                                                                .println("list1.widgetSelected, event="
+                                                                        + evt);
+
+                                                        //TODO add your code for
+                                                        // list1.widgetSelected
+                                                    }
+                                                });
+                                        list3LData.verticalAlignment = GridData.FILL;
+                                        list3LData.horizontalAlignment = GridData.FILL;
+                                        list3LData.grabExcessHorizontalSpace = true;
+                                        list3LData.grabExcessVerticalSpace = true;
+                                        list3.setLayoutData(list3LData);
+                                    }
+                                }
+                            }
+                        }
+                    }
+                }
+                {
+                    //init the Composite for statusline
+                    
+                    //compositeFormate.setStatusLine(statusLine);
+
+                }
+            }
+            shell.layout();
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+    }
+
+
+
+
+    private void initStatusComposite() {
+        compositeStatusLine = new Composite(compositeRoot, SWT.EMBEDDED);
+        GridLayout composite2Layout = new GridLayout();
+        composite2Layout.marginWidth = 0;
+        composite2Layout.marginHeight = 0;
+        composite2Layout.makeColumnsEqualWidth = true;
+        composite2Layout.horizontalSpacing = 0;
+        composite2Layout.verticalSpacing = 0;
+        GridData composite2LData = new GridData();
+        compositeStatusLine.setLayout(composite2Layout);
+        composite2LData.horizontalAlignment = GridData.FILL;
+        composite2LData.heightHint = 14;
+        composite2LData.grabExcessHorizontalSpace = true;
+        compositeStatusLine.setLayoutData(composite2LData);
+
+        initStatusLine();
+
+    }
+
+    private void initStatusLine() {
+        statusLine = new StatusLineStyledText(compositeStatusLine, SWT.READ_ONLY);
+        statusLine.setText("");
+        statusLine
+                .setToolTipText("Hier finden Sie wichtige Statusinformationen");
+        statusLine.setBackground(ColorDef.STATUS_B_STANDARD);
+        statusLine.setForeground(ColorDef.STATUS_F_STANDARD);
+        statusLine.setDoubleClickEnabled(false);
+        statusLine.setEditable(false);
+        statusLine.setEnabled(true);
+        GridData styledText1LData = new GridData();
+
+        styledText1LData.horizontalAlignment = GridData.FILL;
+        styledText1LData.grabExcessHorizontalSpace = true;
+        statusLine.setLayoutData(styledText1LData);
+    }
+
+    /**
+     * Sets a message for the Statusline
+     * 
+     * @param mode
+     * @param message
+     */
+    private void setStatus(final int mode, final String message) {
+        /**
+         * mode values 0 normal message 1 information message 2 warn message 3
+         * error message
+         *  
+         */
+        if (mode == 0) {
+            statusLine.setBackground(ColorDef.STATUS_B_STANDARD);
+            statusLine.setForeground(ColorDef.STATUS_F_STANDARD);
+        } else if (mode == 1) {
+            statusLine.setBackground(ColorDef.STATUS_B_INFO);
+            statusLine.setForeground(ColorDef.STATUS_F_INFO);
+        } else if (mode == 2) {
+            statusLine.setBackground(ColorDef.STATUS_B_WARN);
+            statusLine.setForeground(ColorDef.STATUS_F_WARN);
+        } else if (mode == 3) {
+            statusLine.setBackground(ColorDef.STATUS_B_ERROR);
+            statusLine.setForeground(ColorDef.STATUS_F_ERROR);
+        }
+
+        statusLine.setText(message);
+
+		new Thread() {
+			public void run() {
+				
+				try {Thread.sleep (1000 *5);} catch (Throwable th) {}
+					if (display.isDisposed()) return;
+					display.asyncExec(new Runnable() {
+						public void run() {
+				            statusLine.setBackground(ColorDef.STATUS_B_STANDARD);
+				            statusLine.setForeground(ColorDef.STATUS_F_STANDARD);
+						}
+					});
+				
+			}
+		}.start();
+
+    }
+
+    private void initDB(){
+        
+		new Thread() {
+			public void run() {
+			    Database.initDB();
+			}
+		}.start();
+
+    }
+        
+    
+    
+}
\ No newline at end of file



From rgriesch at sheep.berlios.de  Thu Nov  4 19:21:57 2004
From: rgriesch at sheep.berlios.de (Remo Griesch at BerliOS)
Date: Thu, 4 Nov 2004 19:21:57 +0100
Subject: [Provirent-svn-commit] r89 - project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui
Message-ID: <200411041821.iA4ILvcI025276@sheep.berlios.de>

Author: rgriesch
Date: 2004-11-04 19:21:56 +0100 (Thu, 04 Nov 2004)
New Revision: 89

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/ManagmentGui.java
Log:


Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/ManagmentGui.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/ManagmentGui.java	2004-11-03 22:39:11 UTC (rev 88)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/ManagmentGui.java	2004-11-04 18:21:56 UTC (rev 89)
@@ -238,7 +238,7 @@
         
         
         l = PropertyResourceBundle.getBundle(
-                "de.hsharz.provirent.managment.gui.language", locale);
+                "de.hsharz.provirent.managment.gui.language.main", locale);
 
         //hier muss noch was gemacht werden
         if (l == null) {



From pschneider at sheep.berlios.de  Thu Nov  4 19:56:15 2004
From: pschneider at sheep.berlios.de (Philipp Schneider at BerliOS)
Date: Thu, 4 Nov 2004 19:56:15 +0100
Subject: [Provirent-svn-commit] r90 - project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/language
Message-ID: <200411041856.iA4IuFkK027246@sheep.berlios.de>

Author: pschneider
Date: 2004-11-04 19:56:14 +0100 (Thu, 04 Nov 2004)
New Revision: 90

Added:
   project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/language/artists.properties
Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/language/main.properties
Log:
- f?\195?\188r artist hinzugef?\195?\188gt

Added: project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/language/artists.properties
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/language/artists.properties	2004-11-04 18:21:56 UTC (rev 89)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/language/artists.properties	2004-11-04 18:56:14 UTC (rev 90)
@@ -0,0 +1,34 @@
+
+error=Fehler
+button.new=Neu
+button.edit=Bearbeiten
+button.delete=L?schen
+button.save=Speichern
+button.cancel=Abbruch
+
+videoformat.group.label=VideoFormat
+videoformat.groupoverview.label=?berblick
+videoformat.groupoverview.columnid=id
+videoformat.groupoverview.columnname=Name
+videoformat.groupoverview.columnshortname=Abk.
+
+
+videoformat.groupoverview.searchlabel=Suche nach
+videoformat.groupdetail.label=Detail
+videoformat.groupdetail.idlabel=VideoFormat ID
+videoformat.groupdetail.namelabel=VideoFormat Name
+videoformat.groupdetail.shortcutlabel=VideoFormat Abk?rzung
+
+videoformat.groupdetail.savebutton.warn.noname.title=Datensatz speichern
+videoformat.groupdetail.savebutton.warn.noname.msg=Der Datensatz kann nicht gespeichert werden. \n Bitte geben Sie einen Namen an
+videoformat.groupdetail.savebutton.newok=Speichern des neuen VideoFormates erfolgreich.
+videoformat.groupdetail.savebutton.editok=?ndern des VideoFormates erfolgreich.
+
+videoformat.groupdetail.savebutton.errorsave=Datenbankfehler beim Speichern.
+videoformat.groupdetail.savebutton.errordb=Datenbankfehler beim Herstellen der Verbindung.(save).
+
+videoformat.groupdetail.deletebutton.question.header=Wirklich l?schen?
+videoformat.groupdetail.deletebutton.question.text=Wollen Sie den Datensatz {0} wirklich l?schen?
+videoformat.groupdetail.deletebutton.newok=Datensatz wurde erfolgreich gel?scht.
+videoformat.groupdetail.deletebutton.errorsave=Datenbankfehler beim L?schen.
+videoformat.groupdetail.deletebutton.errordb=Datenbankfehler beim Herstellen der Verbindung(del).

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/language/main.properties
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/language/main.properties	2004-11-04 18:21:56 UTC (rev 89)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/language/main.properties	2004-11-04 18:56:14 UTC (rev 90)
@@ -1,33 +1,37 @@
 mainwindow.title=Provirent Managment Application english
-menue.file=Datei
-menue.file.open=?ffnen
-menue.file.new=Neu
-menue.file.save=Speichern
-menue.file.close=Schlie?en
-menue.file.exit=Beenden
+menu.file=Datei
+menu.file.open=?ffnen
+menu.file.new=Neu
+menu.file.save=Speichern
+menu.file.close=Schlie?en
+menu.file.exit=Beenden
 
 
-menue.view=Ansicht
-menue.view.format=Formate
+menu.view=Ansicht
 
-menue.view.director=Regie
+menu.view.format=Formate
 
-menue.view.actor=Darsteller
+menu.view.actor=Darsteller
 
-menue.view.genre=Genre
+menu.view.director=Regie
 
-menue.view.subtitle=Untertitel
-menue.view.language=Sprache
+menu.view.genre=Genre
 
-menue.view.status=Status
-menue.view.condition=Zustand
+menu.view.subtitle=Untertitel
+menu.view.language=Sprache
 
-menue.view.movie=Film
+menu.view.status=Status
+menu.view.condition=Zustand
 
-menue.view.dvd=DVD
+menu.view.movie=Film
 
-menue.view.bill=Rechnung
+menu.view.dvd=DVD
 
+menu.view.bill=Rechnung
+
+
+menu.help=Hilfe
+
 tab.format.title=Video-/AudioFormate
 tab.director.title=
 tab.actor.title=



From pschneider at sheep.berlios.de  Thu Nov  4 19:56:34 2004
From: pschneider at sheep.berlios.de (Philipp Schneider at BerliOS)
Date: Thu, 4 Nov 2004 19:56:34 +0100
Subject: [Provirent-svn-commit] r91 - project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui
Message-ID: <200411041856.iA4IuYEN027286@sheep.berlios.de>

Author: pschneider
Date: 2004-11-04 19:56:33 +0100 (Thu, 04 Nov 2004)
New Revision: 91

Added:
   project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/CompositeArtists.java
Log:
- artist

Added: project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/CompositeArtists.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/CompositeArtists.java	2004-11-04 18:56:14 UTC (rev 90)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/CompositeArtists.java	2004-11-04 18:56:33 UTC (rev 91)
@@ -0,0 +1,116 @@
+package de.hsharz.provirent.managment.gui;
+
+import java.util.Locale;
+import java.util.PropertyResourceBundle;
+import java.util.ResourceBundle;
+
+import org.apache.log4j.Logger;
+import org.eclipse.swt.layout.GridLayout;
+import org.eclipse.swt.widgets.Composite;
+import org.eclipse.swt.widgets.Display;
+import org.eclipse.swt.widgets.Shell;
+
+
+/**
+* This code was generated using CloudGarden's Jigloo
+* SWT/Swing GUI Builder, which is free for non-commercial
+* use. If Jigloo is being used commercially (ie, by a corporation,
+* company or business for any purpose whatever) then you
+* should purchase a license for each developer using Jigloo.
+* Please visit www.cloudgarden.com for details.
+* Use of Jigloo implies acceptance of these licensing terms.
+* *************************************
+* A COMMERCIAL LICENSE HAS NOT BEEN PURCHASED
+* for this machine, so Jigloo or this code cannot be used legally
+* for any corporate or commercial purpose.
+* *************************************
+*/
+public class CompositeArtists extends AbstractComposite{
+
+    /**
+     * Logger for this class
+     */
+    private static final Logger logger = Logger
+            .getLogger(CompositeArtists.class);
+    
+    
+    private final static int MODE_VIEW = 0;
+
+    private final static int MODE_ADD = 1;
+
+    private final static int MODE_EDIT = 2;
+    
+    private StatusLineStyledText statusLine;
+
+    private ResourceBundle l;
+    
+    private Composite parent;
+    
+    /*
+     * ?ndert die Sprache aller Elemente
+     * 
+     * @see de.hsharz.provirent.managment.gui.AbstractComposite#changeLanguage(java.util.Locale)
+     */
+    public void changeLanguage(Locale locale) {
+
+    }
+
+    /* 
+     * Init die Sprache (properties Datei)
+     * @see de.hsharz.provirent.managment.gui.AbstractComposite#initLanguage(java.util.Locale)
+     */
+    public void initLanguage(Locale locale) {
+
+        l = PropertyResourceBundle.getBundle(
+                "de.hsharz.provirent.managment.gui.language.artists", locale);
+
+    }
+    
+    
+	/**
+	* Auto-generated main method to display this 
+	* org.eclipse.swt.widgets.Composite inside a new Shell.
+	*/
+	public static void main(String[] args) {
+		showGUI();
+	}
+		
+	/**
+	* Auto-generated method to display this 
+	* org.eclipse.swt.widgets.Composite inside a new Shell.
+	*/
+	public static void showGUI() {
+		Display display = Display.getDefault();
+		Shell shell = new Shell(display);
+
+		shell.open();
+		while (!shell.isDisposed()) {
+			if (!display.readAndDispatch())
+				display.sleep();
+		}
+	}
+
+	public CompositeArtists(Composite p, int style,
+            StatusLineStyledText status, Locale l) {
+	    super(p, style, status, l);
+        parent = p;
+        //Statusline wird gestzt
+        statusLine = status;
+        
+        //sprache wird init
+        initLanguage(l);
+	    
+	    
+		initGUI();
+	}
+
+	private void initGUI() {
+		try {
+			this.setLayout(new GridLayout());
+			this.layout();
+		} catch (Exception e) {
+			e.printStackTrace();
+		}
+	}
+
+}



From pschneider at sheep.berlios.de  Thu Nov  4 19:56:46 2004
From: pschneider at sheep.berlios.de (Philipp Schneider at BerliOS)
Date: Thu, 4 Nov 2004 19:56:46 +0100
Subject: [Provirent-svn-commit] r92 - project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui
Message-ID: <200411041856.iA4IukNT027321@sheep.berlios.de>

Author: pschneider
Date: 2004-11-04 19:56:45 +0100 (Thu, 04 Nov 2004)
New Revision: 92

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/CompositeFormate.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/ManagmentGui.java
Log:


Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/CompositeFormate.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/CompositeFormate.java	2004-11-04 18:56:33 UTC (rev 91)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/CompositeFormate.java	2004-11-04 18:56:45 UTC (rev 92)
@@ -178,15 +178,7 @@
     public static void showGUI() {
         Display display = Display.getDefault();
         Shell shell = new Shell(display);
-        /*
-         * CompositeFormate inst = new CompositeFormate(shell, SWT.NULL); Point
-         * size = inst.getSize(); shell.setLayout(new FillLayout());
-         * shell.layout(); if(size.x == 0 && size.y == 0) { inst.pack();
-         * shell.pack(); } else { Rectangle shellBounds = shell.computeTrim(0,
-         * 0, size.x, size.y); int MENU_HEIGHT = 22; if (shell.getMenuBar() !=
-         * null) shellBounds.height -= MENU_HEIGHT;
-         * shell.setSize(shellBounds.width, shellBounds.height); }
-         */
+
         shell.open();
         while (!shell.isDisposed()) {
             if (!display.readAndDispatch())
@@ -779,11 +771,11 @@
             composite2.setLayout(composite2Layout);
             composite2LData.verticalAlignment = GridData.END;
             composite2LData.horizontalAlignment = GridData.CENTER;
-            composite2LData.widthHint = 322;
+            composite2LData.widthHint = 391;
             composite2LData.horizontalSpan = 6;
             composite2LData.grabExcessHorizontalSpace = true;
             composite2LData.grabExcessVerticalSpace = true;
-            composite2LData.heightHint = 33;
+            composite2LData.heightHint = 35;
             composite2.setLayoutData(composite2LData);
 
             //init all the Buttons
@@ -986,7 +978,7 @@
         }
 
         this.setLayout(new GridLayout());
-        this.setSize(681, 433);
+        this.setSize(816, 540);
         {
             sashForm1 = new SashForm(this, SWT.VERTICAL | SWT.V_SCROLL);
             GridData sashForm1LData1 = new GridData();

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/ManagmentGui.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/ManagmentGui.java	2004-11-04 18:56:33 UTC (rev 91)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/ManagmentGui.java	2004-11-04 18:56:45 UTC (rev 92)
@@ -119,19 +119,6 @@
 
     private CTabItem tabItemFormat;
 
-    private List list3;
-
-    private Group group2Director;
-
-    private Text filterTextVideoFormat;
-
-    private Label filterLabelVideoFormat;
-
-    private TableColumn tableColumnDirectorFirstname;
-
-    private TableColumn tableColumnDirectorLastname;
-
-    private TableColumn tableColumnDirectorId;
     private CompositeFormate compositeFormate;
 
     private MenuItem aboutMenuItem;
@@ -143,15 +130,12 @@
     private MenuItem helpMenuItem;
 
     private MenuItem viewDirectorMenuItem;
+    
+    private MenuItem viewFormatMenuItem,viewActorMenuItem,viewGenreMenuItem;
+    private MenuItem viewSubtitleMenuItem,viewLanguageMenuItem,viewStatusMenuItem;
+    private MenuItem viewConditionMenuItem,viewMovieMenuItem,viewDvdMenuItem, viewBillMenuItem;
+    
 
-    private Table tableDirector;
-
-    private Group group1Director;
-
-    private SashForm sashFormDirector;
-
-    private CTabItem cTabItem2;
-
     private Shell shell;
 
     private Display display;
@@ -282,24 +266,24 @@
              */
         }
         fileMenuItem = new MenuItem(rootMenu, SWT.CASCADE);
-        fileMenuItem.setText("Datei");
+        fileMenuItem.setText(l.getString("menu.file"));
         fileMenu = new Menu(fileMenuItem);
         fileMenuItem.setMenu(fileMenu);
 
         openFileMenuItem = new MenuItem(fileMenu, SWT.CASCADE);
-        openFileMenuItem.setText("?ffnen");
+        openFileMenuItem.setText(l.getString("menu.file.open"));
 
         newFileMenuItem = new MenuItem(fileMenu, SWT.CASCADE);
-        newFileMenuItem.setText("Neu");
+        newFileMenuItem.setText(l.getString("menu.file.new"));
 
         saveFileMenuItem = new MenuItem(fileMenu, SWT.CASCADE);
-        saveFileMenuItem.setText("Speichern");
+        saveFileMenuItem.setText(l.getString("menu.file.save"));
 
         closeFileMenuItem = new MenuItem(fileMenu, SWT.CASCADE);
-        closeFileMenuItem.setText("Schlie?en");
+        closeFileMenuItem.setText(l.getString("menu.file.close"));
 
         exitMenuItem = new MenuItem(fileMenu, SWT.CASCADE);
-        exitMenuItem.setText("Beenden");
+        exitMenuItem.setText(l.getString("menu.file.exit"));
 
     }
 
@@ -316,29 +300,67 @@
         }
 
         viewMenuItem = new MenuItem(rootMenu, SWT.CASCADE);
-        viewMenuItem.setText("Ansicht");
+        viewMenuItem.setText(l.getString("menu.view"));
 
         viewMenu = new Menu(viewMenuItem);
         viewMenuItem.setMenu(viewMenu);
 
         viewVideoFormatMenuItem = new MenuItem(viewMenu, SWT.CHECK);
-        viewVideoFormatMenuItem.setText("VideoFormat");
-        viewVideoFormatMenuItem.setSelection(false);
+        viewVideoFormatMenuItem.setText(l.getString("menu.view.format"));
+        viewVideoFormatMenuItem.setSelection(true);
         viewVideoFormatMenuItem.addSelectionListener(new SelectionAdapter() {
             public void widgetSelected(SelectionEvent evt) {
-                System.out
-                        .println("viewVideoFormatMenuItem.widgetSelected, event="
-                                + evt);
-                setStatus(3, "Fehler aufgetreten");
-                //TODO add your code for
-                // viewVideoFormatMenuItem.widgetSelected
+				if(tabItemFormat == null || tabItemFormat.isDisposed()){
+				    initFormatTab();
+				 return;   
+				}
+				
+				cTabFolderMain.setSelection(tabItemFormat);
+				viewVideoFormatMenuItem.setSelection(true);
+            
             }
         });
 
         viewDirectorMenuItem = new MenuItem(viewMenu, SWT.CHECK);
-        viewDirectorMenuItem.setText("Director");
+        viewDirectorMenuItem.setText(l.getString("menu.view.director"));
         viewDirectorMenuItem.setSelection(false);
 
+        viewActorMenuItem = new MenuItem(viewMenu, SWT.CHECK);
+        viewActorMenuItem.setText(l.getString("menu.view.actor"));
+        viewActorMenuItem.setSelection(false);
+        
+        viewGenreMenuItem = new MenuItem(viewMenu, SWT.CHECK);
+        viewGenreMenuItem.setText(l.getString("menu.view.genre"));
+        viewActorMenuItem.setSelection(false);
+
+        viewSubtitleMenuItem = new MenuItem(viewMenu, SWT.CHECK);
+        viewSubtitleMenuItem.setText(l.getString("menu.view.subtitle"));
+        viewSubtitleMenuItem.setSelection(false);
+        
+        viewLanguageMenuItem = new MenuItem(viewMenu, SWT.CHECK);
+        viewLanguageMenuItem.setText(l.getString("menu.view.language"));
+        viewLanguageMenuItem.setSelection(false);
+
+        viewStatusMenuItem = new MenuItem(viewMenu, SWT.CHECK);
+        viewStatusMenuItem.setText(l.getString("menu.view.status"));
+        viewStatusMenuItem.setSelection(false);
+
+        viewConditionMenuItem = new MenuItem(viewMenu, SWT.CHECK);
+        viewConditionMenuItem.setText(l.getString("menu.view.condition"));
+        viewConditionMenuItem.setSelection(false);
+
+        viewMovieMenuItem = new MenuItem(viewMenu, SWT.CHECK);
+        viewMovieMenuItem.setText(l.getString("menu.view.movie"));
+        viewMovieMenuItem.setSelection(false);
+
+        viewDvdMenuItem = new MenuItem(viewMenu, SWT.CHECK);
+        viewDvdMenuItem.setText(l.getString("menu.view.dvd"));
+        viewDvdMenuItem.setSelection(false);
+
+        viewBillMenuItem = new MenuItem(viewMenu, SWT.CHECK);
+        viewBillMenuItem.setText(l.getString("menu.view.bill"));
+        viewBillMenuItem.setSelection(false);
+
     }
 
     /**
@@ -349,6 +371,7 @@
             throw new GuiInitException();
         }
         helpMenuItem = new MenuItem(rootMenu, SWT.CASCADE);
+        helpMenuItem.setText(l.getString("menu.help"));
         {
             helpMenu = new Menu(helpMenuItem);
             helpMenuItem.setMenu(helpMenu);
@@ -362,6 +385,19 @@
 
     }
 
+    
+    private void initFormatTab() {
+        tabItemFormat = new CTabItem(cTabFolderMain, SWT.NONE);
+        tabItemFormat.setText(l.getString("tab.format.title"));
+        {
+            compositeFormate = new CompositeFormate(
+                cTabFolderMain,
+                SWT.NONE, statusLine, locale);
+            
+            tabItemFormat.setControl(compositeFormate);
+        }
+    }
+    
     private void initRootComposite() {
 
         //set up the root composite incl. layout
@@ -446,6 +482,8 @@
                         cTabFolder1LData.verticalAlignment = GridData.FILL;
                         cTabFolderMain.setLayoutData(cTabFolder1LData);
                         {
+                            initFormatTab();
+                            /*
                             tabItemFormat = new CTabItem(cTabFolderMain, SWT.NONE);
                             tabItemFormat.setText("Formate");
                             {
@@ -455,156 +493,8 @@
                                 
                                 tabItemFormat.setControl(compositeFormate);
                             }
+                            */
                         }
-                        {
-                            cTabItem2 = new CTabItem(cTabFolderMain, SWT.NONE);
-                            cTabItem2.setText("cTabItem2");
-                            {
-                                sashFormDirector = new SashForm(cTabFolderMain,
-                                        SWT.NONE);
-                                cTabItem2.setControl(sashFormDirector);
-                                FormLayout sashFormDirectorLayout = new FormLayout();
-                                sashFormDirector
-                                        .setLayout(sashFormDirectorLayout);
-                                {
-                                    group1Director = new Group(
-                                            sashFormDirector, SWT.NONE);
-                                    GridLayout gridLayout = new GridLayout();
-                                    gridLayout.numColumns = 6;
-                                    group1Director
-                                            .setText("Directors ?bersicht");
-                                    FormData formData = new FormData();
-                                    group1Director.setLayout(gridLayout);
-                                    formData.right = new FormAttachment(100,
-                                            100, -5);
-                                    formData.top = new FormAttachment(0, 100, 5);
-                                    formData.bottom = new FormAttachment(100,
-                                            100, -5);
-                                    group1Director.setLayoutData(formData);
-                                    {
-                                        tableDirector = new Table(
-                                                group1Director, SWT.SINGLE
-                                                        | SWT.FULL_SELECTION
-                                                        | SWT.V_SCROLL
-                                                        | SWT.BORDER);
-                                        tableDirector.setHeaderVisible(true);
-                                        tableDirector.setLinesVisible(true);
-                                        GridData griddata = new GridData();
-                                        tableDirector
-                                                .addSelectionListener(new SelectionAdapter() {
-                                                    public void widgetSelected(
-                                                            SelectionEvent evt) {
-
-                                                        int index = tableDirector
-                                                                .getSelectionIndex();
-                                                        System.out
-                                                                .println("Table select. id: "
-                                                                        + index
-                                                                        + " TableItem:"
-                                                                        + tableDirector
-                                                                                .getItem(index)
-                                                                        + " id: "
-                                                                        + tableDirector
-                                                                                .getItem(
-                                                                                        index)
-                                                                                .getText(
-                                                                                        0));
-                                                    }
-                                                });
-                                        griddata.verticalAlignment = GridData.FILL;
-                                        griddata.horizontalAlignment = GridData.FILL;
-                                        griddata.horizontalSpan = 6;
-                                        griddata.grabExcessHorizontalSpace = true;
-                                        griddata.grabExcessVerticalSpace = true;
-                                        tableDirector.setLayoutData(griddata);
-                                        {
-                                            tableColumnDirectorId = new TableColumn(
-                                                    tableDirector, SWT.CENTER);
-                                            tableColumnDirectorId.setText("id");
-                                            tableColumnDirectorId.setWidth(100);
-                                        }
-                                        {
-                                            tableColumnDirectorLastname = new TableColumn(
-                                                    tableDirector, SWT.CENTER);
-                                            tableColumnDirectorLastname
-                                                    .setText("Name");
-                                            tableColumnDirectorLastname
-                                                    .setWidth(100);
-
-                                        }
-                                        {
-                                            tableColumnDirectorFirstname = new TableColumn(
-                                                    tableDirector, SWT.CENTER);
-                                            tableColumnDirectorFirstname
-                                                    .setText("Short");
-                                            tableColumnDirectorFirstname
-                                                    .setWidth(100);
-
-                                        }
-                                    }
-                                    {
-                                        filterLabelVideoFormat = new Label(
-                                                group1Director, SWT.NONE);
-                                        filterLabelVideoFormat
-                                                .setText("Suche nach:");
-                                        GridData data1 = new GridData();
-                                        data1.horizontalSpan = 2;
-                                        filterLabelVideoFormat
-                                                .setLayoutData(data1);
-                                    }
-                                    {
-                                        filterTextVideoFormat = new Text(
-                                                group1Director, SWT.BORDER);
-                                        GridData data2 = new GridData();
-
-                                        data2.horizontalAlignment = GridData.FILL;
-                                        data2.horizontalSpan = 4;
-                                        data2.grabExcessHorizontalSpace = true;
-                                        filterTextVideoFormat
-                                                .setLayoutData(data2);
-                                    }
-                                }
-                                {
-                                    group2Director = new Group(
-                                            sashFormDirector, SWT.NONE);
-                                    GridLayout gridLayout = new GridLayout();
-                                    gridLayout.numColumns = 2;
-                                    group2Director.setText("Filmliste");
-                                    FormData formData = new FormData();
-                                    group2Director.setLayout(gridLayout);
-                                    formData.left = new FormAttachment(0, 100,
-                                            5);
-                                    formData.top = new FormAttachment(0, 100, 5);
-                                    formData.bottom = new FormAttachment(100,
-                                            100, -5);
-                                    group2Director.setLayoutData(formData);
-                                    {
-                                        list3 = new List(group2Director,
-                                                SWT.SINGLE | SWT.H_SCROLL
-                                                        | SWT.V_SCROLL
-                                                        | SWT.BORDER);
-                                        GridData list3LData = new GridData();
-                                        list3
-                                                .addSelectionListener(new SelectionAdapter() {
-                                                    public void widgetSelected(
-                                                            SelectionEvent evt) {
-                                                        System.out
-                                                                .println("list1.widgetSelected, event="
-                                                                        + evt);
-
-                                                        //TODO add your code for
-                                                        // list1.widgetSelected
-                                                    }
-                                                });
-                                        list3LData.verticalAlignment = GridData.FILL;
-                                        list3LData.horizontalAlignment = GridData.FILL;
-                                        list3LData.grabExcessHorizontalSpace = true;
-                                        list3LData.grabExcessVerticalSpace = true;
-                                        list3.setLayoutData(list3LData);
-                                    }
-                                }
-                            }
-                        }
                     }
                 }
                 {



From pschneider at sheep.berlios.de  Thu Nov  4 20:59:25 2004
From: pschneider at sheep.berlios.de (Philipp Schneider at BerliOS)
Date: Thu, 4 Nov 2004 20:59:25 +0100
Subject: [Provirent-svn-commit] r93 - project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui
Message-ID: <200411041959.iA4JxPhm029207@sheep.berlios.de>

Author: pschneider
Date: 2004-11-04 20:59:24 +0100 (Thu, 04 Nov 2004)
New Revision: 93

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/CompositeArtists.java
Log:


Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/CompositeArtists.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/CompositeArtists.java	2004-11-04 18:56:45 UTC (rev 92)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/CompositeArtists.java	2004-11-04 19:59:24 UTC (rev 93)
@@ -5,12 +5,16 @@
 import java.util.ResourceBundle;
 
 import org.apache.log4j.Logger;
+import org.eclipse.swt.SWT;
 import org.eclipse.swt.layout.GridLayout;
+import org.eclipse.swt.widgets.Button;
 import org.eclipse.swt.widgets.Composite;
 import org.eclipse.swt.widgets.Display;
 import org.eclipse.swt.widgets.Shell;
 
 
+import org.eclipse.swt.widgets.Group;
+import org.eclipse.swt.layout.GridData;
 /**
 * This code was generated using CloudGarden's Jigloo
 * SWT/Swing GUI Builder, which is free for non-commercial
@@ -37,6 +41,7 @@
     private final static int MODE_VIEW = 0;
 
     private final static int MODE_ADD = 1;
+    private Group groupArtist;
 
     private final static int MODE_EDIT = 2;
     
@@ -105,12 +110,35 @@
 	}
 
 	private void initGUI() {
-		try {
-			this.setLayout(new GridLayout());
-			this.layout();
-		} catch (Exception e) {
-			e.printStackTrace();
-		}
+        if (logger.isDebugEnabled()) {
+            logger.debug("initGUI() - start");
+        }
+
+        this.setLayout(new GridLayout());
+        this.setSize(816, 540);
+        {
+            groupArtist = new Group(this, SWT.NONE);
+            GridLayout groupArtistLayout = new GridLayout();
+            GridData groupArtistLData = new GridData();
+            groupArtistLData.grabExcessHorizontalSpace = true;
+            groupArtistLData.grabExcessVerticalSpace = true;
+            groupArtistLData.horizontalAlignment = GridData.FILL;
+            groupArtistLData.verticalAlignment = GridData.FILL;
+            groupArtist.setLayoutData(groupArtistLData);
+            groupArtistLayout.makeColumnsEqualWidth = true;
+            groupArtist.setLayout(groupArtistLayout);
+            groupArtist.setText("Artist");
+        }
+
+        this.layout();
+
+
+        
+        if (logger.isDebugEnabled()) {
+            logger.debug("initGUI() - end");
+        }
 	}
 
+	
+
 }



From pschneider at sheep.berlios.de  Sat Nov  6 14:43:18 2004
From: pschneider at sheep.berlios.de (Philipp Schneider at BerliOS)
Date: Sat, 6 Nov 2004 14:43:18 +0100
Subject: [Provirent-svn-commit] r94 - project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui
Message-ID: <200411061343.iA6DhI8h001705@sheep.berlios.de>

Author: pschneider
Date: 2004-11-06 14:43:17 +0100 (Sat, 06 Nov 2004)
New Revision: 94

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/ManagmentGui.java
Log:


Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/ManagmentGui.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/ManagmentGui.java	2004-11-04 19:59:24 UTC (rev 93)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/ManagmentGui.java	2004-11-06 13:43:17 UTC (rev 94)
@@ -191,18 +191,10 @@
      */
     public static void main(String[] args) {
         ManagmentGui inst = new ManagmentGui();
-        inst.showGUI();
         inst.run();
     }
 
-    /**
-     * Auto-generated method to display this org.eclipse.swt.widgets.Composite
-     * inside a new Shell.
-     */
-    public void showGUI() {
 
-    }
-
     public void run() {
         shell.open();
         while (!shell.isDisposed()) {
@@ -224,7 +216,7 @@
         l = PropertyResourceBundle.getBundle(
                 "de.hsharz.provirent.managment.gui.language.main", locale);
 
-        //hier muss noch was gemacht werden
+        //@todo hier muss noch was gemacht werden
         if (l == null) {
             System.exit(-1586);
         }
@@ -234,28 +226,60 @@
         shell = new Shell(display);
         shell.setText(l.getString("mainwindow.title"));
 
+        //set the Site
+        shell.setSize(MAIN_WINDOW_WIDTH, MAIN_WINDOW_HEIGHT);
+
         {
             //Register as a resource user - SWTResourceManager will
             //handle the obtaining and disposing of resources
             SWTResourceManager.registerResourceUser(shell);
         }
+        //set the layout for the shell
+        FillLayout thisLayout = new FillLayout(SWT.HORIZONTAL);
+        shell.setLayout(thisLayout);
+        
+       
 
-        //shell.setLayout(new FormLayout());
-        shell.setLayout(new FillLayout());
-
-        shell.layout();
-
         //init the db, so it saves time later
         //does that in a new Thread
         initDB();
         
         //init the rest
         initGUI();
+        
+        shell.layout();
 
     }
 
+    private void initGUI() {
+        try {
+
+            //set't the menu
+            rootMenu = new Menu(shell, SWT.BAR);
+            shell.setMenuBar(rootMenu);
+
+            //init the other menu's
+            initFileMenu();
+            initViewMenu();
+            initHelpMenu();
+
+            //the root composite
+            //this init's the maincomposite
+            initRootComposite();
+            initStatusComposite();
+
+            initMainTabFolder();
+
+            initFormatTab();
+
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+    }    
+    
+    
     /**
-     *  init the File menu
+     * init the File menu
      */
     private void initFileMenu() {
         if (rootMenu == null) {
@@ -385,19 +409,6 @@
 
     }
 
-    
-    private void initFormatTab() {
-        tabItemFormat = new CTabItem(cTabFolderMain, SWT.NONE);
-        tabItemFormat.setText(l.getString("tab.format.title"));
-        {
-            compositeFormate = new CompositeFormate(
-                cTabFolderMain,
-                SWT.NONE, statusLine, locale);
-            
-            tabItemFormat.setControl(compositeFormate);
-        }
-    }
-    
     private void initRootComposite() {
 
         //set up the root composite incl. layout
@@ -419,9 +430,8 @@
         //init the MainComposite
         initMainComposite();
     }
-    
+  
 
-
     private void initMainComposite(){
         compositeMain = new Composite(compositeRoot, SWT.EMBEDDED);
         GridLayout composite3Layout = new GridLayout();
@@ -440,79 +450,42 @@
         composite3LData.grabExcessVerticalSpace = true;
         compositeMain.setLayoutData(composite3LData);
     
-        //init the MainTabFolder
+
     }
     
     private void initMainTabFolder() {
-        
+        cTabFolderMain = new CTabFolder(compositeMain, SWT.CLOSE);
+        //cTabFolderMain.setSelection(null);
+        GridData cTabFolder1LData = new GridData();
+        cTabFolder1LData.grabExcessHorizontalSpace = true;
+        cTabFolder1LData.horizontalAlignment = GridData.FILL;
+        cTabFolder1LData.grabExcessVerticalSpace = true;
+        cTabFolder1LData.verticalAlignment = GridData.FILL;
+        cTabFolderMain.setLayoutData(cTabFolder1LData);
     }
     
-    private void initGUI() {
-        try {
+    private void initFormatTab() {
+        tabItemFormat = new CTabItem(cTabFolderMain, SWT.NONE);
+        tabItemFormat.setText(l.getString("tab.format.title"));
+        {
+            compositeFormate = new CompositeFormate(
+                cTabFolderMain,
+                SWT.NONE, statusLine, locale);
+            
+            tabItemFormat.setControl(compositeFormate);
+        }
+    }
+    
+    
 
-            //set't the menu
-            rootMenu = new Menu(shell, SWT.BAR);
-            shell.setMenuBar(rootMenu);
+ 
 
-            //init the other menu's
-            initFileMenu();
-            initViewMenu();
-            initHelpMenu();
+    
 
-            //set the layout for the shell
-            FillLayout thisLayout = new FillLayout(SWT.HORIZONTAL);
-            shell.setLayout(thisLayout);
 
-            //set the Site
-            shell.setSize(MAIN_WINDOW_WIDTH, MAIN_WINDOW_HEIGHT);
-            {
-                //the root composite
-                //this init's the maincomposite
-                initRootComposite();
-                initStatusComposite();
 
-                {
-                    {
-                        cTabFolderMain = new CTabFolder(compositeMain, SWT.CLOSE);
-                        //cTabFolderMain.setSelection(null);
-                        GridData cTabFolder1LData = new GridData();
-                        cTabFolder1LData.grabExcessHorizontalSpace = true;
-                        cTabFolder1LData.horizontalAlignment = GridData.FILL;
-                        cTabFolder1LData.grabExcessVerticalSpace = true;
-                        cTabFolder1LData.verticalAlignment = GridData.FILL;
-                        cTabFolderMain.setLayoutData(cTabFolder1LData);
-                        {
-                            initFormatTab();
-                            /*
-                            tabItemFormat = new CTabItem(cTabFolderMain, SWT.NONE);
-                            tabItemFormat.setText("Formate");
-                            {
-                                compositeFormate = new CompositeFormate(
-                                    cTabFolderMain,
-                                    SWT.NONE, statusLine, locale);
-                                
-                                tabItemFormat.setControl(compositeFormate);
-                            }
-                            */
-                        }
-                    }
-                }
-                {
-                    //init the Composite for statusline
-                    
-                    //compositeFormate.setStatusLine(statusLine);
 
-                }
-            }
-            shell.layout();
-        } catch (Exception e) {
-            e.printStackTrace();
-        }
-    }
 
-
-
-
     private void initStatusComposite() {
         compositeStatusLine = new Composite(compositeRoot, SWT.EMBEDDED);
         GridLayout composite2Layout = new GridLayout();



From pschneider at sheep.berlios.de  Mon Nov  8 15:57:35 2004
From: pschneider at sheep.berlios.de (Philipp Schneider at BerliOS)
Date: Mon, 8 Nov 2004 15:57:35 +0100
Subject: [Provirent-svn-commit] r95 - in project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui: . language
Message-ID: <200411081457.iA8EvZAX025233@sheep.berlios.de>

Author: pschneider
Date: 2004-11-08 15:57:34 +0100 (Mon, 08 Nov 2004)
New Revision: 95

Added:
   project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/CompositeDirectors.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/language/directors.properties
Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/ManagmentGui.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/language/main.properties
Log:
- composite actors und directors hinzugef?\195?\188gt

Added: project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/CompositeDirectors.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/CompositeDirectors.java	2004-11-06 13:43:17 UTC (rev 94)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/CompositeDirectors.java	2004-11-08 14:57:34 UTC (rev 95)
@@ -0,0 +1,163 @@
+package de.hsharz.provirent.managment.gui;
+
+import java.util.Locale;
+import java.util.PropertyResourceBundle;
+import java.util.ResourceBundle;
+
+import org.apache.log4j.Logger;
+import org.eclipse.swt.SWT;
+import org.eclipse.swt.layout.GridLayout;
+import org.eclipse.swt.widgets.Button;
+import org.eclipse.swt.widgets.Composite;
+import org.eclipse.swt.widgets.Display;
+import org.eclipse.swt.widgets.Shell;
+
+
+import org.eclipse.swt.widgets.Group;
+import org.eclipse.swt.layout.GridData;
+import org.eclipse.swt.widgets.Text;
+import com.cloudgarden.resource.SWTResourceManager;
+/**
+* This code was generated using CloudGarden's Jigloo
+* SWT/Swing GUI Builder, which is free for non-commercial
+* use. If Jigloo is being used commercially (ie, by a corporation,
+* company or business for any purpose whatever) then you
+* should purchase a license for each developer using Jigloo.
+* Please visit www.cloudgarden.com for details.
+* Use of Jigloo implies acceptance of these licensing terms.
+* *************************************
+* A COMMERCIAL LICENSE HAS NOT BEEN PURCHASED
+* for this machine, so Jigloo or this code cannot be used legally
+* for any corporate or commercial purpose.
+* *************************************
+*/
+public class CompositeDirectors extends AbstractComposite{
+
+    {
+        //Register as a resource user - SWTResourceManager will
+        //handle the obtaining and disposing of resources
+        SWTResourceManager.registerResourceUser(this);
+    }
+
+
+    /**
+     * Logger for this class
+     */
+    private static final Logger logger = Logger
+            .getLogger(CompositeDirectors.class);
+    
+    
+    private final static int MODE_VIEW = 0;
+
+    private final static int MODE_ADD = 1;
+    private Text text1;
+    private Group groupDirector;
+
+    private final static int MODE_EDIT = 2;
+    
+    private StatusLineStyledText statusLine;
+
+    private ResourceBundle l;
+    
+    private Composite parent;
+    
+    /*
+     * ?ndert die Sprache aller Elemente
+     * 
+     * @see de.hsharz.provirent.managment.gui.AbstractComposite#changeLanguage(java.util.Locale)
+     */
+    public void changeLanguage(Locale locale) {
+
+    }
+
+    /* 
+     * Init die Sprache (properties Datei)
+     * @see de.hsharz.provirent.managment.gui.AbstractComposite#initLanguage(java.util.Locale)
+     */
+    public void initLanguage(Locale locale) {
+
+        l = PropertyResourceBundle.getBundle(
+                "de.hsharz.provirent.managment.gui.language.directors", locale);
+
+    }
+    
+    
+	/**
+	* Auto-generated main method to display this 
+	* org.eclipse.swt.widgets.Composite inside a new Shell.
+	*/
+	public static void main(String[] args) {
+		showGUI();
+	}
+		
+	/**
+	* Auto-generated method to display this 
+	* org.eclipse.swt.widgets.Composite inside a new Shell.
+	*/
+	public static void showGUI() {
+		Display display = Display.getDefault();
+		Shell shell = new Shell(display);
+
+		shell.open();
+		while (!shell.isDisposed()) {
+			if (!display.readAndDispatch())
+				display.sleep();
+		}
+	}
+
+	public CompositeDirectors(Composite p, int style,
+            StatusLineStyledText status, Locale l) {
+	    super(p, style, status, l);
+        parent = p;
+        //Statusline wird gestzt
+        statusLine = status;
+        
+        //sprache wird init
+        initLanguage(l);
+	    
+	    
+		initGUI();
+	}
+
+	private void initGUI() {
+        if (logger.isDebugEnabled()) {
+            logger.debug("initGUI() - start");
+        }
+
+        this.setLayout(new GridLayout());
+        this.setSize(816, 540);
+        {
+            groupDirector = new Group(this, SWT.NONE);
+            GridLayout groupDirectorLayout = new GridLayout();
+            GridData groupDirectorLData = new GridData();
+            groupDirectorLData.grabExcessHorizontalSpace = true;
+            groupDirectorLData.grabExcessVerticalSpace = true;
+            groupDirectorLData.horizontalAlignment = GridData.FILL;
+            groupDirectorLData.verticalAlignment = GridData.FILL;
+            groupDirector.setLayoutData(groupDirectorLData);
+            groupDirectorLayout.makeColumnsEqualWidth = true;
+            groupDirector.setLayout(groupDirectorLayout);
+            groupDirector.setText("Director");
+            {
+                text1 = new Text(groupDirector, SWT.MULTI | SWT.WRAP);
+                text1.setText("text1");
+                GridData text1LData = new GridData();
+                text1.setBackground(SWTResourceManager.getColor(0, 255, 0));
+                text1LData.widthHint = 227;
+                text1LData.heightHint = 132;
+                text1.setLayoutData(text1LData);
+            }
+        }
+
+        this.layout();
+
+
+        
+        if (logger.isDebugEnabled()) {
+            logger.debug("initGUI() - end");
+        }
+	}
+
+	
+
+}

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/ManagmentGui.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/ManagmentGui.java	2004-11-06 13:43:17 UTC (rev 94)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/ManagmentGui.java	2004-11-08 14:57:34 UTC (rev 95)
@@ -91,6 +91,8 @@
  * *************************************
  */
  import de.hsharz.provirent.managment.gui.CompositeFormate;
+ import org.eclipse.swt.events.DisposeListener;
+ import org.eclipse.swt.events.DisposeEvent;
 /**
  * @author Philipp Schneider
  *  
@@ -107,19 +109,18 @@
 
     public final static int MODE_EDIT = 2;
 
-    private int mode_VideoFormat = 0;
-
-    private int mode_AudioFormat = 0;
-
     private static final int MAIN_WINDOW_WIDTH = 700;
 
     private static final int MAIN_WINDOW_HEIGHT = 500;
 
     private CTabFolder cTabFolderMain;
 
-    private CTabItem tabItemFormat;
+    private CTabItem tabItemFormat,tabItemActor,tabItemDirector;
 
     private CompositeFormate compositeFormate;
+    private CompositeActors compositeActor;
+    private CompositeDirectors compositeDirector;
+    
 
     private MenuItem aboutMenuItem;
 
@@ -227,7 +228,7 @@
         shell.setText(l.getString("mainwindow.title"));
 
         //set the Site
-        shell.setSize(MAIN_WINDOW_WIDTH, MAIN_WINDOW_HEIGHT);
+        shell.setSize(476, 216);
 
         {
             //Register as a resource user - SWTResourceManager will
@@ -265,11 +266,70 @@
 
             //the root composite
             //this init's the maincomposite
-            initRootComposite();
-            initStatusComposite();
+            //set up the root composite incl. layout
+            compositeRoot = new Composite(shell, SWT.NONE);
+            GridLayout composite1Layout = new GridLayout();
+            composite1Layout.marginWidth = 0;
+            composite1Layout.marginHeight = 0;
+            composite1Layout.horizontalSpacing = 0;
+            composite1Layout.verticalSpacing = 0;
+            GridData composite1LData = new GridData();
+            compositeRoot.setLayout(composite1Layout);
 
-            initMainTabFolder();
+            composite1LData.verticalAlignment = GridData.FILL;
+            composite1LData.horizontalAlignment = GridData.FILL;
+            composite1LData.grabExcessHorizontalSpace = true;
+            composite1LData.grabExcessVerticalSpace = true;
+            compositeRoot.setLayoutData(composite1LData);
 
+            //init the MainComposite
+
+           compositeMain = new Composite(compositeRoot, SWT.EMBEDDED);
+            GridLayout composite3Layout = new GridLayout();
+            composite3Layout.makeColumnsEqualWidth = true;
+            composite3Layout.horizontalSpacing = 0;
+            composite3Layout.marginHeight = 0;
+            composite3Layout.marginWidth = 0;
+            composite3Layout.verticalSpacing = 0;
+            GridData composite3LData = new GridData();
+            compositeMain.setLayout(composite3Layout);
+            compositeMain.setForeground(SWTResourceManager.getColor(0,
+                    255, 0));
+            composite3LData.verticalAlignment = GridData.FILL;
+            composite3LData.horizontalAlignment = GridData.FILL;
+            composite3LData.grabExcessHorizontalSpace = true;
+            composite3LData.grabExcessVerticalSpace = true;
+            compositeMain.setLayoutData(composite3LData);
+        
+            
+            //init Status Composite
+            compositeStatusLine = new Composite(compositeRoot, SWT.EMBEDDED);
+            GridLayout composite2Layout = new GridLayout();
+            composite2Layout.marginWidth = 0;
+            composite2Layout.marginHeight = 0;
+            composite2Layout.makeColumnsEqualWidth = true;
+            composite2Layout.horizontalSpacing = 0;
+            composite2Layout.verticalSpacing = 0;
+            GridData composite2LData = new GridData();
+            compositeStatusLine.setLayout(composite2Layout);
+            composite2LData.horizontalAlignment = GridData.FILL;
+            composite2LData.heightHint = 14;
+            composite2LData.grabExcessHorizontalSpace = true;
+            compositeStatusLine.setLayoutData(composite2LData);
+
+            //StatusLine
+            initStatusLine();
+            
+            //tabFolder
+            cTabFolderMain = new CTabFolder(compositeMain, SWT.CLOSE);
+            
+            GridData cTabFolder1LData = new GridData();
+            cTabFolder1LData.grabExcessHorizontalSpace = true;
+            cTabFolder1LData.horizontalAlignment = GridData.FILL;
+            cTabFolder1LData.grabExcessVerticalSpace = true;
+            cTabFolder1LData.verticalAlignment = GridData.FILL;
+            cTabFolderMain.setLayoutData(cTabFolder1LData);
+
             initFormatTab();
 
         } catch (Exception e) {
@@ -348,10 +408,34 @@
         viewDirectorMenuItem = new MenuItem(viewMenu, SWT.CHECK);
         viewDirectorMenuItem.setText(l.getString("menu.view.director"));
         viewDirectorMenuItem.setSelection(false);
+        viewDirectorMenuItem.addSelectionListener(new SelectionAdapter() {
+            public void widgetSelected(SelectionEvent evt) {
+				if(tabItemDirector == null || tabItemDirector.isDisposed()){
+				    initDirectorTab();
+				    return;   
+				}
+				
+				cTabFolderMain.setSelection(tabItemDirector);
+				viewDirectorMenuItem.setSelection(true);
+            
+            }
+        });        
 
         viewActorMenuItem = new MenuItem(viewMenu, SWT.CHECK);
         viewActorMenuItem.setText(l.getString("menu.view.actor"));
         viewActorMenuItem.setSelection(false);
+        viewActorMenuItem.addSelectionListener(new SelectionAdapter() {
+            public void widgetSelected(SelectionEvent evt) {
+				if(tabItemActor == null || tabItemActor.isDisposed()){
+				    initActorTab();
+				    return;   
+				}
+				
+				cTabFolderMain.setSelection(tabItemActor);
+				viewActorMenuItem.setSelection(true);
+            
+            }
+        });         
         
         viewGenreMenuItem = new MenuItem(viewMenu, SWT.CHECK);
         viewGenreMenuItem.setText(l.getString("menu.view.genre"));
@@ -408,65 +492,18 @@
         }
 
     }
-
-    private void initRootComposite() {
-
-        //set up the root composite incl. layout
-        compositeRoot = new Composite(shell, SWT.NONE);
-        GridLayout composite1Layout = new GridLayout();
-        composite1Layout.marginWidth = 0;
-        composite1Layout.marginHeight = 0;
-        composite1Layout.horizontalSpacing = 0;
-        composite1Layout.verticalSpacing = 0;
-        GridData composite1LData = new GridData();
-        compositeRoot.setLayout(composite1Layout);
-
-        composite1LData.verticalAlignment = GridData.FILL;
-        composite1LData.horizontalAlignment = GridData.FILL;
-        composite1LData.grabExcessHorizontalSpace = true;
-        composite1LData.grabExcessVerticalSpace = true;
-        compositeRoot.setLayoutData(composite1LData);
-
-        //init the MainComposite
-        initMainComposite();
-    }
-  
-
-    private void initMainComposite(){
-        compositeMain = new Composite(compositeRoot, SWT.EMBEDDED);
-        GridLayout composite3Layout = new GridLayout();
-        composite3Layout.makeColumnsEqualWidth = true;
-        composite3Layout.horizontalSpacing = 0;
-        composite3Layout.marginHeight = 0;
-        composite3Layout.marginWidth = 0;
-        composite3Layout.verticalSpacing = 0;
-        GridData composite3LData = new GridData();
-        compositeMain.setLayout(composite3Layout);
-        compositeMain.setForeground(SWTResourceManager.getColor(0,
-                255, 0));
-        composite3LData.verticalAlignment = GridData.FILL;
-        composite3LData.horizontalAlignment = GridData.FILL;
-        composite3LData.grabExcessHorizontalSpace = true;
-        composite3LData.grabExcessVerticalSpace = true;
-        compositeMain.setLayoutData(composite3LData);
+   
     
-
-    }
     
-    private void initMainTabFolder() {
-        cTabFolderMain = new CTabFolder(compositeMain, SWT.CLOSE);
-        //cTabFolderMain.setSelection(null);
-        GridData cTabFolder1LData = new GridData();
-        cTabFolder1LData.grabExcessHorizontalSpace = true;
-        cTabFolder1LData.horizontalAlignment = GridData.FILL;
-        cTabFolder1LData.grabExcessVerticalSpace = true;
-        cTabFolder1LData.verticalAlignment = GridData.FILL;
-        cTabFolderMain.setLayoutData(cTabFolder1LData);
-    }
     
     private void initFormatTab() {
         tabItemFormat = new CTabItem(cTabFolderMain, SWT.NONE);
         tabItemFormat.setText(l.getString("tab.format.title"));
+        tabItemFormat.addDisposeListener(new DisposeListener() {
+            public void widgetDisposed(DisposeEvent evt) {
+                viewFormatMenuItem.setSelection(false);
+           }
+        });
         {
             compositeFormate = new CompositeFormate(
                 cTabFolderMain,
@@ -477,34 +514,42 @@
     }
     
     
-
- 
-
+    private void initDirectorTab() {
+        tabItemDirector = new CTabItem(cTabFolderMain, SWT.NONE);
+        tabItemDirector.setText(l.getString("tab.actor.title"));
+        tabItemDirector.addDisposeListener(new DisposeListener() {
+            public void widgetDisposed(DisposeEvent evt) {
+                viewDirectorMenuItem.setSelection(false);
+           }
+        });        
+        {
+            compositeDirector = new CompositeDirectors(
+                cTabFolderMain,
+                SWT.NONE, statusLine, locale);
+            
+            tabItemDirector.setControl(compositeDirector);
+        }
+    }    
     
+    private void initActorTab() {
+        tabItemActor = new CTabItem(cTabFolderMain, SWT.NONE);
+        tabItemActor.setText(l.getString("tab.director.title"));
+        tabItemActor.addDisposeListener(new DisposeListener() {
+            public void widgetDisposed(DisposeEvent evt) {
+                viewActorMenuItem.setSelection(false);
+           }
+        });      
+        {
+            compositeActor = new CompositeActors(
+                cTabFolderMain,
+                SWT.NONE, statusLine, locale);
+            
+            tabItemActor.setControl(compositeActor);
+        }
+    }
 
 
 
-
-
-    private void initStatusComposite() {
-        compositeStatusLine = new Composite(compositeRoot, SWT.EMBEDDED);
-        GridLayout composite2Layout = new GridLayout();
-        composite2Layout.marginWidth = 0;
-        composite2Layout.marginHeight = 0;
-        composite2Layout.makeColumnsEqualWidth = true;
-        composite2Layout.horizontalSpacing = 0;
-        composite2Layout.verticalSpacing = 0;
-        GridData composite2LData = new GridData();
-        compositeStatusLine.setLayout(composite2Layout);
-        composite2LData.horizontalAlignment = GridData.FILL;
-        composite2LData.heightHint = 14;
-        composite2LData.grabExcessHorizontalSpace = true;
-        compositeStatusLine.setLayoutData(composite2LData);
-
-        initStatusLine();
-
-    }
-
     private void initStatusLine() {
         statusLine = new StatusLineStyledText(compositeStatusLine, SWT.READ_ONLY);
         statusLine.setText("");

Added: project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/language/directors.properties
===================================================================

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/language/main.properties
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/language/main.properties	2004-11-06 13:43:17 UTC (rev 94)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/language/main.properties	2004-11-08 14:57:34 UTC (rev 95)
@@ -5,8 +5,8 @@
 menu.file.save=Speichern
 menu.file.close=Schlie?en
 menu.file.exit=Beenden
+ 
 
-
 menu.view=Ansicht
 
 menu.view.format=Formate
@@ -33,7 +33,8 @@
 menu.help=Hilfe
 
 tab.format.title=Video-/AudioFormate
-tab.director.title=
+tab.actor.title=Schauspieler
+tab.director.title=Regie
 tab.actor.title=
 tab.genre.title=
 tab.subtitle.title=



From pschneider at sheep.berlios.de  Mon Nov  8 15:58:31 2004
From: pschneider at sheep.berlios.de (Philipp Schneider at BerliOS)
Date: Mon, 8 Nov 2004 15:58:31 +0100
Subject: [Provirent-svn-commit] r96 - project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui
Message-ID: <200411081458.iA8EwVGd025279@sheep.berlios.de>

Author: pschneider
Date: 2004-11-08 15:58:30 +0100 (Mon, 08 Nov 2004)
New Revision: 96

Added:
   project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/CompositeActors.java
Removed:
   project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/CompositeArtists.java
Log:


Copied: project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/CompositeActors.java (from rev 94, project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/CompositeArtists.java)
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/CompositeArtists.java	2004-11-06 13:43:17 UTC (rev 94)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/CompositeActors.java	2004-11-08 14:58:30 UTC (rev 96)
@@ -0,0 +1,163 @@
+package de.hsharz.provirent.managment.gui;
+
+import java.util.Locale;
+import java.util.PropertyResourceBundle;
+import java.util.ResourceBundle;
+
+import org.apache.log4j.Logger;
+import org.eclipse.swt.SWT;
+import org.eclipse.swt.layout.GridLayout;
+import org.eclipse.swt.widgets.Button;
+import org.eclipse.swt.widgets.Composite;
+import org.eclipse.swt.widgets.Display;
+import org.eclipse.swt.widgets.Shell;
+
+
+import org.eclipse.swt.widgets.Group;
+import org.eclipse.swt.layout.GridData;
+import com.cloudgarden.resource.SWTResourceManager;
+import org.eclipse.swt.widgets.Text;
+/**
+* This code was generated using CloudGarden's Jigloo
+* SWT/Swing GUI Builder, which is free for non-commercial
+* use. If Jigloo is being used commercially (ie, by a corporation,
+* company or business for any purpose whatever) then you
+* should purchase a license for each developer using Jigloo.
+* Please visit www.cloudgarden.com for details.
+* Use of Jigloo implies acceptance of these licensing terms.
+* *************************************
+* A COMMERCIAL LICENSE HAS NOT BEEN PURCHASED
+* for this machine, so Jigloo or this code cannot be used legally
+* for any corporate or commercial purpose.
+* *************************************
+*/
+public class CompositeActors extends AbstractComposite{
+
+    {
+        //Register as a resource user - SWTResourceManager will
+        //handle the obtaining and disposing of resources
+        SWTResourceManager.registerResourceUser(this);
+    }
+
+
+    /**
+     * Logger for this class
+     */
+    private static final Logger logger = Logger
+            .getLogger(CompositeActors.class);
+    
+    
+    private final static int MODE_VIEW = 0;
+
+    private final static int MODE_ADD = 1;
+    private Text text1;
+    private Group groupActor;
+
+    private final static int MODE_EDIT = 2;
+    
+    private StatusLineStyledText statusLine;
+
+    private ResourceBundle l;
+    
+    private Composite parent;
+    
+    /*
+     * ?ndert die Sprache aller Elemente
+     * 
+     * @see de.hsharz.provirent.managment.gui.AbstractComposite#changeLanguage(java.util.Locale)
+     */
+    public void changeLanguage(Locale locale) {
+
+    }
+
+    /* 
+     * Init die Sprache (properties Datei)
+     * @see de.hsharz.provirent.managment.gui.AbstractComposite#initLanguage(java.util.Locale)
+     */
+    public void initLanguage(Locale locale) {
+
+        l = PropertyResourceBundle.getBundle(
+                "de.hsharz.provirent.managment.gui.language.Actors", locale);
+
+    }
+    
+    
+	/**
+	* Auto-generated main method to display this 
+	* org.eclipse.swt.widgets.Composite inside a new Shell.
+	*/
+	public static void main(String[] args) {
+		showGUI();
+	}
+		
+	/**
+	* Auto-generated method to display this 
+	* org.eclipse.swt.widgets.Composite inside a new Shell.
+	*/
+	public static void showGUI() {
+		Display display = Display.getDefault();
+		Shell shell = new Shell(display);
+
+		shell.open();
+		while (!shell.isDisposed()) {
+			if (!display.readAndDispatch())
+				display.sleep();
+		}
+	}
+
+	public CompositeActors(Composite p, int style,
+            StatusLineStyledText status, Locale l) {
+	    super(p, style, status, l);
+        parent = p;
+        //Statusline wird gestzt
+        statusLine = status;
+        
+        //sprache wird init
+        initLanguage(l);
+	    
+	    
+		initGUI();
+	}
+
+	private void initGUI() {
+        if (logger.isDebugEnabled()) {
+            logger.debug("initGUI() - start");
+        }
+
+        this.setLayout(new GridLayout());
+        this.setSize(816, 540);
+        {
+            groupActor = new Group(this, SWT.NONE);
+            GridLayout groupActorLayout = new GridLayout();
+            GridData groupActorLData = new GridData();
+            groupActorLData.grabExcessHorizontalSpace = true;
+            groupActorLData.grabExcessVerticalSpace = true;
+            groupActorLData.horizontalAlignment = GridData.FILL;
+            groupActorLData.verticalAlignment = GridData.FILL;
+            groupActor.setLayoutData(groupActorLData);
+            groupActorLayout.makeColumnsEqualWidth = true;
+            groupActor.setLayout(groupActorLayout);
+            groupActor.setText("Actor");
+            {
+                text1 = new Text(groupActor, SWT.MULTI | SWT.WRAP);
+                text1.setText("text1");
+                GridData text1LData = new GridData();
+                text1.setBackground(SWTResourceManager.getColor(255, 0, 0));
+                text1LData.widthHint = 336;
+                text1LData.heightHint = 173;
+                text1.setLayoutData(text1LData);
+            }
+        }
+
+        this.layout();
+
+
+        
+        if (logger.isDebugEnabled()) {
+            logger.debug("initGUI() - end");
+        }
+	}
+
+	
+
+}

Deleted: project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/CompositeArtists.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/CompositeArtists.java	2004-11-08 14:57:34 UTC (rev 95)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/CompositeArtists.java	2004-11-08 14:58:30 UTC (rev 96)
@@ -1,144 +0,0 @@
-package de.hsharz.provirent.managment.gui;
-
-import java.util.Locale;
-import java.util.PropertyResourceBundle;
-import java.util.ResourceBundle;
-
-import org.apache.log4j.Logger;
-import org.eclipse.swt.SWT;
-import org.eclipse.swt.layout.GridLayout;
-import org.eclipse.swt.widgets.Button;
-import org.eclipse.swt.widgets.Composite;
-import org.eclipse.swt.widgets.Display;
-import org.eclipse.swt.widgets.Shell;
-
-
-import org.eclipse.swt.widgets.Group;
-import org.eclipse.swt.layout.GridData;
-/**
-* This code was generated using CloudGarden's Jigloo
-* SWT/Swing GUI Builder, which is free for non-commercial
-* use. If Jigloo is being used commercially (ie, by a corporation,
-* company or business for any purpose whatever) then you
-* should purchase a license for each developer using Jigloo.
-* Please visit www.cloudgarden.com for details.
-* Use of Jigloo implies acceptance of these licensing terms.
-* *************************************
-* A COMMERCIAL LICENSE HAS NOT BEEN PURCHASED
-* for this machine, so Jigloo or this code cannot be used legally
-* for any corporate or commercial purpose.
-* *************************************
-*/
-public class CompositeArtists extends AbstractComposite{
-
-    /**
-     * Logger for this class
-     */
-    private static final Logger logger = Logger
-            .getLogger(CompositeArtists.class);
-    
-    
-    private final static int MODE_VIEW = 0;
-
-    private final static int MODE_ADD = 1;
-    private Group groupArtist;
-
-    private final static int MODE_EDIT = 2;
-    
-    private StatusLineStyledText statusLine;
-
-    private ResourceBundle l;
-    
-    private Composite parent;
-    
-    /*
-     * ?ndert die Sprache aller Elemente
-     * 
-     * @see de.hsharz.provirent.managment.gui.AbstractComposite#changeLanguage(java.util.Locale)
-     */
-    public void changeLanguage(Locale locale) {
-
-    }
-
-    /* 
-     * Init die Sprache (properties Datei)
-     * @see de.hsharz.provirent.managment.gui.AbstractComposite#initLanguage(java.util.Locale)
-     */
-    public void initLanguage(Locale locale) {
-
-        l = PropertyResourceBundle.getBundle(
-                "de.hsharz.provirent.managment.gui.language.artists", locale);
-
-    }
-    
-    
-	/**
-	* Auto-generated main method to display this 
-	* org.eclipse.swt.widgets.Composite inside a new Shell.
-	*/
-	public static void main(String[] args) {
-		showGUI();
-	}
-		
-	/**
-	* Auto-generated method to display this 
-	* org.eclipse.swt.widgets.Composite inside a new Shell.
-	*/
-	public static void showGUI() {
-		Display display = Display.getDefault();
-		Shell shell = new Shell(display);
-
-		shell.open();
-		while (!shell.isDisposed()) {
-			if (!display.readAndDispatch())
-				display.sleep();
-		}
-	}
-
-	public CompositeArtists(Composite p, int style,
-            StatusLineStyledText status, Locale l) {
-	    super(p, style, status, l);
-        parent = p;
-        //Statusline wird gestzt
-        statusLine = status;
-        
-        //sprache wird init
-        initLanguage(l);
-	    
-	    
-		initGUI();
-	}
-
-	private void initGUI() {
-        if (logger.isDebugEnabled()) {
-            logger.debug("initGUI() - start");
-        }
-
-        this.setLayout(new GridLayout());
-        this.setSize(816, 540);
-        {
-            groupArtist = new Group(this, SWT.NONE);
-            GridLayout groupArtistLayout = new GridLayout();
-            GridData groupArtistLData = new GridData();
-            groupArtistLData.grabExcessHorizontalSpace = true;
-            groupArtistLData.grabExcessVerticalSpace = true;
-            groupArtistLData.horizontalAlignment = GridData.FILL;
-            groupArtistLData.verticalAlignment = GridData.FILL;
-            groupArtist.setLayoutData(groupArtistLData);
-            groupArtistLayout.makeColumnsEqualWidth = true;
-            groupArtist.setLayout(groupArtistLayout);
-            groupArtist.setText("Artist");
-        }
-
-        this.layout();
-
-
-        
-        if (logger.isDebugEnabled()) {
-            logger.debug("initGUI() - end");
-        }
-	}
-
-	
-
-}



From pschneider at sheep.berlios.de  Mon Nov  8 16:28:56 2004
From: pschneider at sheep.berlios.de (Philipp Schneider at BerliOS)
Date: Mon, 8 Nov 2004 16:28:56 +0100
Subject: [Provirent-svn-commit] r97 - in project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui: . language
Message-ID: <200411081528.iA8FSuXL026282@sheep.berlios.de>

Author: pschneider
Date: 2004-11-08 16:28:54 +0100 (Mon, 08 Nov 2004)
New Revision: 97

Added:
   project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/CompositeGenre.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/CompositeLanguage.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/language/actors.properties
   project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/language/genre.properties
   project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/language/language.properties
Removed:
   project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/language/artists.properties
Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/CompositeActors.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/ManagmentGui.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/language/main.properties
Log:
- composite genre und language hinzugef?\195?\188gt
- sprachdateien
- in ManagmentGui implementiert

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/CompositeActors.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/CompositeActors.java	2004-11-08 14:58:30 UTC (rev 96)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/CompositeActors.java	2004-11-08 15:28:54 UTC (rev 97)
@@ -77,7 +77,7 @@
     public void initLanguage(Locale locale) {
 
         l = PropertyResourceBundle.getBundle(
-                "de.hsharz.provirent.managment.gui.language.Actors", locale);
+                "de.hsharz.provirent.managment.gui.language.actors", locale);
 
     }
     

Added: project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/CompositeGenre.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/CompositeGenre.java	2004-11-08 14:58:30 UTC (rev 96)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/CompositeGenre.java	2004-11-08 15:28:54 UTC (rev 97)
@@ -0,0 +1,163 @@
+package de.hsharz.provirent.managment.gui;
+
+import java.util.Locale;
+import java.util.PropertyResourceBundle;
+import java.util.ResourceBundle;
+
+import org.apache.log4j.Logger;
+import org.eclipse.swt.SWT;
+import org.eclipse.swt.layout.GridLayout;
+import org.eclipse.swt.widgets.Button;
+import org.eclipse.swt.widgets.Composite;
+import org.eclipse.swt.widgets.Display;
+import org.eclipse.swt.widgets.Shell;
+
+
+import org.eclipse.swt.widgets.Group;
+import org.eclipse.swt.layout.GridData;
+import com.cloudgarden.resource.SWTResourceManager;
+import org.eclipse.swt.widgets.Text;
+/**
+* This code was generated using CloudGarden's Jigloo
+* SWT/Swing GUI Builder, which is free for non-commercial
+* use. If Jigloo is being used commercially (ie, by a corporation,
+* company or business for any purpose whatever) then you
+* should purchase a license for each developer using Jigloo.
+* Please visit www.cloudgarden.com for details.
+* Use of Jigloo implies acceptance of these licensing terms.
+* *************************************
+* A COMMERCIAL LICENSE HAS NOT BEEN PURCHASED
+* for this machine, so Jigloo or this code cannot be used legally
+* for any corporate or commercial purpose.
+* *************************************
+*/
+public class CompositeGenre extends AbstractComposite{
+
+    {
+        //Register as a resource user - SWTResourceManager will
+        //handle the obtaining and disposing of resources
+        SWTResourceManager.registerResourceUser(this);
+    }
+
+
+    /**
+     * Logger for this class
+     */
+    private static final Logger logger = Logger
+            .getLogger(CompositeGenre.class);
+    
+    
+    private final static int MODE_VIEW = 0;
+
+    private final static int MODE_ADD = 1;
+    private Text text1;
+    private Group groupGenre;
+
+    private final static int MODE_EDIT = 2;
+    
+    private StatusLineStyledText statusLine;
+
+    private ResourceBundle l;
+    
+    private Composite parent;
+    
+    /*
+     * ?ndert die Sprache aller Elemente
+     * 
+     * @see de.hsharz.provirent.managment.gui.AbstractComposite#changeLanguage(java.util.Locale)
+     */
+    public void changeLanguage(Locale locale) {
+
+    }
+
+    /* 
+     * Init die Sprache (properties Datei)
+     * @see de.hsharz.provirent.managment.gui.AbstractComposite#initLanguage(java.util.Locale)
+     */
+    public void initLanguage(Locale locale) {
+
+        l = PropertyResourceBundle.getBundle(
+                "de.hsharz.provirent.managment.gui.language.genre", locale);
+
+    }
+    
+    
+	/**
+	* Auto-generated main method to display this 
+	* org.eclipse.swt.widgets.Composite inside a new Shell.
+	*/
+	public static void main(String[] args) {
+		showGUI();
+	}
+		
+	/**
+	* Auto-generated method to display this 
+	* org.eclipse.swt.widgets.Composite inside a new Shell.
+	*/
+	public static void showGUI() {
+		Display display = Display.getDefault();
+		Shell shell = new Shell(display);
+
+		shell.open();
+		while (!shell.isDisposed()) {
+			if (!display.readAndDispatch())
+				display.sleep();
+		}
+	}
+
+	public CompositeGenre(Composite p, int style,
+            StatusLineStyledText status, Locale l) {
+	    super(p, style, status, l);
+        parent = p;
+        //Statusline wird gestzt
+        statusLine = status;
+        
+        //sprache wird init
+        initLanguage(l);
+	    
+	    
+		initGUI();
+	}
+
+	private void initGUI() {
+        if (logger.isDebugEnabled()) {
+            logger.debug("initGUI() - start");
+        }
+
+        this.setLayout(new GridLayout());
+        this.setSize(816, 540);
+        {
+            groupGenre = new Group(this, SWT.NONE);
+            GridLayout groupGenreLayout = new GridLayout();
+            GridData groupGenreLData = new GridData();
+            groupGenreLData.grabExcessHorizontalSpace = true;
+            groupGenreLData.grabExcessVerticalSpace = true;
+            groupGenreLData.horizontalAlignment = GridData.FILL;
+            groupGenreLData.verticalAlignment = GridData.FILL;
+            groupGenre.setLayoutData(groupGenreLData);
+            groupGenreLayout.makeColumnsEqualWidth = true;
+            groupGenre.setLayout(groupGenreLayout);
+            groupGenre.setText("Genre");
+            {
+                text1 = new Text(groupGenre, SWT.MULTI | SWT.WRAP);
+                text1.setText("text1");
+                GridData text1LData = new GridData();
+                text1.setBackground(SWTResourceManager.getColor(150, 50, 0));
+                text1LData.widthHint = 336;
+                text1LData.heightHint = 173;
+                text1.setLayoutData(text1LData);
+            }
+        }
+
+        this.layout();
+
+
+        
+        if (logger.isDebugEnabled()) {
+            logger.debug("initGUI() - end");
+        }
+	}
+
+	
+
+}

Added: project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/CompositeLanguage.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/CompositeLanguage.java	2004-11-08 14:58:30 UTC (rev 96)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/CompositeLanguage.java	2004-11-08 15:28:54 UTC (rev 97)
@@ -0,0 +1,163 @@
+package de.hsharz.provirent.managment.gui;
+
+import java.util.Locale;
+import java.util.PropertyResourceBundle;
+import java.util.ResourceBundle;
+
+import org.apache.log4j.Logger;
+import org.eclipse.swt.SWT;
+import org.eclipse.swt.layout.GridLayout;
+import org.eclipse.swt.widgets.Button;
+import org.eclipse.swt.widgets.Composite;
+import org.eclipse.swt.widgets.Display;
+import org.eclipse.swt.widgets.Shell;
+
+
+import org.eclipse.swt.widgets.Group;
+import org.eclipse.swt.layout.GridData;
+import com.cloudgarden.resource.SWTResourceManager;
+import org.eclipse.swt.widgets.Text;
+/**
+* This code was generated using CloudGarden's Jigloo
+* SWT/Swing GUI Builder, which is free for non-commercial
+* use. If Jigloo is being used commercially (ie, by a corporation,
+* company or business for any purpose whatever) then you
+* should purchase a license for each developer using Jigloo.
+* Please visit www.cloudgarden.com for details.
+* Use of Jigloo implies acceptance of these licensing terms.
+* *************************************
+* A COMMERCIAL LICENSE HAS NOT BEEN PURCHASED
+* for this machine, so Jigloo or this code cannot be used legally
+* for any corporate or commercial purpose.
+* *************************************
+*/
+public class CompositeLanguage extends AbstractComposite{
+
+    {
+        //Register as a resource user - SWTResourceManager will
+        //handle the obtaining and disposing of resources
+        SWTResourceManager.registerResourceUser(this);
+    }
+
+
+    /**
+     * Logger for this class
+     */
+    private static final Logger logger = Logger
+            .getLogger(CompositeLanguage.class);
+    
+    
+    private final static int MODE_VIEW = 0;
+
+    private final static int MODE_ADD = 1;
+    private Text text1;
+    private Group groupLanguage;
+
+    private final static int MODE_EDIT = 2;
+    
+    private StatusLineStyledText statusLine;
+
+    private ResourceBundle l;
+    
+    private Composite parent;
+    
+    /*
+     * ?ndert die Sprache aller Elemente
+     * 
+     * @see de.hsharz.provirent.managment.gui.AbstractComposite#changeLanguage(java.util.Locale)
+     */
+    public void changeLanguage(Locale locale) {
+
+    }
+
+    /* 
+     * Init die Sprache (properties Datei)
+     * @see de.hsharz.provirent.managment.gui.AbstractComposite#initLanguage(java.util.Locale)
+     */
+    public void initLanguage(Locale locale) {
+
+        l = PropertyResourceBundle.getBundle(
+                "de.hsharz.provirent.managment.gui.language.language", locale);
+
+    }
+    
+    
+	/**
+	* Auto-generated main method to display this 
+	* org.eclipse.swt.widgets.Composite inside a new Shell.
+	*/
+	public static void main(String[] args) {
+		showGUI();
+	}
+		
+	/**
+	* Auto-generated method to display this 
+	* org.eclipse.swt.widgets.Composite inside a new Shell.
+	*/
+	public static void showGUI() {
+		Display display = Display.getDefault();
+		Shell shell = new Shell(display);
+
+		shell.open();
+		while (!shell.isDisposed()) {
+			if (!display.readAndDispatch())
+				display.sleep();
+		}
+	}
+
+	public CompositeLanguage(Composite p, int style,
+            StatusLineStyledText status, Locale l) {
+	    super(p, style, status, l);
+        parent = p;
+        //Statusline wird gestzt
+        statusLine = status;
+        
+        //sprache wird init
+        initLanguage(l);
+	    
+	    
+		initGUI();
+	}
+
+	private void initGUI() {
+        if (logger.isDebugEnabled()) {
+            logger.debug("initGUI() - start");
+        }
+
+        this.setLayout(new GridLayout());
+        this.setSize(816, 540);
+        {
+            groupLanguage = new Group(this, SWT.NONE);
+            GridLayout groupLanguageLayout = new GridLayout();
+            GridData groupLanguageLData = new GridData();
+            groupLanguageLData.grabExcessHorizontalSpace = true;
+            groupLanguageLData.grabExcessVerticalSpace = true;
+            groupLanguageLData.horizontalAlignment = GridData.FILL;
+            groupLanguageLData.verticalAlignment = GridData.FILL;
+            groupLanguage.setLayoutData(groupLanguageLData);
+            groupLanguageLayout.makeColumnsEqualWidth = true;
+            groupLanguage.setLayout(groupLanguageLayout);
+            groupLanguage.setText("Language");
+            {
+                text1 = new Text(groupLanguage, SWT.MULTI | SWT.WRAP);
+                text1.setText("text1");
+                GridData text1LData = new GridData();
+                text1.setBackground(SWTResourceManager.getColor(150, 255, 50));
+                text1LData.widthHint = 336;
+                text1LData.heightHint = 173;
+                text1.setLayoutData(text1LData);
+            }
+        }
+
+        this.layout();
+
+
+        
+        if (logger.isDebugEnabled()) {
+            logger.debug("initGUI() - end");
+        }
+	}
+
+	
+
+}

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/ManagmentGui.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/ManagmentGui.java	2004-11-08 14:58:30 UTC (rev 96)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/ManagmentGui.java	2004-11-08 15:28:54 UTC (rev 97)
@@ -115,11 +115,13 @@
 
     private CTabFolder cTabFolderMain;
 
-    private CTabItem tabItemFormat,tabItemActor,tabItemDirector;
+    private CTabItem tabItemFormat,tabItemActor,tabItemDirector,tabItemLanguage,tabItemGenre;
 
     private CompositeFormate compositeFormate;
     private CompositeActors compositeActor;
     private CompositeDirectors compositeDirector;
+    private CompositeGenre compositeGenre;
+    private CompositeLanguage compositeLanguage;
     
 
     private MenuItem aboutMenuItem;
@@ -197,6 +199,7 @@
 
 
     public void run() {
+        shell.layout();
         shell.open();
         while (!shell.isDisposed()) {
             if (!display.readAndDispatch())
@@ -209,7 +212,6 @@
         if (logger.isDebugEnabled()) {
             logger.debug("ManagmentGui() Locale: " + Locale.getDefault());
         }
-
         
         locale = Locale.getDefault();
         
@@ -248,7 +250,7 @@
         //init the rest
         initGUI();
         
-        shell.layout();
+        //shell.layout();
 
     }
 
@@ -439,16 +441,40 @@
         
         viewGenreMenuItem = new MenuItem(viewMenu, SWT.CHECK);
         viewGenreMenuItem.setText(l.getString("menu.view.genre"));
-        viewActorMenuItem.setSelection(false);
+        viewGenreMenuItem.setSelection(false);
+        viewGenreMenuItem.addSelectionListener(new SelectionAdapter() {
+            public void widgetSelected(SelectionEvent evt) {
+				if(tabItemGenre == null || tabItemGenre.isDisposed()){
+				    initGenreTab();
+				    return;   
+				}
+				
+				cTabFolderMain.setSelection(tabItemGenre);
+				viewGenreMenuItem.setSelection(true);
+            
+            }
+        }); 
 
-        viewSubtitleMenuItem = new MenuItem(viewMenu, SWT.CHECK);
-        viewSubtitleMenuItem.setText(l.getString("menu.view.subtitle"));
-        viewSubtitleMenuItem.setSelection(false);
-        
         viewLanguageMenuItem = new MenuItem(viewMenu, SWT.CHECK);
         viewLanguageMenuItem.setText(l.getString("menu.view.language"));
         viewLanguageMenuItem.setSelection(false);
+        viewLanguageMenuItem.addSelectionListener(new SelectionAdapter() {
+            public void widgetSelected(SelectionEvent evt) {
+				if(tabItemLanguage == null || tabItemLanguage.isDisposed()){
+				    initLanguageTab();
+				    return;   
+				}
+				
+				cTabFolderMain.setSelection(tabItemLanguage);
+				viewGenreMenuItem.setSelection(true);
+            
+            }
+        });         
 
+        viewSubtitleMenuItem = new MenuItem(viewMenu, SWT.CHECK);
+        viewSubtitleMenuItem.setText(l.getString("menu.view.subtitle"));
+        viewSubtitleMenuItem.setSelection(false);        
+        
         viewStatusMenuItem = new MenuItem(viewMenu, SWT.CHECK);
         viewStatusMenuItem.setText(l.getString("menu.view.status"));
         viewStatusMenuItem.setSelection(false);
@@ -499,6 +525,7 @@
     private void initFormatTab() {
         tabItemFormat = new CTabItem(cTabFolderMain, SWT.NONE);
         tabItemFormat.setText(l.getString("tab.format.title"));
+        /*
         tabItemFormat.addDisposeListener(new DisposeListener() {
             public void widgetDisposed(DisposeEvent evt) {
                 viewFormatMenuItem.setSelection(false);
@@ -511,12 +538,14 @@
             
             tabItemFormat.setControl(compositeFormate);
         }
+        */
     }
     
     
     private void initDirectorTab() {
         tabItemDirector = new CTabItem(cTabFolderMain, SWT.NONE);
-        tabItemDirector.setText(l.getString("tab.actor.title"));
+        tabItemDirector.setText(l.getString("tab.director.title"));
+        /*
         tabItemDirector.addDisposeListener(new DisposeListener() {
             public void widgetDisposed(DisposeEvent evt) {
                 viewDirectorMenuItem.setSelection(false);
@@ -529,11 +558,13 @@
             
             tabItemDirector.setControl(compositeDirector);
         }
+        */
     }    
     
     private void initActorTab() {
         tabItemActor = new CTabItem(cTabFolderMain, SWT.NONE);
-        tabItemActor.setText(l.getString("tab.director.title"));
+        tabItemActor.setText(l.getString("tab.actor.title"));
+        /*
         tabItemActor.addDisposeListener(new DisposeListener() {
             public void widgetDisposed(DisposeEvent evt) {
                 viewActorMenuItem.setSelection(false);
@@ -546,10 +577,45 @@
             
             tabItemActor.setControl(compositeActor);
         }
+        */
     }
 
+    private void initGenreTab() {
+        tabItemGenre = new CTabItem(cTabFolderMain, SWT.NONE);
+        tabItemGenre.setText(l.getString("tab.genre.title"));
+        /*
+        tabItemGenre.addDisposeListener(new DisposeListener() {
+            public void widgetDisposed(DisposeEvent evt) {
+                viewGenreMenuItem.setSelection(false);
+           }
+        });      
+        {
+            compositeGenre = new CompositeGenre(
+                cTabFolderMain,
+                SWT.NONE, statusLine, locale);
+            
+            tabItemGenre.setControl(compositeGenre);
+        }
+        */
+    }
 
-
+    private void initLanguageTab() {
+        tabItemLanguage = new CTabItem(cTabFolderMain, SWT.NONE);
+        tabItemLanguage.setText(l.getString("tab.language.title"));
+        tabItemLanguage.addDisposeListener(new DisposeListener() {
+            public void widgetDisposed(DisposeEvent evt) {
+                viewLanguageMenuItem.setSelection(false);
+           }
+        });      
+        {
+            compositeLanguage = new CompositeLanguage(
+                cTabFolderMain,
+                SWT.NONE, statusLine, locale);
+            
+            tabItemLanguage.setControl(compositeLanguage);
+        }
+    }    
+    
     private void initStatusLine() {
         statusLine = new StatusLineStyledText(compositeStatusLine, SWT.READ_ONLY);
         statusLine.setText("");

Added: project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/language/actors.properties
===================================================================

Deleted: project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/language/artists.properties
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/language/artists.properties	2004-11-08 14:58:30 UTC (rev 96)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/language/artists.properties	2004-11-08 15:28:54 UTC (rev 97)
@@ -1,34 +0,0 @@
-
-error=Fehler
-button.new=Neu
-button.edit=Bearbeiten
-button.delete=L?schen
-button.save=Speichern
-button.cancel=Abbruch
-
-videoformat.group.label=VideoFormat
-videoformat.groupoverview.label=?berblick
-videoformat.groupoverview.columnid=id
-videoformat.groupoverview.columnname=Name
-videoformat.groupoverview.columnshortname=Abk.
-
-
-videoformat.groupoverview.searchlabel=Suche nach
-videoformat.groupdetail.label=Detail
-videoformat.groupdetail.idlabel=VideoFormat ID
-videoformat.groupdetail.namelabel=VideoFormat Name
-videoformat.groupdetail.shortcutlabel=VideoFormat Abk?rzung
-
-videoformat.groupdetail.savebutton.warn.noname.title=Datensatz speichern
-videoformat.groupdetail.savebutton.warn.noname.msg=Der Datensatz kann nicht gespeichert werden. \n Bitte geben Sie einen Namen an
-videoformat.groupdetail.savebutton.newok=Speichern des neuen VideoFormates erfolgreich.
-videoformat.groupdetail.savebutton.editok=?ndern des VideoFormates erfolgreich.
-
-videoformat.groupdetail.savebutton.errorsave=Datenbankfehler beim Speichern.
-videoformat.groupdetail.savebutton.errordb=Datenbankfehler beim Herstellen der Verbindung.(save).
-
-videoformat.groupdetail.deletebutton.question.header=Wirklich l?schen?
-videoformat.groupdetail.deletebutton.question.text=Wollen Sie den Datensatz {0} wirklich l?schen?
-videoformat.groupdetail.deletebutton.newok=Datensatz wurde erfolgreich gel?scht.
-videoformat.groupdetail.deletebutton.errorsave=Datenbankfehler beim L?schen.
-videoformat.groupdetail.deletebutton.errordb=Datenbankfehler beim Herstellen der Verbindung(del).

Added: project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/language/genre.properties
===================================================================

Added: project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/language/language.properties
===================================================================

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/language/main.properties
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/language/main.properties	2004-11-08 14:58:30 UTC (rev 96)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/language/main.properties	2004-11-08 15:28:54 UTC (rev 97)
@@ -33,12 +33,11 @@
 menu.help=Hilfe
 
 tab.format.title=Video-/AudioFormate
-tab.actor.title=Schauspieler
+tab.actor.title=Darsteller
 tab.director.title=Regie
-tab.actor.title=
-tab.genre.title=
+tab.genre.title=Genre
 tab.subtitle.title=
-tab.language.title=
+tab.language.title=Sprache
 tab.status.title=
 tab.condition.title=
 tab.movie.title=



From sforstner at sheep.berlios.de  Mon Nov  8 23:18:58 2004
From: sforstner at sheep.berlios.de (Stefan at BerliOS)
Date: Mon, 8 Nov 2004 23:18:58 +0100
Subject: [Provirent-svn-commit] r98 - timetable
Message-ID: <200411082218.iA8MIwuE002194@sheep.berlios.de>

Author: sforstner
Date: 2004-11-08 23:18:56 +0100 (Mon, 08 Nov 2004)
New Revision: 98

Modified:
   timetable/sforstner.txt
Log:


Modified: timetable/sforstner.txt
===================================================================
--- timetable/sforstner.txt	2004-11-08 15:28:54 UTC (rev 97)
+++ timetable/sforstner.txt	2004-11-08 22:18:56 UTC (rev 98)
@@ -1 +1,3 @@
 Datum		h	Beschreibung
+01.11.2004	2	Struts - Loginformular
+08.11.2004	2	Struts - Registrate-Formular
\ No newline at end of file



From sforstner at sheep.berlios.de  Mon Nov  8 23:24:08 2004
From: sforstner at sheep.berlios.de (Stefan at BerliOS)
Date: Mon, 8 Nov 2004 23:24:08 +0100
Subject: [Provirent-svn-commit] r99 - in project_src/strutstest: WEB-INF WEB-INF/classes/de/hsharz/provirent/strutstest WEB-INF/classes/de/hsharz/provirent/strutstest/action WEB-INF/classes/de/hsharz/provirent/strutstest/forms WEB-INF/classes/resources WEB-INF/src/de/hsharz/provirent/strutstest WEB-INF/src/de/hsharz/provirent/strutstest/action WEB-INF/src/de/hsharz/provirent/strutstest/forms WEB-INF/src/resources pages
Message-ID: <200411082224.iA8MO8qS002418@sheep.berlios.de>

Author: sforstner
Date: 2004-11-08 23:24:06 +0100 (Mon, 08 Nov 2004)
New Revision: 99

Added:
   project_src/strutstest/WEB-INF/classes/de/hsharz/provirent/strutstest/action/
   project_src/strutstest/WEB-INF/classes/de/hsharz/provirent/strutstest/action/AuswerteActionBean.class
   project_src/strutstest/WEB-INF/classes/de/hsharz/provirent/strutstest/action/RegistrateAction.class
   project_src/strutstest/WEB-INF/classes/de/hsharz/provirent/strutstest/action/RegistrateCompleteAction.class
   project_src/strutstest/WEB-INF/classes/de/hsharz/provirent/strutstest/forms/
   project_src/strutstest/WEB-INF/classes/de/hsharz/provirent/strutstest/forms/DatenFormBean.class
   project_src/strutstest/WEB-INF/classes/de/hsharz/provirent/strutstest/forms/RegistrateFormBean.class
   project_src/strutstest/WEB-INF/classes/de/hsharz/provirent/strutstest/forms/RegistrationCompleteFormBean.class
   project_src/strutstest/WEB-INF/src/de/hsharz/provirent/strutstest/action/
   project_src/strutstest/WEB-INF/src/de/hsharz/provirent/strutstest/action/AuswerteActionBean.java
   project_src/strutstest/WEB-INF/src/de/hsharz/provirent/strutstest/action/RegistrateAction.java
   project_src/strutstest/WEB-INF/src/de/hsharz/provirent/strutstest/action/RegistrateCompleteAction.java
   project_src/strutstest/WEB-INF/src/de/hsharz/provirent/strutstest/forms/
   project_src/strutstest/WEB-INF/src/de/hsharz/provirent/strutstest/forms/DatenFormBean.java
   project_src/strutstest/WEB-INF/src/de/hsharz/provirent/strutstest/forms/RegistrateFormBean.java
   project_src/strutstest/WEB-INF/src/de/hsharz/provirent/strutstest/forms/RegistrationCompleteFormBean.java
   project_src/strutstest/pages/RegistrateCompleteForm.jsp
Removed:
   project_src/strutstest/WEB-INF/classes/de/hsharz/provirent/strutstest/AuswerteActionBean.class
   project_src/strutstest/WEB-INF/classes/de/hsharz/provirent/strutstest/DatenFormBean.class
   project_src/strutstest/WEB-INF/src/de/hsharz/provirent/strutstest/AuswerteActionBean.java
   project_src/strutstest/WEB-INF/src/de/hsharz/provirent/strutstest/DatenFormBean.java
Modified:
   project_src/strutstest/WEB-INF/classes/resources/MessageResources.properties
   project_src/strutstest/WEB-INF/src/resources/MessageResources.properties
   project_src/strutstest/WEB-INF/struts-config.xml
   project_src/strutstest/pages/EingabeFormular.jsp
Log:


Deleted: project_src/strutstest/WEB-INF/classes/de/hsharz/provirent/strutstest/AuswerteActionBean.class
===================================================================
(Binary files differ)

Deleted: project_src/strutstest/WEB-INF/classes/de/hsharz/provirent/strutstest/DatenFormBean.class
===================================================================
(Binary files differ)

Added: project_src/strutstest/WEB-INF/classes/de/hsharz/provirent/strutstest/action/AuswerteActionBean.class
===================================================================
(Binary files differ)


Property changes on: project_src/strutstest/WEB-INF/classes/de/hsharz/provirent/strutstest/action/AuswerteActionBean.class
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/strutstest/WEB-INF/classes/de/hsharz/provirent/strutstest/action/RegistrateAction.class
===================================================================
(Binary files differ)


Property changes on: project_src/strutstest/WEB-INF/classes/de/hsharz/provirent/strutstest/action/RegistrateAction.class
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/strutstest/WEB-INF/classes/de/hsharz/provirent/strutstest/action/RegistrateCompleteAction.class
===================================================================
(Binary files differ)


Property changes on: project_src/strutstest/WEB-INF/classes/de/hsharz/provirent/strutstest/action/RegistrateCompleteAction.class
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/strutstest/WEB-INF/classes/de/hsharz/provirent/strutstest/forms/DatenFormBean.class
===================================================================
(Binary files differ)


Property changes on: project_src/strutstest/WEB-INF/classes/de/hsharz/provirent/strutstest/forms/DatenFormBean.class
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/strutstest/WEB-INF/classes/de/hsharz/provirent/strutstest/forms/RegistrateFormBean.class
===================================================================
(Binary files differ)


Property changes on: project_src/strutstest/WEB-INF/classes/de/hsharz/provirent/strutstest/forms/RegistrateFormBean.class
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/strutstest/WEB-INF/classes/de/hsharz/provirent/strutstest/forms/RegistrationCompleteFormBean.class
===================================================================
(Binary files differ)


Property changes on: project_src/strutstest/WEB-INF/classes/de/hsharz/provirent/strutstest/forms/RegistrationCompleteFormBean.class
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Modified: project_src/strutstest/WEB-INF/classes/resources/MessageResources.properties
===================================================================
--- project_src/strutstest/WEB-INF/classes/resources/MessageResources.properties	2004-11-08 22:18:56 UTC (rev 98)
+++ project_src/strutstest/WEB-INF/classes/resources/MessageResources.properties	2004-11-08 22:24:06 UTC (rev 99)
@@ -31,3 +31,20 @@
 welcome.Password=Password
 error.username.required=Error: Username required!
 error.password.required=Error: Password required!
+
+registrate.title=Professional Video Rental
+registrate.heading=Registration
+registrate.message=Please complete the following form to register for usage of Professional Video Rental
+registrate.UserName=Username
+registrate.LastName=Last Name
+registrate.FirstName=First Name
+registrate.Password=Password
+registrate.RePassword=Repeat Password
+registrate.Email=Email Address
+error.registrate.username.required=Fehler: Username required!
+error.registrate.lastname.required=Fehler: Last Name required!
+error.registrate.firstname.required=Fehler: First Name required!
+error.registrate.password.required=Fehler: Password required!
+error.registrate.repassword.required=Fehler: Please insert Password twice!
+error.registrate.repassword.notidentic=Fehler: Repeat of Password don't correspondends with Password! 
+error.registrate.email.required=Fehler: Email Adress required!
\ No newline at end of file

Deleted: project_src/strutstest/WEB-INF/src/de/hsharz/provirent/strutstest/AuswerteActionBean.java
===================================================================
--- project_src/strutstest/WEB-INF/src/de/hsharz/provirent/strutstest/AuswerteActionBean.java	2004-11-08 22:18:56 UTC (rev 98)
+++ project_src/strutstest/WEB-INF/src/de/hsharz/provirent/strutstest/AuswerteActionBean.java	2004-11-08 22:24:06 UTC (rev 99)
@@ -1,53 +0,0 @@
-/*
- * Created on 26.10.2004
- *
- * Copyright (c) 2004/2005, Remo Griesch/Stefan Forstner/Philipp Schneider
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met:
- *
- * - Redistributions of source code must retain the above copyright notice,
- * this list of conditions and the following disclaimer.
- * - Redistributions in binary form must reproduce the above copyright notice,
- * this list of conditions and the following disclaimer in the documentation
- * and/or other materials provided with the distribution.
- * - Neither the name of the Remo Griesch/Stefan Forstner/Philipp Schneider nor
- * the names of its contributors may be used to endorse or promote products
- * derived from this software without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
- * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
- * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
- * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
- * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
- * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
- * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- * POSSIBILITY OF SUCH DAMAGE.
- *
- */
-package de.hsharz.provirent.strutstest;
-
-/**
- * @author Stefan Forstner
- *
- */
-
-import javax.servlet.http.*;
-import org.apache.struts.action.*;
-
-public final class AuswerteActionBean extends Action {
-  public ActionForward execute( ActionMapping       mp,
-                                ActionForm          fm,
-                                HttpServletRequest  rq,
-                                HttpServletResponse rp ) {
-    DatenFormBean dfb = (DatenFormBean)fm;
-    String sAction = dfb.getAction();
-    return mp.findForward( sAction );
-  }
-}
-

Deleted: project_src/strutstest/WEB-INF/src/de/hsharz/provirent/strutstest/DatenFormBean.java
===================================================================
--- project_src/strutstest/WEB-INF/src/de/hsharz/provirent/strutstest/DatenFormBean.java	2004-11-08 22:18:56 UTC (rev 98)
+++ project_src/strutstest/WEB-INF/src/de/hsharz/provirent/strutstest/DatenFormBean.java	2004-11-08 22:24:06 UTC (rev 99)
@@ -1,96 +0,0 @@
-/*
- * Created on 26.10.2004
- * 
- * Copyright (c) 2004/2005, Remo Griesch/Stefan Forstner/Philipp Schneider All
- * rights reserved.
- * 
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are met:
- *  - Redistributions of source code must retain the above copyright notice,
- * this list of conditions and the following disclaimer. - Redistributions in
- * binary form must reproduce the above copyright notice, this list of
- * conditions and the following disclaimer in the documentation and/or other
- * materials provided with the distribution. - Neither the name of the Remo
- * Griesch/Stefan Forstner/Philipp Schneider nor the names of its contributors
- * may be used to endorse or promote products derived from this software without
- * specific prior written permission.
- * 
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
- * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
- * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
- * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
- * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
- * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
- * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- * POSSIBILITY OF SUCH DAMAGE.
- *  
- */
-package de.hsharz.provirent.strutstest;
-
-import javax.servlet.http.*;
-import org.apache.struts.action.*;
-
-public final class DatenFormBean extends ActionForm {
-
-    private String username = null;
-
-    private String password = null;
-
-    private String action = null;
-
-    public String getUsername() {
-        return this.username;
-    }
-
-    public String getPassword() {
-        return this.password;
-    }
-
-    public String getAction() {
-        return this.action;
-    }
-
-    public void setUsername(String username) {
-        this.username = username;
-    }
-
-    public void setPassword(String password) {
-        this.password = password;
-    }
-
-    public void setAction(String action) {
-        this.action = action;
-    }
-
-    public void reset(ActionMapping mp, HttpServletRequest rq) {
-        username = null;
-        password = null;
-        action = null;
-    }
-
-    public ActionErrors validate(ActionMapping mp, HttpServletRequest rq) {
-        ActionErrors errors = null;
-        if (!"Weiter".equals(action)) {
-            username = null;
-            password = null;
-        } else {
-            if (username == null || username.length() < 1) {
-                if (errors == null)
-                    errors = new ActionErrors();
-                errors.add("username", new ActionError(
-                        "error.username.required"));
-            }
-            if (password == null || password.length() < 1) {
-                if (errors == null)
-                    errors = new ActionErrors();
-                errors.add("password", new ActionError(
-                        "error.password.required"));
-            }
-        }
-        return errors;
-    }
-
-}
\ No newline at end of file

Added: project_src/strutstest/WEB-INF/src/de/hsharz/provirent/strutstest/action/AuswerteActionBean.java
===================================================================
--- project_src/strutstest/WEB-INF/src/de/hsharz/provirent/strutstest/action/AuswerteActionBean.java	2004-11-08 22:18:56 UTC (rev 98)
+++ project_src/strutstest/WEB-INF/src/de/hsharz/provirent/strutstest/action/AuswerteActionBean.java	2004-11-08 22:24:06 UTC (rev 99)
@@ -0,0 +1,55 @@
+/*
+ * Created on 26.10.2004
+ *
+ * Copyright (c) 2004/2005, Remo Griesch/Stefan Forstner/Philipp Schneider
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * - Redistributions of source code must retain the above copyright notice,
+ * this list of conditions and the following disclaimer.
+ * - Redistributions in binary form must reproduce the above copyright notice,
+ * this list of conditions and the following disclaimer in the documentation
+ * and/or other materials provided with the distribution.
+ * - Neither the name of the Remo Griesch/Stefan Forstner/Philipp Schneider nor
+ * the names of its contributors may be used to endorse or promote products
+ * derived from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+package de.hsharz.provirent.strutstest.action;
+
+/**
+ * @author Stefan Forstner
+ *
+ */
+
+import javax.servlet.http.*;
+import org.apache.struts.action.*;
+
+import de.hsharz.provirent.strutstest.forms.DatenFormBean;
+
+public final class AuswerteActionBean extends Action {
+  public ActionForward execute( ActionMapping       mp,
+                                ActionForm          fm,
+                                HttpServletRequest  rq,
+                                HttpServletResponse rp ) {
+    DatenFormBean dfb = (DatenFormBean)fm;
+    String sAction = dfb.getAction();
+    return mp.findForward( sAction );
+  }
+}
+

Added: project_src/strutstest/WEB-INF/src/de/hsharz/provirent/strutstest/action/RegistrateAction.java
===================================================================
--- project_src/strutstest/WEB-INF/src/de/hsharz/provirent/strutstest/action/RegistrateAction.java	2004-11-08 22:18:56 UTC (rev 98)
+++ project_src/strutstest/WEB-INF/src/de/hsharz/provirent/strutstest/action/RegistrateAction.java	2004-11-08 22:24:06 UTC (rev 99)
@@ -0,0 +1,58 @@
+/*
+ * Created on 08.11.2004
+ *
+ * Copyright (c) 2004/2005, Remo Griesch/Stefan Forstner/Philipp Schneider
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * - Redistributions of source code must retain the above copyright notice,
+ * this list of conditions and the following disclaimer.
+ * - Redistributions in binary form must reproduce the above copyright notice,
+ * this list of conditions and the following disclaimer in the documentation
+ * and/or other materials provided with the distribution.
+ * - Neither the name of the Remo Griesch/Stefan Forstner/Philipp Schneider nor
+ * the names of its contributors may be used to endorse or promote products
+ * derived from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+package de.hsharz.provirent.strutstest.action;
+
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+
+import org.apache.struts.action.Action;
+import org.apache.struts.action.ActionForm;
+import org.apache.struts.action.ActionForward;
+import org.apache.struts.action.ActionMapping;
+
+import de.hsharz.provirent.strutstest.forms.RegistrateFormBean;
+
+/**
+ * @author Stefan Forstner
+ *
+ */
+public class RegistrateAction extends Action {
+    public ActionForward execute( ActionMapping mp,
+            ActionForm          fm,
+            HttpServletRequest  rq,
+            HttpServletResponse rp ) {
+        RegistrateFormBean rfb = (RegistrateFormBean)fm;
+        String sAction = rfb.getAction();
+        return mp.findForward( sAction );
+    }
+}

Added: project_src/strutstest/WEB-INF/src/de/hsharz/provirent/strutstest/action/RegistrateCompleteAction.java
===================================================================
--- project_src/strutstest/WEB-INF/src/de/hsharz/provirent/strutstest/action/RegistrateCompleteAction.java	2004-11-08 22:18:56 UTC (rev 98)
+++ project_src/strutstest/WEB-INF/src/de/hsharz/provirent/strutstest/action/RegistrateCompleteAction.java	2004-11-08 22:24:06 UTC (rev 99)
@@ -0,0 +1,58 @@
+/*
+ * Created on 08.11.2004
+ *
+ * Copyright (c) 2004/2005, Remo Griesch/Stefan Forstner/Philipp Schneider
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * - Redistributions of source code must retain the above copyright notice,
+ * this list of conditions and the following disclaimer.
+ * - Redistributions in binary form must reproduce the above copyright notice,
+ * this list of conditions and the following disclaimer in the documentation
+ * and/or other materials provided with the distribution.
+ * - Neither the name of the Remo Griesch/Stefan Forstner/Philipp Schneider nor
+ * the names of its contributors may be used to endorse or promote products
+ * derived from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+package de.hsharz.provirent.strutstest.action;
+
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+
+import org.apache.struts.action.Action;
+import org.apache.struts.action.ActionForm;
+import org.apache.struts.action.ActionForward;
+import org.apache.struts.action.ActionMapping;
+
+import de.hsharz.provirent.strutstest.forms.RegistrationCompleteFormBean;
+
+/**
+ * @author Stefan Forstner
+ *
+ */
+public class RegistrateCompleteAction extends Action {
+    public ActionForward execute( ActionMapping mp,
+            ActionForm          fm,
+            HttpServletRequest  rq,
+            HttpServletResponse rp ) {
+        RegistrationCompleteFormBean rcfb = (RegistrationCompleteFormBean)fm;
+        String sAction = rcfb.getAction();
+        return mp.findForward( sAction );
+    }
+}

Added: project_src/strutstest/WEB-INF/src/de/hsharz/provirent/strutstest/forms/DatenFormBean.java
===================================================================
--- project_src/strutstest/WEB-INF/src/de/hsharz/provirent/strutstest/forms/DatenFormBean.java	2004-11-08 22:18:56 UTC (rev 98)
+++ project_src/strutstest/WEB-INF/src/de/hsharz/provirent/strutstest/forms/DatenFormBean.java	2004-11-08 22:24:06 UTC (rev 99)
@@ -0,0 +1,96 @@
+/*
+ * Created on 26.10.2004
+ * 
+ * Copyright (c) 2004/2005, Remo Griesch/Stefan Forstner/Philipp Schneider All
+ * rights reserved.
+ * 
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ *  - Redistributions of source code must retain the above copyright notice,
+ * this list of conditions and the following disclaimer. - Redistributions in
+ * binary form must reproduce the above copyright notice, this list of
+ * conditions and the following disclaimer in the documentation and/or other
+ * materials provided with the distribution. - Neither the name of the Remo
+ * Griesch/Stefan Forstner/Philipp Schneider nor the names of its contributors
+ * may be used to endorse or promote products derived from this software without
+ * specific prior written permission.
+ * 
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *  
+ */
+package de.hsharz.provirent.strutstest.forms;
+
+import javax.servlet.http.*;
+import org.apache.struts.action.*;
+
+public final class DatenFormBean extends ActionForm {
+
+    private String username = null;
+
+    private String password = null;
+
+    private String action = null;
+
+    public String getUsername() {
+        return this.username;
+    }
+
+    public String getPassword() {
+        return this.password;
+    }
+
+    public String getAction() {
+        return this.action;
+    }
+
+    public void setUsername(String username) {
+        this.username = username;
+    }
+
+    public void setPassword(String password) {
+        this.password = password;
+    }
+
+    public void setAction(String action) {
+        this.action = action;
+    }
+
+    public void reset(ActionMapping mp, HttpServletRequest rq) {
+        username = null;
+        password = null;
+        action = null;
+    }
+
+    public ActionErrors validate(ActionMapping mp, HttpServletRequest rq) {
+        ActionErrors errors = null;
+        if (!"Weiter".equals(action)) {
+            username = null;
+            password = null;
+        } else {
+            if (username == null || username.length() < 1) {
+                if (errors == null)
+                    errors = new ActionErrors();
+                errors.add("username", new ActionMessage(
+                        "error.username.required"));
+            }
+            if (password == null || password.length() < 1) {
+                if (errors == null)
+                    errors = new ActionErrors();
+                errors.add("password", new ActionMessage(
+                        "error.password.required"));
+            }
+        }
+        return errors;
+    }
+
+}
\ No newline at end of file

Added: project_src/strutstest/WEB-INF/src/de/hsharz/provirent/strutstest/forms/RegistrateFormBean.java
===================================================================
--- project_src/strutstest/WEB-INF/src/de/hsharz/provirent/strutstest/forms/RegistrateFormBean.java	2004-11-08 22:18:56 UTC (rev 98)
+++ project_src/strutstest/WEB-INF/src/de/hsharz/provirent/strutstest/forms/RegistrateFormBean.java	2004-11-08 22:24:06 UTC (rev 99)
@@ -0,0 +1,196 @@
+/*
+ * Created on 08.11.2004
+ *
+ * Copyright (c) 2004/2005, Remo Griesch/Stefan Forstner/Philipp Schneider
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * - Redistributions of source code must retain the above copyright notice,
+ * this list of conditions and the following disclaimer.
+ * - Redistributions in binary form must reproduce the above copyright notice,
+ * this list of conditions and the following disclaimer in the documentation
+ * and/or other materials provided with the distribution.
+ * - Neither the name of the Remo Griesch/Stefan Forstner/Philipp Schneider nor
+ * the names of its contributors may be used to endorse or promote products
+ * derived from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+package de.hsharz.provirent.strutstest.forms;
+
+import javax.servlet.http.HttpServletRequest;
+
+import org.apache.struts.action.ActionErrors;
+import org.apache.struts.action.ActionForm;
+import org.apache.struts.action.ActionMapping;
+import org.apache.struts.action.ActionMessage;
+
+/**
+ * @author Stefan Forstner
+ *
+ */
+public class RegistrateFormBean extends ActionForm {
+    private String username = null;
+    
+    private String lastname = null;
+    
+    private String firstname = null;
+
+    private String password = null;
+    
+    private String repassword = null;
+    
+    private String email = null;
+
+    private String action = null;
+
+    public String getUsername() {
+        return this.username;
+    }
+
+    public String getPassword() {
+        return this.password;
+    }
+
+    public String getAction() {
+        return this.action;
+    }
+
+    public void setUsername(String username) {
+        this.username = username;
+    }
+
+    public void setPassword(String password) {
+        this.password = password;
+    }
+
+    public void setAction(String action) {
+        this.action = action;
+    }
+
+    public void reset(ActionMapping mp, HttpServletRequest rq) {
+        username = null;
+        lastname = null;
+        firstname = null;
+        password = null;
+        repassword = null;
+        email = null;
+    }
+
+    public ActionErrors validate(ActionMapping mp, HttpServletRequest rq) {
+        ActionErrors errors = null;
+        if (!"Registrate".equals(action)) {
+            username = null;
+            lastname = null;
+            firstname = null;
+            password = null;
+            repassword = null;
+            email = null;
+        } else {
+            if (username == null || username.length() < 1) {
+                if (errors == null)
+                    errors = new ActionErrors();
+                errors.add("username", new ActionMessage(
+                        "error.registrate.username.required"));
+            }
+            if (lastname == null || lastname.length() < 1) {
+                if (errors == null)
+                    errors = new ActionErrors();
+                errors.add("lastname", new ActionMessage(
+                        "error.registrate.lastname.required"));
+            }
+            if (firstname == null || firstname.length() < 1) {
+                if (errors == null)
+                    errors = new ActionErrors();
+                errors.add("firstname", new ActionMessage(
+                        "error.registrate.firstname.required"));
+            }
+            if (password == null || password.length() < 1) {
+                if (errors == null)
+                    errors = new ActionErrors();
+                errors.add("password", new ActionMessage(
+                        "error.registrate.password.required"));
+            }
+            if (repassword == null || repassword.length() < 1) {
+                if (errors == null)
+                    errors = new ActionErrors();
+                errors.add("repassword", new ActionMessage(
+                        "error.registrate.repassword.required"));
+            } else if (!repassword.equals(password)){
+                if (errors == null)
+                    errors = new ActionErrors();
+                errors.add("repassword", new ActionMessage(
+                        "error.registrate.repassword.notidentic"));
+            }
+            if (email == null || email.length() < 1) {
+                if (errors == null)
+                    errors = new ActionErrors();
+                errors.add("email", new ActionMessage(
+                        "error.registrate.email.required"));
+            }
+        }
+        return errors;
+    }
+    /**
+     * @return Returns the email.
+     */
+    public String getEmail() {
+        return email;
+    }
+    /**
+     * @param email The email to set.
+     */
+    public void setEmail(String email) {
+        this.email = email;
+    }
+    /**
+     * @return Returns the firstname.
+     */
+    public String getFirstname() {
+        return firstname;
+    }
+    /**
+     * @param firstname The firstname to set.
+     */
+    public void setFirstname(String firstname) {
+        this.firstname = firstname;
+    }
+    /**
+     * @return Returns the lastname.
+     */
+    public String getLastname() {
+        return lastname;
+    }
+    /**
+     * @param lastname The lastname to set.
+     */
+    public void setLastname(String lastname) {
+        this.lastname = lastname;
+    }
+    /**
+     * @return Returns the repassword.
+     */
+    public String getRepassword() {
+        return repassword;
+    }
+    /**
+     * @param repassword The repassword to set.
+     */
+    public void setRepassword(String repassword) {
+        this.repassword = repassword;
+    }
+}

Added: project_src/strutstest/WEB-INF/src/de/hsharz/provirent/strutstest/forms/RegistrationCompleteFormBean.java
===================================================================
--- project_src/strutstest/WEB-INF/src/de/hsharz/provirent/strutstest/forms/RegistrationCompleteFormBean.java	2004-11-08 22:18:56 UTC (rev 98)
+++ project_src/strutstest/WEB-INF/src/de/hsharz/provirent/strutstest/forms/RegistrationCompleteFormBean.java	2004-11-08 22:24:06 UTC (rev 99)
@@ -0,0 +1,55 @@
+/*
+ * Created on 08.11.2004
+ *
+ * Copyright (c) 2004/2005, Remo Griesch/Stefan Forstner/Philipp Schneider
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * - Redistributions of source code must retain the above copyright notice,
+ * this list of conditions and the following disclaimer.
+ * - Redistributions in binary form must reproduce the above copyright notice,
+ * this list of conditions and the following disclaimer in the documentation
+ * and/or other materials provided with the distribution.
+ * - Neither the name of the Remo Griesch/Stefan Forstner/Philipp Schneider nor
+ * the names of its contributors may be used to endorse or promote products
+ * derived from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+package de.hsharz.provirent.strutstest.forms;
+
+import org.apache.struts.action.ActionForm;
+
+/**
+ * @author Stefan Forstner
+ *
+ */
+public class RegistrationCompleteFormBean extends ActionForm {
+    private String action = null;
+    /**
+     * @return Returns the action.
+     */
+    public String getAction() {
+        return action;
+    }
+    /**
+     * @param action The action to set.
+     */
+    public void setAction(String action) {
+        this.action = action;
+    }
+}

Modified: project_src/strutstest/WEB-INF/src/resources/MessageResources.properties
===================================================================
--- project_src/strutstest/WEB-INF/src/resources/MessageResources.properties	2004-11-08 22:18:56 UTC (rev 98)
+++ project_src/strutstest/WEB-INF/src/resources/MessageResources.properties	2004-11-08 22:24:06 UTC (rev 99)
@@ -31,3 +31,20 @@
 welcome.Password=Password
 error.username.required=Error: Username required!
 error.password.required=Error: Password required!
+
+registrate.title=Professional Video Rental
+registrate.heading=Registration
+registrate.message=Please complete the following form to register for usage of Professional Video Rental
+registrate.UserName=Username
+registrate.LastName=Last Name
+registrate.FirstName=First Name
+registrate.Password=Password
+registrate.RePassword=Repeat Password
+registrate.Email=Email Address
+error.registrate.username.required=Fehler: Username required!
+error.registrate.lastname.required=Fehler: Last Name required!
+error.registrate.firstname.required=Fehler: First Name required!
+error.registrate.password.required=Fehler: Password required!
+error.registrate.repassword.required=Fehler: Please insert Password twice!
+error.registrate.repassword.notidentic=Fehler: Repeat of Password don't correspondends with Password! 
+error.registrate.email.required=Fehler: Email Adress required!
\ No newline at end of file

Modified: project_src/strutstest/WEB-INF/struts-config.xml
===================================================================
--- project_src/strutstest/WEB-INF/struts-config.xml	2004-11-08 22:18:56 UTC (rev 98)
+++ project_src/strutstest/WEB-INF/struts-config.xml	2004-11-08 22:24:06 UTC (rev 99)
@@ -1,207 +1,206 @@
-<?xml version="1.0" encoding="ISO-8859-1" ?>
-
-<!DOCTYPE struts-config PUBLIC
-          "-//Apache Software Foundation//DTD Struts Configuration 1.2//EN"
-          "http://jakarta.apache.org/struts/dtds/struts-config_1_2.dtd">
-
-<!--
-     This is a blank Struts configuration file with an example
-     welcome action/page and other commented sample elements.
-
-     Tiles and the Struts Validator are configured using the factory defaults
-     and are ready-to-use.
-
-     NOTE: If you have a generator tool to create the corresponding Java classes
-     for you, you could include the details in the "form-bean" declarations.
-     Otherwise, you would only define the "form-bean" element itself, with the
-     corresponding "name" and "type" attributes, as shown here.
--->
-
-
-<struts-config>
-
-<!-- ============================================ Data Source Configuration -->
-<!--
-<data-sources>
-<data-source type="org.apache.commons.dbcp.BasicDataSource">
-    <set-property
-      property="driverClassName"
-      value="org.postgresql.Driver" />
-    <set-property
-      property="url"
-      value="jdbc:postgresql://localhost/mydatabase" />
-    <set-property
-      property="username"
-      value="me" />
-    <set-property
-      property="password"
-      value="test" />
-    <set-property
-      property="maxActive"
-      value="10" />
-    <set-property
-      property="maxWait"
-      value="5000" />
-    <set-property
-      property="defaultAutoCommit"
-      value="false" />
-    <set-property
-      property="defaultReadOnly"
-      value="false" />
-    <set-property
-      property="validationQuery"
-      value="SELECT COUNT(*) FROM market" />
-</data-source>
-</data-sources>
--->
-
-<!-- ================================================ Form Bean Definitions -->
-
-    <form-beans>
-		<form-bean name="DatenFormBean" type="de.hsharz.provirent.strutstest.DatenFormBean" />
-		
-    <!-- sample form bean descriptor for an ActionForm
-        <form-bean
-            name="inputForm"
-            type="app.InputForm"/>
-    end sample -->
-
-    <!-- sample form bean descriptor for a DynaActionForm
-        <form-bean
-            name="logonForm"
-            type="org.apache.struts.action.DynaActionForm">
-            <form-property
-                name="username"
-                type="java.lang.String"/>
-            <form-property
-                name="password"
-                type="java.lang.String"/>
-       </form-bean>
-    end sample -->
-    </form-beans>
-
-
-<!-- ========================================= Global Exception Definitions -->
-
-    <global-exceptions>
-        <!-- sample exception handler
-        <exception
-            key="expired.password"
-            type="app.ExpiredPasswordException"
-            path="/changePassword.jsp"/>
-        end sample -->
-    </global-exceptions>
-
-
-<!-- =========================================== Global Forward Definitions -->
-
-    <global-forwards>
-        <!-- Default forward to "Welcome" action -->
-        <!-- Demonstrates using index.jsp to forward -->
-        <forward name="startForwardName" path="/StartActionPath.do" />
-
-    </global-forwards>
-
-
-<!-- =========================================== Action Mapping Definitions -->
-
-    <action-mappings>
-            <!-- Default "Welcome" action -->
-            <!-- Forwards to Welcome.jsp -->
-        <action path="/StartActionPath" forward="/pages/EingabeFormular.jsp" />
-		<action path="/htmlFormActionPath" type="de.hsharz.provirent.strutstest.AuswerteActionBean" 
-			name="DatenFormBean" scope="request" input="/pages/EingabeFormular.jsp">
-			<forward name="Weiter"    path="/ErgebnisanzeigeActionPath.do" />
+<!DOCTYPE struts-config PUBLIC "-//Apache Software Foundation//DTD Struts Configuration 1.2//EN" "http://jakarta.apache.org/struts/dtds/struts-config_1_2.dtd">
+<!--
+     This is a blank Struts configuration file with an example
+     welcome action/page and other commented sample elements.
+
+     Tiles and the Struts Validator are configured using the factory defaults
+     and are ready-to-use.
+
+     NOTE: If you have a generator tool to create the corresponding Java classes
+     for you, you could include the details in the "form-bean" declarations.
+     Otherwise, you would only define the "form-bean" element itself, with the
+     corresponding "name" and "type" attributes, as shown here.
+--><struts-config>
+
+<!-- ============================================ Data Source Configuration -->
+<!--
+<data-sources>
+<data-source type="org.apache.commons.dbcp.BasicDataSource">
+    <set-property
+      property="driverClassName"
+      value="org.postgresql.Driver" />
+    <set-property
+      property="url"
+      value="jdbc:postgresql://localhost/mydatabase" />
+    <set-property
+      property="username"
+      value="me" />
+    <set-property
+      property="password"
+      value="test" />
+    <set-property
+      property="maxActive"
+      value="10" />
+    <set-property
+      property="maxWait"
+      value="5000" />
+    <set-property
+      property="defaultAutoCommit"
+      value="false" />
+    <set-property
+      property="defaultReadOnly"
+      value="false" />
+    <set-property
+      property="validationQuery"
+      value="SELECT COUNT(*) FROM market" />
+</data-source>
+</data-sources>
+-->
+
+<!-- ================================================ Form Bean Definitions -->
+
+    <form-beans>
+		<form-bean name="DatenFormBean" type="de.hsharz.provirent.strutstest.forms.DatenFormBean" />
+		<form-bean name="RegistrationCompleteFormBean" type="de.hsharz.provirent.strutstest.forms.RegistrationCompleteFormBean" />
+		<form-bean name="RegistrateFormBean" type="de.hsharz.provirent.strutstest.forms.RegistrateFormBean" />
+    <!-- sample form bean descriptor for an ActionForm
+        <form-bean
+            name="inputForm"
+            type="app.InputForm"/>
+    end sample -->
+
+    <!-- sample form bean descriptor for a DynaActionForm
+        <form-bean
+            name="logonForm"
+            type="org.apache.struts.action.DynaActionForm">
+            <form-property
+                name="username"
+                type="java.lang.String"/>
+            <form-property
+                name="password"
+                type="java.lang.String"/>
+       </form-bean>
+    end sample -->
+    </form-beans>
+
+
+<!-- ========================================= Global Exception Definitions -->
+
+    <global-exceptions>
+        <!-- sample exception handler
+        <exception
+            key="expired.password"
+            type="app.ExpiredPasswordException"
+            path="/changePassword.jsp"/>
+        end sample -->
+    </global-exceptions>
+
+
+<!-- =========================================== Global Forward Definitions -->
+
+    <global-forwards>
+        <!-- Default forward to "Welcome" action -->
+        <!-- Demonstrates using index.jsp to forward -->
+        <forward name="startForwardName" path="/StartActionPath.do" />
+
+    </global-forwards>
+
+
+<!-- =========================================== Action Mapping Definitions -->
+
+    <action-mappings>
+            <!-- Default "Welcome" action -->
+            <!-- Forwards to Welcome.jsp -->
+        <action path="/StartActionPath" forward="/pages/EingabeFormular.jsp" />
+		<action path="/htmlFormActionPath" type="de.hsharz.provirent.strutstest.action.AuswerteActionBean" name="DatenFormBean" scope="request" input="/pages/EingabeFormular.jsp">
+			<forward name="Weiter" path="/ErgebnisanzeigeActionPath.do" />
 			<forward name="Abbrechen" path="/StartActionPath.do" />
+			<forward name="Registrate" path="/RegistrateActionPath.do"/>
+		</action>
+		<action path="/ErgebnisanzeigeActionPath" forward="/pages/ErgebnisAnzeige.jsp" />
+		<action path="/RegistrateActionPath" forward="/pages/RegistrateForm.jsp" />
+
+		<action path="/SubscribeFormActionPath" type="de.hsharz.provirent.strutstest.action.RegistrateAction" name="RegistrateFormBean" scope="request" input="/pages/RegistrateForm.jsp">
+			<forward name="Registrate" path="/SubscribeActionPath.do" />
+			<forward name="Cancel" path="/StartActionPath.do" />
 		</action>
-		<action path="/ErgebnisanzeigeActionPath" forward="/pages/ErgebnisAnzeige.jsp" />
-
-
-    <!-- sample input and input submit actions
-
-        <action
-            path="/Input"
-            type="org.apache.struts.actions.ForwardAction"
-            parameter="/pages/Input.jsp"/>
-
-        <action
-            path="/InputSubmit"
-            type="app.InputAction"
-            name="inputForm"
-            scope="request"
-            validate="true"
-            input="/pages/Input.jsp"/>
-
-            <action
-                path="/edit*"
-                type="app.Edit{1}Action"
-                name="inputForm"
-                scope="request"
-                validate="true"
-                input="/pages/Edit{1}.jsp"/>
-
+		<action path="/SubscribeActionPath" forward="/pages/RegistrationCompleteForm.jsp"/>
+	
+		<action path="/SubscribeCompleteFormActionPath" type="de.hsharz.provirent.strutstest.action.RegistrationCompleteAction" name="RegistrationCompleteFormBean" scope="request" input="/pages/RegistrateCompleteForm.jsp">
+			<forward name="OK" path="/StartActionPath.do" />
+		</action>
+	
+		<!-- sample input and input submit actions
+
+        <action
+            path="/Input"
+            type="org.apache.struts.actions.ForwardAction"
+            parameter="/pages/Input.jsp"/>
+
+        <action
+            path="/InputSubmit"
+            type="app.InputAction"
+            name="inputForm"
+            scope="request"
+            validate="true"
+            input="/pages/Input.jsp"/>
+
+            <action
+                path="/edit*"
+                type="app.Edit{1}Action"
+                name="inputForm"
+                scope="request"
+                validate="true"
+                input="/pages/Edit{1}.jsp"/>
+
     end samples -->
-    </action-mappings>
-
-
-<!-- ============================================= Controller Configuration -->
-
-    <controller
-       processorClass="org.apache.struts.tiles.TilesRequestProcessor"/>
-
-
-<!-- ======================================== Message Resources Definitions -->
-
-    <message-resources parameter="resources.MessageResources" />
-
-
-<!-- =============================================== Plug Ins Configuration -->
-
-  <!-- ======================================================= Tiles plugin -->
-  <!--
-     This plugin initialize Tiles definition factory. This later can takes some
-	 parameters explained here after. The plugin first read parameters from
-	 web.xml, thenoverload them with parameters defined here. All parameters
-	 are optional.
-     The plugin should be declared in each struts-config file.
-       - definitions-config: (optional)
-            Specify configuration file names. There can be several comma
-		    separated file names (default: ?? )
-       - moduleAware: (optional - struts1.1)
-            Specify if the Tiles definition factory is module aware. If true
-            (default), there will be one factory for each Struts module.
-			If false, there will be one common factory for all module. In this
-            later case, it is still needed to declare one plugin per module.
-            The factory will be initialized with parameters found in the first
-            initialized plugin (generally the one associated with the default
-            module).
-			  true : One factory per module. (default)
-			  false : one single shared factory for all modules
-	   - definitions-parser-validate: (optional)
-	        Specify if xml parser should validate the Tiles configuration file.
-			  true : validate. DTD should be specified in file header (default)
-			  false : no validation
-
-	  Paths found in Tiles definitions are relative to the main context.
-  -->
-
-    <plug-in className="org.apache.struts.tiles.TilesPlugin" >
-
-      <!-- Path to XML definition file -->
-      <set-property property="definitions-config"
-                       value="/WEB-INF/tiles-defs.xml" />
-      <!-- Set Module-awareness to true -->
-      <set-property property="moduleAware" value="true" />
-    </plug-in>
-
-
-  <!-- =================================================== Validator plugin -->
-
-  <plug-in className="org.apache.struts.validator.ValidatorPlugIn">
-    <set-property
-        property="pathnames"
-        value="/WEB-INF/validator-rules.xml,/WEB-INF/validation.xml"/>
-  </plug-in>
-
+		
+	</action-mappings>
+
+
+<!-- ============================================= Controller Configuration -->
+
+    <controller processorClass="org.apache.struts.tiles.TilesRequestProcessor" />
+
+
+<!-- ======================================== Message Resources Definitions -->
+
+    <message-resources parameter="resources.MessageResources" />
+
+
+<!-- =============================================== Plug Ins Configuration -->
+
+  <!-- ======================================================= Tiles plugin -->
+  <!--
+     This plugin initialize Tiles definition factory. This later can takes some
+	 parameters explained here after. The plugin first read parameters from
+	 web.xml, thenoverload them with parameters defined here. All parameters
+	 are optional.
+     The plugin should be declared in each struts-config file.
+       - definitions-config: (optional)
+            Specify configuration file names. There can be several comma
+		    separated file names (default: ?? )
+       - moduleAware: (optional - struts1.1)
+            Specify if the Tiles definition factory is module aware. If true
+            (default), there will be one factory for each Struts module.
+			If false, there will be one common factory for all module. In this
+            later case, it is still needed to declare one plugin per module.
+            The factory will be initialized with parameters found in the first
+            initialized plugin (generally the one associated with the default
+            module).
+			  true : One factory per module. (default)
+			  false : one single shared factory for all modules
+	   - definitions-parser-validate: (optional)
+	        Specify if xml parser should validate the Tiles configuration file.
+			  true : validate. DTD should be specified in file header (default)
+			  false : no validation
+
+	  Paths found in Tiles definitions are relative to the main context.
+  -->
+
+    <plug-in className="org.apache.struts.tiles.TilesPlugin">
+
+      <!-- Path to XML definition file -->
+      <set-property property="definitions-config" value="/WEB-INF/tiles-defs.xml" />
+      <!-- Set Module-awareness to true -->
+      <set-property property="moduleAware" value="true" />
+    </plug-in>
+
+
+  <!-- =================================================== Validator plugin -->
+
+  <plug-in className="org.apache.struts.validator.ValidatorPlugIn">
+    <set-property property="pathnames" value="/WEB-INF/validator-rules.xml,/WEB-INF/validation.xml" />
+  </plug-in>
+
 </struts-config>
-

Modified: project_src/strutstest/pages/EingabeFormular.jsp
===================================================================
--- project_src/strutstest/pages/EingabeFormular.jsp	2004-11-08 22:18:56 UTC (rev 98)
+++ project_src/strutstest/pages/EingabeFormular.jsp	2004-11-08 22:24:06 UTC (rev 99)
@@ -25,7 +25,7 @@
     <font color=red><html:errors property="password" /></font></p>
 <p> <html:submit property="action" value="Weiter" />
     <html:submit property="action" value="Abbrechen" /></p>
-<p> <html:link property="action" value="registrate"</p>
+<p> <html:link property="action" value="Registrate"</p>
 
 </html:form>
 

Added: project_src/strutstest/pages/RegistrateCompleteForm.jsp
===================================================================
--- project_src/strutstest/pages/RegistrateCompleteForm.jsp	2004-11-08 22:18:56 UTC (rev 98)
+++ project_src/strutstest/pages/RegistrateCompleteForm.jsp	2004-11-08 22:24:06 UTC (rev 99)
@@ -0,0 +1,22 @@
+<%@ taglib uri="/WEB-INF/struts-bean.tld" prefix="bean" %>
+<%@ taglib uri="/WEB-INF/struts-html.tld" prefix="html" %>
+
+<html:html>
+<head>
+  <title><bean:message key="registrateComplete.title" /></title>
+</head>
+<body>
+
+<logic:notPresent name="org.apache.struts.action.MESSAGE" scope="application">
+  <font color="red">ERROR: Application resources not loaded</font>
+</logic:notPresent>
+
+<h3><bean:message key="registrateComplete.heading" /></h3>
+<p> <bean:message key="registrate.Complete.message" /></p>
+
+<html:form>
+	<p> <html:submit property="action" value="OK" /></p>	
+</html:form>
+
+</body>
+</html:html>
\ No newline at end of file



From sforstner at sheep.berlios.de  Tue Nov  9 18:33:38 2004
From: sforstner at sheep.berlios.de (Stefan at BerliOS)
Date: Tue, 9 Nov 2004 18:33:38 +0100
Subject: [Provirent-svn-commit] r100 - project_src/provirent_hibernate
Message-ID: <200411091733.iA9HXckv009587@sheep.berlios.de>

Author: sforstner
Date: 2004-11-09 18:33:29 +0100 (Tue, 09 Nov 2004)
New Revision: 100

Modified:
   project_src/provirent_hibernate/.project
Log:


Modified: project_src/provirent_hibernate/.project
===================================================================
--- project_src/provirent_hibernate/.project	2004-11-08 22:24:06 UTC (rev 99)
+++ project_src/provirent_hibernate/.project	2004-11-09 17:33:29 UTC (rev 100)
@@ -17,7 +17,9 @@
 		</buildCommand>
 	</buildSpec>
 	<natures>
+		<nature>org.eclipse.jem.workbench.JavaEMFNature</nature>
 		<nature>org.eclipse.jdt.core.javanature</nature>
 		<nature>com.atlassw.tools.eclipse.checkstyle.CheckstyleNature</nature>
+		<nature>org.eclipse.jem.beaninfo.BeanInfoNature</nature>
 	</natures>
 </projectDescription>



From sforstner at sheep.berlios.de  Tue Nov  9 18:34:57 2004
From: sforstner at sheep.berlios.de (Stefan at BerliOS)
Date: Tue, 9 Nov 2004 18:34:57 +0100
Subject: [Provirent-svn-commit] r101 - project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui
Message-ID: <200411091734.iA9HYvPK014120@sheep.berlios.de>

Author: sforstner
Date: 2004-11-09 18:34:40 +0100 (Tue, 09 Nov 2004)
New Revision: 101

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/CompositeFormate.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/CompositeGenre.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/CompositeLanguage.java
Log:


Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/CompositeFormate.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/CompositeFormate.java	2004-11-09 17:33:29 UTC (rev 100)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/CompositeFormate.java	2004-11-09 17:34:40 UTC (rev 101)
@@ -404,7 +404,7 @@
                 textVideoFormatSearch.setEditable(false);
                 tableVideoFormat.setEnabled(false);
 
-                mode_VideoFormat = ManagmentGui.MODE_ADD;
+                mode_VideoFormat = ManagementGui.MODE_ADD;
 
             }
         });
@@ -415,7 +415,7 @@
         buttonVideoFormatEdit.addSelectionListener(new SelectionAdapter() {
             public void widgetSelected(SelectionEvent evt) {
 
-                mode_VideoFormat = ManagmentGui.MODE_EDIT;
+                mode_VideoFormat = ManagementGui.MODE_EDIT;
 
 
                 textVideoFormatID.setEditable(false);
@@ -543,7 +543,7 @@
                 
                 //testen welcher mode
                 
-                if (mode_VideoFormat == ManagmentGui.MODE_ADD) {
+                if (mode_VideoFormat == ManagementGui.MODE_ADD) {
                     
                     /**
                      * @todo eine Exception bekommen wieder leider NOCH nicht mit
@@ -592,7 +592,7 @@
                     //alle Buttons auf aktiv setzen
                     setVideoGroupButtonSaveCancel();
                     
-                } else if (mode_VideoFormat == ManagmentGui.MODE_EDIT) {
+                } else if (mode_VideoFormat == ManagementGui.MODE_EDIT) {
                     
                     VideoFormat tmp = new VideoFormat(textVideoFormatName.getText(),
                                     textVideoFormatShortname.getText());
@@ -1067,7 +1067,7 @@
         buttonVideoFormatDelete.setEnabled(true);
 
         //Mode auf view setzen
-        mode_VideoFormat = ManagmentGui.MODE_VIEW;
+        mode_VideoFormat = ManagementGui.MODE_VIEW;
 
     }
 

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/CompositeGenre.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/CompositeGenre.java	2004-11-09 17:33:29 UTC (rev 100)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/CompositeGenre.java	2004-11-09 17:34:40 UTC (rev 101)
@@ -1,22 +1,40 @@
 package de.hsharz.provirent.managment.gui;
 
+import java.text.MessageFormat;
 import java.util.Locale;
 import java.util.PropertyResourceBundle;
 import java.util.ResourceBundle;
 
 import org.apache.log4j.Logger;
 import org.eclipse.swt.SWT;
+import org.eclipse.swt.custom.SashForm;
+import org.eclipse.swt.events.FocusAdapter;
+import org.eclipse.swt.events.FocusEvent;
+import org.eclipse.swt.events.SelectionAdapter;
+import org.eclipse.swt.events.SelectionEvent;
+import org.eclipse.swt.layout.FormAttachment;
+import org.eclipse.swt.layout.FormData;
+import org.eclipse.swt.layout.FormLayout;
+import org.eclipse.swt.layout.GridData;
 import org.eclipse.swt.layout.GridLayout;
 import org.eclipse.swt.widgets.Button;
 import org.eclipse.swt.widgets.Composite;
 import org.eclipse.swt.widgets.Display;
+import org.eclipse.swt.widgets.Event;
+import org.eclipse.swt.widgets.Group;
+import org.eclipse.swt.widgets.Label;
+import org.eclipse.swt.widgets.Listener;
 import org.eclipse.swt.widgets.Shell;
+import org.eclipse.swt.widgets.Table;
+import org.eclipse.swt.widgets.TableColumn;
+import org.eclipse.swt.widgets.TableItem;
+import org.eclipse.swt.widgets.Text;
 
+import com.cloudgarden.resource.SWTResourceManager;
 
-import org.eclipse.swt.widgets.Group;
-import org.eclipse.swt.layout.GridData;
-import com.cloudgarden.resource.SWTResourceManager;
-import org.eclipse.swt.widgets.Text;
+import de.hsharz.provirent.objects.Genre;
+import de.hsharz.provirent.persistence.DataBaseException;
+import de.hsharz.provirent.persistence.Database;
 /**
 * This code was generated using CloudGarden's Jigloo
 * SWT/Swing GUI Builder, which is free for non-commercial
@@ -50,7 +68,45 @@
     private final static int MODE_VIEW = 0;
 
     private final static int MODE_ADD = 1;
-    private Text text1;
+    
+    private SashForm sashForm1;
+
+    private Group groupGenreOverview;
+
+    private Group groupGenreDetail;
+
+    private Label labelGenreId;
+
+    private Label labelGenreShortname;
+
+    private Text textGenreName;
+
+    private Label labelGenreName;
+
+    private Text textGenreID;
+    
+    private Button buttonGenreCancel;
+
+    private Button buttonGenreSave;
+
+    private Button buttonGenreFill;
+
+    private Button buttonGenreDelete;
+
+    private Button buttonGenreEdit;
+
+    private Button buttonGenreNew;
+
+    private Text textGenreShortname;
+
+    private Text textGenreSearch;
+
+    private Label labelGenreSearch;
+
+    private Table tableGenre;
+
+    private SashForm sashFormGenre;
+
     private Group groupGenre;
 
     private final static int MODE_EDIT = 2;
@@ -60,6 +116,15 @@
     private ResourceBundle l;
     
     private Composite parent;
+
+
+    private Composite composite2;
+
+
+    protected int mode_Genre;
+
+
+    private TableColumn tableColumn;
     
     /*
      * ?ndert die Sprache aller Elemente
@@ -120,44 +185,733 @@
 	}
 
 	private void initGUI() {
-        if (logger.isDebugEnabled()) {
+	    if (logger.isDebugEnabled()) {
             logger.debug("initGUI() - start");
         }
 
         this.setLayout(new GridLayout());
         this.setSize(816, 540);
         {
-            groupGenre = new Group(this, SWT.NONE);
-            GridLayout groupGenreLayout = new GridLayout();
-            GridData groupGenreLData = new GridData();
-            groupGenreLData.grabExcessHorizontalSpace = true;
-            groupGenreLData.grabExcessVerticalSpace = true;
-            groupGenreLData.horizontalAlignment = GridData.FILL;
-            groupGenreLData.verticalAlignment = GridData.FILL;
-            groupGenre.setLayoutData(groupGenreLData);
-            groupGenreLayout.makeColumnsEqualWidth = true;
-            groupGenre.setLayout(groupGenreLayout);
-            groupGenre.setText("Genre");
+            sashForm1 = new SashForm(this, SWT.VERTICAL | SWT.V_SCROLL);
+            GridData sashForm1LData1 = new GridData();
+            sashForm1LData1.grabExcessHorizontalSpace = true;
+            sashForm1LData1.horizontalAlignment = GridData.FILL;
+            sashForm1LData1.grabExcessVerticalSpace = true;
+            sashForm1LData1.verticalAlignment = GridData.FILL;
+            sashForm1.setLayoutData(sashForm1LData1);
+
+            initGenreGroup();
+
+        }
+        this.layout();
+
+        if (logger.isDebugEnabled()) {
+            logger.debug("initGUI() - end");
+        }
+    } 
+	
+	/**
+     * 
+     */
+    private void initGenreGroup() {
+        {
+            //init a group for the Genre
+            groupGenre = new Group(sashForm1, SWT.NONE);
+            GridLayout group2Layout = new GridLayout();
+            group2Layout.makeColumnsEqualWidth = true;
+            groupGenre.setText(l.getString("Genre.group.label"));
+            groupGenre.setSize(758, 284);
+            FormData group2LData = new FormData();
+            groupGenre.addFocusListener(new FocusAdapter() {
+                public void focusLost(FocusEvent evt) {
+                    System.out.println("groupGenre.focusLost, event="
+                        + evt);
+                    buttonGenreCancel.setEnabled(false);
+                    buttonGenreDelete.setEnabled(false);
+                    buttonGenreEdit.setEnabled(false);
+                    buttonGenreNew.setEnabled(false);
+                    buttonGenreSave.setEnabled(false);
+                    //TODO add your code for groupGenre.focusLost
+                }
+            });
+            groupGenre.setLayout(group2Layout);
+            groupGenre.setLayoutData(group2LData);
             {
-                text1 = new Text(groupGenre, SWT.MULTI | SWT.WRAP);
-                text1.setText("text1");
-                GridData text1LData = new GridData();
-                text1.setBackground(SWTResourceManager.getColor(150, 50, 0));
-                text1LData.widthHint = 336;
-                text1LData.heightHint = 173;
-                text1.setLayoutData(text1LData);
+                sashFormGenre = new SashForm(groupGenre, SWT.NONE);
+                FormLayout sashForm2Layout = new FormLayout();
+                sashFormGenre.setSize(748, 300);
+                GridData sashForm2LData = new GridData();
+                sashFormGenre.setLayout(sashForm2Layout);
+                sashForm2LData.verticalAlignment = GridData.FILL;
+                sashForm2LData.horizontalAlignment = GridData.FILL;
+                sashForm2LData.grabExcessHorizontalSpace = true;
+                sashForm2LData.grabExcessVerticalSpace = true;
+                sashFormGenre.setLayoutData(sashForm2LData);
+
+                //init die Gruppe f?r Genree ?berblick
+                initGenreGroupOverview();
+                //init die Detailansicht
+                initGenreGroupDetail();
+
             }
         }
 
-        this.layout();
+	}
 
+    /**
+     * 
+     */
+    private void initGenreGroupDetail() {
+        groupGenreDetail = new Group(sashFormGenre, SWT.NONE);
+        GridLayout groupGenreDetailLayout = new GridLayout();
+        groupGenreDetailLayout.marginHeight = 25;
+        groupGenreDetailLayout.numColumns = 6;
+        groupGenreDetailLayout.verticalSpacing = 15;
+        groupGenreDetail.setText(l
+                .getString("Genre.groupdetail.label"));
+        FormData formData = new FormData();
+        groupGenreDetail.setLayout(groupGenreDetailLayout);
+        formData.right = new FormAttachment(100, 100, -5);
+        formData.top = new FormAttachment(0, 100, 5);
+        formData.bottom = new FormAttachment(100, 100, -5);
+        groupGenreDetail.setLayoutData(formData);
+        {
+            labelGenreId = new Label(groupGenreDetail, SWT.NONE);
+            labelGenreId.setText(l
+                    .getString("Genre.groupdetail.idlabel")
+                    + ":");
+            labelGenreId.setSize(125, 15);
+            GridData formData2 = new GridData();
+            formData2.widthHint = 125;
+            formData2.heightHint = 15;
+            formData2.horizontalSpan = 2;
+            labelGenreId.setLayoutData(formData2);
+        }
+        {
+            textGenreID = new Text(groupGenreDetail, SWT.READ_ONLY
+                    | SWT.BORDER);
+            GridData text1LData1 = new GridData();
+            text1LData1.horizontalAlignment = GridData.FILL;
+            text1LData1.heightHint = 13;
+            text1LData1.horizontalSpan = 4;
+            text1LData1.grabExcessHorizontalSpace = true;
+            textGenreID.setLayoutData(text1LData1);
+        }
+        {
+            labelGenreName = new Label(groupGenreDetail, SWT.NONE);
+            labelGenreName.setText(l
+                    .getString("Genre.groupdetail.namelabel")
+                    + ":");
+            labelGenreName.setSize(125, 15);
+            GridData labelGenreNameLData = new GridData();
+            labelGenreNameLData.widthHint = 125;
+            labelGenreNameLData.heightHint = 15;
+            labelGenreNameLData.horizontalSpan = 2;
+            labelGenreName.setLayoutData(labelGenreNameLData);
+        }
+        {
+            textGenreName = new Text(groupGenreDetail,
+                    SWT.READ_ONLY | SWT.BORDER);
+            GridData text1LData2 = new GridData();
+            text1LData2.horizontalAlignment = GridData.FILL;
+            text1LData2.heightHint = 13;
+            text1LData2.horizontalSpan = 4;
+            text1LData2.grabExcessHorizontalSpace = true;
+            textGenreName.setLayoutData(text1LData2);
+        }
+        {
+            labelGenreShortname = new Label(groupGenreDetail,
+                    SWT.NONE);
+            labelGenreShortname.setText(l
+                    .getString("Genre.groupdetail.shortcutlabel")
+                    + ":");
+            labelGenreShortname.setSize(125, 15);
+            GridData label1LData1 = new GridData();
+            label1LData1.widthHint = 125;
+            label1LData1.heightHint = 15;
+            label1LData1.horizontalSpan = 2;
+            labelGenreShortname.setLayoutData(label1LData1);
+        }
+        {
+            textGenreShortname = new Text(groupGenreDetail,
+                    SWT.READ_ONLY | SWT.BORDER);
+            GridData text1LData3 = new GridData();
+            text1LData3.horizontalAlignment = GridData.FILL;
+            text1LData3.heightHint = 13;
+            text1LData3.horizontalSpan = 4;
+            text1LData3.grabExcessHorizontalSpace = true;
+            textGenreShortname.setLayoutData(text1LData3);
+        }
+        {
 
+            //die Buttons bekommen ein eigenes Composite
+            composite2 = new Composite(groupGenreDetail, SWT.EMBEDDED);
+            GridLayout composite2Layout = new GridLayout();
+            composite2Layout.numColumns = 6;
+            GridData composite2LData = new GridData();
+            composite2.setLayout(composite2Layout);
+            composite2LData.verticalAlignment = GridData.END;
+            composite2LData.horizontalAlignment = GridData.CENTER;
+            composite2LData.widthHint = 391;
+            composite2LData.horizontalSpan = 6;
+            composite2LData.grabExcessHorizontalSpace = true;
+            composite2LData.grabExcessVerticalSpace = true;
+            composite2LData.heightHint = 35;
+            composite2.setLayoutData(composite2LData);
+
+            //init all the Buttons
+            initGenreDetailButtons();
+
+        }
+
         
+    }
+
+    /**
+     * 
+     */
+    private void initGenreDetailButtons() {
+        buttonGenreNew = new Button(composite2, SWT.PUSH | SWT.CENTER);
+        buttonGenreNew.setText(l.getString("button.new"));
+        buttonGenreNew.addSelectionListener(new SelectionAdapter() {
+            
+
+            public void widgetSelected(SelectionEvent evt) {
+
+                textGenreID.setText("");
+                textGenreName.setText("");
+                textGenreShortname.setText("");
+                
+
+                textGenreName.setEditable(true);
+                textGenreShortname.setEditable(true);
+                buttonGenreCancel.setEnabled(true);
+                buttonGenreSave.setEnabled(true);
+                buttonGenreNew.setEnabled(false);
+                buttonGenreEdit.setEnabled(false);
+                buttonGenreDelete.setEnabled(false);
+                
+                textGenreSearch.setEditable(false);
+                tableGenre.setEnabled(false);
+
+                mode_Genre = ManagementGui.MODE_ADD;
+
+            }
+        });
+
+        buttonGenreEdit = new Button(composite2, SWT.PUSH | SWT.CENTER);
+        buttonGenreEdit.setText(l.getString("button.edit"));
+        buttonGenreEdit.setEnabled(false);
+        buttonGenreEdit.addSelectionListener(new SelectionAdapter() {
+            public void widgetSelected(SelectionEvent evt) {
+
+                mode_Genre = ManagementGui.MODE_EDIT;
+
+
+                textGenreID.setEditable(false);
+
+                textGenreName.setEditable(true);
+                textGenreName.setFocus();
+                textGenreShortname.setEditable(true);
+                buttonGenreCancel.setEnabled(true);
+                buttonGenreSave.setEnabled(true);
+                buttonGenreNew.setEnabled(false);
+                buttonGenreEdit.setEnabled(false);
+                buttonGenreDelete.setEnabled(false);
+
+
+                tableGenre.setEnabled(false);
+                textGenreSearch.setEnabled(false);
+                
+
+            }
+        });
+
+        buttonGenreDelete = new Button(composite2, SWT.PUSH | SWT.CENTER);
+        buttonGenreDelete.setText(l.getString("button.delete"));
+        buttonGenreDelete.setEnabled(false);
+        buttonGenreDelete.addSelectionListener(new SelectionAdapter() {
+            public void widgetSelected(SelectionEvent evt) {
+                System.out
+                        .println("buttonGenreDelete.widgetSelected, event="
+                                + evt);
+                
+                
+               String msg = MessageFormat.format(
+                       l.getString("Genre.groupdetail.deletebutton.question.text"),
+                               new Object[]{textGenreName.getText()+" "+textGenreShortname.getText()});
+                
+               int question = showMsg(msg,
+                       l.getString("Genre.groupdetail.deletebutton.question.header"), 
+                       SWT.ICON_QUESTION | SWT.YES | SWT.NO);
+               
+               if (question != SWT.YES){
+                   return;
+               }
+                
+                Genre o = new Genre();
+                o.setGenreId(new Integer(Integer.parseInt(textGenreID.getText())));
+                o.setName(textGenreName.getText());
+                o.setShortname(textGenreShortname.getText());
+                
+                try {
+                    //object speichern
+                    // Fehlerbehandlung
+                    Database.deleteObject(o);
+
+                    //?bersichtsTabelle aktualisieren
+                    refreshGenreTable(textGenreSearch.getText());
+                    
+                    //Detailansicht leeren
+                    textGenreID.setText("");
+                    textGenreName.setText("");
+                    textGenreShortname.setText("");
+                    
+                    //in Tabelle n?chsten ausw?hlen
+                    try {
+                        tableGenre.select(0);
+                    } catch (Exception ex) {}
+                    
+                    //Statusline Nachricht sezten
+                    statusLine.setStatus(1,l.getString("Genre.groupdetail.deletebutton.newok"));
+
+                } catch (DataBaseException e) {
+                    if (e.getMessage().equalsIgnoreCase("1")) {
+                        //Fehler beim Speichern des Objectes
+
+                        statusLine.setStatus(3,l.getString("Genre.groupdetail.deletebutton.errorsave"));
+                        showMsg(l.getString("Genre.groupdetail.deletebutton.errorsave"),
+                                l.getString("error"), SWT.ICON_ERROR | SWT.OK);
+                        
+                    } else if (e.getMessage().equalsIgnoreCase("2")) {
+                        //fehler beim db aufbau
+                        statusLine.setStatus(3,l.getString("Genre.groupdetail.deletebutton.errordb"));
+                        showMsg(l.getString("Genre.groupdetail.deletebutton.errordb"),
+                                l.getString("error"), SWT.ICON_ERROR | SWT.OK);
+                        
+                    } else {
+                        //@todo
+                        e.printStackTrace();
+                    }
+                    
+                }                
+                
+
+                }
+
+            }
+        );
+
+        //leerer nicht sichtbarer Button
+        buttonGenreFill = new Button(composite2, SWT.PUSH | SWT.CENTER);
+        GridData buttonGenreFillLData = new GridData();
+        buttonGenreFill.setVisible(false);
+        buttonGenreFill.setEnabled(false);
+        buttonGenreFillLData.widthHint = 30;
+        buttonGenreFillLData.heightHint = 23;
+        buttonGenreFill.setLayoutData(buttonGenreFillLData);
+
+        buttonGenreSave = new Button(composite2, SWT.PUSH | SWT.CENTER);
+        buttonGenreSave.setText(l.getString("button.save"));
+        buttonGenreSave.setEnabled(false);
+        buttonGenreSave.addSelectionListener(new SelectionAdapter() {
+            public void widgetSelected(SelectionEvent evt) {
+                System.out
+                        .println("buttonGenreSave.widgetSelected, event="
+                                + evt);
+
+                
+                //testen ob Name leer ist
+                if (textGenreName.getText().trim().equalsIgnoreCase("")) {
+                    
+                    showMsg(l.getString("Genre.groupdetail.savebutton.warn.noname.msg"),
+                            l.getString("Genre.groupdetail.savebutton.warn.noname.title"),
+                            SWT.ICON_WARNING | SWT.YES);
+
+                    	return;
+                }
+                
+                //testen welcher mode
+                
+                if (mode_Genre == ManagementGui.MODE_ADD) {
+                    
+                    /**
+                     * @todo eine Exception bekommen wieder leider NOCH nicht mit
+                     * d.h. es muss noch ein r?ckgabewert kommen oder eine Exception 
+                     * ?bermitteln werden (aus der DB Klasse)
+                     */
+                    //neues Objekt erzeugen
+                    Genre tmp = new Genre(textGenreName.getText(),
+                            textGenreShortname.getText());
+                    
+                    try {
+                        //object speichern
+                        // Fehlerbehandlung
+                        Object o = Database.saveObject(
+                                new Genre(textGenreName.getText(),
+                                        textGenreShortname.getText()));
+                        
+                        // in ?bersichtstabelle einf?gen
+                        insertIntoGenreTable((Genre)o);
+                        textGenreID.setText( ((Genre)o).getGenreId()+"" );
+                        
+                        
+                        //Statusline Nachricht sezten
+                        statusLine.setStatus(1,l.getString("Genre.groupdetail.savebutton.newok"));
+
+                    } catch (DataBaseException e) {
+                        if (e.getMessage().equalsIgnoreCase("1")) {
+                            //Fehler beim Speichern des Objectes
+
+                            statusLine.setStatus(3,l.getString("Genre.groupdetail.savebutton.errorsave"));
+                            showMsg(l.getString("Genre.groupdetail.savebutton.errorsave"),"Fehler", SWT.ICON_ERROR | SWT.OK);
+                            
+                        } else if (e.getMessage().equalsIgnoreCase("2")) {
+                            //fehler beim db aufbau
+                            statusLine.setStatus(3,l.getString("Genre.groupdetail.savebutton.errordb"));
+                            showMsg(l.getString("Genre.groupdetail.savebutton.errordb"),"Fehler", SWT.ICON_ERROR | SWT.OK);
+                            
+                        } else {
+                            //@todo
+                            e.printStackTrace();
+                        }
+                        
+                    }
+                    
+                    
+                    //alle Buttons auf aktiv setzen
+                    setGenreGroupButtonSaveCancel();
+                    
+                } else if (mode_Genre == ManagementGui.MODE_EDIT) {
+                    
+                    Genre tmp = new Genre(textGenreName.getText(),
+                                    textGenreShortname.getText());
+        		tmp.setGenreId( new Integer (Integer.parseInt(textGenreID.getText())) );
+                try {
+                    //object speichern
+                    // Fehlerbehandlung
+                    Database.saveObject(tmp);
+                    //?bersichtstabelle aktualisieren
+                    refreshGenreTable(textGenreSearch.getText());
+                    
+                    //Statusline Nachricht sezten
+                    statusLine.setStatus(1,l.getString("Genre.groupdetail.savebutton.editok"));
+                   
+
+                } catch (DataBaseException e) {
+                    if (e.getMessage().equalsIgnoreCase("1")) {
+                        //Fehler beim Speichern des Objectes
+
+                        statusLine.setStatus(3,l.getString("Genre.groupdetail.savebutton.errorsave"));
+                        showMsg(l.getString("Genre.groupdetail.savebutton.errorsave"),"Fehler", SWT.ICON_ERROR | SWT.OK);
+                        
+                    } else if (e.getMessage().equalsIgnoreCase("2")) {
+                        //fehler beim db aufbau
+                        statusLine.setStatus(3,l.getString("Genre.groupdetail.savebutton.errordb"));
+                        showMsg(l.getString("Genre.groupdetail.savebutton.errordb"),"Fehler", SWT.ICON_ERROR | SWT.OK);
+                        
+                    } else {
+                        //@todo
+                        e.printStackTrace();
+                    }
+                    
+                }
+                    
+ 
+                    //alle Buttons auf aktiv setzen
+                    setGenreGroupButtonSaveCancel();
+                    
+                }
+                
+                
+                
+                /**
+                 * @todo Exception werfen, da nur die zwei Modes sein d?rfen
+                 */
+                
+            }
+        });
+
+        buttonGenreCancel = new Button(composite2, SWT.PUSH | SWT.CENTER);
+        buttonGenreCancel.setText(l.getString("button.cancel"));
+        buttonGenreCancel.setEnabled(false);
+        buttonGenreCancel.addSelectionListener(new SelectionAdapter() {
+            public void widgetSelected(SelectionEvent evt) {
+                System.out
+                        .println("buttonGenreCancel.widgetSelected, event="
+                                + evt);
+                setGenreGroupButtonSaveCancel();
+            }
+        });
+
+        
+    }
+
+    /**
+     * 
+     */
+    protected void setGenreGroupButtonSaveCancel() {
+        buttonGenreSave.setEnabled(false);
+        buttonGenreCancel.setEnabled(false);
+        buttonGenreEdit.setEnabled(true);
+        buttonGenreNew.setEnabled(true);
+        buttonGenreDelete.setEnabled(true);
+        textGenreName.setEditable(false);
+        textGenreShortname.setEditable(false);
+        textGenreSearch.setEditable(true);
+
+        // GenreTabelle aktivieren
+        tableGenre.setEnabled(true);
+
+        //GenreSearch aktivieren
+        textGenreSearch.setEnabled(true);
+        
+    }
+
+    /**
+     * @param genre
+     */
+    protected void insertIntoGenreTable(Genre genre) {
+        TableItem item = new TableItem(tableGenre, SWT.NONE);
+        item.setText(new String[] { genre.getGenreId() + "", genre.getName(),
+                genre.getShortname() });
+        
+    }
+
+    /**
+     * @param text
+     */
+    protected void refreshGenreTable(final String filter) {
+        if (tableGenre == null) {
+            System.out
+                    .println("Konnte Genretable nicht refreshen, da diese null ist!");
+            return;
+        }
+        System.out.println("Versuche nun VideoListe zu refreshen. Filter: "
+                + filter);
+        tableGenre.removeAll();
+        TableItem item;
+        java.util.List Genrelist = Database.getGenre(filter);
+
+        for (int i = 0; i < Genrelist.size(); i++) {
+
+            Genre o = (Genre) Genrelist.get(i);
+            item = new TableItem(tableGenre, SWT.NONE);
+            item.setText(new String[] { o.getGenreId() + "", o.getName(),
+                    o.getShortname() });
+
+        }
+
+        
+    }
+
+    /**
+     * 
+     */
+    private void initGenreGroupOverview() {
         if (logger.isDebugEnabled()) {
-            logger.debug("initGUI() - end");
+            logger.debug("initGenreGroupOverview() - start");
         }
-	}
 
+        groupGenreOverview = new Group(sashFormGenre, SWT.NONE);
+        GridLayout group5Layout = new GridLayout();
+        group5Layout.numColumns = 8;
+        groupGenreOverview.setText(l
+                .getString("Genre.groupoverview.label"));
+        FormData group5LData = new FormData();
+        groupGenreOverview.setLayout(group5Layout);
+        group5LData.left = new FormAttachment(0, 100, 0);
+        group5LData.top = new FormAttachment(0, 100, 0);
+        groupGenreOverview.setLayoutData(group5LData);
+
+        //Tabelle anzeigen
+        initTableGenre();
+        //Suche darunter anzeigen
+        initGenreSearch();
+
+        if (logger.isDebugEnabled()) {
+            logger.debug("initGenreGroupOverview() - end");
+        }
+        
+    }
+
+    /**
+     * 
+     */
+    private void initGenreSearch() {
+        if (logger.isDebugEnabled()) {
+            logger.debug("initGenreSearch() - start");
+        }
+
+        //label f?r die Suche
+        labelGenreSearch = new Label(groupGenreOverview, SWT.NONE);
+        labelGenreSearch.setText(l
+                .getString("Genre.groupoverview.searchlabel")
+                + ":");
+        GridData label2LData = new GridData();
+        label2LData.horizontalSpan = 3;
+        labelGenreSearch.setLayoutData(label2LData);
+
+        //das Suchfeld
+        textGenreSearch = new Text(groupGenreOverview, SWT.BORDER);
+        GridData text2LData = new GridData();
+        textGenreSearch.addFocusListener(new FocusAdapter() {
+            public void focusLost(FocusEvent evt) {
+                if (logger.isDebugEnabled()) {
+                    logger.debug("focusLost(FocusEvent evt = " + evt + " "
+                            + textGenreSearch.getText() + ") - start");
+                }
+
+                refreshGenreTable(textGenreSearch.getText());
+
+                if (logger.isDebugEnabled()) {
+                    logger.debug("focusLost(FocusEvent) - end");
+                }
+            }
+        });
+
+        textGenreSearch.addListener(SWT.DefaultSelection, new Listener() {
+            public void handleEvent(Event e) {
+                if (logger.isDebugEnabled()) {
+                    logger.debug("handleEvent(Event e = " + e + " "
+                            + textGenreSearch.getText() + ") - start");
+                }
+
+                refreshGenreTable(textGenreSearch.getText());
+
+                if (logger.isDebugEnabled()) {
+                    logger.debug("handleEvent(Event) - end");
+                }
+            }
+        });
+
+        text2LData.horizontalAlignment = GridData.FILL;
+        text2LData.horizontalSpan = 5;
+        text2LData.grabExcessHorizontalSpace = true;
+        textGenreSearch.setLayoutData(text2LData);
+
+
+
+        if (logger.isDebugEnabled()) {
+            logger.debug("initGenreSearch() - end");
+        }
+        
+    }
+
+    /**
+     * 
+     */
+    private void initTableGenre() {
+        if (logger.isDebugEnabled()) {
+            logger.debug("initTableGenre() - start");
+        }
+
+        tableGenre = new Table(groupGenreOverview, SWT.SINGLE
+                | SWT.FULL_SELECTION | SWT.V_SCROLL | SWT.BORDER);
+        tableGenre.setHeaderVisible(true);
+        tableGenre.setLinesVisible(true);
+        GridData table2LData = new GridData();
+        tableGenre.addFocusListener(new FocusAdapter() {
+            public void focusLost(FocusEvent evt) {
+                System.out.println("tableGenre.focusLost, event=" + evt);
+                //TODO add your code for tableGenre.focusLost
+            }
+            public void focusGained(FocusEvent evt) {
+                System.out
+                    .println("tableGenre.focusGained, event=" + evt);
+                //TODO add your code for tableGenre.focusGained
+            }
+        });
+        tableGenre.addSelectionListener(new SelectionAdapter() {
+            public void widgetSelected(SelectionEvent evt) {
+                if (logger.isDebugEnabled()) {
+                    logger.debug("widgetSelected(SelectionEvent evt = "
+                        + evt
+                        + ") - start");
+                }
+
+                int index = tableGenre.getSelectionIndex();
+
+                System.out.println("Table select. id: "
+                    + index
+                    + " TableItem:"
+                    + tableGenre.getItem(index)
+                    + " id: "
+                    + tableGenre.getItem(index).getText(0));
+
+                //es wurde ein Element aus Tabelle ausgewaehlt jetzt muss die
+                //Detailansicht aktualisiert werden
+                refreshGenreDetail(tableGenre.getItem(index)
+                    .getText(0));
+
+                if (logger.isDebugEnabled()) {
+                    logger.debug("widgetSelected(SelectionEvent) - end");
+                }
+            }
+        });
+        table2LData.verticalAlignment = GridData.FILL;
+        table2LData.horizontalAlignment = GridData.FILL;
+        table2LData.horizontalSpan = 8;
+        table2LData.grabExcessHorizontalSpace = true;
+        table2LData.grabExcessVerticalSpace = true;
+        tableGenre.setLayoutData(table2LData);
+
+        //einzelne Spalten hinzuf?gen
+        tableColumn = new TableColumn(tableGenre, SWT.CENTER);
+        tableColumn.setText(l.getString("Genre.groupoverview.columnid"));
+        tableColumn.setWidth(50);
+
+        tableColumn = new TableColumn(tableGenre, SWT.CENTER);
+        tableColumn.setText(l.getString("Genre.groupoverview.columnname"));
+        tableColumn.setWidth(200);
+
+        tableColumn = new TableColumn(tableGenre, SWT.CENTER);
+        tableColumn.setText(l.getString("Genre.groupoverview.columnshortname"));
+        tableColumn.setWidth(75);
+
+        if (logger.isDebugEnabled()) {
+            logger.debug("initTableGenre() - end");
+        }
+        
+    }
+
+    /**
+     * @param text
+     */
+    protected void refreshGenreDetail(final String id) {
+        Genre object;
+        try {
+            //since we only can get a String value from the table, we
+            //need to convert this
+            object = Database.getSingleGenre(Integer.parseInt(id));
+
+            if (object == null) {
+
+                /*
+                 * 
+                 * @TODO Statusbar aktualiseren
+                 */
+                return;
+            }
+        } catch (Exception e) {
+            // TODO: handle exception
+            //id ist keine Zahl
+            return;
+        }
+
+        textGenreID.setText(object.getGenreId() + "");
+        textGenreName.setText(object.getName());
+        textGenreShortname.setText(object.getShortname());
+
+        //Buttons zum l?schen und editieren aktivieren
+        buttonGenreEdit.setEnabled(true);
+        buttonGenreDelete.setEnabled(true);
+
+        //Mode auf view setzen
+        mode_Genre = ManagementGui.MODE_VIEW;
+        
+    }
+
 	
 
 }

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/CompositeLanguage.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/CompositeLanguage.java	2004-11-09 17:33:29 UTC (rev 100)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/CompositeLanguage.java	2004-11-09 17:34:40 UTC (rev 101)
@@ -1,22 +1,40 @@
 package de.hsharz.provirent.managment.gui;
 
+import java.text.MessageFormat;
 import java.util.Locale;
 import java.util.PropertyResourceBundle;
 import java.util.ResourceBundle;
 
 import org.apache.log4j.Logger;
 import org.eclipse.swt.SWT;
+import org.eclipse.swt.custom.SashForm;
+import org.eclipse.swt.events.FocusAdapter;
+import org.eclipse.swt.events.FocusEvent;
+import org.eclipse.swt.events.SelectionAdapter;
+import org.eclipse.swt.events.SelectionEvent;
+import org.eclipse.swt.layout.FormAttachment;
+import org.eclipse.swt.layout.FormData;
+import org.eclipse.swt.layout.FormLayout;
+import org.eclipse.swt.layout.GridData;
 import org.eclipse.swt.layout.GridLayout;
 import org.eclipse.swt.widgets.Button;
 import org.eclipse.swt.widgets.Composite;
 import org.eclipse.swt.widgets.Display;
+import org.eclipse.swt.widgets.Event;
+import org.eclipse.swt.widgets.Group;
+import org.eclipse.swt.widgets.Label;
+import org.eclipse.swt.widgets.Listener;
 import org.eclipse.swt.widgets.Shell;
+import org.eclipse.swt.widgets.Table;
+import org.eclipse.swt.widgets.TableColumn;
+import org.eclipse.swt.widgets.TableItem;
+import org.eclipse.swt.widgets.Text;
 
+import com.cloudgarden.resource.SWTResourceManager;
 
-import org.eclipse.swt.widgets.Group;
-import org.eclipse.swt.layout.GridData;
-import com.cloudgarden.resource.SWTResourceManager;
-import org.eclipse.swt.widgets.Text;
+import de.hsharz.provirent.objects.Language;
+import de.hsharz.provirent.persistence.DataBaseException;
+import de.hsharz.provirent.persistence.Database;
 /**
 * This code was generated using CloudGarden's Jigloo
 * SWT/Swing GUI Builder, which is free for non-commercial
@@ -50,7 +68,45 @@
     private final static int MODE_VIEW = 0;
 
     private final static int MODE_ADD = 1;
-    private Text text1;
+    
+    private SashForm sashForm1;
+
+    private Group groupLanguageOverview;
+
+    private Group groupLanguageDetail;
+
+    private Label labelLanguageId;
+
+    private Label labelLanguageShortname;
+
+    private Text textLanguageName;
+
+    private Label labelLanguageName;
+
+    private Text textLanguageID;
+    
+    private Button buttonLanguageCancel;
+
+    private Button buttonLanguageSave;
+
+    private Button buttonLanguageFill;
+
+    private Button buttonLanguageDelete;
+
+    private Button buttonLanguageEdit;
+
+    private Button buttonLanguageNew;
+
+    private Text textLanguageShortname;
+
+    private Text textLanguageSearch;
+
+    private Label labelLanguageSearch;
+
+    private Table tableLanguage;
+
+    private SashForm sashFormLanguage;
+
     private Group groupLanguage;
 
     private final static int MODE_EDIT = 2;
@@ -60,6 +116,15 @@
     private ResourceBundle l;
     
     private Composite parent;
+
+
+    private Composite composite2;
+
+
+    protected int mode_Language;
+
+
+    private TableColumn tableColumn;
     
     /*
      * ?ndert die Sprache aller Elemente
@@ -77,7 +142,7 @@
     public void initLanguage(Locale locale) {
 
         l = PropertyResourceBundle.getBundle(
-                "de.hsharz.provirent.managment.gui.language.language", locale);
+                "de.hsharz.provirent.managment.gui.language.Language", locale);
 
     }
     
@@ -120,44 +185,733 @@
 	}
 
 	private void initGUI() {
-        if (logger.isDebugEnabled()) {
+	    if (logger.isDebugEnabled()) {
             logger.debug("initGUI() - start");
         }
 
         this.setLayout(new GridLayout());
         this.setSize(816, 540);
         {
-            groupLanguage = new Group(this, SWT.NONE);
-            GridLayout groupLanguageLayout = new GridLayout();
-            GridData groupLanguageLData = new GridData();
-            groupLanguageLData.grabExcessHorizontalSpace = true;
-            groupLanguageLData.grabExcessVerticalSpace = true;
-            groupLanguageLData.horizontalAlignment = GridData.FILL;
-            groupLanguageLData.verticalAlignment = GridData.FILL;
-            groupLanguage.setLayoutData(groupLanguageLData);
-            groupLanguageLayout.makeColumnsEqualWidth = true;
-            groupLanguage.setLayout(groupLanguageLayout);
-            groupLanguage.setText("Language");
+            sashForm1 = new SashForm(this, SWT.VERTICAL | SWT.V_SCROLL);
+            GridData sashForm1LData1 = new GridData();
+            sashForm1LData1.grabExcessHorizontalSpace = true;
+            sashForm1LData1.horizontalAlignment = GridData.FILL;
+            sashForm1LData1.grabExcessVerticalSpace = true;
+            sashForm1LData1.verticalAlignment = GridData.FILL;
+            sashForm1.setLayoutData(sashForm1LData1);
+
+            initLanguageGroup();
+
+        }
+        this.layout();
+
+        if (logger.isDebugEnabled()) {
+            logger.debug("initGUI() - end");
+        }
+    } 
+	
+	/**
+     * 
+     */
+    private void initLanguageGroup() {
+        {
+            //init a group for the Language
+            groupLanguage = new Group(sashForm1, SWT.NONE);
+            GridLayout group2Layout = new GridLayout();
+            group2Layout.makeColumnsEqualWidth = true;
+            groupLanguage.setText(l.getString("Language.group.label"));
+            groupLanguage.setSize(758, 284);
+            FormData group2LData = new FormData();
+            groupLanguage.addFocusListener(new FocusAdapter() {
+                public void focusLost(FocusEvent evt) {
+                    System.out.println("groupLanguage.focusLost, event="
+                        + evt);
+                    buttonLanguageCancel.setEnabled(false);
+                    buttonLanguageDelete.setEnabled(false);
+                    buttonLanguageEdit.setEnabled(false);
+                    buttonLanguageNew.setEnabled(false);
+                    buttonLanguageSave.setEnabled(false);
+                    //TODO add your code for groupLanguage.focusLost
+                }
+            });
+            groupLanguage.setLayout(group2Layout);
+            groupLanguage.setLayoutData(group2LData);
             {
-                text1 = new Text(groupLanguage, SWT.MULTI | SWT.WRAP);
-                text1.setText("text1");
-                GridData text1LData = new GridData();
-                text1.setBackground(SWTResourceManager.getColor(150, 255, 50));
-                text1LData.widthHint = 336;
-                text1LData.heightHint = 173;
-                text1.setLayoutData(text1LData);
+                sashFormLanguage = new SashForm(groupLanguage, SWT.NONE);
+                FormLayout sashForm2Layout = new FormLayout();
+                sashFormLanguage.setSize(748, 300);
+                GridData sashForm2LData = new GridData();
+                sashFormLanguage.setLayout(sashForm2Layout);
+                sashForm2LData.verticalAlignment = GridData.FILL;
+                sashForm2LData.horizontalAlignment = GridData.FILL;
+                sashForm2LData.grabExcessHorizontalSpace = true;
+                sashForm2LData.grabExcessVerticalSpace = true;
+                sashFormLanguage.setLayoutData(sashForm2LData);
+
+                //init die Gruppe f?r Languagee ?berblick
+                initLanguageGroupOverview();
+                //init die Detailansicht
+                initLanguageGroupDetail();
+
             }
         }
 
-        this.layout();
+	}
 
+    /**
+     * 
+     */
+    private void initLanguageGroupDetail() {
+        groupLanguageDetail = new Group(sashFormLanguage, SWT.NONE);
+        GridLayout groupLanguageDetailLayout = new GridLayout();
+        groupLanguageDetailLayout.marginHeight = 25;
+        groupLanguageDetailLayout.numColumns = 6;
+        groupLanguageDetailLayout.verticalSpacing = 15;
+        groupLanguageDetail.setText(l
+                .getString("Language.groupdetail.label"));
+        FormData formData = new FormData();
+        groupLanguageDetail.setLayout(groupLanguageDetailLayout);
+        formData.right = new FormAttachment(100, 100, -5);
+        formData.top = new FormAttachment(0, 100, 5);
+        formData.bottom = new FormAttachment(100, 100, -5);
+        groupLanguageDetail.setLayoutData(formData);
+        {
+            labelLanguageId = new Label(groupLanguageDetail, SWT.NONE);
+            labelLanguageId.setText(l
+                    .getString("Language.groupdetail.idlabel")
+                    + ":");
+            labelLanguageId.setSize(125, 15);
+            GridData formData2 = new GridData();
+            formData2.widthHint = 125;
+            formData2.heightHint = 15;
+            formData2.horizontalSpan = 2;
+            labelLanguageId.setLayoutData(formData2);
+        }
+        {
+            textLanguageID = new Text(groupLanguageDetail, SWT.READ_ONLY
+                    | SWT.BORDER);
+            GridData text1LData1 = new GridData();
+            text1LData1.horizontalAlignment = GridData.FILL;
+            text1LData1.heightHint = 13;
+            text1LData1.horizontalSpan = 4;
+            text1LData1.grabExcessHorizontalSpace = true;
+            textLanguageID.setLayoutData(text1LData1);
+        }
+        {
+            labelLanguageName = new Label(groupLanguageDetail, SWT.NONE);
+            labelLanguageName.setText(l
+                    .getString("Language.groupdetail.namelabel")
+                    + ":");
+            labelLanguageName.setSize(125, 15);
+            GridData labelLanguageNameLData = new GridData();
+            labelLanguageNameLData.widthHint = 125;
+            labelLanguageNameLData.heightHint = 15;
+            labelLanguageNameLData.horizontalSpan = 2;
+            labelLanguageName.setLayoutData(labelLanguageNameLData);
+        }
+        {
+            textLanguageName = new Text(groupLanguageDetail,
+                    SWT.READ_ONLY | SWT.BORDER);
+            GridData text1LData2 = new GridData();
+            text1LData2.horizontalAlignment = GridData.FILL;
+            text1LData2.heightHint = 13;
+            text1LData2.horizontalSpan = 4;
+            text1LData2.grabExcessHorizontalSpace = true;
+            textLanguageName.setLayoutData(text1LData2);
+        }
+        {
+            labelLanguageShortname = new Label(groupLanguageDetail,
+                    SWT.NONE);
+            labelLanguageShortname.setText(l
+                    .getString("Language.groupdetail.shortcutlabel")
+                    + ":");
+            labelLanguageShortname.setSize(125, 15);
+            GridData label1LData1 = new GridData();
+            label1LData1.widthHint = 125;
+            label1LData1.heightHint = 15;
+            label1LData1.horizontalSpan = 2;
+            labelLanguageShortname.setLayoutData(label1LData1);
+        }
+        {
+            textLanguageShortname = new Text(groupLanguageDetail,
+                    SWT.READ_ONLY | SWT.BORDER);
+            GridData text1LData3 = new GridData();
+            text1LData3.horizontalAlignment = GridData.FILL;
+            text1LData3.heightHint = 13;
+            text1LData3.horizontalSpan = 4;
+            text1LData3.grabExcessHorizontalSpace = true;
+            textLanguageShortname.setLayoutData(text1LData3);
+        }
+        {
 
+            //die Buttons bekommen ein eigenes Composite
+            composite2 = new Composite(groupLanguageDetail, SWT.EMBEDDED);
+            GridLayout composite2Layout = new GridLayout();
+            composite2Layout.numColumns = 6;
+            GridData composite2LData = new GridData();
+            composite2.setLayout(composite2Layout);
+            composite2LData.verticalAlignment = GridData.END;
+            composite2LData.horizontalAlignment = GridData.CENTER;
+            composite2LData.widthHint = 391;
+            composite2LData.horizontalSpan = 6;
+            composite2LData.grabExcessHorizontalSpace = true;
+            composite2LData.grabExcessVerticalSpace = true;
+            composite2LData.heightHint = 35;
+            composite2.setLayoutData(composite2LData);
+
+            //init all the Buttons
+            initLanguageDetailButtons();
+
+        }
+
         
+    }
+
+    /**
+     * 
+     */
+    private void initLanguageDetailButtons() {
+        buttonLanguageNew = new Button(composite2, SWT.PUSH | SWT.CENTER);
+        buttonLanguageNew.setText(l.getString("button.new"));
+        buttonLanguageNew.addSelectionListener(new SelectionAdapter() {
+            
+
+            public void widgetSelected(SelectionEvent evt) {
+
+                textLanguageID.setText("");
+                textLanguageName.setText("");
+                textLanguageShortname.setText("");
+                
+
+                textLanguageName.setEditable(true);
+                textLanguageShortname.setEditable(true);
+                buttonLanguageCancel.setEnabled(true);
+                buttonLanguageSave.setEnabled(true);
+                buttonLanguageNew.setEnabled(false);
+                buttonLanguageEdit.setEnabled(false);
+                buttonLanguageDelete.setEnabled(false);
+                
+                textLanguageSearch.setEditable(false);
+                tableLanguage.setEnabled(false);
+
+                mode_Language = ManagementGui.MODE_ADD;
+
+            }
+        });
+
+        buttonLanguageEdit = new Button(composite2, SWT.PUSH | SWT.CENTER);
+        buttonLanguageEdit.setText(l.getString("button.edit"));
+        buttonLanguageEdit.setEnabled(false);
+        buttonLanguageEdit.addSelectionListener(new SelectionAdapter() {
+            public void widgetSelected(SelectionEvent evt) {
+
+                mode_Language = ManagementGui.MODE_EDIT;
+
+
+                textLanguageID.setEditable(false);
+
+                textLanguageName.setEditable(true);
+                textLanguageName.setFocus();
+                textLanguageShortname.setEditable(true);
+                buttonLanguageCancel.setEnabled(true);
+                buttonLanguageSave.setEnabled(true);
+                buttonLanguageNew.setEnabled(false);
+                buttonLanguageEdit.setEnabled(false);
+                buttonLanguageDelete.setEnabled(false);
+
+
+                tableLanguage.setEnabled(false);
+                textLanguageSearch.setEnabled(false);
+                
+
+            }
+        });
+
+        buttonLanguageDelete = new Button(composite2, SWT.PUSH | SWT.CENTER);
+        buttonLanguageDelete.setText(l.getString("button.delete"));
+        buttonLanguageDelete.setEnabled(false);
+        buttonLanguageDelete.addSelectionListener(new SelectionAdapter() {
+            public void widgetSelected(SelectionEvent evt) {
+                System.out
+                        .println("buttonLanguageDelete.widgetSelected, event="
+                                + evt);
+                
+                
+               String msg = MessageFormat.format(
+                       l.getString("Language.groupdetail.deletebutton.question.text"),
+                               new Object[]{textLanguageName.getText()+" "+textLanguageShortname.getText()});
+                
+               int question = showMsg(msg,
+                       l.getString("Language.groupdetail.deletebutton.question.header"), 
+                       SWT.ICON_QUESTION | SWT.YES | SWT.NO);
+               
+               if (question != SWT.YES){
+                   return;
+               }
+                
+                Language o = new Language();
+                o.setLanguageId(new Integer(Integer.parseInt(textLanguageID.getText())));
+                o.setName(textLanguageName.getText());
+                o.setShortname(textLanguageShortname.getText());
+                
+                try {
+                    //object speichern
+                    // Fehlerbehandlung
+                    Database.deleteObject(o);
+
+                    //?bersichtsTabelle aktualisieren
+                    refreshLanguageTable(textLanguageSearch.getText());
+                    
+                    //Detailansicht leeren
+                    textLanguageID.setText("");
+                    textLanguageName.setText("");
+                    textLanguageShortname.setText("");
+                    
+                    //in Tabelle n?chsten ausw?hlen
+                    try {
+                        tableLanguage.select(0);
+                    } catch (Exception ex) {}
+                    
+                    //Statusline Nachricht sezten
+                    statusLine.setStatus(1,l.getString("Language.groupdetail.deletebutton.newok"));
+
+                } catch (DataBaseException e) {
+                    if (e.getMessage().equalsIgnoreCase("1")) {
+                        //Fehler beim Speichern des Objectes
+
+                        statusLine.setStatus(3,l.getString("Language.groupdetail.deletebutton.errorsave"));
+                        showMsg(l.getString("Language.groupdetail.deletebutton.errorsave"),
+                                l.getString("error"), SWT.ICON_ERROR | SWT.OK);
+                        
+                    } else if (e.getMessage().equalsIgnoreCase("2")) {
+                        //fehler beim db aufbau
+                        statusLine.setStatus(3,l.getString("Language.groupdetail.deletebutton.errordb"));
+                        showMsg(l.getString("Language.groupdetail.deletebutton.errordb"),
+                                l.getString("error"), SWT.ICON_ERROR | SWT.OK);
+                        
+                    } else {
+                        //@todo
+                        e.printStackTrace();
+                    }
+                    
+                }                
+                
+
+                }
+
+            }
+        );
+
+        //leerer nicht sichtbarer Button
+        buttonLanguageFill = new Button(composite2, SWT.PUSH | SWT.CENTER);
+        GridData buttonLanguageFillLData = new GridData();
+        buttonLanguageFill.setVisible(false);
+        buttonLanguageFill.setEnabled(false);
+        buttonLanguageFillLData.widthHint = 30;
+        buttonLanguageFillLData.heightHint = 23;
+        buttonLanguageFill.setLayoutData(buttonLanguageFillLData);
+
+        buttonLanguageSave = new Button(composite2, SWT.PUSH | SWT.CENTER);
+        buttonLanguageSave.setText(l.getString("button.save"));
+        buttonLanguageSave.setEnabled(false);
+        buttonLanguageSave.addSelectionListener(new SelectionAdapter() {
+            public void widgetSelected(SelectionEvent evt) {
+                System.out
+                        .println("buttonLanguageSave.widgetSelected, event="
+                                + evt);
+
+                
+                //testen ob Name leer ist
+                if (textLanguageName.getText().trim().equalsIgnoreCase("")) {
+                    
+                    showMsg(l.getString("Language.groupdetail.savebutton.warn.noname.msg"),
+                            l.getString("Language.groupdetail.savebutton.warn.noname.title"),
+                            SWT.ICON_WARNING | SWT.YES);
+
+                    	return;
+                }
+                
+                //testen welcher mode
+                
+                if (mode_Language == ManagementGui.MODE_ADD) {
+                    
+                    /**
+                     * @todo eine Exception bekommen wieder leider NOCH nicht mit
+                     * d.h. es muss noch ein r?ckgabewert kommen oder eine Exception 
+                     * ?bermitteln werden (aus der DB Klasse)
+                     */
+                    //neues Objekt erzeugen
+                    Language tmp = new Language(textLanguageName.getText(),
+                            textLanguageShortname.getText());
+                    
+                    try {
+                        //object speichern
+                        // Fehlerbehandlung
+                        Object o = Database.saveObject(
+                                new Language(textLanguageName.getText(),
+                                        textLanguageShortname.getText()));
+                        
+                        // in ?bersichtstabelle einf?gen
+                        insertIntoLanguageTable((Language)o);
+                        textLanguageID.setText( ((Language)o).getLanguageId()+"" );
+                        
+                        
+                        //Statusline Nachricht sezten
+                        statusLine.setStatus(1,l.getString("Language.groupdetail.savebutton.newok"));
+
+                    } catch (DataBaseException e) {
+                        if (e.getMessage().equalsIgnoreCase("1")) {
+                            //Fehler beim Speichern des Objectes
+
+                            statusLine.setStatus(3,l.getString("Language.groupdetail.savebutton.errorsave"));
+                            showMsg(l.getString("Language.groupdetail.savebutton.errorsave"),"Fehler", SWT.ICON_ERROR | SWT.OK);
+                            
+                        } else if (e.getMessage().equalsIgnoreCase("2")) {
+                            //fehler beim db aufbau
+                            statusLine.setStatus(3,l.getString("Language.groupdetail.savebutton.errordb"));
+                            showMsg(l.getString("Language.groupdetail.savebutton.errordb"),"Fehler", SWT.ICON_ERROR | SWT.OK);
+                            
+                        } else {
+                            //@todo
+                            e.printStackTrace();
+                        }
+                        
+                    }
+                    
+                    
+                    //alle Buttons auf aktiv setzen
+                    setLanguageGroupButtonSaveCancel();
+                    
+                } else if (mode_Language == ManagementGui.MODE_EDIT) {
+                    
+                    Language tmp = new Language(textLanguageName.getText(),
+                                    textLanguageShortname.getText());
+        		tmp.setLanguageId( new Integer (Integer.parseInt(textLanguageID.getText())) );
+                try {
+                    //object speichern
+                    // Fehlerbehandlung
+                    Database.saveObject(tmp);
+                    //?bersichtstabelle aktualisieren
+                    refreshLanguageTable(textLanguageSearch.getText());
+                    
+                    //Statusline Nachricht sezten
+                    statusLine.setStatus(1,l.getString("Language.groupdetail.savebutton.editok"));
+                   
+
+                } catch (DataBaseException e) {
+                    if (e.getMessage().equalsIgnoreCase("1")) {
+                        //Fehler beim Speichern des Objectes
+
+                        statusLine.setStatus(3,l.getString("Language.groupdetail.savebutton.errorsave"));
+                        showMsg(l.getString("Language.groupdetail.savebutton.errorsave"),"Fehler", SWT.ICON_ERROR | SWT.OK);
+                        
+                    } else if (e.getMessage().equalsIgnoreCase("2")) {
+                        //fehler beim db aufbau
+                        statusLine.setStatus(3,l.getString("Language.groupdetail.savebutton.errordb"));
+                        showMsg(l.getString("Language.groupdetail.savebutton.errordb"),"Fehler", SWT.ICON_ERROR | SWT.OK);
+                        
+                    } else {
+                        //@todo
+                        e.printStackTrace();
+                    }
+                    
+                }
+                    
+ 
+                    //alle Buttons auf aktiv setzen
+                    setLanguageGroupButtonSaveCancel();
+                    
+                }
+                
+                
+                
+                /**
+                 * @todo Exception werfen, da nur die zwei Modes sein d?rfen
+                 */
+                
+            }
+        });
+
+        buttonLanguageCancel = new Button(composite2, SWT.PUSH | SWT.CENTER);
+        buttonLanguageCancel.setText(l.getString("button.cancel"));
+        buttonLanguageCancel.setEnabled(false);
+        buttonLanguageCancel.addSelectionListener(new SelectionAdapter() {
+            public void widgetSelected(SelectionEvent evt) {
+                System.out
+                        .println("buttonLanguageCancel.widgetSelected, event="
+                                + evt);
+                setLanguageGroupButtonSaveCancel();
+            }
+        });
+
+        
+    }
+
+    /**
+     * 
+     */
+    protected void setLanguageGroupButtonSaveCancel() {
+        buttonLanguageSave.setEnabled(false);
+        buttonLanguageCancel.setEnabled(false);
+        buttonLanguageEdit.setEnabled(true);
+        buttonLanguageNew.setEnabled(true);
+        buttonLanguageDelete.setEnabled(true);
+        textLanguageName.setEditable(false);
+        textLanguageShortname.setEditable(false);
+        textLanguageSearch.setEditable(true);
+
+        // LanguageTabelle aktivieren
+        tableLanguage.setEnabled(true);
+
+        //LanguageSearch aktivieren
+        textLanguageSearch.setEnabled(true);
+        
+    }
+
+    /**
+     * @param Language
+     */
+    protected void insertIntoLanguageTable(Language Language) {
+        TableItem item = new TableItem(tableLanguage, SWT.NONE);
+        item.setText(new String[] { Language.getLanguageId() + "", Language.getName(),
+                Language.getShortname() });
+        
+    }
+
+    /**
+     * @param text
+     */
+    protected void refreshLanguageTable(final String filter) {
+        if (tableLanguage == null) {
+            System.out
+                    .println("Konnte Languagetable nicht refreshen, da diese null ist!");
+            return;
+        }
+        System.out.println("Versuche nun VideoListe zu refreshen. Filter: "
+                + filter);
+        tableLanguage.removeAll();
+        TableItem item;
+        java.util.List Languagelist = Database.getLanguage(filter);
+
+        for (int i = 0; i < Languagelist.size(); i++) {
+
+            Language o = (Language) Languagelist.get(i);
+            item = new TableItem(tableLanguage, SWT.NONE);
+            item.setText(new String[] { o.getLanguageId() + "", o.getName(),
+                    o.getShortname() });
+
+        }
+
+        
+    }
+
+    /**
+     * 
+     */
+    private void initLanguageGroupOverview() {
         if (logger.isDebugEnabled()) {
-            logger.debug("initGUI() - end");
+            logger.debug("initLanguageGroupOverview() - start");
         }
-	}
 
+        groupLanguageOverview = new Group(sashFormLanguage, SWT.NONE);
+        GridLayout group5Layout = new GridLayout();
+        group5Layout.numColumns = 8;
+        groupLanguageOverview.setText(l
+                .getString("Language.groupoverview.label"));
+        FormData group5LData = new FormData();
+        groupLanguageOverview.setLayout(group5Layout);
+        group5LData.left = new FormAttachment(0, 100, 0);
+        group5LData.top = new FormAttachment(0, 100, 0);
+        groupLanguageOverview.setLayoutData(group5LData);
+
+        //Tabelle anzeigen
+        initTableLanguage();
+        //Suche darunter anzeigen
+        initLanguageSearch();
+
+        if (logger.isDebugEnabled()) {
+            logger.debug("initLanguageGroupOverview() - end");
+        }
+        
+    }
+
+    /**
+     * 
+     */
+    private void initLanguageSearch() {
+        if (logger.isDebugEnabled()) {
+            logger.debug("initLanguageSearch() - start");
+        }
+
+        //label f?r die Suche
+        labelLanguageSearch = new Label(groupLanguageOverview, SWT.NONE);
+        labelLanguageSearch.setText(l
+                .getString("Language.groupoverview.searchlabel")
+                + ":");
+        GridData label2LData = new GridData();
+        label2LData.horizontalSpan = 3;
+        labelLanguageSearch.setLayoutData(label2LData);
+
+        //das Suchfeld
+        textLanguageSearch = new Text(groupLanguageOverview, SWT.BORDER);
+        GridData text2LData = new GridData();
+        textLanguageSearch.addFocusListener(new FocusAdapter() {
+            public void focusLost(FocusEvent evt) {
+                if (logger.isDebugEnabled()) {
+                    logger.debug("focusLost(FocusEvent evt = " + evt + " "
+                            + textLanguageSearch.getText() + ") - start");
+                }
+
+                refreshLanguageTable(textLanguageSearch.getText());
+
+                if (logger.isDebugEnabled()) {
+                    logger.debug("focusLost(FocusEvent) - end");
+                }
+            }
+        });
+
+        textLanguageSearch.addListener(SWT.DefaultSelection, new Listener() {
+            public void handleEvent(Event e) {
+                if (logger.isDebugEnabled()) {
+                    logger.debug("handleEvent(Event e = " + e + " "
+                            + textLanguageSearch.getText() + ") - start");
+                }
+
+                refreshLanguageTable(textLanguageSearch.getText());
+
+                if (logger.isDebugEnabled()) {
+                    logger.debug("handleEvent(Event) - end");
+                }
+            }
+        });
+
+        text2LData.horizontalAlignment = GridData.FILL;
+        text2LData.horizontalSpan = 5;
+        text2LData.grabExcessHorizontalSpace = true;
+        textLanguageSearch.setLayoutData(text2LData);
+
+
+
+        if (logger.isDebugEnabled()) {
+            logger.debug("initLanguageSearch() - end");
+        }
+        
+    }
+
+    /**
+     * 
+     */
+    private void initTableLanguage() {
+        if (logger.isDebugEnabled()) {
+            logger.debug("initTableLanguage() - start");
+        }
+
+        tableLanguage = new Table(groupLanguageOverview, SWT.SINGLE
+                | SWT.FULL_SELECTION | SWT.V_SCROLL | SWT.BORDER);
+        tableLanguage.setHeaderVisible(true);
+        tableLanguage.setLinesVisible(true);
+        GridData table2LData = new GridData();
+        tableLanguage.addFocusListener(new FocusAdapter() {
+            public void focusLost(FocusEvent evt) {
+                System.out.println("tableLanguage.focusLost, event=" + evt);
+                //TODO add your code for tableLanguage.focusLost
+            }
+            public void focusGained(FocusEvent evt) {
+                System.out
+                    .println("tableLanguage.focusGained, event=" + evt);
+                //TODO add your code for tableLanguage.focusGained
+            }
+        });
+        tableLanguage.addSelectionListener(new SelectionAdapter() {
+            public void widgetSelected(SelectionEvent evt) {
+                if (logger.isDebugEnabled()) {
+                    logger.debug("widgetSelected(SelectionEvent evt = "
+                        + evt
+                        + ") - start");
+                }
+
+                int index = tableLanguage.getSelectionIndex();
+
+                System.out.println("Table select. id: "
+                    + index
+                    + " TableItem:"
+                    + tableLanguage.getItem(index)
+                    + " id: "
+                    + tableLanguage.getItem(index).getText(0));
+
+                //es wurde ein Element aus Tabelle ausgewaehlt jetzt muss die
+                //Detailansicht aktualisiert werden
+                refreshLanguageDetail(tableLanguage.getItem(index)
+                    .getText(0));
+
+                if (logger.isDebugEnabled()) {
+                    logger.debug("widgetSelected(SelectionEvent) - end");
+                }
+            }
+        });
+        table2LData.verticalAlignment = GridData.FILL;
+        table2LData.horizontalAlignment = GridData.FILL;
+        table2LData.horizontalSpan = 8;
+        table2LData.grabExcessHorizontalSpace = true;
+        table2LData.grabExcessVerticalSpace = true;
+        tableLanguage.setLayoutData(table2LData);
+
+        //einzelne Spalten hinzuf?gen
+        tableColumn = new TableColumn(tableLanguage, SWT.CENTER);
+        tableColumn.setText(l.getString("Language.groupoverview.columnid"));
+        tableColumn.setWidth(50);
+
+        tableColumn = new TableColumn(tableLanguage, SWT.CENTER);
+        tableColumn.setText(l.getString("Language.groupoverview.columnname"));
+        tableColumn.setWidth(200);
+
+        tableColumn = new TableColumn(tableLanguage, SWT.CENTER);
+        tableColumn.setText(l.getString("Language.groupoverview.columnshortname"));
+        tableColumn.setWidth(75);
+
+        if (logger.isDebugEnabled()) {
+            logger.debug("initTableLanguage() - end");
+        }
+        
+    }
+
+    /**
+     * @param text
+     */
+    protected void refreshLanguageDetail(final String id) {
+        Language object;
+        try {
+            //since we only can get a String value from the table, we
+            //need to convert this
+            object = Database.getSingleLanguage(Integer.parseInt(id));
+
+            if (object == null) {
+
+                /*
+                 * 
+                 * @TODO Statusbar aktualiseren
+                 */
+                return;
+            }
+        } catch (Exception e) {
+            // TODO: handle exception
+            //id ist keine Zahl
+            return;
+        }
+
+        textLanguageID.setText(object.getLanguageId() + "");
+        textLanguageName.setText(object.getName());
+        textLanguageShortname.setText(object.getShortname());
+
+        //Buttons zum l?schen und editieren aktivieren
+        buttonLanguageEdit.setEnabled(true);
+        buttonLanguageDelete.setEnabled(true);
+
+        //Mode auf view setzen
+        mode_Language = ManagementGui.MODE_VIEW;
+        
+    }
+
 	
 
 }



From sforstner at sheep.berlios.de  Tue Nov  9 18:45:14 2004
From: sforstner at sheep.berlios.de (Stefan at BerliOS)
Date: Tue, 9 Nov 2004 18:45:14 +0100
Subject: [Provirent-svn-commit] r102 - in project_src: clienttest/src provirent_hibernate/src/de/hsharz/provirent/managment/gui provirent_hibernate/src/de/hsharz/provirent/managment/gui/language provirent_hibernate/src/de/hsharz/provirent/persistence
Message-ID: <200411091745.iA9HjEmo002562@sheep.berlios.de>

Author: sforstner
Date: 2004-11-09 18:45:06 +0100 (Tue, 09 Nov 2004)
New Revision: 102

Added:
   project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/ManagementGui.java
Removed:
   project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/ManagmentGui.java
Modified:
   project_src/clienttest/src/NewSWTApp.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/language/genre.properties
   project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/language/language.properties
   project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java
Log:


Modified: project_src/clienttest/src/NewSWTApp.java
===================================================================
--- project_src/clienttest/src/NewSWTApp.java	2004-11-09 17:34:40 UTC (rev 101)
+++ project_src/clienttest/src/NewSWTApp.java	2004-11-09 17:45:06 UTC (rev 102)
@@ -41,7 +41,7 @@
  * for any corporate or commercial purpose.
  * *************************************
  */
-public class CopyOfNewSWTApp {
+public class NewSWTApp {
 
 	private Menu menu1;
 
@@ -113,7 +113,7 @@
 
 	private Shell shell;
 
-	public CopyOfNewSWTApp() {
+	public NewSWTApp() {
 		Display display = Display.getDefault();
 		shell = new Shell(display);
 		shell.setSize(400, 300);
@@ -559,7 +559,7 @@
 	 * org.eclipse.swt.widgets.Composite inside a new Shell.
 	 */
 	public static void main(String[] args) {
-		CopyOfNewSWTApp app = new CopyOfNewSWTApp();
+		NewSWTApp app = new NewSWTApp();
 	}
 
 }
\ No newline at end of file

Added: project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/ManagementGui.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/ManagementGui.java	2004-11-09 17:34:40 UTC (rev 101)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/ManagementGui.java	2004-11-09 17:45:06 UTC (rev 102)
@@ -0,0 +1,691 @@
+/*
+ * Created on 11.10.2004
+ *
+ * Copyright (c) 2004/2005, Remo Griesch/Stefan Forstner/Philipp Schneider
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * - Redistributions of source code must retain the above copyright notice,
+ * this list of conditions and the following disclaimer.
+ * - Redistributions in binary form must reproduce the above copyright notice,
+ * this list of conditions and the following disclaimer in the documentation
+ * and/or other materials provided with the distribution.
+ * - Neither the name of the Remo Griesch/Stefan Forstner/Philipp Schneider nor
+ * the names of its contributors may be used to endorse or promote products
+ * derived from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+package de.hsharz.provirent.managment.gui;
+
+
+import java.util.Locale;
+import java.util.PropertyResourceBundle;
+import java.util.ResourceBundle;
+
+import org.apache.log4j.Logger;
+import org.eclipse.swt.SWT;
+import org.eclipse.swt.custom.CTabFolder;
+import org.eclipse.swt.custom.CTabItem;
+import org.eclipse.swt.custom.SashForm;
+import org.eclipse.swt.custom.StyledText;
+import org.eclipse.swt.events.FocusAdapter;
+import org.eclipse.swt.events.FocusEvent;
+import org.eclipse.swt.events.SelectionAdapter;
+import org.eclipse.swt.events.SelectionEvent;
+import org.eclipse.swt.layout.FillLayout;
+import org.eclipse.swt.layout.FormAttachment;
+import org.eclipse.swt.layout.FormData;
+import org.eclipse.swt.layout.FormLayout;
+import org.eclipse.swt.layout.GridData;
+import org.eclipse.swt.layout.GridLayout;
+import org.eclipse.swt.widgets.Button;
+import org.eclipse.swt.widgets.Composite;
+import org.eclipse.swt.widgets.Display;
+import org.eclipse.swt.widgets.Event;
+import org.eclipse.swt.widgets.Group;
+import org.eclipse.swt.widgets.Label;
+import org.eclipse.swt.widgets.List;
+import org.eclipse.swt.widgets.Listener;
+import org.eclipse.swt.widgets.Menu;
+import org.eclipse.swt.widgets.MenuItem;
+import org.eclipse.swt.widgets.Shell;
+import org.eclipse.swt.widgets.Table;
+import org.eclipse.swt.widgets.TableColumn;
+import org.eclipse.swt.widgets.TableItem;
+import org.eclipse.swt.widgets.Text;
+
+import com.cloudgarden.resource.SWTResourceManager;
+
+import de.hsharz.provirent.managment.exceptions.GuiInitException;
+import de.hsharz.provirent.objects.VideoFormat;
+import de.hsharz.provirent.persistence.Database;
+
+/**
+ * This code was generated using CloudGarden's Jigloo
+ * SWT/Swing GUI Builder, which is free for non-commercial
+ * use. If Jigloo is being used commercially (ie, by a corporation,
+ * company or business for any purpose whatever) then you
+ * should purchase a license for each developer using Jigloo.
+ * Please visit www.cloudgarden.com for details.
+ * Use of Jigloo implies acceptance of these licensing terms.
+ * *************************************
+ * A COMMERCIAL LICENSE HAS NOT BEEN PURCHASED
+ * for this machine, so Jigloo or this code cannot be used legally
+ * for any corporate or commercial purpose.
+ * *************************************
+ */
+ import de.hsharz.provirent.managment.gui.CompositeFormate;
+ import org.eclipse.swt.events.DisposeListener;
+ import org.eclipse.swt.events.DisposeEvent;
+/**
+ * @author Philipp Schneider
+ *  
+ */
+public class ManagementGui {
+    /**
+     * Logger for this class
+     */
+    private static final Logger logger = Logger.getLogger(ManagementGui.class);
+
+    public final static int MODE_VIEW = 0;
+
+    public final static int MODE_ADD = 1;
+
+    public final static int MODE_EDIT = 2;
+
+    private static final int MAIN_WINDOW_WIDTH = 700;
+
+    private static final int MAIN_WINDOW_HEIGHT = 500;
+
+    private CTabFolder cTabFolderMain;
+
+    private CTabItem tabItemFormat,tabItemActor,tabItemDirector,tabItemLanguage,tabItemGenre;
+
+    private CompositeFormate compositeFormate;
+    private CompositeActors compositeActor;
+    private CompositeDirectors compositeDirector;
+    private CompositeGenre compositeGenre;
+    private CompositeLanguage compositeLanguage;
+    
+
+    private MenuItem aboutMenuItem;
+
+    private MenuItem contentsMenuItem;
+
+    private Menu helpMenu;
+
+    private MenuItem helpMenuItem;
+
+    private MenuItem viewDirectorMenuItem;
+    
+    private MenuItem viewVideoFormatMenuItem,viewActorMenuItem,viewGenreMenuItem;
+    private MenuItem viewSubtitleMenuItem,viewLanguageMenuItem,viewStatusMenuItem;
+    private MenuItem viewConditionMenuItem,viewMovieMenuItem,viewDvdMenuItem, viewBillMenuItem;
+    
+
+    private Shell shell;
+
+    private Display display;
+
+    private Menu viewMenu;
+
+    private MenuItem viewMenuItem;
+
+    private MenuItem exitMenuItem;
+
+    private MenuItem closeFileMenuItem;
+
+    private MenuItem saveFileMenuItem;
+
+    private MenuItem newFileMenuItem;
+
+    private MenuItem openFileMenuItem;
+
+    private Menu fileMenu;
+
+    private MenuItem fileMenuItem;
+
+    private Menu rootMenu;
+
+    private TableColumn tableColumn6;
+
+    private TableColumn tableColumn5;
+
+    private TableColumn tableColumn4;
+
+    private StatusLineStyledText statusLine;
+
+    private Composite compositeStatusLine;
+
+    private Composite compositeMain;
+
+    private Composite compositeRoot;
+
+    private Text textVideoFormatId;
+
+    /**
+     * Bundle for multilanguage
+     */
+    private ResourceBundle l;
+    
+    private Locale locale ;
+
+    /**
+     * Auto-generated main method to display this
+     * org.eclipse.swt.widgets.Composite inside a new Shell.
+     */
+    public static void main(String[] args) {
+        ManagementGui inst = new ManagementGui();
+        inst.run();
+    }
+
+
+    public void run() {
+        shell.layout();
+        shell.open();
+        while (!shell.isDisposed()) {
+            if (!display.readAndDispatch())
+                display.sleep();
+        }
+    }
+
+    public ManagementGui() {
+
+        if (logger.isDebugEnabled()) {
+            logger.debug("ManagementGui() Locale: " + Locale.getDefault());
+        }
+        
+        locale = Locale.getDefault();
+        
+        
+        l = PropertyResourceBundle.getBundle(
+                "de.hsharz.provirent.managment.gui.language.main", locale);
+
+        //@todo hier muss noch was gemacht werden
+        if (l == null) {
+            System.exit(-1586);
+        }
+
+        display = Display.getDefault();
+
+        shell = new Shell(display);
+        shell.setText(l.getString("mainwindow.title"));
+
+        //set the Site
+        shell.setSize(476, 216);
+
+        {
+            //Register as a resource user - SWTResourceManager will
+            //handle the obtaining and disposing of resources
+            SWTResourceManager.registerResourceUser(shell);
+        }
+        //set the layout for the shell
+        FillLayout thisLayout = new FillLayout(SWT.HORIZONTAL);
+        shell.setLayout(thisLayout);
+        
+       
+
+        //init the db, so it saves time later
+        //does that in a new Thread
+        initDB();
+        
+        //init the rest
+        initGUI();
+        
+        //shell.layout();
+
+    }
+
+    private void initGUI() {
+        try {
+
+            //set't the menu
+            rootMenu = new Menu(shell, SWT.BAR);
+            shell.setMenuBar(rootMenu);
+
+            //init the other menu's
+            initFileMenu();
+            initViewMenu();
+            initHelpMenu();
+
+            //the root composite
+            //this init's the maincomposite
+            //set up the root composite incl. layout
+            compositeRoot = new Composite(shell, SWT.NONE);
+            GridLayout composite1Layout = new GridLayout();
+            composite1Layout.marginWidth = 0;
+            composite1Layout.marginHeight = 0;
+            composite1Layout.horizontalSpacing = 0;
+            composite1Layout.verticalSpacing = 0;
+            GridData composite1LData = new GridData();
+            compositeRoot.setLayout(composite1Layout);
+
+            composite1LData.verticalAlignment = GridData.FILL;
+            composite1LData.horizontalAlignment = GridData.FILL;
+            composite1LData.grabExcessHorizontalSpace = true;
+            composite1LData.grabExcessVerticalSpace = true;
+            compositeRoot.setLayoutData(composite1LData);
+
+            //init the MainComposite
+
+           compositeMain = new Composite(compositeRoot, SWT.EMBEDDED);
+            GridLayout composite3Layout = new GridLayout();
+            composite3Layout.makeColumnsEqualWidth = true;
+            composite3Layout.horizontalSpacing = 0;
+            composite3Layout.marginHeight = 0;
+            composite3Layout.marginWidth = 0;
+            composite3Layout.verticalSpacing = 0;
+            GridData composite3LData = new GridData();
+            compositeMain.setLayout(composite3Layout);
+            compositeMain.setForeground(SWTResourceManager.getColor(0,
+                    255, 0));
+            composite3LData.verticalAlignment = GridData.FILL;
+            composite3LData.horizontalAlignment = GridData.FILL;
+            composite3LData.grabExcessHorizontalSpace = true;
+            composite3LData.grabExcessVerticalSpace = true;
+            compositeMain.setLayoutData(composite3LData);
+        
+            
+            //init Status Composite
+            compositeStatusLine = new Composite(compositeRoot, SWT.EMBEDDED);
+            GridLayout composite2Layout = new GridLayout();
+            composite2Layout.marginWidth = 0;
+            composite2Layout.marginHeight = 0;
+            composite2Layout.makeColumnsEqualWidth = true;
+            composite2Layout.horizontalSpacing = 0;
+            composite2Layout.verticalSpacing = 0;
+            GridData composite2LData = new GridData();
+            compositeStatusLine.setLayout(composite2Layout);
+            composite2LData.horizontalAlignment = GridData.FILL;
+            composite2LData.heightHint = 14;
+            composite2LData.grabExcessHorizontalSpace = true;
+            compositeStatusLine.setLayoutData(composite2LData);
+
+            //StatusLine
+            initStatusLine();
+            
+            //tabFolder
+            cTabFolderMain = new CTabFolder(compositeMain, SWT.CLOSE);
+            
+            GridData cTabFolder1LData = new GridData();
+            cTabFolder1LData.grabExcessHorizontalSpace = true;
+            cTabFolder1LData.horizontalAlignment = GridData.FILL;
+            cTabFolder1LData.grabExcessVerticalSpace = true;
+            cTabFolder1LData.verticalAlignment = GridData.FILL;
+            cTabFolderMain.setLayoutData(cTabFolder1LData);
+
+            initFormatTab();
+
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+    }    
+    
+    
+    /**
+     * init the File menu
+     */
+    private void initFileMenu() {
+        if (rootMenu == null) {
+            return;
+            /**
+             * @todo hier muesste eigentlich eine Exception geworfen werden, da
+             *       null nich ein darf
+             */
+        }
+        fileMenuItem = new MenuItem(rootMenu, SWT.CASCADE);
+        fileMenuItem.setText(l.getString("menu.file"));
+        fileMenu = new Menu(fileMenuItem);
+        fileMenuItem.setMenu(fileMenu);
+
+        openFileMenuItem = new MenuItem(fileMenu, SWT.CASCADE);
+        openFileMenuItem.setText(l.getString("menu.file.open"));
+
+        newFileMenuItem = new MenuItem(fileMenu, SWT.CASCADE);
+        newFileMenuItem.setText(l.getString("menu.file.new"));
+
+        saveFileMenuItem = new MenuItem(fileMenu, SWT.CASCADE);
+        saveFileMenuItem.setText(l.getString("menu.file.save"));
+
+        closeFileMenuItem = new MenuItem(fileMenu, SWT.CASCADE);
+        closeFileMenuItem.setText(l.getString("menu.file.close"));
+
+        exitMenuItem = new MenuItem(fileMenu, SWT.CASCADE);
+        exitMenuItem.setText(l.getString("menu.file.exit"));
+
+    }
+
+    /**
+     * init the View Menu
+     */
+    private void initViewMenu() {
+        if (rootMenu == null) {
+            return;
+            /**
+             * @todo hier muesste eigentlich eine Exception geworfen werden, da
+             *       null nich ein darf
+             */
+        }
+
+        viewMenuItem = new MenuItem(rootMenu, SWT.CASCADE);
+        viewMenuItem.setText(l.getString("menu.view"));
+
+        viewMenu = new Menu(viewMenuItem);
+        viewMenuItem.setMenu(viewMenu);
+
+        viewVideoFormatMenuItem = new MenuItem(viewMenu, SWT.CHECK);
+        viewVideoFormatMenuItem.setText(l.getString("menu.view.format"));
+        viewVideoFormatMenuItem.setSelection(true);
+        viewVideoFormatMenuItem.addSelectionListener(new SelectionAdapter() {
+            public void widgetSelected(SelectionEvent evt) {
+				if(tabItemFormat == null || tabItemFormat.isDisposed()){
+				    initFormatTab();
+				 return;   
+				}
+				
+				cTabFolderMain.setSelection(tabItemFormat);
+				viewVideoFormatMenuItem.setSelection(true);
+            
+            }
+        });
+
+        viewDirectorMenuItem = new MenuItem(viewMenu, SWT.CHECK);
+        viewDirectorMenuItem.setText(l.getString("menu.view.director"));
+        viewDirectorMenuItem.setSelection(false);
+        viewDirectorMenuItem.addSelectionListener(new SelectionAdapter() {
+            public void widgetSelected(SelectionEvent evt) {
+				if(tabItemDirector == null || tabItemDirector.isDisposed()){
+				    initDirectorTab();
+				    return;   
+				}
+				
+				cTabFolderMain.setSelection(tabItemDirector);
+				viewDirectorMenuItem.setSelection(true);
+            
+            }
+        });        
+
+        viewActorMenuItem = new MenuItem(viewMenu, SWT.CHECK);
+        viewActorMenuItem.setText(l.getString("menu.view.actor"));
+        viewActorMenuItem.setSelection(false);
+        viewActorMenuItem.addSelectionListener(new SelectionAdapter() {
+            public void widgetSelected(SelectionEvent evt) {
+				if(tabItemActor == null || tabItemActor.isDisposed()){
+				    initActorTab();
+				    return;   
+				}
+				
+				cTabFolderMain.setSelection(tabItemActor);
+				viewActorMenuItem.setSelection(true);
+            
+            }
+        });         
+        
+        viewGenreMenuItem = new MenuItem(viewMenu, SWT.CHECK);
+        viewGenreMenuItem.setText(l.getString("menu.view.genre"));
+        viewGenreMenuItem.setSelection(false);
+        viewGenreMenuItem.addSelectionListener(new SelectionAdapter() {
+            public void widgetSelected(SelectionEvent evt) {
+				if(tabItemGenre == null || tabItemGenre.isDisposed()){
+				    initGenreTab();
+				    return;   
+				}
+				
+				cTabFolderMain.setSelection(tabItemGenre);
+				viewGenreMenuItem.setSelection(true);
+            
+            }
+        }); 
+
+        viewLanguageMenuItem = new MenuItem(viewMenu, SWT.CHECK);
+        viewLanguageMenuItem.setText(l.getString("menu.view.language"));
+        viewLanguageMenuItem.setSelection(false);
+        viewLanguageMenuItem.addSelectionListener(new SelectionAdapter() {
+            public void widgetSelected(SelectionEvent evt) {
+				if(tabItemLanguage == null || tabItemLanguage.isDisposed()){
+				    initLanguageTab();
+				    return;   
+				}
+				
+				cTabFolderMain.setSelection(tabItemLanguage);
+				viewGenreMenuItem.setSelection(true);
+            
+            }
+        });         
+
+        viewSubtitleMenuItem = new MenuItem(viewMenu, SWT.CHECK);
+        viewSubtitleMenuItem.setText(l.getString("menu.view.subtitle"));
+        viewSubtitleMenuItem.setSelection(false);        
+        
+        viewStatusMenuItem = new MenuItem(viewMenu, SWT.CHECK);
+        viewStatusMenuItem.setText(l.getString("menu.view.status"));
+        viewStatusMenuItem.setSelection(false);
+
+        viewConditionMenuItem = new MenuItem(viewMenu, SWT.CHECK);
+        viewConditionMenuItem.setText(l.getString("menu.view.condition"));
+        viewConditionMenuItem.setSelection(false);
+
+        viewMovieMenuItem = new MenuItem(viewMenu, SWT.CHECK);
+        viewMovieMenuItem.setText(l.getString("menu.view.movie"));
+        viewMovieMenuItem.setSelection(false);
+
+        viewDvdMenuItem = new MenuItem(viewMenu, SWT.CHECK);
+        viewDvdMenuItem.setText(l.getString("menu.view.dvd"));
+        viewDvdMenuItem.setSelection(false);
+
+        viewBillMenuItem = new MenuItem(viewMenu, SWT.CHECK);
+        viewBillMenuItem.setText(l.getString("menu.view.bill"));
+        viewBillMenuItem.setSelection(false);
+
+    }
+
+    /**
+     * init the help menu
+     */
+    private void initHelpMenu() {
+        if (rootMenu == null) {
+            throw new GuiInitException();
+        }
+        helpMenuItem = new MenuItem(rootMenu, SWT.CASCADE);
+        helpMenuItem.setText(l.getString("menu.help"));
+        {
+            helpMenu = new Menu(helpMenuItem);
+            helpMenuItem.setMenu(helpMenu);
+            {
+                contentsMenuItem = new MenuItem(helpMenu, SWT.CASCADE);
+            }
+            {
+                aboutMenuItem = new MenuItem(helpMenu, SWT.CASCADE);
+            }
+        }
+
+    }
+   
+    
+    
+    
+    private void initFormatTab() {
+        tabItemFormat = new CTabItem(cTabFolderMain, SWT.NONE);
+        tabItemFormat.setText(l.getString("tab.format.title"));
+        
+        tabItemFormat.addDisposeListener(new DisposeListener() {
+            public void widgetDisposed(DisposeEvent evt) {
+                viewVideoFormatMenuItem.setSelection(false);
+           }
+        });
+        {
+            compositeFormate = new CompositeFormate(
+                cTabFolderMain,
+                SWT.NONE, statusLine, locale);
+            
+            tabItemFormat.setControl(compositeFormate);
+        }
+        
+    }
+    
+    
+    private void initDirectorTab() {
+        tabItemDirector = new CTabItem(cTabFolderMain, SWT.NONE);
+        tabItemDirector.setText(l.getString("tab.director.title"));
+        
+        tabItemDirector.addDisposeListener(new DisposeListener() {
+            public void widgetDisposed(DisposeEvent evt) {
+                viewDirectorMenuItem.setSelection(false);
+           }
+        });        
+        {
+            compositeDirector = new CompositeDirectors(
+                cTabFolderMain,
+                SWT.NONE, statusLine, locale);
+            
+            tabItemDirector.setControl(compositeDirector);
+        }
+        
+    }    
+    
+    private void initActorTab() {
+        tabItemActor = new CTabItem(cTabFolderMain, SWT.NONE);
+        tabItemActor.setText(l.getString("tab.actor.title"));
+        
+        tabItemActor.addDisposeListener(new DisposeListener() {
+            public void widgetDisposed(DisposeEvent evt) {
+                viewActorMenuItem.setSelection(false);
+           }
+        });      
+        {
+            compositeActor = new CompositeActors(
+                cTabFolderMain,
+                SWT.NONE, statusLine, locale);
+            
+            tabItemActor.setControl(compositeActor);
+        }
+        
+    }
+
+    private void initGenreTab() {
+        tabItemGenre = new CTabItem(cTabFolderMain, SWT.NONE);
+        tabItemGenre.setText(l.getString("tab.genre.title"));
+        
+        tabItemGenre.addDisposeListener(new DisposeListener() {
+            public void widgetDisposed(DisposeEvent evt) {
+                viewGenreMenuItem.setSelection(false);
+           }
+        });      
+        {
+            compositeGenre = new CompositeGenre(
+                cTabFolderMain,
+                SWT.NONE, statusLine, locale);
+            
+            tabItemGenre.setControl(compositeGenre);
+        }
+        
+    }
+
+    private void initLanguageTab() {
+        tabItemLanguage = new CTabItem(cTabFolderMain, SWT.NONE);
+        tabItemLanguage.setText(l.getString("tab.language.title"));
+        tabItemLanguage.addDisposeListener(new DisposeListener() {
+            public void widgetDisposed(DisposeEvent evt) {
+                viewLanguageMenuItem.setSelection(false);
+           }
+        });      
+        {
+            compositeLanguage = new CompositeLanguage(
+                cTabFolderMain,
+                SWT.NONE, statusLine, locale);
+            
+            tabItemLanguage.setControl(compositeLanguage);
+        }
+    }    
+    
+    private void initStatusLine() {
+        statusLine = new StatusLineStyledText(compositeStatusLine, SWT.READ_ONLY);
+        statusLine.setText("");
+        statusLine
+                .setToolTipText("Hier finden Sie wichtige Statusinformationen");
+        statusLine.setBackground(ColorDef.STATUS_B_STANDARD);
+        statusLine.setForeground(ColorDef.STATUS_F_STANDARD);
+        statusLine.setDoubleClickEnabled(false);
+        statusLine.setEditable(false);
+        statusLine.setEnabled(true);
+        GridData styledText1LData = new GridData();
+
+        styledText1LData.horizontalAlignment = GridData.FILL;
+        styledText1LData.grabExcessHorizontalSpace = true;
+        statusLine.setLayoutData(styledText1LData);
+    }
+
+    /**
+     * Sets a message for the Statusline
+     * 
+     * @param mode
+     * @param message
+     */
+    private void setStatus(final int mode, final String message) {
+        /**
+         * mode values 0 normal message 1 information message 2 warn message 3
+         * error message
+         *  
+         */
+        if (mode == 0) {
+            statusLine.setBackground(ColorDef.STATUS_B_STANDARD);
+            statusLine.setForeground(ColorDef.STATUS_F_STANDARD);
+        } else if (mode == 1) {
+            statusLine.setBackground(ColorDef.STATUS_B_INFO);
+            statusLine.setForeground(ColorDef.STATUS_F_INFO);
+        } else if (mode == 2) {
+            statusLine.setBackground(ColorDef.STATUS_B_WARN);
+            statusLine.setForeground(ColorDef.STATUS_F_WARN);
+        } else if (mode == 3) {
+            statusLine.setBackground(ColorDef.STATUS_B_ERROR);
+            statusLine.setForeground(ColorDef.STATUS_F_ERROR);
+        }
+
+        statusLine.setText(message);
+
+		new Thread() {
+			public void run() {
+				
+				try {Thread.sleep (1000 *5);} catch (Throwable th) {}
+					if (display.isDisposed()) return;
+					display.asyncExec(new Runnable() {
+						public void run() {
+				            statusLine.setBackground(ColorDef.STATUS_B_STANDARD);
+				            statusLine.setForeground(ColorDef.STATUS_F_STANDARD);
+						}
+					});
+				
+			}
+		}.start();
+
+    }
+
+    private void initDB(){
+        
+		new Thread() {
+			public void run() {
+			    Database.initDB();
+			}
+		}.start();
+
+    }
+        
+    
+    
+}
\ No newline at end of file

Deleted: project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/ManagmentGui.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/ManagmentGui.java	2004-11-09 17:34:40 UTC (rev 101)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/ManagmentGui.java	2004-11-09 17:45:06 UTC (rev 102)
@@ -1,693 +0,0 @@
-/*
- * Created on 11.10.2004
- *
- * Copyright (c) 2004/2005, Remo Griesch/Stefan Forstner/Philipp Schneider
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met:
- *
- * - Redistributions of source code must retain the above copyright notice,
- * this list of conditions and the following disclaimer.
- * - Redistributions in binary form must reproduce the above copyright notice,
- * this list of conditions and the following disclaimer in the documentation
- * and/or other materials provided with the distribution.
- * - Neither the name of the Remo Griesch/Stefan Forstner/Philipp Schneider nor
- * the names of its contributors may be used to endorse or promote products
- * derived from this software without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
- * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
- * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
- * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
- * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
- * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
- * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- * POSSIBILITY OF SUCH DAMAGE.
- *
- */
-
-package de.hsharz.provirent.managment.gui;
-
-
-import java.util.Locale;
-import java.util.PropertyResourceBundle;
-import java.util.ResourceBundle;
-
-import org.apache.log4j.Logger;
-import org.eclipse.swt.SWT;
-import org.eclipse.swt.custom.CTabFolder;
-import org.eclipse.swt.custom.CTabItem;
-import org.eclipse.swt.custom.SashForm;
-import org.eclipse.swt.custom.StyledText;
-import org.eclipse.swt.events.FocusAdapter;
-import org.eclipse.swt.events.FocusEvent;
-import org.eclipse.swt.events.SelectionAdapter;
-import org.eclipse.swt.events.SelectionEvent;
-import org.eclipse.swt.layout.FillLayout;
-import org.eclipse.swt.layout.FormAttachment;
-import org.eclipse.swt.layout.FormData;
-import org.eclipse.swt.layout.FormLayout;
-import org.eclipse.swt.layout.GridData;
-import org.eclipse.swt.layout.GridLayout;
-import org.eclipse.swt.widgets.Button;
-import org.eclipse.swt.widgets.Composite;
-import org.eclipse.swt.widgets.Display;
-import org.eclipse.swt.widgets.Event;
-import org.eclipse.swt.widgets.Group;
-import org.eclipse.swt.widgets.Label;
-import org.eclipse.swt.widgets.List;
-import org.eclipse.swt.widgets.Listener;
-import org.eclipse.swt.widgets.Menu;
-import org.eclipse.swt.widgets.MenuItem;
-import org.eclipse.swt.widgets.Shell;
-import org.eclipse.swt.widgets.Table;
-import org.eclipse.swt.widgets.TableColumn;
-import org.eclipse.swt.widgets.TableItem;
-import org.eclipse.swt.widgets.Text;
-
-import com.cloudgarden.resource.SWTResourceManager;
-
-import de.hsharz.provirent.managment.exceptions.GuiInitException;
-import de.hsharz.provirent.objects.VideoFormat;
-import de.hsharz.provirent.persistence.Database;
-
-/**
- * This code was generated using CloudGarden's Jigloo
- * SWT/Swing GUI Builder, which is free for non-commercial
- * use. If Jigloo is being used commercially (ie, by a corporation,
- * company or business for any purpose whatever) then you
- * should purchase a license for each developer using Jigloo.
- * Please visit www.cloudgarden.com for details.
- * Use of Jigloo implies acceptance of these licensing terms.
- * *************************************
- * A COMMERCIAL LICENSE HAS NOT BEEN PURCHASED
- * for this machine, so Jigloo or this code cannot be used legally
- * for any corporate or commercial purpose.
- * *************************************
- */
- import de.hsharz.provirent.managment.gui.CompositeFormate;
- import org.eclipse.swt.events.DisposeListener;
- import org.eclipse.swt.events.DisposeEvent;
-/**
- * @author Philipp Schneider
- *  
- */
-public class ManagmentGui {
-    /**
-     * Logger for this class
-     */
-    private static final Logger logger = Logger.getLogger(ManagmentGui.class);
-
-    public final static int MODE_VIEW = 0;
-
-    public final static int MODE_ADD = 1;
-
-    public final static int MODE_EDIT = 2;
-
-    private static final int MAIN_WINDOW_WIDTH = 700;
-
-    private static final int MAIN_WINDOW_HEIGHT = 500;
-
-    private CTabFolder cTabFolderMain;
-
-    private CTabItem tabItemFormat,tabItemActor,tabItemDirector,tabItemLanguage,tabItemGenre;
-
-    private CompositeFormate compositeFormate;
-    private CompositeActors compositeActor;
-    private CompositeDirectors compositeDirector;
-    private CompositeGenre compositeGenre;
-    private CompositeLanguage compositeLanguage;
-    
-
-    private MenuItem aboutMenuItem;
-
-    private MenuItem contentsMenuItem;
-
-    private Menu helpMenu;
-
-    private MenuItem helpMenuItem;
-
-    private MenuItem viewDirectorMenuItem;
-    
-    private MenuItem viewFormatMenuItem,viewActorMenuItem,viewGenreMenuItem;
-    private MenuItem viewSubtitleMenuItem,viewLanguageMenuItem,viewStatusMenuItem;
-    private MenuItem viewConditionMenuItem,viewMovieMenuItem,viewDvdMenuItem, viewBillMenuItem;
-    
-
-    private Shell shell;
-
-    private Display display;
-
-    private MenuItem viewVideoFormatMenuItem;
-
-    private Menu viewMenu;
-
-    private MenuItem viewMenuItem;
-
-    private MenuItem exitMenuItem;
-
-    private MenuItem closeFileMenuItem;
-
-    private MenuItem saveFileMenuItem;
-
-    private MenuItem newFileMenuItem;
-
-    private MenuItem openFileMenuItem;
-
-    private Menu fileMenu;
-
-    private MenuItem fileMenuItem;
-
-    private Menu rootMenu;
-
-    private TableColumn tableColumn6;
-
-    private TableColumn tableColumn5;
-
-    private TableColumn tableColumn4;
-
-    private StatusLineStyledText statusLine;
-
-    private Composite compositeStatusLine;
-
-    private Composite compositeMain;
-
-    private Composite compositeRoot;
-
-    private Text textVideoFormatId;
-
-    /**
-     * Bundle for multilanguage
-     */
-    private ResourceBundle l;
-    
-    private Locale locale ;
-
-    /**
-     * Auto-generated main method to display this
-     * org.eclipse.swt.widgets.Composite inside a new Shell.
-     */
-    public static void main(String[] args) {
-        ManagmentGui inst = new ManagmentGui();
-        inst.run();
-    }
-
-
-    public void run() {
-        shell.layout();
-        shell.open();
-        while (!shell.isDisposed()) {
-            if (!display.readAndDispatch())
-                display.sleep();
-        }
-    }
-
-    public ManagmentGui() {
-
-        if (logger.isDebugEnabled()) {
-            logger.debug("ManagmentGui() Locale: " + Locale.getDefault());
-        }
-        
-        locale = Locale.getDefault();
-        
-        
-        l = PropertyResourceBundle.getBundle(
-                "de.hsharz.provirent.managment.gui.language.main", locale);
-
-        //@todo hier muss noch was gemacht werden
-        if (l == null) {
-            System.exit(-1586);
-        }
-
-        display = Display.getDefault();
-
-        shell = new Shell(display);
-        shell.setText(l.getString("mainwindow.title"));
-
-        //set the Site
-        shell.setSize(476, 216);
-
-        {
-            //Register as a resource user - SWTResourceManager will
-            //handle the obtaining and disposing of resources
-            SWTResourceManager.registerResourceUser(shell);
-        }
-        //set the layout for the shell
-        FillLayout thisLayout = new FillLayout(SWT.HORIZONTAL);
-        shell.setLayout(thisLayout);
-        
-       
-
-        //init the db, so it saves time later
-        //does that in a new Thread
-        initDB();
-        
-        //init the rest
-        initGUI();
-        
-        //shell.layout();
-
-    }
-
-    private void initGUI() {
-        try {
-
-            //set't the menu
-            rootMenu = new Menu(shell, SWT.BAR);
-            shell.setMenuBar(rootMenu);
-
-            //init the other menu's
-            initFileMenu();
-            initViewMenu();
-            initHelpMenu();
-
-            //the root composite
-            //this init's the maincomposite
-            //set up the root composite incl. layout
-            compositeRoot = new Composite(shell, SWT.NONE);
-            GridLayout composite1Layout = new GridLayout();
-            composite1Layout.marginWidth = 0;
-            composite1Layout.marginHeight = 0;
-            composite1Layout.horizontalSpacing = 0;
-            composite1Layout.verticalSpacing = 0;
-            GridData composite1LData = new GridData();
-            compositeRoot.setLayout(composite1Layout);
-
-            composite1LData.verticalAlignment = GridData.FILL;
-            composite1LData.horizontalAlignment = GridData.FILL;
-            composite1LData.grabExcessHorizontalSpace = true;
-            composite1LData.grabExcessVerticalSpace = true;
-            compositeRoot.setLayoutData(composite1LData);
-
-            //init the MainComposite
-
-           compositeMain = new Composite(compositeRoot, SWT.EMBEDDED);
-            GridLayout composite3Layout = new GridLayout();
-            composite3Layout.makeColumnsEqualWidth = true;
-            composite3Layout.horizontalSpacing = 0;
-            composite3Layout.marginHeight = 0;
-            composite3Layout.marginWidth = 0;
-            composite3Layout.verticalSpacing = 0;
-            GridData composite3LData = new GridData();
-            compositeMain.setLayout(composite3Layout);
-            compositeMain.setForeground(SWTResourceManager.getColor(0,
-                    255, 0));
-            composite3LData.verticalAlignment = GridData.FILL;
-            composite3LData.horizontalAlignment = GridData.FILL;
-            composite3LData.grabExcessHorizontalSpace = true;
-            composite3LData.grabExcessVerticalSpace = true;
-            compositeMain.setLayoutData(composite3LData);
-        
-            
-            //init Status Composite
-            compositeStatusLine = new Composite(compositeRoot, SWT.EMBEDDED);
-            GridLayout composite2Layout = new GridLayout();
-            composite2Layout.marginWidth = 0;
-            composite2Layout.marginHeight = 0;
-            composite2Layout.makeColumnsEqualWidth = true;
-            composite2Layout.horizontalSpacing = 0;
-            composite2Layout.verticalSpacing = 0;
-            GridData composite2LData = new GridData();
-            compositeStatusLine.setLayout(composite2Layout);
-            composite2LData.horizontalAlignment = GridData.FILL;
-            composite2LData.heightHint = 14;
-            composite2LData.grabExcessHorizontalSpace = true;
-            compositeStatusLine.setLayoutData(composite2LData);
-
-            //StatusLine
-            initStatusLine();
-            
-            //tabFolder
-            cTabFolderMain = new CTabFolder(compositeMain, SWT.CLOSE);
-            
-            GridData cTabFolder1LData = new GridData();
-            cTabFolder1LData.grabExcessHorizontalSpace = true;
-            cTabFolder1LData.horizontalAlignment = GridData.FILL;
-            cTabFolder1LData.grabExcessVerticalSpace = true;
-            cTabFolder1LData.verticalAlignment = GridData.FILL;
-            cTabFolderMain.setLayoutData(cTabFolder1LData);
-
-            initFormatTab();
-
-        } catch (Exception e) {
-            e.printStackTrace();
-        }
-    }    
-    
-    
-    /**
-     * init the File menu
-     */
-    private void initFileMenu() {
-        if (rootMenu == null) {
-            return;
-            /**
-             * @todo hier muesste eigentlich eine Exception geworfen werden, da
-             *       null nich ein darf
-             */
-        }
-        fileMenuItem = new MenuItem(rootMenu, SWT.CASCADE);
-        fileMenuItem.setText(l.getString("menu.file"));
-        fileMenu = new Menu(fileMenuItem);
-        fileMenuItem.setMenu(fileMenu);
-
-        openFileMenuItem = new MenuItem(fileMenu, SWT.CASCADE);
-        openFileMenuItem.setText(l.getString("menu.file.open"));
-
-        newFileMenuItem = new MenuItem(fileMenu, SWT.CASCADE);
-        newFileMenuItem.setText(l.getString("menu.file.new"));
-
-        saveFileMenuItem = new MenuItem(fileMenu, SWT.CASCADE);
-        saveFileMenuItem.setText(l.getString("menu.file.save"));
-
-        closeFileMenuItem = new MenuItem(fileMenu, SWT.CASCADE);
-        closeFileMenuItem.setText(l.getString("menu.file.close"));
-
-        exitMenuItem = new MenuItem(fileMenu, SWT.CASCADE);
-        exitMenuItem.setText(l.getString("menu.file.exit"));
-
-    }
-
-    /**
-     * init the View Menu
-     */
-    private void initViewMenu() {
-        if (rootMenu == null) {
-            return;
-            /**
-             * @todo hier muesste eigentlich eine Exception geworfen werden, da
-             *       null nich ein darf
-             */
-        }
-
-        viewMenuItem = new MenuItem(rootMenu, SWT.CASCADE);
-        viewMenuItem.setText(l.getString("menu.view"));
-
-        viewMenu = new Menu(viewMenuItem);
-        viewMenuItem.setMenu(viewMenu);
-
-        viewVideoFormatMenuItem = new MenuItem(viewMenu, SWT.CHECK);
-        viewVideoFormatMenuItem.setText(l.getString("menu.view.format"));
-        viewVideoFormatMenuItem.setSelection(true);
-        viewVideoFormatMenuItem.addSelectionListener(new SelectionAdapter() {
-            public void widgetSelected(SelectionEvent evt) {
-				if(tabItemFormat == null || tabItemFormat.isDisposed()){
-				    initFormatTab();
-				 return;   
-				}
-				
-				cTabFolderMain.setSelection(tabItemFormat);
-				viewVideoFormatMenuItem.setSelection(true);
-            
-            }
-        });
-
-        viewDirectorMenuItem = new MenuItem(viewMenu, SWT.CHECK);
-        viewDirectorMenuItem.setText(l.getString("menu.view.director"));
-        viewDirectorMenuItem.setSelection(false);
-        viewDirectorMenuItem.addSelectionListener(new SelectionAdapter() {
-            public void widgetSelected(SelectionEvent evt) {
-				if(tabItemDirector == null || tabItemDirector.isDisposed()){
-				    initDirectorTab();
-				    return;   
-				}
-				
-				cTabFolderMain.setSelection(tabItemDirector);
-				viewDirectorMenuItem.setSelection(true);
-            
-            }
-        });        
-
-        viewActorMenuItem = new MenuItem(viewMenu, SWT.CHECK);
-        viewActorMenuItem.setText(l.getString("menu.view.actor"));
-        viewActorMenuItem.setSelection(false);
-        viewActorMenuItem.addSelectionListener(new SelectionAdapter() {
-            public void widgetSelected(SelectionEvent evt) {
-				if(tabItemActor == null || tabItemActor.isDisposed()){
-				    initActorTab();
-				    return;   
-				}
-				
-				cTabFolderMain.setSelection(tabItemActor);
-				viewActorMenuItem.setSelection(true);
-            
-            }
-        });         
-        
-        viewGenreMenuItem = new MenuItem(viewMenu, SWT.CHECK);
-        viewGenreMenuItem.setText(l.getString("menu.view.genre"));
-        viewGenreMenuItem.setSelection(false);
-        viewGenreMenuItem.addSelectionListener(new SelectionAdapter() {
-            public void widgetSelected(SelectionEvent evt) {
-				if(tabItemGenre == null || tabItemGenre.isDisposed()){
-				    initGenreTab();
-				    return;   
-				}
-				
-				cTabFolderMain.setSelection(tabItemGenre);
-				viewGenreMenuItem.setSelection(true);
-            
-            }
-        }); 
-
-        viewLanguageMenuItem = new MenuItem(viewMenu, SWT.CHECK);
-        viewLanguageMenuItem.setText(l.getString("menu.view.language"));
-        viewLanguageMenuItem.setSelection(false);
-        viewLanguageMenuItem.addSelectionListener(new SelectionAdapter() {
-            public void widgetSelected(SelectionEvent evt) {
-				if(tabItemLanguage == null || tabItemLanguage.isDisposed()){
-				    initLanguageTab();
-				    return;   
-				}
-				
-				cTabFolderMain.setSelection(tabItemLanguage);
-				viewGenreMenuItem.setSelection(true);
-            
-            }
-        });         
-
-        viewSubtitleMenuItem = new MenuItem(viewMenu, SWT.CHECK);
-        viewSubtitleMenuItem.setText(l.getString("menu.view.subtitle"));
-        viewSubtitleMenuItem.setSelection(false);        
-        
-        viewStatusMenuItem = new MenuItem(viewMenu, SWT.CHECK);
-        viewStatusMenuItem.setText(l.getString("menu.view.status"));
-        viewStatusMenuItem.setSelection(false);
-
-        viewConditionMenuItem = new MenuItem(viewMenu, SWT.CHECK);
-        viewConditionMenuItem.setText(l.getString("menu.view.condition"));
-        viewConditionMenuItem.setSelection(false);
-
-        viewMovieMenuItem = new MenuItem(viewMenu, SWT.CHECK);
-        viewMovieMenuItem.setText(l.getString("menu.view.movie"));
-        viewMovieMenuItem.setSelection(false);
-
-        viewDvdMenuItem = new MenuItem(viewMenu, SWT.CHECK);
-        viewDvdMenuItem.setText(l.getString("menu.view.dvd"));
-        viewDvdMenuItem.setSelection(false);
-
-        viewBillMenuItem = new MenuItem(viewMenu, SWT.CHECK);
-        viewBillMenuItem.setText(l.getString("menu.view.bill"));
-        viewBillMenuItem.setSelection(false);
-
-    }
-
-    /**
-     * init the help menu
-     */
-    private void initHelpMenu() {
-        if (rootMenu == null) {
-            throw new GuiInitException();
-        }
-        helpMenuItem = new MenuItem(rootMenu, SWT.CASCADE);
-        helpMenuItem.setText(l.getString("menu.help"));
-        {
-            helpMenu = new Menu(helpMenuItem);
-            helpMenuItem.setMenu(helpMenu);
-            {
-                contentsMenuItem = new MenuItem(helpMenu, SWT.CASCADE);
-            }
-            {
-                aboutMenuItem = new MenuItem(helpMenu, SWT.CASCADE);
-            }
-        }
-
-    }
-   
-    
-    
-    
-    private void initFormatTab() {
-        tabItemFormat = new CTabItem(cTabFolderMain, SWT.NONE);
-        tabItemFormat.setText(l.getString("tab.format.title"));
-        /*
-        tabItemFormat.addDisposeListener(new DisposeListener() {
-            public void widgetDisposed(DisposeEvent evt) {
-                viewFormatMenuItem.setSelection(false);
-           }
-        });
-        {
-            compositeFormate = new CompositeFormate(
-                cTabFolderMain,
-                SWT.NONE, statusLine, locale);
-            
-            tabItemFormat.setControl(compositeFormate);
-        }
-        */
-    }
-    
-    
-    private void initDirectorTab() {
-        tabItemDirector = new CTabItem(cTabFolderMain, SWT.NONE);
-        tabItemDirector.setText(l.getString("tab.director.title"));
-        /*
-        tabItemDirector.addDisposeListener(new DisposeListener() {
-            public void widgetDisposed(DisposeEvent evt) {
-                viewDirectorMenuItem.setSelection(false);
-           }
-        });        
-        {
-            compositeDirector = new CompositeDirectors(
-                cTabFolderMain,
-                SWT.NONE, statusLine, locale);
-            
-            tabItemDirector.setControl(compositeDirector);
-        }
-        */
-    }    
-    
-    private void initActorTab() {
-        tabItemActor = new CTabItem(cTabFolderMain, SWT.NONE);
-        tabItemActor.setText(l.getString("tab.actor.title"));
-        /*
-        tabItemActor.addDisposeListener(new DisposeListener() {
-            public void widgetDisposed(DisposeEvent evt) {
-                viewActorMenuItem.setSelection(false);
-           }
-        });      
-        {
-            compositeActor = new CompositeActors(
-                cTabFolderMain,
-                SWT.NONE, statusLine, locale);
-            
-            tabItemActor.setControl(compositeActor);
-        }
-        */
-    }
-
-    private void initGenreTab() {
-        tabItemGenre = new CTabItem(cTabFolderMain, SWT.NONE);
-        tabItemGenre.setText(l.getString("tab.genre.title"));
-        /*
-        tabItemGenre.addDisposeListener(new DisposeListener() {
-            public void widgetDisposed(DisposeEvent evt) {
-                viewGenreMenuItem.setSelection(false);
-           }
-        });      
-        {
-            compositeGenre = new CompositeGenre(
-                cTabFolderMain,
-                SWT.NONE, statusLine, locale);
-            
-            tabItemGenre.setControl(compositeGenre);
-        }
-        */
-    }
-
-    private void initLanguageTab() {
-        tabItemLanguage = new CTabItem(cTabFolderMain, SWT.NONE);
-        tabItemLanguage.setText(l.getString("tab.language.title"));
-        tabItemLanguage.addDisposeListener(new DisposeListener() {
-            public void widgetDisposed(DisposeEvent evt) {
-                viewLanguageMenuItem.setSelection(false);
-           }
-        });      
-        {
-            compositeLanguage = new CompositeLanguage(
-                cTabFolderMain,
-                SWT.NONE, statusLine, locale);
-            
-            tabItemLanguage.setControl(compositeLanguage);
-        }
-    }    
-    
-    private void initStatusLine() {
-        statusLine = new StatusLineStyledText(compositeStatusLine, SWT.READ_ONLY);
-        statusLine.setText("");
-        statusLine
-                .setToolTipText("Hier finden Sie wichtige Statusinformationen");
-        statusLine.setBackground(ColorDef.STATUS_B_STANDARD);
-        statusLine.setForeground(ColorDef.STATUS_F_STANDARD);
-        statusLine.setDoubleClickEnabled(false);
-        statusLine.setEditable(false);
-        statusLine.setEnabled(true);
-        GridData styledText1LData = new GridData();
-
-        styledText1LData.horizontalAlignment = GridData.FILL;
-        styledText1LData.grabExcessHorizontalSpace = true;
-        statusLine.setLayoutData(styledText1LData);
-    }
-
-    /**
-     * Sets a message for the Statusline
-     * 
-     * @param mode
-     * @param message
-     */
-    private void setStatus(final int mode, final String message) {
-        /**
-         * mode values 0 normal message 1 information message 2 warn message 3
-         * error message
-         *  
-         */
-        if (mode == 0) {
-            statusLine.setBackground(ColorDef.STATUS_B_STANDARD);
-            statusLine.setForeground(ColorDef.STATUS_F_STANDARD);
-        } else if (mode == 1) {
-            statusLine.setBackground(ColorDef.STATUS_B_INFO);
-            statusLine.setForeground(ColorDef.STATUS_F_INFO);
-        } else if (mode == 2) {
-            statusLine.setBackground(ColorDef.STATUS_B_WARN);
-            statusLine.setForeground(ColorDef.STATUS_F_WARN);
-        } else if (mode == 3) {
-            statusLine.setBackground(ColorDef.STATUS_B_ERROR);
-            statusLine.setForeground(ColorDef.STATUS_F_ERROR);
-        }
-
-        statusLine.setText(message);
-
-		new Thread() {
-			public void run() {
-				
-				try {Thread.sleep (1000 *5);} catch (Throwable th) {}
-					if (display.isDisposed()) return;
-					display.asyncExec(new Runnable() {
-						public void run() {
-				            statusLine.setBackground(ColorDef.STATUS_B_STANDARD);
-				            statusLine.setForeground(ColorDef.STATUS_F_STANDARD);
-						}
-					});
-				
-			}
-		}.start();
-
-    }
-
-    private void initDB(){
-        
-		new Thread() {
-			public void run() {
-			    Database.initDB();
-			}
-		}.start();
-
-    }
-        
-    
-    
-}
\ No newline at end of file

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/language/genre.properties
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/language/genre.properties	2004-11-09 17:34:40 UTC (rev 101)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/language/genre.properties	2004-11-09 17:45:06 UTC (rev 102)
@@ -0,0 +1,34 @@
+
+error=Fehler
+button.new=Neu
+button.edit=Bearbeiten
+button.delete=L?schen
+button.save=Speichern
+button.cancel=Abbruch
+
+Genre.group.label=Genre
+Genre.groupoverview.label=?berblick
+Genre.groupoverview.columnid=id
+Genre.groupoverview.columnname=Name
+Genre.groupoverview.columnshortname=Abk.
+
+
+Genre.groupoverview.searchlabel=Suche nach
+Genre.groupdetail.label=Detail
+Genre.groupdetail.idlabel=Genre ID
+Genre.groupdetail.namelabel=Genre Name
+Genre.groupdetail.shortcutlabel=Genre Abk?rzung
+
+Genre.groupdetail.savebutton.warn.noname.title=Datensatz speichern
+Genre.groupdetail.savebutton.warn.noname.msg=Der Datensatz kann nicht gespeichert werden. \n Bitte geben Sie einen Namen an
+Genre.groupdetail.savebutton.newok=Speichern des neuen Genres erfolgreich.
+Genre.groupdetail.savebutton.editok=?ndern des Genres erfolgreich.
+
+Genre.groupdetail.savebutton.errorsave=Datenbankfehler beim Speichern.
+Genre.groupdetail.savebutton.errordb=Datenbankfehler beim Herstellen der Verbindung.(save).
+
+Genre.groupdetail.deletebutton.question.header=Wirklich l?schen?
+Genre.groupdetail.deletebutton.question.text=Wollen Sie den Datensatz {0} wirklich l?schen?
+Genre.groupdetail.deletebutton.newok=Datensatz wurde erfolgreich gel?scht.
+Genre.groupdetail.deletebutton.errorsave=Datenbankfehler beim L?schen.
+Genre.groupdetail.deletebutton.errordb=Datenbankfehler beim Herstellen der Verbindung(del).

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/language/language.properties
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/language/language.properties	2004-11-09 17:34:40 UTC (rev 101)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/language/language.properties	2004-11-09 17:45:06 UTC (rev 102)
@@ -0,0 +1,34 @@
+
+error=Fehler
+button.new=Neu
+button.edit=Bearbeiten
+button.delete=L?schen
+button.save=Speichern
+button.cancel=Abbruch
+
+Language.group.label=Language
+Language.groupoverview.label=?berblick
+Language.groupoverview.columnid=id
+Language.groupoverview.columnname=Name
+Language.groupoverview.columnshortname=Abk.
+
+
+Language.groupoverview.searchlabel=Suche nach
+Language.groupdetail.label=Detail
+Language.groupdetail.idlabel=Language ID
+Language.groupdetail.namelabel=Language Name
+Language.groupdetail.shortcutlabel=Language Abk?rzung
+
+Language.groupdetail.savebutton.warn.noname.title=Datensatz speichern
+Language.groupdetail.savebutton.warn.noname.msg=Der Datensatz kann nicht gespeichert werden. \n Bitte geben Sie einen Namen an
+Language.groupdetail.savebutton.newok=Speichern der neuen Language erfolgreich.
+Language.groupdetail.savebutton.editok=?ndern der Language erfolgreich.
+
+Language.groupdetail.savebutton.errorsave=Datenbankfehler beim Speichern.
+Language.groupdetail.savebutton.errordb=Datenbankfehler beim Herstellen der Verbindung.(save).
+
+Language.groupdetail.deletebutton.question.header=Wirklich l?schen?
+Language.groupdetail.deletebutton.question.text=Wollen Sie den Datensatz {0} wirklich l?schen?
+Language.groupdetail.deletebutton.newok=Datensatz wurde erfolgreich gel?scht.
+Language.groupdetail.deletebutton.errorsave=Datenbankfehler beim L?schen.
+Language.groupdetail.deletebutton.errordb=Datenbankfehler beim Herstellen der Verbindung(del).

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java	2004-11-09 17:34:40 UTC (rev 101)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java	2004-11-09 17:45:06 UTC (rev 102)
@@ -456,6 +456,214 @@
         
 
     }
+    
+	/**
+	 * This method gets all Genres from the database.
+	 * searches for firstname or lastname or id
+	 * @param filter 
+	 * @return List of Director objects, or an empty List
+	 */
+	public static List getGenre(final String filter){
+	    if (logger.isDebugEnabled()) {
+	        logger.debug("getGenre() - start. String filter= "+filter);
+	    }
+	    //init the returnlist
+	    List returnlist = new ArrayList();
+	
+	    Session s = null;
+	    
+	    try {
+	        //get new Session and begin Transaction
+	        s = HibernateUtil.currentSession();
+	            
+	            //init the criteria
+	            Criteria criteria = s.createCriteria(Genre.class);
+	            //any of the criteria 
+	            Disjunction any = Expression.disjunction();
+	
+	            //if filter not empty
+	            if (filter != null && !filter.equalsIgnoreCase("")) {
+	                any.add(Expression.like("name", "%"+filter+"%"));
+	                any.add(Expression.like("shortname", "%"+filter+"%"));
+	                
+	                //maybe we are searching for the id?
+	                try {
+	                    any.add(Expression.eq("GenreId", new Integer(Integer.parseInt(filter))));
+	                } catch (Exception e) {
+	                }
+	                
+	            }
+	            //add all criteria
+	            criteria.add(any);
+	            //get the results
+	            returnlist = criteria.list();
+	
+	
+	
+	
+	    } catch (Exception e) {
+	        logger.error(
+	                "getGenre() - Error while trying to do Transaction",
+	                e);
+	        returnlist = new ArrayList();
+	    } finally {
+	        try {
+	            // No matter what, close the session
+	            HibernateUtil.closeSession();
+	        } catch (HibernateException e1) {
+	            logger.error("getGenre() - Could not Close the Session", e1);
+	        }
+	    }
+	
+	    if (logger.isDebugEnabled()) {
+	        logger.debug("getGenre() - end");
+	    }
+	    return returnlist;
+	    
+	
+	}
+	
+	
+	public static Genre getSingleGenre(final int id){
+	    if (logger.isDebugEnabled()) {
+	        logger.debug("getSingleGenre() - start. int filter= "+id);
+	    }
+	    //init the returnlist
+	    Genre returnobject = null;
+	
+	    Session s = null;
+	    Transaction tx = null;
+	    try {
+	        //get new Session and begin Transaction
+	        s = HibernateUtil.currentSession();
+	
+	            returnobject = (Genre)s.get(Genre.class, new Integer(id));
+	
+	    } catch (Exception e) {
+	        logger.error(
+	                "getSingleGenre() - Error while trying to do Transaction",
+	                e);
+	        
+	    } finally {
+	        try {
+	            // No matter what, close the session
+	            HibernateUtil.closeSession();
+	        } catch (HibernateException e1) {
+	            logger.error("getSingleGenre() - Could not Close the Session", e1);
+	        }
+	    }
+	
+	    if (logger.isDebugEnabled()) {
+	        logger.debug("getSingleGenre() - end");
+	    }
+	    return returnobject;
+	    
+	
+	}
+	
+	/**
+	 * This method gets all Languages from the database.
+	 * searches for firstname or lastname or id
+	 * @param filter 
+	 * @return List of Director objects, or an empty List
+	 */
+	public static List getLanguage(final String filter){
+	    if (logger.isDebugEnabled()) {
+	        logger.debug("getLanguage() - start. String filter= "+filter);
+	    }
+	    //init the returnlist
+	    List returnlist = new ArrayList();
+	
+	    Session s = null;
+	    
+	    try {
+	        //get new Session and begin Transaction
+	        s = HibernateUtil.currentSession();
+	            
+	            //init the criteria
+	            Criteria criteria = s.createCriteria(Language.class);
+	            //any of the criteria 
+	            Disjunction any = Expression.disjunction();
+	
+	            //if filter not empty
+	            if (filter != null && !filter.equalsIgnoreCase("")) {
+	                any.add(Expression.like("name", "%"+filter+"%"));
+	                any.add(Expression.like("shortname", "%"+filter+"%"));
+	                
+	                //maybe we are searching for the id?
+	                try {
+	                    any.add(Expression.eq("LanguageId", new Integer(Integer.parseInt(filter))));
+	                } catch (Exception e) {
+	                }
+	                
+	            }
+	            //add all criteria
+	            criteria.add(any);
+	            //get the results
+	            returnlist = criteria.list();
+	
+	
+	
+	
+	    } catch (Exception e) {
+	        logger.error(
+	                "getLanguage() - Error while trying to do Transaction",
+	                e);
+	        returnlist = new ArrayList();
+	    } finally {
+	        try {
+	            // No matter what, close the session
+	            HibernateUtil.closeSession();
+	        } catch (HibernateException e1) {
+	            logger.error("getLanguage() - Could not Close the Session", e1);
+	        }
+	    }
+	
+	    if (logger.isDebugEnabled()) {
+	        logger.debug("getLanguage() - end");
+	    }
+	    return returnlist;
+	    
+	
+	}
+	
+	
+	public static Language getSingleLanguage(final int id){
+	    if (logger.isDebugEnabled()) {
+	        logger.debug("getSingleLanguage() - start. int filter= "+id);
+	    }
+	    //init the returnlist
+	    Language returnobject = null;
+	
+	    Session s = null;
+	    Transaction tx = null;
+	    try {
+	        //get new Session and begin Transaction
+	        s = HibernateUtil.currentSession();
+	
+	            returnobject = (Language)s.get(Language.class, new Integer(id));
+	
+	    } catch (Exception e) {
+	        logger.error(
+	                "getSingleLanguage() - Error while trying to do Transaction",
+	                e);
+	        
+	    } finally {
+	        try {
+	            // No matter what, close the session
+	            HibernateUtil.closeSession();
+	        } catch (HibernateException e1) {
+	            logger.error("getSingleLanguage() - Could not Close the Session", e1);
+	        }
+	    }
+	
+	    if (logger.isDebugEnabled()) {
+	        logger.debug("getSingleLanguage() - end");
+	    }
+	    return returnobject;
+	    
+	
+	}
 
      /**
      * Constructor for TestActor.



From pschneider at sheep.berlios.de  Tue Nov  9 19:21:41 2004
From: pschneider at sheep.berlios.de (Philipp Schneider at BerliOS)
Date: Tue, 9 Nov 2004 19:21:41 +0100
Subject: [Provirent-svn-commit] r103 - project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui
Message-ID: <200411091821.iA9ILfUu014520@sheep.berlios.de>

Author: pschneider
Date: 2004-11-09 19:21:40 +0100 (Tue, 09 Nov 2004)
New Revision: 103

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/ManagementGui.java
Log:
addDisposeListener entfernt

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/ManagementGui.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/ManagementGui.java	2004-11-09 17:45:06 UTC (rev 102)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/ManagementGui.java	2004-11-09 18:21:40 UTC (rev 103)
@@ -524,11 +524,6 @@
         tabItemFormat = new CTabItem(cTabFolderMain, SWT.NONE);
         tabItemFormat.setText(l.getString("tab.format.title"));
         
-        tabItemFormat.addDisposeListener(new DisposeListener() {
-            public void widgetDisposed(DisposeEvent evt) {
-                viewVideoFormatMenuItem.setSelection(false);
-           }
-        });
         {
             compositeFormate = new CompositeFormate(
                 cTabFolderMain,
@@ -543,12 +538,7 @@
     private void initDirectorTab() {
         tabItemDirector = new CTabItem(cTabFolderMain, SWT.NONE);
         tabItemDirector.setText(l.getString("tab.director.title"));
-        
-        tabItemDirector.addDisposeListener(new DisposeListener() {
-            public void widgetDisposed(DisposeEvent evt) {
-                viewDirectorMenuItem.setSelection(false);
-           }
-        });        
+      
         {
             compositeDirector = new CompositeDirectors(
                 cTabFolderMain,
@@ -562,12 +552,7 @@
     private void initActorTab() {
         tabItemActor = new CTabItem(cTabFolderMain, SWT.NONE);
         tabItemActor.setText(l.getString("tab.actor.title"));
-        
-        tabItemActor.addDisposeListener(new DisposeListener() {
-            public void widgetDisposed(DisposeEvent evt) {
-                viewActorMenuItem.setSelection(false);
-           }
-        });      
+  
         {
             compositeActor = new CompositeActors(
                 cTabFolderMain,
@@ -582,11 +567,7 @@
         tabItemGenre = new CTabItem(cTabFolderMain, SWT.NONE);
         tabItemGenre.setText(l.getString("tab.genre.title"));
         
-        tabItemGenre.addDisposeListener(new DisposeListener() {
-            public void widgetDisposed(DisposeEvent evt) {
-                viewGenreMenuItem.setSelection(false);
-           }
-        });      
+  
         {
             compositeGenre = new CompositeGenre(
                 cTabFolderMain,
@@ -600,11 +581,7 @@
     private void initLanguageTab() {
         tabItemLanguage = new CTabItem(cTabFolderMain, SWT.NONE);
         tabItemLanguage.setText(l.getString("tab.language.title"));
-        tabItemLanguage.addDisposeListener(new DisposeListener() {
-            public void widgetDisposed(DisposeEvent evt) {
-                viewLanguageMenuItem.setSelection(false);
-           }
-        });      
+     
         {
             compositeLanguage = new CompositeLanguage(
                 cTabFolderMain,



From rgriesch at sheep.berlios.de  Tue Nov  9 22:03:54 2004
From: rgriesch at sheep.berlios.de (Remo Griesch at BerliOS)
Date: Tue, 9 Nov 2004 22:03:54 +0100
Subject: [Provirent-svn-commit] r104 - docu
Message-ID: <200411092103.iA9L3sAS022176@sheep.berlios.de>

Author: rgriesch
Date: 2004-11-09 22:03:53 +0100 (Tue, 09 Nov 2004)
New Revision: 104

Modified:
   docu/Probleme in Management GUI.txt
Log:
weiteres Problem entdeckt

Modified: docu/Probleme in Management GUI.txt
===================================================================
--- docu/Probleme in Management GUI.txt	2004-11-09 18:21:40 UTC (rev 103)
+++ docu/Probleme in Management GUI.txt	2004-11-09 21:03:53 UTC (rev 104)
@@ -15,3 +15,11 @@
 - Sobald Reiter fokus erh?lt sollte Daten geladen bzw. angezeigt werden
 - doppelte Formate ?
 - bei leeren Suchfeld  sollte auch keine Suche aktiv sein ( Anwender wei? nicht das er erst suchfeld leeren und enter dr?cken mu?)
+
+
+Probleme 9.11.2004
+
+ManagementGui.java
+
+-Editorfenster sollte (oder ganzes Fenster) sollte eine bestimmte Gr??e nicht  unterschreiten
+ Grund: Buttons werden nicht mit verschoben so das erst ab einer bestimmten  Gr??e die Bedienbarkeit gegeben ist



From sforstner at sheep.berlios.de  Wed Nov 10 01:28:15 2004
From: sforstner at sheep.berlios.de (Stefan at BerliOS)
Date: Wed, 10 Nov 2004 01:28:15 +0100
Subject: [Provirent-svn-commit] r105 - project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui
Message-ID: <200411100028.iAA0SFrN024563@sheep.berlios.de>

Author: sforstner
Date: 2004-11-10 01:28:00 +0100 (Wed, 10 Nov 2004)
New Revision: 105

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/ManagementGui.java
Log:
Men?\195?\188eintr?\195?\164ge Views: H?\195?\164kchen verschwindet nun, wenn TabItem  geschlossen wird.

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/ManagementGui.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/ManagementGui.java	2004-11-09 21:03:53 UTC (rev 104)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/ManagementGui.java	2004-11-10 00:28:00 UTC (rev 105)
@@ -42,57 +42,40 @@
 import org.eclipse.swt.SWT;
 import org.eclipse.swt.custom.CTabFolder;
 import org.eclipse.swt.custom.CTabItem;
-import org.eclipse.swt.custom.SashForm;
-import org.eclipse.swt.custom.StyledText;
-import org.eclipse.swt.events.FocusAdapter;
-import org.eclipse.swt.events.FocusEvent;
 import org.eclipse.swt.events.SelectionAdapter;
 import org.eclipse.swt.events.SelectionEvent;
 import org.eclipse.swt.layout.FillLayout;
-import org.eclipse.swt.layout.FormAttachment;
-import org.eclipse.swt.layout.FormData;
-import org.eclipse.swt.layout.FormLayout;
 import org.eclipse.swt.layout.GridData;
 import org.eclipse.swt.layout.GridLayout;
-import org.eclipse.swt.widgets.Button;
 import org.eclipse.swt.widgets.Composite;
 import org.eclipse.swt.widgets.Display;
-import org.eclipse.swt.widgets.Event;
-import org.eclipse.swt.widgets.Group;
-import org.eclipse.swt.widgets.Label;
-import org.eclipse.swt.widgets.List;
-import org.eclipse.swt.widgets.Listener;
 import org.eclipse.swt.widgets.Menu;
 import org.eclipse.swt.widgets.MenuItem;
 import org.eclipse.swt.widgets.Shell;
-import org.eclipse.swt.widgets.Table;
 import org.eclipse.swt.widgets.TableColumn;
-import org.eclipse.swt.widgets.TableItem;
 import org.eclipse.swt.widgets.Text;
 
 import com.cloudgarden.resource.SWTResourceManager;
 
 import de.hsharz.provirent.managment.exceptions.GuiInitException;
-import de.hsharz.provirent.objects.VideoFormat;
 import de.hsharz.provirent.persistence.Database;
 
 /**
- * This code was generated using CloudGarden's Jigloo
- * SWT/Swing GUI Builder, which is free for non-commercial
- * use. If Jigloo is being used commercially (ie, by a corporation,
- * company or business for any purpose whatever) then you
- * should purchase a license for each developer using Jigloo.
- * Please visit www.cloudgarden.com for details.
- * Use of Jigloo implies acceptance of these licensing terms.
- * *************************************
- * A COMMERCIAL LICENSE HAS NOT BEEN PURCHASED
- * for this machine, so Jigloo or this code cannot be used legally
- * for any corporate or commercial purpose.
- * *************************************
- */
- import de.hsharz.provirent.managment.gui.CompositeFormate;
- import org.eclipse.swt.events.DisposeListener;
- import org.eclipse.swt.events.DisposeEvent;
+* This code was generated using CloudGarden's Jigloo
+* SWT/Swing GUI Builder, which is free for non-commercial
+* use. If Jigloo is being used commercially (ie, by a corporation,
+* company or business for any purpose whatever) then you
+* should purchase a license for each developer using Jigloo.
+* Please visit www.cloudgarden.com for details.
+* Use of Jigloo implies acceptance of these licensing terms.
+* *************************************
+* A COMMERCIAL LICENSE HAS NOT BEEN PURCHASED
+* for this machine, so Jigloo or this code cannot be used legally
+* for any corporate or commercial purpose.
+* *************************************
+*/
+import org.eclipse.swt.events.DisposeListener;
+import org.eclipse.swt.events.DisposeEvent;
 /**
  * @author Philipp Schneider
  *  
@@ -401,7 +384,7 @@
 				
 				cTabFolderMain.setSelection(tabItemFormat);
 				viewVideoFormatMenuItem.setSelection(true);
-            
+				cTabFolderMain.showSelection();
             }
         });
 
@@ -417,7 +400,7 @@
 				
 				cTabFolderMain.setSelection(tabItemDirector);
 				viewDirectorMenuItem.setSelection(true);
-            
+				cTabFolderMain.showSelection();
             }
         });        
 
@@ -433,6 +416,7 @@
 				
 				cTabFolderMain.setSelection(tabItemActor);
 				viewActorMenuItem.setSelection(true);
+				cTabFolderMain.showSelection();
             
             }
         });         
@@ -448,6 +432,7 @@
 				}
 				
 				cTabFolderMain.setSelection(tabItemGenre);
+				cTabFolderMain.showSelection();
 				viewGenreMenuItem.setSelection(true);
             
             }
@@ -465,7 +450,7 @@
 				
 				cTabFolderMain.setSelection(tabItemLanguage);
 				viewGenreMenuItem.setSelection(true);
-            
+				cTabFolderMain.showSelection();
             }
         });         
 
@@ -523,7 +508,14 @@
     private void initFormatTab() {
         tabItemFormat = new CTabItem(cTabFolderMain, SWT.NONE);
         tabItemFormat.setText(l.getString("tab.format.title"));
-        
+        tabItemFormat.addDisposeListener(new DisposeListener() {
+            public void widgetDisposed(DisposeEvent evt) {
+                System.out
+                    .println("tabItemFormat.widgetDisposed, event=" + evt);
+                viewVideoFormatMenuItem.setSelection(false);
+            }
+        });
+
         {
             compositeFormate = new CompositeFormate(
                 cTabFolderMain,
@@ -538,7 +530,15 @@
     private void initDirectorTab() {
         tabItemDirector = new CTabItem(cTabFolderMain, SWT.NONE);
         tabItemDirector.setText(l.getString("tab.director.title"));
-      
+        tabItemDirector.addDisposeListener(new DisposeListener() {
+
+            public void widgetDisposed(DisposeEvent evt) {
+                System.out
+                    .println("tabItemDirector.widgetDisposed, event=" + evt);
+                viewDirectorMenuItem.setSelection(false);
+            }
+            
+        });
         {
             compositeDirector = new CompositeDirectors(
                 cTabFolderMain,
@@ -552,7 +552,15 @@
     private void initActorTab() {
         tabItemActor = new CTabItem(cTabFolderMain, SWT.NONE);
         tabItemActor.setText(l.getString("tab.actor.title"));
-  
+        tabItemActor.addDisposeListener(new DisposeListener() {
+
+            public void widgetDisposed(DisposeEvent evt) {
+                System.out
+                    .println("tabItemActor.widgetDisposed, event=" + evt);
+                viewActorMenuItem.setSelection(false);
+            }
+            
+        });
         {
             compositeActor = new CompositeActors(
                 cTabFolderMain,
@@ -566,7 +574,15 @@
     private void initGenreTab() {
         tabItemGenre = new CTabItem(cTabFolderMain, SWT.NONE);
         tabItemGenre.setText(l.getString("tab.genre.title"));
-        
+        tabItemGenre.addDisposeListener(new DisposeListener() {
+
+            public void widgetDisposed(DisposeEvent evt) {
+                System.out
+                    .println("tabItemGenre.widgetDisposed, event=" + evt);
+                viewGenreMenuItem.setSelection(false);
+            }
+            
+        });
   
         {
             compositeGenre = new CompositeGenre(
@@ -581,7 +597,15 @@
     private void initLanguageTab() {
         tabItemLanguage = new CTabItem(cTabFolderMain, SWT.NONE);
         tabItemLanguage.setText(l.getString("tab.language.title"));
-     
+        tabItemLanguage.addDisposeListener(new DisposeListener() {
+
+            public void widgetDisposed(DisposeEvent evt) {
+                System.out
+                    .println("tabItemLanguage.widgetDisposed, event=" + evt);
+                viewLanguageMenuItem.setSelection(false);
+            }
+            
+        });
         {
             compositeLanguage = new CompositeLanguage(
                 cTabFolderMain,



From rgriesch at sheep.berlios.de  Wed Nov 10 01:32:38 2004
From: rgriesch at sheep.berlios.de (Remo Griesch at BerliOS)
Date: Wed, 10 Nov 2004 01:32:38 +0100
Subject: [Provirent-svn-commit] r106 - in project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui: . language
Message-ID: <200411100032.iAA0WcHZ026883@sheep.berlios.de>

Author: rgriesch
Date: 2004-11-10 01:32:25 +0100 (Wed, 10 Nov 2004)
New Revision: 106

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/CompositeActors.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/language/actors.properties
Log:
Beginn Composite Actors

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/CompositeActors.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/CompositeActors.java	2004-11-10 00:28:00 UTC (rev 105)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/CompositeActors.java	2004-11-10 00:32:25 UTC (rev 106)
@@ -6,10 +6,20 @@
 
 import org.apache.log4j.Logger;
 import org.eclipse.swt.SWT;
+import org.eclipse.swt.custom.SashForm;
+import org.eclipse.swt.events.FocusAdapter;
+import org.eclipse.swt.events.FocusEvent;
+import org.eclipse.swt.events.SelectionAdapter;
+import org.eclipse.swt.events.SelectionEvent;
+import org.eclipse.swt.layout.FormData;
+import org.eclipse.swt.layout.FormLayout;
 import org.eclipse.swt.layout.GridLayout;
 import org.eclipse.swt.widgets.Button;
 import org.eclipse.swt.widgets.Composite;
 import org.eclipse.swt.widgets.Display;
+import org.eclipse.swt.widgets.Event;
+import org.eclipse.swt.widgets.Label;
+import org.eclipse.swt.widgets.Listener;
 import org.eclipse.swt.widgets.Shell;
 
 
@@ -17,6 +27,8 @@
 import org.eclipse.swt.layout.GridData;
 import com.cloudgarden.resource.SWTResourceManager;
 import org.eclipse.swt.widgets.Text;
+import org.eclipse.swt.widgets.Table;
+import org.eclipse.swt.widgets.TableColumn;
 /**
 * This code was generated using CloudGarden's Jigloo
 * SWT/Swing GUI Builder, which is free for non-commercial
@@ -48,13 +60,26 @@
     
     
     private final static int MODE_VIEW = 0;
-
     private final static int MODE_ADD = 1;
-    private Text text1;
-    private Group groupActor;
-
     private final static int MODE_EDIT = 2;
     
+    private Table tableActorsOverview;
+    private TableColumn tableActorsOverview_ColumnID;
+    private TableColumn tableActorsOverview_ColumnFName;
+    private TableColumn tableActorsOverview_ColumnLName;
+    
+    
+    private SashForm sashForm1;
+    private SashForm sashForm2;
+    
+    private Group groupActor;
+    private Group groupActorsOverview;
+    private Group groupActorsDetail;
+    
+    private Text textActorsSearch;
+    
+    private Label labelActorsSearch;
+    
     private StatusLineStyledText statusLine;
 
     private ResourceBundle l;
@@ -137,16 +162,181 @@
             groupActor.setLayoutData(groupActorLData);
             groupActorLayout.makeColumnsEqualWidth = true;
             groupActor.setLayout(groupActorLayout);
-            groupActor.setText("Actor");
+            groupActor.setText(l.getString("actors.group.label"));
             {
-                text1 = new Text(groupActor, SWT.MULTI | SWT.WRAP);
-                text1.setText("text1");
-                GridData text1LData = new GridData();
-                text1.setBackground(SWTResourceManager.getColor(255, 0, 0));
-                text1LData.widthHint = 336;
-                text1LData.heightHint = 173;
-                text1.setLayoutData(text1LData);
+                sashForm2 = new SashForm(groupActor, SWT.NONE);
+                GridData sashForm2LData = new GridData();
+                sashForm2LData.verticalAlignment = GridData.FILL;
+                sashForm2LData.horizontalAlignment = GridData.FILL;
+                sashForm2LData.grabExcessHorizontalSpace = true;
+                sashForm2LData.grabExcessVerticalSpace = true;
+                sashForm2.setLayoutData(sashForm2LData);
+                // Group Actors Overview 
+                {
+                    groupActorsOverview = new Group(sashForm2,SWT.NONE);
+                    GridLayout group1Layout = new GridLayout();
+                    groupActorsOverview.setBounds(0, 0, 781, 487);
+                    groupActorsOverview.setBounds(0, 0, 647, 448);
+                    group1Layout.makeColumnsEqualWidth = true;
+                    GridData group1LData = new GridData();
+                    group1Layout.makeColumnsEqualWidth = true;
+                    groupActorsOverview.setLayout(group1Layout);
+                    groupActorsOverview.setText(l.getString("actors.groupoverview.label"));
+                    {
+                        tableActorsOverview = new Table(
+                            groupActorsOverview,
+                            SWT.SINGLE
+                                | SWT.FULL_SELECTION
+                                | SWT.V_SCROLL | SWT.BORDER);
+                        GridData tableActorsOverviewLData = new GridData();
+                        tableActorsOverview.setHeaderVisible(true);
+                        tableActorsOverview.setLinesVisible(true);
+                        tableActorsOverviewLData.widthHint = GridData.FILL;
+                        tableActorsOverviewLData.heightHint = GridData.FILL;
+                        tableActorsOverviewLData.horizontalSpan = 8;
+                        tableActorsOverviewLData.grabExcessHorizontalSpace = true;
+                        tableActorsOverviewLData.grabExcessVerticalSpace = true;
+                        tableActorsOverview
+                            .setLayoutData(tableActorsOverviewLData);
+                        tableActorsOverview
+                            .addFocusListener(new FocusAdapter() {
+                                public void focusLost(FocusEvent evt) {
+                                    System.out
+                                        .println("tableActorsOverview.focusLost, event="
+                                            + evt);
+                                    //TODO add your code for tableVideoFormat.focusLost
+                                }
+                                public void focusGained(FocusEvent evt) {
+                                    System.out
+                                        .println("tableActorsOverview.focusGained, event="
+                                            + evt);
+                                    //TODO add your code for tableVideoFormat.focusGained
+                                }
+                            });
+                        tableActorsOverview
+                            .addSelectionListener(new SelectionAdapter() {
+                                public void widgetSelected(SelectionEvent evt) {
+                                    if (logger.isDebugEnabled()) {
+                                        logger
+                                            .debug("widgetSelected(SelectionEvent evt = "
+                                                + evt
+                                                + ") - start");
+                                    }
+
+                                    int index = tableActorsOverview
+                                        .getSelectionIndex();
+
+                                    System.out.println("Table select. id: "
+                                        + index
+                                        + " TableItem:"
+                                        + tableActorsOverview.getItem(index)
+                                        + " id: "
+                                        + tableActorsOverview.getItem(index)
+                                            .getText(0));
+
+                                    //es wurde ein Element aus Tabelle ausgewaehlt jetzt muss die
+                                    //Detailansicht aktualisiert werden
+                                    //                               refreshActorsDetail(tableActorsOverview.getItem(index)
+                                    //                                   .getText(0));
+
+                                    if (logger.isDebugEnabled()) {
+                                        logger
+                                            .debug("widgetSelected(SelectionEvent) - end");
+                                    }
+                                }
+                            });
+
+                        {
+                            tableActorsOverview_ColumnID = new TableColumn(
+                                tableActorsOverview,
+                                SWT.CENTER);
+                            tableActorsOverview_ColumnID.setText(l
+                                .getString("actors.groupoverview.columnid"));
+                            tableActorsOverview_ColumnID.setWidth(40);
+                        }
+                        {
+                            tableActorsOverview_ColumnFName = new TableColumn(
+                                tableActorsOverview,
+                                SWT.CENTER);
+                            tableActorsOverview_ColumnFName.setText(l
+                                .getString("actors.groupoverview.columnid"));
+                            tableActorsOverview_ColumnFName.setWidth(80);
+                        }
+                        {
+                            tableActorsOverview_ColumnLName = new TableColumn(
+                                tableActorsOverview,
+                                SWT.CENTER);
+                            tableActorsOverview_ColumnLName.setText(l
+                                .getString("actors.groupoverview.columnid"));
+                            tableActorsOverview_ColumnLName.setWidth(80);
+                        }
+                    }// table Actors Overview
+                    // table Actors Overview
+                    // Search
+                    {
+                        //label f?r die Suche
+                        labelActorsSearch = new Label(groupActorsOverview, SWT.NONE);
+                        labelActorsSearch.setText(l
+                                .getString("actors.groupoverview.searchlabel")
+                                + ":");
+                        GridData label2LData = new GridData();
+                        label2LData.horizontalSpan = 3;
+                        labelActorsSearch.setLayoutData(label2LData);
+
+                        //das Suchfeld
+                        textActorsSearch = new Text(groupActorsOverview, SWT.BORDER);
+                        GridData text2LData = new GridData();
+                        textActorsSearch.addFocusListener(new FocusAdapter() {
+                            public void focusLost(FocusEvent evt) {
+                                if (logger.isDebugEnabled()) {
+                                    logger.debug("focusLost(FocusEvent evt = " + evt + " "
+                                            + textActorsSearch.getText() + ") - start");
+                                }
+
+                   //             refreshVideoFormatTable(textVideoFormatSearch.getText());
+
+                                if (logger.isDebugEnabled()) {
+                                    logger.debug("focusLost(FocusEvent) - end");
+                                }
+                            }
+                        });
+                        textActorsSearch.addListener(SWT.DefaultSelection, new Listener() {
+                            public void handleEvent(Event e) {
+                                if (logger.isDebugEnabled()) {
+                                    logger.debug("handleEvent(Event e = " + e + " "
+                                            + textActorsSearch.getText() + ") - start");
+                                }
+
+                //                refreshVideoFormatTable(textActorsSearch.getText());
+
+                                if (logger.isDebugEnabled()) {
+                                    logger.debug("handleEvent(Event) - end");
+                                }
+                            }
+                        });
+                        text2LData.horizontalAlignment = GridData.FILL;
+                        text2LData.horizontalSpan = 5;
+                        text2LData.grabExcessHorizontalSpace = true;
+                        textActorsSearch.setLayoutData(text2LData);
+                    }// Search
+                    
+                
+                }
+                // Group Actors Detail
+                {
+                    groupActorsDetail = new Group(sashForm2, SWT.NONE);
+                    GridLayout group2Layout = new GridLayout();
+                    groupActorsDetail.setBounds(0, 0, 781, 487);
+                    groupActorsDetail.setBounds(0, 0, 647, 448);
+                    group2Layout.makeColumnsEqualWidth = true;
+                    GridData group2LData = new GridData();
+                    group2Layout.makeColumnsEqualWidth = true;
+                    groupActorsDetail.setLayout(group2Layout);
+                    groupActorsDetail.setText(l.getString("actors.groupdetail.label"));   
+                }
             }
+            // init the rest of the layout
+            initActorsGroup();
         }
 
         this.layout();
@@ -158,6 +348,7 @@
         }
 	}
 
-	
+	private void initActorsGroup()  {	    
+	}
 
 }

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/language/actors.properties
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/language/actors.properties	2004-11-10 00:28:00 UTC (rev 105)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/language/actors.properties	2004-11-10 00:32:25 UTC (rev 106)
@@ -0,0 +1,10 @@
+actors.group.label=Darsteller
+
+actors.groupoverview.label = ?berblick
+actors.groupoverview.searchlabel = Suche nach
+actors.groupoverview.columnid = ID
+actors.groupoverview.columnfirstname = Vorname
+actors.groupoverview.columnlastname = Nachname
+
+
+actors.groupdetail.label = Detail
\ No newline at end of file



From sforstner at sheep.berlios.de  Wed Nov 10 01:46:49 2004
From: sforstner at sheep.berlios.de (Stefan at BerliOS)
Date: Wed, 10 Nov 2004 01:46:49 +0100
Subject: [Provirent-svn-commit] r107 - in project_src/provirent_hibernate/src/de/hsharz/provirent: . management/exceptions management/gui
Message-ID: <200411100046.iAA0knZI003091@sheep.berlios.de>

Author: sforstner
Date: 2004-11-10 01:46:32 +0100 (Wed, 10 Nov 2004)
New Revision: 107

Added:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java
Removed:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java
Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/exceptions/GuiInitException.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/AbstractComposite.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ColorDef.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeActors.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeDirectors.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeFormate.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeGenre.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeLanguage.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/StatusLineStyledText.java
Log:


Copied: project_src/provirent_hibernate/src/de/hsharz/provirent/management (from rev 103, project_src/provirent_hibernate/src/de/hsharz/provirent/managment)

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/exceptions/GuiInitException.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/managment/exceptions/GuiInitException.java	2004-11-09 18:21:40 UTC (rev 103)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/exceptions/GuiInitException.java	2004-11-10 00:46:32 UTC (rev 107)
@@ -30,7 +30,7 @@
  * POSSIBILITY OF SUCH DAMAGE.
  *
  */
-package de.hsharz.provirent.managment.exceptions;
+package de.hsharz.provirent.management.exceptions;
 
 /**
  * @author Philipp Schneider

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/AbstractComposite.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/AbstractComposite.java	2004-11-09 18:21:40 UTC (rev 103)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/AbstractComposite.java	2004-11-10 00:46:32 UTC (rev 107)
@@ -1,8 +1,7 @@
-package de.hsharz.provirent.managment.gui;
+package de.hsharz.provirent.management.gui;
 
 import java.util.Locale;
 
-import org.eclipse.swt.SWT;
 import org.eclipse.swt.widgets.Composite;
 import org.eclipse.swt.widgets.MessageBox;
 

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ColorDef.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/ColorDef.java	2004-11-09 18:21:40 UTC (rev 103)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ColorDef.java	2004-11-10 00:46:32 UTC (rev 107)
@@ -30,7 +30,7 @@
  * POSSIBILITY OF SUCH DAMAGE.
  *
  */
-package de.hsharz.provirent.managment.gui;
+package de.hsharz.provirent.management.gui;
 
 import org.eclipse.swt.graphics.Color;
 

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeActors.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/CompositeActors.java	2004-11-09 18:21:40 UTC (rev 103)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeActors.java	2004-11-10 00:46:32 UTC (rev 107)
@@ -1,4 +1,4 @@
-package de.hsharz.provirent.managment.gui;
+package de.hsharz.provirent.management.gui;
 
 import java.util.Locale;
 import java.util.PropertyResourceBundle;

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeDirectors.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/CompositeDirectors.java	2004-11-09 18:21:40 UTC (rev 103)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeDirectors.java	2004-11-10 00:46:32 UTC (rev 107)
@@ -1,4 +1,4 @@
-package de.hsharz.provirent.managment.gui;
+package de.hsharz.provirent.management.gui;
 
 import java.util.Locale;
 import java.util.PropertyResourceBundle;

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeFormate.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/CompositeFormate.java	2004-11-09 18:21:40 UTC (rev 103)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeFormate.java	2004-11-10 00:46:32 UTC (rev 107)
@@ -1,4 +1,4 @@
-package de.hsharz.provirent.managment.gui;
+package de.hsharz.provirent.management.gui;
 
 import java.text.MessageFormat;
 import java.util.Locale;
@@ -12,7 +12,6 @@
 import org.eclipse.swt.events.FocusEvent;
 import org.eclipse.swt.events.SelectionAdapter;
 import org.eclipse.swt.events.SelectionEvent;
-import org.eclipse.swt.graphics.Color;
 import org.eclipse.swt.layout.FormAttachment;
 import org.eclipse.swt.layout.FormData;
 import org.eclipse.swt.layout.FormLayout;

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeGenre.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/CompositeGenre.java	2004-11-09 18:21:40 UTC (rev 103)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeGenre.java	2004-11-10 00:46:32 UTC (rev 107)
@@ -1,4 +1,4 @@
-package de.hsharz.provirent.managment.gui;
+package de.hsharz.provirent.management.gui;
 
 import java.text.MessageFormat;
 import java.util.Locale;

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeLanguage.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/CompositeLanguage.java	2004-11-09 18:21:40 UTC (rev 103)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeLanguage.java	2004-11-10 00:46:32 UTC (rev 107)
@@ -1,4 +1,4 @@
-package de.hsharz.provirent.managment.gui;
+package de.hsharz.provirent.management.gui;
 
 import java.text.MessageFormat;
 import java.util.Locale;

Deleted: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/ManagementGui.java	2004-11-09 18:21:40 UTC (rev 103)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java	2004-11-10 00:46:32 UTC (rev 107)
@@ -1,668 +0,0 @@
-/*
- * Created on 11.10.2004
- *
- * Copyright (c) 2004/2005, Remo Griesch/Stefan Forstner/Philipp Schneider
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met:
- *
- * - Redistributions of source code must retain the above copyright notice,
- * this list of conditions and the following disclaimer.
- * - Redistributions in binary form must reproduce the above copyright notice,
- * this list of conditions and the following disclaimer in the documentation
- * and/or other materials provided with the distribution.
- * - Neither the name of the Remo Griesch/Stefan Forstner/Philipp Schneider nor
- * the names of its contributors may be used to endorse or promote products
- * derived from this software without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
- * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
- * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
- * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
- * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
- * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
- * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- * POSSIBILITY OF SUCH DAMAGE.
- *
- */
-
-package de.hsharz.provirent.managment.gui;
-
-
-import java.util.Locale;
-import java.util.PropertyResourceBundle;
-import java.util.ResourceBundle;
-
-import org.apache.log4j.Logger;
-import org.eclipse.swt.SWT;
-import org.eclipse.swt.custom.CTabFolder;
-import org.eclipse.swt.custom.CTabItem;
-import org.eclipse.swt.custom.SashForm;
-import org.eclipse.swt.custom.StyledText;
-import org.eclipse.swt.events.FocusAdapter;
-import org.eclipse.swt.events.FocusEvent;
-import org.eclipse.swt.events.SelectionAdapter;
-import org.eclipse.swt.events.SelectionEvent;
-import org.eclipse.swt.layout.FillLayout;
-import org.eclipse.swt.layout.FormAttachment;
-import org.eclipse.swt.layout.FormData;
-import org.eclipse.swt.layout.FormLayout;
-import org.eclipse.swt.layout.GridData;
-import org.eclipse.swt.layout.GridLayout;
-import org.eclipse.swt.widgets.Button;
-import org.eclipse.swt.widgets.Composite;
-import org.eclipse.swt.widgets.Display;
-import org.eclipse.swt.widgets.Event;
-import org.eclipse.swt.widgets.Group;
-import org.eclipse.swt.widgets.Label;
-import org.eclipse.swt.widgets.List;
-import org.eclipse.swt.widgets.Listener;
-import org.eclipse.swt.widgets.Menu;
-import org.eclipse.swt.widgets.MenuItem;
-import org.eclipse.swt.widgets.Shell;
-import org.eclipse.swt.widgets.Table;
-import org.eclipse.swt.widgets.TableColumn;
-import org.eclipse.swt.widgets.TableItem;
-import org.eclipse.swt.widgets.Text;
-
-import com.cloudgarden.resource.SWTResourceManager;
-
-import de.hsharz.provirent.managment.exceptions.GuiInitException;
-import de.hsharz.provirent.objects.VideoFormat;
-import de.hsharz.provirent.persistence.Database;
-
-/**
- * This code was generated using CloudGarden's Jigloo
- * SWT/Swing GUI Builder, which is free for non-commercial
- * use. If Jigloo is being used commercially (ie, by a corporation,
- * company or business for any purpose whatever) then you
- * should purchase a license for each developer using Jigloo.
- * Please visit www.cloudgarden.com for details.
- * Use of Jigloo implies acceptance of these licensing terms.
- * *************************************
- * A COMMERCIAL LICENSE HAS NOT BEEN PURCHASED
- * for this machine, so Jigloo or this code cannot be used legally
- * for any corporate or commercial purpose.
- * *************************************
- */
- import de.hsharz.provirent.managment.gui.CompositeFormate;
- import org.eclipse.swt.events.DisposeListener;
- import org.eclipse.swt.events.DisposeEvent;
-/**
- * @author Philipp Schneider
- *  
- */
-public class ManagementGui {
-    /**
-     * Logger for this class
-     */
-    private static final Logger logger = Logger.getLogger(ManagementGui.class);
-
-    public final static int MODE_VIEW = 0;
-
-    public final static int MODE_ADD = 1;
-
-    public final static int MODE_EDIT = 2;
-
-    private static final int MAIN_WINDOW_WIDTH = 700;
-
-    private static final int MAIN_WINDOW_HEIGHT = 500;
-
-    private CTabFolder cTabFolderMain;
-
-    private CTabItem tabItemFormat,tabItemActor,tabItemDirector,tabItemLanguage,tabItemGenre;
-
-    private CompositeFormate compositeFormate;
-    private CompositeActors compositeActor;
-    private CompositeDirectors compositeDirector;
-    private CompositeGenre compositeGenre;
-    private CompositeLanguage compositeLanguage;
-    
-
-    private MenuItem aboutMenuItem;
-
-    private MenuItem contentsMenuItem;
-
-    private Menu helpMenu;
-
-    private MenuItem helpMenuItem;
-
-    private MenuItem viewDirectorMenuItem;
-    
-    private MenuItem viewVideoFormatMenuItem,viewActorMenuItem,viewGenreMenuItem;
-    private MenuItem viewSubtitleMenuItem,viewLanguageMenuItem,viewStatusMenuItem;
-    private MenuItem viewConditionMenuItem,viewMovieMenuItem,viewDvdMenuItem, viewBillMenuItem;
-    
-
-    private Shell shell;
-
-    private Display display;
-
-    private Menu viewMenu;
-
-    private MenuItem viewMenuItem;
-
-    private MenuItem exitMenuItem;
-
-    private MenuItem closeFileMenuItem;
-
-    private MenuItem saveFileMenuItem;
-
-    private MenuItem newFileMenuItem;
-
-    private MenuItem openFileMenuItem;
-
-    private Menu fileMenu;
-
-    private MenuItem fileMenuItem;
-
-    private Menu rootMenu;
-
-    private TableColumn tableColumn6;
-
-    private TableColumn tableColumn5;
-
-    private TableColumn tableColumn4;
-
-    private StatusLineStyledText statusLine;
-
-    private Composite compositeStatusLine;
-
-    private Composite compositeMain;
-
-    private Composite compositeRoot;
-
-    private Text textVideoFormatId;
-
-    /**
-     * Bundle for multilanguage
-     */
-    private ResourceBundle l;
-    
-    private Locale locale ;
-
-    /**
-     * Auto-generated main method to display this
-     * org.eclipse.swt.widgets.Composite inside a new Shell.
-     */
-    public static void main(String[] args) {
-        ManagementGui inst = new ManagementGui();
-        inst.run();
-    }
-
-
-    public void run() {
-        shell.layout();
-        shell.open();
-        while (!shell.isDisposed()) {
-            if (!display.readAndDispatch())
-                display.sleep();
-        }
-    }
-
-    public ManagementGui() {
-
-        if (logger.isDebugEnabled()) {
-            logger.debug("ManagementGui() Locale: " + Locale.getDefault());
-        }
-        
-        locale = Locale.getDefault();
-        
-        
-        l = PropertyResourceBundle.getBundle(
-                "de.hsharz.provirent.managment.gui.language.main", locale);
-
-        //@todo hier muss noch was gemacht werden
-        if (l == null) {
-            System.exit(-1586);
-        }
-
-        display = Display.getDefault();
-
-        shell = new Shell(display);
-        shell.setText(l.getString("mainwindow.title"));
-
-        //set the Site
-        shell.setSize(476, 216);
-
-        {
-            //Register as a resource user - SWTResourceManager will
-            //handle the obtaining and disposing of resources
-            SWTResourceManager.registerResourceUser(shell);
-        }
-        //set the layout for the shell
-        FillLayout thisLayout = new FillLayout(SWT.HORIZONTAL);
-        shell.setLayout(thisLayout);
-        
-       
-
-        //init the db, so it saves time later
-        //does that in a new Thread
-        initDB();
-        
-        //init the rest
-        initGUI();
-        
-        //shell.layout();
-
-    }
-
-    private void initGUI() {
-        try {
-
-            //set't the menu
-            rootMenu = new Menu(shell, SWT.BAR);
-            shell.setMenuBar(rootMenu);
-
-            //init the other menu's
-            initFileMenu();
-            initViewMenu();
-            initHelpMenu();
-
-            //the root composite
-            //this init's the maincomposite
-            //set up the root composite incl. layout
-            compositeRoot = new Composite(shell, SWT.NONE);
-            GridLayout composite1Layout = new GridLayout();
-            composite1Layout.marginWidth = 0;
-            composite1Layout.marginHeight = 0;
-            composite1Layout.horizontalSpacing = 0;
-            composite1Layout.verticalSpacing = 0;
-            GridData composite1LData = new GridData();
-            compositeRoot.setLayout(composite1Layout);
-
-            composite1LData.verticalAlignment = GridData.FILL;
-            composite1LData.horizontalAlignment = GridData.FILL;
-            composite1LData.grabExcessHorizontalSpace = true;
-            composite1LData.grabExcessVerticalSpace = true;
-            compositeRoot.setLayoutData(composite1LData);
-
-            //init the MainComposite
-
-           compositeMain = new Composite(compositeRoot, SWT.EMBEDDED);
-            GridLayout composite3Layout = new GridLayout();
-            composite3Layout.makeColumnsEqualWidth = true;
-            composite3Layout.horizontalSpacing = 0;
-            composite3Layout.marginHeight = 0;
-            composite3Layout.marginWidth = 0;
-            composite3Layout.verticalSpacing = 0;
-            GridData composite3LData = new GridData();
-            compositeMain.setLayout(composite3Layout);
-            compositeMain.setForeground(SWTResourceManager.getColor(0,
-                    255, 0));
-            composite3LData.verticalAlignment = GridData.FILL;
-            composite3LData.horizontalAlignment = GridData.FILL;
-            composite3LData.grabExcessHorizontalSpace = true;
-            composite3LData.grabExcessVerticalSpace = true;
-            compositeMain.setLayoutData(composite3LData);
-        
-            
-            //init Status Composite
-            compositeStatusLine = new Composite(compositeRoot, SWT.EMBEDDED);
-            GridLayout composite2Layout = new GridLayout();
-            composite2Layout.marginWidth = 0;
-            composite2Layout.marginHeight = 0;
-            composite2Layout.makeColumnsEqualWidth = true;
-            composite2Layout.horizontalSpacing = 0;
-            composite2Layout.verticalSpacing = 0;
-            GridData composite2LData = new GridData();
-            compositeStatusLine.setLayout(composite2Layout);
-            composite2LData.horizontalAlignment = GridData.FILL;
-            composite2LData.heightHint = 14;
-            composite2LData.grabExcessHorizontalSpace = true;
-            compositeStatusLine.setLayoutData(composite2LData);
-
-            //StatusLine
-            initStatusLine();
-            
-            //tabFolder
-            cTabFolderMain = new CTabFolder(compositeMain, SWT.CLOSE);
-            
-            GridData cTabFolder1LData = new GridData();
-            cTabFolder1LData.grabExcessHorizontalSpace = true;
-            cTabFolder1LData.horizontalAlignment = GridData.FILL;
-            cTabFolder1LData.grabExcessVerticalSpace = true;
-            cTabFolder1LData.verticalAlignment = GridData.FILL;
-            cTabFolderMain.setLayoutData(cTabFolder1LData);
-
-            initFormatTab();
-
-        } catch (Exception e) {
-            e.printStackTrace();
-        }
-    }    
-    
-    
-    /**
-     * init the File menu
-     */
-    private void initFileMenu() {
-        if (rootMenu == null) {
-            return;
-            /**
-             * @todo hier muesste eigentlich eine Exception geworfen werden, da
-             *       null nich ein darf
-             */
-        }
-        fileMenuItem = new MenuItem(rootMenu, SWT.CASCADE);
-        fileMenuItem.setText(l.getString("menu.file"));
-        fileMenu = new Menu(fileMenuItem);
-        fileMenuItem.setMenu(fileMenu);
-
-        openFileMenuItem = new MenuItem(fileMenu, SWT.CASCADE);
-        openFileMenuItem.setText(l.getString("menu.file.open"));
-
-        newFileMenuItem = new MenuItem(fileMenu, SWT.CASCADE);
-        newFileMenuItem.setText(l.getString("menu.file.new"));
-
-        saveFileMenuItem = new MenuItem(fileMenu, SWT.CASCADE);
-        saveFileMenuItem.setText(l.getString("menu.file.save"));
-
-        closeFileMenuItem = new MenuItem(fileMenu, SWT.CASCADE);
-        closeFileMenuItem.setText(l.getString("menu.file.close"));
-
-        exitMenuItem = new MenuItem(fileMenu, SWT.CASCADE);
-        exitMenuItem.setText(l.getString("menu.file.exit"));
-
-    }
-
-    /**
-     * init the View Menu
-     */
-    private void initViewMenu() {
-        if (rootMenu == null) {
-            return;
-            /**
-             * @todo hier muesste eigentlich eine Exception geworfen werden, da
-             *       null nich ein darf
-             */
-        }
-
-        viewMenuItem = new MenuItem(rootMenu, SWT.CASCADE);
-        viewMenuItem.setText(l.getString("menu.view"));
-
-        viewMenu = new Menu(viewMenuItem);
-        viewMenuItem.setMenu(viewMenu);
-
-        viewVideoFormatMenuItem = new MenuItem(viewMenu, SWT.CHECK);
-        viewVideoFormatMenuItem.setText(l.getString("menu.view.format"));
-        viewVideoFormatMenuItem.setSelection(true);
-        viewVideoFormatMenuItem.addSelectionListener(new SelectionAdapter() {
-            public void widgetSelected(SelectionEvent evt) {
-				if(tabItemFormat == null || tabItemFormat.isDisposed()){
-				    initFormatTab();
-				 return;   
-				}
-				
-				cTabFolderMain.setSelection(tabItemFormat);
-				viewVideoFormatMenuItem.setSelection(true);
-            
-            }
-        });
-
-        viewDirectorMenuItem = new MenuItem(viewMenu, SWT.CHECK);
-        viewDirectorMenuItem.setText(l.getString("menu.view.director"));
-        viewDirectorMenuItem.setSelection(false);
-        viewDirectorMenuItem.addSelectionListener(new SelectionAdapter() {
-            public void widgetSelected(SelectionEvent evt) {
-				if(tabItemDirector == null || tabItemDirector.isDisposed()){
-				    initDirectorTab();
-				    return;   
-				}
-				
-				cTabFolderMain.setSelection(tabItemDirector);
-				viewDirectorMenuItem.setSelection(true);
-            
-            }
-        });        
-
-        viewActorMenuItem = new MenuItem(viewMenu, SWT.CHECK);
-        viewActorMenuItem.setText(l.getString("menu.view.actor"));
-        viewActorMenuItem.setSelection(false);
-        viewActorMenuItem.addSelectionListener(new SelectionAdapter() {
-            public void widgetSelected(SelectionEvent evt) {
-				if(tabItemActor == null || tabItemActor.isDisposed()){
-				    initActorTab();
-				    return;   
-				}
-				
-				cTabFolderMain.setSelection(tabItemActor);
-				viewActorMenuItem.setSelection(true);
-            
-            }
-        });         
-        
-        viewGenreMenuItem = new MenuItem(viewMenu, SWT.CHECK);
-        viewGenreMenuItem.setText(l.getString("menu.view.genre"));
-        viewGenreMenuItem.setSelection(false);
-        viewGenreMenuItem.addSelectionListener(new SelectionAdapter() {
-            public void widgetSelected(SelectionEvent evt) {
-				if(tabItemGenre == null || tabItemGenre.isDisposed()){
-				    initGenreTab();
-				    return;   
-				}
-				
-				cTabFolderMain.setSelection(tabItemGenre);
-				viewGenreMenuItem.setSelection(true);
-            
-            }
-        }); 
-
-        viewLanguageMenuItem = new MenuItem(viewMenu, SWT.CHECK);
-        viewLanguageMenuItem.setText(l.getString("menu.view.language"));
-        viewLanguageMenuItem.setSelection(false);
-        viewLanguageMenuItem.addSelectionListener(new SelectionAdapter() {
-            public void widgetSelected(SelectionEvent evt) {
-				if(tabItemLanguage == null || tabItemLanguage.isDisposed()){
-				    initLanguageTab();
-				    return;   
-				}
-				
-				cTabFolderMain.setSelection(tabItemLanguage);
-				viewGenreMenuItem.setSelection(true);
-            
-            }
-        });         
-
-        viewSubtitleMenuItem = new MenuItem(viewMenu, SWT.CHECK);
-        viewSubtitleMenuItem.setText(l.getString("menu.view.subtitle"));
-        viewSubtitleMenuItem.setSelection(false);        
-        
-        viewStatusMenuItem = new MenuItem(viewMenu, SWT.CHECK);
-        viewStatusMenuItem.setText(l.getString("menu.view.status"));
-        viewStatusMenuItem.setSelection(false);
-
-        viewConditionMenuItem = new MenuItem(viewMenu, SWT.CHECK);
-        viewConditionMenuItem.setText(l.getString("menu.view.condition"));
-        viewConditionMenuItem.setSelection(false);
-
-        viewMovieMenuItem = new MenuItem(viewMenu, SWT.CHECK);
-        viewMovieMenuItem.setText(l.getString("menu.view.movie"));
-        viewMovieMenuItem.setSelection(false);
-
-        viewDvdMenuItem = new MenuItem(viewMenu, SWT.CHECK);
-        viewDvdMenuItem.setText(l.getString("menu.view.dvd"));
-        viewDvdMenuItem.setSelection(false);
-
-        viewBillMenuItem = new MenuItem(viewMenu, SWT.CHECK);
-        viewBillMenuItem.setText(l.getString("menu.view.bill"));
-        viewBillMenuItem.setSelection(false);
-
-    }
-
-    /**
-     * init the help menu
-     */
-    private void initHelpMenu() {
-        if (rootMenu == null) {
-            throw new GuiInitException();
-        }
-        helpMenuItem = new MenuItem(rootMenu, SWT.CASCADE);
-        helpMenuItem.setText(l.getString("menu.help"));
-        {
-            helpMenu = new Menu(helpMenuItem);
-            helpMenuItem.setMenu(helpMenu);
-            {
-                contentsMenuItem = new MenuItem(helpMenu, SWT.CASCADE);
-            }
-            {
-                aboutMenuItem = new MenuItem(helpMenu, SWT.CASCADE);
-            }
-        }
-
-    }
-   
-    
-    
-    
-    private void initFormatTab() {
-        tabItemFormat = new CTabItem(cTabFolderMain, SWT.NONE);
-        tabItemFormat.setText(l.getString("tab.format.title"));
-        
-        {
-            compositeFormate = new CompositeFormate(
-                cTabFolderMain,
-                SWT.NONE, statusLine, locale);
-            
-            tabItemFormat.setControl(compositeFormate);
-        }
-        
-    }
-    
-    
-    private void initDirectorTab() {
-        tabItemDirector = new CTabItem(cTabFolderMain, SWT.NONE);
-        tabItemDirector.setText(l.getString("tab.director.title"));
-      
-        {
-            compositeDirector = new CompositeDirectors(
-                cTabFolderMain,
-                SWT.NONE, statusLine, locale);
-            
-            tabItemDirector.setControl(compositeDirector);
-        }
-        
-    }    
-    
-    private void initActorTab() {
-        tabItemActor = new CTabItem(cTabFolderMain, SWT.NONE);
-        tabItemActor.setText(l.getString("tab.actor.title"));
-  
-        {
-            compositeActor = new CompositeActors(
-                cTabFolderMain,
-                SWT.NONE, statusLine, locale);
-            
-            tabItemActor.setControl(compositeActor);
-        }
-        
-    }
-
-    private void initGenreTab() {
-        tabItemGenre = new CTabItem(cTabFolderMain, SWT.NONE);
-        tabItemGenre.setText(l.getString("tab.genre.title"));
-        
-  
-        {
-            compositeGenre = new CompositeGenre(
-                cTabFolderMain,
-                SWT.NONE, statusLine, locale);
-            
-            tabItemGenre.setControl(compositeGenre);
-        }
-        
-    }
-
-    private void initLanguageTab() {
-        tabItemLanguage = new CTabItem(cTabFolderMain, SWT.NONE);
-        tabItemLanguage.setText(l.getString("tab.language.title"));
-     
-        {
-            compositeLanguage = new CompositeLanguage(
-                cTabFolderMain,
-                SWT.NONE, statusLine, locale);
-            
-            tabItemLanguage.setControl(compositeLanguage);
-        }
-    }    
-    
-    private void initStatusLine() {
-        statusLine = new StatusLineStyledText(compositeStatusLine, SWT.READ_ONLY);
-        statusLine.setText("");
-        statusLine
-                .setToolTipText("Hier finden Sie wichtige Statusinformationen");
-        statusLine.setBackground(ColorDef.STATUS_B_STANDARD);
-        statusLine.setForeground(ColorDef.STATUS_F_STANDARD);
-        statusLine.setDoubleClickEnabled(false);
-        statusLine.setEditable(false);
-        statusLine.setEnabled(true);
-        GridData styledText1LData = new GridData();
-
-        styledText1LData.horizontalAlignment = GridData.FILL;
-        styledText1LData.grabExcessHorizontalSpace = true;
-        statusLine.setLayoutData(styledText1LData);
-    }
-
-    /**
-     * Sets a message for the Statusline
-     * 
-     * @param mode
-     * @param message
-     */
-    private void setStatus(final int mode, final String message) {
-        /**
-         * mode values 0 normal message 1 information message 2 warn message 3
-         * error message
-         *  
-         */
-        if (mode == 0) {
-            statusLine.setBackground(ColorDef.STATUS_B_STANDARD);
-            statusLine.setForeground(ColorDef.STATUS_F_STANDARD);
-        } else if (mode == 1) {
-            statusLine.setBackground(ColorDef.STATUS_B_INFO);
-            statusLine.setForeground(ColorDef.STATUS_F_INFO);
-        } else if (mode == 2) {
-            statusLine.setBackground(ColorDef.STATUS_B_WARN);
-            statusLine.setForeground(ColorDef.STATUS_F_WARN);
-        } else if (mode == 3) {
-            statusLine.setBackground(ColorDef.STATUS_B_ERROR);
-            statusLine.setForeground(ColorDef.STATUS_F_ERROR);
-        }
-
-        statusLine.setText(message);
-
-		new Thread() {
-			public void run() {
-				
-				try {Thread.sleep (1000 *5);} catch (Throwable th) {}
-					if (display.isDisposed()) return;
-					display.asyncExec(new Runnable() {
-						public void run() {
-				            statusLine.setBackground(ColorDef.STATUS_B_STANDARD);
-				            statusLine.setForeground(ColorDef.STATUS_F_STANDARD);
-						}
-					});
-				
-			}
-		}.start();
-
-    }
-
-    private void initDB(){
-        
-		new Thread() {
-			public void run() {
-			    Database.initDB();
-			}
-		}.start();
-
-    }
-        
-    
-    
-}
\ No newline at end of file

Copied: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java (from rev 105, project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/ManagementGui.java)
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/ManagementGui.java	2004-11-10 00:28:00 UTC (rev 105)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java	2004-11-10 00:46:32 UTC (rev 107)
@@ -0,0 +1,692 @@
+/*
+ * Created on 11.10.2004
+ *
+ * Copyright (c) 2004/2005, Remo Griesch/Stefan Forstner/Philipp Schneider
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * - Redistributions of source code must retain the above copyright notice,
+ * this list of conditions and the following disclaimer.
+ * - Redistributions in binary form must reproduce the above copyright notice,
+ * this list of conditions and the following disclaimer in the documentation
+ * and/or other materials provided with the distribution.
+ * - Neither the name of the Remo Griesch/Stefan Forstner/Philipp Schneider nor
+ * the names of its contributors may be used to endorse or promote products
+ * derived from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+package de.hsharz.provirent.management.gui;
+
+
+import java.util.Locale;
+import java.util.PropertyResourceBundle;
+import java.util.ResourceBundle;
+
+import org.apache.log4j.Logger;
+import org.eclipse.swt.SWT;
+import org.eclipse.swt.custom.CTabFolder;
+import org.eclipse.swt.custom.CTabItem;
+import org.eclipse.swt.events.SelectionAdapter;
+import org.eclipse.swt.events.SelectionEvent;
+import org.eclipse.swt.layout.FillLayout;
+import org.eclipse.swt.layout.GridData;
+import org.eclipse.swt.layout.GridLayout;
+import org.eclipse.swt.widgets.Composite;
+import org.eclipse.swt.widgets.Display;
+import org.eclipse.swt.widgets.Menu;
+import org.eclipse.swt.widgets.MenuItem;
+import org.eclipse.swt.widgets.Shell;
+import org.eclipse.swt.widgets.TableColumn;
+import org.eclipse.swt.widgets.Text;
+
+import com.cloudgarden.resource.SWTResourceManager;
+
+import de.hsharz.provirent.managment.exceptions.GuiInitException;
+import de.hsharz.provirent.persistence.Database;
+
+/**
+* This code was generated using CloudGarden's Jigloo
+* SWT/Swing GUI Builder, which is free for non-commercial
+* use. If Jigloo is being used commercially (ie, by a corporation,
+* company or business for any purpose whatever) then you
+* should purchase a license for each developer using Jigloo.
+* Please visit www.cloudgarden.com for details.
+* Use of Jigloo implies acceptance of these licensing terms.
+* *************************************
+* A COMMERCIAL LICENSE HAS NOT BEEN PURCHASED
+* for this machine, so Jigloo or this code cannot be used legally
+* for any corporate or commercial purpose.
+* *************************************
+*/
+import org.eclipse.swt.events.DisposeListener;
+import org.eclipse.swt.events.DisposeEvent;
+/**
+ * @author Philipp Schneider
+ *  
+ */
+public class ManagementGui {
+    /**
+     * Logger for this class
+     */
+    private static final Logger logger = Logger.getLogger(ManagementGui.class);
+
+    public final static int MODE_VIEW = 0;
+
+    public final static int MODE_ADD = 1;
+
+    public final static int MODE_EDIT = 2;
+
+    private static final int MAIN_WINDOW_WIDTH = 700;
+
+    private static final int MAIN_WINDOW_HEIGHT = 500;
+
+    private CTabFolder cTabFolderMain;
+
+    private CTabItem tabItemFormat,tabItemActor,tabItemDirector,tabItemLanguage,tabItemGenre;
+
+    private CompositeFormate compositeFormate;
+    private CompositeActors compositeActor;
+    private CompositeDirectors compositeDirector;
+    private CompositeGenre compositeGenre;
+    private CompositeLanguage compositeLanguage;
+    
+
+    private MenuItem aboutMenuItem;
+
+    private MenuItem contentsMenuItem;
+
+    private Menu helpMenu;
+
+    private MenuItem helpMenuItem;
+
+    private MenuItem viewDirectorMenuItem;
+    
+    private MenuItem viewVideoFormatMenuItem,viewActorMenuItem,viewGenreMenuItem;
+    private MenuItem viewSubtitleMenuItem,viewLanguageMenuItem,viewStatusMenuItem;
+    private MenuItem viewConditionMenuItem,viewMovieMenuItem,viewDvdMenuItem, viewBillMenuItem;
+    
+
+    private Shell shell;
+
+    private Display display;
+
+    private Menu viewMenu;
+
+    private MenuItem viewMenuItem;
+
+    private MenuItem exitMenuItem;
+
+    private MenuItem closeFileMenuItem;
+
+    private MenuItem saveFileMenuItem;
+
+    private MenuItem newFileMenuItem;
+
+    private MenuItem openFileMenuItem;
+
+    private Menu fileMenu;
+
+    private MenuItem fileMenuItem;
+
+    private Menu rootMenu;
+
+    private TableColumn tableColumn6;
+
+    private TableColumn tableColumn5;
+
+    private TableColumn tableColumn4;
+
+    private StatusLineStyledText statusLine;
+
+    private Composite compositeStatusLine;
+
+    private Composite compositeMain;
+
+    private Composite compositeRoot;
+
+    private Text textVideoFormatId;
+
+    /**
+     * Bundle for multilanguage
+     */
+    private ResourceBundle l;
+    
+    private Locale locale ;
+
+    /**
+     * Auto-generated main method to display this
+     * org.eclipse.swt.widgets.Composite inside a new Shell.
+     */
+    public static void main(String[] args) {
+        ManagementGui inst = new ManagementGui();
+        inst.run();
+    }
+
+
+    public void run() {
+        shell.layout();
+        shell.open();
+        while (!shell.isDisposed()) {
+            if (!display.readAndDispatch())
+                display.sleep();
+        }
+    }
+
+    public ManagementGui() {
+
+        if (logger.isDebugEnabled()) {
+            logger.debug("ManagementGui() Locale: " + Locale.getDefault());
+        }
+        
+        locale = Locale.getDefault();
+        
+        
+        l = PropertyResourceBundle.getBundle(
+                "de.hsharz.provirent.managment.gui.language.main", locale);
+
+        //@todo hier muss noch was gemacht werden
+        if (l == null) {
+            System.exit(-1586);
+        }
+
+        display = Display.getDefault();
+
+        shell = new Shell(display);
+        shell.setText(l.getString("mainwindow.title"));
+
+        //set the Site
+        shell.setSize(476, 216);
+
+        {
+            //Register as a resource user - SWTResourceManager will
+            //handle the obtaining and disposing of resources
+            SWTResourceManager.registerResourceUser(shell);
+        }
+        //set the layout for the shell
+        FillLayout thisLayout = new FillLayout(SWT.HORIZONTAL);
+        shell.setLayout(thisLayout);
+        
+       
+
+        //init the db, so it saves time later
+        //does that in a new Thread
+        initDB();
+        
+        //init the rest
+        initGUI();
+        
+        //shell.layout();
+
+    }
+
+    private void initGUI() {
+        try {
+
+            //set't the menu
+            rootMenu = new Menu(shell, SWT.BAR);
+            shell.setMenuBar(rootMenu);
+
+            //init the other menu's
+            initFileMenu();
+            initViewMenu();
+            initHelpMenu();
+
+            //the root composite
+            //this init's the maincomposite
+            //set up the root composite incl. layout
+            compositeRoot = new Composite(shell, SWT.NONE);
+            GridLayout composite1Layout = new GridLayout();
+            composite1Layout.marginWidth = 0;
+            composite1Layout.marginHeight = 0;
+            composite1Layout.horizontalSpacing = 0;
+            composite1Layout.verticalSpacing = 0;
+            GridData composite1LData = new GridData();
+            compositeRoot.setLayout(composite1Layout);
+
+            composite1LData.verticalAlignment = GridData.FILL;
+            composite1LData.horizontalAlignment = GridData.FILL;
+            composite1LData.grabExcessHorizontalSpace = true;
+            composite1LData.grabExcessVerticalSpace = true;
+            compositeRoot.setLayoutData(composite1LData);
+
+            //init the MainComposite
+
+           compositeMain = new Composite(compositeRoot, SWT.EMBEDDED);
+            GridLayout composite3Layout = new GridLayout();
+            composite3Layout.makeColumnsEqualWidth = true;
+            composite3Layout.horizontalSpacing = 0;
+            composite3Layout.marginHeight = 0;
+            composite3Layout.marginWidth = 0;
+            composite3Layout.verticalSpacing = 0;
+            GridData composite3LData = new GridData();
+            compositeMain.setLayout(composite3Layout);
+            compositeMain.setForeground(SWTResourceManager.getColor(0,
+                    255, 0));
+            composite3LData.verticalAlignment = GridData.FILL;
+            composite3LData.horizontalAlignment = GridData.FILL;
+            composite3LData.grabExcessHorizontalSpace = true;
+            composite3LData.grabExcessVerticalSpace = true;
+            compositeMain.setLayoutData(composite3LData);
+        
+            
+            //init Status Composite
+            compositeStatusLine = new Composite(compositeRoot, SWT.EMBEDDED);
+            GridLayout composite2Layout = new GridLayout();
+            composite2Layout.marginWidth = 0;
+            composite2Layout.marginHeight = 0;
+            composite2Layout.makeColumnsEqualWidth = true;
+            composite2Layout.horizontalSpacing = 0;
+            composite2Layout.verticalSpacing = 0;
+            GridData composite2LData = new GridData();
+            compositeStatusLine.setLayout(composite2Layout);
+            composite2LData.horizontalAlignment = GridData.FILL;
+            composite2LData.heightHint = 14;
+            composite2LData.grabExcessHorizontalSpace = true;
+            compositeStatusLine.setLayoutData(composite2LData);
+
+            //StatusLine
+            initStatusLine();
+            
+            //tabFolder
+            cTabFolderMain = new CTabFolder(compositeMain, SWT.CLOSE);
+            
+            GridData cTabFolder1LData = new GridData();
+            cTabFolder1LData.grabExcessHorizontalSpace = true;
+            cTabFolder1LData.horizontalAlignment = GridData.FILL;
+            cTabFolder1LData.grabExcessVerticalSpace = true;
+            cTabFolder1LData.verticalAlignment = GridData.FILL;
+            cTabFolderMain.setLayoutData(cTabFolder1LData);
+
+            initFormatTab();
+
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+    }    
+    
+    
+    /**
+     * init the File menu
+     */
+    private void initFileMenu() {
+        if (rootMenu == null) {
+            return;
+            /**
+             * @todo hier muesste eigentlich eine Exception geworfen werden, da
+             *       null nich ein darf
+             */
+        }
+        fileMenuItem = new MenuItem(rootMenu, SWT.CASCADE);
+        fileMenuItem.setText(l.getString("menu.file"));
+        fileMenu = new Menu(fileMenuItem);
+        fileMenuItem.setMenu(fileMenu);
+
+        openFileMenuItem = new MenuItem(fileMenu, SWT.CASCADE);
+        openFileMenuItem.setText(l.getString("menu.file.open"));
+
+        newFileMenuItem = new MenuItem(fileMenu, SWT.CASCADE);
+        newFileMenuItem.setText(l.getString("menu.file.new"));
+
+        saveFileMenuItem = new MenuItem(fileMenu, SWT.CASCADE);
+        saveFileMenuItem.setText(l.getString("menu.file.save"));
+
+        closeFileMenuItem = new MenuItem(fileMenu, SWT.CASCADE);
+        closeFileMenuItem.setText(l.getString("menu.file.close"));
+
+        exitMenuItem = new MenuItem(fileMenu, SWT.CASCADE);
+        exitMenuItem.setText(l.getString("menu.file.exit"));
+
+    }
+
+    /**
+     * init the View Menu
+     */
+    private void initViewMenu() {
+        if (rootMenu == null) {
+            return;
+            /**
+             * @todo hier muesste eigentlich eine Exception geworfen werden, da
+             *       null nich ein darf
+             */
+        }
+
+        viewMenuItem = new MenuItem(rootMenu, SWT.CASCADE);
+        viewMenuItem.setText(l.getString("menu.view"));
+
+        viewMenu = new Menu(viewMenuItem);
+        viewMenuItem.setMenu(viewMenu);
+
+        viewVideoFormatMenuItem = new MenuItem(viewMenu, SWT.CHECK);
+        viewVideoFormatMenuItem.setText(l.getString("menu.view.format"));
+        viewVideoFormatMenuItem.setSelection(true);
+        viewVideoFormatMenuItem.addSelectionListener(new SelectionAdapter() {
+            public void widgetSelected(SelectionEvent evt) {
+				if(tabItemFormat == null || tabItemFormat.isDisposed()){
+				    initFormatTab();
+				 return;   
+				}
+				
+				cTabFolderMain.setSelection(tabItemFormat);
+				viewVideoFormatMenuItem.setSelection(true);
+				cTabFolderMain.showSelection();
+            }
+        });
+
+        viewDirectorMenuItem = new MenuItem(viewMenu, SWT.CHECK);
+        viewDirectorMenuItem.setText(l.getString("menu.view.director"));
+        viewDirectorMenuItem.setSelection(false);
+        viewDirectorMenuItem.addSelectionListener(new SelectionAdapter() {
+            public void widgetSelected(SelectionEvent evt) {
+				if(tabItemDirector == null || tabItemDirector.isDisposed()){
+				    initDirectorTab();
+				    return;   
+				}
+				
+				cTabFolderMain.setSelection(tabItemDirector);
+				viewDirectorMenuItem.setSelection(true);
+				cTabFolderMain.showSelection();
+            }
+        });        
+
+        viewActorMenuItem = new MenuItem(viewMenu, SWT.CHECK);
+        viewActorMenuItem.setText(l.getString("menu.view.actor"));
+        viewActorMenuItem.setSelection(false);
+        viewActorMenuItem.addSelectionListener(new SelectionAdapter() {
+            public void widgetSelected(SelectionEvent evt) {
+				if(tabItemActor == null || tabItemActor.isDisposed()){
+				    initActorTab();
+				    return;   
+				}
+				
+				cTabFolderMain.setSelection(tabItemActor);
+				viewActorMenuItem.setSelection(true);
+				cTabFolderMain.showSelection();
+            
+            }
+        });         
+        
+        viewGenreMenuItem = new MenuItem(viewMenu, SWT.CHECK);
+        viewGenreMenuItem.setText(l.getString("menu.view.genre"));
+        viewGenreMenuItem.setSelection(false);
+        viewGenreMenuItem.addSelectionListener(new SelectionAdapter() {
+            public void widgetSelected(SelectionEvent evt) {
+				if(tabItemGenre == null || tabItemGenre.isDisposed()){
+				    initGenreTab();
+				    return;   
+				}
+				
+				cTabFolderMain.setSelection(tabItemGenre);
+				cTabFolderMain.showSelection();
+				viewGenreMenuItem.setSelection(true);
+            
+            }
+        }); 
+
+        viewLanguageMenuItem = new MenuItem(viewMenu, SWT.CHECK);
+        viewLanguageMenuItem.setText(l.getString("menu.view.language"));
+        viewLanguageMenuItem.setSelection(false);
+        viewLanguageMenuItem.addSelectionListener(new SelectionAdapter() {
+            public void widgetSelected(SelectionEvent evt) {
+				if(tabItemLanguage == null || tabItemLanguage.isDisposed()){
+				    initLanguageTab();
+				    return;   
+				}
+				
+				cTabFolderMain.setSelection(tabItemLanguage);
+				viewGenreMenuItem.setSelection(true);
+				cTabFolderMain.showSelection();
+            }
+        });         
+
+        viewSubtitleMenuItem = new MenuItem(viewMenu, SWT.CHECK);
+        viewSubtitleMenuItem.setText(l.getString("menu.view.subtitle"));
+        viewSubtitleMenuItem.setSelection(false);        
+        
+        viewStatusMenuItem = new MenuItem(viewMenu, SWT.CHECK);
+        viewStatusMenuItem.setText(l.getString("menu.view.status"));
+        viewStatusMenuItem.setSelection(false);
+
+        viewConditionMenuItem = new MenuItem(viewMenu, SWT.CHECK);
+        viewConditionMenuItem.setText(l.getString("menu.view.condition"));
+        viewConditionMenuItem.setSelection(false);
+
+        viewMovieMenuItem = new MenuItem(viewMenu, SWT.CHECK);
+        viewMovieMenuItem.setText(l.getString("menu.view.movie"));
+        viewMovieMenuItem.setSelection(false);
+
+        viewDvdMenuItem = new MenuItem(viewMenu, SWT.CHECK);
+        viewDvdMenuItem.setText(l.getString("menu.view.dvd"));
+        viewDvdMenuItem.setSelection(false);
+
+        viewBillMenuItem = new MenuItem(viewMenu, SWT.CHECK);
+        viewBillMenuItem.setText(l.getString("menu.view.bill"));
+        viewBillMenuItem.setSelection(false);
+
+    }
+
+    /**
+     * init the help menu
+     */
+    private void initHelpMenu() {
+        if (rootMenu == null) {
+            throw new GuiInitException();
+        }
+        helpMenuItem = new MenuItem(rootMenu, SWT.CASCADE);
+        helpMenuItem.setText(l.getString("menu.help"));
+        {
+            helpMenu = new Menu(helpMenuItem);
+            helpMenuItem.setMenu(helpMenu);
+            {
+                contentsMenuItem = new MenuItem(helpMenu, SWT.CASCADE);
+            }
+            {
+                aboutMenuItem = new MenuItem(helpMenu, SWT.CASCADE);
+            }
+        }
+
+    }
+   
+    
+    
+    
+    private void initFormatTab() {
+        tabItemFormat = new CTabItem(cTabFolderMain, SWT.NONE);
+        tabItemFormat.setText(l.getString("tab.format.title"));
+        tabItemFormat.addDisposeListener(new DisposeListener() {
+            public void widgetDisposed(DisposeEvent evt) {
+                System.out
+                    .println("tabItemFormat.widgetDisposed, event=" + evt);
+                viewVideoFormatMenuItem.setSelection(false);
+            }
+        });
+
+        {
+            compositeFormate = new CompositeFormate(
+                cTabFolderMain,
+                SWT.NONE, statusLine, locale);
+            
+            tabItemFormat.setControl(compositeFormate);
+        }
+        
+    }
+    
+    
+    private void initDirectorTab() {
+        tabItemDirector = new CTabItem(cTabFolderMain, SWT.NONE);
+        tabItemDirector.setText(l.getString("tab.director.title"));
+        tabItemDirector.addDisposeListener(new DisposeListener() {
+
+            public void widgetDisposed(DisposeEvent evt) {
+                System.out
+                    .println("tabItemDirector.widgetDisposed, event=" + evt);
+                viewDirectorMenuItem.setSelection(false);
+            }
+            
+        });
+        {
+            compositeDirector = new CompositeDirectors(
+                cTabFolderMain,
+                SWT.NONE, statusLine, locale);
+            
+            tabItemDirector.setControl(compositeDirector);
+        }
+        
+    }    
+    
+    private void initActorTab() {
+        tabItemActor = new CTabItem(cTabFolderMain, SWT.NONE);
+        tabItemActor.setText(l.getString("tab.actor.title"));
+        tabItemActor.addDisposeListener(new DisposeListener() {
+
+            public void widgetDisposed(DisposeEvent evt) {
+                System.out
+                    .println("tabItemActor.widgetDisposed, event=" + evt);
+                viewActorMenuItem.setSelection(false);
+            }
+            
+        });
+        {
+            compositeActor = new CompositeActors(
+                cTabFolderMain,
+                SWT.NONE, statusLine, locale);
+            
+            tabItemActor.setControl(compositeActor);
+        }
+        
+    }
+
+    private void initGenreTab() {
+        tabItemGenre = new CTabItem(cTabFolderMain, SWT.NONE);
+        tabItemGenre.setText(l.getString("tab.genre.title"));
+        tabItemGenre.addDisposeListener(new DisposeListener() {
+
+            public void widgetDisposed(DisposeEvent evt) {
+                System.out
+                    .println("tabItemGenre.widgetDisposed, event=" + evt);
+                viewGenreMenuItem.setSelection(false);
+            }
+            
+        });
+  
+        {
+            compositeGenre = new CompositeGenre(
+                cTabFolderMain,
+                SWT.NONE, statusLine, locale);
+            
+            tabItemGenre.setControl(compositeGenre);
+        }
+        
+    }
+
+    private void initLanguageTab() {
+        tabItemLanguage = new CTabItem(cTabFolderMain, SWT.NONE);
+        tabItemLanguage.setText(l.getString("tab.language.title"));
+        tabItemLanguage.addDisposeListener(new DisposeListener() {
+
+            public void widgetDisposed(DisposeEvent evt) {
+                System.out
+                    .println("tabItemLanguage.widgetDisposed, event=" + evt);
+                viewLanguageMenuItem.setSelection(false);
+            }
+            
+        });
+        {
+            compositeLanguage = new CompositeLanguage(
+                cTabFolderMain,
+                SWT.NONE, statusLine, locale);
+            
+            tabItemLanguage.setControl(compositeLanguage);
+        }
+    }    
+    
+    private void initStatusLine() {
+        statusLine = new StatusLineStyledText(compositeStatusLine, SWT.READ_ONLY);
+        statusLine.setText("");
+        statusLine
+                .setToolTipText("Hier finden Sie wichtige Statusinformationen");
+        statusLine.setBackground(ColorDef.STATUS_B_STANDARD);
+        statusLine.setForeground(ColorDef.STATUS_F_STANDARD);
+        statusLine.setDoubleClickEnabled(false);
+        statusLine.setEditable(false);
+        statusLine.setEnabled(true);
+        GridData styledText1LData = new GridData();
+
+        styledText1LData.horizontalAlignment = GridData.FILL;
+        styledText1LData.grabExcessHorizontalSpace = true;
+        statusLine.setLayoutData(styledText1LData);
+    }
+
+    /**
+     * Sets a message for the Statusline
+     * 
+     * @param mode
+     * @param message
+     */
+    private void setStatus(final int mode, final String message) {
+        /**
+         * mode values 0 normal message 1 information message 2 warn message 3
+         * error message
+         *  
+         */
+        if (mode == 0) {
+            statusLine.setBackground(ColorDef.STATUS_B_STANDARD);
+            statusLine.setForeground(ColorDef.STATUS_F_STANDARD);
+        } else if (mode == 1) {
+            statusLine.setBackground(ColorDef.STATUS_B_INFO);
+            statusLine.setForeground(ColorDef.STATUS_F_INFO);
+        } else if (mode == 2) {
+            statusLine.setBackground(ColorDef.STATUS_B_WARN);
+            statusLine.setForeground(ColorDef.STATUS_F_WARN);
+        } else if (mode == 3) {
+            statusLine.setBackground(ColorDef.STATUS_B_ERROR);
+            statusLine.setForeground(ColorDef.STATUS_F_ERROR);
+        }
+
+        statusLine.setText(message);
+
+		new Thread() {
+			public void run() {
+				
+				try {Thread.sleep (1000 *5);} catch (Throwable th) {}
+					if (display.isDisposed()) return;
+					display.asyncExec(new Runnable() {
+						public void run() {
+				            statusLine.setBackground(ColorDef.STATUS_B_STANDARD);
+				            statusLine.setForeground(ColorDef.STATUS_F_STANDARD);
+						}
+					});
+				
+			}
+		}.start();
+
+    }
+
+    private void initDB(){
+        
+		new Thread() {
+			public void run() {
+			    Database.initDB();
+			}
+		}.start();
+
+    }
+        
+    
+    
+}
\ No newline at end of file

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/StatusLineStyledText.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/managment/gui/StatusLineStyledText.java	2004-11-09 18:21:40 UTC (rev 103)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/StatusLineStyledText.java	2004-11-10 00:46:32 UTC (rev 107)
@@ -30,7 +30,7 @@
  * POSSIBILITY OF SUCH DAMAGE.
  *
  */
-package de.hsharz.provirent.managment.gui;
+package de.hsharz.provirent.management.gui;
 
 import org.eclipse.swt.custom.StyledText;
 import org.eclipse.swt.widgets.Composite;



From sforstner at sheep.berlios.de  Wed Nov 10 01:48:25 2004
From: sforstner at sheep.berlios.de (Stefan at BerliOS)
Date: Wed, 10 Nov 2004 01:48:25 +0100
Subject: [Provirent-svn-commit] r108 - project_src/provirent_hibernate/src/de/hsharz/provirent/objects
Message-ID: <200411100048.iAA0mPBi003729@sheep.berlios.de>

Author: sforstner
Date: 2004-11-10 01:48:08 +0100 (Wed, 10 Nov 2004)
New Revision: 108

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Genre.hbm.xml
   project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Language.hbm.xml
   project_src/provirent_hibernate/src/de/hsharz/provirent/objects/VideoFormat.hbm.xml
Log:
Sequenzen hinzugef?\195?\188gt

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Genre.hbm.xml
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Genre.hbm.xml	2004-11-10 00:46:32 UTC (rev 107)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Genre.hbm.xml	2004-11-10 00:48:08 UTC (rev 108)
@@ -17,7 +17,9 @@
       <id name="genreId" type="int" column="GENREID">
         <meta attribute="scope-set">public</meta>
         <meta attribute="use-in-equals">true</meta>
-        <generator class="native"/>
+        <generator class="sequence">
+			<param name="sequence">genre_id_sequence</param>
+		</generator>
       </id>
  
       <property name="name" type="string" not-null="true">

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Language.hbm.xml
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Language.hbm.xml	2004-11-10 00:46:32 UTC (rev 107)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Language.hbm.xml	2004-11-10 00:48:08 UTC (rev 108)
@@ -17,7 +17,9 @@
       <id name="languageId" type="int" column="LANGUAGEID">
         <meta attribute="scope-set">public</meta>
         <meta attribute="use-in-equals">true</meta>
-        <generator class="native"/>
+        <generator class="sequence">
+			<param name="sequence">language_id_sequence</param>
+		</generator>
       </id>
  
       <property name="name" type="string" not-null="true">

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/objects/VideoFormat.hbm.xml
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/objects/VideoFormat.hbm.xml	2004-11-10 00:46:32 UTC (rev 107)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/objects/VideoFormat.hbm.xml	2004-11-10 00:48:08 UTC (rev 108)
@@ -16,7 +16,9 @@
       <id name="videoFormatId" type="int" column="VIDEOFORMATID">
         <meta attribute="scope-set">public</meta>
         <meta attribute="use-in-equals">true</meta>
-        <generator class="native"/>
+        <generator class="sequence">
+			<param name="sequence" >video_format_id_sequence</param>
+		</generator>
       </id>
  
       <property name="name" type="string" not-null="true">



From sforstner at sheep.berlios.de  Wed Nov 10 01:50:15 2004
From: sforstner at sheep.berlios.de (Stefan at BerliOS)
Date: Wed, 10 Nov 2004 01:50:15 +0100
Subject: [Provirent-svn-commit] r109 - project_src/provirent_hibernate/src/de/hsharz/provirent/persistence
Message-ID: <200411100050.iAA0oFBu003922@sheep.berlios.de>

Author: sforstner
Date: 2004-11-10 01:49:41 +0100 (Wed, 10 Nov 2004)
New Revision: 109

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java
Log:


Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java	2004-11-10 00:48:08 UTC (rev 108)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java	2004-11-10 00:49:41 UTC (rev 109)
@@ -36,7 +36,6 @@
 import java.util.List;
 
 import net.sf.hibernate.Criteria;
-import net.sf.hibernate.Hibernate;
 import net.sf.hibernate.HibernateException;
 import net.sf.hibernate.Session;
 import net.sf.hibernate.Transaction;
@@ -45,7 +44,11 @@
 
 import org.apache.log4j.Logger;
 
-import de.hsharz.provirent.objects.*;
+import de.hsharz.provirent.objects.AudioFormat;
+import de.hsharz.provirent.objects.Director;
+import de.hsharz.provirent.objects.Genre;
+import de.hsharz.provirent.objects.Language;
+import de.hsharz.provirent.objects.VideoFormat;
 
 
 
@@ -243,6 +246,7 @@
                             + "des Objectes:" + o + " Exception: " + e);
                     exception = 1;
                 }
+                
                 s.flush();
                
                 tx.commit();



From sforstner at sheep.berlios.de  Wed Nov 10 01:54:48 2004
From: sforstner at sheep.berlios.de (Stefan at BerliOS)
Date: Wed, 10 Nov 2004 01:54:48 +0100
Subject: [Provirent-svn-commit] r110 - project_src/provirent_hibernate/src/test/provirent/hibernate
Message-ID: <200411100054.iAA0smuj004128@sheep.berlios.de>

Author: sforstner
Date: 2004-11-10 01:54:28 +0100 (Wed, 10 Nov 2004)
New Revision: 110

Modified:
   project_src/provirent_hibernate/src/test/provirent/hibernate/RandomRange.java
   project_src/provirent_hibernate/src/test/provirent/hibernate/TestGenre.java
   project_src/provirent_hibernate/src/test/provirent/hibernate/TestLanguage.java
   project_src/provirent_hibernate/src/test/provirent/hibernate/TestVideoFormat.java
Log:


Modified: project_src/provirent_hibernate/src/test/provirent/hibernate/RandomRange.java
===================================================================
--- project_src/provirent_hibernate/src/test/provirent/hibernate/RandomRange.java	2004-11-10 00:49:41 UTC (rev 109)
+++ project_src/provirent_hibernate/src/test/provirent/hibernate/RandomRange.java	2004-11-10 00:54:28 UTC (rev 110)
@@ -32,8 +32,6 @@
  */
 package test.provirent.hibernate;
 
-import org.apache.log4j.Logger;
-
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;

Modified: project_src/provirent_hibernate/src/test/provirent/hibernate/TestGenre.java
===================================================================
--- project_src/provirent_hibernate/src/test/provirent/hibernate/TestGenre.java	2004-11-10 00:49:41 UTC (rev 109)
+++ project_src/provirent_hibernate/src/test/provirent/hibernate/TestGenre.java	2004-11-10 00:54:28 UTC (rev 110)
@@ -83,7 +83,7 @@
             logger.debug("tearDown() - end");
         }
     }
-
+    /*
     public void testGenre() throws Exception {
         if (logger.isDebugEnabled()) {
             logger.debug("testCreating() - start");
@@ -103,15 +103,23 @@
                 //cretae new objects
                 List Genres = new ArrayList();
 
-                Genre myd1 = new Genre("Action","");
-                Genre myd2 = new Genre("Abenteuer","");
-                Genre myd3 = new Genre("Dokumentation","");
-                Genre myd4 = new Genre("Horror","");
+                Genre myd1 = null;
+                Genre myd2 = null;
+                Genre myd3 = null;
+                Genre myd4 = null;
+                
+                s.clear();
 
-                Genres.add(myd1);
-                Genres.add(myd2);
-                Genres.add(myd3);
-                Genres.add(myd4);
+                for (int i = 1; i <= 10; i++) {
+                    myd1 = new Genre("Action","");
+                    myd2 = new Genre("Abenteuer","");
+                    myd3 = new Genre("Dokumentation","");
+                    myd4 = new Genre("Horror","");
+                    Genres.add(myd1);
+                    Genres.add(myd2);
+                    Genres.add(myd3);
+                    Genres.add(myd4);
+                }             
                 
 
                 List ids = new ArrayList();
@@ -195,7 +203,7 @@
         if (logger.isDebugEnabled()) {
             logger.debug("testCreating() - end");
         }
-    }
+    }*/
 
     public void testSaveGenre() throws Exception {
         if (logger.isDebugEnabled()) {

Modified: project_src/provirent_hibernate/src/test/provirent/hibernate/TestLanguage.java
===================================================================
--- project_src/provirent_hibernate/src/test/provirent/hibernate/TestLanguage.java	2004-11-10 00:49:41 UTC (rev 109)
+++ project_src/provirent_hibernate/src/test/provirent/hibernate/TestLanguage.java	2004-11-10 00:54:28 UTC (rev 110)
@@ -43,7 +43,6 @@
 import org.apache.log4j.Logger;
 
 import de.hsharz.provirent.objects.Language;
-import de.hsharz.provirent.objects.Subtitle;
 
 /**
  * @author Philipp Schneider
@@ -85,7 +84,7 @@
         }
     }
 
-    public void testLanguage() throws Exception {
+    /*public void testLanguage() throws Exception {
         if (logger.isDebugEnabled()) {
             logger.debug("testCreating() - start");
         }
@@ -104,17 +103,23 @@
                 //cretae new objects
                 List Languages = new ArrayList();
 
-                Language myd1 = new Language("Deutsch", "de");
-                Language myd2 = new Language("Englisch", "en");
-                Language myd3 = new Language("Franzoesisch", "fr");
-                Language myd4 = new Language("Spanisch", "es");
-                Language myd5 = new Language("Japanisch", "jp");  
+                Language myd1 = null;
+                Language myd2 = null;
+                Language myd3 = null;
+                Language myd4 = null;
+                
+                s.clear();
 
-                Languages.add(myd1);
-                Languages.add(myd2);
-                Languages.add(myd3);
-                Languages.add(myd4);
-                Languages.add(myd5);
+                for (int i = 1; i <= 10; i++) {
+                    myd1 = new Language("Action","");
+                    myd2 = new Language("Abenteuer","");
+                    myd3 = new Language("Dokumentation","");
+                    myd4 = new Language("Horror","");
+                    Languages.add(myd1);
+                    Languages.add(myd2);
+                    Languages.add(myd3);
+                    Languages.add(myd4);
+                }
 
                 List ids = new ArrayList();
 
@@ -198,7 +203,7 @@
         if (logger.isDebugEnabled()) {
             logger.debug("testCreating() - end");
         }
-    }
+    }*/
 
     public void testSaveLanguage() throws Exception {
         if (logger.isDebugEnabled()) {

Modified: project_src/provirent_hibernate/src/test/provirent/hibernate/TestVideoFormat.java
===================================================================
--- project_src/provirent_hibernate/src/test/provirent/hibernate/TestVideoFormat.java	2004-11-10 00:49:41 UTC (rev 109)
+++ project_src/provirent_hibernate/src/test/provirent/hibernate/TestVideoFormat.java	2004-11-10 00:54:28 UTC (rev 110)
@@ -84,7 +84,7 @@
         }
     }
 
-    public void testVideoFormat() throws Exception {
+    /*public void testVideoFormat() throws Exception {
         if (logger.isDebugEnabled()) {
             logger.debug("testCreating() - start");
         }
@@ -102,14 +102,23 @@
 
                 //cretae new objects
                 List VideoFormats = new ArrayList();
-
-                VideoFormat myd1 = new VideoFormat("2.35:1","");
-                VideoFormat myd2 = new VideoFormat("9:13","");
-                VideoFormat myd3 = new VideoFormat("16:10", "");
                 
+                VideoFormat myd1 = null;
+                VideoFormat myd2 = null;
+                VideoFormat myd3 = null;
+                
+                myd1 = new VideoFormat("2.35:1","");
+                myd2 = new VideoFormat("9:13","");
+                myd3 = new VideoFormat("16:10", "");
+                
+                s.clear();
+                
+                
+                    
                 VideoFormats.add(myd1);
                 VideoFormats.add(myd2);
                 VideoFormats.add(myd3);
+     
 
 
                 List ids = new ArrayList();
@@ -191,7 +200,7 @@
         if (logger.isDebugEnabled()) {
             logger.debug("testCreating() - end");
         }
-    }
+    }*/
 
     public void testSaveVideoFormat() throws Exception {
         if (logger.isDebugEnabled()) {
@@ -222,13 +231,14 @@
                 
 
                 List ids = new ArrayList();
-
+                
                 //save objects
                 for (Iterator iter = VideoFormats.iterator(); iter.hasNext();) {
                     VideoFormat dir = (VideoFormat) iter.next();
                     ids.add((Integer) s.save(dir));
 
                 }
+                
                 s.flush();
 
                 tx.commit();



From sforstner at sheep.berlios.de  Wed Nov 10 01:55:57 2004
From: sforstner at sheep.berlios.de (Stefan at BerliOS)
Date: Wed, 10 Nov 2004 01:55:57 +0100
Subject: [Provirent-svn-commit] r111 - project_src/provirent_hibernate/src
Message-ID: <200411100055.iAA0tvKe004208@sheep.berlios.de>

Author: sforstner
Date: 2004-11-10 01:55:35 +0100 (Wed, 10 Nov 2004)
New Revision: 111

Modified:
   project_src/provirent_hibernate/src/hibernate.properties
Log:
Auf Firebird umgestellt

Modified: project_src/provirent_hibernate/src/hibernate.properties
===================================================================
--- project_src/provirent_hibernate/src/hibernate.properties	2004-11-10 00:54:28 UTC (rev 110)
+++ project_src/provirent_hibernate/src/hibernate.properties	2004-11-10 00:55:35 UTC (rev 111)
@@ -1,6 +1,6 @@
-hibernate.dialect=net.sf.hibernate.dialect.HSQLDialect
-hibernate.connection.driver_class=org.hsqldb.jdbcDriver
-hibernate.connection.url=jdbc:hsqldb:data/video
-hibernate.connection.username=sa
-hibernate.connection.password=
+hibernate.dialect=net.sf.hibernate.dialect.FirebirdDialect
+hibernate.connection.driver_class=org.firebirdsql.jdbc.FBDriver
+hibernate.connection.url=jdbc:firebirdsql:localhost:c:/video
+hibernate.connection.username=SYSDBA
+hibernate.connection.password=masterkey
 hibernate.jdbc.use_streams_for_binary=true
\ No newline at end of file



From sforstner at sheep.berlios.de  Wed Nov 10 01:58:44 2004
From: sforstner at sheep.berlios.de (Stefan at BerliOS)
Date: Wed, 10 Nov 2004 01:58:44 +0100
Subject: [Provirent-svn-commit] r112 - project_src/provirent_hibernate/src/de/hsharz/provirent
Message-ID: <200411100058.iAA0wi34004747@sheep.berlios.de>

Author: sforstner
Date: 2004-11-10 01:58:18 +0100 (Wed, 10 Nov 2004)
New Revision: 112

Removed:
   project_src/provirent_hibernate/src/de/hsharz/provirent/managment/
Log:




From sforstner at sheep.berlios.de  Wed Nov 10 02:02:07 2004
From: sforstner at sheep.berlios.de (Stefan at BerliOS)
Date: Wed, 10 Nov 2004 02:02:07 +0100
Subject: [Provirent-svn-commit] r113 - project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui
Message-ID: <200411100102.iAA127F1005237@sheep.berlios.de>

Author: sforstner
Date: 2004-11-10 02:01:37 +0100 (Wed, 10 Nov 2004)
New Revision: 113

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeActors.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeDirectors.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java
Log:


Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeActors.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeActors.java	2004-11-10 00:58:18 UTC (rev 112)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeActors.java	2004-11-10 01:01:37 UTC (rev 113)
@@ -6,17 +6,15 @@
 
 import org.apache.log4j.Logger;
 import org.eclipse.swt.SWT;
+import org.eclipse.swt.layout.GridData;
 import org.eclipse.swt.layout.GridLayout;
-import org.eclipse.swt.widgets.Button;
 import org.eclipse.swt.widgets.Composite;
 import org.eclipse.swt.widgets.Display;
+import org.eclipse.swt.widgets.Group;
 import org.eclipse.swt.widgets.Shell;
+import org.eclipse.swt.widgets.Text;
 
-
-import org.eclipse.swt.widgets.Group;
-import org.eclipse.swt.layout.GridData;
 import com.cloudgarden.resource.SWTResourceManager;
-import org.eclipse.swt.widgets.Text;
 /**
 * This code was generated using CloudGarden's Jigloo
 * SWT/Swing GUI Builder, which is free for non-commercial

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeDirectors.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeDirectors.java	2004-11-10 00:58:18 UTC (rev 112)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeDirectors.java	2004-11-10 01:01:37 UTC (rev 113)
@@ -6,16 +6,14 @@
 
 import org.apache.log4j.Logger;
 import org.eclipse.swt.SWT;
+import org.eclipse.swt.layout.GridData;
 import org.eclipse.swt.layout.GridLayout;
-import org.eclipse.swt.widgets.Button;
 import org.eclipse.swt.widgets.Composite;
 import org.eclipse.swt.widgets.Display;
-import org.eclipse.swt.widgets.Shell;
-
-
 import org.eclipse.swt.widgets.Group;
-import org.eclipse.swt.layout.GridData;
+import org.eclipse.swt.widgets.Shell;
 import org.eclipse.swt.widgets.Text;
+
 import com.cloudgarden.resource.SWTResourceManager;
 /**
 * This code was generated using CloudGarden's Jigloo

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java	2004-11-10 00:58:18 UTC (rev 112)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java	2004-11-10 01:01:37 UTC (rev 113)
@@ -42,6 +42,8 @@
 import org.eclipse.swt.SWT;
 import org.eclipse.swt.custom.CTabFolder;
 import org.eclipse.swt.custom.CTabItem;
+import org.eclipse.swt.events.DisposeEvent;
+import org.eclipse.swt.events.DisposeListener;
 import org.eclipse.swt.events.SelectionAdapter;
 import org.eclipse.swt.events.SelectionEvent;
 import org.eclipse.swt.layout.FillLayout;
@@ -57,26 +59,9 @@
 
 import com.cloudgarden.resource.SWTResourceManager;
 
-import de.hsharz.provirent.managment.exceptions.GuiInitException;
+import de.hsharz.provirent.management.exceptions.GuiInitException;
 import de.hsharz.provirent.persistence.Database;
-
 /**
-* This code was generated using CloudGarden's Jigloo
-* SWT/Swing GUI Builder, which is free for non-commercial
-* use. If Jigloo is being used commercially (ie, by a corporation,
-* company or business for any purpose whatever) then you
-* should purchase a license for each developer using Jigloo.
-* Please visit www.cloudgarden.com for details.
-* Use of Jigloo implies acceptance of these licensing terms.
-* *************************************
-* A COMMERCIAL LICENSE HAS NOT BEEN PURCHASED
-* for this machine, so Jigloo or this code cannot be used legally
-* for any corporate or commercial purpose.
-* *************************************
-*/
-import org.eclipse.swt.events.DisposeListener;
-import org.eclipse.swt.events.DisposeEvent;
-/**
  * @author Philipp Schneider
  *  
  */



From sforstner at sheep.berlios.de  Wed Nov 10 02:03:15 2004
From: sforstner at sheep.berlios.de (Stefan at BerliOS)
Date: Wed, 10 Nov 2004 02:03:15 +0100
Subject: [Provirent-svn-commit] r114 - project_src/provirent_hibernate
Message-ID: <200411100103.iAA13FcB005272@sheep.berlios.de>

Author: sforstner
Date: 2004-11-10 02:02:52 +0100 (Wed, 10 Nov 2004)
New Revision: 114

Modified:
   project_src/provirent_hibernate/.classpath
Log:


Modified: project_src/provirent_hibernate/.classpath
===================================================================
--- project_src/provirent_hibernate/.classpath	2004-11-10 01:01:37 UTC (rev 113)
+++ project_src/provirent_hibernate/.classpath	2004-11-10 01:02:52 UTC (rev 114)
@@ -42,5 +42,6 @@
 	<classpathentry sourcepath="ECLIPSE_HOME/plugins/org.eclipse.platform.source.win32.win32.x86_3.0.1/src/org.eclipse.swt.win32_3.0.1/ws/win32/swtsrc.zip" kind="var" path="ECLIPSE_HOME/plugins/org.eclipse.swt.win32_3.0.1/ws/win32/swt.jar"/>
 	<classpathentry kind="lib" path="lib/activation.jar"/>
 	<classpathentry kind="lib" path="lib/mail.jar"/>
+	<classpathentry kind="lib" path="C:/Schule/Projektarbeit/provirent/project_src/provirent_hibernate/lib/firebirdsql.jar"/>
 	<classpathentry kind="output" path="bin"/>
 </classpath>



From sforstner at sheep.berlios.de  Wed Nov 10 02:04:48 2004
From: sforstner at sheep.berlios.de (Stefan at BerliOS)
Date: Wed, 10 Nov 2004 02:04:48 +0100
Subject: [Provirent-svn-commit] r115 - project_src/provirent_hibernate/lib
Message-ID: <200411100104.iAA14mfQ005340@sheep.berlios.de>

Author: sforstner
Date: 2004-11-10 02:04:25 +0100 (Wed, 10 Nov 2004)
New Revision: 115

Added:
   project_src/provirent_hibernate/lib/firebirdsql.jar
Log:


Added: project_src/provirent_hibernate/lib/firebirdsql.jar
===================================================================
(Binary files differ)


Property changes on: project_src/provirent_hibernate/lib/firebirdsql.jar
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream



From sforstner at sheep.berlios.de  Wed Nov 10 02:07:20 2004
From: sforstner at sheep.berlios.de (Stefan at BerliOS)
Date: Wed, 10 Nov 2004 02:07:20 +0100
Subject: [Provirent-svn-commit] r116 - project_src/provirent_hibernate/data
Message-ID: <200411100107.iAA17Kmv005518@sheep.berlios.de>

Author: sforstner
Date: 2004-11-10 02:06:58 +0100 (Wed, 10 Nov 2004)
New Revision: 116

Modified:
   project_src/provirent_hibernate/data/video.properties
Log:


Modified: project_src/provirent_hibernate/data/video.properties
===================================================================
--- project_src/provirent_hibernate/data/video.properties	2004-11-10 01:04:25 UTC (rev 115)
+++ project_src/provirent_hibernate/data/video.properties	2004-11-10 01:06:58 UTC (rev 116)
@@ -1,5 +1,9 @@
 #HSQL database
+<<<<<<< .mine
+#Tue Nov 09 21:21:29 CET 2004
+=======
 #Wed Nov 03 22:40:53 CET 2004
+>>>>>>> .r115
 hsqldb.cache_file_scale=1
 runtime.gc_interval=0
 hsqldb.first_identity=0



From sforstner at sheep.berlios.de  Wed Nov 10 02:08:09 2004
From: sforstner at sheep.berlios.de (Stefan at BerliOS)
Date: Wed, 10 Nov 2004 02:08:09 +0100
Subject: [Provirent-svn-commit] r117 - project_src/provirent_hibernate/data
Message-ID: <200411100108.iAA189W9005563@sheep.berlios.de>

Author: sforstner
Date: 2004-11-10 02:07:42 +0100 (Wed, 10 Nov 2004)
New Revision: 117

Modified:
   project_src/provirent_hibernate/data/video.log
   project_src/provirent_hibernate/data/video.script
Log:


Modified: project_src/provirent_hibernate/data/video.log
===================================================================
--- project_src/provirent_hibernate/data/video.log	2004-11-10 01:06:58 UTC (rev 116)
+++ project_src/provirent_hibernate/data/video.log	2004-11-10 01:07:42 UTC (rev 117)
@@ -1,7 +1,2 @@
 /*C2*/CONNECT USER SA
 SET AUTOCOMMIT FALSE
-INSERT INTO VIDEOFORMAT VALUES(23,'1:2','super')
-COMMIT
-DELETE FROM VIDEOFORMAT WHERE VIDEOFORMATID=8
-INSERT INTO VIDEOFORMAT VALUES(8,'16:10','test')
-COMMIT

Modified: project_src/provirent_hibernate/data/video.script
===================================================================
--- project_src/provirent_hibernate/data/video.script	2004-11-10 01:06:58 UTC (rev 116)
+++ project_src/provirent_hibernate/data/video.script	2004-11-10 01:07:42 UTC (rev 117)
@@ -9,7 +9,7 @@
 CREATE TABLE MOVIEACTORS(MOVIEID INTEGER NOT NULL,ACTORID INTEGER NOT NULL,POS INTEGER NOT NULL,CONSTRAINT SYS_PK_MOVIEACTORS PRIMARY KEY(MOVIEID,POS))
 CREATE TABLE MOVIEAUDIOFORMATES(MOVIEID INTEGER NOT NULL,AUDIOFORMATID INTEGER NOT NULL,POS INTEGER NOT NULL,CONSTRAINT SYS_PK_MOVIEAUDIOFORMATES PRIMARY KEY(MOVIEID,POS))
 CREATE TABLE STATUS(STATUSID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1)  NOT NULL PRIMARY KEY,STATUSNAME VARCHAR(255) NOT NULL,STATUSSHORTNAME VARCHAR(255) NOT NULL)
-CREATE TABLE DVD(DVDID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1)  NOT NULL PRIMARY KEY,MOVIE INTEGER,CONDITION INTEGER,STATUS INTEGER,BARCODE VARCHAR(255),CONSTRAINT SYS_CT_272 UNIQUE(BARCODE),CONSTRAINT FK109F29260C3F2 FOREIGN KEY(STATUS) REFERENCES STATUS(STATUSID))
+CREATE TABLE DVD(DVDID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1)  NOT NULL PRIMARY KEY,MOVIE INTEGER,CONDITION INTEGER,STATUS INTEGER,BARCODE VARCHAR(255),CONSTRAINT SYS_CT_326 UNIQUE(BARCODE),CONSTRAINT FK109F29260C3F2 FOREIGN KEY(STATUS) REFERENCES STATUS(STATUSID))
 CREATE TABLE DIRECTOR(DIRECTORID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1)  NOT NULL PRIMARY KEY,FIRSTNAME VARCHAR(255) NOT NULL,LASTNAME VARCHAR(255) NOT NULL)
 CREATE TABLE ACTOR(ACTORID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1)  NOT NULL PRIMARY KEY,FIRSTNAME VARCHAR(255) NOT NULL,LASTNAME VARCHAR(255) NOT NULL)
 CREATE TABLE AUDIOFORMAT(AUIOFORMATID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1)  NOT NULL PRIMARY KEY,NAME VARCHAR(255) NOT NULL,SHORTNAME VARCHAR(255) NOT NULL)
@@ -20,8 +20,8 @@
 CREATE TABLE CUSTOMER(CUSTOMERID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1)  NOT NULL PRIMARY KEY,DAYOFREGISTRATION TIMESTAMP NOT NULL,USERNAME VARCHAR(255) NOT NULL,PASSWORD VARCHAR(255) NOT NULL,HIDDENQUESTION VARCHAR(255) NOT NULL,HIDDENANSWER VARCHAR(255) NOT NULL)
 CREATE TABLE CONDITION(CONDITIONID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1)  NOT NULL PRIMARY KEY,CONDITIONNAME VARCHAR(255) NOT NULL,CONDITIONSHORTNAME VARCHAR(255) NOT NULL)
 CREATE TABLE BILL(BILLID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1)  NOT NULL PRIMARY KEY,CUSTOMER INTEGER,PDFFILE BINARY,PDFFILESIZE INTEGER,CONSTRAINT FK1F1C0724217FDE FOREIGN KEY(CUSTOMER) REFERENCES CUSTOMER(CUSTOMERID))
-CREATE TABLE MOVIESUBTITLES(MOVIEID INTEGER NOT NULL,SUBTITLEID INTEGER NOT NULL,POS INTEGER NOT NULL,CONSTRAINT SYS_PK_MOVIESUBTITLES PRIMARY KEY(MOVIEID,POS),CONSTRAINT FK33A6F22B13769F33 FOREIGN KEY(SUBTITLEID) REFERENCES SUBTITLE(SUBTITLEID),CONSTRAINT FK33A6F22B74ECCC2B FOREIGN KEY(MOVIEID) REFERENCES MOVIE(MOVIEID))
 CREATE TABLE MOVIEGENRES(MOVIEID INTEGER NOT NULL,GENREID INTEGER NOT NULL,POS INTEGER NOT NULL,CONSTRAINT SYS_PK_MOVIEGENRES PRIMARY KEY(MOVIEID,POS),CONSTRAINT FK58CDD660260A4DBE FOREIGN KEY(GENREID) REFERENCES GENRE(GENREID),CONSTRAINT FK58CDD66074ECCC2B FOREIGN KEY(MOVIEID) REFERENCES MOVIE(MOVIEID))
+CREATE TABLE MOVIESUBTITLES(MOVIEID INTEGER NOT NULL,SUBTITLEID INTEGER NOT NULL,POS INTEGER NOT NULL,CONSTRAINT SYS_PK_MOVIESUBTITLES PRIMARY KEY(MOVIEID,POS),CONSTRAINT FK33A6F22B13769F33 FOREIGN KEY(SUBTITLEID) REFERENCES SUBTITLE(SUBTITLEID),CONSTRAINT FK33A6F22B74ECCC2B FOREIGN KEY(MOVIEID) REFERENCES MOVIE(MOVIEID))
 CREATE TABLE VIDEOFORMAT(VIDEOFORMATID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1)  NOT NULL PRIMARY KEY,NAME VARCHAR(255) NOT NULL,SHORTNAME VARCHAR(255) NOT NULL)
 CREATE TABLE MOVIELANGUAGES(MOVIEID INTEGER NOT NULL,LANGUAGEID INTEGER NOT NULL,POS INTEGER NOT NULL,CONSTRAINT SYS_PK_MOVIELANGUAGES PRIMARY KEY(MOVIEID,POS),CONSTRAINT FK6D6C92EB12651673 FOREIGN KEY(LANGUAGEID) REFERENCES LANGUAGE(LANGUAGEID),CONSTRAINT FK6D6C92EB74ECCC2B FOREIGN KEY(MOVIEID) REFERENCES MOVIE(MOVIEID))
 ALTER TABLE MOVIEIMAGES ADD CONSTRAINT FK5CA2318874ECCC2B FOREIGN KEY(MOVIEID) REFERENCES MOVIE(MOVIEID)
@@ -43,343 +43,3 @@
 ALTER TABLE MOVIEVIDEOFORMATES ADD CONSTRAINT FKDE31730C23D64AD FOREIGN KEY(VIDEOFORMATID) REFERENCES VIDEOFORMAT(VIDEOFORMATID)
 ALTER TABLE MOVIEORDER ADD CONSTRAINT FKB0BF321E24217FDE FOREIGN KEY(CUSTOMER) REFERENCES CUSTOMER(CUSTOMERID)
 CREATE USER SA PASSWORD "" ADMIN
-INSERT INTO IMAGE VALUES(5,'01020304',123,'image1.jpg','Bild 1')
-INSERT INTO IMAGE VALUES(6,'05060708',123,'image2.jpg','Bild 2')
-INSERT INTO IMAGE VALUES(7,'090a0b0c',123,'image3.jpg','Bild 3')
-INSERT INTO IMAGE VALUES(8,'0d0e0f10',123,'image4.jpg','Bild 4')
-INSERT INTO IMAGE VALUES(9,NULL,0,NULL,NULL)
-INSERT INTO IMAGE VALUES(10,NULL,0,NULL,NULL)
-INSERT INTO IMAGE VALUES(11,NULL,0,NULL,NULL)
-INSERT INTO IMAGE VALUES(12,NULL,0,NULL,NULL)
-INSERT INTO IMAGE VALUES(13,NULL,0,NULL,NULL)
-INSERT INTO IMAGE VALUES(14,NULL,0,NULL,NULL)
-INSERT INTO IMAGE VALUES(15,NULL,0,NULL,NULL)
-INSERT INTO IMAGE VALUES(16,NULL,0,NULL,NULL)
-INSERT INTO IMAGE VALUES(17,NULL,0,NULL,NULL)
-INSERT INTO PERSON VALUES(2,'','',NULL,'',NULL,'','','','','','',NULL)
-INSERT INTO PERSON VALUES(4,'Philipp','Schneider',NULL,'Herr',NULL,'Kastanienring','16','Leipzig','04316','Deutschland','kunde2-provirent at phil-schneider.de','1988-09-10 11:45:05.935')
-INSERT INTO PERSON VALUES(5,'Max','Meier',NULL,'Herr',NULL,'Kohlgartenstr.','67','Wernigerode','38855','Deutschland','kunde2-provirent at phil-schneider.de',NULL)
-INSERT INTO PERSON VALUES(6,'Thomas','Pech',NULL,'Herr',NULL,'Riebeck.','7a','Leipzig','04317','Deutschland','kunde3-provirent at phil-schneider.de',NULL)
-INSERT INTO PERSON VALUES(8,'Philipp','Schneider',NULL,'Herr',NULL,'Kastanienring','16','Leipzig','04316','Deutschland','kunde2-provirent at phil-schneider.de','1988-09-10 11:49:41.131')
-INSERT INTO PERSON VALUES(9,'Max','Meier',NULL,'Herr',NULL,'Kohlgartenstr.','67','Wernigerode','38855','Deutschland','kunde2-provirent at phil-schneider.de',NULL)
-INSERT INTO PERSON VALUES(10,'Thomas','Pech',NULL,'Herr',NULL,'Riebeck.','7a','Leipzig','04317','Deutschland','kunde3-provirent at phil-schneider.de',NULL)
-INSERT INTO PERSON VALUES(12,'Philipp','Schneider',NULL,'Herr',NULL,'Kastanienring','16','Leipzig','04316','Deutschland','kunde2-provirent at phil-schneider.de','1988-09-10 11:51:22.277')
-INSERT INTO PERSON VALUES(13,'Max','Meier',NULL,'Herr',NULL,'Kohlgartenstr.','67','Wernigerode','38855','Deutschland','kunde2-provirent at phil-schneider.de',NULL)
-INSERT INTO PERSON VALUES(14,'Thomas','Pech',NULL,'Herr',NULL,'Riebeck.','7a','Leipzig','04317','Deutschland','kunde3-provirent at phil-schneider.de',NULL)
-INSERT INTO PERSON VALUES(16,'Philipp','Schneider',NULL,'Herr',NULL,'Kastanienring','16','Leipzig','04316','Deutschland','kunde2-provirent at phil-schneider.de','1988-09-10 11:52:31.606')
-INSERT INTO PERSON VALUES(17,'Max','Meier',NULL,'Herr',NULL,'Kohlgartenstr.','67','Wernigerode','38855','Deutschland','kunde2-provirent at phil-schneider.de',NULL)
-INSERT INTO PERSON VALUES(18,'Thomas','Pech',NULL,'Herr',NULL,'Riebeck.','7a','Leipzig','04317','Deutschland','kunde3-provirent at phil-schneider.de',NULL)
-INSERT INTO PERSON VALUES(20,'Philipp','Schneider',NULL,'Herr',NULL,'Kastanienring','16','Leipzig','04316','Deutschland','kunde2-provirent at phil-schneider.de','1988-09-10 13:19:23.457')
-INSERT INTO PERSON VALUES(21,'Max','Meier',NULL,'Herr',NULL,'Kohlgartenstr.','67','Wernigerode','38855','Deutschland','kunde2-provirent at phil-schneider.de',NULL)
-INSERT INTO PERSON VALUES(22,'Thomas','Pech',NULL,'Herr',NULL,'Riebeck.','7a','Leipzig','04317','Deutschland','kunde3-provirent at phil-schneider.de',NULL)
-INSERT INTO PERSON VALUES(24,'Philipp','Schneider',NULL,'Herr',NULL,'Kastanienring','16','Leipzig','04316','Deutschland','kunde2-provirent at phil-schneider.de','1988-09-10 13:34:08.018')
-INSERT INTO PERSON VALUES(25,'Max','Meier',NULL,'Herr',NULL,'Kohlgartenstr.','67','Wernigerode','38855','Deutschland','kunde2-provirent at phil-schneider.de',NULL)
-INSERT INTO PERSON VALUES(26,'Thomas','Pech',NULL,'Herr',NULL,'Riebeck.','7a','Leipzig','04317','Deutschland','kunde3-provirent at phil-schneider.de',NULL)
-INSERT INTO GENRE VALUES(5,'Action','')
-INSERT INTO GENRE VALUES(6,'Abenteuer','')
-INSERT INTO GENRE VALUES(7,'Dokumentation','')
-INSERT INTO GENRE VALUES(8,'Horror','')
-INSERT INTO GENRE VALUES(9,'Thriller','')
-INSERT INTO GENRE VALUES(10,'Drama','')
-INSERT INTO GENRE VALUES(11,'Sci-Fi','')
-INSERT INTO GENRE VALUES(12,'Mystery','')
-INSERT INTO GENRE VALUES(13,'Thriller','')
-INSERT INTO GENRE VALUES(14,'Drama','')
-INSERT INTO GENRE VALUES(15,'Sci-Fi','')
-INSERT INTO GENRE VALUES(16,'Mystery','')
-INSERT INTO GENRE VALUES(17,'Thriller','')
-INSERT INTO GENRE VALUES(18,'Drama','')
-INSERT INTO GENRE VALUES(19,'Sci-Fi','')
-INSERT INTO GENRE VALUES(20,'Mystery','')
-INSERT INTO GENRE VALUES(21,'Thriller','')
-INSERT INTO GENRE VALUES(22,'Drama','')
-INSERT INTO GENRE VALUES(23,'Sci-Fi','')
-INSERT INTO GENRE VALUES(24,'Mystery','')
-INSERT INTO GENRE VALUES(25,'Thriller','')
-INSERT INTO GENRE VALUES(26,'Drama','')
-INSERT INTO GENRE VALUES(27,'Sci-Fi','')
-INSERT INTO GENRE VALUES(28,'Mystery','')
-INSERT INTO GENRE VALUES(29,'Thriller','')
-INSERT INTO GENRE VALUES(30,'Drama','')
-INSERT INTO GENRE VALUES(31,'Sci-Fi','')
-INSERT INTO GENRE VALUES(32,'Mystery','')
-INSERT INTO GENRE VALUES(33,'Thriller','')
-INSERT INTO GENRE VALUES(34,'Drama','')
-INSERT INTO GENRE VALUES(35,'Sci-Fi','')
-INSERT INTO GENRE VALUES(36,'Mystery','')
-INSERT INTO GENRE VALUES(37,'Thriller','')
-INSERT INTO GENRE VALUES(38,'Drama','')
-INSERT INTO GENRE VALUES(39,'Sci-Fi','')
-INSERT INTO GENRE VALUES(40,'Mystery','')
-INSERT INTO SUBTITLE VALUES(6,'Deutsch','de')
-INSERT INTO SUBTITLE VALUES(7,'Englisch','en')
-INSERT INTO SUBTITLE VALUES(8,'Franzoesisch','fr')
-INSERT INTO SUBTITLE VALUES(9,'Spanisch','es')
-INSERT INTO SUBTITLE VALUES(10,'Japanisch','jp')
-INSERT INTO SUBTITLE VALUES(11,'Deutsch','de')
-INSERT INTO SUBTITLE VALUES(12,'Englisch','en')
-INSERT INTO SUBTITLE VALUES(13,'Deutsch','de')
-INSERT INTO SUBTITLE VALUES(14,'Englisch','en')
-INSERT INTO SUBTITLE VALUES(15,'Deutsch','de')
-INSERT INTO SUBTITLE VALUES(16,'Englisch','en')
-INSERT INTO SUBTITLE VALUES(17,'Deutsch','de')
-INSERT INTO SUBTITLE VALUES(18,'Englisch','en')
-INSERT INTO SUBTITLE VALUES(19,'Deutsch','de')
-INSERT INTO SUBTITLE VALUES(20,'Englisch','en')
-INSERT INTO SUBTITLE VALUES(21,'Deutsch','de')
-INSERT INTO SUBTITLE VALUES(22,'Englisch','en')
-INSERT INTO SUBTITLE VALUES(23,'Deutsch','de')
-INSERT INTO SUBTITLE VALUES(24,'Englisch','en')
-INSERT INTO SUBTITLE VALUES(25,'Deutsch','de')
-INSERT INTO SUBTITLE VALUES(26,'Englisch','en')
-INSERT INTO MOVIEDIRECTORS VALUES(1,9,0)
-INSERT INTO MOVIEDIRECTORS VALUES(2,10,0)
-INSERT INTO MOVIEDIRECTORS VALUES(3,11,0)
-INSERT INTO MOVIEDIRECTORS VALUES(4,12,0)
-INSERT INTO MOVIEDIRECTORS VALUES(5,13,0)
-INSERT INTO MOVIEDIRECTORS VALUES(6,14,0)
-INSERT INTO MOVIEDIRECTORS VALUES(7,15,0)
-INSERT INTO MOVIEDIRECTORS VALUES(8,16,0)
-INSERT INTO MOVIEDIRECTORS VALUES(9,10,0)
-INSERT INTO MOVIEACTORS VALUES(1,15,0)
-INSERT INTO MOVIEACTORS VALUES(1,16,1)
-INSERT INTO MOVIEACTORS VALUES(1,17,2)
-INSERT INTO MOVIEACTORS VALUES(2,18,0)
-INSERT INTO MOVIEACTORS VALUES(2,19,1)
-INSERT INTO MOVIEACTORS VALUES(2,20,2)
-INSERT INTO MOVIEACTORS VALUES(3,21,0)
-INSERT INTO MOVIEACTORS VALUES(3,22,1)
-INSERT INTO MOVIEACTORS VALUES(3,23,2)
-INSERT INTO MOVIEACTORS VALUES(4,24,0)
-INSERT INTO MOVIEACTORS VALUES(4,25,1)
-INSERT INTO MOVIEACTORS VALUES(4,26,2)
-INSERT INTO MOVIEACTORS VALUES(5,27,0)
-INSERT INTO MOVIEACTORS VALUES(5,28,1)
-INSERT INTO MOVIEACTORS VALUES(5,29,2)
-INSERT INTO MOVIEACTORS VALUES(6,30,0)
-INSERT INTO MOVIEACTORS VALUES(6,31,1)
-INSERT INTO MOVIEACTORS VALUES(6,32,2)
-INSERT INTO MOVIEACTORS VALUES(7,33,0)
-INSERT INTO MOVIEACTORS VALUES(7,34,1)
-INSERT INTO MOVIEACTORS VALUES(7,35,2)
-INSERT INTO MOVIEACTORS VALUES(8,36,0)
-INSERT INTO MOVIEACTORS VALUES(8,37,1)
-INSERT INTO MOVIEACTORS VALUES(8,38,2)
-INSERT INTO MOVIEACTORS VALUES(9,10,0)
-INSERT INTO MOVIEACTORS VALUES(9,28,1)
-INSERT INTO MOVIEAUDIOFORMATES VALUES(9,30,0)
-INSERT INTO STATUS VALUES(5,'ausleihbar','')
-INSERT INTO STATUS VALUES(6,'verliehen','')
-INSERT INTO STATUS VALUES(7,'in Bearbeitung','')
-INSERT INTO STATUS VALUES(8,'noch nicht vorhanden','')
-INSERT INTO DIRECTOR VALUES(5,'Bibo','Bergeron')
-INSERT INTO DIRECTOR VALUES(6,'Vicky','Jenson')
-INSERT INTO DIRECTOR VALUES(7,'Jay','Russell')
-INSERT INTO DIRECTOR VALUES(8,'Joseph','Ruben')
-INSERT INTO DIRECTOR VALUES(9,'Joseph','Ruben')
-INSERT INTO DIRECTOR VALUES(10,'Joseph','Ruben')
-INSERT INTO DIRECTOR VALUES(11,'Joseph','Ruben')
-INSERT INTO DIRECTOR VALUES(12,'Joseph','Ruben')
-INSERT INTO DIRECTOR VALUES(13,'Joseph','Ruben')
-INSERT INTO DIRECTOR VALUES(14,'Joseph','Ruben')
-INSERT INTO DIRECTOR VALUES(15,'Joseph','Ruben')
-INSERT INTO DIRECTOR VALUES(16,'Joseph','Ruben')
-INSERT INTO ACTOR VALUES(8,'Johnny','Depp')
-INSERT INTO ACTOR VALUES(9,'Geoffrey','Rush')
-INSERT INTO ACTOR VALUES(10,'Gore','Verbinski ')
-INSERT INTO ACTOR VALUES(11,'Julianne','Moore ')
-INSERT INTO ACTOR VALUES(12,'Anthony','Edwards ')
-INSERT INTO ACTOR VALUES(13,'Matthew','Pleszewicz ')
-INSERT INTO ACTOR VALUES(14,'Christopher','Kovaleski ')
-INSERT INTO ACTOR VALUES(15,'Julianne','Moore')
-INSERT INTO ACTOR VALUES(16,'Christopher','Kovaleski')
-INSERT INTO ACTOR VALUES(17,'Matthew','Pleszewicz')
-INSERT INTO ACTOR VALUES(18,'Julianne','Moore')
-INSERT INTO ACTOR VALUES(19,'Christopher','Kovaleski')
-INSERT INTO ACTOR VALUES(20,'Matthew','Pleszewicz')
-INSERT INTO ACTOR VALUES(21,'Julianne','Moore')
-INSERT INTO ACTOR VALUES(22,'Christopher','Kovaleski')
-INSERT INTO ACTOR VALUES(23,'Matthew','Pleszewicz')
-INSERT INTO ACTOR VALUES(24,'Julianne','Moore')
-INSERT INTO ACTOR VALUES(25,'Christopher','Kovaleski')
-INSERT INTO ACTOR VALUES(26,'Matthew','Pleszewicz')
-INSERT INTO ACTOR VALUES(27,'Julianne','Moore')
-INSERT INTO ACTOR VALUES(28,'Christopher','Kovaleski')
-INSERT INTO ACTOR VALUES(29,'Matthew','Pleszewicz')
-INSERT INTO ACTOR VALUES(30,'Julianne','Moore')
-INSERT INTO ACTOR VALUES(31,'Christopher','Kovaleski')
-INSERT INTO ACTOR VALUES(32,'Matthew','Pleszewicz')
-INSERT INTO ACTOR VALUES(33,'Julianne','Moore')
-INSERT INTO ACTOR VALUES(34,'Christopher','Kovaleski')
-INSERT INTO ACTOR VALUES(35,'Matthew','Pleszewicz')
-INSERT INTO ACTOR VALUES(36,'Julianne','Moore')
-INSERT INTO ACTOR VALUES(37,'Christopher','Kovaleski')
-INSERT INTO ACTOR VALUES(38,'Matthew','Pleszewicz')
-INSERT INTO AUDIOFORMAT VALUES(5,'DTS Surround Sound','')
-INSERT INTO AUDIOFORMAT VALUES(6,'Surround Sound','')
-INSERT INTO AUDIOFORMAT VALUES(7,'Dolby','')
-INSERT INTO AUDIOFORMAT VALUES(8,'Stereo','')
-INSERT INTO AUDIOFORMAT VALUES(9,'DTS Surround Sound','')
-INSERT INTO AUDIOFORMAT VALUES(10,'Surround Sound','')
-INSERT INTO AUDIOFORMAT VALUES(11,'Dolby','')
-INSERT INTO AUDIOFORMAT VALUES(12,'DTS Surround Sound','')
-INSERT INTO AUDIOFORMAT VALUES(13,'Surround Sound','')
-INSERT INTO AUDIOFORMAT VALUES(14,'Dolby','')
-INSERT INTO AUDIOFORMAT VALUES(15,'DTS Surround Sound','')
-INSERT INTO AUDIOFORMAT VALUES(16,'Surround Sound','')
-INSERT INTO AUDIOFORMAT VALUES(17,'Dolby','')
-INSERT INTO AUDIOFORMAT VALUES(18,'DTS Surround Sound','')
-INSERT INTO AUDIOFORMAT VALUES(19,'Surround Sound','')
-INSERT INTO AUDIOFORMAT VALUES(20,'Dolby','')
-INSERT INTO AUDIOFORMAT VALUES(21,'DTS Surround Sound','')
-INSERT INTO AUDIOFORMAT VALUES(22,'Surround Sound','')
-INSERT INTO AUDIOFORMAT VALUES(23,'Dolby','')
-INSERT INTO AUDIOFORMAT VALUES(24,'DTS Surround Sound','')
-INSERT INTO AUDIOFORMAT VALUES(25,'Surround Sound','')
-INSERT INTO AUDIOFORMAT VALUES(26,'Dolby','')
-INSERT INTO AUDIOFORMAT VALUES(27,'DTS Surround Sound','')
-INSERT INTO AUDIOFORMAT VALUES(28,'Surround Sound','')
-INSERT INTO AUDIOFORMAT VALUES(29,'Dolby','')
-INSERT INTO AUDIOFORMAT VALUES(30,'DTS Surround Sound','')
-INSERT INTO AUDIOFORMAT VALUES(31,'Surround Sound','')
-INSERT INTO AUDIOFORMAT VALUES(32,'Dolby','')
-INSERT INTO MOVIEVIDEOFORMATES VALUES(9,15,0)
-INSERT INTO MOVIE VALUES(1,'The Forgotten','A grieving mother, Telly Parada, is struggling to cope with the loss of her 9-year-old son. She is stunned...',96,'2004-10-12 11:45:06.086')
-INSERT INTO MOVIE VALUES(2,'The Forgotten','A grieving mother, Telly Parada, is struggling to cope with the loss of her 9-year-old son. She is stunned...',96,'2004-10-12 11:49:41.271')
-INSERT INTO MOVIE VALUES(3,'The Forgotten','A grieving mother, Telly Parada, is struggling to cope with the loss of her 9-year-old son. She is stunned...',96,'2004-10-12 11:51:22.407')
-INSERT INTO MOVIE VALUES(4,'The Forgotten','A grieving mother, Telly Parada, is struggling to cope with the loss of her 9-year-old son. She is stunned...',96,'2004-10-12 11:52:31.736')
-INSERT INTO MOVIE VALUES(5,'The Forgotten','A grieving mother, Telly Parada, is struggling to cope with the loss of her 9-year-old son. She is stunned...',96,'2004-10-12 11:52:31.917')
-INSERT INTO MOVIE VALUES(6,'The Forgotten','A grieving mother, Telly Parada, is struggling to cope with the loss of her 9-year-old son. She is stunned...',96,'2004-10-12 13:19:23.707')
-INSERT INTO MOVIE VALUES(7,'The Forgotten','A grieving mother, Telly Parada, is struggling to cope with the loss of her 9-year-old son. She is stunned...',96,'2004-10-12 13:19:24.017')
-INSERT INTO MOVIE VALUES(8,'The Forgotten','A grieving mother, Telly Parada, is struggling to cope with the loss of her 9-year-old son. She is stunned...',96,'2004-10-12 13:34:08.199')
-INSERT INTO MOVIE VALUES(9,'The Forgotten','A grieving mother, Telly Parada, is struggling to cope with the loss of her 9-year-old son. She is stunned...',96,'2004-10-12 13:34:08.489')
-INSERT INTO LANGUAGE VALUES(6,'Deutsch','de')
-INSERT INTO LANGUAGE VALUES(7,'Englisch','en')
-INSERT INTO LANGUAGE VALUES(8,'Franzoesisch','fr')
-INSERT INTO LANGUAGE VALUES(9,'Spanisch','es')
-INSERT INTO LANGUAGE VALUES(10,'Japanisch','jp')
-INSERT INTO LANGUAGE VALUES(11,'Deutsch','de')
-INSERT INTO LANGUAGE VALUES(12,'Englisch','en')
-INSERT INTO LANGUAGE VALUES(13,'Deutsch','de')
-INSERT INTO LANGUAGE VALUES(14,'Englisch','en')
-INSERT INTO LANGUAGE VALUES(15,'Deutsch','de')
-INSERT INTO LANGUAGE VALUES(16,'Englisch','en')
-INSERT INTO LANGUAGE VALUES(17,'Deutsch','de')
-INSERT INTO LANGUAGE VALUES(18,'Englisch','en')
-INSERT INTO LANGUAGE VALUES(19,'Deutsch','de')
-INSERT INTO LANGUAGE VALUES(20,'Englisch','en')
-INSERT INTO LANGUAGE VALUES(21,'Deutsch','de')
-INSERT INTO LANGUAGE VALUES(22,'Englisch','en')
-INSERT INTO LANGUAGE VALUES(23,'Deutsch','de')
-INSERT INTO LANGUAGE VALUES(24,'Englisch','en')
-INSERT INTO LANGUAGE VALUES(25,'Deutsch','de')
-INSERT INTO LANGUAGE VALUES(26,'Englisch','en')
-INSERT INTO CUSTOMER VALUES(2,'2004-10-12 11:45:05.935','kunde1','kunde1',' ',' ')
-INSERT INTO CUSTOMER VALUES(3,'2004-10-12 11:45:05.955','kunde2','kunde2',' ',' ')
-INSERT INTO CUSTOMER VALUES(4,'2004-10-12 11:45:05.965','kunde3','kunde3',' ',' ')
-INSERT INTO CUSTOMER VALUES(6,'2004-10-12 11:49:41.131','kunde1','kunde1',' ',' ')
-INSERT INTO CUSTOMER VALUES(7,'2004-10-12 11:49:41.141','kunde2','kunde2',' ',' ')
-INSERT INTO CUSTOMER VALUES(8,'2004-10-12 11:49:41.151','kunde3','kunde3',' ',' ')
-INSERT INTO CUSTOMER VALUES(10,'2004-10-12 11:51:22.277','kunde1','kunde1',' ',' ')
-INSERT INTO CUSTOMER VALUES(11,'2004-10-12 11:51:22.327','kunde2','kunde2',' ',' ')
-INSERT INTO CUSTOMER VALUES(12,'2004-10-12 11:51:22.337','kunde3','kunde3',' ',' ')
-INSERT INTO CUSTOMER VALUES(14,'2004-10-12 11:52:31.606','kunde1','kunde1',' ',' ')
-INSERT INTO CUSTOMER VALUES(15,'2004-10-12 11:52:31.616','kunde2','kunde2',' ',' ')
-INSERT INTO CUSTOMER VALUES(16,'2004-10-12 11:52:31.656','kunde3','kunde3',' ',' ')
-INSERT INTO CUSTOMER VALUES(18,'2004-10-12 13:19:23.457','kunde1','kunde1',' ',' ')
-INSERT INTO CUSTOMER VALUES(19,'2004-10-12 13:19:23.557','kunde2','kunde2',' ',' ')
-INSERT INTO CUSTOMER VALUES(20,'2004-10-12 13:19:23.637','kunde3','kunde3',' ',' ')
-INSERT INTO CUSTOMER VALUES(22,'2004-10-12 13:34:08.018','kunde1','kunde1',' ',' ')
-INSERT INTO CUSTOMER VALUES(23,'2004-10-12 13:34:08.028','kunde2','kunde2',' ',' ')
-INSERT INTO CUSTOMER VALUES(24,'2004-10-12 13:34:08.048','kunde3','kunde3',' ',' ')
-INSERT INTO CONDITION VALUES(6,'neu','')
-INSERT INTO CONDITION VALUES(7,'leichte Kratzer','')
-INSERT INTO CONDITION VALUES(8,'mittlere Kratzer','')
-INSERT INTO CONDITION VALUES(9,'schwere Kratzer','')
-INSERT INTO CONDITION VALUES(10,'nicht lesbar','')
-INSERT INTO MOVIESUBTITLES VALUES(1,11,0)
-INSERT INTO MOVIESUBTITLES VALUES(1,12,1)
-INSERT INTO MOVIESUBTITLES VALUES(2,13,0)
-INSERT INTO MOVIESUBTITLES VALUES(2,14,1)
-INSERT INTO MOVIESUBTITLES VALUES(3,15,0)
-INSERT INTO MOVIESUBTITLES VALUES(3,16,1)
-INSERT INTO MOVIESUBTITLES VALUES(4,17,0)
-INSERT INTO MOVIESUBTITLES VALUES(4,18,1)
-INSERT INTO MOVIESUBTITLES VALUES(5,19,0)
-INSERT INTO MOVIESUBTITLES VALUES(5,20,1)
-INSERT INTO MOVIESUBTITLES VALUES(6,21,0)
-INSERT INTO MOVIESUBTITLES VALUES(6,22,1)
-INSERT INTO MOVIESUBTITLES VALUES(7,23,0)
-INSERT INTO MOVIESUBTITLES VALUES(7,24,1)
-INSERT INTO MOVIESUBTITLES VALUES(8,25,0)
-INSERT INTO MOVIESUBTITLES VALUES(8,26,1)
-INSERT INTO MOVIESUBTITLES VALUES(9,22,0)
-INSERT INTO MOVIEGENRES VALUES(1,9,0)
-INSERT INTO MOVIEGENRES VALUES(1,10,1)
-INSERT INTO MOVIEGENRES VALUES(1,11,2)
-INSERT INTO MOVIEGENRES VALUES(1,12,3)
-INSERT INTO MOVIEGENRES VALUES(2,13,0)
-INSERT INTO MOVIEGENRES VALUES(2,14,1)
-INSERT INTO MOVIEGENRES VALUES(2,15,2)
-INSERT INTO MOVIEGENRES VALUES(2,16,3)
-INSERT INTO MOVIEGENRES VALUES(3,17,0)
-INSERT INTO MOVIEGENRES VALUES(3,18,1)
-INSERT INTO MOVIEGENRES VALUES(3,19,2)
-INSERT INTO MOVIEGENRES VALUES(3,20,3)
-INSERT INTO MOVIEGENRES VALUES(4,21,0)
-INSERT INTO MOVIEGENRES VALUES(4,22,1)
-INSERT INTO MOVIEGENRES VALUES(4,23,2)
-INSERT INTO MOVIEGENRES VALUES(4,24,3)
-INSERT INTO MOVIEGENRES VALUES(5,25,0)
-INSERT INTO MOVIEGENRES VALUES(5,26,1)
-INSERT INTO MOVIEGENRES VALUES(5,27,2)
-INSERT INTO MOVIEGENRES VALUES(5,28,3)
-INSERT INTO MOVIEGENRES VALUES(6,29,0)
-INSERT INTO MOVIEGENRES VALUES(6,30,1)
-INSERT INTO MOVIEGENRES VALUES(6,31,2)
-INSERT INTO MOVIEGENRES VALUES(6,32,3)
-INSERT INTO MOVIEGENRES VALUES(7,33,0)
-INSERT INTO MOVIEGENRES VALUES(7,34,1)
-INSERT INTO MOVIEGENRES VALUES(7,35,2)
-INSERT INTO MOVIEGENRES VALUES(7,36,3)
-INSERT INTO MOVIEGENRES VALUES(8,37,0)
-INSERT INTO MOVIEGENRES VALUES(8,38,1)
-INSERT INTO MOVIEGENRES VALUES(8,39,2)
-INSERT INTO MOVIEGENRES VALUES(8,40,3)
-INSERT INTO MOVIEGENRES VALUES(9,28,0)
-INSERT INTO VIDEOFORMAT VALUES(4,'2.35:1','')
-INSERT INTO VIDEOFORMAT VALUES(5,'9:13','')
-INSERT INTO VIDEOFORMAT VALUES(6,'16:10','')
-INSERT INTO VIDEOFORMAT VALUES(7,'9:13','')
-INSERT INTO VIDEOFORMAT VALUES(8,'16:10','')
-INSERT INTO VIDEOFORMAT VALUES(9,'9:13','')
-INSERT INTO VIDEOFORMAT VALUES(10,'16:10','')
-INSERT INTO VIDEOFORMAT VALUES(11,'9:13','')
-INSERT INTO VIDEOFORMAT VALUES(12,'16:10','')
-INSERT INTO VIDEOFORMAT VALUES(13,'9:13','')
-INSERT INTO VIDEOFORMAT VALUES(14,'16:10','')
-INSERT INTO VIDEOFORMAT VALUES(15,'9:13','')
-INSERT INTO VIDEOFORMAT VALUES(16,'16:10','')
-INSERT INTO VIDEOFORMAT VALUES(17,'9:13','')
-INSERT INTO VIDEOFORMAT VALUES(18,'16:10','')
-INSERT INTO VIDEOFORMAT VALUES(19,'9:13','')
-INSERT INTO VIDEOFORMAT VALUES(20,'16:10','')
-INSERT INTO VIDEOFORMAT VALUES(21,'9:13','')
-INSERT INTO VIDEOFORMAT VALUES(22,'16:10','')
-INSERT INTO MOVIELANGUAGES VALUES(1,11,0)
-INSERT INTO MOVIELANGUAGES VALUES(1,12,1)
-INSERT INTO MOVIELANGUAGES VALUES(2,13,0)
-INSERT INTO MOVIELANGUAGES VALUES(2,14,1)
-INSERT INTO MOVIELANGUAGES VALUES(3,15,0)
-INSERT INTO MOVIELANGUAGES VALUES(3,16,1)
-INSERT INTO MOVIELANGUAGES VALUES(4,17,0)
-INSERT INTO MOVIELANGUAGES VALUES(4,18,1)
-INSERT INTO MOVIELANGUAGES VALUES(5,19,0)
-INSERT INTO MOVIELANGUAGES VALUES(5,20,1)
-INSERT INTO MOVIELANGUAGES VALUES(6,21,0)
-INSERT INTO MOVIELANGUAGES VALUES(6,22,1)
-INSERT INTO MOVIELANGUAGES VALUES(7,23,0)
-INSERT INTO MOVIELANGUAGES VALUES(7,24,1)
-INSERT INTO MOVIELANGUAGES VALUES(8,25,0)
-INSERT INTO MOVIELANGUAGES VALUES(8,26,1)
-INSERT INTO MOVIELANGUAGES VALUES(9,24,0)



From sforstner at sheep.berlios.de  Wed Nov 10 02:11:05 2004
From: sforstner at sheep.berlios.de (Stefan at BerliOS)
Date: Wed, 10 Nov 2004 02:11:05 +0100
Subject: [Provirent-svn-commit] r118 - /
Message-ID: <200411100111.iAA1B5Bo005646@sheep.berlios.de>

Author: sforstner
Date: 2004-11-10 02:10:44 +0100 (Wed, 10 Nov 2004)
New Revision: 118

Added:
   VIDEO
Log:
Muss nach C:/ kopiert werden

Added: VIDEO
===================================================================
(Binary files differ)


Property changes on: VIDEO
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream



From pschneider at sheep.berlios.de  Wed Nov 10 10:16:01 2004
From: pschneider at sheep.berlios.de (Philipp Schneider at BerliOS)
Date: Wed, 10 Nov 2004 10:16:01 +0100
Subject: [Provirent-svn-commit] r119 - project_src/provirent_hibernate/src
Message-ID: <200411100916.iAA9G1IR030347@sheep.berlios.de>

Author: pschneider
Date: 2004-11-10 10:15:58 +0100 (Wed, 10 Nov 2004)
New Revision: 119

Modified:
   project_src/provirent_hibernate/src/hibernate.properties
Log:


Modified: project_src/provirent_hibernate/src/hibernate.properties
===================================================================
--- project_src/provirent_hibernate/src/hibernate.properties	2004-11-10 01:10:44 UTC (rev 118)
+++ project_src/provirent_hibernate/src/hibernate.properties	2004-11-10 09:15:58 UTC (rev 119)
@@ -3,4 +3,4 @@
 hibernate.connection.url=jdbc:firebirdsql:localhost:c:/video
 hibernate.connection.username=SYSDBA
 hibernate.connection.password=masterkey
-hibernate.jdbc.use_streams_for_binary=true
\ No newline at end of file
+hibernate.jdbc.use_streams_for_binary=true



From pschneider at sheep.berlios.de  Wed Nov 10 11:03:12 2004
From: pschneider at sheep.berlios.de (Philipp Schneider at BerliOS)
Date: Wed, 10 Nov 2004 11:03:12 +0100
Subject: [Provirent-svn-commit] r120 - project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui
Message-ID: <200411101003.iAAA3C2X005100@sheep.berlios.de>

Author: pschneider
Date: 2004-11-10 11:03:11 +0100 (Wed, 10 Nov 2004)
New Revision: 120

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeActors.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeDirectors.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeFormate.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeGenre.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeLanguage.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java
Log:
- Sprachen an neues Paket angepasst
- beim schlie?\195?\159en kommt keine disposed exception mehr

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeActors.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeActors.java	2004-11-10 09:15:58 UTC (rev 119)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeActors.java	2004-11-10 10:03:11 UTC (rev 120)
@@ -75,7 +75,7 @@
     public void initLanguage(Locale locale) {
 
         l = PropertyResourceBundle.getBundle(
-                "de.hsharz.provirent.managment.gui.language.actors", locale);
+                "de.hsharz.provirent.management.gui.language.actors", locale);
 
     }
     

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeDirectors.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeDirectors.java	2004-11-10 09:15:58 UTC (rev 119)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeDirectors.java	2004-11-10 10:03:11 UTC (rev 120)
@@ -75,7 +75,7 @@
     public void initLanguage(Locale locale) {
 
         l = PropertyResourceBundle.getBundle(
-                "de.hsharz.provirent.managment.gui.language.directors", locale);
+                "de.hsharz.provirent.management.gui.language.directors", locale);
 
     }
     

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeFormate.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeFormate.java	2004-11-10 09:15:58 UTC (rev 119)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeFormate.java	2004-11-10 10:03:11 UTC (rev 120)
@@ -158,7 +158,7 @@
     public void initLanguage(Locale locale) {
 
         l = PropertyResourceBundle.getBundle(
-                "de.hsharz.provirent.managment.gui.language.formate", locale);
+                "de.hsharz.provirent.management.gui.language.formate", locale);
 
     }
 

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeGenre.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeGenre.java	2004-11-10 09:15:58 UTC (rev 119)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeGenre.java	2004-11-10 10:03:11 UTC (rev 120)
@@ -142,7 +142,7 @@
     public void initLanguage(Locale locale) {
 
         l = PropertyResourceBundle.getBundle(
-                "de.hsharz.provirent.managment.gui.language.genre", locale);
+                "de.hsharz.provirent.management.gui.language.genre", locale);
 
     }
     

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeLanguage.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeLanguage.java	2004-11-10 09:15:58 UTC (rev 119)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeLanguage.java	2004-11-10 10:03:11 UTC (rev 120)
@@ -142,7 +142,7 @@
     public void initLanguage(Locale locale) {
 
         l = PropertyResourceBundle.getBundle(
-                "de.hsharz.provirent.managment.gui.language.Language", locale);
+                "de.hsharz.provirent.management.gui.language.Language", locale);
 
     }
     

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java	2004-11-10 09:15:58 UTC (rev 119)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java	2004-11-10 10:03:11 UTC (rev 120)
@@ -183,7 +183,7 @@
         
         
         l = PropertyResourceBundle.getBundle(
-                "de.hsharz.provirent.managment.gui.language.main", locale);
+                "de.hsharz.provirent.management.gui.language.main", locale);
 
         //@todo hier muss noch was gemacht werden
         if (l == null) {
@@ -495,9 +495,10 @@
         tabItemFormat.setText(l.getString("tab.format.title"));
         tabItemFormat.addDisposeListener(new DisposeListener() {
             public void widgetDisposed(DisposeEvent evt) {
-                System.out
-                    .println("tabItemFormat.widgetDisposed, event=" + evt);
-                viewVideoFormatMenuItem.setSelection(false);
+
+                if (!viewVideoFormatMenuItem.isDisposed()){
+                    viewVideoFormatMenuItem.setSelection(false);
+                }
             }
         });
 
@@ -518,9 +519,10 @@
         tabItemDirector.addDisposeListener(new DisposeListener() {
 
             public void widgetDisposed(DisposeEvent evt) {
-                System.out
-                    .println("tabItemDirector.widgetDisposed, event=" + evt);
-                viewDirectorMenuItem.setSelection(false);
+
+                if(!viewDirectorMenuItem.isDisposed()){
+                    viewDirectorMenuItem.setSelection(false);
+                }
             }
             
         });
@@ -540,9 +542,9 @@
         tabItemActor.addDisposeListener(new DisposeListener() {
 
             public void widgetDisposed(DisposeEvent evt) {
-                System.out
-                    .println("tabItemActor.widgetDisposed, event=" + evt);
+                if(!viewActorMenuItem.isDisposed()){
                 viewActorMenuItem.setSelection(false);
+                }
             }
             
         });
@@ -562,9 +564,9 @@
         tabItemGenre.addDisposeListener(new DisposeListener() {
 
             public void widgetDisposed(DisposeEvent evt) {
-                System.out
-                    .println("tabItemGenre.widgetDisposed, event=" + evt);
+                if(!viewGenreMenuItem.isDisposed()){
                 viewGenreMenuItem.setSelection(false);
+                }
             }
             
         });
@@ -585,9 +587,9 @@
         tabItemLanguage.addDisposeListener(new DisposeListener() {
 
             public void widgetDisposed(DisposeEvent evt) {
-                System.out
-                    .println("tabItemLanguage.widgetDisposed, event=" + evt);
+if(!viewLanguageMenuItem.isDisposed()){
                 viewLanguageMenuItem.setSelection(false);
+}
             }
             
         });



From rgriesch at sheep.berlios.de  Wed Nov 10 14:41:17 2004
From: rgriesch at sheep.berlios.de (Remo Griesch at BerliOS)
Date: Wed, 10 Nov 2004 14:41:17 +0100
Subject: [Provirent-svn-commit] r121 - in project_src/provirent_hibernate: . src/de/hsharz/provirent/management/gui src/de/hsharz/provirent/management/gui/language
Message-ID: <200411101341.iAADfHIR012180@sheep.berlios.de>

Author: rgriesch
Date: 2004-11-10 14:41:15 +0100 (Wed, 10 Nov 2004)
New Revision: 121

Modified:
   project_src/provirent_hibernate/.classpath
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeActors.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/StatusLineStyledText.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/actors.properties
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/main.properties
Log:
ManagementGui Mindestfenstergr?\195?\182?\195?\159e festgelegt
Firebird.jar angepasst
Compsite Actros ge?\195?\164ndert

Modified: project_src/provirent_hibernate/.classpath
===================================================================
--- project_src/provirent_hibernate/.classpath	2004-11-10 10:03:11 UTC (rev 120)
+++ project_src/provirent_hibernate/.classpath	2004-11-10 13:41:15 UTC (rev 121)
@@ -42,6 +42,6 @@
 	<classpathentry sourcepath="ECLIPSE_HOME/plugins/org.eclipse.platform.source.win32.win32.x86_3.0.1/src/org.eclipse.swt.win32_3.0.1/ws/win32/swtsrc.zip" kind="var" path="ECLIPSE_HOME/plugins/org.eclipse.swt.win32_3.0.1/ws/win32/swt.jar"/>
 	<classpathentry kind="lib" path="lib/activation.jar"/>
 	<classpathentry kind="lib" path="lib/mail.jar"/>
-	<classpathentry kind="lib" path="C:/Schule/Projektarbeit/provirent/project_src/provirent_hibernate/lib/firebirdsql.jar"/>
+	<classpathentry kind="lib" path="lib/firebirdsql.jar"/>
 	<classpathentry kind="output" path="bin"/>
 </classpath>

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeActors.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeActors.java	2004-11-10 10:03:11 UTC (rev 120)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeActors.java	2004-11-10 13:41:15 UTC (rev 121)
@@ -6,15 +6,29 @@
 
 import org.apache.log4j.Logger;
 import org.eclipse.swt.SWT;
-import org.eclipse.swt.layout.GridData;
+import org.eclipse.swt.custom.SashForm;
+import org.eclipse.swt.events.FocusAdapter;
+import org.eclipse.swt.events.FocusEvent;
+import org.eclipse.swt.events.SelectionAdapter;
+import org.eclipse.swt.events.SelectionEvent;
+import org.eclipse.swt.layout.FormData;
+import org.eclipse.swt.layout.FormLayout;
 import org.eclipse.swt.layout.GridLayout;
+import org.eclipse.swt.widgets.Button;
 import org.eclipse.swt.widgets.Composite;
 import org.eclipse.swt.widgets.Display;
-import org.eclipse.swt.widgets.Group;
+import org.eclipse.swt.widgets.Event;
+import org.eclipse.swt.widgets.Label;
+import org.eclipse.swt.widgets.Listener;
 import org.eclipse.swt.widgets.Shell;
-import org.eclipse.swt.widgets.Text;
 
+
+import org.eclipse.swt.widgets.Group;
+import org.eclipse.swt.layout.GridData;
 import com.cloudgarden.resource.SWTResourceManager;
+import org.eclipse.swt.widgets.Text;
+import org.eclipse.swt.widgets.Table;
+import org.eclipse.swt.widgets.TableColumn;
 /**
 * This code was generated using CloudGarden's Jigloo
 * SWT/Swing GUI Builder, which is free for non-commercial
@@ -46,13 +60,26 @@
     
     
     private final static int MODE_VIEW = 0;
-
     private final static int MODE_ADD = 1;
-    private Text text1;
-    private Group groupActor;
-
     private final static int MODE_EDIT = 2;
     
+    private Table tableActorsOverview;
+    private TableColumn tableActorsOverview_ColumnID;
+    private TableColumn tableActorsOverview_ColumnFName;
+    private TableColumn tableActorsOverview_ColumnLName;
+    
+    
+    private SashForm sashForm1;
+    private SashForm sashForm2;
+    
+    private Group groupActor;
+    private Group groupActorsOverview;
+    private Group groupActorsDetail;
+    
+    private Text textActorsSearch;
+    
+    private Label labelActorsSearch;
+    
     private StatusLineStyledText statusLine;
 
     private ResourceBundle l;
@@ -75,7 +102,7 @@
     public void initLanguage(Locale locale) {
 
         l = PropertyResourceBundle.getBundle(
-                "de.hsharz.provirent.management.gui.language.actors", locale);
+                "de.hsharz.provirent.managment.gui.language.actors", locale);
 
     }
     
@@ -135,16 +162,181 @@
             groupActor.setLayoutData(groupActorLData);
             groupActorLayout.makeColumnsEqualWidth = true;
             groupActor.setLayout(groupActorLayout);
-            groupActor.setText("Actor");
+            groupActor.setText(l.getString("actors.group.label"));
             {
-                text1 = new Text(groupActor, SWT.MULTI | SWT.WRAP);
-                text1.setText("text1");
-                GridData text1LData = new GridData();
-                text1.setBackground(SWTResourceManager.getColor(255, 0, 0));
-                text1LData.widthHint = 336;
-                text1LData.heightHint = 173;
-                text1.setLayoutData(text1LData);
+                sashForm2 = new SashForm(groupActor, SWT.NONE);
+                GridData sashForm2LData = new GridData();
+                sashForm2LData.verticalAlignment = GridData.FILL;
+                sashForm2LData.horizontalAlignment = GridData.FILL;
+                sashForm2LData.grabExcessHorizontalSpace = true;
+                sashForm2LData.grabExcessVerticalSpace = true;
+                sashForm2.setLayoutData(sashForm2LData);
+                // Group Actors Overview 
+                {
+                    groupActorsOverview = new Group(sashForm2,SWT.NONE);
+                    GridLayout group1Layout = new GridLayout();
+                    groupActorsOverview.setBounds(0, 0, 781, 487);
+                    groupActorsOverview.setBounds(0, 0, 647, 448);
+                    group1Layout.makeColumnsEqualWidth = true;
+                    GridData group1LData = new GridData();
+                    group1Layout.makeColumnsEqualWidth = true;
+                    groupActorsOverview.setLayout(group1Layout);
+                    groupActorsOverview.setText(l.getString("actors.groupoverview.label"));
+                    {
+                        tableActorsOverview = new Table(
+                            groupActorsOverview,
+                            SWT.SINGLE
+                                | SWT.FULL_SELECTION
+                                | SWT.V_SCROLL | SWT.BORDER);
+                        GridData tableActorsOverviewLData = new GridData();
+                        tableActorsOverview.setHeaderVisible(true);
+                        tableActorsOverview.setLinesVisible(true);
+                        tableActorsOverviewLData.horizontalAlignment = GridData.FILL;
+                        tableActorsOverviewLData.verticalAlignment = GridData.FILL;
+                        tableActorsOverviewLData.horizontalSpan = 8;
+                        tableActorsOverviewLData.grabExcessHorizontalSpace = true;
+                        tableActorsOverviewLData.grabExcessVerticalSpace = true;
+                        tableActorsOverview
+                            .setLayoutData(tableActorsOverviewLData);
+                        tableActorsOverview
+                            .addFocusListener(new FocusAdapter() {
+                                public void focusLost(FocusEvent evt) {
+                                    System.out
+                                        .println("tableActorsOverview.focusLost, event="
+                                            + evt);
+                                    //TODO add your code for tableVideoFormat.focusLost
+                                }
+                                public void focusGained(FocusEvent evt) {
+                                    System.out
+                                        .println("tableActorsOverview.focusGained, event="
+                                            + evt);
+                                    //TODO add your code for tableVideoFormat.focusGained
+                                }
+                            });
+                        tableActorsOverview
+                            .addSelectionListener(new SelectionAdapter() {
+                                public void widgetSelected(SelectionEvent evt) {
+                                    if (logger.isDebugEnabled()) {
+                                        logger
+                                            .debug("widgetSelected(SelectionEvent evt = "
+                                                + evt
+                                                + ") - start");
+                                    }
+
+                                    int index = tableActorsOverview
+                                        .getSelectionIndex();
+
+                                    System.out.println("Table select. id: "
+                                        + index
+                                        + " TableItem:"
+                                        + tableActorsOverview.getItem(index)
+                                        + " id: "
+                                        + tableActorsOverview.getItem(index)
+                                            .getText(0));
+
+                                    //es wurde ein Element aus Tabelle ausgewaehlt jetzt muss die
+                                    //Detailansicht aktualisiert werden
+                                    //                               refreshActorsDetail(tableActorsOverview.getItem(index)
+                                    //                                   .getText(0));
+
+                                    if (logger.isDebugEnabled()) {
+                                        logger
+                                            .debug("widgetSelected(SelectionEvent) - end");
+                                    }
+                                }
+                            });
+
+                        {
+                            tableActorsOverview_ColumnID = new TableColumn(
+                                tableActorsOverview,
+                                SWT.CENTER);
+                            tableActorsOverview_ColumnID.setText(l
+                                .getString("actors.groupoverview.columnid"));
+                            tableActorsOverview_ColumnID.setWidth(40);
+                        }
+                        {
+                            tableActorsOverview_ColumnFName = new TableColumn(
+                                tableActorsOverview,
+                                SWT.CENTER);
+                            tableActorsOverview_ColumnFName.setText(l
+                                .getString("actors.groupoverview.columnid"));
+                            tableActorsOverview_ColumnFName.setWidth(80);
+                        }
+                        {
+                            tableActorsOverview_ColumnLName = new TableColumn(
+                                tableActorsOverview,
+                                SWT.CENTER);
+                            tableActorsOverview_ColumnLName.setText(l
+                                .getString("actors.groupoverview.columnid"));
+                            tableActorsOverview_ColumnLName.setWidth(80);
+                        }
+                    }// table Actors Overview
+                    // table Actors Overview
+                    // Search
+                    {
+                        //label f?r die Suche
+                        labelActorsSearch = new Label(groupActorsOverview, SWT.NONE);
+                        labelActorsSearch.setText(l
+                                .getString("actors.groupoverview.searchlabel")
+                                + ":");
+                        GridData label2LData = new GridData();
+                        label2LData.horizontalSpan = 3;
+                        labelActorsSearch.setLayoutData(label2LData);
+
+                        //das Suchfeld
+                        textActorsSearch = new Text(groupActorsOverview, SWT.BORDER);
+                        GridData text2LData = new GridData();
+                        textActorsSearch.addFocusListener(new FocusAdapter() {
+                            public void focusLost(FocusEvent evt) {
+                                if (logger.isDebugEnabled()) {
+                                    logger.debug("focusLost(FocusEvent evt = " + evt + " "
+                                            + textActorsSearch.getText() + ") - start");
+                                }
+
+                   //             refreshVideoFormatTable(textVideoFormatSearch.getText());
+
+                                if (logger.isDebugEnabled()) {
+                                    logger.debug("focusLost(FocusEvent) - end");
+                                }
+                            }
+                        });
+                        textActorsSearch.addListener(SWT.DefaultSelection, new Listener() {
+                            public void handleEvent(Event e) {
+                                if (logger.isDebugEnabled()) {
+                                    logger.debug("handleEvent(Event e = " + e + " "
+                                            + textActorsSearch.getText() + ") - start");
+                                }
+
+                //                refreshVideoFormatTable(textActorsSearch.getText());
+
+                                if (logger.isDebugEnabled()) {
+                                    logger.debug("handleEvent(Event) - end");
+                                }
+                            }
+                        });
+                        text2LData.horizontalAlignment = GridData.FILL;
+                        text2LData.horizontalSpan = 5;
+                        text2LData.grabExcessHorizontalSpace = true;
+                        textActorsSearch.setLayoutData(text2LData);
+                    }// Search
+                    
+                
+                }
+                // Group Actors Detail
+                {
+                    groupActorsDetail = new Group(sashForm2, SWT.NONE);
+                    GridLayout group2Layout = new GridLayout();
+                    groupActorsDetail.setBounds(0, 0, 781, 487);
+                    groupActorsDetail.setBounds(0, 0, 647, 448);
+                    group2Layout.makeColumnsEqualWidth = true;
+                    GridData group2LData = new GridData();
+                    group2Layout.makeColumnsEqualWidth = true;
+                    groupActorsDetail.setLayout(group2Layout);
+                    groupActorsDetail.setText(l.getString("actors.groupdetail.label"));   
+                }
             }
+            // init the rest of the layout
+            initActorsGroup();
         }
 
         this.layout();
@@ -156,6 +348,7 @@
         }
 	}
 
-	
+	private void initActorsGroup()  {	    
+	}
 
 }

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java	2004-11-10 10:03:11 UTC (rev 120)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java	2004-11-10 13:41:15 UTC (rev 121)
@@ -61,7 +61,24 @@
 
 import de.hsharz.provirent.management.exceptions.GuiInitException;
 import de.hsharz.provirent.persistence.Database;
+
 /**
+* This code was generated using CloudGarden's Jigloo
+* SWT/Swing GUI Builder, which is free for non-commercial
+* use. If Jigloo is being used commercially (ie, by a corporation,
+* company or business for any purpose whatever) then you
+* should purchase a license for each developer using Jigloo.
+* Please visit www.cloudgarden.com for details.
+* Use of Jigloo implies acceptance of these licensing terms.
+* *************************************
+* A COMMERCIAL LICENSE HAS NOT BEEN PURCHASED
+* for this machine, so Jigloo or this code cannot be used legally
+* for any corporate or commercial purpose.
+* *************************************
+*/
+import org.eclipse.swt.events.ControlAdapter;
+import org.eclipse.swt.events.ControlEvent;
+/**
  * @author Philipp Schneider
  *  
  */
@@ -77,9 +94,13 @@
 
     public final static int MODE_EDIT = 2;
 
-    private static final int MAIN_WINDOW_WIDTH = 700;
+    private static final int MAIN_WINDOW_WIDTH = 830;
 
-    private static final int MAIN_WINDOW_HEIGHT = 500;
+    private static final int MAIN_WINDOW_HEIGHT = 520;
+    private static final int MIN_WINDOW_WIDTH = 830;
+    private static final int MIN_WINDOW_HEIGHT = 520;
+    private static final int MIN_WINDOW_X = 50;
+    private static final int MIN_WINDOW_Y = 50;
 
     private CTabFolder cTabFolderMain;
 
@@ -196,7 +217,7 @@
         shell.setText(l.getString("mainwindow.title"));
 
         //set the Site
-        shell.setSize(476, 216);
+        shell.setSize(MAIN_WINDOW_WIDTH, MAIN_WINDOW_HEIGHT);
 
         {
             //Register as a resource user - SWTResourceManager will
@@ -205,6 +226,16 @@
         }
         //set the layout for the shell
         FillLayout thisLayout = new FillLayout(SWT.HORIZONTAL);
+        shell.addControlListener(new ControlAdapter() {
+            public void controlResized(ControlEvent evt) {
+                //TODO add your code for shell.controlResized
+                //min Size of the Main Window
+                if (shell.getBounds().height < 520 || shell.getBounds().width < 830) {
+                    shell.setBounds(MIN_WINDOW_X,MIN_WINDOW_Y,MIN_WINDOW_WIDTH,MIN_WINDOW_HEIGHT);
+                    statusLine.setStatus(StatusLineStyledText.STATUS_WARN,l.getString("status.resizewarn")); 
+                }                         
+            }
+        });
         shell.setLayout(thisLayout);
         
        

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/StatusLineStyledText.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/StatusLineStyledText.java	2004-11-10 10:03:11 UTC (rev 120)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/StatusLineStyledText.java	2004-11-10 13:41:15 UTC (rev 121)
@@ -43,9 +43,11 @@
 public class StatusLineStyledText extends StyledText {
 
     private static final int SLEEP_TIME = 5;
+    public static final int STATUS_INFO =1; 
+    public static final int STATUS_WARN =2;
+    public static final int STATUS_STANDARD =0;
+    public static final int STATUS_ERROR =3;
     
-    
-    
     public void setStatus(final int mode, final String message) {
         /**
          * mode values 0 normal message 1 information message 2 warn message 3

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/actors.properties
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/actors.properties	2004-11-10 10:03:11 UTC (rev 120)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/actors.properties	2004-11-10 13:41:15 UTC (rev 121)
@@ -0,0 +1,10 @@
+actors.group.label=Darsteller
+
+actors.groupoverview.label = ?berblick
+actors.groupoverview.searchlabel = Suche nach
+actors.groupoverview.columnid = ID
+actors.groupoverview.columnfirstname = Vorname
+actors.groupoverview.columnlastname = Nachname
+
+
+actors.groupdetail.label = Detail
\ No newline at end of file

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/main.properties
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/main.properties	2004-11-10 10:03:11 UTC (rev 120)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/main.properties	2004-11-10 13:41:15 UTC (rev 121)
@@ -41,3 +41,4 @@
 tab.status.title=
 tab.condition.title=
 tab.movie.title=
+status.resizewarn=Fenster kann Mindestgr??e nicht unterschreiten.
\ No newline at end of file



From rgriesch at sheep.berlios.de  Wed Nov 10 14:44:45 2004
From: rgriesch at sheep.berlios.de (Remo Griesch at BerliOS)
Date: Wed, 10 Nov 2004 14:44:45 +0100
Subject: [Provirent-svn-commit] r122 - project_src/provirent_hibernate/bin
Message-ID: <200411101344.iAADijLM012995@sheep.berlios.de>

Author: rgriesch
Date: 2004-11-10 14:44:44 +0100 (Wed, 10 Nov 2004)
New Revision: 122

Removed:
   project_src/provirent_hibernate/bin/com/
Log:
- aus bin com verzeichniss gel?\195?\182scht



From rgriesch at sheep.berlios.de  Thu Nov 11 00:04:22 2004
From: rgriesch at sheep.berlios.de (Remo Griesch at BerliOS)
Date: Thu, 11 Nov 2004 00:04:22 +0100
Subject: [Provirent-svn-commit] r123 - in project_src/provirent_hibernate/src: com/cloudgarden/resource de/hsharz/provirent/management/gui de/hsharz/provirent/management/gui/language de/hsharz/provirent/objects de/hsharz/provirent/persistence
Message-ID: <200411102304.iAAN4MPk010253@sheep.berlios.de>

Author: rgriesch
Date: 2004-11-11 00:04:21 +0100 (Thu, 11 Nov 2004)
New Revision: 123

Modified:
   project_src/provirent_hibernate/src/com/cloudgarden/resource/SWTResourceManager.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeActors.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeFormate.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeGenre.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/actors.properties
   project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Actor.hbm.xml
   project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java
Log:
Composite actors beendet

Modified: project_src/provirent_hibernate/src/com/cloudgarden/resource/SWTResourceManager.java
===================================================================
--- project_src/provirent_hibernate/src/com/cloudgarden/resource/SWTResourceManager.java	2004-11-10 13:44:44 UTC (rev 122)
+++ project_src/provirent_hibernate/src/com/cloudgarden/resource/SWTResourceManager.java	2004-11-10 23:04:21 UTC (rev 123)
@@ -15,7 +15,7 @@
 import org.eclipse.swt.widgets.Display;
 import org.eclipse.swt.widgets.Widget;
 
-/**
+/** 
  * Class to manage SWT resources (Font, Color, Image and Cursor)
  * There are no restrictions on the use of this code.
  */

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeActors.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeActors.java	2004-11-10 13:44:44 UTC (rev 122)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeActors.java	2004-11-10 23:04:21 UTC (rev 123)
@@ -1,5 +1,6 @@
 package de.hsharz.provirent.management.gui;
 
+import java.text.MessageFormat;
 import java.util.Locale;
 import java.util.PropertyResourceBundle;
 import java.util.ResourceBundle;
@@ -11,24 +12,28 @@
 import org.eclipse.swt.events.FocusEvent;
 import org.eclipse.swt.events.SelectionAdapter;
 import org.eclipse.swt.events.SelectionEvent;
+import org.eclipse.swt.layout.FormAttachment;
 import org.eclipse.swt.layout.FormData;
-import org.eclipse.swt.layout.FormLayout;
+import org.eclipse.swt.layout.GridData;
 import org.eclipse.swt.layout.GridLayout;
 import org.eclipse.swt.widgets.Button;
 import org.eclipse.swt.widgets.Composite;
 import org.eclipse.swt.widgets.Display;
 import org.eclipse.swt.widgets.Event;
+import org.eclipse.swt.widgets.Group;
 import org.eclipse.swt.widgets.Label;
 import org.eclipse.swt.widgets.Listener;
 import org.eclipse.swt.widgets.Shell;
+import org.eclipse.swt.widgets.Table;
+import org.eclipse.swt.widgets.TableColumn;
+import org.eclipse.swt.widgets.TableItem;
+import org.eclipse.swt.widgets.Text;
 
+import com.cloudgarden.resource.SWTResourceManager;
 
-import org.eclipse.swt.widgets.Group;
-import org.eclipse.swt.layout.GridData;
-import com.cloudgarden.resource.SWTResourceManager;
-import org.eclipse.swt.widgets.Text;
-import org.eclipse.swt.widgets.Table;
-import org.eclipse.swt.widgets.TableColumn;
+import de.hsharz.provirent.objects.Actor;
+import de.hsharz.provirent.persistence.DataBaseException;
+import de.hsharz.provirent.persistence.Database;
 /**
 * This code was generated using CloudGarden's Jigloo
 * SWT/Swing GUI Builder, which is free for non-commercial
@@ -77,14 +82,30 @@
     private Group groupActorsDetail;
     
     private Text textActorsSearch;
+    private Text textActorsID;
+    private Text textActorsFName;
+    private Text textActorsLName;
     
     private Label labelActorsSearch;
+    private Label labelActorsID;
+    private Label labelActorsFName;
+    private Label labelActorsLName;
     
+    private Button buttonActorsNew;
+    private Button buttonActorsSave;
+    private Button buttonActorsEdit;
+    private Button buttonActorsCancel;
+    private Button buttonActorsDelete;
+    private Button buttonActorsFill;
+    
+    protected int mode_actor;
+    
     private StatusLineStyledText statusLine;
 
     private ResourceBundle l;
     
     private Composite parent;
+    private Composite compositeButtons;
     
     /*
      * ?ndert die Sprache aller Elemente
@@ -102,7 +123,7 @@
     public void initLanguage(Locale locale) {
 
         l = PropertyResourceBundle.getBundle(
-                "de.hsharz.provirent.managment.gui.language.actors", locale);
+                "de.hsharz.provirent.management.gui.language.actors", locale);
 
     }
     
@@ -171,184 +192,627 @@
                 sashForm2LData.grabExcessHorizontalSpace = true;
                 sashForm2LData.grabExcessVerticalSpace = true;
                 sashForm2.setLayoutData(sashForm2LData);
-                // Group Actors Overview 
-                {
-                    groupActorsOverview = new Group(sashForm2,SWT.NONE);
-                    GridLayout group1Layout = new GridLayout();
-                    groupActorsOverview.setBounds(0, 0, 781, 487);
-                    groupActorsOverview.setBounds(0, 0, 647, 448);
-                    group1Layout.makeColumnsEqualWidth = true;
-                    GridData group1LData = new GridData();
-                    group1Layout.makeColumnsEqualWidth = true;
-                    groupActorsOverview.setLayout(group1Layout);
-                    groupActorsOverview.setText(l.getString("actors.groupoverview.label"));
-                    {
-                        tableActorsOverview = new Table(
-                            groupActorsOverview,
-                            SWT.SINGLE
-                                | SWT.FULL_SELECTION
-                                | SWT.V_SCROLL | SWT.BORDER);
-                        GridData tableActorsOverviewLData = new GridData();
-                        tableActorsOverview.setHeaderVisible(true);
-                        tableActorsOverview.setLinesVisible(true);
-                        tableActorsOverviewLData.horizontalAlignment = GridData.FILL;
-                        tableActorsOverviewLData.verticalAlignment = GridData.FILL;
-                        tableActorsOverviewLData.horizontalSpan = 8;
-                        tableActorsOverviewLData.grabExcessHorizontalSpace = true;
-                        tableActorsOverviewLData.grabExcessVerticalSpace = true;
-                        tableActorsOverview
-                            .setLayoutData(tableActorsOverviewLData);
-                        tableActorsOverview
-                            .addFocusListener(new FocusAdapter() {
-                                public void focusLost(FocusEvent evt) {
-                                    System.out
-                                        .println("tableActorsOverview.focusLost, event="
-                                            + evt);
-                                    //TODO add your code for tableVideoFormat.focusLost
-                                }
-                                public void focusGained(FocusEvent evt) {
-                                    System.out
-                                        .println("tableActorsOverview.focusGained, event="
-                                            + evt);
-                                    //TODO add your code for tableVideoFormat.focusGained
-                                }
-                            });
-                        tableActorsOverview
-                            .addSelectionListener(new SelectionAdapter() {
-                                public void widgetSelected(SelectionEvent evt) {
-                                    if (logger.isDebugEnabled()) {
-                                        logger
-                                            .debug("widgetSelected(SelectionEvent evt = "
-                                                + evt
-                                                + ") - start");
-                                    }
+                
+               
+            }
+            // init the rest of the layout
+            initActorsOverview();
+            initActorsDetail();
+            refreshActorsOverviewTable(textActorsSearch.getText());
+        }
 
-                                    int index = tableActorsOverview
-                                        .getSelectionIndex();
+        this.layout();
 
-                                    System.out.println("Table select. id: "
-                                        + index
-                                        + " TableItem:"
-                                        + tableActorsOverview.getItem(index)
-                                        + " id: "
-                                        + tableActorsOverview.getItem(index)
-                                            .getText(0));
 
-                                    //es wurde ein Element aus Tabelle ausgewaehlt jetzt muss die
-                                    //Detailansicht aktualisiert werden
-                                    //                               refreshActorsDetail(tableActorsOverview.getItem(index)
-                                    //                                   .getText(0));
+        
+        if (logger.isDebugEnabled()) {
+            logger.debug("initGUI() - end");
+        }
+	}
 
-                                    if (logger.isDebugEnabled()) {
-                                        logger
-                                            .debug("widgetSelected(SelectionEvent) - end");
-                                    }
-                                }
-                            });
+	
+	private void initActorsOverview()  {	    
+//	  Group Actors Overview 
+        {
+            groupActorsOverview = new Group(sashForm2,SWT.NONE);
+            GridLayout group1Layout = new GridLayout();
+            group1Layout.numColumns = 8;
+            groupActorsOverview.setLayout(group1Layout);
+            groupActorsOverview.setText(l.getString("actors.groupoverview.label"));
+            
+            {// table Actors Overview
+                tableActorsOverview = new Table(
+                    groupActorsOverview,
+                    SWT.SINGLE
+                        | SWT.FULL_SELECTION
+                        | SWT.V_SCROLL | SWT.BORDER);
+                GridData tableActorsOverviewLData = new GridData();
+                tableActorsOverview.setHeaderVisible(true);
+                tableActorsOverview.setLinesVisible(true);
+                tableActorsOverviewLData.horizontalAlignment = GridData.FILL;
+                tableActorsOverviewLData.verticalAlignment = GridData.FILL;
+                tableActorsOverviewLData.horizontalSpan = 8;
+                tableActorsOverviewLData.grabExcessHorizontalSpace = true;
+                tableActorsOverviewLData.grabExcessVerticalSpace = true;
+                tableActorsOverview.setLayoutData(tableActorsOverviewLData);
+                tableActorsOverview.addFocusListener(new FocusAdapter() {
+                        public void focusLost(FocusEvent evt) {
+                            System.out
+                                .println("tableActorsOverview.focusLost, event="
+                                    + evt);
+                        }
+                        public void focusGained(FocusEvent evt) {
+                            System.out
+                                .println("tableActorsOverview.focusGained, event="
+                                    + evt);
+                        }
+                    });
+                tableActorsOverview.addSelectionListener(new SelectionAdapter() {
+                        public void widgetSelected(SelectionEvent evt) {
+                            if (logger.isDebugEnabled()) {
+                                logger
+                                    .debug("widgetSelected(SelectionEvent evt = "
+                                        + evt
+                                        + ") - start");
+                            }
 
-                        {
-                            tableActorsOverview_ColumnID = new TableColumn(
-                                tableActorsOverview,
-                                SWT.CENTER);
-                            tableActorsOverview_ColumnID.setText(l
-                                .getString("actors.groupoverview.columnid"));
-                            tableActorsOverview_ColumnID.setWidth(40);
+                            int index = tableActorsOverview
+                                .getSelectionIndex();
+
+                            System.out.println("Table select. id: "
+                                + index
+                                + " TableItem:"
+                                + tableActorsOverview.getItem(index)
+                                + " id: "
+                                + tableActorsOverview.getItem(index)
+                                    .getText(0));
+
+                            //es wurde ein Element aus Tabelle ausgewaehlt jetzt muss die
+                            //Detailansicht aktualisiert werden
+                            refreshActorsDetail(tableActorsOverview.getItem(index)
+                                                              .getText(0));
+
+                            if (logger.isDebugEnabled()) {
+                                logger
+                                    .debug("widgetSelected(SelectionEvent) - end");
+                            }
                         }
-                        {
-                            tableActorsOverview_ColumnFName = new TableColumn(
-                                tableActorsOverview,
-                                SWT.CENTER);
-                            tableActorsOverview_ColumnFName.setText(l
-                                .getString("actors.groupoverview.columnid"));
-                            tableActorsOverview_ColumnFName.setWidth(80);
+                    });
+                {
+                    tableActorsOverview_ColumnID = new TableColumn(
+                        tableActorsOverview,
+                        SWT.CENTER);
+                    tableActorsOverview_ColumnID.setText(l
+                        .getString("actors.groupoverview.columnid"));
+                    tableActorsOverview_ColumnID.setWidth(40);
+                }
+                {
+                    tableActorsOverview_ColumnFName = new TableColumn(
+                        tableActorsOverview,
+                        SWT.CENTER);
+                    tableActorsOverview_ColumnFName.setText(l
+                        .getString("actors.groupoverview.columnfirstname"));
+                    tableActorsOverview_ColumnFName.setWidth(80);
+                }
+                {
+                    tableActorsOverview_ColumnLName = new TableColumn(
+                        tableActorsOverview,
+                        SWT.CENTER);
+                    tableActorsOverview_ColumnLName.setText(l
+                        .getString("actors.groupoverview.columnlastname"));
+                    tableActorsOverview_ColumnLName.setWidth(80);
+                }
+            }
+            // table Actors Overview
+            // Search
+            {
+                //label for Search
+                labelActorsSearch = new Label(groupActorsOverview, SWT.NONE);
+                labelActorsSearch.setText(l
+                        .getString("actors.groupoverview.searchlabel")
+                        + ":");
+                GridData label2LData = new GridData();
+                label2LData.horizontalSpan = 3;
+                labelActorsSearch.setLayoutData(label2LData);
+
+                //text Search
+                textActorsSearch = new Text(groupActorsOverview, SWT.BORDER);
+                GridData text2LData = new GridData();
+                textActorsSearch.addFocusListener(new FocusAdapter() {
+                    public void focusLost(FocusEvent evt) {
+                        if (logger.isDebugEnabled()) {
+                            logger.debug("focusLost(FocusEvent evt = " + evt + " "
+                                    + textActorsSearch.getText() + ") - start");
                         }
-                        {
-                            tableActorsOverview_ColumnLName = new TableColumn(
-                                tableActorsOverview,
-                                SWT.CENTER);
-                            tableActorsOverview_ColumnLName.setText(l
-                                .getString("actors.groupoverview.columnid"));
-                            tableActorsOverview_ColumnLName.setWidth(80);
+
+                        refreshActorsOverviewTable(textActorsSearch.getText());
+
+                        if (logger.isDebugEnabled()) {
+                            logger.debug("focusLost(FocusEvent) - end");
                         }
-                    }// table Actors Overview
-                    // table Actors Overview
-                    // Search
-                    {
-                        //label f?r die Suche
-                        labelActorsSearch = new Label(groupActorsOverview, SWT.NONE);
-                        labelActorsSearch.setText(l
-                                .getString("actors.groupoverview.searchlabel")
-                                + ":");
-                        GridData label2LData = new GridData();
-                        label2LData.horizontalSpan = 3;
-                        labelActorsSearch.setLayoutData(label2LData);
+                    }
+                });
+                textActorsSearch.addListener(SWT.DefaultSelection, new Listener() {
+                    public void handleEvent(Event e) {
+                        if (logger.isDebugEnabled()) {
+                            logger.debug("handleEvent(Event e = " + e + " "
+                                    + textActorsSearch.getText() + ") - start");
+                        }
 
-                        //das Suchfeld
-                        textActorsSearch = new Text(groupActorsOverview, SWT.BORDER);
-                        GridData text2LData = new GridData();
-                        textActorsSearch.addFocusListener(new FocusAdapter() {
-                            public void focusLost(FocusEvent evt) {
-                                if (logger.isDebugEnabled()) {
-                                    logger.debug("focusLost(FocusEvent evt = " + evt + " "
-                                            + textActorsSearch.getText() + ") - start");
-                                }
+                        refreshActorsOverviewTable(textActorsSearch.getText());
 
-                   //             refreshVideoFormatTable(textVideoFormatSearch.getText());
+                        if (logger.isDebugEnabled()) {
+                            logger.debug("handleEvent(Event) - end");
+                        }
+                    }
+                });
+                text2LData.horizontalAlignment = GridData.FILL;
+                text2LData.horizontalSpan = 5;
+                text2LData.grabExcessHorizontalSpace = true;
+                textActorsSearch.setLayoutData(text2LData);
+            }// Search                    
+        }
+	}
+	
+	private void initActorsDetail()  {	    
+	    // Group Actors Detail
+        {
+            groupActorsDetail = new Group(sashForm2, SWT.NONE);
+            GridLayout group2Layout = new GridLayout();
+            GridData group2LData = new GridData();
+            group2Layout.verticalSpacing = 15;
+            group2Layout.numColumns = 6;
+            groupActorsDetail.setText(l.getString("actors.groupdetail.label"));   
+            FormData formData = new FormData();
+            groupActorsDetail.setLayout(group2Layout);
+            formData.right = new FormAttachment(100, 100, -5);
+            formData.top = new FormAttachment(0, 100, 5);
+            formData.bottom = new FormAttachment(100, 100, -5);
+            groupActorsDetail.setLayoutData(formData);
+        }
+        	// labels and buttons for detail
+        	{
+        	    labelActorsID = new Label(groupActorsDetail, SWT.NONE);
+        	    labelActorsID.setText(l
+        	            .getString("actors.groupdetail.labelid")
+        	            + ":");
+        	    labelActorsID.setSize(125, 15);
+        	    GridData formData2 = new GridData();
+        	    formData2.widthHint = 125;
+        	    formData2.heightHint = 15;
+        	    formData2.horizontalSpan = 2;
+        	    labelActorsID.setLayoutData(formData2);
+        	}
+        	{
+        	    textActorsID = new Text(
+        	            groupActorsDetail,
+        	            SWT.READ_ONLY | SWT.BORDER);
+        	    GridData text1LData1 = new GridData();
+        	    text1LData1.horizontalAlignment = GridData.FILL;
+        	    text1LData1.heightHint = 13;
+        	    text1LData1.horizontalSpan = 4;
+        	    text1LData1.grabExcessHorizontalSpace = true;
+        	    textActorsID.setLayoutData(text1LData1);
+        	}
+        	{
+                labelActorsFName = new Label(
+                    groupActorsDetail,
+                    SWT.NONE);
+                labelActorsFName.setText(l
+                    .getString("actors.groupdetail.labelfirstname")
+                    + ":");
+                labelActorsFName.setSize(125, 15);
+                GridData labelActorNameLData = new GridData();
+                labelActorNameLData.widthHint = 125;
+                labelActorNameLData.heightHint = 15;
+                labelActorNameLData.horizontalSpan = 2;
+                labelActorsFName
+                    .setLayoutData(labelActorNameLData);
+            }
+            {
+        	    textActorsFName = new Text(groupActorsDetail,
+        	            SWT.READ_ONLY | SWT.BORDER);
+        	    GridData text1LData2 = new GridData();
+        	    text1LData2.horizontalAlignment = GridData.FILL;
+        	    text1LData2.heightHint = 13;
+        	    text1LData2.horizontalSpan = 4;
+        	    text1LData2.grabExcessHorizontalSpace = true;
+        	    textActorsFName.setLayoutData(text1LData2);
+        	}
+            {
+        	    labelActorsLName = new Label(groupActorsDetail,
+        	            SWT.NONE);
+        	    labelActorsLName.setText(l
+        	            .getString("actors.groupdetail.labellastname")
+        	            + ":");
+        	    labelActorsLName.setSize(125, 15);
+        	    GridData label1LData1 = new GridData();
+        	    label1LData1.widthHint = 125;
+        	    label1LData1.heightHint = 15;
+        	    label1LData1.horizontalSpan = 2;
+        	    labelActorsLName.setLayoutData(label1LData1);
+        	}
+        	{
+        	    textActorsLName = new Text(groupActorsDetail,
+        	            SWT.READ_ONLY | SWT.BORDER);
+        	    GridData text1LData3 = new GridData();
+        	    text1LData3.horizontalAlignment = GridData.FILL;
+        	    text1LData3.heightHint = 13;
+        	    text1LData3.horizontalSpan = 4;
+        	    text1LData3.grabExcessHorizontalSpace = true;
+        	    textActorsLName.setLayoutData(text1LData3);
+        	}// label and buttons for detail      
+        	// buttons for detail
+        	{
+        	    compositeButtons = new Composite(groupActorsDetail, SWT.EMBEDDED);
+        	    GridLayout composite2Layout = new GridLayout();
+        	    composite2Layout.numColumns = 6;
+        	    GridData composite2LData = new GridData();
+        	    compositeButtons.setLayout(composite2Layout);
+        	    composite2LData.verticalAlignment = GridData.END;
+        	    composite2LData.horizontalAlignment = GridData.CENTER;
+        	    composite2LData.widthHint = 391;
+        	    composite2LData.horizontalSpan = 6;
+        	    composite2LData.grabExcessHorizontalSpace = true;
+            	composite2LData.grabExcessVerticalSpace = true;
+            	composite2LData.heightHint = 35;
+            	compositeButtons.setLayoutData(composite2LData);
+        	}
+        	{
+        	    buttonActorsNew = new Button(compositeButtons, SWT.PUSH | SWT.CENTER);
+        	    buttonActorsNew.setText(l.getString("button.new"));
+        	    buttonActorsNew.addSelectionListener(new SelectionAdapter() {
+                public void widgetSelected(SelectionEvent evt) {
+                    
+                    mode_actor = ManagementGui.MODE_ADD;
+                    
+                    textActorsID.setText("");
+                    textActorsFName.setText("");
+                    textActorsLName.setText("");
+                    textActorsFName.setEditable(true);
+                    textActorsLName.setEditable(true);
+                    
+                    buttonActorsCancel.setEnabled(true);
+                    buttonActorsSave.setEnabled(true);
+                    buttonActorsNew.setEnabled(false);
+                    buttonActorsEdit.setEnabled(false);
+                    buttonActorsDelete.setEnabled(false);
+                    
+                    textActorsSearch.setEditable(false);
+                    tableActorsOverview.setEnabled(false);
 
-                                if (logger.isDebugEnabled()) {
-                                    logger.debug("focusLost(FocusEvent) - end");
-                                }
+                }
+            });
+
+        	    buttonActorsEdit = new Button(compositeButtons, SWT.PUSH | SWT.CENTER);
+        	    buttonActorsEdit.setText(l.getString("button.edit"));
+        	    buttonActorsEdit.setEnabled(false);
+        	    buttonActorsEdit.addSelectionListener(new SelectionAdapter() {
+                public void widgetSelected(SelectionEvent evt) {
+
+                    mode_actor = ManagementGui.MODE_EDIT;
+
+                    textActorsID.setEditable(false);
+                    textActorsFName.setEditable(true);
+                    textActorsFName.setFocus();
+                    textActorsLName.setEditable(true);
+                    
+                    buttonActorsCancel.setEnabled(true);
+                    buttonActorsSave.setEnabled(true);
+                    buttonActorsNew.setEnabled(false);
+                    buttonActorsEdit.setEnabled(false);
+                    buttonActorsDelete.setEnabled(false);
+
+                    tableActorsOverview.setEnabled(false);
+                    textActorsSearch.setEnabled(false);
+                    
+                }
+            });
+
+        	    buttonActorsDelete = new Button(compositeButtons, SWT.PUSH | SWT.CENTER);
+        	    buttonActorsDelete.setText(l.getString("button.delete"));
+        	    buttonActorsDelete.setEnabled(false);
+        	    buttonActorsDelete.addSelectionListener(new SelectionAdapter() {
+                public void widgetSelected(SelectionEvent evt) {
+                    System.out
+                            .println("buttonActorsDelete.widgetSelected, event="
+                                    + evt);
+                    
+                    
+                   String msg = MessageFormat.format(
+                           l.getString("actors.groupdetail.deletebutton.question.text"),
+                                   new Object[]{textActorsFName.getText()+" "+textActorsLName.getText()});
+                    
+                   int question = showMsg(msg,
+                           l.getString("actors.groupdetail.deletebutton.question.header"), 
+                           SWT.ICON_QUESTION | SWT.YES | SWT.NO);
+                   
+                   if (question != SWT.YES){
+                       return;
+                   }
+                    
+                    Actor o = new Actor();
+                    o.setActorId(new Integer(Integer.parseInt(textActorsID.getText())));
+                    o.setFirstName(textActorsFName.getText());
+                    o.setLastName(textActorsLName.getText());
+                    
+                    try {
+                        //object speichern
+                        // Fehlerbehandlung
+                        Database.deleteObject(o);
+
+                        //?bersichtsTabelle aktualisieren
+                        refreshActorsOverviewTable(textActorsSearch.getText());
+                        
+                        //Detailansicht leeren
+                        textActorsID.setText("");
+                        textActorsFName.setText("");
+                        textActorsLName.setText("");
+                        
+                        //in Tabelle n?chsten ausw?hlen
+                        try {
+                            tableActorsOverview.select(0);
+                        } catch (Exception ex) {}
+                        
+                        //Statusline Nachricht sezten
+                        statusLine.setStatus(1,l.getString("actors.groupdetail.deletebutton.newok"));
+
+                    } catch (DataBaseException e) {
+                        if (e.getMessage().equalsIgnoreCase("1")) {
+                            //Fehler beim Speichern des Objectes
+
+                            statusLine.setStatus(3,l.getString("actors.groupdetail.deletebutton.errorsave"));
+                            showMsg(l.getString("actors.groupdetail.deletebutton.errorsave"),
+                                    l.getString("error"), SWT.ICON_ERROR | SWT.OK);
+                            
+                        } else if (e.getMessage().equalsIgnoreCase("2")) {
+                            //fehler beim db aufbau
+                            statusLine.setStatus(3,l.getString("Actor.groupdetail.deletebutton.errordb"));
+                            showMsg(l.getString("actors.groupdetail.deletebutton.errordb"),
+                                    l.getString("error"), SWT.ICON_ERROR | SWT.OK);
+                            
+                        } else {
+                            //@todo
+                            e.printStackTrace();
+                        }
+                        
+                    }                
+                    
+
+                    }
+
+                }
+        	    );
+
+        	    //leerer nicht sichtbarer Button
+        	    buttonActorsFill = new Button(compositeButtons, SWT.PUSH | SWT.CENTER);
+        	    GridData buttonActorFillLData = new GridData();
+        	    buttonActorsFill.setVisible(false);
+        	    buttonActorsFill.setEnabled(false);
+        	    buttonActorFillLData.widthHint = 30;
+        	    buttonActorFillLData.heightHint = 23;
+        	    buttonActorsFill.setLayoutData(buttonActorFillLData);
+
+        	    buttonActorsSave = new Button(compositeButtons, SWT.PUSH | SWT.CENTER);
+        	    buttonActorsSave.setText(l.getString("button.save"));
+        	    buttonActorsSave.setEnabled(false);
+        	    buttonActorsSave.addSelectionListener(new SelectionAdapter() {
+                public void widgetSelected(SelectionEvent evt) {
+                    System.out
+                            .println("buttonActorsSave.widgetSelected, event="
+                                    + evt);
+
+                    
+                    //testen ob Name leer ist
+                    if (textActorsFName.getText().trim().equalsIgnoreCase("") 
+                        ||  textActorsLName.getText().trim().equalsIgnoreCase("")   ) {
+                        
+                        showMsg(l.getString("actors.groupdetail.savebutton.warn.noname.msg"),
+                                l.getString("actors.groupdetail.savebutton.warn.noname.title"),
+                                SWT.ICON_WARNING | SWT.YES);
+
+                        	return;
+                    }
+                    
+                    //testen welcher mode
+                    
+                    if (mode_actor == ManagementGui.MODE_ADD) {
+                        
+                        /**
+                         * @todo eine Exception bekommen wieder leider NOCH nicht mit
+                         * d.h. es muss noch ein r?ckgabewert kommen oder eine Exception 
+                         * ?bermitteln werden (aus der DB Klasse)
+                         */
+                        //neues Objekt erzeugen
+                        Actor tmp = new Actor(textActorsFName.getText(),
+                                textActorsLName.getText());
+                        
+                        try {
+                            //object speichern
+                            // Fehlerbehandlung
+                            Object o = Database.saveObject(
+                                    new Actor(textActorsFName.getText(),
+                                            textActorsLName.getText()));
+                            
+                            // in ?bersichtstabelle einf?gen
+                            insertIntoActorsOverviewTable((Actor)o);
+                            textActorsID.setText( ((Actor)o).getActorId()+"" );
+                            
+                            
+                            //Statusline Nachricht sezten
+                            statusLine.setStatus(1,l.getString("actors.groupdetail.savebutton.newok"));
+
+                        } catch (DataBaseException e) {
+                            if (e.getMessage().equalsIgnoreCase("1")) {
+                                //Fehler beim Speichern des Objectes
+
+                                statusLine.setStatus(3,l.getString("actors.groupdetail.savebutton.errorsave"));
+                                showMsg(l.getString("actors.groupdetail.savebutton.errorsave"),"Fehler", SWT.ICON_ERROR | SWT.OK);
+                                
+                            } else if (e.getMessage().equalsIgnoreCase("2")) {
+                                //fehler beim db aufbau
+                                statusLine.setStatus(3,l.getString("actors.groupdetail.savebutton.errordb"));
+                                showMsg(l.getString("actors.groupdetail.savebutton.errordb"),"Fehler", SWT.ICON_ERROR | SWT.OK);
+                                
+                            } else {
+                                //@todo
+                                e.printStackTrace();
                             }
-                        });
-                        textActorsSearch.addListener(SWT.DefaultSelection, new Listener() {
-                            public void handleEvent(Event e) {
-                                if (logger.isDebugEnabled()) {
-                                    logger.debug("handleEvent(Event e = " + e + " "
-                                            + textActorsSearch.getText() + ") - start");
-                                }
+                            
+                        }
+                        
+                        
+                        //alle Buttons auf aktiv setzen
+                        setActorsGroupButtonSaveCancel();
+                        
+                    } else if (mode_actor == ManagementGui.MODE_EDIT) {
+                        
+                        Actor tmp = new Actor(textActorsFName.getText(),
+                                        textActorsLName.getText());
+            		tmp.setActorId( new Integer (Integer.parseInt(textActorsID.getText())) );
+                    try {
+                        //object speichern
+                        // Fehlerbehandlung
+                        Database.saveObject(tmp);
+                        //?bersichtstabelle aktualisieren
+                        refreshActorsOverviewTable(textActorsSearch.getText());
+                        
+                        //Statusline Nachricht sezten
+                        statusLine.setStatus(1,l.getString("actors.groupdetail.savebutton.editok"));
+                       
 
-                //                refreshVideoFormatTable(textActorsSearch.getText());
+                    } catch (DataBaseException e) {
+                        if (e.getMessage().equalsIgnoreCase("1")) {
+                            //Fehler beim Speichern des Objectes
 
-                                if (logger.isDebugEnabled()) {
-                                    logger.debug("handleEvent(Event) - end");
-                                }
-                            }
-                        });
-                        text2LData.horizontalAlignment = GridData.FILL;
-                        text2LData.horizontalSpan = 5;
-                        text2LData.grabExcessHorizontalSpace = true;
-                        textActorsSearch.setLayoutData(text2LData);
-                    }// Search
+                            statusLine.setStatus(3,l.getString("actors.groupdetail.savebutton.errorsave"));
+                            showMsg(l.getString("actors.groupdetail.savebutton.errorsave"),"Fehler", SWT.ICON_ERROR | SWT.OK);
+                            
+                        } else if (e.getMessage().equalsIgnoreCase("2")) {
+                            //fehler beim db aufbau
+                            statusLine.setStatus(3,l.getString("actors.groupdetail.savebutton.errordb"));
+                            showMsg(l.getString("actors.groupdetail.savebutton.errordb"),"Fehler", SWT.ICON_ERROR | SWT.OK);
+                            
+                        } else {
+                            //@todo
+                            e.printStackTrace();
+                        }
+                        
+                    }
+                        
+     
+                        //alle Buttons auf aktiv setzen
+                        setActorsGroupButtonSaveCancel();
+                        
+                    }
                     
-                
+                    
+                    
+                    /**
+                     * @todo Exception werfen, da nur die zwei Modes sein d?rfen
+                     */
+                    
                 }
-                // Group Actors Detail
-                {
-                    groupActorsDetail = new Group(sashForm2, SWT.NONE);
-                    GridLayout group2Layout = new GridLayout();
-                    groupActorsDetail.setBounds(0, 0, 781, 487);
-                    groupActorsDetail.setBounds(0, 0, 647, 448);
-                    group2Layout.makeColumnsEqualWidth = true;
-                    GridData group2LData = new GridData();
-                    group2Layout.makeColumnsEqualWidth = true;
-                    groupActorsDetail.setLayout(group2Layout);
-                    groupActorsDetail.setText(l.getString("actors.groupdetail.label"));   
+            });
+
+        	    buttonActorsCancel = new Button(compositeButtons, SWT.PUSH | SWT.CENTER);
+        	    buttonActorsCancel.setText(l.getString("button.cancel"));
+        	    buttonActorsCancel.setEnabled(false);
+        	    buttonActorsCancel.addSelectionListener(new SelectionAdapter() {
+                public void widgetSelected(SelectionEvent evt) {
+                    System.out
+                            .println("buttonActorsCancel.widgetSelected, event="
+                                    + evt);
+                    setActorsGroupButtonSaveCancel();
                 }
+            });
+        }
+	}
+
+	 
+	
+	
+	/**
+     * @param text
+     */
+    private void refreshActorsDetail(final String id) {
+        Actor object;
+        try {
+            //since we only can get a String value from the table, we
+            //need to convert this
+            object = Database.getSingleActor(Integer.parseInt(id));
+
+            if (object == null) {
+
+                /*
+                 * 
+                 * @TODO Statusbar aktualiseren
+                 */
+                return;
             }
-            // init the rest of the layout
-            initActorsGroup();
+        } catch (Exception e) {
+            //id ist keine Zahl
+            return;
         }
 
-        this.layout();
+        textActorsID.setText(object.getActorId() + "");
+        textActorsFName.setText(object.getFirstName());
+        textActorsLName.setText(object.getLastName());
 
+        //Buttons zum l?schen und editieren aktivieren
+        buttonActorsEdit.setEnabled(true);
+        buttonActorsDelete.setEnabled(true);
 
+        //Mode auf view setzen
+        mode_actor = ManagementGui.MODE_VIEW;
         
-        if (logger.isDebugEnabled()) {
-            logger.debug("initGUI() - end");
+    }
+
+    /**
+     * 
+     */
+    protected void setActorsGroupButtonSaveCancel() {
+        buttonActorsSave.setEnabled(false);
+        buttonActorsCancel.setEnabled(false);
+        buttonActorsEdit.setEnabled(true);
+        buttonActorsNew.setEnabled(true);
+        buttonActorsDelete.setEnabled(true);
+        textActorsFName.setEditable(false);
+        textActorsLName.setEditable(false);
+        textActorsSearch.setEditable(true);
+
+        // ActorTabelle aktivieren
+        tableActorsOverview.setEnabled(true);
+
+        //ActorSearch aktivieren
+        textActorsSearch.setEnabled(true);        
+    }
+
+    protected void insertIntoActorsOverviewTable(Actor actor) {
+        TableItem item = new TableItem(tableActorsOverview, SWT.NONE);
+        item.setText(new String[] { actor.getActorId() + "", actor.getFirstName(),
+                actor.getLastName() });        
+    }
+    
+    protected void refreshActorsOverviewTable(final String filter) {
+        if (tableActorsOverview == null) {
+            System.out
+                    .println("Konnte ActorsOverviewtable nicht refreshen, da diese null ist!");
+            return;
         }
-	}
+        System.out.println("Versuche nun ActorsOverviewtable zu refreshen. Filter: "
+                + filter);
+        tableActorsOverview.removeAll();
+        TableItem item;
+        java.util.List Actorlist = Database.getActor(filter);
 
-	private void initActorsGroup()  {	    
-	}
+        for (int i = 0; i < Actorlist.size(); i++) {
 
+            Actor o = (Actor) Actorlist.get(i);
+            item = new TableItem(tableActorsOverview, SWT.NONE);
+            item.setText(new String[] { o.getActorId() + "", o.getFirstName(),
+                    o.getLastName() });
+
+        }
+    }
 }

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeFormate.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeFormate.java	2004-11-10 13:44:44 UTC (rev 122)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeFormate.java	2004-11-10 23:04:21 UTC (rev 123)
@@ -762,7 +762,7 @@
         }
         {
 
-            //die Buttons bekommen ein eigenes Composite
+//          die Buttons bekommen ein eigenes Composite
             composite2 = new Composite(groupVideoFormatDetail, SWT.EMBEDDED);
             GridLayout composite2Layout = new GridLayout();
             composite2Layout.numColumns = 6;

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeGenre.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeGenre.java	2004-11-10 13:44:44 UTC (rev 122)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeGenre.java	2004-11-10 23:04:21 UTC (rev 123)
@@ -643,8 +643,7 @@
                 setGenreGroupButtonSaveCancel();
             }
         });
-
-        
+       
     }
 
     /**
@@ -687,7 +686,7 @@
                     .println("Konnte Genretable nicht refreshen, da diese null ist!");
             return;
         }
-        System.out.println("Versuche nun VideoListe zu refreshen. Filter: "
+        System.out.println("Versuche nun GenreListe zu refreshen. Filter: "
                 + filter);
         tableGenre.removeAll();
         TableItem item;

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java	2004-11-10 13:44:44 UTC (rev 122)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java	2004-11-10 23:04:21 UTC (rev 123)
@@ -432,7 +432,7 @@
 				
 				cTabFolderMain.setSelection(tabItemActor);
 				viewActorMenuItem.setSelection(true);
-				cTabFolderMain.showSelection();
+				cTabFolderMain.showSelection();				
             
             }
         });         

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/actors.properties
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/actors.properties	2004-11-10 13:44:44 UTC (rev 122)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/actors.properties	2004-11-10 23:04:21 UTC (rev 123)
@@ -1,10 +1,33 @@
+error=Fehler
 actors.group.label=Darsteller
 
-actors.groupoverview.label = ?berblick
-actors.groupoverview.searchlabel = Suche nach
-actors.groupoverview.columnid = ID
-actors.groupoverview.columnfirstname = Vorname
-actors.groupoverview.columnlastname = Nachname
+actors.groupoverview.label =?berblick
+actors.groupoverview.searchlabel =Suche nach
+actors.groupoverview.columnid =ID
+actors.groupoverview.columnfirstname =Vorname
+actors.groupoverview.columnlastname =Nachname
 
 
-actors.groupdetail.label = Detail
\ No newline at end of file
+actors.groupdetail.label =Detail
+actors.groupdetail.labelid =Darsteller ID
+actors.groupdetail.labelfirstname =Vorname
+actors.groupdetail.labellastname =Nachname
+
+button.new=Neu
+button.edit=Bearbeiten
+button.delete=L?schen
+button.save=Speichern
+button.cancel=Abbruch
+
+actors.groupdetail.savebutton.warn.noname.title=Datensatz speichern
+actors.groupdetail.savebutton.warn.noname.msg=Der Datensatz kann nicht gespeichert werden. \n Bitte geben Sie eine volst?ndigen Namen an
+actors.groupdetail.savebutton.newok=Speichern des neuen VideoFormates erfolgreich.
+actors.groupdetail.savebutton.editok=?ndern des VideoFormates erfolgreich.
+actors.groupdetail.savebutton.errorsave=Datenbankfehler beim Speichern.
+actors.groupdetail.savebutton.errordb=Datenbankfehler beim Herstellen der Verbindung.(save).
+
+actors.groupdetail.deletebutton.question.header=Wirklich l?schen?
+actors.groupdetail.deletebutton.question.text=Wollen Sie den Datensatz {0} wirklich l?schen?
+actors.groupdetail.deletebutton.newok=Datensatz wurde erfolgreich gel?scht.
+actors.groupdetail.deletebutton.errorsave=Datenbankfehler beim L?schen.
+actors.groupdetail.deletebutton.errordb=Datenbankfehler beim Herstellen der Verbindung(del).
\ No newline at end of file

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Actor.hbm.xml
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Actor.hbm.xml	2004-11-10 13:44:44 UTC (rev 122)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Actor.hbm.xml	2004-11-10 23:04:21 UTC (rev 123)
@@ -17,7 +17,9 @@
       <id name="actorId" type="int" column="ACTORID">
         <meta attribute="scope-set">public</meta>
         <meta attribute="use-in-equals">true</meta>
-        <generator class="native"/>
+        <generator class="sequence">
+			<param name="sequence" >actors_id_sequence</param>
+		</generator>
       </id>
  
       <property name="firstName" type="string" not-null="true">

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java	2004-11-10 13:44:44 UTC (rev 122)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java	2004-11-10 23:04:21 UTC (rev 123)
@@ -49,9 +49,9 @@
 import de.hsharz.provirent.objects.Genre;
 import de.hsharz.provirent.objects.Language;
 import de.hsharz.provirent.objects.VideoFormat;
+import de.hsharz.provirent.objects.Actor;
 
 
-
 /**
  * @author Philipp Schneider
  *
@@ -669,7 +669,110 @@
 	
 	}
 
-     /**
+	/**
+	 * This method gets all Actor from the database.
+	 * searches for firstname or lastname or id
+	 * @param filter 
+	 * @return List of Director objects, or an empty List
+	 */
+	public static List getActor(final String filter){
+	    if (logger.isDebugEnabled()) {
+	        logger.debug("getActor() - start. String filter= "+filter);
+	    }
+	    //init the returnlist
+	    List returnlist = new ArrayList();
+	
+	    Session s = null;
+	    
+	    try {
+	        //get new Session and begin Transaction
+	        s = HibernateUtil.currentSession();
+	            
+	            //init the criteria
+	            Criteria criteria = s.createCriteria(Actor.class);
+	            //any of the criteria 
+	            Disjunction any = Expression.disjunction();
+	
+	            //if filter not empty
+	            if (filter != null && !filter.equalsIgnoreCase("")) {
+	                any.add(Expression.like("firstName", "%"+filter+"%"));
+	                any.add(Expression.like("lastName", "%"+filter+"%"));
+	                
+	                //maybe we are searching for the id?
+	                try {
+	                    any.add(Expression.eq("actorId", new Integer(Integer.parseInt(filter))));
+	                } catch (Exception e) {
+	                }
+	                
+	            }
+	            //add all criteria
+	            criteria.add(any);
+	            //get the results
+	            returnlist = criteria.list();
+	
+	
+	
+	
+	    } catch (Exception e) {
+	        logger.error(
+	                "getActor() - Error while trying to do Transaction",
+	                e);
+	        returnlist = new ArrayList();
+	    } finally {
+	        try {
+	            // No matter what, close the session
+	            HibernateUtil.closeSession();
+	        } catch (HibernateException e1) {
+	            logger.error("getActor() - Could not Close the Session", e1);
+	        }
+	    }
+	
+	    if (logger.isDebugEnabled()) {
+	        logger.debug("getActor() - end");
+	    }
+	    return returnlist;
+	    	
+	}
+	
+	
+	public static Actor getSingleActor(final int id){
+	    if (logger.isDebugEnabled()) {
+	        logger.debug("getSingleGenre() - start. int filter= "+id);
+	    }
+	    //init the returnlist
+	    Actor returnobject = null;
+	
+	    Session s = null;
+	    Transaction tx = null;
+	    try {
+	        //get new Session and begin Transaction
+	        s = HibernateUtil.currentSession();
+	
+	            returnobject = (Actor)s.get(Actor.class, new Integer(id));
+	
+	    } catch (Exception e) {
+	        logger.error(
+	                "getSingleActor() - Error while trying to do Transaction",
+	                e);
+	        
+	    } finally {
+	        try {
+	            // No matter what, close the session
+	            HibernateUtil.closeSession();
+	        } catch (HibernateException e1) {
+	            logger.error("getSingleActor() - Could not Close the Session", e1);
+	        }
+	    }
+	
+	    if (logger.isDebugEnabled()) {
+	        logger.debug("getSingleActor() - end");
+	    }
+	    return returnobject;
+	    	
+	}
+
+	
+	/**
      * Constructor for TestActor.
      * @param arg0
      */



From sforstner at sheep.berlios.de  Thu Nov 11 01:07:52 2004
From: sforstner at sheep.berlios.de (Stefan at BerliOS)
Date: Thu, 11 Nov 2004 01:07:52 +0100
Subject: [Provirent-svn-commit] r124 - / html project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui
Message-ID: <200411110007.iAB07qMG003802@sheep.berlios.de>

Author: sforstner
Date: 2004-11-11 01:07:47 +0100 (Thu, 11 Nov 2004)
New Revision: 124

Added:
   html/
   html/1pxtrans.gif
   html/test.html
Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeLanguage.java
Log:


Added: html/1pxtrans.gif
===================================================================
(Binary files differ)


Property changes on: html/1pxtrans.gif
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: html/test.html
===================================================================
--- html/test.html	2004-11-10 23:04:21 UTC (rev 123)
+++ html/test.html	2004-11-11 00:07:47 UTC (rev 124)
@@ -0,0 +1,103 @@
+<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
+"http://www.w3.org/TR/html4/loose.dtd">
+<html>
+<head>
+<title>Unbenanntes Dokument</title>
+<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
+<style type="text/css">
+<!--
+.Stil5 {
+	font-family: Verdana, Arial, Helvetica, sans-serif;
+	font-size: 12px;
+}
+.Stil6 {
+	font-family: "Courier New", Courier, mono;
+	font-size: 12px;
+}
+-->
+</style>
+</head>
+
+<body bgcolor="#F9EFD2">
+<table width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
+  <tr>
+    <td width="10%" >&nbsp;</td>
+    <td>&nbsp;</td>
+    <td width="10%">&nbsp;</td>
+  </tr>
+  <tr>
+    <td>&nbsp;</td>
+    <td>
+
+<table width="100%"  border="0" bgcolor="#C2D9C1"  align="center" cellpadding="0" cellspacing="0">
+<tr>
+    <td colspan="7" bgcolor="#000000"><img src="1pxtrans.gif"></td>
+</tr>
+<tr>
+	<td width="1px" bgcolor="#000000"><img src="1pxtrans.gif"></td>
+	<td colspan="5" height="70px">Logo</td>
+	<td width="1px" bgcolor="#000000"><img src="1pxtrans.gif"></td>
+</tr>
+<tr>
+    <td colspan="7" bgcolor="#000000"><img src="1pxtrans.gif"></td>
+</tr>
+<tr>
+	<td width="1px" bgcolor="#000000"><img src="1pxtrans.gif"></td>
+	<td colspan="5" height="20px" valign="middle"><span class="Stil5">Home | Suche | ?bersicht | Hilfe | Impressum</span></td>
+	<td width="1px" bgcolor="#000000"><img src="1pxtrans.gif"></td>
+</tr>
+<tr>
+    <td colspan="7" bgcolor="#000000"><img src="1pxtrans.gif"></td>
+</tr>
+<tr>
+	<td colspan="7" bgcolor="#F9EFD2" height="2px"><img src="1pxtrans.gif"></td>
+</tr>
+<tr>
+    <td colspan="3" bgcolor="#000000"><img src="1pxtrans.gif"></td>
+	<td colspan="1" bgcolor="#F9EFD2" width="2px"><img src="1pxtrans.gif"></td>
+	<td colspan="3" bgcolor="#000000"><img src="1pxtrans.gif"></td>
+</tr>
+<tr>
+    <td width="1px" bgcolor="#000000"><img src="1pxtrans.gif"></td>
+	<td height="300px">Menue</td>
+	<td width="1px" bgcolor="#000000"><img src="1pxtrans.gif"></td>
+	<td bgcolor="#F9EFD2" width="2px"><img src="1pxtrans.gif"></td>
+	<td width="1px" bgcolor="#000000"><img src="1pxtrans.gif"></td>
+	<td width="85%">Main</td>
+	<td width="1px" bgcolor="#000000"><img src="1pxtrans.gif"></td>
+</tr>
+<tr>
+    <td colspan="3" bgcolor="#000000"><img src="1pxtrans.gif"></td>
+	<td colspan="1" bgcolor="#F9EFD2" width="2px"><img src="1pxtrans.gif"></td>
+	<td colspan="3" bgcolor="#000000"><img src="1pxtrans.gif"></td>
+</tr>
+<tr>
+    <td colspan="7" bgcolor="#F9EFD2" height="2px"><img src="1pxtrans.gif"></td>
+</tr>
+<tr>
+    <td colspan="7" bgcolor="#000000"><img src="1pxtrans.gif"></td>
+</tr>
+<tr>
+	<td width="1px" bgcolor="#000000"><img src="1pxtrans.gif"></td>
+	<td colspan="5"><div align="center" class="Stil6">Impressum</div></td>
+	<td width="1px" bgcolor="#000000"><img src="1pxtrans.gif"></td>
+</tr>
+<tr>
+    <td colspan="7" bgcolor="#000000"><img src="1pxtrans.gif"></td>
+</tr>
+</table>
+
+	
+	
+	
+	</td>
+    <td>&nbsp;</td>
+  </tr>
+  <tr>
+    <td>&nbsp;</td>
+    <td>&nbsp;</td>
+    <td>&nbsp;</td>
+  </tr>
+</table>
+</body>
+</html>

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeLanguage.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeLanguage.java	2004-11-10 23:04:21 UTC (rev 123)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeLanguage.java	2004-11-11 00:07:47 UTC (rev 124)
@@ -687,7 +687,7 @@
                     .println("Konnte Languagetable nicht refreshen, da diese null ist!");
             return;
         }
-        System.out.println("Versuche nun VideoListe zu refreshen. Filter: "
+        System.out.println("Versuche nun LanguageListe zu refreshen. Filter: "
                 + filter);
         tableLanguage.removeAll();
         TableItem item;



From rgriesch at sheep.berlios.de  Thu Nov 11 11:33:46 2004
From: rgriesch at sheep.berlios.de (Remo Griesch at BerliOS)
Date: Thu, 11 Nov 2004 11:33:46 +0100
Subject: [Provirent-svn-commit] r125 - in project_src/provirent_hibernate/src/de/hsharz/provirent: management/gui management/gui/language persistence
Message-ID: <200411111033.iABAXk61007067@sheep.berlios.de>

Author: rgriesch
Date: 2004-11-11 11:33:45 +0100 (Thu, 11 Nov 2004)
New Revision: 125

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeActors.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeDirectors.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/directors.properties
   project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java
Log:
Composite Directors angefangen und beendet

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeActors.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeActors.java	2004-11-11 00:07:47 UTC (rev 124)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeActors.java	2004-11-11 10:33:45 UTC (rev 125)
@@ -567,7 +567,7 @@
                             
                         } else if (e.getMessage().equalsIgnoreCase("2")) {
                             //fehler beim db aufbau
-                            statusLine.setStatus(3,l.getString("Actor.groupdetail.deletebutton.errordb"));
+                            statusLine.setStatus(3,l.getString("actors.groupdetail.deletebutton.errordb"));
                             showMsg(l.getString("actors.groupdetail.deletebutton.errordb"),
                                     l.getString("error"), SWT.ICON_ERROR | SWT.OK);
                             

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeDirectors.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeDirectors.java	2004-11-11 00:07:47 UTC (rev 124)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeDirectors.java	2004-11-11 10:33:45 UTC (rev 125)
@@ -1,20 +1,39 @@
 package de.hsharz.provirent.management.gui;
 
+import java.text.MessageFormat;
 import java.util.Locale;
 import java.util.PropertyResourceBundle;
 import java.util.ResourceBundle;
 
 import org.apache.log4j.Logger;
 import org.eclipse.swt.SWT;
+import org.eclipse.swt.custom.SashForm;
+import org.eclipse.swt.events.FocusAdapter;
+import org.eclipse.swt.events.FocusEvent;
+import org.eclipse.swt.events.SelectionAdapter;
+import org.eclipse.swt.events.SelectionEvent;
+import org.eclipse.swt.layout.FormAttachment;
+import org.eclipse.swt.layout.FormData;
 import org.eclipse.swt.layout.GridData;
 import org.eclipse.swt.layout.GridLayout;
+import org.eclipse.swt.widgets.Button;
 import org.eclipse.swt.widgets.Composite;
 import org.eclipse.swt.widgets.Display;
+import org.eclipse.swt.widgets.Event;
 import org.eclipse.swt.widgets.Group;
+import org.eclipse.swt.widgets.Label;
+import org.eclipse.swt.widgets.Listener;
 import org.eclipse.swt.widgets.Shell;
+import org.eclipse.swt.widgets.Table;
+import org.eclipse.swt.widgets.TableColumn;
+import org.eclipse.swt.widgets.TableItem;
 import org.eclipse.swt.widgets.Text;
 
 import com.cloudgarden.resource.SWTResourceManager;
+
+import de.hsharz.provirent.objects.Director;
+import de.hsharz.provirent.persistence.DataBaseException;
+import de.hsharz.provirent.persistence.Database;
 /**
 * This code was generated using CloudGarden's Jigloo
 * SWT/Swing GUI Builder, which is free for non-commercial
@@ -30,7 +49,6 @@
 * *************************************
 */
 public class CompositeDirectors extends AbstractComposite{
-
     {
         //Register as a resource user - SWTResourceManager will
         //handle the obtaining and disposing of resources
@@ -42,22 +60,51 @@
      * Logger for this class
      */
     private static final Logger logger = Logger
-            .getLogger(CompositeDirectors.class);
+            .getLogger(CompositeActors.class);
     
     
     private final static int MODE_VIEW = 0;
-
     private final static int MODE_ADD = 1;
-    private Text text1;
-    private Group groupDirector;
-
     private final static int MODE_EDIT = 2;
     
+    private Table tableDirectorsOverview;
+    private TableColumn tableDirectorsOverview_ColumnID;
+    private TableColumn tableDirectorsOverview_ColumnFName;
+    private TableColumn tableDirectorsOverview_ColumnLName;
+    
+    
+    private SashForm sashForm1;
+    private SashForm sashForm2;
+    
+    private Group groupDirector;
+    private Group groupDirectorsOverview;
+    private Group groupDirectorsDetail;
+    
+    private Text textDirectorsSearch;
+    private Text textDirectorsID;
+    private Text textDirectorsFName;
+    private Text textDirectorsLName;
+    
+    private Label labelDirectorsSearch;
+    private Label labelDirectorsID;
+    private Label labelDirectorsFName;
+    private Label labelDirectorsLName;
+    
+    private Button buttonDirectorsNew;
+    private Button buttonDirectorsSave;
+    private Button buttonDirectorsEdit;
+    private Button buttonDirectorsCancel;
+    private Button buttonDirectorsDelete;
+    private Button buttonDirectorsFill;
+    
+    protected int mode_director;
+    
     private StatusLineStyledText statusLine;
 
     private ResourceBundle l;
     
     private Composite parent;
+    private Composite compositeButtons;
     
     /*
      * ?ndert die Sprache aller Elemente
@@ -135,16 +182,22 @@
             groupDirector.setLayoutData(groupDirectorLData);
             groupDirectorLayout.makeColumnsEqualWidth = true;
             groupDirector.setLayout(groupDirectorLayout);
-            groupDirector.setText("Director");
+            groupDirector.setText(l.getString("directors.group.label"));
             {
-                text1 = new Text(groupDirector, SWT.MULTI | SWT.WRAP);
-                text1.setText("text1");
-                GridData text1LData = new GridData();
-                text1.setBackground(SWTResourceManager.getColor(0, 255, 0));
-                text1LData.widthHint = 227;
-                text1LData.heightHint = 132;
-                text1.setLayoutData(text1LData);
+                sashForm2 = new SashForm(groupDirector, SWT.NONE);
+                GridData sashForm2LData = new GridData();
+                sashForm2LData.verticalAlignment = GridData.FILL;
+                sashForm2LData.horizontalAlignment = GridData.FILL;
+                sashForm2LData.grabExcessHorizontalSpace = true;
+                sashForm2LData.grabExcessVerticalSpace = true;
+                sashForm2.setLayoutData(sashForm2LData);
+                
+               
             }
+            // init the rest of the layout
+            initDirectorsOverview();
+            initDirectorsDetail();
+            refreshDirectorsOverviewTable(textDirectorsSearch.getText());
         }
 
         this.layout();
@@ -157,5 +210,609 @@
 	}
 
 	
+	private void initDirectorsOverview()  {	    
+//	  Group Actors Overview 
+        {
+            groupDirectorsOverview = new Group(sashForm2,SWT.NONE);
+            GridLayout group1Layout = new GridLayout();
+            group1Layout.numColumns = 8;
+            groupDirectorsOverview.setLayout(group1Layout);
+            groupDirectorsOverview.setText(l.getString("directors.groupoverview.label"));
+            
+            {// table Actors Overview
+                tableDirectorsOverview = new Table(
+                    groupDirectorsOverview,
+                    SWT.SINGLE
+                        | SWT.FULL_SELECTION
+                        | SWT.V_SCROLL | SWT.BORDER);
+                GridData tableDirectorsOverviewLData = new GridData();
+                tableDirectorsOverview.setHeaderVisible(true);
+                tableDirectorsOverview.setLinesVisible(true);
+                tableDirectorsOverviewLData.horizontalAlignment = GridData.FILL;
+                tableDirectorsOverviewLData.verticalAlignment = GridData.FILL;
+                tableDirectorsOverviewLData.horizontalSpan = 8;
+                tableDirectorsOverviewLData.grabExcessHorizontalSpace = true;
+                tableDirectorsOverviewLData.grabExcessVerticalSpace = true;
+                tableDirectorsOverview.setLayoutData(tableDirectorsOverviewLData);
+                tableDirectorsOverview.addFocusListener(new FocusAdapter() {
+                        public void focusLost(FocusEvent evt) {
+                            System.out
+                                .println("tableDirectorsOverview.focusLost, event="
+                                    + evt);
+                        }
+                        public void focusGained(FocusEvent evt) {
+                            System.out
+                                .println("tableDirectorsOverview.focusGained, event="
+                                    + evt);
+                        }
+                    });
+                tableDirectorsOverview.addSelectionListener(new SelectionAdapter() {
+                        public void widgetSelected(SelectionEvent evt) {
+                            if (logger.isDebugEnabled()) {
+                                logger
+                                    .debug("widgetSelected(SelectionEvent evt = "
+                                        + evt
+                                        + ") - start");
+                            }
 
+                            int index = tableDirectorsOverview
+                                .getSelectionIndex();
+
+                            System.out.println("Table select. id: "
+                                + index
+                                + " TableItem:"
+                                + tableDirectorsOverview.getItem(index)
+                                + " id: "
+                                + tableDirectorsOverview.getItem(index)
+                                    .getText(0));
+
+                            //es wurde ein Element aus Tabelle ausgewaehlt jetzt muss die
+                            //Detailansicht aktualisiert werden
+                            refreshDirectorsDetail(tableDirectorsOverview.getItem(index)
+                                                              .getText(0));
+
+                            if (logger.isDebugEnabled()) {
+                                logger
+                                    .debug("widgetSelected(SelectionEvent) - end");
+                            }
+                        }
+                    });
+                {
+                    tableDirectorsOverview_ColumnID = new TableColumn(
+                        tableDirectorsOverview,
+                        SWT.CENTER);
+                    tableDirectorsOverview_ColumnID.setText(l
+                        .getString("directors.groupoverview.columnid"));
+                    tableDirectorsOverview_ColumnID.setWidth(40);
+                }
+                {
+                    tableDirectorsOverview_ColumnFName = new TableColumn(
+                        tableDirectorsOverview,
+                        SWT.CENTER);
+                    tableDirectorsOverview_ColumnFName.setText(l
+                        .getString("directors.groupoverview.columnfirstname"));
+                    tableDirectorsOverview_ColumnFName.setWidth(80);
+                }
+                {
+                    tableDirectorsOverview_ColumnLName = new TableColumn(
+                        tableDirectorsOverview,
+                        SWT.CENTER);
+                    tableDirectorsOverview_ColumnLName.setText(l
+                        .getString("directors.groupoverview.columnlastname"));
+                    tableDirectorsOverview_ColumnLName.setWidth(80);
+                }
+            }
+            // table Actors Overview
+            // Search
+            {
+                //label for Search
+                labelDirectorsSearch = new Label(groupDirectorsOverview, SWT.NONE);
+                labelDirectorsSearch.setText(l
+                        .getString("directors.groupoverview.searchlabel")
+                        + ":");
+                GridData label2LData = new GridData();
+                label2LData.horizontalSpan = 3;
+                labelDirectorsSearch.setLayoutData(label2LData);
+
+                //text Search
+                textDirectorsSearch = new Text(groupDirectorsOverview, SWT.BORDER);
+                GridData text2LData = new GridData();
+                textDirectorsSearch.addFocusListener(new FocusAdapter() {
+                    public void focusLost(FocusEvent evt) {
+                        if (logger.isDebugEnabled()) {
+                            logger.debug("focusLost(FocusEvent evt = " + evt + " "
+                                    + textDirectorsSearch.getText() + ") - start");
+                        }
+
+                        refreshDirectorsOverviewTable(textDirectorsSearch.getText());
+
+                        if (logger.isDebugEnabled()) {
+                            logger.debug("focusLost(FocusEvent) - end");
+                        }
+                    }
+                });
+                textDirectorsSearch.addListener(SWT.DefaultSelection, new Listener() {
+                    public void handleEvent(Event e) {
+                        if (logger.isDebugEnabled()) {
+                            logger.debug("handleEvent(Event e = " + e + " "
+                                    + textDirectorsSearch.getText() + ") - start");
+                        }
+
+                        refreshDirectorsOverviewTable(textDirectorsSearch.getText());
+
+                        if (logger.isDebugEnabled()) {
+                            logger.debug("handleEvent(Event) - end");
+                        }
+                    }
+                });
+                text2LData.horizontalAlignment = GridData.FILL;
+                text2LData.horizontalSpan = 5;
+                text2LData.grabExcessHorizontalSpace = true;
+                textDirectorsSearch.setLayoutData(text2LData);
+            }// Search                    
+        }
+	}
+	
+	private void initDirectorsDetail()  {	    
+	    // Group Actors Detail
+        {
+            groupDirectorsDetail = new Group(sashForm2, SWT.NONE);
+            GridLayout group2Layout = new GridLayout();
+            GridData group2LData = new GridData();
+            group2Layout.verticalSpacing = 15;
+            group2Layout.numColumns = 6;
+            groupDirectorsDetail.setText(l.getString("directors.groupdetail.label"));   
+            FormData formData = new FormData();
+            groupDirectorsDetail.setLayout(group2Layout);
+            formData.right = new FormAttachment(100, 100, -5);
+            formData.top = new FormAttachment(0, 100, 5);
+            formData.bottom = new FormAttachment(100, 100, -5);
+            groupDirectorsDetail.setLayoutData(formData);
+        }
+        	// labels and buttons for detail
+        	{
+        	    labelDirectorsID = new Label(groupDirectorsDetail, SWT.NONE);
+        	    labelDirectorsID.setText(l
+        	            .getString("directors.groupdetail.labelid")
+        	            + ":");
+        	    labelDirectorsID.setSize(125, 15);
+        	    GridData formData2 = new GridData();
+        	    formData2.widthHint = 125;
+        	    formData2.heightHint = 15;
+        	    formData2.horizontalSpan = 2;
+        	    labelDirectorsID.setLayoutData(formData2);
+        	}
+        	{
+        	    textDirectorsID = new Text(
+        	            groupDirectorsDetail,
+        	            SWT.READ_ONLY | SWT.BORDER);
+        	    GridData text1LData1 = new GridData();
+        	    text1LData1.horizontalAlignment = GridData.FILL;
+        	    text1LData1.heightHint = 13;
+        	    text1LData1.horizontalSpan = 4;
+        	    text1LData1.grabExcessHorizontalSpace = true;
+        	    textDirectorsID.setLayoutData(text1LData1);
+        	}
+        	{
+                labelDirectorsFName = new Label(
+                    groupDirectorsDetail,
+                    SWT.NONE);
+                labelDirectorsFName.setText(l
+                    .getString("directors.groupdetail.labelfirstname")
+                    + ":");
+                labelDirectorsFName.setSize(125, 15);
+                GridData labelDirectorsFNameLData = new GridData();
+                labelDirectorsFNameLData.widthHint = 125;
+                labelDirectorsFNameLData.heightHint = 15;
+                labelDirectorsFNameLData.horizontalSpan = 2;
+                labelDirectorsFName
+                    .setLayoutData(labelDirectorsFNameLData);
+            }
+            {
+        	    textDirectorsFName = new Text(groupDirectorsDetail,
+        	            SWT.READ_ONLY | SWT.BORDER);
+        	    GridData text1LData2 = new GridData();
+        	    text1LData2.horizontalAlignment = GridData.FILL;
+        	    text1LData2.heightHint = 13;
+        	    text1LData2.horizontalSpan = 4;
+        	    text1LData2.grabExcessHorizontalSpace = true;
+        	    textDirectorsFName.setLayoutData(text1LData2);
+        	}
+            {
+        	    labelDirectorsLName = new Label(groupDirectorsDetail,
+        	            SWT.NONE);
+        	    labelDirectorsLName.setText(l
+        	            .getString("directors.groupdetail.labellastname")
+        	            + ":");
+        	    labelDirectorsLName.setSize(125, 15);
+        	    GridData label1LData1 = new GridData();
+        	    label1LData1.widthHint = 125;
+        	    label1LData1.heightHint = 15;
+        	    label1LData1.horizontalSpan = 2;
+        	    labelDirectorsLName.setLayoutData(label1LData1);
+        	}
+        	{
+        	    textDirectorsLName = new Text(groupDirectorsDetail,
+        	            SWT.READ_ONLY | SWT.BORDER);
+        	    GridData text1LData3 = new GridData();
+        	    text1LData3.horizontalAlignment = GridData.FILL;
+        	    text1LData3.heightHint = 13;
+        	    text1LData3.horizontalSpan = 4;
+        	    text1LData3.grabExcessHorizontalSpace = true;
+        	    textDirectorsLName.setLayoutData(text1LData3);
+        	}// label and buttons for detail      
+        	// buttons for detail
+        	{
+        	    compositeButtons = new Composite(groupDirectorsDetail, SWT.EMBEDDED);
+        	    GridLayout composite2Layout = new GridLayout();
+        	    composite2Layout.numColumns = 6;
+        	    GridData composite2LData = new GridData();
+        	    compositeButtons.setLayout(composite2Layout);
+        	    composite2LData.verticalAlignment = GridData.END;
+        	    composite2LData.horizontalAlignment = GridData.CENTER;
+        	    composite2LData.widthHint = 391;
+        	    composite2LData.horizontalSpan = 6;
+        	    composite2LData.grabExcessHorizontalSpace = true;
+            	composite2LData.grabExcessVerticalSpace = true;
+            	composite2LData.heightHint = 35;
+            	compositeButtons.setLayoutData(composite2LData);
+        	}
+        	{
+        	    buttonDirectorsNew = new Button(compositeButtons, SWT.PUSH | SWT.CENTER);
+        	    buttonDirectorsNew.setText(l.getString("button.new"));
+        	    buttonDirectorsNew.addSelectionListener(new SelectionAdapter() {
+                public void widgetSelected(SelectionEvent evt) {
+                    
+                    mode_director = ManagementGui.MODE_ADD;
+                    
+                    textDirectorsID.setText("");
+                    textDirectorsFName.setText("");
+                    textDirectorsLName.setText("");
+                    textDirectorsFName.setEditable(true);
+                    textDirectorsLName.setEditable(true);
+                    
+                    buttonDirectorsCancel.setEnabled(true);
+                    buttonDirectorsSave.setEnabled(true);
+                    buttonDirectorsNew.setEnabled(false);
+                    buttonDirectorsEdit.setEnabled(false);
+                    buttonDirectorsDelete.setEnabled(false);
+                    
+                    textDirectorsSearch.setEditable(false);
+                    tableDirectorsOverview.setEnabled(false);
+
+                }
+            });
+
+        	    buttonDirectorsEdit = new Button(compositeButtons, SWT.PUSH | SWT.CENTER);
+        	    buttonDirectorsEdit.setText(l.getString("button.edit"));
+        	    buttonDirectorsEdit.setEnabled(false);
+        	    buttonDirectorsEdit.addSelectionListener(new SelectionAdapter() {
+                public void widgetSelected(SelectionEvent evt) {
+
+                    mode_director = ManagementGui.MODE_EDIT;
+
+                    textDirectorsID.setEditable(false);
+                    textDirectorsFName.setEditable(true);
+                    textDirectorsFName.setFocus();
+                    textDirectorsLName.setEditable(true);
+                    
+                    buttonDirectorsCancel.setEnabled(true);
+                    buttonDirectorsSave.setEnabled(true);
+                    buttonDirectorsNew.setEnabled(false);
+                    buttonDirectorsEdit.setEnabled(false);
+                    buttonDirectorsDelete.setEnabled(false);
+
+                    tableDirectorsOverview.setEnabled(false);
+                    textDirectorsSearch.setEnabled(false);
+                    
+                }
+            });
+
+        	    buttonDirectorsDelete = new Button(compositeButtons, SWT.PUSH | SWT.CENTER);
+        	    buttonDirectorsDelete.setText(l.getString("button.delete"));
+        	    buttonDirectorsDelete.setEnabled(false);
+        	    buttonDirectorsDelete.addSelectionListener(new SelectionAdapter() {
+                public void widgetSelected(SelectionEvent evt) {
+                    System.out
+                            .println("buttonDirectorsDelete.widgetSelected, event="
+                                    + evt);
+                    
+                    
+                   String msg = MessageFormat.format(
+                           l.getString("directors.groupdetail.deletebutton.question.text"),
+                                   new Object[]{textDirectorsFName.getText()+" "+textDirectorsLName.getText()});
+                    
+                   int question = showMsg(msg,
+                           l.getString("directors.groupdetail.deletebutton.question.header"), 
+                           SWT.ICON_QUESTION | SWT.YES | SWT.NO);
+                   
+                   if (question != SWT.YES){
+                       return;
+                   }
+                    
+                    Director o = new Director();
+                    o.setDirectorId(new Integer(Integer.parseInt(textDirectorsID.getText())));
+                    o.setFirstName(textDirectorsFName.getText());
+                    o.setLastName(textDirectorsLName.getText());
+                    
+                    try {
+                        //object speichern
+                        // Fehlerbehandlung
+                        Database.deleteObject(o);
+
+                        //?bersichtsTabelle aktualisieren
+                        refreshDirectorsOverviewTable(textDirectorsSearch.getText());
+                        
+                        //Detailansicht leeren
+                        textDirectorsID.setText("");
+                        textDirectorsFName.setText("");
+                        textDirectorsLName.setText("");
+                        
+                        //in Tabelle n?chsten ausw?hlen
+                        try {
+                            tableDirectorsOverview.select(0);
+                        } catch (Exception ex) {}
+                        
+                        //Statusline Nachricht sezten
+                        statusLine.setStatus(1,l.getString("directors.groupdetail.deletebutton.newok"));
+
+                    } catch (DataBaseException e) {
+                        if (e.getMessage().equalsIgnoreCase("1")) {
+                            //Fehler beim Speichern des Objectes
+
+                            statusLine.setStatus(3,l.getString("directors.groupdetail.deletebutton.errorsave"));
+                            showMsg(l.getString("directors.groupdetail.deletebutton.errorsave"),
+                                    l.getString("error"), SWT.ICON_ERROR | SWT.OK);
+                            
+                        } else if (e.getMessage().equalsIgnoreCase("2")) {
+                            //fehler beim db aufbau
+                            statusLine.setStatus(3,l.getString("directors.groupdetail.deletebutton.errordb"));
+                            showMsg(l.getString("directors.groupdetail.deletebutton.errordb"),
+                                    l.getString("error"), SWT.ICON_ERROR | SWT.OK);
+                            
+                        } else {
+                            //@todo
+                            e.printStackTrace();
+                        }
+                        
+                    }                
+                    
+
+                    }
+
+                }
+        	    );
+
+        	    //leerer nicht sichtbarer Button
+        	    buttonDirectorsFill = new Button(compositeButtons, SWT.PUSH | SWT.CENTER);
+        	    GridData buttonActorFillLData = new GridData();
+        	    buttonDirectorsFill.setVisible(false);
+        	    buttonDirectorsFill.setEnabled(false);
+        	    buttonActorFillLData.widthHint = 30;
+        	    buttonActorFillLData.heightHint = 23;
+        	    buttonDirectorsFill.setLayoutData(buttonActorFillLData);
+
+        	    buttonDirectorsSave = new Button(compositeButtons, SWT.PUSH | SWT.CENTER);
+        	    buttonDirectorsSave.setText(l.getString("button.save"));
+        	    buttonDirectorsSave.setEnabled(false);
+        	    buttonDirectorsSave.addSelectionListener(new SelectionAdapter() {
+                public void widgetSelected(SelectionEvent evt) {
+                    System.out
+                            .println("buttonDirectorsSave.widgetSelected, event="
+                                    + evt);
+
+                    
+                    //testen ob Name leer ist
+                    if (textDirectorsFName.getText().trim().equalsIgnoreCase("") 
+                        ||  textDirectorsLName.getText().trim().equalsIgnoreCase("")   ) {
+                        
+                        showMsg(l.getString("directors.groupdetail.savebutton.warn.noname.msg"),
+                                l.getString("directors.groupdetail.savebutton.warn.noname.title"),
+                                SWT.ICON_WARNING | SWT.YES);
+
+                        	return;
+                    }
+                    
+                    //testen welcher mode
+                    
+                    if (mode_director == ManagementGui.MODE_ADD) {
+                        
+                        /**
+                         * @todo eine Exception bekommen wieder leider NOCH nicht mit
+                         * d.h. es muss noch ein r?ckgabewert kommen oder eine Exception 
+                         * ?bermitteln werden (aus der DB Klasse)
+                         */
+                        //neues Objekt erzeugen
+                        Director tmp = new Director(textDirectorsFName.getText(),
+                                textDirectorsLName.getText());
+                        
+                        try {
+                            //object speichern
+                            // Fehlerbehandlung
+                            Object o = Database.saveObject(
+                                    new Director(textDirectorsFName.getText(),
+                                            textDirectorsLName.getText()));
+                            
+                            // in ?bersichtstabelle einf?gen
+                            insertIntoDirectorsOverviewTable((Director)o);
+                            textDirectorsID.setText( ((Director)o).getDirectorId()+"" );
+                            
+                            
+                            //Statusline Nachricht sezten
+                            statusLine.setStatus(1,l.getString("directors.groupdetail.savebutton.newok"));
+
+                        } catch (DataBaseException e) {
+                            if (e.getMessage().equalsIgnoreCase("1")) {
+                                //Fehler beim Speichern des Objectes
+
+                                statusLine.setStatus(3,l.getString("directors.groupdetail.savebutton.errorsave"));
+                                showMsg(l.getString("directors.groupdetail.savebutton.errorsave"),"Fehler", SWT.ICON_ERROR | SWT.OK);
+                                
+                            } else if (e.getMessage().equalsIgnoreCase("2")) {
+                                //fehler beim db aufbau
+                                statusLine.setStatus(3,l.getString("directors.groupdetail.savebutton.errordb"));
+                                showMsg(l.getString("directors.groupdetail.savebutton.errordb"),"Fehler", SWT.ICON_ERROR | SWT.OK);
+                                
+                            } else {
+                                //@todo
+                                e.printStackTrace();
+                            }
+                            
+                        }
+                        
+                        
+                        //alle Buttons auf aktiv setzen
+                        setDirectorsGroupButtonSaveCancel();
+                        
+                    } else if (mode_director == ManagementGui.MODE_EDIT) {
+                        
+                        Director tmp = new Director(textDirectorsFName.getText(),
+                                        textDirectorsLName.getText());
+                        tmp.setDirectorId( new Integer (Integer.parseInt(textDirectorsID.getText())) );
+                    try {
+                        //object speichern
+                        // Fehlerbehandlung
+                        Database.saveObject(tmp);
+                        //?bersichtstabelle aktualisieren
+                        refreshDirectorsOverviewTable(textDirectorsSearch.getText());
+                        
+                        //Statusline Nachricht sezten
+                        statusLine.setStatus(1,l.getString("directors.groupdetail.savebutton.editok"));
+                       
+
+                    } catch (DataBaseException e) {
+                        if (e.getMessage().equalsIgnoreCase("1")) {
+                            //Fehler beim Speichern des Objectes
+
+                            statusLine.setStatus(3,l.getString("directors.groupdetail.savebutton.errorsave"));
+                            showMsg(l.getString("directors.groupdetail.savebutton.errorsave"),"Fehler", SWT.ICON_ERROR | SWT.OK);
+                            
+                        } else if (e.getMessage().equalsIgnoreCase("2")) {
+                            //fehler beim db aufbau
+                            statusLine.setStatus(3,l.getString("directors.groupdetail.savebutton.errordb"));
+                            showMsg(l.getString("directors.groupdetail.savebutton.errordb"),"Fehler", SWT.ICON_ERROR | SWT.OK);
+                            
+                        } else {
+                            //@todo
+                            e.printStackTrace();
+                        }
+                        
+                    }
+                        
+     
+                        //alle Buttons auf aktiv setzen
+                        setDirectorsGroupButtonSaveCancel();
+                        
+                    }
+                    
+                    
+                    
+                    /**
+                     * @todo Exception werfen, da nur die zwei Modes sein d?rfen
+                     */
+                    
+                }
+            });
+
+        	    buttonDirectorsCancel = new Button(compositeButtons, SWT.PUSH | SWT.CENTER);
+        	    buttonDirectorsCancel.setText(l.getString("button.cancel"));
+        	    buttonDirectorsCancel.setEnabled(false);
+        	    buttonDirectorsCancel.addSelectionListener(new SelectionAdapter() {
+                public void widgetSelected(SelectionEvent evt) {
+                    System.out
+                            .println("buttonDirectorsCancel.widgetSelected, event="
+                                    + evt);
+                    setDirectorsGroupButtonSaveCancel();
+                }
+            });
+        }
+	}
+
+	 
+	
+	
+	/**
+     * @param text
+     */
+    private void refreshDirectorsDetail(final String id) {
+        Director object;
+        try {
+            //since we only can get a String value from the table, we
+            //need to convert this
+            object = Database.getSingleDirector(Integer.parseInt(id));
+
+            if (object == null) {
+
+                /*
+                 * 
+                 * @TODO Statusbar aktualiseren
+                 */
+                return;
+            }
+        } catch (Exception e) {
+            //id ist keine Zahl
+            return;
+        }
+
+        textDirectorsID.setText(object.getDirectorId() + "");
+        textDirectorsFName.setText(object.getFirstName());
+        textDirectorsLName.setText(object.getLastName());
+
+        //Buttons zum l?schen und editieren aktivieren
+        buttonDirectorsEdit.setEnabled(true);
+        buttonDirectorsDelete.setEnabled(true);
+
+        //Mode auf view setzen
+        mode_director = ManagementGui.MODE_VIEW;
+        
+    }
+
+    /**
+     * 
+     */
+    protected void setDirectorsGroupButtonSaveCancel() {
+        buttonDirectorsSave.setEnabled(false);
+        buttonDirectorsCancel.setEnabled(false);
+        buttonDirectorsEdit.setEnabled(true);
+        buttonDirectorsNew.setEnabled(true);
+        buttonDirectorsDelete.setEnabled(true);
+        textDirectorsFName.setEditable(false);
+        textDirectorsLName.setEditable(false);
+        textDirectorsSearch.setEditable(true);
+
+        // ActorTabelle aktivieren
+        tableDirectorsOverview.setEnabled(true);
+
+        //ActorSearch aktivieren
+        textDirectorsSearch.setEnabled(true);        
+    }
+
+    protected void insertIntoDirectorsOverviewTable(Director director) {
+        TableItem item = new TableItem(tableDirectorsOverview, SWT.NONE);
+        item.setText(new String[] { director.getDirectorId() + "", director.getFirstName(),
+                director.getLastName() });        
+    }
+    
+    protected void refreshDirectorsOverviewTable(final String filter) {
+        if (tableDirectorsOverview == null) {
+            System.out
+                    .println("Konnte DirectorsOverviewtable nicht refreshen, da diese null ist!");
+            return;
+        }
+        System.out.println("Versuche nun DirectorsOverviewtable zu refreshen. Filter: "
+                + filter);
+        tableDirectorsOverview.removeAll();
+        TableItem item;
+        java.util.List Directorlist = Database.getDirector(filter);
+
+        for (int i = 0; i < Directorlist.size(); i++) {
+
+            Director o = (Director) Directorlist.get(i);
+            item = new TableItem(tableDirectorsOverview, SWT.NONE);
+            item.setText(new String[] { o.getDirectorId() + "", o.getFirstName(),
+                    o.getLastName() });
+
+        }
+    }
 }
+

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/directors.properties
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/directors.properties	2004-11-11 00:07:47 UTC (rev 124)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/directors.properties	2004-11-11 10:33:45 UTC (rev 125)
@@ -0,0 +1,33 @@
+error=Fehler
+directors.group.label=Regie
+
+directors.groupoverview.label =?berblick
+directors.groupoverview.searchlabel =Suche nach
+directors.groupoverview.columnid =ID
+directors.groupoverview.columnfirstname =Vorname
+directors.groupoverview.columnlastname =Nachname
+
+
+directors.groupdetail.label =Detail
+directors.groupdetail.labelid =Regisseur ID
+directors.groupdetail.labelfirstname =Vorname
+directors.groupdetail.labellastname =Nachname
+
+button.new=Neu
+button.edit=Bearbeiten
+button.delete=L?schen
+button.save=Speichern
+button.cancel=Abbruch
+
+directors.groupdetail.savebutton.warn.noname.title=Datensatz speichern
+directors.groupdetail.savebutton.warn.noname.msg=Der Datensatz kann nicht gespeichert werden. \n Bitte geben Sie eine volst?ndigen Namen an
+directors.groupdetail.savebutton.newok=Speichern des neuen VideoFormates erfolgreich.
+directors.groupdetail.savebutton.editok=?ndern des VideoFormates erfolgreich.
+directors.groupdetail.savebutton.errorsave=Datenbankfehler beim Speichern.
+directors.groupdetail.savebutton.errordb=Datenbankfehler beim Herstellen der Verbindung.(save).
+
+directors.groupdetail.deletebutton.question.header=Wirklich l?schen?
+directors.groupdetail.deletebutton.question.text=Wollen Sie den Datensatz {0} wirklich l?schen?
+directors.groupdetail.deletebutton.newok=Datensatz wurde erfolgreich gel?scht.
+directors.groupdetail.deletebutton.errorsave=Datenbankfehler beim L?schen.
+directors.groupdetail.deletebutton.errordb=Datenbankfehler beim Herstellen der Verbindung(del).
\ No newline at end of file

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java	2004-11-11 00:07:47 UTC (rev 124)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java	2004-11-11 10:33:45 UTC (rev 125)
@@ -737,7 +737,7 @@
 	
 	public static Actor getSingleActor(final int id){
 	    if (logger.isDebugEnabled()) {
-	        logger.debug("getSingleGenre() - start. int filter= "+id);
+	        logger.debug("getSingleActor() - start. int filter= "+id);
 	    }
 	    //init the returnlist
 	    Actor returnobject = null;
@@ -771,7 +771,109 @@
 	    	
 	}
 
+	/**
+	 * This method gets all Directors from the database.
+	 * searches for firstname or lastname or id
+	 * @param filter 
+	 * @return List of Director objects, or an empty List
+	 */
+	public static List getDirector(final String filter){
+	    if (logger.isDebugEnabled()) {
+	        logger.debug("getDirector() - start. String filter= "+filter);
+	    }
+	    //init the returnlist
+	    List returnlist = new ArrayList();
 	
+	    Session s = null;
+	    
+	    try {
+	        //get new Session and begin Transaction
+	        s = HibernateUtil.currentSession();
+	            
+	            //init the criteria
+	            Criteria criteria = s.createCriteria(Director.class);
+	            //any of the criteria 
+	            Disjunction any = Expression.disjunction();
+	
+	            //if filter not empty
+	            if (filter != null && !filter.equalsIgnoreCase("")) {
+	                any.add(Expression.like("firstName", "%"+filter+"%"));
+	                any.add(Expression.like("lastName", "%"+filter+"%"));
+	                
+	                //maybe we are searching for the id?
+	                try {
+	                    any.add(Expression.eq("directorId", new Integer(Integer.parseInt(filter))));
+	                } catch (Exception e) {
+	                }
+	                
+	            }
+	            //add all criteria
+	            criteria.add(any);
+	            //get the results
+	            returnlist = criteria.list();
+	
+	
+	
+	
+	    } catch (Exception e) {
+	        logger.error(
+	                "getDirector() - Error while trying to do Transaction",
+	                e);
+	        returnlist = new ArrayList();
+	    } finally {
+	        try {
+	            // No matter what, close the session
+	            HibernateUtil.closeSession();
+	        } catch (HibernateException e1) {
+	            logger.error("getDirector() - Could not Close the Session", e1);
+	        }
+	    }
+	
+	    if (logger.isDebugEnabled()) {
+	        logger.debug("getDirector() - end");
+	    }
+	    return returnlist;
+	    	
+	}
+	
+	
+	public static Director getSingleDirector(final int id){
+	    if (logger.isDebugEnabled()) {
+	        logger.debug("getSingleDirector() - start. int filter= "+id);
+	    }
+	    //init the returnlist
+	    Director returnobject = null;
+	
+	    Session s = null;
+	    Transaction tx = null;
+	    try {
+	        //get new Session and begin Transaction
+	        s = HibernateUtil.currentSession();
+	
+	            returnobject = (Director)s.get(Director.class, new Integer(id));
+	
+	    } catch (Exception e) {
+	        logger.error(
+	                "getSingleDirector() - Error while trying to do Transaction",
+	                e);
+	        
+	    } finally {
+	        try {
+	            // No matter what, close the session
+	            HibernateUtil.closeSession();
+	        } catch (HibernateException e1) {
+	            logger.error("getSingleDirector() - Could not Close the Session", e1);
+	        }
+	    }
+	
+	    if (logger.isDebugEnabled()) {
+	        logger.debug("getSingleDirector() - end");
+	    }
+	    return returnobject;
+	    	
+	}
+	
+	
 	/**
      * Constructor for TestActor.
      * @param arg0



From sforstner at sheep.berlios.de  Thu Nov 11 12:40:38 2004
From: sforstner at sheep.berlios.de (Stefan at BerliOS)
Date: Thu, 11 Nov 2004 12:40:38 +0100
Subject: [Provirent-svn-commit] r126 - in project_src/provirent_hibernate/src: de/hsharz/provirent/management/gui de/hsharz/provirent/management/gui/language de/hsharz/provirent/objects de/hsharz/provirent/persistence test/provirent/hibernate
Message-ID: <200411111140.iABBecLm002981@sheep.berlios.de>

Author: sforstner
Date: 2004-11-11 12:40:14 +0100 (Thu, 11 Nov 2004)
New Revision: 126

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeLanguage.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/language.properties
   project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Subtitle.hbm.xml
   project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java
   project_src/provirent_hibernate/src/test/provirent/hibernate/TestSubtitle.java
Log:


Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeLanguage.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeLanguage.java	2004-11-11 10:33:45 UTC (rev 125)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeLanguage.java	2004-11-11 11:40:14 UTC (rev 126)
@@ -23,6 +23,7 @@
 import org.eclipse.swt.widgets.Event;
 import org.eclipse.swt.widgets.Group;
 import org.eclipse.swt.widgets.Label;
+import org.eclipse.swt.widgets.List;
 import org.eclipse.swt.widgets.Listener;
 import org.eclipse.swt.widgets.Shell;
 import org.eclipse.swt.widgets.Table;
@@ -33,6 +34,9 @@
 import com.cloudgarden.resource.SWTResourceManager;
 
 import de.hsharz.provirent.objects.Language;
+import de.hsharz.provirent.objects.Subtitle;
+import de.hsharz.provirent.objects.Subtitle;
+import de.hsharz.provirent.objects.Subtitle;
 import de.hsharz.provirent.persistence.DataBaseException;
 import de.hsharz.provirent.persistence.Database;
 /**
@@ -108,7 +112,51 @@
     private SashForm sashFormLanguage;
 
     private Group groupLanguage;
+    
+    private Group groupSubtitleOverview;
 
+    private Group groupSubtitleDetail;
+
+    private Label labelSubtitleId;
+
+    private Label labelSubtitleShortname;
+
+    private Text textSubtitleName;
+
+    private Label labelSubtitleName;
+
+    private Text textSubtitleID;
+    
+    private Button buttonSubtitleCancel;
+
+    private Button buttonSubtitleSave;
+
+    private Button buttonSubtitleFill;
+
+    private Button buttonSubtitleDelete;
+
+    private Button buttonSubtitleEdit;
+
+    private Button buttonSubtitleNew;
+
+    private Text textSubtitleShortname;
+
+    private Text textSubtitleSearch;
+
+    private Label labelSubtitleSearch;
+
+    private SashForm sashFormSubtitle;
+
+    private Group groupSubtitle;
+    
+    private int mode_Subtitle = 0;
+    
+    private List list1;
+    
+    private Table tableSubtitle;
+
+    private Group group1Subtitle;
+
     private final static int MODE_EDIT = 2;
     
     private StatusLineStyledText statusLine;
@@ -126,6 +174,8 @@
 
     private TableColumn tableColumn;
     
+    private TableColumn tableColumn1, tableColumn2, tableColumn3;
+    
     /*
      * ?ndert die Sprache aller Elemente
      * 
@@ -201,6 +251,7 @@
             sashForm1.setLayoutData(sashForm1LData1);
 
             initLanguageGroup();
+            initSubTitleGroup();
 
         }
         this.layout();
@@ -213,6 +264,707 @@
 	/**
      * 
      */
+    private void initSubTitleGroup() {
+        {
+            //init a group for the Subtitle
+            groupSubtitle = new Group(sashForm1, SWT.NONE);
+            GridLayout group2Layout = new GridLayout();
+            group2Layout.makeColumnsEqualWidth = true;
+            groupSubtitle.setText(l.getString("Subtitle.group.label"));
+            groupSubtitle.setSize(758, 284);
+            FormData group2LData = new FormData();
+            groupSubtitle.addFocusListener(new FocusAdapter() {
+                public void focusLost(FocusEvent evt) {
+                    System.out.println("groupSubtitle.focusLost, event="
+                        + evt);
+                    buttonSubtitleCancel.setEnabled(false);
+                    buttonSubtitleDelete.setEnabled(false);
+                    buttonSubtitleEdit.setEnabled(false);
+                    buttonSubtitleNew.setEnabled(false);
+                    buttonSubtitleSave.setEnabled(false);
+                    
+                }
+            });
+            groupSubtitle.setLayout(group2Layout);
+            groupSubtitle.setLayoutData(group2LData);
+            {
+                sashFormSubtitle = new SashForm(groupSubtitle, SWT.NONE);
+                FormLayout sashForm2Layout = new FormLayout();
+                sashFormSubtitle.setSize(748, 300);
+                GridData sashForm2LData = new GridData();
+                sashFormSubtitle.setLayout(sashForm2Layout);
+                sashForm2LData.verticalAlignment = GridData.FILL;
+                sashForm2LData.horizontalAlignment = GridData.FILL;
+                sashForm2LData.grabExcessHorizontalSpace = true;
+                sashForm2LData.grabExcessVerticalSpace = true;
+                sashFormSubtitle.setLayoutData(sashForm2LData);
+
+                //init die Gruppe f?r Subtitle ?berblick
+                initSubtitleGroupOverview();
+                //init die Detailansicht
+                initSubtitleGroupDetail();
+
+            }
+        }
+
+        
+    }
+
+    /**
+     * 
+     */
+    private void initSubtitleGroupDetail() {
+        groupSubtitleDetail = new Group(sashFormSubtitle, SWT.NONE);
+        GridLayout groupSubtitleDetailLayout = new GridLayout();
+        groupSubtitleDetailLayout.marginHeight = 25;
+        groupSubtitleDetailLayout.numColumns = 6;
+        groupSubtitleDetailLayout.verticalSpacing = 15;
+        groupSubtitleDetail.setText(l
+                .getString("Subtitle.groupdetail.label"));
+        FormData formData = new FormData();
+        groupSubtitleDetail.setLayout(groupSubtitleDetailLayout);
+        formData.right = new FormAttachment(100, 100, -5);
+        formData.top = new FormAttachment(0, 100, 5);
+        formData.bottom = new FormAttachment(100, 100, -5);
+        groupSubtitleDetail.setLayoutData(formData);
+        {
+            labelSubtitleId = new Label(groupSubtitleDetail, SWT.NONE);
+            labelSubtitleId.setText(l
+                    .getString("Subtitle.groupdetail.idlabel")
+                    + ":");
+            labelSubtitleId.setSize(125, 15);
+            GridData formData2 = new GridData();
+            formData2.widthHint = 125;
+            formData2.heightHint = 15;
+            formData2.horizontalSpan = 2;
+            labelSubtitleId.setLayoutData(formData2);
+        }
+        {
+            textSubtitleID = new Text(groupSubtitleDetail, SWT.READ_ONLY
+                    | SWT.BORDER);
+            GridData text1LData1 = new GridData();
+            text1LData1.horizontalAlignment = GridData.FILL;
+            text1LData1.heightHint = 13;
+            text1LData1.horizontalSpan = 4;
+            text1LData1.grabExcessHorizontalSpace = true;
+            textSubtitleID.setLayoutData(text1LData1);
+        }
+        {
+            labelSubtitleName = new Label(groupSubtitleDetail, SWT.NONE);
+            labelSubtitleName.setText(l
+                    .getString("Subtitle.groupdetail.namelabel")
+                    + ":");
+            labelSubtitleName.setSize(125, 15);
+            GridData labelSubtitleNameLData = new GridData();
+            labelSubtitleNameLData.widthHint = 125;
+            labelSubtitleNameLData.heightHint = 15;
+            labelSubtitleNameLData.horizontalSpan = 2;
+            labelSubtitleName.setLayoutData(labelSubtitleNameLData);
+        }
+        {
+            textSubtitleName = new Text(groupSubtitleDetail,
+                    SWT.READ_ONLY | SWT.BORDER);
+            GridData text1LData2 = new GridData();
+            text1LData2.horizontalAlignment = GridData.FILL;
+            text1LData2.heightHint = 13;
+            text1LData2.horizontalSpan = 4;
+            text1LData2.grabExcessHorizontalSpace = true;
+            textSubtitleName.setLayoutData(text1LData2);
+        }
+        {
+            labelSubtitleShortname = new Label(groupSubtitleDetail,
+                    SWT.NONE);
+            labelSubtitleShortname.setText(l
+                    .getString("Subtitle.groupdetail.shortcutlabel")
+                    + ":");
+            labelSubtitleShortname.setSize(125, 15);
+            GridData label1LData1 = new GridData();
+            label1LData1.widthHint = 125;
+            label1LData1.heightHint = 15;
+            label1LData1.horizontalSpan = 2;
+            labelSubtitleShortname.setLayoutData(label1LData1);
+        }
+        {
+            textSubtitleShortname = new Text(groupSubtitleDetail,
+                    SWT.READ_ONLY | SWT.BORDER);
+            GridData text1LData3 = new GridData();
+            text1LData3.horizontalAlignment = GridData.FILL;
+            text1LData3.heightHint = 13;
+            text1LData3.horizontalSpan = 4;
+            text1LData3.grabExcessHorizontalSpace = true;
+            textSubtitleShortname.setLayoutData(text1LData3);
+        }
+        {
+
+//          die Buttons bekommen ein eigenes Composite
+            composite2 = new Composite(groupSubtitleDetail, SWT.EMBEDDED);
+            GridLayout composite2Layout = new GridLayout();
+            composite2Layout.numColumns = 6;
+            GridData composite2LData = new GridData();
+            composite2.setLayout(composite2Layout);
+            composite2LData.verticalAlignment = GridData.END;
+            composite2LData.horizontalAlignment = GridData.CENTER;
+            composite2LData.widthHint = 391;
+            composite2LData.horizontalSpan = 6;
+            composite2LData.grabExcessHorizontalSpace = true;
+            composite2LData.grabExcessVerticalSpace = true;
+            composite2LData.heightHint = 35;
+            composite2.setLayoutData(composite2LData);
+
+            //init all the Buttons
+            initSubtitleDetailButtons();
+
+        }
+        
+    }
+
+    /**
+     * 
+     */
+    private void initSubtitleDetailButtons() {
+        buttonSubtitleNew = new Button(composite2, SWT.PUSH | SWT.CENTER);
+        buttonSubtitleNew.setText(l.getString("button.new"));
+        buttonSubtitleNew.addSelectionListener(new SelectionAdapter() {
+            public void widgetSelected(SelectionEvent evt) {
+
+                textSubtitleID.setText("");
+                textSubtitleName.setText("");
+                textSubtitleShortname.setText("");
+                
+
+                textSubtitleName.setEditable(true);
+                textSubtitleShortname.setEditable(true);
+                buttonSubtitleCancel.setEnabled(true);
+                buttonSubtitleSave.setEnabled(true);
+                buttonSubtitleNew.setEnabled(false);
+                buttonSubtitleEdit.setEnabled(false);
+                buttonSubtitleDelete.setEnabled(false);
+                
+                textSubtitleSearch.setEditable(false);
+                tableSubtitle.setEnabled(false);
+
+                mode_Subtitle = ManagementGui.MODE_ADD;
+
+            }
+        });
+
+        buttonSubtitleEdit = new Button(composite2, SWT.PUSH | SWT.CENTER);
+        buttonSubtitleEdit.setText(l.getString("button.edit"));
+        buttonSubtitleEdit.setEnabled(false);
+        buttonSubtitleEdit.addSelectionListener(new SelectionAdapter() {
+            public void widgetSelected(SelectionEvent evt) {
+
+                mode_Subtitle = ManagementGui.MODE_EDIT;
+
+
+                textSubtitleID.setEditable(false);
+
+                textSubtitleName.setEditable(true);
+                textSubtitleName.setFocus();
+                textSubtitleShortname.setEditable(true);
+                buttonSubtitleCancel.setEnabled(true);
+                buttonSubtitleSave.setEnabled(true);
+                buttonSubtitleNew.setEnabled(false);
+                buttonSubtitleEdit.setEnabled(false);
+                buttonSubtitleDelete.setEnabled(false);
+
+
+                tableSubtitle.setEnabled(false);
+                textSubtitleSearch.setEnabled(false);
+                
+
+            }
+        });
+
+        buttonSubtitleDelete = new Button(composite2, SWT.PUSH | SWT.CENTER);
+        buttonSubtitleDelete.setText(l.getString("button.delete"));
+        buttonSubtitleDelete.setEnabled(false);
+        buttonSubtitleDelete.addSelectionListener(new SelectionAdapter() {
+            public void widgetSelected(SelectionEvent evt) {
+                System.out
+                        .println("buttonSubtitleDelete.widgetSelected, event="
+                                + evt);
+                
+                
+               String msg = MessageFormat.format(
+                       l.getString("Subtitle.groupdetail.deletebutton.question.text"),
+                               new Object[]{textSubtitleName.getText()+" "+textSubtitleShortname.getText()});
+                
+               int question = showMsg(msg,
+                       l.getString("Subtitle.groupdetail.deletebutton.question.header"), 
+                       SWT.ICON_QUESTION | SWT.YES | SWT.NO);
+               
+               if (question != SWT.YES){
+                   return;
+               }
+                
+                Subtitle o = new Subtitle();
+                o.setSubtitleId(new Integer(Integer.parseInt(textSubtitleID.getText())));
+                o.setName(textSubtitleName.getText());
+                o.setShortname(textSubtitleShortname.getText());
+                
+                try {
+                    //object speichern
+                    // Fehlerbehandlung
+                    Database.deleteObject(o);
+
+                    //?bersichtsTabelle aktualisieren
+                    refreshSubtitleTable(textSubtitleSearch.getText());
+                    
+                    //Detailansicht leeren
+                    textSubtitleID.setText("");
+                    textSubtitleName.setText("");
+                    textSubtitleShortname.setText("");
+                    
+                    //in Tabelle n?chsten ausw?hlen
+                    try {
+                        tableSubtitle.select(0);
+                    } catch (Exception ex) {}
+                    
+                    //Statusline Nachricht sezten
+                    statusLine.setStatus(1,l.getString("Subtitle.groupdetail.deletebutton.newok"));
+
+                } catch (DataBaseException e) {
+                    if (e.getMessage().equalsIgnoreCase("1")) {
+                        //Fehler beim Speichern des Objectes
+
+                        statusLine.setStatus(3,l.getString("Subtitle.groupdetail.deletebutton.errorsave"));
+                        showMsg(l.getString("Subtitle.groupdetail.deletebutton.errorsave"),
+                                l.getString("error"), SWT.ICON_ERROR | SWT.OK);
+                        
+                    } else if (e.getMessage().equalsIgnoreCase("2")) {
+                        //fehler beim db aufbau
+                        statusLine.setStatus(3,l.getString("Subtitle.groupdetail.deletebutton.errordb"));
+                        showMsg(l.getString("Subtitle.groupdetail.deletebutton.errordb"),
+                                l.getString("error"), SWT.ICON_ERROR | SWT.OK);
+                        
+                    } else {
+                        //@todo
+                        e.printStackTrace();
+                    }
+                    
+                }                
+                
+
+                }
+
+            }
+        );
+
+        //leerer nicht sichtbarer Button
+        buttonSubtitleFill = new Button(composite2, SWT.PUSH | SWT.CENTER);
+        GridData buttonSubtitleFillLData = new GridData();
+        buttonSubtitleFill.setVisible(false);
+        buttonSubtitleFill.setEnabled(false);
+        buttonSubtitleFillLData.widthHint = 30;
+        buttonSubtitleFillLData.heightHint = 23;
+        buttonSubtitleFill.setLayoutData(buttonSubtitleFillLData);
+
+        buttonSubtitleSave = new Button(composite2, SWT.PUSH | SWT.CENTER);
+        buttonSubtitleSave.setText(l.getString("button.save"));
+        buttonSubtitleSave.setEnabled(false);
+        buttonSubtitleSave.addSelectionListener(new SelectionAdapter() {
+            public void widgetSelected(SelectionEvent evt) {
+                System.out
+                        .println("buttonSubtitleSave.widgetSelected, event="
+                                + evt);
+
+                
+                //testen ob Name leer ist
+                if (textSubtitleName.getText().trim().equalsIgnoreCase("")) {
+                    
+                    showMsg(l.getString("Subtitle.groupdetail.savebutton.warn.noname.msg"),
+                            l.getString("Subtitle.groupdetail.savebutton.warn.noname.title"),
+                            SWT.ICON_WARNING | SWT.YES);
+
+                    	return;
+                }
+                
+                //testen welcher mode
+                
+                if (mode_Subtitle == ManagementGui.MODE_ADD) {
+                    
+                    /**
+                     * @todo eine Exception bekommen wieder leider NOCH nicht mit
+                     * d.h. es muss noch ein r?ckgabewert kommen oder eine Exception 
+                     * ?bermitteln werden (aus der DB Klasse)
+                     */
+                    //neues Objekt erzeugen
+                    Subtitle tmp = new Subtitle(textSubtitleName.getText(),
+                            textSubtitleShortname.getText());
+                    
+                    try {
+                        //object speichern
+                        // Fehlerbehandlung
+                        Object o = Database.saveObject(
+                                new Subtitle(textSubtitleName.getText(),
+                                        textSubtitleShortname.getText()));
+                        
+                        // in ?bersichtstabelle einf?gen
+                        insertIntoSubtitleTable((Subtitle)o);
+                        textSubtitleID.setText( ((Subtitle)o).getSubtitleId()+"" );
+                        
+                        
+                        //Statusline Nachricht sezten
+                        statusLine.setStatus(1,l.getString("Subtitle.groupdetail.savebutton.newok"));
+
+                    } catch (DataBaseException e) {
+                        if (e.getMessage().equalsIgnoreCase("1")) {
+                            //Fehler beim Speichern des Objectes
+
+                            statusLine.setStatus(3,l.getString("Subtitle.groupdetail.savebutton.errorsave"));
+                            showMsg(l.getString("Subtitle.groupdetail.savebutton.errorsave"),"Fehler", SWT.ICON_ERROR | SWT.OK);
+                            
+                        } else if (e.getMessage().equalsIgnoreCase("2")) {
+                            //fehler beim db aufbau
+                            statusLine.setStatus(3,l.getString("Subtitle.groupdetail.savebutton.errordb"));
+                            showMsg(l.getString("Subtitle.groupdetail.savebutton.errordb"),"Fehler", SWT.ICON_ERROR | SWT.OK);
+                            
+                        } else {
+                            //@todo
+                            e.printStackTrace();
+                        }
+                        
+                    }
+                    
+                    
+                    //alle Buttons auf aktiv setzen
+                    setVideoGroupButtonSaveCancel();
+                    
+                } else if (mode_Subtitle == ManagementGui.MODE_EDIT) {
+                    
+                    Subtitle tmp = new Subtitle(textSubtitleName.getText(),
+                                    textSubtitleShortname.getText());
+        		tmp.setSubtitleId( new Integer (Integer.parseInt(textSubtitleID.getText())) );
+                try {
+                    //object speichern
+                    // Fehlerbehandlung
+                    Database.saveObject(tmp);
+                    //?bersichtstabelle aktualisieren
+                    refreshSubtitleTable(textSubtitleSearch.getText());
+                    
+                    //Statusline Nachricht sezten
+                    statusLine.setStatus(1,l.getString("Subtitle.groupdetail.savebutton.editok"));
+                   
+
+                } catch (DataBaseException e) {
+                    if (e.getMessage().equalsIgnoreCase("1")) {
+                        //Fehler beim Speichern des Objectes
+
+                        statusLine.setStatus(3,l.getString("Subtitle.groupdetail.savebutton.errorsave"));
+                        showMsg(l.getString("Subtitle.groupdetail.savebutton.errorsave"),"Fehler", SWT.ICON_ERROR | SWT.OK);
+                        
+                    } else if (e.getMessage().equalsIgnoreCase("2")) {
+                        //fehler beim db aufbau
+                        statusLine.setStatus(3,l.getString("Subtitle.groupdetail.savebutton.errordb"));
+                        showMsg(l.getString("Subtitle.groupdetail.savebutton.errordb"),"Fehler", SWT.ICON_ERROR | SWT.OK);
+                        
+                    } else {
+                        //@todo
+                        e.printStackTrace();
+                    }
+                    
+                }
+                    
+ 
+                    //alle Buttons auf aktiv setzen
+                    setVideoGroupButtonSaveCancel();
+                    
+                }
+                
+                
+                
+                /**
+                 * @todo Exception werfen, da nur die zwei Modes sein d?rfen
+                 */
+                
+            }
+        });
+
+        buttonSubtitleCancel = new Button(composite2, SWT.PUSH | SWT.CENTER);
+        buttonSubtitleCancel.setText(l.getString("button.cancel"));
+        buttonSubtitleCancel.setEnabled(false);
+        buttonSubtitleCancel.addSelectionListener(new SelectionAdapter() {
+            public void widgetSelected(SelectionEvent evt) {
+                System.out
+                        .println("buttonSubtitleCancel.widgetSelected, event="
+                                + evt);
+                setVideoGroupButtonSaveCancel();
+            }
+        });
+
+        
+    }
+
+    /**
+     * 
+     */
+    protected void setVideoGroupButtonSaveCancel() {
+        buttonSubtitleSave.setEnabled(false);
+        buttonSubtitleCancel.setEnabled(false);
+        buttonSubtitleEdit.setEnabled(true);
+        buttonSubtitleNew.setEnabled(true);
+        buttonSubtitleDelete.setEnabled(true);
+        textSubtitleName.setEditable(false);
+        textSubtitleShortname.setEditable(false);
+        textSubtitleSearch.setEditable(true);
+
+        // VideoTabelle aktivieren
+        tableSubtitle.setEnabled(true);
+
+        //VideoSearch aktivieren
+        textSubtitleSearch.setEnabled(true);
+        
+    }
+
+    /**
+     * @param subtitle
+     */
+    protected void insertIntoSubtitleTable(Subtitle s) {
+        TableItem item = new TableItem(tableSubtitle, SWT.NONE);
+        item.setText(new String[] { s.getSubtitleId() + "", s.getName(),
+                s.getShortname() });
+        
+    }
+
+    /**
+     * 
+     */
+    protected void refreshSubtitleTable(final String filter) {
+        if (tableSubtitle == null) {
+            System.out
+                    .println("Konnte Subtitletable nicht refreshen, da diese null ist!");
+            return;
+        }
+        System.out.println("Versuche nun VideoListe zu refreshen. Filter: "
+                + filter);
+        tableSubtitle.removeAll();
+        TableItem item;
+        java.util.List Subtitlelist = Database.getSubtitle(filter);
+
+        for (int i = 0; i < Subtitlelist.size(); i++) {
+
+            Subtitle o = (Subtitle) Subtitlelist.get(i);
+            item = new TableItem(tableSubtitle, SWT.NONE);
+            item.setText(new String[] { o.getSubtitleId() + "", o.getName(),
+                    o.getShortname() });
+
+        }
+
+        
+    }
+
+    /**
+     * 
+     */
+    private void initSubtitleGroupOverview() {
+        if (logger.isDebugEnabled()) {
+            logger.debug("initSubtitleGroupOverview() - start");
+        }
+
+        groupSubtitleOverview = new Group(sashFormSubtitle, SWT.NONE);
+        GridLayout group5Layout = new GridLayout();
+        group5Layout.numColumns = 8;
+        groupSubtitleOverview.setText(l
+                .getString("Subtitle.groupoverview.label"));
+        FormData group5LData = new FormData();
+        groupSubtitleOverview.setLayout(group5Layout);
+        group5LData.left = new FormAttachment(0, 100, 0);
+        group5LData.top = new FormAttachment(0, 100, 0);
+        groupSubtitleOverview.setLayoutData(group5LData);
+
+        //Tabelle anzeigen
+        initTableSubtitle();
+        //Suche darunter anzeigen
+        initSubtitleSearch();
+
+        if (logger.isDebugEnabled()) {
+            logger.debug("initSubtitleGroupOverview() - end");
+        }
+        
+    }
+
+    /**
+     * 
+     */
+    private void initSubtitleSearch() {
+        if (logger.isDebugEnabled()) {
+            logger.debug("initSubtitleSearch() - start");
+        }
+
+        //label f?r die Suche
+        labelSubtitleSearch = new Label(groupSubtitleOverview, SWT.NONE);
+        labelSubtitleSearch.setText(l
+                .getString("Subtitle.groupoverview.searchlabel")
+                + ":");
+        GridData label2LData = new GridData();
+        label2LData.horizontalSpan = 3;
+        labelSubtitleSearch.setLayoutData(label2LData);
+
+        //das Suchfeld
+        textSubtitleSearch = new Text(groupSubtitleOverview, SWT.BORDER);
+        GridData text2LData = new GridData();
+        textSubtitleSearch.addFocusListener(new FocusAdapter() {
+            public void focusLost(FocusEvent evt) {
+                if (logger.isDebugEnabled()) {
+                    logger.debug("focusLost(FocusEvent evt = " + evt + " "
+                            + textSubtitleSearch.getText() + ") - start");
+                }
+
+                refreshSubtitleTable(textSubtitleSearch.getText());
+
+                if (logger.isDebugEnabled()) {
+                    logger.debug("focusLost(FocusEvent) - end");
+                }
+            }
+        });
+
+        textSubtitleSearch.addListener(SWT.DefaultSelection, new Listener() {
+            public void handleEvent(Event e) {
+                if (logger.isDebugEnabled()) {
+                    logger.debug("handleEvent(Event e = " + e + " "
+                            + textSubtitleSearch.getText() + ") - start");
+                }
+
+                refreshSubtitleTable(textSubtitleSearch.getText());
+
+                if (logger.isDebugEnabled()) {
+                    logger.debug("handleEvent(Event) - end");
+                }
+            }
+        });
+
+        text2LData.horizontalAlignment = GridData.FILL;
+        text2LData.horizontalSpan = 5;
+        text2LData.grabExcessHorizontalSpace = true;
+        textSubtitleSearch.setLayoutData(text2LData);
+
+
+
+        if (logger.isDebugEnabled()) {
+            logger.debug("initSubtitleSearch() - end");
+        }
+        
+    }
+
+    /**
+     * 
+     */
+    private void initTableSubtitle() {
+        if (logger.isDebugEnabled()) {
+            logger.debug("initTableSubtitle() - start");
+        }
+
+        tableSubtitle = new Table(groupSubtitleOverview, SWT.SINGLE
+                | SWT.FULL_SELECTION | SWT.V_SCROLL | SWT.BORDER);
+        tableSubtitle.setHeaderVisible(true);
+        tableSubtitle.setLinesVisible(true);
+        GridData table2LData = new GridData();
+        tableSubtitle.addFocusListener(new FocusAdapter() {
+            public void focusLost(FocusEvent evt) {
+                System.out.println("tableSubtitle.focusLost, event=" + evt);
+                //TODO add your code for tableSubtitle.focusLost
+            }
+            public void focusGained(FocusEvent evt) {
+                System.out
+                    .println("tableSubtitle.focusGained, event=" + evt);
+                //TODO add your code for tableSubtitle.focusGained
+            }
+        });
+        tableSubtitle.addSelectionListener(new SelectionAdapter() {
+            public void widgetSelected(SelectionEvent evt) {
+                if (logger.isDebugEnabled()) {
+                    logger.debug("widgetSelected(SelectionEvent evt = "
+                        + evt
+                        + ") - start");
+                }
+
+                int index = tableSubtitle.getSelectionIndex();
+
+                System.out.println("Table select. id: "
+                    + index
+                    + " TableItem:"
+                    + tableSubtitle.getItem(index)
+                    + " id: "
+                    + tableSubtitle.getItem(index).getText(0));
+
+                //es wurde ein Element aus Tabelle ausgewaehlt jetzt muss die
+                //Detailansicht aktualisiert werden
+                refreshSubtitleDetail(tableSubtitle.getItem(index)
+                    .getText(0));
+
+                if (logger.isDebugEnabled()) {
+                    logger.debug("widgetSelected(SelectionEvent) - end");
+                }
+            }
+        });
+        table2LData.verticalAlignment = GridData.FILL;
+        table2LData.horizontalAlignment = GridData.FILL;
+        table2LData.horizontalSpan = 8;
+        table2LData.grabExcessHorizontalSpace = true;
+        table2LData.grabExcessVerticalSpace = true;
+        tableSubtitle.setLayoutData(table2LData);
+
+        //einzelne Spalten hinzuf?gen
+        tableColumn = new TableColumn(tableSubtitle, SWT.CENTER);
+        tableColumn.setText(l.getString("Subtitle.groupoverview.columnid"));
+        tableColumn.setWidth(50);
+
+        tableColumn = new TableColumn(tableSubtitle, SWT.CENTER);
+        tableColumn.setText(l.getString("Subtitle.groupoverview.columnname"));
+        tableColumn.setWidth(200);
+
+        tableColumn = new TableColumn(tableSubtitle, SWT.CENTER);
+        tableColumn.setText(l.getString("Subtitle.groupoverview.columnshortname"));
+        tableColumn.setWidth(75);
+
+        if (logger.isDebugEnabled()) {
+            logger.debug("initTableSubtitle() - end");
+        }
+        
+    }
+
+    /**
+     * @param text
+     */
+    protected void refreshSubtitleDetail(final String id) {
+        Subtitle object;
+        try {
+            //since we only can get a String value from the table, we
+            //need to convert this
+            object = Database.getSingleSubtitle(Integer.parseInt(id));
+
+            if (object == null) {
+
+                /*
+                 * 
+                 * @TODO Statusbar aktualiseren
+                 */
+                return;
+            }
+        } catch (Exception e) {
+            // TODO: handle exception
+            //id ist keine Zahl
+            return;
+        }
+
+        textSubtitleID.setText(object.getSubtitleId() + "");
+        textSubtitleName.setText(object.getName());
+        textSubtitleShortname.setText(object.getShortname());
+
+        //Buttons zum l?schen und editieren aktivieren
+        buttonSubtitleEdit.setEnabled(true);
+        buttonSubtitleDelete.setEnabled(true);
+
+        //Mode auf view setzen
+        mode_Subtitle = ManagementGui.MODE_VIEW;
+
+        
+    }
+
+    /**
+     * 
+     */
     private void initLanguageGroup() {
         {
             //init a group for the Language
@@ -894,7 +1646,6 @@
                 return;
             }
         } catch (Exception e) {
-            // TODO: handle exception
             //id ist keine Zahl
             return;
         }

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java	2004-11-11 10:33:45 UTC (rev 125)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java	2004-11-11 11:40:14 UTC (rev 126)
@@ -124,7 +124,7 @@
     private MenuItem viewDirectorMenuItem;
     
     private MenuItem viewVideoFormatMenuItem,viewActorMenuItem,viewGenreMenuItem;
-    private MenuItem viewSubtitleMenuItem,viewLanguageMenuItem,viewStatusMenuItem;
+    private MenuItem viewLanguageMenuItem,viewStatusMenuItem;
     private MenuItem viewConditionMenuItem,viewMovieMenuItem,viewDvdMenuItem, viewBillMenuItem;
     
 
@@ -469,10 +469,7 @@
 				cTabFolderMain.showSelection();
             }
         });         
-
-        viewSubtitleMenuItem = new MenuItem(viewMenu, SWT.CHECK);
-        viewSubtitleMenuItem.setText(l.getString("menu.view.subtitle"));
-        viewSubtitleMenuItem.setSelection(false);        
+       
         
         viewStatusMenuItem = new MenuItem(viewMenu, SWT.CHECK);
         viewStatusMenuItem.setText(l.getString("menu.view.status"));

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/language.properties
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/language.properties	2004-11-11 10:33:45 UTC (rev 125)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/language.properties	2004-11-11 11:40:14 UTC (rev 126)
@@ -32,3 +32,31 @@
 Language.groupdetail.deletebutton.newok=Datensatz wurde erfolgreich gel?scht.
 Language.groupdetail.deletebutton.errorsave=Datenbankfehler beim L?schen.
 Language.groupdetail.deletebutton.errordb=Datenbankfehler beim Herstellen der Verbindung(del).
+
+Subtitle.group.label=Subtitle
+Subtitle.groupoverview.label=?berblick
+Subtitle.groupoverview.columnid=id
+Subtitle.groupoverview.columnname=Name
+Subtitle.groupoverview.columnshortname=Abk.
+
+
+Subtitle.groupoverview.searchlabel=Suche nach
+Subtitle.groupdetail.label=Detail
+Subtitle.groupdetail.idlabel=Subtitle ID
+Subtitle.groupdetail.namelabel=Subtitle Name
+Subtitle.groupdetail.shortcutlabel=Subtitle Abk?rzung
+
+Subtitle.groupdetail.savebutton.warn.noname.title=Datensatz speichern
+Subtitle.groupdetail.savebutton.warn.noname.msg=Der Datensatz kann nicht gespeichert werden. \n Bitte geben Sie einen Namen an
+Subtitle.groupdetail.savebutton.newok=Speichern des neuen Subtitles erfolgreich.
+Subtitle.groupdetail.savebutton.editok=?ndern des Subtitles erfolgreich.
+
+Subtitle.groupdetail.savebutton.errorsave=Datenbankfehler beim Speichern.
+Subtitle.groupdetail.savebutton.errordb=Datenbankfehler beim Herstellen der Verbindung.(save).
+
+Subtitle.groupdetail.deletebutton.question.header=Wirklich l?schen?
+Subtitle.groupdetail.deletebutton.question.text=Wollen Sie den Datensatz {0} wirklich l?schen?
+Subtitle.groupdetail.deletebutton.newok=Datensatz wurde erfolgreich gel?scht.
+Subtitle.groupdetail.deletebutton.errorsave=Datenbankfehler beim L?schen.
+Subtitle.groupdetail.deletebutton.errordb=Datenbankfehler beim Herstellen der Verbindung(del).
+

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Subtitle.hbm.xml
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Subtitle.hbm.xml	2004-11-11 10:33:45 UTC (rev 125)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Subtitle.hbm.xml	2004-11-11 11:40:14 UTC (rev 126)
@@ -17,7 +17,9 @@
       <id name="subtitleId" type="int" column="SUBTITLEID">
         <meta attribute="scope-set">public</meta>
         <meta attribute="use-in-equals">true</meta>
-        <generator class="native"/>
+        <generator class="sequence">
+			<param name="sequence">subtitle_id_sequence</param>
+		</generator>
       </id>
  
       <property name="name" type="string" not-null="true">

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java	2004-11-11 10:33:45 UTC (rev 125)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java	2004-11-11 11:40:14 UTC (rev 126)
@@ -48,6 +48,7 @@
 import de.hsharz.provirent.objects.Director;
 import de.hsharz.provirent.objects.Genre;
 import de.hsharz.provirent.objects.Language;
+import de.hsharz.provirent.objects.Subtitle;
 import de.hsharz.provirent.objects.VideoFormat;
 import de.hsharz.provirent.objects.Actor;
 
@@ -67,13 +68,11 @@
         try {
             HibernateUtil.currentSession();
         } catch (HibernateException e) {
-            // TODO Auto-generated catch block
             e.printStackTrace();
         } finally {
             try {
                 HibernateUtil.closeSession();
             } catch (HibernateException e1) {
-                // TODO Auto-generated catch block
                 e1.printStackTrace();
             }
         }
@@ -198,7 +197,6 @@
                         // Something went wrong; discard all partial changes
                         tx.rollback();
                     } catch (HibernateException e1) {
-                        // TODO Auto-generated catch block
                         e1.printStackTrace();
                     }
                 }    
@@ -262,7 +260,6 @@
                         // Something went wrong; discard all partial changes
                         tx.rollback();
                     } catch (HibernateException e1) {
-                        // TODO Auto-generated catch block
                         e1.printStackTrace();
                     }
                 }    
@@ -770,6 +767,110 @@
 	    return returnobject;
 	    	
 	}
+	
+	/**
+	 * This method gets all Subtitles from the database.
+	 * searches for name or shortname or id
+	 * @param filter 
+	 * @return List of Subtitle objects, or an empty List
+	 */
+	public static List getSubtitle(final String filter){
+	    if (logger.isDebugEnabled()) {
+	        logger.debug("getSubtitle() - start. String filter= "+filter);
+	    }
+	    //init the returnlist
+	    List returnlist = new ArrayList();
+	
+	    Session s = null;
+	    
+	    try {
+	        //get new Session and begin Transaction
+	        s = HibernateUtil.currentSession();
+	            
+	            //init the criteria
+	            Criteria criteria = s.createCriteria(Subtitle.class);
+	            //any of the criteria 
+	            Disjunction any = Expression.disjunction();
+	
+	            //if filter not empty
+	            if (filter != null && !filter.equalsIgnoreCase("")) {
+	                any.add(Expression.like("name", "%"+filter+"%"));
+	                any.add(Expression.like("shortname", "%"+filter+"%"));
+	                
+	                //maybe we are searching for the id?
+	                try {
+	                    any.add(Expression.eq("SubtitleId", new Integer(Integer.parseInt(filter))));
+	                } catch (Exception e) {
+	                }
+	                
+	            }
+	            //add all criteria
+	            criteria.add(any);
+	            //get the results
+	            returnlist = criteria.list();
+	
+	
+	
+	
+	    } catch (Exception e) {
+	        logger.error(
+	                "getSubtitle() - Error while trying to do Transaction",
+	                e);
+	        returnlist = new ArrayList();
+	    } finally {
+	        try {
+	            // No matter what, close the session
+	            HibernateUtil.closeSession();
+	        } catch (HibernateException e1) {
+	            logger.error("getSubtitle() - Could not Close the Session", e1);
+	        }
+	    }
+	
+	    if (logger.isDebugEnabled()) {
+	        logger.debug("getSubtitle() - end");
+	    }
+	    return returnlist;
+	    
+	
+	}
+	
+	
+	public static Subtitle getSingleSubtitle(final int id){
+	    if (logger.isDebugEnabled()) {
+	        logger.debug("getSingleSubtitle() - start. int filter= "+id);
+	    }
+	    //init the returnlist
+	    Subtitle returnobject = null;
+	
+	    Session s = null;
+	    Transaction tx = null;
+	    try {
+	        //get new Session and begin Transaction
+	        s = HibernateUtil.currentSession();
+	
+	            returnobject = (Subtitle)s.get(Subtitle.class, new Integer(id));
+	
+	    } catch (Exception e) {
+	        logger.error(
+	                "getSingleSubtitle() - Error while trying to do Transaction",
+	                e);
+	        
+	    } finally {
+	        try {
+	            // No matter what, close the session
+	            HibernateUtil.closeSession();
+	        } catch (HibernateException e1) {
+	            logger.error("getSingleSubtitle() - Could not Close the Session", e1);
+	        }
+	    }
+	
+	    if (logger.isDebugEnabled()) {
+	        logger.debug("getSingleSubtitle() - end");
+	    }
+	    return returnobject;
+	    
+	
+	}
 
 	/**
 	 * This method gets all Directors from the database.

Modified: project_src/provirent_hibernate/src/test/provirent/hibernate/TestSubtitle.java
===================================================================
--- project_src/provirent_hibernate/src/test/provirent/hibernate/TestSubtitle.java	2004-11-11 10:33:45 UTC (rev 125)
+++ project_src/provirent_hibernate/src/test/provirent/hibernate/TestSubtitle.java	2004-11-11 11:40:14 UTC (rev 126)
@@ -84,7 +84,7 @@
         }
     }
 
-    public void testSubtitle() throws Exception {
+    /*public void testSubtitle() throws Exception {
         if (logger.isDebugEnabled()) {
             logger.debug("testCreating() - start");
         }
@@ -196,7 +196,7 @@
         if (logger.isDebugEnabled()) {
             logger.debug("testCreating() - end");
         }
-    }
+    }*/
 
     public void testSaveSubtitle() throws Exception {
         if (logger.isDebugEnabled()) {



From pschneider at sheep.berlios.de  Thu Nov 11 12:43:59 2004
From: pschneider at sheep.berlios.de (Philipp Schneider at BerliOS)
Date: Thu, 11 Nov 2004 12:43:59 +0100
Subject: [Provirent-svn-commit] r127 - project_src/provirent_hibernate/src/de/hsharz/provirent/objects
Message-ID: <200411111143.iABBhxcf005325@sheep.berlios.de>

Author: pschneider
Date: 2004-11-11 12:43:54 +0100 (Thu, 11 Nov 2004)
New Revision: 127

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Bill.hbm.xml
   project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Customer.hbm.xml
   project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Customer.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Dvd.hbm.xml
   project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Image.hbm.xml
Log:
- an Firebord angepasst
- DVD: unique="true" enfernt, da firebird probleme hat, muss nun MANUELL ?\195?\188berpr?\195?\188ft werden
- sql-type="BINARY" durch sql-type="BLOB" ersetzt

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Bill.hbm.xml
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Bill.hbm.xml	2004-11-11 11:40:14 UTC (rev 126)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Bill.hbm.xml	2004-11-11 11:43:54 UTC (rev 127)
@@ -30,7 +30,7 @@
 
  
       <property name="pdfFile" type="binary">
-      	<column name="pdffile" sql-type="binary" />
+      	<column name="pdffile" sql-type="BLOB" />
       </property>
 				
       <property name="pdfFileSize" type="int">

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Customer.hbm.xml
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Customer.hbm.xml	2004-11-11 11:40:14 UTC (rev 126)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Customer.hbm.xml	2004-11-11 11:43:54 UTC (rev 127)
@@ -29,7 +29,7 @@
       	<meta attribute="use-in-tostring">true</meta>
       </property>
                          
-      <property name="password" type="string" not-null="true">
+      <property name="userPassword" type="string" not-null="true">
       	<meta attribute="use-in-tostring">true</meta>
       </property>
                          

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Customer.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Customer.java	2004-11-11 11:40:14 UTC (rev 126)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Customer.java	2004-11-11 11:43:54 UTC (rev 127)
@@ -21,7 +21,7 @@
     private String userName;
 
     /** persistent field */
-    private String password;
+    private String userPassword;
 
     /** persistent field */
     private String hiddenQuestion;
@@ -36,9 +36,9 @@
     private de.hsharz.provirent.objects.Person person;
 
     /** full constructor */
-    public Customer(String userName, String password, String hiddenQuestion, String hiddenAnswer, Date dayOfRegistration, de.hsharz.provirent.objects.Person person) {
+    public Customer(String userName, String userPassword, String hiddenQuestion, String hiddenAnswer, Date dayOfRegistration, de.hsharz.provirent.objects.Person person) {
         this.userName = userName;
-        this.password = password;
+        this.userPassword = userPassword;
         this.hiddenQuestion = hiddenQuestion;
         this.hiddenAnswer = hiddenAnswer;
         this.dayOfRegistration = dayOfRegistration;
@@ -50,9 +50,9 @@
     }
 
     /** minimal constructor */
-    public Customer(String userName, String password, String hiddenQuestion, String hiddenAnswer) {
+    public Customer(String userName, String userPassword, String hiddenQuestion, String hiddenAnswer) {
         this.userName = userName;
-        this.password = password;
+        this.userPassword = userPassword;
         this.hiddenQuestion = hiddenQuestion;
         this.hiddenAnswer = hiddenAnswer;
     }
@@ -73,12 +73,12 @@
         this.userName = userName;
     }
 
-    public String getPassword() {
-        return this.password;
+    public String getUserPassword() {
+        return this.userPassword;
     }
 
-    public void setPassword(String password) {
-        this.password = password;
+    public void setUserPassword(String userPassword) {
+        this.userPassword = userPassword;
     }
 
     public String getHiddenQuestion() {
@@ -117,7 +117,7 @@
         return new ToStringBuilder(this)
             .append("customerId", getCustomerId())
             .append("userName", getUserName())
-            .append("password", getPassword())
+            .append("userPassword", getUserPassword())
             .append("hiddenQuestion", getHiddenQuestion())
             .append("hiddenAnswer", getHiddenAnswer())
             .append("dayOfRegistration", getDayOfRegistration())
@@ -131,7 +131,7 @@
         return new EqualsBuilder()
             .append(this.getCustomerId(), castOther.getCustomerId())
             .append(this.getUserName(), castOther.getUserName())
-            .append(this.getPassword(), castOther.getPassword())
+            .append(this.getUserPassword(), castOther.getUserPassword())
             .append(this.getHiddenQuestion(), castOther.getHiddenQuestion())
             .append(this.getHiddenAnswer(), castOther.getHiddenAnswer())
             .append(this.getDayOfRegistration(), castOther.getDayOfRegistration())
@@ -143,7 +143,7 @@
         return new HashCodeBuilder()
             .append(getCustomerId())
             .append(getUserName())
-            .append(getPassword())
+            .append(getUserPassword())
             .append(getHiddenQuestion())
             .append(getHiddenAnswer())
             .append(getDayOfRegistration())

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Dvd.hbm.xml
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Dvd.hbm.xml	2004-11-11 11:40:14 UTC (rev 126)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Dvd.hbm.xml	2004-11-11 11:43:54 UTC (rev 127)
@@ -34,7 +34,8 @@
   	
   	<many-to-one name="status" class="de.hsharz.provirent.objects.Status" column="STATUS"/>
   
-      <property name="barcode" type="string" unique="true">
+  <!--unique="true" entfernt, da interbase probleme damit hat-->
+      <property name="barcode" type="string" >
       	<meta attribute="use-in-tostring">true</meta>
       </property>
 

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Image.hbm.xml
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Image.hbm.xml	2004-11-11 11:40:14 UTC (rev 126)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Image.hbm.xml	2004-11-11 11:43:54 UTC (rev 127)
@@ -22,7 +22,7 @@
 
  
       <property name="imageFile" type="binary">
-      	<column name="pdffile" sql-type="BINARY" />
+      	<column name="pdffile" sql-type="BLOB" />
       </property>
 				
       <property name="imageFileSize" type="int">



From sforstner at sheep.berlios.de  Thu Nov 11 15:58:30 2004
From: sforstner at sheep.berlios.de (Stefan at BerliOS)
Date: Thu, 11 Nov 2004 15:58:30 +0100
Subject: [Provirent-svn-commit] r128 - in project_src/provirent_hibernate/src: de/hsharz/provirent/management/gui de/hsharz/provirent/management/gui/language de/hsharz/provirent/objects de/hsharz/provirent/persistence test/provirent/hibernate
Message-ID: <200411111458.iABEwUhk006743@sheep.berlios.de>

Author: sforstner
Date: 2004-11-11 15:58:27 +0100 (Thu, 11 Nov 2004)
New Revision: 128

Added:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeStatus.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/status.properties
Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeGenre.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeLanguage.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/language.properties
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/main.properties
   project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Condition.hbm.xml
   project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Status.hbm.xml
   project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java
   project_src/provirent_hibernate/src/test/provirent/hibernate/TestCondition.java
   project_src/provirent_hibernate/src/test/provirent/hibernate/TestCustomer.java
   project_src/provirent_hibernate/src/test/provirent/hibernate/TestCustomerOld.java
   project_src/provirent_hibernate/src/test/provirent/hibernate/TestDvdOld.java
   project_src/provirent_hibernate/src/test/provirent/hibernate/TestHibernate.java
   project_src/provirent_hibernate/src/test/provirent/hibernate/TestMovie.java
   project_src/provirent_hibernate/src/test/provirent/hibernate/TestStatus.java
Log:
-Status und Condition erledigt
-Testfiles etwas umge?\195?\164ndert

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeGenre.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeGenre.java	2004-11-11 11:43:54 UTC (rev 127)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeGenre.java	2004-11-11 14:58:27 UTC (rev 128)
@@ -201,6 +201,7 @@
             sashForm1.setLayoutData(sashForm1LData1);
 
             initGenreGroup();
+            refreshGenreTable(textGenreSearch.getText());
 
         }
         this.layout();

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeLanguage.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeLanguage.java	2004-11-11 11:43:54 UTC (rev 127)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeLanguage.java	2004-11-11 14:58:27 UTC (rev 128)
@@ -35,8 +35,6 @@
 
 import de.hsharz.provirent.objects.Language;
 import de.hsharz.provirent.objects.Subtitle;
-import de.hsharz.provirent.objects.Subtitle;
-import de.hsharz.provirent.objects.Subtitle;
 import de.hsharz.provirent.persistence.DataBaseException;
 import de.hsharz.provirent.persistence.Database;
 /**
@@ -252,6 +250,8 @@
 
             initLanguageGroup();
             initSubTitleGroup();
+            refreshLanguageTable(textLanguageSearch.getText());
+            refreshSubtitleTable(textSubtitleSearch.getText());
 
         }
         this.layout();

Added: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeStatus.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeStatus.java	2004-11-11 11:43:54 UTC (rev 127)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeStatus.java	2004-11-11 14:58:27 UTC (rev 128)
@@ -0,0 +1,1669 @@
+package de.hsharz.provirent.management.gui;
+
+import java.text.MessageFormat;
+import java.util.Locale;
+import java.util.PropertyResourceBundle;
+import java.util.ResourceBundle;
+
+import org.apache.log4j.Logger;
+import org.eclipse.swt.SWT;
+import org.eclipse.swt.custom.SashForm;
+import org.eclipse.swt.events.FocusAdapter;
+import org.eclipse.swt.events.FocusEvent;
+import org.eclipse.swt.events.SelectionAdapter;
+import org.eclipse.swt.events.SelectionEvent;
+import org.eclipse.swt.layout.FormAttachment;
+import org.eclipse.swt.layout.FormData;
+import org.eclipse.swt.layout.FormLayout;
+import org.eclipse.swt.layout.GridData;
+import org.eclipse.swt.layout.GridLayout;
+import org.eclipse.swt.widgets.Button;
+import org.eclipse.swt.widgets.Composite;
+import org.eclipse.swt.widgets.Display;
+import org.eclipse.swt.widgets.Event;
+import org.eclipse.swt.widgets.Group;
+import org.eclipse.swt.widgets.Label;
+import org.eclipse.swt.widgets.List;
+import org.eclipse.swt.widgets.Listener;
+import org.eclipse.swt.widgets.Shell;
+import org.eclipse.swt.widgets.Table;
+import org.eclipse.swt.widgets.TableColumn;
+import org.eclipse.swt.widgets.TableItem;
+import org.eclipse.swt.widgets.Text;
+
+import com.cloudgarden.resource.SWTResourceManager;
+
+import de.hsharz.provirent.objects.Condition;
+import de.hsharz.provirent.objects.Status;
+import de.hsharz.provirent.persistence.DataBaseException;
+import de.hsharz.provirent.persistence.Database;
+/**
+* This code was generated using CloudGarden's Jigloo
+* SWT/Swing GUI Builder, which is free for non-commercial
+* use. If Jigloo is being used commercially (ie, by a corporation,
+* company or business for any purpose whatever) then you
+* should purchase a license for each developer using Jigloo.
+* Please visit www.cloudgarden.com for details.
+* Use of Jigloo implies acceptance of these licensing terms.
+* *************************************
+* A COMMERCIAL LICENSE HAS NOT BEEN PURCHASED
+* for this machine, so Jigloo or this code cannot be used legally
+* for any corporate or commercial purpose.
+* *************************************
+*/
+public class CompositeStatus extends AbstractComposite{
+
+    {
+        //Register as a resource user - SWTResourceManager will
+        //handle the obtaining and disposing of resources
+        SWTResourceManager.registerResourceUser(this);
+    }
+
+
+    /**
+     * Logger for this class
+     */
+    private static final Logger logger = Logger
+            .getLogger(CompositeStatus.class);
+    
+    
+    private final static int MODE_VIEW = 0;
+
+    private final static int MODE_ADD = 1;
+    
+    private SashForm sashForm1;
+
+    private Group groupStatusOverview;
+
+    private Group groupStatusDetail;
+
+    private Label labelStatusId;
+
+    private Label labelStatusShortname;
+
+    private Text textStatusName;
+
+    private Label labelStatusName;
+
+    private Text textStatusID;
+    
+    private Button buttonStatusCancel;
+
+    private Button buttonStatusSave;
+
+    private Button buttonStatusFill;
+
+    private Button buttonStatusDelete;
+
+    private Button buttonStatusEdit;
+
+    private Button buttonStatusNew;
+
+    private Text textStatusShortname;
+
+    private Text textStatusSearch;
+
+    private Label labelStatusSearch;
+
+    private Table tableStatus;
+
+    private SashForm sashFormStatus;
+
+    private Group groupStatus;
+    
+    private Group groupConditionOverview;
+
+    private Group groupConditionDetail;
+
+    private Label labelConditionId;
+
+    private Label labelConditionShortname;
+
+    private Text textConditionName;
+
+    private Label labelConditionName;
+
+    private Text textConditionID;
+    
+    private Button buttonConditionCancel;
+
+    private Button buttonConditionSave;
+
+    private Button buttonConditionFill;
+
+    private Button buttonConditionDelete;
+
+    private Button buttonConditionEdit;
+
+    private Button buttonConditionNew;
+
+    private Text textConditionShortname;
+
+    private Text textConditionSearch;
+
+    private Label labelConditionSearch;
+
+    private SashForm sashFormCondition;
+
+    private Group groupCondition;
+    
+    private int mode_Condition = 0;
+    
+    private List list1;
+    
+    private Table tableCondition;
+
+    private Group group1Condition;
+
+    private final static int MODE_EDIT = 2;
+    
+    private StatusLineStyledText statusLine;
+
+    private ResourceBundle l;
+    
+    private Composite parent;
+
+
+    private Composite composite2;
+
+
+    protected int mode_Status;
+
+
+    private TableColumn tableColumn;
+    
+    private TableColumn tableColumn1, tableColumn2, tableColumn3;
+    
+    /*
+     * ?ndert die Sprache aller Elemente
+     * 
+     * @see de.hsharz.provirent.managment.gui.AbstractComposite#changeStatus(java.util.Locale)
+     */
+    public void changeLanguage(Locale locale) {
+
+    }
+
+    /* 
+     * Init die Sprache (properties Datei)
+     * @see de.hsharz.provirent.managment.gui.AbstractComposite#initStatus(java.util.Locale)
+     */
+    public void initLanguage(Locale locale) {
+
+        l = PropertyResourceBundle.getBundle(
+                "de.hsharz.provirent.management.gui.Language.Status", locale);
+
+    }
+    
+    
+	/**
+	* Auto-generated main method to display this 
+	* org.eclipse.swt.widgets.Composite inside a new Shell.
+	*/
+	public static void main(String[] args) {
+		showGUI();
+	}
+		
+	/**
+	* Auto-generated method to display this 
+	* org.eclipse.swt.widgets.Composite inside a new Shell.
+	*/
+	public static void showGUI() {
+		Display display = Display.getDefault();
+		Shell shell = new Shell(display);
+
+		shell.open();
+		while (!shell.isDisposed()) {
+			if (!display.readAndDispatch())
+				display.sleep();
+		}
+	}
+
+	public CompositeStatus(Composite p, int style,
+            StatusLineStyledText status, Locale l) {
+	    super(p, style, status, l);
+        parent = p;
+        //Statusline wird gestzt
+        statusLine = status;
+        
+        //sprache wird init
+        initLanguage(l);
+	    
+	    
+		initGUI();
+	}
+
+	private void initGUI() {
+	    if (logger.isDebugEnabled()) {
+            logger.debug("initGUI() - start");
+        }
+
+        this.setLayout(new GridLayout());
+        this.setSize(816, 540);
+        {
+            sashForm1 = new SashForm(this, SWT.VERTICAL | SWT.V_SCROLL);
+            GridData sashForm1LData1 = new GridData();
+            sashForm1LData1.grabExcessHorizontalSpace = true;
+            sashForm1LData1.horizontalAlignment = GridData.FILL;
+            sashForm1LData1.grabExcessVerticalSpace = true;
+            sashForm1LData1.verticalAlignment = GridData.FILL;
+            sashForm1.setLayoutData(sashForm1LData1);
+
+            initStatusGroup();
+            initConditionGroup();
+            refreshStatusTable(textStatusSearch.getText());
+            refreshConditionTable(textConditionSearch.getText());
+
+        }
+        this.layout();
+
+        if (logger.isDebugEnabled()) {
+            logger.debug("initGUI() - end");
+        }
+    } 
+	
+	/**
+     * 
+     */
+    private void initConditionGroup() {
+        {
+            //init a group for the Condition
+            groupCondition = new Group(sashForm1, SWT.NONE);
+            GridLayout group2Layout = new GridLayout();
+            group2Layout.makeColumnsEqualWidth = true;
+            groupCondition.setText(l.getString("Condition.group.label"));
+            groupCondition.setSize(758, 284);
+            FormData group2LData = new FormData();
+            groupCondition.addFocusListener(new FocusAdapter() {
+                public void focusLost(FocusEvent evt) {
+                    System.out.println("groupCondition.focusLost, event="
+                        + evt);
+                    buttonConditionCancel.setEnabled(false);
+                    buttonConditionDelete.setEnabled(false);
+                    buttonConditionEdit.setEnabled(false);
+                    buttonConditionNew.setEnabled(false);
+                    buttonConditionSave.setEnabled(false);
+                    
+                }
+            });
+            groupCondition.setLayout(group2Layout);
+            groupCondition.setLayoutData(group2LData);
+            {
+                sashFormCondition = new SashForm(groupCondition, SWT.NONE);
+                FormLayout sashForm2Layout = new FormLayout();
+                sashFormCondition.setSize(748, 300);
+                GridData sashForm2LData = new GridData();
+                sashFormCondition.setLayout(sashForm2Layout);
+                sashForm2LData.verticalAlignment = GridData.FILL;
+                sashForm2LData.horizontalAlignment = GridData.FILL;
+                sashForm2LData.grabExcessHorizontalSpace = true;
+                sashForm2LData.grabExcessVerticalSpace = true;
+                sashFormCondition.setLayoutData(sashForm2LData);
+
+                //init die Gruppe f?r Condition ?berblick
+                initConditionGroupOverview();
+                //init die Detailansicht
+                initConditionGroupDetail();
+
+            }
+        }
+
+        
+    }
+
+    /**
+     * 
+     */
+    private void initConditionGroupDetail() {
+        groupConditionDetail = new Group(sashFormCondition, SWT.NONE);
+        GridLayout groupConditionDetailLayout = new GridLayout();
+        groupConditionDetailLayout.marginHeight = 25;
+        groupConditionDetailLayout.numColumns = 6;
+        groupConditionDetailLayout.verticalSpacing = 15;
+        groupConditionDetail.setText(l
+                .getString("Condition.groupdetail.label"));
+        FormData formData = new FormData();
+        groupConditionDetail.setLayout(groupConditionDetailLayout);
+        formData.right = new FormAttachment(100, 100, -5);
+        formData.top = new FormAttachment(0, 100, 5);
+        formData.bottom = new FormAttachment(100, 100, -5);
+        groupConditionDetail.setLayoutData(formData);
+        {
+            labelConditionId = new Label(groupConditionDetail, SWT.NONE);
+            labelConditionId.setText(l
+                    .getString("Condition.groupdetail.idlabel")
+                    + ":");
+            labelConditionId.setSize(125, 15);
+            GridData formData2 = new GridData();
+            formData2.widthHint = 125;
+            formData2.heightHint = 15;
+            formData2.horizontalSpan = 2;
+            labelConditionId.setLayoutData(formData2);
+        }
+        {
+            textConditionID = new Text(groupConditionDetail, SWT.READ_ONLY
+                    | SWT.BORDER);
+            GridData text1LData1 = new GridData();
+            text1LData1.horizontalAlignment = GridData.FILL;
+            text1LData1.heightHint = 13;
+            text1LData1.horizontalSpan = 4;
+            text1LData1.grabExcessHorizontalSpace = true;
+            textConditionID.setLayoutData(text1LData1);
+        }
+        {
+            labelConditionName = new Label(groupConditionDetail, SWT.NONE);
+            labelConditionName.setText(l
+                    .getString("Condition.groupdetail.namelabel")
+                    + ":");
+            labelConditionName.setSize(125, 15);
+            GridData labelConditionNameLData = new GridData();
+            labelConditionNameLData.widthHint = 125;
+            labelConditionNameLData.heightHint = 15;
+            labelConditionNameLData.horizontalSpan = 2;
+            labelConditionName.setLayoutData(labelConditionNameLData);
+        }
+        {
+            textConditionName = new Text(groupConditionDetail,
+                    SWT.READ_ONLY | SWT.BORDER);
+            GridData text1LData2 = new GridData();
+            text1LData2.horizontalAlignment = GridData.FILL;
+            text1LData2.heightHint = 13;
+            text1LData2.horizontalSpan = 4;
+            text1LData2.grabExcessHorizontalSpace = true;
+            textConditionName.setLayoutData(text1LData2);
+        }
+        {
+            labelConditionShortname = new Label(groupConditionDetail,
+                    SWT.NONE);
+            labelConditionShortname.setText(l
+                    .getString("Condition.groupdetail.shortcutlabel")
+                    + ":");
+            labelConditionShortname.setSize(125, 15);
+            GridData label1LData1 = new GridData();
+            label1LData1.widthHint = 125;
+            label1LData1.heightHint = 15;
+            label1LData1.horizontalSpan = 2;
+            labelConditionShortname.setLayoutData(label1LData1);
+        }
+        {
+            textConditionShortname = new Text(groupConditionDetail,
+                    SWT.READ_ONLY | SWT.BORDER);
+            GridData text1LData3 = new GridData();
+            text1LData3.horizontalAlignment = GridData.FILL;
+            text1LData3.heightHint = 13;
+            text1LData3.horizontalSpan = 4;
+            text1LData3.grabExcessHorizontalSpace = true;
+            textConditionShortname.setLayoutData(text1LData3);
+        }
+        {
+
+//          die Buttons bekommen ein eigenes Composite
+            composite2 = new Composite(groupConditionDetail, SWT.EMBEDDED);
+            GridLayout composite2Layout = new GridLayout();
+            composite2Layout.numColumns = 6;
+            GridData composite2LData = new GridData();
+            composite2.setLayout(composite2Layout);
+            composite2LData.verticalAlignment = GridData.END;
+            composite2LData.horizontalAlignment = GridData.CENTER;
+            composite2LData.widthHint = 391;
+            composite2LData.horizontalSpan = 6;
+            composite2LData.grabExcessHorizontalSpace = true;
+            composite2LData.grabExcessVerticalSpace = true;
+            composite2LData.heightHint = 35;
+            composite2.setLayoutData(composite2LData);
+
+            //init all the Buttons
+            initConditionDetailButtons();
+
+        }
+        
+    }
+
+    /**
+     * 
+     */
+    private void initConditionDetailButtons() {
+        buttonConditionNew = new Button(composite2, SWT.PUSH | SWT.CENTER);
+        buttonConditionNew.setText(l.getString("button.new"));
+        buttonConditionNew.addSelectionListener(new SelectionAdapter() {
+            public void widgetSelected(SelectionEvent evt) {
+
+                textConditionID.setText("");
+                textConditionName.setText("");
+                textConditionShortname.setText("");
+                
+
+                textConditionName.setEditable(true);
+                textConditionShortname.setEditable(true);
+                buttonConditionCancel.setEnabled(true);
+                buttonConditionSave.setEnabled(true);
+                buttonConditionNew.setEnabled(false);
+                buttonConditionEdit.setEnabled(false);
+                buttonConditionDelete.setEnabled(false);
+                
+                textConditionSearch.setEditable(false);
+                tableCondition.setEnabled(false);
+
+                mode_Condition = ManagementGui.MODE_ADD;
+
+            }
+        });
+
+        buttonConditionEdit = new Button(composite2, SWT.PUSH | SWT.CENTER);
+        buttonConditionEdit.setText(l.getString("button.edit"));
+        buttonConditionEdit.setEnabled(false);
+        buttonConditionEdit.addSelectionListener(new SelectionAdapter() {
+            public void widgetSelected(SelectionEvent evt) {
+
+                mode_Condition = ManagementGui.MODE_EDIT;
+
+
+                textConditionID.setEditable(false);
+
+                textConditionName.setEditable(true);
+                textConditionName.setFocus();
+                textConditionShortname.setEditable(true);
+                buttonConditionCancel.setEnabled(true);
+                buttonConditionSave.setEnabled(true);
+                buttonConditionNew.setEnabled(false);
+                buttonConditionEdit.setEnabled(false);
+                buttonConditionDelete.setEnabled(false);
+
+
+                tableCondition.setEnabled(false);
+                textConditionSearch.setEnabled(false);
+                
+
+            }
+        });
+
+        buttonConditionDelete = new Button(composite2, SWT.PUSH | SWT.CENTER);
+        buttonConditionDelete.setText(l.getString("button.delete"));
+        buttonConditionDelete.setEnabled(false);
+        buttonConditionDelete.addSelectionListener(new SelectionAdapter() {
+            public void widgetSelected(SelectionEvent evt) {
+                System.out
+                        .println("buttonConditionDelete.widgetSelected, event="
+                                + evt);
+                
+                
+               String msg = MessageFormat.format(
+                       l.getString("Condition.groupdetail.deletebutton.question.text"),
+                               new Object[]{textConditionName.getText()+" "+textConditionShortname.getText()});
+                
+               int question = showMsg(msg,
+                       l.getString("Condition.groupdetail.deletebutton.question.header"), 
+                       SWT.ICON_QUESTION | SWT.YES | SWT.NO);
+               
+               if (question != SWT.YES){
+                   return;
+               }
+                
+                Condition o = new Condition();
+                o.setConditionId(new Integer(Integer.parseInt(textConditionID.getText())));
+                o.setConditionName(textConditionName.getText());
+                o.setConditionshortname(textConditionShortname.getText());
+                
+                try {
+                    //object speichern
+                    // Fehlerbehandlung
+                    Database.deleteObject(o);
+
+                    //?bersichtsTabelle aktualisieren
+                    refreshConditionTable(textConditionSearch.getText());
+                    
+                    //Detailansicht leeren
+                    textConditionID.setText("");
+                    textConditionName.setText("");
+                    textConditionShortname.setText("");
+                    
+                    //in Tabelle n?chsten ausw?hlen
+                    try {
+                        tableCondition.select(0);
+                    } catch (Exception ex) {}
+                    
+                    //Statusline Nachricht sezten
+                    statusLine.setStatus(1,l.getString("Condition.groupdetail.deletebutton.newok"));
+
+                } catch (DataBaseException e) {
+                    if (e.getMessage().equalsIgnoreCase("1")) {
+                        //Fehler beim Speichern des Objectes
+
+                        statusLine.setStatus(3,l.getString("Condition.groupdetail.deletebutton.errorsave"));
+                        showMsg(l.getString("Condition.groupdetail.deletebutton.errorsave"),
+                                l.getString("error"), SWT.ICON_ERROR | SWT.OK);
+                        
+                    } else if (e.getMessage().equalsIgnoreCase("2")) {
+                        //fehler beim db aufbau
+                        statusLine.setStatus(3,l.getString("Condition.groupdetail.deletebutton.errordb"));
+                        showMsg(l.getString("Condition.groupdetail.deletebutton.errordb"),
+                                l.getString("error"), SWT.ICON_ERROR | SWT.OK);
+                        
+                    } else {
+                        //@todo
+                        e.printStackTrace();
+                    }
+                    
+                }                
+                
+
+                }
+
+            }
+        );
+
+        //leerer nicht sichtbarer Button
+        buttonConditionFill = new Button(composite2, SWT.PUSH | SWT.CENTER);
+        GridData buttonConditionFillLData = new GridData();
+        buttonConditionFill.setVisible(false);
+        buttonConditionFill.setEnabled(false);
+        buttonConditionFillLData.widthHint = 30;
+        buttonConditionFillLData.heightHint = 23;
+        buttonConditionFill.setLayoutData(buttonConditionFillLData);
+
+        buttonConditionSave = new Button(composite2, SWT.PUSH | SWT.CENTER);
+        buttonConditionSave.setText(l.getString("button.save"));
+        buttonConditionSave.setEnabled(false);
+        buttonConditionSave.addSelectionListener(new SelectionAdapter() {
+            public void widgetSelected(SelectionEvent evt) {
+                System.out
+                        .println("buttonConditionSave.widgetSelected, event="
+                                + evt);
+
+                
+                //testen ob Name leer ist
+                if (textConditionName.getText().trim().equalsIgnoreCase("")) {
+                    
+                    showMsg(l.getString("Condition.groupdetail.savebutton.warn.noname.msg"),
+                            l.getString("Condition.groupdetail.savebutton.warn.noname.title"),
+                            SWT.ICON_WARNING | SWT.YES);
+
+                    	return;
+                }
+                
+                //testen welcher mode
+                
+                if (mode_Condition == ManagementGui.MODE_ADD) {
+                    
+                    /**
+                     * @todo eine Exception bekommen wieder leider NOCH nicht mit
+                     * d.h. es muss noch ein r?ckgabewert kommen oder eine Exception 
+                     * ?bermitteln werden (aus der DB Klasse)
+                     */
+                    //neues Objekt erzeugen
+                    Condition tmp = new Condition(textConditionName.getText(),
+                            textConditionShortname.getText());
+                    
+                    try {
+                        //object speichern
+                        // Fehlerbehandlung
+                        Object o = Database.saveObject(
+                                new Condition(textConditionName.getText(),
+                                        textConditionShortname.getText()));
+                        
+                        // in ?bersichtstabelle einf?gen
+                        insertIntoConditionTable((Condition)o);
+                        textConditionID.setText( ((Condition)o).getConditionId()+"" );
+                        
+                        
+                        //Statusline Nachricht sezten
+                        statusLine.setStatus(1,l.getString("Condition.groupdetail.savebutton.newok"));
+
+                    } catch (DataBaseException e) {
+                        if (e.getMessage().equalsIgnoreCase("1")) {
+                            //Fehler beim Speichern des Objectes
+
+                            statusLine.setStatus(3,l.getString("Condition.groupdetail.savebutton.errorsave"));
+                            showMsg(l.getString("Condition.groupdetail.savebutton.errorsave"),"Fehler", SWT.ICON_ERROR | SWT.OK);
+                            
+                        } else if (e.getMessage().equalsIgnoreCase("2")) {
+                            //fehler beim db aufbau
+                            statusLine.setStatus(3,l.getString("Condition.groupdetail.savebutton.errordb"));
+                            showMsg(l.getString("Condition.groupdetail.savebutton.errordb"),"Fehler", SWT.ICON_ERROR | SWT.OK);
+                            
+                        } else {
+                            //@todo
+                            e.printStackTrace();
+                        }
+                        
+                    }
+                    
+                    
+                    //alle Buttons auf aktiv setzen
+                    setVideoGroupButtonSaveCancel();
+                    
+                } else if (mode_Condition == ManagementGui.MODE_EDIT) {
+                    
+                    Condition tmp = new Condition(textConditionName.getText(),
+                                    textConditionShortname.getText());
+        		tmp.setConditionId( new Integer (Integer.parseInt(textConditionID.getText())) );
+                try {
+                    //object speichern
+                    // Fehlerbehandlung
+                    Database.saveObject(tmp);
+                    //?bersichtstabelle aktualisieren
+                    refreshConditionTable(textConditionSearch.getText());
+                    
+                    //Statusline Nachricht sezten
+                    statusLine.setStatus(1,l.getString("Condition.groupdetail.savebutton.editok"));
+                   
+
+                } catch (DataBaseException e) {
+                    if (e.getMessage().equalsIgnoreCase("1")) {
+                        //Fehler beim Speichern des Objectes
+
+                        statusLine.setStatus(3,l.getString("Condition.groupdetail.savebutton.errorsave"));
+                        showMsg(l.getString("Condition.groupdetail.savebutton.errorsave"),"Fehler", SWT.ICON_ERROR | SWT.OK);
+                        
+                    } else if (e.getMessage().equalsIgnoreCase("2")) {
+                        //fehler beim db aufbau
+                        statusLine.setStatus(3,l.getString("Condition.groupdetail.savebutton.errordb"));
+                        showMsg(l.getString("Condition.groupdetail.savebutton.errordb"),"Fehler", SWT.ICON_ERROR | SWT.OK);
+                        
+                    } else {
+                        //@todo
+                        e.printStackTrace();
+                    }
+                    
+                }
+                    
+ 
+                    //alle Buttons auf aktiv setzen
+                    setVideoGroupButtonSaveCancel();
+                    
+                }
+                
+                
+                
+                /**
+                 * @todo Exception werfen, da nur die zwei Modes sein d?rfen
+                 */
+                
+            }
+        });
+
+        buttonConditionCancel = new Button(composite2, SWT.PUSH | SWT.CENTER);
+        buttonConditionCancel.setText(l.getString("button.cancel"));
+        buttonConditionCancel.setEnabled(false);
+        buttonConditionCancel.addSelectionListener(new SelectionAdapter() {
+            public void widgetSelected(SelectionEvent evt) {
+                System.out
+                        .println("buttonConditionCancel.widgetSelected, event="
+                                + evt);
+                setVideoGroupButtonSaveCancel();
+            }
+        });
+
+        
+    }
+
+    /**
+     * 
+     */
+    protected void setVideoGroupButtonSaveCancel() {
+        buttonConditionSave.setEnabled(false);
+        buttonConditionCancel.setEnabled(false);
+        buttonConditionEdit.setEnabled(true);
+        buttonConditionNew.setEnabled(true);
+        buttonConditionDelete.setEnabled(true);
+        textConditionName.setEditable(false);
+        textConditionShortname.setEditable(false);
+        textConditionSearch.setEditable(true);
+
+        // VideoTabelle aktivieren
+        tableCondition.setEnabled(true);
+
+        //VideoSearch aktivieren
+        textConditionSearch.setEnabled(true);
+        
+    }
+
+    /**
+     * @param Condition
+     */
+    protected void insertIntoConditionTable(Condition s) {
+        TableItem item = new TableItem(tableCondition, SWT.NONE);
+        item.setText(new String[] { s.getConditionId() + "", s.getConditionName(),
+                s.getConditionshortname() });
+        
+    }
+
+    /**
+     * 
+     */
+    protected void refreshConditionTable(final String filter) {
+        if (tableCondition == null) {
+            System.out
+                    .println("Konnte Conditiontable nicht refreshen, da diese null ist!");
+            return;
+        }
+        System.out.println("Versuche nun VideoListe zu refreshen. Filter: "
+                + filter);
+        tableCondition.removeAll();
+        TableItem item;
+        java.util.List Conditionlist = Database.getCondition(filter);
+
+        for (int i = 0; i < Conditionlist.size(); i++) {
+
+            Condition o = (Condition) Conditionlist.get(i);
+            item = new TableItem(tableCondition, SWT.NONE);
+            item.setText(new String[] { o.getConditionId() + "", o.getConditionName(),
+                    o.getConditionshortname() });
+
+        }
+
+        
+    }
+
+    /**
+     * 
+     */
+    private void initConditionGroupOverview() {
+        if (logger.isDebugEnabled()) {
+            logger.debug("initConditionGroupOverview() - start");
+        }
+
+        groupConditionOverview = new Group(sashFormCondition, SWT.NONE);
+        GridLayout group5Layout = new GridLayout();
+        group5Layout.numColumns = 8;
+        groupConditionOverview.setText(l
+                .getString("Condition.groupoverview.label"));
+        FormData group5LData = new FormData();
+        groupConditionOverview.setLayout(group5Layout);
+        group5LData.left = new FormAttachment(0, 100, 0);
+        group5LData.top = new FormAttachment(0, 100, 0);
+        groupConditionOverview.setLayoutData(group5LData);
+
+        //Tabelle anzeigen
+        initTableCondition();
+        //Suche darunter anzeigen
+        initConditionSearch();
+
+        if (logger.isDebugEnabled()) {
+            logger.debug("initConditionGroupOverview() - end");
+        }
+        
+    }
+
+    /**
+     * 
+     */
+    private void initConditionSearch() {
+        if (logger.isDebugEnabled()) {
+            logger.debug("initConditionSearch() - start");
+        }
+
+        //label f?r die Suche
+        labelConditionSearch = new Label(groupConditionOverview, SWT.NONE);
+        labelConditionSearch.setText(l
+                .getString("Condition.groupoverview.searchlabel")
+                + ":");
+        GridData label2LData = new GridData();
+        label2LData.horizontalSpan = 3;
+        labelConditionSearch.setLayoutData(label2LData);
+
+        //das Suchfeld
+        textConditionSearch = new Text(groupConditionOverview, SWT.BORDER);
+        GridData text2LData = new GridData();
+        textConditionSearch.addFocusListener(new FocusAdapter() {
+            public void focusLost(FocusEvent evt) {
+                if (logger.isDebugEnabled()) {
+                    logger.debug("focusLost(FocusEvent evt = " + evt + " "
+                            + textConditionSearch.getText() + ") - start");
+                }
+
+                refreshConditionTable(textConditionSearch.getText());
+
+                if (logger.isDebugEnabled()) {
+                    logger.debug("focusLost(FocusEvent) - end");
+                }
+            }
+        });
+
+        textConditionSearch.addListener(SWT.DefaultSelection, new Listener() {
+            public void handleEvent(Event e) {
+                if (logger.isDebugEnabled()) {
+                    logger.debug("handleEvent(Event e = " + e + " "
+                            + textConditionSearch.getText() + ") - start");
+                }
+
+                refreshConditionTable(textConditionSearch.getText());
+
+                if (logger.isDebugEnabled()) {
+                    logger.debug("handleEvent(Event) - end");
+                }
+            }
+        });
+
+        text2LData.horizontalAlignment = GridData.FILL;
+        text2LData.horizontalSpan = 5;
+        text2LData.grabExcessHorizontalSpace = true;
+        textConditionSearch.setLayoutData(text2LData);
+
+
+
+        if (logger.isDebugEnabled()) {
+            logger.debug("initConditionSearch() - end");
+        }
+        
+    }
+
+    /**
+     * 
+     */
+    private void initTableCondition() {
+        if (logger.isDebugEnabled()) {
+            logger.debug("initTableCondition() - start");
+        }
+
+        tableCondition = new Table(groupConditionOverview, SWT.SINGLE
+                | SWT.FULL_SELECTION | SWT.V_SCROLL | SWT.BORDER);
+        tableCondition.setHeaderVisible(true);
+        tableCondition.setLinesVisible(true);
+        GridData table2LData = new GridData();
+        tableCondition.addFocusListener(new FocusAdapter() {
+            public void focusLost(FocusEvent evt) {
+                System.out.println("tableCondition.focusLost, event=" + evt);
+                //TODO add your code for tableCondition.focusLost
+            }
+            public void focusGained(FocusEvent evt) {
+                System.out
+                    .println("tableCondition.focusGained, event=" + evt);
+                //TODO add your code for tableCondition.focusGained
+            }
+        });
+        tableCondition.addSelectionListener(new SelectionAdapter() {
+            public void widgetSelected(SelectionEvent evt) {
+                if (logger.isDebugEnabled()) {
+                    logger.debug("widgetSelected(SelectionEvent evt = "
+                        + evt
+                        + ") - start");
+                }
+
+                int index = tableCondition.getSelectionIndex();
+
+                System.out.println("Table select. id: "
+                    + index
+                    + " TableItem:"
+                    + tableCondition.getItem(index)
+                    + " id: "
+                    + tableCondition.getItem(index).getText(0));
+
+                //es wurde ein Element aus Tabelle ausgewaehlt jetzt muss die
+                //Detailansicht aktualisiert werden
+                refreshConditionDetail(tableCondition.getItem(index)
+                    .getText(0));
+
+                if (logger.isDebugEnabled()) {
+                    logger.debug("widgetSelected(SelectionEvent) - end");
+                }
+            }
+        });
+        table2LData.verticalAlignment = GridData.FILL;
+        table2LData.horizontalAlignment = GridData.FILL;
+        table2LData.horizontalSpan = 8;
+        table2LData.grabExcessHorizontalSpace = true;
+        table2LData.grabExcessVerticalSpace = true;
+        tableCondition.setLayoutData(table2LData);
+
+        //einzelne Spalten hinzuf?gen
+        tableColumn = new TableColumn(tableCondition, SWT.CENTER);
+        tableColumn.setText(l.getString("Condition.groupoverview.columnid"));
+        tableColumn.setWidth(50);
+
+        tableColumn = new TableColumn(tableCondition, SWT.CENTER);
+        tableColumn.setText(l.getString("Condition.groupoverview.columnname"));
+        tableColumn.setWidth(200);
+
+        tableColumn = new TableColumn(tableCondition, SWT.CENTER);
+        tableColumn.setText(l.getString("Condition.groupoverview.columnshortname"));
+        tableColumn.setWidth(75);
+
+        if (logger.isDebugEnabled()) {
+            logger.debug("initTableCondition() - end");
+        }
+        
+    }
+
+    /**
+     * @param text
+     */
+    protected void refreshConditionDetail(final String id) {
+        Condition object;
+        try {
+            //since we only can get a String value from the table, we
+            //need to convert this
+            object = Database.getSingleCondition(Integer.parseInt(id));
+
+            if (object == null) {
+
+                /*
+                 * 
+                 * @TODO Statusbar aktualiseren
+                 */
+                return;
+            }
+        } catch (Exception e) {
+            // TODO: handle exception
+            //id ist keine Zahl
+            return;
+        }
+
+        textConditionID.setText(object.getConditionId() + "");
+        textConditionName.setText(object.getConditionName());
+        textConditionShortname.setText(object.getConditionshortname());
+
+        //Buttons zum l?schen und editieren aktivieren
+        buttonConditionEdit.setEnabled(true);
+        buttonConditionDelete.setEnabled(true);
+
+        //Mode auf view setzen
+        mode_Condition = ManagementGui.MODE_VIEW;
+
+        
+    }
+
+    /**
+     * 
+     */
+    private void initStatusGroup() {
+        {
+            //init a group for the Status
+            groupStatus = new Group(sashForm1, SWT.NONE);
+            GridLayout group2Layout = new GridLayout();
+            group2Layout.makeColumnsEqualWidth = true;
+            groupStatus.setText(l.getString("Status.group.label"));
+            groupStatus.setSize(758, 284);
+            FormData group2LData = new FormData();
+            groupStatus.addFocusListener(new FocusAdapter() {
+                public void focusLost(FocusEvent evt) {
+                    System.out.println("groupStatus.focusLost, event="
+                        + evt);
+                    buttonStatusCancel.setEnabled(false);
+                    buttonStatusDelete.setEnabled(false);
+                    buttonStatusEdit.setEnabled(false);
+                    buttonStatusNew.setEnabled(false);
+                    buttonStatusSave.setEnabled(false);
+                    //TODO add your code for groupStatus.focusLost
+                }
+            });
+            groupStatus.setLayout(group2Layout);
+            groupStatus.setLayoutData(group2LData);
+            {
+                sashFormStatus = new SashForm(groupStatus, SWT.NONE);
+                FormLayout sashForm2Layout = new FormLayout();
+                sashFormStatus.setSize(748, 300);
+                GridData sashForm2LData = new GridData();
+                sashFormStatus.setLayout(sashForm2Layout);
+                sashForm2LData.verticalAlignment = GridData.FILL;
+                sashForm2LData.horizontalAlignment = GridData.FILL;
+                sashForm2LData.grabExcessHorizontalSpace = true;
+                sashForm2LData.grabExcessVerticalSpace = true;
+                sashFormStatus.setLayoutData(sashForm2LData);
+
+                //init die Gruppe f?r Statuse ?berblick
+                initStatusGroupOverview();
+                //init die Detailansicht
+                initStatusGroupDetail();
+
+            }
+        }
+
+	}
+
+    /**
+     * 
+     */
+    private void initStatusGroupDetail() {
+        groupStatusDetail = new Group(sashFormStatus, SWT.NONE);
+        GridLayout groupStatusDetailLayout = new GridLayout();
+        groupStatusDetailLayout.marginHeight = 25;
+        groupStatusDetailLayout.numColumns = 6;
+        groupStatusDetailLayout.verticalSpacing = 15;
+        groupStatusDetail.setText(l
+                .getString("Status.groupdetail.label"));
+        FormData formData = new FormData();
+        groupStatusDetail.setLayout(groupStatusDetailLayout);
+        formData.right = new FormAttachment(100, 100, -5);
+        formData.top = new FormAttachment(0, 100, 5);
+        formData.bottom = new FormAttachment(100, 100, -5);
+        groupStatusDetail.setLayoutData(formData);
+        {
+            labelStatusId = new Label(groupStatusDetail, SWT.NONE);
+            labelStatusId.setText(l
+                    .getString("Status.groupdetail.idlabel")
+                    + ":");
+            labelStatusId.setSize(125, 15);
+            GridData formData2 = new GridData();
+            formData2.widthHint = 125;
+            formData2.heightHint = 15;
+            formData2.horizontalSpan = 2;
+            labelStatusId.setLayoutData(formData2);
+        }
+        {
+            textStatusID = new Text(groupStatusDetail, SWT.READ_ONLY
+                    | SWT.BORDER);
+            GridData text1LData1 = new GridData();
+            text1LData1.horizontalAlignment = GridData.FILL;
+            text1LData1.heightHint = 13;
+            text1LData1.horizontalSpan = 4;
+            text1LData1.grabExcessHorizontalSpace = true;
+            textStatusID.setLayoutData(text1LData1);
+        }
+        {
+            labelStatusName = new Label(groupStatusDetail, SWT.NONE);
+            labelStatusName.setText(l
+                    .getString("Status.groupdetail.namelabel")
+                    + ":");
+            labelStatusName.setSize(125, 15);
+            GridData labelStatusNameLData = new GridData();
+            labelStatusNameLData.widthHint = 125;
+            labelStatusNameLData.heightHint = 15;
+            labelStatusNameLData.horizontalSpan = 2;
+            labelStatusName.setLayoutData(labelStatusNameLData);
+        }
+        {
+            textStatusName = new Text(groupStatusDetail,
+                    SWT.READ_ONLY | SWT.BORDER);
+            GridData text1LData2 = new GridData();
+            text1LData2.horizontalAlignment = GridData.FILL;
+            text1LData2.heightHint = 13;
+            text1LData2.horizontalSpan = 4;
+            text1LData2.grabExcessHorizontalSpace = true;
+            textStatusName.setLayoutData(text1LData2);
+        }
+        {
+            labelStatusShortname = new Label(groupStatusDetail,
+                    SWT.NONE);
+            labelStatusShortname.setText(l
+                    .getString("Status.groupdetail.shortcutlabel")
+                    + ":");
+            labelStatusShortname.setSize(125, 15);
+            GridData label1LData1 = new GridData();
+            label1LData1.widthHint = 125;
+            label1LData1.heightHint = 15;
+            label1LData1.horizontalSpan = 2;
+            labelStatusShortname.setLayoutData(label1LData1);
+        }
+        {
+            textStatusShortname = new Text(groupStatusDetail,
+                    SWT.READ_ONLY | SWT.BORDER);
+            GridData text1LData3 = new GridData();
+            text1LData3.horizontalAlignment = GridData.FILL;
+            text1LData3.heightHint = 13;
+            text1LData3.horizontalSpan = 4;
+            text1LData3.grabExcessHorizontalSpace = true;
+            textStatusShortname.setLayoutData(text1LData3);
+        }
+        {
+
+            //die Buttons bekommen ein eigenes Composite
+            composite2 = new Composite(groupStatusDetail, SWT.EMBEDDED);
+            GridLayout composite2Layout = new GridLayout();
+            composite2Layout.numColumns = 6;
+            GridData composite2LData = new GridData();
+            composite2.setLayout(composite2Layout);
+            composite2LData.verticalAlignment = GridData.END;
+            composite2LData.horizontalAlignment = GridData.CENTER;
+            composite2LData.widthHint = 391;
+            composite2LData.horizontalSpan = 6;
+            composite2LData.grabExcessHorizontalSpace = true;
+            composite2LData.grabExcessVerticalSpace = true;
+            composite2LData.heightHint = 35;
+            composite2.setLayoutData(composite2LData);
+
+            //init all the Buttons
+            initStatusDetailButtons();
+
+        }
+
+        
+    }
+
+    /**
+     * 
+     */
+    private void initStatusDetailButtons() {
+        buttonStatusNew = new Button(composite2, SWT.PUSH | SWT.CENTER);
+        buttonStatusNew.setText(l.getString("button.new"));
+        buttonStatusNew.addSelectionListener(new SelectionAdapter() {
+            
+
+            public void widgetSelected(SelectionEvent evt) {
+
+                textStatusID.setText("");
+                textStatusName.setText("");
+                textStatusShortname.setText("");
+                
+
+                textStatusName.setEditable(true);
+                textStatusShortname.setEditable(true);
+                buttonStatusCancel.setEnabled(true);
+                buttonStatusSave.setEnabled(true);
+                buttonStatusNew.setEnabled(false);
+                buttonStatusEdit.setEnabled(false);
+                buttonStatusDelete.setEnabled(false);
+                
+                textStatusSearch.setEditable(false);
+                tableStatus.setEnabled(false);
+
+                mode_Status = ManagementGui.MODE_ADD;
+
+            }
+        });
+
+        buttonStatusEdit = new Button(composite2, SWT.PUSH | SWT.CENTER);
+        buttonStatusEdit.setText(l.getString("button.edit"));
+        buttonStatusEdit.setEnabled(false);
+        buttonStatusEdit.addSelectionListener(new SelectionAdapter() {
+            public void widgetSelected(SelectionEvent evt) {
+
+                mode_Status = ManagementGui.MODE_EDIT;
+
+
+                textStatusID.setEditable(false);
+
+                textStatusName.setEditable(true);
+                textStatusName.setFocus();
+                textStatusShortname.setEditable(true);
+                buttonStatusCancel.setEnabled(true);
+                buttonStatusSave.setEnabled(true);
+                buttonStatusNew.setEnabled(false);
+                buttonStatusEdit.setEnabled(false);
+                buttonStatusDelete.setEnabled(false);
+
+
+                tableStatus.setEnabled(false);
+                textStatusSearch.setEnabled(false);
+                
+
+            }
+        });
+
+        buttonStatusDelete = new Button(composite2, SWT.PUSH | SWT.CENTER);
+        buttonStatusDelete.setText(l.getString("button.delete"));
+        buttonStatusDelete.setEnabled(false);
+        buttonStatusDelete.addSelectionListener(new SelectionAdapter() {
+            public void widgetSelected(SelectionEvent evt) {
+                System.out
+                        .println("buttonStatusDelete.widgetSelected, event="
+                                + evt);
+                
+                
+               String msg = MessageFormat.format(
+                       l.getString("Status.groupdetail.deletebutton.question.text"),
+                               new Object[]{textStatusName.getText()+" "+textStatusShortname.getText()});
+                
+               int question = showMsg(msg,
+                       l.getString("Status.groupdetail.deletebutton.question.header"), 
+                       SWT.ICON_QUESTION | SWT.YES | SWT.NO);
+               
+               if (question != SWT.YES){
+                   return;
+               }
+                
+                Status o = new Status();
+                o.setStatusId(new Integer(Integer.parseInt(textStatusID.getText())));
+                o.setStatusName(textStatusName.getText());
+                o.setStatusShortname(textStatusShortname.getText());
+                
+                try {
+                    //object speichern
+                    // Fehlerbehandlung
+                    Database.deleteObject(o);
+
+                    //?bersichtsTabelle aktualisieren
+                    refreshStatusTable(textStatusSearch.getText());
+                    
+                    //Detailansicht leeren
+                    textStatusID.setText("");
+                    textStatusName.setText("");
+                    textStatusShortname.setText("");
+                    
+                    //in Tabelle n?chsten ausw?hlen
+                    try {
+                        tableStatus.select(0);
+                    } catch (Exception ex) {}
+                    
+                    //Statusline Nachricht sezten
+                    statusLine.setStatus(1,l.getString("Status.groupdetail.deletebutton.newok"));
+
+                } catch (DataBaseException e) {
+                    if (e.getMessage().equalsIgnoreCase("1")) {
+                        //Fehler beim Speichern des Objectes
+
+                        statusLine.setStatus(3,l.getString("Status.groupdetail.deletebutton.errorsave"));
+                        showMsg(l.getString("Status.groupdetail.deletebutton.errorsave"),
+                                l.getString("error"), SWT.ICON_ERROR | SWT.OK);
+                        
+                    } else if (e.getMessage().equalsIgnoreCase("2")) {
+                        //fehler beim db aufbau
+                        statusLine.setStatus(3,l.getString("Status.groupdetail.deletebutton.errordb"));
+                        showMsg(l.getString("Status.groupdetail.deletebutton.errordb"),
+                                l.getString("error"), SWT.ICON_ERROR | SWT.OK);
+                        
+                    } else {
+                        //@todo
+                        e.printStackTrace();
+                    }
+                    
+                }                
+                
+
+                }
+
+            }
+        );
+
+        //leerer nicht sichtbarer Button
+        buttonStatusFill = new Button(composite2, SWT.PUSH | SWT.CENTER);
+        GridData buttonStatusFillLData = new GridData();
+        buttonStatusFill.setVisible(false);
+        buttonStatusFill.setEnabled(false);
+        buttonStatusFillLData.widthHint = 30;
+        buttonStatusFillLData.heightHint = 23;
+        buttonStatusFill.setLayoutData(buttonStatusFillLData);
+
+        buttonStatusSave = new Button(composite2, SWT.PUSH | SWT.CENTER);
+        buttonStatusSave.setText(l.getString("button.save"));
+        buttonStatusSave.setEnabled(false);
+        buttonStatusSave.addSelectionListener(new SelectionAdapter() {
+            public void widgetSelected(SelectionEvent evt) {
+                System.out
+                        .println("buttonStatusSave.widgetSelected, event="
+                                + evt);
+
+                
+                //testen ob Name leer ist
+                if (textStatusName.getText().trim().equalsIgnoreCase("")) {
+                    
+                    showMsg(l.getString("Status.groupdetail.savebutton.warn.noname.msg"),
+                            l.getString("Status.groupdetail.savebutton.warn.noname.title"),
+                            SWT.ICON_WARNING | SWT.YES);
+
+                    	return;
+                }
+                
+                //testen welcher mode
+                
+                if (mode_Status == ManagementGui.MODE_ADD) {
+                    
+                    /**
+                     * @todo eine Exception bekommen wieder leider NOCH nicht mit
+                     * d.h. es muss noch ein r?ckgabewert kommen oder eine Exception 
+                     * ?bermitteln werden (aus der DB Klasse)
+                     */
+                    //neues Objekt erzeugen
+                    Status tmp = new Status(textStatusName.getText(),
+                            textStatusShortname.getText());
+                    
+                    try {
+                        //object speichern
+                        // Fehlerbehandlung
+                        Object o = Database.saveObject(
+                                new Status(textStatusName.getText(),
+                                        textStatusShortname.getText()));
+                        
+                        // in ?bersichtstabelle einf?gen
+                        insertIntoStatusTable((Status)o);
+                        textStatusID.setText( ((Status)o).getStatusId()+"" );
+                        
+                        
+                        //Statusline Nachricht sezten
+                        statusLine.setStatus(1,l.getString("Status.groupdetail.savebutton.newok"));
+
+                    } catch (DataBaseException e) {
+                        if (e.getMessage().equalsIgnoreCase("1")) {
+                            //Fehler beim Speichern des Objectes
+
+                            statusLine.setStatus(3,l.getString("Status.groupdetail.savebutton.errorsave"));
+                            showMsg(l.getString("Status.groupdetail.savebutton.errorsave"),"Fehler", SWT.ICON_ERROR | SWT.OK);
+                            
+                        } else if (e.getMessage().equalsIgnoreCase("2")) {
+                            //fehler beim db aufbau
+                            statusLine.setStatus(3,l.getString("Status.groupdetail.savebutton.errordb"));
+                            showMsg(l.getString("Status.groupdetail.savebutton.errordb"),"Fehler", SWT.ICON_ERROR | SWT.OK);
+                            
+                        } else {
+                            //@todo
+                            e.printStackTrace();
+                        }
+                        
+                    }
+                    
+                    
+                    //alle Buttons auf aktiv setzen
+                    setStatusGroupButtonSaveCancel();
+                    
+                } else if (mode_Status == ManagementGui.MODE_EDIT) {
+                    
+                    Status tmp = new Status(textStatusName.getText(),
+                                    textStatusShortname.getText());
+        		tmp.setStatusId( new Integer (Integer.parseInt(textStatusID.getText())) );
+                try {
+                    //object speichern
+                    // Fehlerbehandlung
+                    Database.saveObject(tmp);
+                    //?bersichtstabelle aktualisieren
+                    refreshStatusTable(textStatusSearch.getText());
+                    
+                    //Statusline Nachricht sezten
+                    statusLine.setStatus(1,l.getString("Status.groupdetail.savebutton.editok"));
+                   
+
+                } catch (DataBaseException e) {
+                    if (e.getMessage().equalsIgnoreCase("1")) {
+                        //Fehler beim Speichern des Objectes
+
+                        statusLine.setStatus(3,l.getString("Status.groupdetail.savebutton.errorsave"));
+                        showMsg(l.getString("Status.groupdetail.savebutton.errorsave"),"Fehler", SWT.ICON_ERROR | SWT.OK);
+                        
+                    } else if (e.getMessage().equalsIgnoreCase("2")) {
+                        //fehler beim db aufbau
+                        statusLine.setStatus(3,l.getString("Status.groupdetail.savebutton.errordb"));
+                        showMsg(l.getString("Status.groupdetail.savebutton.errordb"),"Fehler", SWT.ICON_ERROR | SWT.OK);
+                        
+                    } else {
+                        //@todo
+                        e.printStackTrace();
+                    }
+                    
+                }
+                    
+ 
+                    //alle Buttons auf aktiv setzen
+                    setStatusGroupButtonSaveCancel();
+                    
+                }
+                
+                
+                
+                /**
+                 * @todo Exception werfen, da nur die zwei Modes sein d?rfen
+                 */
+                
+            }
+        });
+
+        buttonStatusCancel = new Button(composite2, SWT.PUSH | SWT.CENTER);
+        buttonStatusCancel.setText(l.getString("button.cancel"));
+        buttonStatusCancel.setEnabled(false);
+        buttonStatusCancel.addSelectionListener(new SelectionAdapter() {
+            public void widgetSelected(SelectionEvent evt) {
+                System.out
+                        .println("buttonStatusCancel.widgetSelected, event="
+                                + evt);
+                setStatusGroupButtonSaveCancel();
+            }
+        });
+
+        
+    }
+
+    /**
+     * 
+     */
+    protected void setStatusGroupButtonSaveCancel() {
+        buttonStatusSave.setEnabled(false);
+        buttonStatusCancel.setEnabled(false);
+        buttonStatusEdit.setEnabled(true);
+        buttonStatusNew.setEnabled(true);
+        buttonStatusDelete.setEnabled(true);
+        textStatusName.setEditable(false);
+        textStatusShortname.setEditable(false);
+        textStatusSearch.setEditable(true);
+
+        // StatusTabelle aktivieren
+        tableStatus.setEnabled(true);
+
+        //StatusSearch aktivieren
+        textStatusSearch.setEnabled(true);
+        
+    }
+
+    /**
+     * @param Status
+     */
+    protected void insertIntoStatusTable(Status Status) {
+        TableItem item = new TableItem(tableStatus, SWT.NONE);
+        item.setText(new String[] { Status.getStatusId() + "", Status.getStatusName(),
+                Status.getStatusShortname() });
+        
+    }
+
+    /**
+     * @param text
+     */
+    protected void refreshStatusTable(final String filter) {
+        if (tableStatus == null) {
+            System.out
+                    .println("Konnte Statustable nicht refreshen, da diese null ist!");
+            return;
+        }
+        System.out.println("Versuche nun StatusListe zu refreshen. Filter: "
+                + filter);
+        tableStatus.removeAll();
+        TableItem item;
+        java.util.List Statuslist = Database.getStatus(filter);
+
+        for (int i = 0; i < Statuslist.size(); i++) {
+
+            Status o = (Status) Statuslist.get(i);
+            item = new TableItem(tableStatus, SWT.NONE);
+            item.setText(new String[] { o.getStatusId() + "", o.getStatusName(),
+                    o.getStatusShortname() });
+
+        }
+
+        
+    }
+
+    /**
+     * 
+     */
+    private void initStatusGroupOverview() {
+        if (logger.isDebugEnabled()) {
+            logger.debug("initStatusGroupOverview() - start");
+        }
+
+        groupStatusOverview = new Group(sashFormStatus, SWT.NONE);
+        GridLayout group5Layout = new GridLayout();
+        group5Layout.numColumns = 8;
+        groupStatusOverview.setText(l
+                .getString("Status.groupoverview.label"));
+        FormData group5LData = new FormData();
+        groupStatusOverview.setLayout(group5Layout);
+        group5LData.left = new FormAttachment(0, 100, 0);
+        group5LData.top = new FormAttachment(0, 100, 0);
+        groupStatusOverview.setLayoutData(group5LData);
+
+        //Tabelle anzeigen
+        initTableStatus();
+        //Suche darunter anzeigen
+        initStatusSearch();
+
+        if (logger.isDebugEnabled()) {
+            logger.debug("initStatusGroupOverview() - end");
+        }
+        
+    }
+
+    /**
+     * 
+     */
+    private void initStatusSearch() {
+        if (logger.isDebugEnabled()) {
+            logger.debug("initStatusSearch() - start");
+        }
+
+        //label f?r die Suche
+        labelStatusSearch = new Label(groupStatusOverview, SWT.NONE);
+        labelStatusSearch.setText(l
+                .getString("Status.groupoverview.searchlabel")
+                + ":");
+        GridData label2LData = new GridData();
+        label2LData.horizontalSpan = 3;
+        labelStatusSearch.setLayoutData(label2LData);
+
+        //das Suchfeld
+        textStatusSearch = new Text(groupStatusOverview, SWT.BORDER);
+        GridData text2LData = new GridData();
+        textStatusSearch.addFocusListener(new FocusAdapter() {
+            public void focusLost(FocusEvent evt) {
+                if (logger.isDebugEnabled()) {
+                    logger.debug("focusLost(FocusEvent evt = " + evt + " "
+                            + textStatusSearch.getText() + ") - start");
+                }
+
+                refreshStatusTable(textStatusSearch.getText());
+
+                if (logger.isDebugEnabled()) {
+                    logger.debug("focusLost(FocusEvent) - end");
+                }
+            }
+        });
+
+        textStatusSearch.addListener(SWT.DefaultSelection, new Listener() {
+            public void handleEvent(Event e) {
+                if (logger.isDebugEnabled()) {
+                    logger.debug("handleEvent(Event e = " + e + " "
+                            + textStatusSearch.getText() + ") - start");
+                }
+
+                refreshStatusTable(textStatusSearch.getText());
+
+                if (logger.isDebugEnabled()) {
+                    logger.debug("handleEvent(Event) - end");
+                }
+            }
+        });
+
+        text2LData.horizontalAlignment = GridData.FILL;
+        text2LData.horizontalSpan = 5;
+        text2LData.grabExcessHorizontalSpace = true;
+        textStatusSearch.setLayoutData(text2LData);
+
+
+
+        if (logger.isDebugEnabled()) {
+            logger.debug("initStatusSearch() - end");
+        }
+        
+    }
+
+    /**
+     * 
+     */
+    private void initTableStatus() {
+        if (logger.isDebugEnabled()) {
+            logger.debug("initTableStatus() - start");
+        }
+
+        tableStatus = new Table(groupStatusOverview, SWT.SINGLE
+                | SWT.FULL_SELECTION | SWT.V_SCROLL | SWT.BORDER);
+        tableStatus.setHeaderVisible(true);
+        tableStatus.setLinesVisible(true);
+        GridData table2LData = new GridData();
+        tableStatus.addFocusListener(new FocusAdapter() {
+            public void focusLost(FocusEvent evt) {
+                System.out.println("tableStatus.focusLost, event=" + evt);
+                //TODO add your code for tableStatus.focusLost
+            }
+            public void focusGained(FocusEvent evt) {
+                System.out
+                    .println("tableStatus.focusGained, event=" + evt);
+                //TODO add your code for tableStatus.focusGained
+            }
+        });
+        tableStatus.addSelectionListener(new SelectionAdapter() {
+            public void widgetSelected(SelectionEvent evt) {
+                if (logger.isDebugEnabled()) {
+                    logger.debug("widgetSelected(SelectionEvent evt = "
+                        + evt
+                        + ") - start");
+                }
+
+                int index = tableStatus.getSelectionIndex();
+
+                System.out.println("Table select. id: "
+                    + index
+                    + " TableItem:"
+                    + tableStatus.getItem(index)
+                    + " id: "
+                    + tableStatus.getItem(index).getText(0));
+
+                //es wurde ein Element aus Tabelle ausgewaehlt jetzt muss die
+                //Detailansicht aktualisiert werden
+                refreshStatusDetail(tableStatus.getItem(index)
+                    .getText(0));
+
+                if (logger.isDebugEnabled()) {
+                    logger.debug("widgetSelected(SelectionEvent) - end");
+                }
+            }
+        });
+        table2LData.verticalAlignment = GridData.FILL;
+        table2LData.horizontalAlignment = GridData.FILL;
+        table2LData.horizontalSpan = 8;
+        table2LData.grabExcessHorizontalSpace = true;
+        table2LData.grabExcessVerticalSpace = true;
+        tableStatus.setLayoutData(table2LData);
+
+        //einzelne Spalten hinzuf?gen
+        tableColumn = new TableColumn(tableStatus, SWT.CENTER);
+        tableColumn.setText(l.getString("Status.groupoverview.columnid"));
+        tableColumn.setWidth(50);
+
+        tableColumn = new TableColumn(tableStatus, SWT.CENTER);
+        tableColumn.setText(l.getString("Status.groupoverview.columnname"));
+        tableColumn.setWidth(200);
+
+        tableColumn = new TableColumn(tableStatus, SWT.CENTER);
+        tableColumn.setText(l.getString("Status.groupoverview.columnshortname"));
+        tableColumn.setWidth(75);
+
+        if (logger.isDebugEnabled()) {
+            logger.debug("initTableStatus() - end");
+        }
+        
+    }
+
+    /**
+     * @param text
+     */
+    protected void refreshStatusDetail(final String id) {
+        Status object;
+        try {
+            //since we only can get a String value from the table, we
+            //need to convert this
+            object = Database.getSingleStatus(Integer.parseInt(id));
+
+            if (object == null) {
+
+                /*
+                 * 
+                 * @TODO Statusbar aktualiseren
+                 */
+                return;
+            }
+        } catch (Exception e) {
+            //id ist keine Zahl
+            return;
+        }
+
+        textStatusID.setText(object.getStatusId() + "");
+        textStatusName.setText(object.getStatusName());
+        textStatusShortname.setText(object.getStatusShortname());
+
+        //Buttons zum l?schen und editieren aktivieren
+        buttonStatusEdit.setEnabled(true);
+        buttonStatusDelete.setEnabled(true);
+
+        //Mode auf view setzen
+        mode_Status = ManagementGui.MODE_VIEW;
+        
+    }
+
+	
+
+}
+

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java	2004-11-11 11:43:54 UTC (rev 127)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java	2004-11-11 14:58:27 UTC (rev 128)
@@ -175,6 +175,12 @@
     
     private Locale locale ;
 
+    protected CTabItem tabItemStatus;
+
+    private CompositeStatus compositeStatus;
+
+    private CTabItem tabStatusLanguage;
+
     /**
      * Auto-generated main method to display this
      * org.eclipse.swt.widgets.Composite inside a new Shell.
@@ -474,11 +480,19 @@
         viewStatusMenuItem = new MenuItem(viewMenu, SWT.CHECK);
         viewStatusMenuItem.setText(l.getString("menu.view.status"));
         viewStatusMenuItem.setSelection(false);
+        viewStatusMenuItem.addSelectionListener(new SelectionAdapter() {
+            public void widgetSelected(SelectionEvent evt) {
+				if(tabItemStatus == null || tabItemStatus.isDisposed()){
+				    initStatusTab();
+				    return;   
+				}
+				
+				cTabFolderMain.setSelection(tabItemStatus);
+				viewStatusMenuItem.setSelection(true);
+				cTabFolderMain.showSelection();
+            }
+        });   
 
-        viewConditionMenuItem = new MenuItem(viewMenu, SWT.CHECK);
-        viewConditionMenuItem.setText(l.getString("menu.view.condition"));
-        viewConditionMenuItem.setSelection(false);
-
         viewMovieMenuItem = new MenuItem(viewMenu, SWT.CHECK);
         viewMovieMenuItem.setText(l.getString("menu.view.movie"));
         viewMovieMenuItem.setSelection(false);
@@ -494,6 +508,32 @@
     }
 
     /**
+     * 
+     */
+    private void initStatusTab() {
+        tabItemStatus = new CTabItem(cTabFolderMain, SWT.NONE);
+        tabItemStatus.setText(l.getString("tab.Status.title"));
+        tabItemStatus.addDisposeListener(new DisposeListener() {
+
+            public void widgetDisposed(DisposeEvent evt) {
+                if(!viewStatusMenuItem.isDisposed()){
+                    viewStatusMenuItem.setSelection(false);
+                }
+            }
+            
+        });
+        {
+            compositeStatus = new CompositeStatus(
+                cTabFolderMain,
+                SWT.NONE, statusLine, locale);
+            
+            tabItemStatus.setControl(compositeStatus);
+        }
+        
+    }
+
+
+    /**
      * init the help menu
      */
     private void initHelpMenu() {

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/language.properties
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/language.properties	2004-11-11 11:43:54 UTC (rev 127)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/language.properties	2004-11-11 14:58:27 UTC (rev 128)
@@ -6,23 +6,23 @@
 button.save=Speichern
 button.cancel=Abbruch
 
-Language.group.label=Language
+Language.group.label=Sprache
 Language.groupoverview.label=?berblick
-Language.groupoverview.columnid=id
+Language.groupoverview.columnid=Id
 Language.groupoverview.columnname=Name
 Language.groupoverview.columnshortname=Abk.
 
 
 Language.groupoverview.searchlabel=Suche nach
 Language.groupdetail.label=Detail
-Language.groupdetail.idlabel=Language ID
-Language.groupdetail.namelabel=Language Name
-Language.groupdetail.shortcutlabel=Language Abk?rzung
+Language.groupdetail.idlabel=Sprache ID
+Language.groupdetail.namelabel=Sprache
+Language.groupdetail.shortcutlabel=Abk?rzung
 
 Language.groupdetail.savebutton.warn.noname.title=Datensatz speichern
 Language.groupdetail.savebutton.warn.noname.msg=Der Datensatz kann nicht gespeichert werden. \n Bitte geben Sie einen Namen an
-Language.groupdetail.savebutton.newok=Speichern der neuen Language erfolgreich.
-Language.groupdetail.savebutton.editok=?ndern der Language erfolgreich.
+Language.groupdetail.savebutton.newok=Speichern der neuen Sprache erfolgreich.
+Language.groupdetail.savebutton.editok=?ndern der Sprache erfolgreich.
 
 Language.groupdetail.savebutton.errorsave=Datenbankfehler beim Speichern.
 Language.groupdetail.savebutton.errordb=Datenbankfehler beim Herstellen der Verbindung.(save).
@@ -33,23 +33,23 @@
 Language.groupdetail.deletebutton.errorsave=Datenbankfehler beim L?schen.
 Language.groupdetail.deletebutton.errordb=Datenbankfehler beim Herstellen der Verbindung(del).
 
-Subtitle.group.label=Subtitle
+Subtitle.group.label=Untertitel
 Subtitle.groupoverview.label=?berblick
-Subtitle.groupoverview.columnid=id
+Subtitle.groupoverview.columnid=Id
 Subtitle.groupoverview.columnname=Name
 Subtitle.groupoverview.columnshortname=Abk.
 
 
 Subtitle.groupoverview.searchlabel=Suche nach
 Subtitle.groupdetail.label=Detail
-Subtitle.groupdetail.idlabel=Subtitle ID
-Subtitle.groupdetail.namelabel=Subtitle Name
-Subtitle.groupdetail.shortcutlabel=Subtitle Abk?rzung
+Subtitle.groupdetail.idlabel=Untertitel ID
+Subtitle.groupdetail.namelabel=Untertitel Name
+Subtitle.groupdetail.shortcutlabel=Untertitel Abk?rzung
 
 Subtitle.groupdetail.savebutton.warn.noname.title=Datensatz speichern
 Subtitle.groupdetail.savebutton.warn.noname.msg=Der Datensatz kann nicht gespeichert werden. \n Bitte geben Sie einen Namen an
-Subtitle.groupdetail.savebutton.newok=Speichern des neuen Subtitles erfolgreich.
-Subtitle.groupdetail.savebutton.editok=?ndern des Subtitles erfolgreich.
+Subtitle.groupdetail.savebutton.newok=Speichern des neuen Untertitels erfolgreich.
+Subtitle.groupdetail.savebutton.editok=?ndern des Untertitels erfolgreich.
 
 Subtitle.groupdetail.savebutton.errorsave=Datenbankfehler beim Speichern.
 Subtitle.groupdetail.savebutton.errordb=Datenbankfehler beim Herstellen der Verbindung.(save).

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/main.properties
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/main.properties	2004-11-11 11:43:54 UTC (rev 127)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/main.properties	2004-11-11 14:58:27 UTC (rev 128)
@@ -17,11 +17,9 @@
 
 menu.view.genre=Genre
 
-menu.view.subtitle=Untertitel
-menu.view.language=Sprache
+menu.view.language=Sprachen
 
 menu.view.status=Status
-menu.view.condition=Zustand
 
 menu.view.movie=Film
 
@@ -36,9 +34,7 @@
 tab.actor.title=Darsteller
 tab.director.title=Regie
 tab.genre.title=Genre
-tab.subtitle.title=
-tab.language.title=Sprache
-tab.status.title=
-tab.condition.title=
+tab.language.title=Sprache/Untertitel
+tab.Status.title=Status/Zustand
 tab.movie.title=
 status.resizewarn=Fenster kann Mindestgr??e nicht unterschreiten.
\ No newline at end of file

Added: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/status.properties
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/status.properties	2004-11-11 11:43:54 UTC (rev 127)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/status.properties	2004-11-11 14:58:27 UTC (rev 128)
@@ -0,0 +1,62 @@
+
+error=Fehler
+button.new=Neu
+button.edit=Bearbeiten
+button.delete=L?schen
+button.save=Speichern
+button.cancel=Abbruch
+
+Status.group.label=Status
+Status.groupoverview.label=?berblick
+Status.groupoverview.columnid=Id
+Status.groupoverview.columnname=Name
+Status.groupoverview.columnshortname=Abk.
+
+
+Status.groupoverview.searchlabel=Suche nach
+Status.groupdetail.label=Detail
+Status.groupdetail.idlabel=Status ID
+Status.groupdetail.namelabel=Status Name
+Status.groupdetail.shortcutlabel=Status Abk?rzung
+
+Status.groupdetail.savebutton.warn.noname.title=Datensatz speichern
+Status.groupdetail.savebutton.warn.noname.msg=Der Datensatz kann nicht gespeichert werden. \n Bitte geben Sie einen Namen an
+Status.groupdetail.savebutton.newok=Speichern des neuen Status erfolgreich.
+Status.groupdetail.savebutton.editok=?ndern des Status erfolgreich.
+
+Status.groupdetail.savebutton.errorsave=Datenbankfehler beim Speichern.
+Status.groupdetail.savebutton.errordb=Datenbankfehler beim Herstellen der Verbindung.(save).
+
+Status.groupdetail.deletebutton.question.header=Wirklich l?schen?
+Status.groupdetail.deletebutton.question.text=Wollen Sie den Datensatz {0} wirklich l?schen?
+Status.groupdetail.deletebutton.newok=Datensatz wurde erfolgreich gel?scht.
+Status.groupdetail.deletebutton.errorsave=Datenbankfehler beim L?schen.
+Status.groupdetail.deletebutton.errordb=Datenbankfehler beim Herstellen der Verbindung(del).
+
+Condition.group.label=Zustand
+Condition.groupoverview.label=?berblick
+Condition.groupoverview.columnid=Id
+Condition.groupoverview.columnname=Name
+Condition.groupoverview.columnshortname=Abk.
+
+
+Condition.groupoverview.searchlabel=Suche nach
+Condition.groupdetail.label=Detail
+Condition.groupdetail.idlabel=Zustand ID
+Condition.groupdetail.namelabel=Zustand Name
+Condition.groupdetail.shortcutlabel=Zustand Abk?rzung
+
+Condition.groupdetail.savebutton.warn.noname.title=Datensatz speichern
+Condition.groupdetail.savebutton.warn.noname.msg=Der Datensatz kann nicht gespeichert werden. \n Bitte geben Sie einen Namen an
+Condition.groupdetail.savebutton.newok=Speichern der neuen Zustandes erfolgreich.
+Condition.groupdetail.savebutton.editok=?ndern der Zustandes erfolgreich.
+
+Condition.groupdetail.savebutton.errorsave=Datenbankfehler beim Speichern.
+Condition.groupdetail.savebutton.errordb=Datenbankfehler beim Herstellen der Verbindung.(save).
+
+Condition.groupdetail.deletebutton.question.header=Wirklich l?schen?
+Condition.groupdetail.deletebutton.question.text=Wollen Sie den Datensatz {0} wirklich l?schen?
+Condition.groupdetail.deletebutton.newok=Datensatz wurde erfolgreich gel?scht.
+Condition.groupdetail.deletebutton.errorsave=Datenbankfehler beim L?schen.
+Condition.groupdetail.deletebutton.errordb=Datenbankfehler beim Herstellen der Verbindung(del).
+

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Condition.hbm.xml
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Condition.hbm.xml	2004-11-11 11:43:54 UTC (rev 127)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Condition.hbm.xml	2004-11-11 14:58:27 UTC (rev 128)
@@ -16,7 +16,9 @@
       <id name="conditionId" type="int" column="CONDITIONID">
         <meta attribute="scope-set">public</meta>
         <meta attribute="use-in-equals">true</meta>
-        <generator class="native"/>
+        <generator class="sequence">
+			<param name="sequence">condition_id_sequence</param>
+		</generator>
       </id>
  
       <property name="conditionName" type="string" not-null="true">

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Status.hbm.xml
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Status.hbm.xml	2004-11-11 11:43:54 UTC (rev 127)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Status.hbm.xml	2004-11-11 14:58:27 UTC (rev 128)
@@ -17,7 +17,9 @@
       <id name="statusId" type="int" column="STATUSID">
         <meta attribute="scope-set">public</meta>
         <meta attribute="use-in-equals">true</meta>
-        <generator class="native"/>
+        <generator class="sequence">
+			<param name="sequence">status_id_sequence</param>
+		</generator>
       </id>
  
       <property name="statusName" type="string" not-null="true">

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java	2004-11-11 11:43:54 UTC (rev 127)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java	2004-11-11 14:58:27 UTC (rev 128)
@@ -45,9 +45,11 @@
 import org.apache.log4j.Logger;
 
 import de.hsharz.provirent.objects.AudioFormat;
+import de.hsharz.provirent.objects.Condition;
 import de.hsharz.provirent.objects.Director;
 import de.hsharz.provirent.objects.Genre;
 import de.hsharz.provirent.objects.Language;
+import de.hsharz.provirent.objects.Status;
 import de.hsharz.provirent.objects.Subtitle;
 import de.hsharz.provirent.objects.VideoFormat;
 import de.hsharz.provirent.objects.Actor;
@@ -489,7 +491,7 @@
 	                
 	                //maybe we are searching for the id?
 	                try {
-	                    any.add(Expression.eq("GenreId", new Integer(Integer.parseInt(filter))));
+	                    any.add(Expression.eq("genreId", new Integer(Integer.parseInt(filter))));
 	                } catch (Exception e) {
 	                }
 	                
@@ -593,7 +595,7 @@
 	                
 	                //maybe we are searching for the id?
 	                try {
-	                    any.add(Expression.eq("LanguageId", new Integer(Integer.parseInt(filter))));
+	                    any.add(Expression.eq("languageId", new Integer(Integer.parseInt(filter))));
 	                } catch (Exception e) {
 	                }
 	                
@@ -799,7 +801,7 @@
 	                
 	                //maybe we are searching for the id?
 	                try {
-	                    any.add(Expression.eq("SubtitleId", new Integer(Integer.parseInt(filter))));
+	                    any.add(Expression.eq("subtitleId", new Integer(Integer.parseInt(filter))));
 	                } catch (Exception e) {
 	                }
 	                
@@ -871,6 +873,214 @@
 	    
 	
 	}
+	
+	/**
+	 * This method gets all Status from the database.
+	 * searches for name or shortname or id
+	 * @param filter 
+	 * @return List of Status objects, or an empty List
+	 */
+	public static List getStatus(final String filter){
+	    if (logger.isDebugEnabled()) {
+	        logger.debug("getStatus() - start. String filter= "+filter);
+	    }
+	    //init the returnlist
+	    List returnlist = new ArrayList();
+	
+	    Session s = null;
+	    
+	    try {
+	        //get new Session and begin Transaction
+	        s = HibernateUtil.currentSession();
+	            
+	            //init the criteria
+	            Criteria criteria = s.createCriteria(Status.class);
+	            //any of the criteria 
+	            Disjunction any = Expression.disjunction();
+	
+	            //if filter not empty
+	            if (filter != null && !filter.equalsIgnoreCase("")) {
+	                any.add(Expression.like("statusName", "%"+filter+"%"));
+	                any.add(Expression.like("statusShortname", "%"+filter+"%"));
+	                
+	                //maybe we are searching for the id?
+	                try {
+	                    any.add(Expression.eq("statusId", new Integer(Integer.parseInt(filter))));
+	                } catch (Exception e) {
+	                }
+	                
+	            }
+	            //add all criteria
+	            criteria.add(any);
+	            //get the results
+	            returnlist = criteria.list();
+	
+	
+	
+	
+	    } catch (Exception e) {
+	        logger.error(
+	                "getStatus() - Error while trying to do Transaction",
+	                e);
+	        returnlist = new ArrayList();
+	    } finally {
+	        try {
+	            // No matter what, close the session
+	            HibernateUtil.closeSession();
+	        } catch (HibernateException e1) {
+	            logger.error("getStatus() - Could not Close the Session", e1);
+	        }
+	    }
+	
+	    if (logger.isDebugEnabled()) {
+	        logger.debug("getStatus() - end");
+	    }
+	    return returnlist;
+	    
+	
+	}
+	
+	
+	public static Status getSingleStatus(final int id){
+	    if (logger.isDebugEnabled()) {
+	        logger.debug("getSingleStatus() - start. int filter= "+id);
+	    }
+	    //init the returnlist
+	    Status returnobject = null;
+	
+	    Session s = null;
+	    Transaction tx = null;
+	    try {
+	        //get new Session and begin Transaction
+	        s = HibernateUtil.currentSession();
+	
+	            returnobject = (Status)s.get(Status.class, new Integer(id));
+	
+	    } catch (Exception e) {
+	        logger.error(
+	                "getSingleStatus() - Error while trying to do Transaction",
+	                e);
+	        
+	    } finally {
+	        try {
+	            // No matter what, close the session
+	            HibernateUtil.closeSession();
+	        } catch (HibernateException e1) {
+	            logger.error("getSingleStatus() - Could not Close the Session", e1);
+	        }
+	    }
+	
+	    if (logger.isDebugEnabled()) {
+	        logger.debug("getSingleStatus() - end");
+	    }
+	    return returnobject;
+	    
+	
+	}
+	
+    /**
+	 * This method gets all Conditions from the database.
+	 * searches for name or shortname or id
+	 * @param filter 
+	 * @return List of Condition objects, or an empty List
+	 */
+	public static List getCondition(final String filter){
+	    if (logger.isDebugEnabled()) {
+	        logger.debug("getCondition() - start. String filter= "+filter);
+	    }
+	    //init the returnlist
+	    List returnlist = new ArrayList();
+	
+	    Session s = null;
+	    
+	    try {
+	        //get new Session and begin Transaction
+	        s = HibernateUtil.currentSession();
+	            
+	            //init the criteria
+	            Criteria criteria = s.createCriteria(Condition.class);
+	            //any of the criteria 
+	            Disjunction any = Expression.disjunction();
+	
+	            //if filter not empty
+	            if (filter != null && !filter.equalsIgnoreCase("")) {
+	                any.add(Expression.like("conditionName", "%"+filter+"%"));
+	                any.add(Expression.like("conditionshortname", "%"+filter+"%"));
+	                
+	                //maybe we are searching for the id?
+	                try {
+	                    any.add(Expression.eq("conditionId", new Integer(Integer.parseInt(filter))));
+	                } catch (Exception e) {
+	                }
+	                
+	            }
+	            //add all criteria
+	            criteria.add(any);
+	            //get the results
+	            returnlist = criteria.list();
+	
+	
+	
+	
+	    } catch (Exception e) {
+	        logger.error(
+	                "getCondition() - Error while trying to do Transaction",
+	                e);
+	        returnlist = new ArrayList();
+	    } finally {
+	        try {
+	            // No matter what, close the session
+	            HibernateUtil.closeSession();
+	        } catch (HibernateException e1) {
+	            logger.error("getCondition() - Could not Close the Session", e1);
+	        }
+	    }
+	
+	    if (logger.isDebugEnabled()) {
+	        logger.debug("getCondition() - end");
+	    }
+	    return returnlist;
+	    
+	
+	}
+	
+	
+	public static Condition getSingleCondition(final int id){
+	    if (logger.isDebugEnabled()) {
+	        logger.debug("getSingleCondition() - start. int filter= "+id);
+	    }
+	    //init the returnlist
+	    Condition returnobject = null;
+	
+	    Session s = null;
+	    Transaction tx = null;
+	    try {
+	        //get new Session and begin Transaction
+	        s = HibernateUtil.currentSession();
+	
+	            returnobject = (Condition)s.get(Condition.class, new Integer(id));
+	
+	    } catch (Exception e) {
+	        logger.error(
+	                "getSingleCondition() - Error while trying to do Transaction",
+	                e);
+	        
+	    } finally {
+	        try {
+	            // No matter what, close the session
+	            HibernateUtil.closeSession();
+	        } catch (HibernateException e1) {
+	            logger.error("getSingleCondition() - Could not Close the Session", e1);
+	        }
+	    }
+	
+	    if (logger.isDebugEnabled()) {
+	        logger.debug("getSingleCondition() - end");
+	    }
+	    return returnobject;
+	    
+	
+	}
 
 	/**
 	 * This method gets all Directors from the database.

Modified: project_src/provirent_hibernate/src/test/provirent/hibernate/TestCondition.java
===================================================================
--- project_src/provirent_hibernate/src/test/provirent/hibernate/TestCondition.java	2004-11-11 11:43:54 UTC (rev 127)
+++ project_src/provirent_hibernate/src/test/provirent/hibernate/TestCondition.java	2004-11-11 14:58:27 UTC (rev 128)
@@ -84,7 +84,7 @@
         }
     }
 
-    public void testCondition() throws Exception {
+    /*public void testCondition() throws Exception {
         if (logger.isDebugEnabled()) {
             logger.debug("testCreating() - start");
         }
@@ -194,7 +194,7 @@
         if (logger.isDebugEnabled()) {
             logger.debug("testCreating() - end");
         }
-    }
+    }*/
 
     public void testSaveCondition() throws Exception {
         if (logger.isDebugEnabled()) {

Modified: project_src/provirent_hibernate/src/test/provirent/hibernate/TestCustomer.java
===================================================================
--- project_src/provirent_hibernate/src/test/provirent/hibernate/TestCustomer.java	2004-11-11 11:43:54 UTC (rev 127)
+++ project_src/provirent_hibernate/src/test/provirent/hibernate/TestCustomer.java	2004-11-11 14:58:27 UTC (rev 128)
@@ -1,7 +1,6 @@
 package test.provirent.hibernate;
 
 import java.util.ArrayList;
-import java.util.Date;
 import java.util.Calendar;
 import java.util.Iterator;
 import java.util.List;
@@ -12,7 +11,6 @@
 
 import org.apache.log4j.Logger;
 
-import de.hsharz.provirent.objects.Condition;
 import de.hsharz.provirent.objects.Customer;
 import de.hsharz.provirent.objects.Person;
 /*
@@ -120,7 +118,7 @@
 
                 Customer c = new Customer();
                 c.setUserName("kunde1");
-                c.setPassword("kunde1");
+                c.setUserPassword("kunde1");
                 c.setHiddenQuestion(" ");
                 c.setHiddenAnswer(" ");
 
@@ -255,7 +253,7 @@
 
                 Customer c = new Customer();
                 c.setUserName("kunde1");
-                c.setPassword("kunde1");
+                c.setUserPassword("kunde1");
                 c.setHiddenQuestion(" ");
                 c.setHiddenAnswer(" ");
 
@@ -284,7 +282,7 @@
                 //second Customer
                 c = new Customer();
                 c.setUserName("kunde2");
-                c.setPassword("kunde2");
+                c.setUserPassword("kunde2");
                 c.setHiddenQuestion(" ");
                 c.setHiddenAnswer(" ");
 
@@ -311,7 +309,7 @@
                 //third Customer
                 c = new Customer();
                 c.setUserName("kunde3");
-                c.setPassword("kunde3");
+                c.setUserPassword("kunde3");
                 c.setHiddenQuestion(" ");
                 c.setHiddenAnswer(" ");
 

Modified: project_src/provirent_hibernate/src/test/provirent/hibernate/TestCustomerOld.java
===================================================================
--- project_src/provirent_hibernate/src/test/provirent/hibernate/TestCustomerOld.java	2004-11-11 11:43:54 UTC (rev 127)
+++ project_src/provirent_hibernate/src/test/provirent/hibernate/TestCustomerOld.java	2004-11-11 14:58:27 UTC (rev 128)
@@ -32,15 +32,12 @@
  */
 package test.provirent.hibernate;
 
-import java.util.ArrayList;
-import java.util.List;
-import java.util.ListIterator;
-
 import net.sf.hibernate.Session;
 import net.sf.hibernate.SessionFactory;
 import net.sf.hibernate.Transaction;
 import net.sf.hibernate.cfg.Configuration;
-import de.hsharz.provirent.objects.*;
+import de.hsharz.provirent.objects.Customer;
+import de.hsharz.provirent.objects.Person;
 
 
 /**
@@ -141,7 +138,7 @@
             Customer c = new Customer();
             c.setPerson(p);
             c.setUserName("boelkstoff");
-            c.setPassword("egal");
+            c.setUserPassword("egal");
             c.setHiddenQuestion("Wer");
             c.setHiddenAnswer("ich");
             

Modified: project_src/provirent_hibernate/src/test/provirent/hibernate/TestDvdOld.java
===================================================================
--- project_src/provirent_hibernate/src/test/provirent/hibernate/TestDvdOld.java	2004-11-11 11:43:54 UTC (rev 127)
+++ project_src/provirent_hibernate/src/test/provirent/hibernate/TestDvdOld.java	2004-11-11 14:58:27 UTC (rev 128)
@@ -33,14 +33,22 @@
 package test.provirent.hibernate;
 
 import java.util.ArrayList;
-import java.util.List;
-import java.util.ListIterator;
 
 import net.sf.hibernate.Session;
 import net.sf.hibernate.SessionFactory;
 import net.sf.hibernate.Transaction;
 import net.sf.hibernate.cfg.Configuration;
-import de.hsharz.provirent.objects.*;
+import de.hsharz.provirent.objects.Actor;
+import de.hsharz.provirent.objects.AudioFormat;
+import de.hsharz.provirent.objects.Condition;
+import de.hsharz.provirent.objects.Director;
+import de.hsharz.provirent.objects.Dvd;
+import de.hsharz.provirent.objects.Genre;
+import de.hsharz.provirent.objects.Language;
+import de.hsharz.provirent.objects.Movie;
+import de.hsharz.provirent.objects.Status;
+import de.hsharz.provirent.objects.Subtitle;
+import de.hsharz.provirent.objects.VideoFormat;
 
 
 /**

Modified: project_src/provirent_hibernate/src/test/provirent/hibernate/TestHibernate.java
===================================================================
--- project_src/provirent_hibernate/src/test/provirent/hibernate/TestHibernate.java	2004-11-11 11:43:54 UTC (rev 127)
+++ project_src/provirent_hibernate/src/test/provirent/hibernate/TestHibernate.java	2004-11-11 14:58:27 UTC (rev 128)
@@ -33,14 +33,22 @@
 package test.provirent.hibernate;
 
 import java.util.ArrayList;
-import java.util.List;
-import java.util.ListIterator;
 
 import net.sf.hibernate.Session;
 import net.sf.hibernate.SessionFactory;
 import net.sf.hibernate.Transaction;
 import net.sf.hibernate.cfg.Configuration;
-import de.hsharz.provirent.objects.*;
+import de.hsharz.provirent.objects.Actor;
+import de.hsharz.provirent.objects.AudioFormat;
+import de.hsharz.provirent.objects.Condition;
+import de.hsharz.provirent.objects.Director;
+import de.hsharz.provirent.objects.Dvd;
+import de.hsharz.provirent.objects.Genre;
+import de.hsharz.provirent.objects.Language;
+import de.hsharz.provirent.objects.Movie;
+import de.hsharz.provirent.objects.Status;
+import de.hsharz.provirent.objects.Subtitle;
+import de.hsharz.provirent.objects.VideoFormat;
 
 
 /**

Modified: project_src/provirent_hibernate/src/test/provirent/hibernate/TestMovie.java
===================================================================
--- project_src/provirent_hibernate/src/test/provirent/hibernate/TestMovie.java	2004-11-11 11:43:54 UTC (rev 127)
+++ project_src/provirent_hibernate/src/test/provirent/hibernate/TestMovie.java	2004-11-11 14:58:27 UTC (rev 128)
@@ -45,7 +45,6 @@
 
 import de.hsharz.provirent.objects.Actor;
 import de.hsharz.provirent.objects.AudioFormat;
-import de.hsharz.provirent.objects.Customer;
 import de.hsharz.provirent.objects.Director;
 import de.hsharz.provirent.objects.Genre;
 import de.hsharz.provirent.objects.Image;

Modified: project_src/provirent_hibernate/src/test/provirent/hibernate/TestStatus.java
===================================================================
--- project_src/provirent_hibernate/src/test/provirent/hibernate/TestStatus.java	2004-11-11 11:43:54 UTC (rev 127)
+++ project_src/provirent_hibernate/src/test/provirent/hibernate/TestStatus.java	2004-11-11 14:58:27 UTC (rev 128)
@@ -83,7 +83,7 @@
             logger.debug("tearDown() - end");
         }
     }
-
+    /*
     public void testStatus() throws Exception {
         if (logger.isDebugEnabled()) {
             logger.debug("testCreating() - start");
@@ -192,7 +192,7 @@
       if (logger.isDebugEnabled()) {
             logger.debug("testCreating() - end");
         }
-    }
+    }*/
 
     public void testSaveStatus() throws Exception {
         if (logger.isDebugEnabled()) {



From pschneider at sheep.berlios.de  Thu Nov 11 22:08:21 2004
From: pschneider at sheep.berlios.de (Philipp Schneider at BerliOS)
Date: Thu, 11 Nov 2004 22:08:21 +0100
Subject: [Provirent-svn-commit] r129 - html
Message-ID: <200411112108.iABL8LMD006178@sheep.berlios.de>

Author: pschneider
Date: 2004-11-11 22:08:19 +0100 (Thu, 11 Nov 2004)
New Revision: 129

Added:
   html/border.gif
   html/border_bl.gif
   html/border_br.gif
   html/border_r.gif
   html/border_tr.gif
Modified:
   html/test.html
Log:
- Schatten hinzugefuegt

Added: html/border.gif
===================================================================
(Binary files differ)


Property changes on: html/border.gif
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: html/border_bl.gif
===================================================================
(Binary files differ)


Property changes on: html/border_bl.gif
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: html/border_br.gif
===================================================================
(Binary files differ)


Property changes on: html/border_br.gif
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: html/border_r.gif
===================================================================
(Binary files differ)


Property changes on: html/border_r.gif
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: html/border_tr.gif
===================================================================
(Binary files differ)


Property changes on: html/border_tr.gif
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Modified: html/test.html
===================================================================
--- html/test.html	2004-11-11 14:58:27 UTC (rev 128)
+++ html/test.html	2004-11-11 21:08:19 UTC (rev 129)
@@ -1,103 +1,122 @@
-<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
-"http://www.w3.org/TR/html4/loose.dtd">
-<html>
-<head>
-<title>Unbenanntes Dokument</title>
-<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
-<style type="text/css">
-<!--
-.Stil5 {
-	font-family: Verdana, Arial, Helvetica, sans-serif;
-	font-size: 12px;
-}
-.Stil6 {
-	font-family: "Courier New", Courier, mono;
-	font-size: 12px;
-}
--->
-</style>
-</head>
-
-<body bgcolor="#F9EFD2">
-<table width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
-  <tr>
-    <td width="10%" >&nbsp;</td>
-    <td>&nbsp;</td>
-    <td width="10%">&nbsp;</td>
-  </tr>
-  <tr>
-    <td>&nbsp;</td>
-    <td>
-
-<table width="100%"  border="0" bgcolor="#C2D9C1"  align="center" cellpadding="0" cellspacing="0">
-<tr>
-    <td colspan="7" bgcolor="#000000"><img src="1pxtrans.gif"></td>
-</tr>
-<tr>
-	<td width="1px" bgcolor="#000000"><img src="1pxtrans.gif"></td>
-	<td colspan="5" height="70px">Logo</td>
-	<td width="1px" bgcolor="#000000"><img src="1pxtrans.gif"></td>
-</tr>
-<tr>
-    <td colspan="7" bgcolor="#000000"><img src="1pxtrans.gif"></td>
-</tr>
-<tr>
-	<td width="1px" bgcolor="#000000"><img src="1pxtrans.gif"></td>
-	<td colspan="5" height="20px" valign="middle"><span class="Stil5">Home | Suche | ?bersicht | Hilfe | Impressum</span></td>
-	<td width="1px" bgcolor="#000000"><img src="1pxtrans.gif"></td>
-</tr>
-<tr>
-    <td colspan="7" bgcolor="#000000"><img src="1pxtrans.gif"></td>
-</tr>
-<tr>
-	<td colspan="7" bgcolor="#F9EFD2" height="2px"><img src="1pxtrans.gif"></td>
-</tr>
-<tr>
-    <td colspan="3" bgcolor="#000000"><img src="1pxtrans.gif"></td>
-	<td colspan="1" bgcolor="#F9EFD2" width="2px"><img src="1pxtrans.gif"></td>
-	<td colspan="3" bgcolor="#000000"><img src="1pxtrans.gif"></td>
-</tr>
-<tr>
-    <td width="1px" bgcolor="#000000"><img src="1pxtrans.gif"></td>
-	<td height="300px">Menue</td>
-	<td width="1px" bgcolor="#000000"><img src="1pxtrans.gif"></td>
-	<td bgcolor="#F9EFD2" width="2px"><img src="1pxtrans.gif"></td>
-	<td width="1px" bgcolor="#000000"><img src="1pxtrans.gif"></td>
-	<td width="85%">Main</td>
-	<td width="1px" bgcolor="#000000"><img src="1pxtrans.gif"></td>
-</tr>
-<tr>
-    <td colspan="3" bgcolor="#000000"><img src="1pxtrans.gif"></td>
-	<td colspan="1" bgcolor="#F9EFD2" width="2px"><img src="1pxtrans.gif"></td>
-	<td colspan="3" bgcolor="#000000"><img src="1pxtrans.gif"></td>
-</tr>
-<tr>
-    <td colspan="7" bgcolor="#F9EFD2" height="2px"><img src="1pxtrans.gif"></td>
-</tr>
-<tr>
-    <td colspan="7" bgcolor="#000000"><img src="1pxtrans.gif"></td>
-</tr>
-<tr>
-	<td width="1px" bgcolor="#000000"><img src="1pxtrans.gif"></td>
-	<td colspan="5"><div align="center" class="Stil6">Impressum</div></td>
-	<td width="1px" bgcolor="#000000"><img src="1pxtrans.gif"></td>
-</tr>
-<tr>
-    <td colspan="7" bgcolor="#000000"><img src="1pxtrans.gif"></td>
-</tr>
-</table>
-
-	
-	
-	
-	</td>
-    <td>&nbsp;</td>
-  </tr>
-  <tr>
-    <td>&nbsp;</td>
-    <td>&nbsp;</td>
-    <td>&nbsp;</td>
-  </tr>
-</table>
-</body>
-</html>
+<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
+"http://www.w3.org/TR/html4/loose.dtd">
+<html>
+<head>
+<title>Unbenanntes Dokument</title>
+<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
+<style type="text/css">
+<!--
+.Stil5 {
+	font-family: Verdana, Arial, Helvetica, sans-serif;
+	font-size: 12px;
+}
+.Stil6 {
+	font-family: "Courier New", Courier, mono;
+	font-size: 12px;
+}
+-->
+</style>
+</head>
+
+<body bgcolor="#F9EFD2">
+<table width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
+  <tr>
+    <td width="10%" >&nbsp;</td>
+    <td>&nbsp;</td>
+    <td width="10%">&nbsp;</td>
+  </tr>
+  <tr>
+    <td>&nbsp;</td>
+    <td>
+
+<table width="100%"  border="0" bgcolor="#C2D9C1"  align="center" cellpadding="0" cellspacing="0">
+<tr>
+    <td colspan="7" bgcolor="#000000"><img src="1pxtrans.gif"></td>
+    <td background=border_r.gif><img src="1pxtrans.gif" width="10px" height="1px"></td>
+</tr>
+<tr>
+	<td width="1px" bgcolor="#000000"><img src="1pxtrans.gif"></td>
+	<td colspan="5" height="70px">Logo</td>
+	<td width="1px" bgcolor="#000000"><img src="1pxtrans.gif"></td>
+	<td background=border_r.gif><img src="1pxtrans.gif" width="10px" ></td>
+</tr>
+<tr>
+    <td colspan="7" bgcolor="#000000"><img src="1pxtrans.gif"></td>
+    <td background=border_r.gif><img src="1pxtrans.gif" width="10px"  height="1px"></td>
+</tr>
+<tr>
+	<td width="1px" bgcolor="#000000"><img src="1pxtrans.gif"></td>
+	<td colspan="5" height="20px" valign="middle"><span class="Stil5">Home | Suche | ?bersicht | Hilfe | Impressum</span></td>
+	<td width="1px" bgcolor="#000000"><img src="1pxtrans.gif"></td>
+	<td background=border_r.gif><img src="1pxtrans.gif" width="10px"></td>
+</tr>
+<tr>
+    <td colspan="7" bgcolor="#000000"><img src="1pxtrans.gif"></td>
+    <td background=border_r.gif><img src="1pxtrans.gif" width="10px" height="1px"></td>
+</tr>
+<tr>
+	<td colspan="7" bgcolor="#F9EFD2" height="2px"><img src="1pxtrans.gif"></td>
+	<td bgcolor="#F9EFD2"><img src="1pxtrans.gif" width="1px" height="1px"></td>
+</tr>
+<tr>
+    <td colspan="3" bgcolor="#000000"><img src="1pxtrans.gif"></td>
+	<td colspan="1" bgcolor="#F9EFD2" width="2px"><img src="1pxtrans.gif"></td>
+	<td colspan="3" bgcolor="#000000"><img src="1pxtrans.gif"></td>
+	<td background=border_r.gif><img src="1pxtrans.gif" width="10px" height="1px"></td>
+</tr>
+<tr>
+    <td width="1px" bgcolor="#000000"><img src="1pxtrans.gif"></td>
+	<td height="300px">Menue</td>
+	<td width="1px" bgcolor="#000000"><img src="1pxtrans.gif"></td>
+	<td bgcolor="#F9EFD2" width="2px"><img src="1pxtrans.gif"></td>
+	<td width="1px" bgcolor="#000000"><img src="1pxtrans.gif"></td>
+	<td width="85%">Main</td>
+	<td width="1px" bgcolor="#000000"><img src="1pxtrans.gif"></td>
+	<td background=border_r.gif><img src="1pxtrans.gif" width="10px"></td>
+</tr>
+<tr>
+    <td colspan="3" bgcolor="#000000"><img src="1pxtrans.gif"></td>
+	<td colspan="1" bgcolor="#F9EFD2" width="2px"><img src="1pxtrans.gif"></td>
+	<td colspan="3" bgcolor="#000000"><img src="1pxtrans.gif"></td>
+	<td background=border_r.gif><img src="1pxtrans.gif" width="10px" height="1px"></td>
+</tr>
+<tr>
+    <td colspan="7" bgcolor="#F9EFD2" height="2px"><img src="1pxtrans.gif"></td>
+    <td bgcolor="#F9EFD2"><img src="1pxtrans.gif" width="1px" height="1px"></td>
+</tr>
+<tr>
+    <td colspan="7" bgcolor="#000000"><img src="1pxtrans.gif"></td>
+    <td background=border_r.gif><img src="1pxtrans.gif" width="10px" height="1px"></td>
+</tr>
+<tr>
+	<td width="1px" bgcolor="#000000"><img src="1pxtrans.gif"></td>
+	<td colspan="5"><div align="center" class="Stil6">Impressum</div></td>
+	<td width="1px" bgcolor="#000000"><img src="1pxtrans.gif"></td>
+	<td background=border_r.gif><img src="1pxtrans.gif" width="10px"></td>
+</tr>
+<tr>
+    <td colspan="7" bgcolor="#000000"><img src="1pxtrans.gif"></td>
+    <td background=border_r.gif><img src="1pxtrans.gif" width="10px" height="1px"></td>
+</tr>
+
+<tr>
+    <td colspan="7" background=border.gif><img src="border_bl.gif" height="10px"></td>
+    <td background=border_br.gif><img src="1pxtrans.gif" width="4px" height="1px"></td>
+</tr>
+
+</table>
+
+	
+	
+	
+	</td>
+    <td>&nbsp;</td>
+  </tr>
+  <tr>
+    <td>&nbsp;</td>
+    <td>&nbsp;</td>
+    <td>&nbsp;</td>
+  </tr>
+</table>
+</body>
+</html>



From rgriesch at sheep.berlios.de  Thu Nov 11 22:16:40 2004
From: rgriesch at sheep.berlios.de (Remo Griesch at BerliOS)
Date: Thu, 11 Nov 2004 22:16:40 +0100
Subject: [Provirent-svn-commit] r130 - project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui
Message-ID: <200411112116.iABLGe7F006816@sheep.berlios.de>

Author: rgriesch
Date: 2004-11-11 22:16:38 +0100 (Thu, 11 Nov 2004)
New Revision: 130

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeActors.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeDirectors.java
Log:
Tabellenspalten bei Composite Actors und Directors ver?\195?\164ndert

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeActors.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeActors.java	2004-11-11 21:08:19 UTC (rev 129)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeActors.java	2004-11-11 21:16:38 UTC (rev 130)
@@ -292,7 +292,7 @@
                         SWT.CENTER);
                     tableActorsOverview_ColumnFName.setText(l
                         .getString("actors.groupoverview.columnfirstname"));
-                    tableActorsOverview_ColumnFName.setWidth(80);
+                    tableActorsOverview_ColumnFName.setWidth(120);
                 }
                 {
                     tableActorsOverview_ColumnLName = new TableColumn(
@@ -300,7 +300,7 @@
                         SWT.CENTER);
                     tableActorsOverview_ColumnLName.setText(l
                         .getString("actors.groupoverview.columnlastname"));
-                    tableActorsOverview_ColumnLName.setWidth(80);
+                    tableActorsOverview_ColumnLName.setWidth(120);
                 }
             }
             // table Actors Overview

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeDirectors.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeDirectors.java	2004-11-11 21:08:19 UTC (rev 129)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeDirectors.java	2004-11-11 21:16:38 UTC (rev 130)
@@ -291,7 +291,7 @@
                         SWT.CENTER);
                     tableDirectorsOverview_ColumnFName.setText(l
                         .getString("directors.groupoverview.columnfirstname"));
-                    tableDirectorsOverview_ColumnFName.setWidth(80);
+                    tableDirectorsOverview_ColumnFName.setWidth(120);
                 }
                 {
                     tableDirectorsOverview_ColumnLName = new TableColumn(
@@ -299,7 +299,7 @@
                         SWT.CENTER);
                     tableDirectorsOverview_ColumnLName.setText(l
                         .getString("directors.groupoverview.columnlastname"));
-                    tableDirectorsOverview_ColumnLName.setWidth(80);
+                    tableDirectorsOverview_ColumnLName.setWidth(120);
                 }
             }
             // table Actors Overview



From pschneider at sheep.berlios.de  Thu Nov 11 22:26:46 2004
From: pschneider at sheep.berlios.de (Philipp Schneider at BerliOS)
Date: Thu, 11 Nov 2004 22:26:46 +0100
Subject: [Provirent-svn-commit] r131 - project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui project_src/provirent_hibernate/src/de/hsharz/provirent/persistence project_src/provirent_hibernate/src/test/provirent/hibernate timetable
Message-ID: <200411112126.iABLQk7Z007521@sheep.berlios.de>

Author: pschneider
Date: 2004-11-11 22:26:45 +0100 (Thu, 11 Nov 2004)
New Revision: 131

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java
   project_src/provirent_hibernate/src/test/provirent/hibernate/TestCondition.java
   project_src/provirent_hibernate/src/test/provirent/hibernate/TestGenre.java
   project_src/provirent_hibernate/src/test/provirent/hibernate/TestStatus.java
   timetable/pschneider.txt
Log:
- tabs werden beim ?\195?\182ffnen jetzt auch sofort angezeigt

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java	2004-11-11 21:16:38 UTC (rev 130)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java	2004-11-11 21:26:45 UTC (rev 131)
@@ -401,6 +401,7 @@
             public void widgetSelected(SelectionEvent evt) {
 				if(tabItemFormat == null || tabItemFormat.isDisposed()){
 				    initFormatTab();
+				    cTabFolderMain.setSelection(tabItemFormat);
 				 return;   
 				}
 				
@@ -417,6 +418,7 @@
             public void widgetSelected(SelectionEvent evt) {
 				if(tabItemDirector == null || tabItemDirector.isDisposed()){
 				    initDirectorTab();
+				    cTabFolderMain.setSelection(tabItemDirector);
 				    return;   
 				}
 				
@@ -433,6 +435,7 @@
             public void widgetSelected(SelectionEvent evt) {
 				if(tabItemActor == null || tabItemActor.isDisposed()){
 				    initActorTab();
+				    cTabFolderMain.setSelection(tabItemActor);
 				    return;   
 				}
 				
@@ -450,6 +453,7 @@
             public void widgetSelected(SelectionEvent evt) {
 				if(tabItemGenre == null || tabItemGenre.isDisposed()){
 				    initGenreTab();
+				    cTabFolderMain.setSelection(tabItemGenre);
 				    return;   
 				}
 				
@@ -467,6 +471,7 @@
             public void widgetSelected(SelectionEvent evt) {
 				if(tabItemLanguage == null || tabItemLanguage.isDisposed()){
 				    initLanguageTab();
+				    cTabFolderMain.setSelection(tabItemLanguage);
 				    return;   
 				}
 				
@@ -484,6 +489,7 @@
             public void widgetSelected(SelectionEvent evt) {
 				if(tabItemStatus == null || tabItemStatus.isDisposed()){
 				    initStatusTab();
+				    cTabFolderMain.setSelection(tabItemStatus);
 				    return;   
 				}
 				

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java	2004-11-11 21:16:38 UTC (rev 130)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java	2004-11-11 21:26:45 UTC (rev 131)
@@ -239,20 +239,27 @@
                 //get new Session and begin Transaction
                 s = HibernateUtil.currentSession();
                 tx = s.beginTransaction();
+                
                 try{
                     s.delete(o);
+                
                 } catch (HibernateException e) {
                     logger.error("saveObject(). Fehler beim Speichern/Updaten "
                             + "des Objectes:" + o + " Exception: " + e);
                     exception = 1;
                 }
+               
                 
-                s.flush();
-               
+
+                //s.flush();
+                
                 tx.commit();
                 
+                o= null;
+                
             } catch (HibernateException e) {
                 exception = 2;
+                logger.error("Message "+  e.getMessages().toString()); 
                 logger
                         .error(
                                 "deleteObject(Object) - Something went wrong here; discard all partial changes",
@@ -1193,4 +1200,4 @@
 
     }
 
-}
\ No newline at end of file
+}

Modified: project_src/provirent_hibernate/src/test/provirent/hibernate/TestCondition.java
===================================================================
--- project_src/provirent_hibernate/src/test/provirent/hibernate/TestCondition.java	2004-11-11 21:16:38 UTC (rev 130)
+++ project_src/provirent_hibernate/src/test/provirent/hibernate/TestCondition.java	2004-11-11 21:26:45 UTC (rev 131)
@@ -84,7 +84,7 @@
         }
     }
 
-    /*public void testCondition() throws Exception {
+    public void testCondition() throws Exception {
         if (logger.isDebugEnabled()) {
             logger.debug("testCreating() - start");
         }
@@ -194,7 +194,7 @@
         if (logger.isDebugEnabled()) {
             logger.debug("testCreating() - end");
         }
-    }*/
+    }
 
     public void testSaveCondition() throws Exception {
         if (logger.isDebugEnabled()) {

Modified: project_src/provirent_hibernate/src/test/provirent/hibernate/TestGenre.java
===================================================================
--- project_src/provirent_hibernate/src/test/provirent/hibernate/TestGenre.java	2004-11-11 21:16:38 UTC (rev 130)
+++ project_src/provirent_hibernate/src/test/provirent/hibernate/TestGenre.java	2004-11-11 21:26:45 UTC (rev 131)
@@ -159,6 +159,15 @@
                     s.delete(myd);
                     s.flush();
 
+                    logger.debug("L?sche eins per Hand");
+                    Genre o = new Genre();
+                    o.setGenreId(new Integer(0));
+                    o.setName("");
+                    o.setShortname("");
+                    s.delete(o);
+                    s.flush();
+                    
+                    
                     dbd = myd = null;
 
                     Object obj = s.get(Genre.class, new Integer(id));

Modified: project_src/provirent_hibernate/src/test/provirent/hibernate/TestStatus.java
===================================================================
--- project_src/provirent_hibernate/src/test/provirent/hibernate/TestStatus.java	2004-11-11 21:16:38 UTC (rev 130)
+++ project_src/provirent_hibernate/src/test/provirent/hibernate/TestStatus.java	2004-11-11 21:26:45 UTC (rev 131)
@@ -83,7 +83,8 @@
             logger.debug("tearDown() - end");
         }
     }
-    /*
+
+   
     public void testStatus() throws Exception {
         if (logger.isDebugEnabled()) {
             logger.debug("testCreating() - start");
@@ -192,7 +193,7 @@
       if (logger.isDebugEnabled()) {
             logger.debug("testCreating() - end");
         }
-    }*/
+    }
 
     public void testSaveStatus() throws Exception {
         if (logger.isDebugEnabled()) {

Modified: timetable/pschneider.txt
===================================================================
--- timetable/pschneider.txt	2004-11-11 21:16:38 UTC (rev 130)
+++ timetable/pschneider.txt	2004-11-11 21:26:45 UTC (rev 131)
@@ -8,4 +8,10 @@
 12.10.2004	3,5	SWT erster Versuch
 
 20.10.2004	4	SWT Managment
-21.10.2004	4	SWTDual VideoFormat als erstes richtiges Element
\ No newline at end of file
+21.10.2004	4	SWTDual VideoFormat als erstes richtiges Element
+
+
+
+
+10.11.2004	3	Auf Firebird umstellen und Fehler gesucht
+11.11.2004	1,5	tests, gui probleme
\ No newline at end of file



From sforstner at sheep.berlios.de  Fri Nov 12 13:31:05 2004
From: sforstner at sheep.berlios.de (Stefan at BerliOS)
Date: Fri, 12 Nov 2004 13:31:05 +0100
Subject: [Provirent-svn-commit] r132 - project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui
Message-ID: <200411121231.iACCV51O018478@sheep.berlios.de>

Author: sforstner
Date: 2004-11-12 13:31:04 +0100 (Fri, 12 Nov 2004)
New Revision: 132

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java
Log:
FormateTab wird gleich beim Starten geladen und angezeigt

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java	2004-11-11 21:26:45 UTC (rev 131)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java	2004-11-12 12:31:04 UTC (rev 132)
@@ -334,8 +334,9 @@
             cTabFolder1LData.grabExcessVerticalSpace = true;
             cTabFolder1LData.verticalAlignment = GridData.FILL;
             cTabFolderMain.setLayoutData(cTabFolder1LData);
-
+            
             initFormatTab();
+            
 
         } catch (Exception e) {
             e.printStackTrace();
@@ -400,8 +401,7 @@
         viewVideoFormatMenuItem.addSelectionListener(new SelectionAdapter() {
             public void widgetSelected(SelectionEvent evt) {
 				if(tabItemFormat == null || tabItemFormat.isDisposed()){
-				    initFormatTab();
-				    cTabFolderMain.setSelection(tabItemFormat);
+				    initFormatTab();				    
 				 return;   
 				}
 				
@@ -418,7 +418,6 @@
             public void widgetSelected(SelectionEvent evt) {
 				if(tabItemDirector == null || tabItemDirector.isDisposed()){
 				    initDirectorTab();
-				    cTabFolderMain.setSelection(tabItemDirector);
 				    return;   
 				}
 				
@@ -435,7 +434,6 @@
             public void widgetSelected(SelectionEvent evt) {
 				if(tabItemActor == null || tabItemActor.isDisposed()){
 				    initActorTab();
-				    cTabFolderMain.setSelection(tabItemActor);
 				    return;   
 				}
 				
@@ -453,7 +451,6 @@
             public void widgetSelected(SelectionEvent evt) {
 				if(tabItemGenre == null || tabItemGenre.isDisposed()){
 				    initGenreTab();
-				    cTabFolderMain.setSelection(tabItemGenre);
 				    return;   
 				}
 				
@@ -471,7 +468,6 @@
             public void widgetSelected(SelectionEvent evt) {
 				if(tabItemLanguage == null || tabItemLanguage.isDisposed()){
 				    initLanguageTab();
-				    cTabFolderMain.setSelection(tabItemLanguage);
 				    return;   
 				}
 				
@@ -489,7 +485,6 @@
             public void widgetSelected(SelectionEvent evt) {
 				if(tabItemStatus == null || tabItemStatus.isDisposed()){
 				    initStatusTab();
-				    cTabFolderMain.setSelection(tabItemStatus);
 				    return;   
 				}
 				
@@ -535,7 +530,7 @@
             
             tabItemStatus.setControl(compositeStatus);
         }
-        
+        cTabFolderMain.setSelection(tabItemStatus);
     }
 
 
@@ -565,7 +560,7 @@
     
     
     private void initFormatTab() {
-        tabItemFormat = new CTabItem(cTabFolderMain, SWT.NONE);
+        tabItemFormat = new CTabItem(cTabFolderMain, SWT.NONE);        
         tabItemFormat.setText(l.getString("tab.format.title"));
         tabItemFormat.addDisposeListener(new DisposeListener() {
             public void widgetDisposed(DisposeEvent evt) {
@@ -583,6 +578,7 @@
             
             tabItemFormat.setControl(compositeFormate);
         }
+        cTabFolderMain.setSelection(tabItemFormat);
         
     }
     
@@ -607,7 +603,7 @@
             
             tabItemDirector.setControl(compositeDirector);
         }
-        
+        cTabFolderMain.setSelection(tabItemDirector);
     }    
     
     private void initActorTab() {
@@ -629,7 +625,7 @@
             
             tabItemActor.setControl(compositeActor);
         }
-        
+        cTabFolderMain.setSelection(tabItemActor);
     }
 
     private void initGenreTab() {
@@ -652,7 +648,7 @@
             
             tabItemGenre.setControl(compositeGenre);
         }
-        
+        cTabFolderMain.setSelection(tabItemGenre);
     }
 
     private void initLanguageTab() {
@@ -661,9 +657,9 @@
         tabItemLanguage.addDisposeListener(new DisposeListener() {
 
             public void widgetDisposed(DisposeEvent evt) {
-if(!viewLanguageMenuItem.isDisposed()){
-                viewLanguageMenuItem.setSelection(false);
-}
+                if(!viewLanguageMenuItem.isDisposed()){
+                    viewLanguageMenuItem.setSelection(false);
+                }
             }
             
         });
@@ -674,6 +670,7 @@
             
             tabItemLanguage.setControl(compositeLanguage);
         }
+        cTabFolderMain.setSelection(tabItemLanguage);
     }    
     
     private void initStatusLine() {



From pschneider at sheep.berlios.de  Mon Nov 15 15:26:44 2004
From: pschneider at sheep.berlios.de (Philipp Schneider at BerliOS)
Date: Mon, 15 Nov 2004 15:26:44 +0100
Subject: [Provirent-svn-commit] r133 - project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui
Message-ID: <200411151426.iAFEQidI004017@sheep.berlios.de>

Author: pschneider
Date: 2004-11-15 15:26:43 +0100 (Mon, 15 Nov 2004)
New Revision: 133

Added:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeImage.java
Log:
- erster Versuch f?\195?\188r Image
- keine Fehlerbehandlung bis jetzt

Added: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeImage.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeImage.java	2004-11-12 12:31:04 UTC (rev 132)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeImage.java	2004-11-15 14:26:43 UTC (rev 133)
@@ -0,0 +1,646 @@
+package de.hsharz.provirent.management.gui;
+
+import java.io.ByteArrayOutputStream;
+import java.util.Locale;
+import java.util.PropertyResourceBundle;
+import java.util.ResourceBundle;
+
+import org.apache.log4j.Logger;
+import org.eclipse.swt.SWT;
+import org.eclipse.swt.custom.SashForm;
+import org.eclipse.swt.events.FocusAdapter;
+import org.eclipse.swt.events.FocusEvent;
+import org.eclipse.swt.events.PaintEvent;
+import org.eclipse.swt.events.PaintListener;
+import org.eclipse.swt.events.SelectionAdapter;
+import org.eclipse.swt.events.SelectionEvent;
+import org.eclipse.swt.graphics.Image;
+import org.eclipse.swt.graphics.ImageData;
+import org.eclipse.swt.graphics.ImageLoader;
+import org.eclipse.swt.layout.FormAttachment;
+import org.eclipse.swt.layout.FormData;
+import org.eclipse.swt.layout.GridData;
+import org.eclipse.swt.layout.GridLayout;
+import org.eclipse.swt.widgets.Button;
+import org.eclipse.swt.widgets.Canvas;
+import org.eclipse.swt.widgets.Composite;
+import org.eclipse.swt.widgets.Display;
+import org.eclipse.swt.widgets.Event;
+import org.eclipse.swt.widgets.FileDialog;
+import org.eclipse.swt.widgets.Group;
+import org.eclipse.swt.widgets.Label;
+import org.eclipse.swt.widgets.Listener;
+import org.eclipse.swt.widgets.Scale;
+import org.eclipse.swt.widgets.Shell;
+import org.eclipse.swt.widgets.Table;
+import org.eclipse.swt.widgets.TableColumn;
+import org.eclipse.swt.widgets.TableItem;
+import org.eclipse.swt.widgets.Text;
+
+import com.cloudgarden.resource.SWTResourceManager;
+
+import de.hsharz.provirent.objects.Actor;
+import de.hsharz.provirent.persistence.Database;
+/**
+* This code was generated using CloudGarden's Jigloo
+* SWT/Swing GUI Builder, which is free for non-commercial
+* use. If Jigloo is being used commercially (ie, by a corporation,
+* company or business for any purpose whatever) then you
+* should purchase a license for each developer using Jigloo.
+* Please visit www.cloudgarden.com for details.
+* Use of Jigloo implies acceptance of these licensing terms.
+* *************************************
+* A COMMERCIAL LICENSE HAS NOT BEEN PURCHASED
+* for this machine, so Jigloo or this code cannot be used legally
+* for any corporate or commercial purpose.
+* *************************************
+*/
+public class CompositeImage extends AbstractComposite{
+
+    {
+        //Register as a resource user - SWTResourceManager will
+        //handle the obtaining and disposing of resources
+        SWTResourceManager.registerResourceUser(this);
+    }
+
+
+    /**
+     * Logger for this class
+     */
+    private static final Logger logger = Logger
+            .getLogger(CompositeImage.class);
+    
+    byte[] imagebytedata;
+    private final static int MODE_VIEW = 0;
+    private final static int MODE_ADD = 1;
+    private Label label2;
+    private Scale scale1;
+    private Canvas canvas1;
+    private Text text1;
+    private Button button1;
+    private Label label1;
+    private final static int MODE_EDIT = 2;
+    
+    private Table tableActorsOverview;
+    private TableColumn tableActorsOverview_ColumnID;
+    private TableColumn tableActorsOverview_ColumnFName;
+    private TableColumn tableActorsOverview_ColumnLName;
+    
+    
+    private SashForm sashForm1;
+    private SashForm sashForm2;
+    
+    private Group groupActor;
+    private Group groupActorsOverview;
+    private Group groupActorsDetail;
+    
+    private Text textActorsSearch;
+    private Text textActorsID;
+    private Text textActorsFName;
+    private Text textActorsLName;
+    
+    private Label labelActorsSearch;
+    private Label labelActorsID;
+    private Label labelActorsFName;
+    private Label labelActorsLName;
+
+    protected int mode_actor;
+    
+    private Image ideaImage,scaledImage;
+    
+    private StatusLineStyledText statusLine;
+
+    private ResourceBundle l;
+    
+    private Composite parent;
+
+    private String currentDir = "C:/";
+    /*
+     * ?ndert die Sprache aller Elemente
+     * 
+     * @see de.hsharz.provirent.managment.gui.AbstractComposite#changeLanguage(java.util.Locale)
+     */
+    public void changeLanguage(Locale locale) {
+
+    }
+
+    /* 
+     * Init die Sprache (properties Datei)
+     * @see de.hsharz.provirent.managment.gui.AbstractComposite#initLanguage(java.util.Locale)
+     */
+    public void initLanguage(Locale locale) {
+
+        l = PropertyResourceBundle.getBundle(
+                "de.hsharz.provirent.management.gui.language.actors", locale);
+
+    }
+    
+    
+	/**
+	* Auto-generated main method to display this 
+	* org.eclipse.swt.widgets.Composite inside a new Shell.
+	*/
+	public static void main(String[] args) {
+		showGUI();
+	}
+		
+	/**
+	* Auto-generated method to display this 
+	* org.eclipse.swt.widgets.Composite inside a new Shell.
+	*/
+	public static void showGUI() {
+		Display display = Display.getDefault();
+		Shell shell = new Shell(display);
+
+		CompositeImage p = new CompositeImage(shell,SWT.NONE,null,Locale.getDefault());
+		
+		shell.open();
+		while (!shell.isDisposed()) {
+			if (!display.readAndDispatch())
+				display.sleep();
+		}
+	}
+
+	public CompositeImage(Composite p, int style,
+            StatusLineStyledText status, Locale l) {
+	    super(p, style, status, l);
+        parent = p;
+        //Statusline wird gestzt
+        statusLine = status;
+        
+        //sprache wird init
+        initLanguage(l);
+	    
+	    
+		initGUI();
+	}
+
+	private void initGUI() {
+        if (logger.isDebugEnabled()) {
+            logger.debug("initGUI() - start");
+        }
+
+        this.setLayout(new GridLayout());
+        this.setSize(816, 540);
+        {
+            groupActor = new Group(this, SWT.NONE);
+            GridLayout groupActorLayout = new GridLayout();
+            GridData groupActorLData = new GridData();
+            groupActorLData.grabExcessHorizontalSpace = true;
+            groupActorLData.grabExcessVerticalSpace = true;
+            groupActorLData.horizontalAlignment = GridData.FILL;
+            groupActorLData.verticalAlignment = GridData.FILL;
+            groupActor.setLayoutData(groupActorLData);
+            groupActorLayout.makeColumnsEqualWidth = true;
+            groupActor.setLayout(groupActorLayout);
+            groupActor.setText(l.getString("actors.group.label"));
+            {
+                sashForm2 = new SashForm(groupActor, SWT.NONE);
+                GridData sashForm2LData = new GridData();
+                sashForm2LData.verticalAlignment = GridData.FILL;
+                sashForm2LData.horizontalAlignment = GridData.FILL;
+                sashForm2LData.grabExcessHorizontalSpace = true;
+                sashForm2LData.grabExcessVerticalSpace = true;
+                sashForm2.setLayoutData(sashForm2LData);
+                
+               
+            }
+            // init the rest of the layout
+            initActorsOverview();
+            initActorsDetail();
+            refreshActorsOverviewTable(textActorsSearch.getText());
+        }
+
+        this.layout();
+
+
+        
+        if (logger.isDebugEnabled()) {
+            logger.debug("initGUI() - end");
+        }
+	}
+
+	
+	private void initActorsOverview()  {	    
+//	  Group Actors Overview 
+        {
+            groupActorsOverview = new Group(sashForm2,SWT.NONE);
+            GridLayout group1Layout = new GridLayout();
+            group1Layout.numColumns = 8;
+            groupActorsOverview.setLayout(group1Layout);
+            groupActorsOverview.setText(l.getString("actors.groupoverview.label"));
+            
+            {// table Actors Overview
+                tableActorsOverview = new Table(
+                    groupActorsOverview,
+                    SWT.SINGLE
+                        | SWT.FULL_SELECTION
+                        | SWT.V_SCROLL | SWT.BORDER);
+                GridData tableActorsOverviewLData = new GridData();
+                tableActorsOverview.setHeaderVisible(true);
+                tableActorsOverview.setLinesVisible(true);
+                tableActorsOverviewLData.horizontalAlignment = GridData.FILL;
+                tableActorsOverviewLData.verticalAlignment = GridData.FILL;
+                tableActorsOverviewLData.horizontalSpan = 8;
+                tableActorsOverviewLData.grabExcessHorizontalSpace = true;
+                tableActorsOverviewLData.grabExcessVerticalSpace = true;
+                tableActorsOverview.setLayoutData(tableActorsOverviewLData);
+                tableActorsOverview.addFocusListener(new FocusAdapter() {
+                        public void focusLost(FocusEvent evt) {
+                            System.out
+                                .println("tableActorsOverview.focusLost, event="
+                                    + evt);
+                        }
+                        public void focusGained(FocusEvent evt) {
+                            System.out
+                                .println("tableActorsOverview.focusGained, event="
+                                    + evt);
+                        }
+                    });
+                tableActorsOverview.addSelectionListener(new SelectionAdapter() {
+                        public void widgetSelected(SelectionEvent evt) {
+                            if (logger.isDebugEnabled()) {
+                                logger
+                                    .debug("widgetSelected(SelectionEvent evt = "
+                                        + evt
+                                        + ") - start");
+                            }
+
+                            int index = tableActorsOverview
+                                .getSelectionIndex();
+
+                            System.out.println("Table select. id: "
+                                + index
+                                + " TableItem:"
+                                + tableActorsOverview.getItem(index)
+                                + " id: "
+                                + tableActorsOverview.getItem(index)
+                                    .getText(0));
+
+                            //es wurde ein Element aus Tabelle ausgewaehlt jetzt muss die
+                            //Detailansicht aktualisiert werden
+                            refreshActorsDetail(tableActorsOverview.getItem(index)
+                                                              .getText(0));
+
+                            if (logger.isDebugEnabled()) {
+                                logger
+                                    .debug("widgetSelected(SelectionEvent) - end");
+                            }
+                        }
+                    });
+                {
+                    tableActorsOverview_ColumnID = new TableColumn(
+                        tableActorsOverview,
+                        SWT.CENTER);
+                    tableActorsOverview_ColumnID.setText(l
+                        .getString("actors.groupoverview.columnid"));
+                    tableActorsOverview_ColumnID.setWidth(40);
+                }
+                {
+                    tableActorsOverview_ColumnFName = new TableColumn(
+                        tableActorsOverview,
+                        SWT.CENTER);
+                    tableActorsOverview_ColumnFName.setText(l
+                        .getString("actors.groupoverview.columnfirstname"));
+                    tableActorsOverview_ColumnFName.setWidth(80);
+                }
+                {
+                    tableActorsOverview_ColumnLName = new TableColumn(
+                        tableActorsOverview,
+                        SWT.CENTER);
+                    tableActorsOverview_ColumnLName.setText(l
+                        .getString("actors.groupoverview.columnlastname"));
+                    tableActorsOverview_ColumnLName.setWidth(80);
+                }
+            }
+            // table Actors Overview
+            // Search
+            {
+                //label for Search
+                labelActorsSearch = new Label(groupActorsOverview, SWT.NONE);
+                labelActorsSearch.setText(l
+                        .getString("actors.groupoverview.searchlabel")
+                        + ":");
+                GridData label2LData = new GridData();
+                label2LData.horizontalSpan = 3;
+                labelActorsSearch.setLayoutData(label2LData);
+
+                //text Search
+                textActorsSearch = new Text(groupActorsOverview, SWT.BORDER);
+                GridData text2LData = new GridData();
+                textActorsSearch.addFocusListener(new FocusAdapter() {
+                    public void focusLost(FocusEvent evt) {
+                        if (logger.isDebugEnabled()) {
+                            logger.debug("focusLost(FocusEvent evt = " + evt + " "
+                                    + textActorsSearch.getText() + ") - start");
+                        }
+
+                        refreshActorsOverviewTable(textActorsSearch.getText());
+
+                        if (logger.isDebugEnabled()) {
+                            logger.debug("focusLost(FocusEvent) - end");
+                        }
+                    }
+                });
+                textActorsSearch.addListener(SWT.DefaultSelection, new Listener() {
+                    public void handleEvent(Event e) {
+                        if (logger.isDebugEnabled()) {
+                            logger.debug("handleEvent(Event e = " + e + " "
+                                    + textActorsSearch.getText() + ") - start");
+                        }
+
+                        refreshActorsOverviewTable(textActorsSearch.getText());
+
+                        if (logger.isDebugEnabled()) {
+                            logger.debug("handleEvent(Event) - end");
+                        }
+                    }
+                });
+                text2LData.horizontalAlignment = GridData.FILL;
+                text2LData.horizontalSpan = 5;
+                text2LData.grabExcessHorizontalSpace = true;
+                textActorsSearch.setLayoutData(text2LData);
+            }// Search                    
+        }
+	}
+	
+	private void initActorsDetail()  {	    
+	    // Group Actors Detail
+        {
+            groupActorsDetail = new Group(sashForm2, SWT.NONE);
+            GridLayout group2Layout = new GridLayout();
+            GridData group2LData = new GridData();
+            group2Layout.verticalSpacing = 15;
+            group2Layout.numColumns = 6;
+            groupActorsDetail.setText(l.getString("actors.groupdetail.label"));   
+            FormData formData = new FormData();
+            groupActorsDetail.setLayout(group2Layout);
+            formData.right = new FormAttachment(100, 100, -5);
+            formData.top = new FormAttachment(0, 100, 5);
+            formData.bottom = new FormAttachment(100, 100, -5);
+            groupActorsDetail.setLayoutData(formData);
+        }
+        	// labels and buttons for detail
+        	{
+        	    labelActorsID = new Label(groupActorsDetail, SWT.NONE);
+        	    labelActorsID.setText(l
+        	            .getString("actors.groupdetail.labelid")
+        	            + ":");
+        	    labelActorsID.setSize(125, 15);
+        	    GridData formData2 = new GridData();
+        	    formData2.widthHint = 125;
+        	    formData2.heightHint = 15;
+        	    formData2.horizontalSpan = 2;
+        	    labelActorsID.setLayoutData(formData2);
+        	}
+        	{
+        	    textActorsID = new Text(
+        	            groupActorsDetail,
+        	            SWT.READ_ONLY | SWT.BORDER);
+        	    GridData text1LData1 = new GridData();
+        	    text1LData1.horizontalAlignment = GridData.FILL;
+        	    text1LData1.heightHint = 13;
+        	    text1LData1.horizontalSpan = 4;
+        	    text1LData1.grabExcessHorizontalSpace = true;
+        	    textActorsID.setLayoutData(text1LData1);
+        	}
+        	{
+                labelActorsFName = new Label(
+                    groupActorsDetail,
+                    SWT.NONE);
+                labelActorsFName.setText(l
+                    .getString("actors.groupdetail.labelfirstname")
+                    + ":");
+                labelActorsFName.setSize(125, 15);
+                GridData labelActorNameLData = new GridData();
+                labelActorNameLData.widthHint = 125;
+                labelActorNameLData.heightHint = 15;
+                labelActorNameLData.horizontalSpan = 2;
+                labelActorsFName
+                    .setLayoutData(labelActorNameLData);
+            }
+            {
+        	    textActorsFName = new Text(groupActorsDetail,
+        	            SWT.READ_ONLY | SWT.BORDER);
+        	    GridData text1LData2 = new GridData();
+        	    text1LData2.horizontalAlignment = GridData.FILL;
+        	    text1LData2.heightHint = 13;
+        	    text1LData2.horizontalSpan = 4;
+        	    text1LData2.grabExcessHorizontalSpace = true;
+        	    textActorsFName.setLayoutData(text1LData2);
+        	}
+            {
+        	    labelActorsLName = new Label(groupActorsDetail,
+        	            SWT.NONE);
+        	    labelActorsLName.setText(l
+        	            .getString("actors.groupdetail.labellastname")
+        	            + ":");
+        	    labelActorsLName.setSize(125, 15);
+        	    GridData label1LData1 = new GridData();
+        	    label1LData1.widthHint = 125;
+        	    label1LData1.heightHint = 15;
+        	    label1LData1.horizontalSpan = 2;
+        	    labelActorsLName.setLayoutData(label1LData1);
+        	}
+        	{
+        	    textActorsLName = new Text(groupActorsDetail,
+        	            SWT.READ_ONLY | SWT.BORDER);
+        	    GridData text1LData3 = new GridData();
+        	    text1LData3.horizontalAlignment = GridData.FILL;
+        	    text1LData3.heightHint = 13;
+        	    text1LData3.horizontalSpan = 4;
+        	    text1LData3.grabExcessHorizontalSpace = true;
+        	    textActorsLName.setLayoutData(text1LData3);
+        	}// label and buttons for detail      
+            {
+                label1 = new Label(groupActorsDetail, SWT.NONE);
+                label1.setText(l.getString("actors.groupdetail.labellastname")
+                    + ":");
+                label1.setSize(125, 15);
+                GridData label1LData = new GridData();
+                label1LData.widthHint = 125;
+                label1LData.heightHint = 15;
+                label1LData.horizontalSpan = 2;
+                label1.setLayoutData(label1LData);
+            }
+            {
+                text1 = new Text(groupActorsDetail, SWT.NONE);
+                text1.setText("text1");
+                text1.setEditable(false);
+                GridData text1LData = new GridData();
+                text1LData.widthHint = 105;
+                text1LData.heightHint = 15;
+                text1LData.horizontalSpan = 2;
+                text1.setLayoutData(text1LData);
+            }
+            {
+                button1 = new Button(groupActorsDetail, SWT.PUSH | SWT.CENTER);
+                button1.setText("Datei");
+                GridData button1LData = new GridData();
+                button1.addSelectionListener(new SelectionAdapter() {
+                    public void widgetSelected(SelectionEvent evt) {
+                        String[] filterExtensions = {"*.gif","*.jpg", "*.*"};
+                        FileDialog fileDialog = new FileDialog(getShell(), SWT.OPEN);
+                        fileDialog.setText("FileDialog Demo");
+                        fileDialog.setFilterPath("C:/");
+                        
+                        fileDialog.setFilterExtensions(filterExtensions);
+                        String selectedFile = fileDialog.open(); 
+                        if (selectedFile != null){
+                            scaledImage = ideaImage = new Image(getDisplay(),selectedFile);
+                            canvas1.redraw();
+                            text1.setText(fileDialog.getFileName());
+                            scale1.setEnabled(true);
+                        }
+                    }
+                });
+                button1LData.horizontalAlignment = GridData.FILL;
+                button1LData.grabExcessHorizontalSpace = true;
+                button1LData.horizontalSpan = 2;
+                button1.setLayoutData(button1LData);
+                
+
+                
+            
+                canvas1 = new Canvas(groupActorsDetail, SWT.BORDER);
+                GridData canvas1LData = new GridData();
+                canvas1LData.grabExcessHorizontalSpace = true;
+                canvas1LData.horizontalAlignment = GridData.FILL;
+                canvas1LData.horizontalSpan = 6;
+                canvas1LData.grabExcessVerticalSpace = true;
+                canvas1LData.verticalAlignment = GridData.FILL;
+                canvas1.setLayoutData(canvas1LData);
+                canvas1.addPaintListener(new PaintListener() {
+                    public void paintControl(PaintEvent e) {
+                        if (ideaImage != null && !ideaImage.isDisposed()){
+                     e.gc.drawImage(scaledImage,0,0);
+                        }
+                    }
+                });    
+                  
+            }
+            {
+                label2 = new Label(groupActorsDetail, SWT.NONE);
+                label2.setText(l.getString("actors.groupdetail.labellastname")
+                    + ":");
+                label2.setSize(125, 15);
+                GridData label2LData1 = new GridData();
+                label2LData1.widthHint = 125;
+                label2LData1.heightHint = 15;
+                label2LData1.horizontalSpan = 2;
+                label2.setLayoutData(label2LData1);
+            }
+            {
+                scale1 = new Scale(groupActorsDetail, SWT.NONE);
+                GridData scale1LData = new GridData();
+                scale1.setEnabled(false);
+                scale1.addSelectionListener(new SelectionAdapter() {
+                    public void widgetSelected(SelectionEvent evt) {
+                        //System.out.println("scale1.widgetSelected, event="
+                        //    + evt);
+
+                        float  scaleFaktor = (float)scale1.getSelection()/100;
+                        int newwidth =(int)(ideaImage.getBounds().width*scaleFaktor);
+                        int newheight = (int)(ideaImage.getBounds().height*scaleFaktor);
+                            
+                        ImageData newdata = ideaImage.getImageData().scaledTo(newwidth,newheight);
+                        
+                        scaledImage = new Image(getDisplay(),newdata);
+                        canvas1.redraw();
+                        
+                        ImageLoader imageLoader = new ImageLoader();
+                        imageLoader.data = new ImageData[] {newdata};
+                        ByteArrayOutputStream bos = new ByteArrayOutputStream();
+                        imageLoader.save(bos,SWT.IMAGE_GIF); 
+                        
+                        
+                        
+                        imagebytedata = bos.toByteArray();
+                    }
+                });
+                scale1LData.grabExcessHorizontalSpace = true;
+                scale1LData.horizontalAlignment = GridData.FILL;
+                scale1LData.horizontalSpan = 4;
+                scale1.setLayoutData(scale1LData);
+                scale1.setMaximum(100);
+                scale1.setMinimum(0);
+                scale1.setIncrement(10);
+                scale1.setSelection(100);
+                
+                
+            }
+
+        	// buttons for detail
+	}
+
+	 
+	
+	
+	/**
+     * @param text
+     */
+    private void refreshActorsDetail(final String id) {
+        Actor object;
+        try {
+            //since we only can get a String value from the table, we
+            //need to convert this
+            object = Database.getSingleActor(Integer.parseInt(id));
+
+            if (object == null) {
+
+                /*
+                 * 
+                 * @TODO Statusbar aktualiseren
+                 */
+                return;
+            }
+        } catch (Exception e) {
+            //id ist keine Zahl
+            return;
+        }
+
+        textActorsID.setText(object.getActorId() + "");
+        textActorsFName.setText(object.getFirstName());
+        textActorsLName.setText(object.getLastName());
+
+        //Buttons zum l?schen und editieren aktivieren
+
+        //Mode auf view setzen
+        mode_actor = ManagementGui.MODE_VIEW;
+        
+    }
+
+    /**
+     * 
+     */
+
+    protected void insertIntoActorsOverviewTable(Actor actor) {
+        TableItem item = new TableItem(tableActorsOverview, SWT.NONE);
+        item.setText(new String[] { actor.getActorId() + "", actor.getFirstName(),
+                actor.getLastName() });        
+    }
+    
+    protected void refreshActorsOverviewTable(final String filter) {
+        /*
+        if (tableActorsOverview == null) {
+            System.out
+                    .println("Konnte ActorsOverviewtable nicht refreshen, da diese null ist!");
+            return;
+        }
+        System.out.println("Versuche nun ActorsOverviewtable zu refreshen. Filter: "
+                + filter);
+        tableActorsOverview.removeAll();
+        TableItem item;
+        java.util.List Actorlist = Database.getActor(filter);
+
+        for (int i = 0; i < Actorlist.size(); i++) {
+
+            Actor o = (Actor) Actorlist.get(i);
+            item = new TableItem(tableActorsOverview, SWT.NONE);
+            item.setText(new String[] { o.getActorId() + "", o.getFirstName(),
+                    o.getLastName() });
+
+        }
+        */
+    }
+}



From pschneider at sheep.berlios.de  Mon Nov 15 16:02:26 2004
From: pschneider at sheep.berlios.de (Philipp Schneider at BerliOS)
Date: Mon, 15 Nov 2004 16:02:26 +0100
Subject: [Provirent-svn-commit] r134 - project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui
Message-ID: <200411151502.iAFF2QbR005653@sheep.berlios.de>

Author: pschneider
Date: 2004-11-15 16:02:24 +0100 (Mon, 15 Nov 2004)
New Revision: 134

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeImage.java
Log:
- scrollen funktioniert auch


Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeImage.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeImage.java	2004-11-15 14:26:43 UTC (rev 133)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeImage.java	2004-11-15 15:02:24 UTC (rev 134)
@@ -17,6 +17,7 @@
 import org.eclipse.swt.graphics.Image;
 import org.eclipse.swt.graphics.ImageData;
 import org.eclipse.swt.graphics.ImageLoader;
+import org.eclipse.swt.graphics.Rectangle;
 import org.eclipse.swt.layout.FormAttachment;
 import org.eclipse.swt.layout.FormData;
 import org.eclipse.swt.layout.GridData;
@@ -31,6 +32,7 @@
 import org.eclipse.swt.widgets.Label;
 import org.eclipse.swt.widgets.Listener;
 import org.eclipse.swt.widgets.Scale;
+import org.eclipse.swt.widgets.ScrollBar;
 import org.eclipse.swt.widgets.Shell;
 import org.eclipse.swt.widgets.Table;
 import org.eclipse.swt.widgets.TableColumn;
@@ -41,6 +43,7 @@
 
 import de.hsharz.provirent.objects.Actor;
 import de.hsharz.provirent.persistence.Database;
+import org.eclipse.swt.widgets.Slider;
 /**
 * This code was generated using CloudGarden's Jigloo
 * SWT/Swing GUI Builder, which is free for non-commercial
@@ -107,6 +110,7 @@
     protected int mode_actor;
     
     private Image ideaImage,scaledImage;
+    int iy,ix = 0;
     
     private StatusLineStyledText statusLine;
 
@@ -176,6 +180,8 @@
 	}
 
 	private void initGUI() {
+		{
+		}
         if (logger.isDebugEnabled()) {
             logger.debug("initGUI() - start");
         }
@@ -479,18 +485,24 @@
                 GridData button1LData = new GridData();
                 button1.addSelectionListener(new SelectionAdapter() {
                     public void widgetSelected(SelectionEvent evt) {
-                        String[] filterExtensions = {"*.gif","*.jpg", "*.*"};
-                        FileDialog fileDialog = new FileDialog(getShell(), SWT.OPEN);
+                        String[] filterExtensions = { "*.gif", "*.jpg", "*.*" };
+                        FileDialog fileDialog = new FileDialog(
+                            getShell(),
+                            SWT.OPEN);
                         fileDialog.setText("FileDialog Demo");
                         fileDialog.setFilterPath("C:/");
-                        
+
                         fileDialog.setFilterExtensions(filterExtensions);
-                        String selectedFile = fileDialog.open(); 
-                        if (selectedFile != null){
-                            scaledImage = ideaImage = new Image(getDisplay(),selectedFile);
+                        String selectedFile = fileDialog.open();
+                        if (selectedFile != null) {
+                            scaledImage = ideaImage = new Image(
+                                getDisplay(),
+                                selectedFile);
                             canvas1.redraw();
                             text1.setText(fileDialog.getFileName());
                             scale1.setEnabled(true);
+                            resetScrollBars();
+                            resizeScrollBars();
                         }
                     }
                 });
@@ -498,11 +510,11 @@
                 button1LData.grabExcessHorizontalSpace = true;
                 button1LData.horizontalSpan = 2;
                 button1.setLayoutData(button1LData);
-                
 
-                
-            
-                canvas1 = new Canvas(groupActorsDetail, SWT.BORDER);
+                canvas1 = new Canvas(groupActorsDetail, SWT.NO_REDRAW_RESIZE
+                    | SWT.H_SCROLL
+                    | SWT.V_SCROLL
+                    | SWT.BORDER);
                 GridData canvas1LData = new GridData();
                 canvas1LData.grabExcessHorizontalSpace = true;
                 canvas1LData.horizontalAlignment = GridData.FILL;
@@ -512,12 +524,33 @@
                 canvas1.setLayoutData(canvas1LData);
                 canvas1.addPaintListener(new PaintListener() {
                     public void paintControl(PaintEvent e) {
-                        if (ideaImage != null && !ideaImage.isDisposed()){
-                     e.gc.drawImage(scaledImage,0,0);
+                        if (ideaImage != null && !ideaImage.isDisposed()) {
+                            paintImage(e);
+                            //e.gc.drawImage(scaledImage, 0, 0);
                         }
                     }
-                });    
-                  
+                });
+
+                // Set up the image canvas scroll bars.
+                ScrollBar horizontal = canvas1.getHorizontalBar();
+                horizontal.setVisible(true);
+                horizontal.setMinimum(0);
+                horizontal.setEnabled(false);
+                horizontal.addSelectionListener(new SelectionAdapter() {
+                    public void widgetSelected(SelectionEvent event) {
+                        scrollHorizontally((ScrollBar)event.widget);
+                    }
+                });
+                ScrollBar vertical = canvas1.getVerticalBar();
+                vertical.setVisible(true);
+                vertical.setMinimum(0);
+                vertical.setEnabled(false);
+                vertical.addSelectionListener(new SelectionAdapter() {
+                    public void widgetSelected(SelectionEvent event) {
+                        scrollVertically((ScrollBar)event.widget);
+                    }
+                });
+
             }
             {
                 label2 = new Label(groupActorsDetail, SWT.NONE);
@@ -539,23 +572,24 @@
                         //System.out.println("scale1.widgetSelected, event="
                         //    + evt);
 
-                        float  scaleFaktor = (float)scale1.getSelection()/100;
-                        int newwidth =(int)(ideaImage.getBounds().width*scaleFaktor);
-                        int newheight = (int)(ideaImage.getBounds().height*scaleFaktor);
-                            
-                        ImageData newdata = ideaImage.getImageData().scaledTo(newwidth,newheight);
-                        
-                        scaledImage = new Image(getDisplay(),newdata);
+                        float scaleFaktor = (float) scale1.getSelection() / 100;
+                        int newwidth = (int) (ideaImage.getBounds().width * scaleFaktor);
+                        int newheight = (int) (ideaImage.getBounds().height * scaleFaktor);
+
+                        ImageData newdata = ideaImage.getImageData().scaledTo(
+                            newwidth,
+                            newheight);
+
+                        scaledImage = new Image(getDisplay(), newdata);
                         canvas1.redraw();
-                        
+
                         ImageLoader imageLoader = new ImageLoader();
-                        imageLoader.data = new ImageData[] {newdata};
+                        imageLoader.data = new ImageData[] { newdata };
                         ByteArrayOutputStream bos = new ByteArrayOutputStream();
-                        imageLoader.save(bos,SWT.IMAGE_GIF); 
-                        
-                        
-                        
+                        imageLoader.save(bos, SWT.IMAGE_GIF);
+
                         imagebytedata = bos.toByteArray();
+                        resizeScrollBars();
                     }
                 });
                 scale1LData.grabExcessHorizontalSpace = true;
@@ -566,16 +600,111 @@
                 scale1.setMinimum(0);
                 scale1.setIncrement(10);
                 scale1.setSelection(100);
-                
-                
+
             }
 
         	// buttons for detail
 	}
 
-	 
+	void resizeScrollBars() {
+		// Set the max and thumb for the image canvas scroll bars.
+		ScrollBar horizontal = canvas1.getHorizontalBar();
+		ScrollBar vertical = canvas1.getVerticalBar();
+		Rectangle canvasBounds = canvas1.getClientArea();
+		int width = Math.round(scaledImage.getImageData().width);
+		if (width > canvasBounds.width) {
+			// The image is wider than the canvas.
+			horizontal.setEnabled(true);
+			horizontal.setMaximum(width);
+			horizontal.setThumb(canvasBounds.width);
+			horizontal.setPageIncrement(canvasBounds.width);
+		} else {
+			// The canvas is wider than the image.
+			horizontal.setEnabled(false);
+
+			canvas1.redraw();
+		}
+		int height = Math.round(scaledImage.getImageData().height);
+		if (height > canvasBounds.height) {
+			// The image is taller than the canvas.
+			vertical.setEnabled(true);
+			vertical.setMaximum(height);
+			vertical.setThumb(canvasBounds.height);
+			vertical.setPageIncrement(canvasBounds.height);
+		} else {
+			// The canvas is taller than the image.
+			vertical.setEnabled(false);
+				canvas1.redraw();
+			
+		}
+	}
 	
 	
+	void scrollHorizontally(ScrollBar scrollBar) {
+		if (scaledImage == null) return;
+		Rectangle canvasBounds = canvas1.getClientArea();
+		int width = Math.round(scaledImage.getImageData().width );
+		int height = Math.round(scaledImage.getImageData().height );
+		if (width > canvasBounds.width) {
+			// Only scroll if the image is bigger than the canvas.
+			int x = -scrollBar.getSelection();
+			if (x + width < canvasBounds.width) {
+				// Don't scroll past the end of the image.
+				x = canvasBounds.width - width;
+			}
+			canvas1.scroll(x, iy, ix, iy, width, height, false);
+			ix = x;
+			
+		}
+	}
+	
+	void scrollVertically(ScrollBar scrollBar) {
+		if (scaledImage == null) return;
+		Rectangle canvasBounds = canvas1.getClientArea();
+		int width = Math.round(scaledImage.getImageData().width);
+		int height = Math.round(scaledImage.getImageData().height);
+		if (height > canvasBounds.height) {
+			// Only scroll if the image is bigger than the canvas.
+			int y = -scrollBar.getSelection();
+			if (y + height < canvasBounds.height) {
+				// Don't scroll past the end of the image.
+				y = canvasBounds.height - height;
+			}
+			canvas1.scroll(ix, y, ix, iy, width, height, false);
+			iy = y;
+		}
+	}	
+	
+	// Reset the scroll bars to 0.
+	void resetScrollBars() {
+		if (scaledImage == null) return;
+		ix = 0; iy = 0;
+		resizeScrollBars();
+		canvas1.getHorizontalBar().setSelection(0);
+		canvas1.getVerticalBar().setSelection(0);
+		
+	}
+	
+	
+	void paintImage(PaintEvent event) {
+		Image paintImage = scaledImage;
+
+		int w = Math.round(scaledImage.getImageData().width);
+		int h = Math.round(scaledImage.getImageData().height);
+		event.gc.drawImage(
+			paintImage,
+			0,
+			0,
+			scaledImage.getImageData().width,
+			scaledImage.getImageData().height,
+			ix + scaledImage.getImageData().x,
+			iy + scaledImage.getImageData().y,
+			w,
+			h);
+	}
+
+
+	
 	/**
      * @param text
      */



From pschneider at sheep.berlios.de  Mon Nov 15 20:37:24 2004
From: pschneider at sheep.berlios.de (Philipp Schneider at BerliOS)
Date: Mon, 15 Nov 2004 20:37:24 +0100
Subject: [Provirent-svn-commit] r135 - in project_src/provirent_hibernate/src: . de/hsharz/provirent/management/gui de/hsharz/provirent/management/gui/language de/hsharz/provirent/objects de/hsharz/provirent/persistence
Message-ID: <200411151937.iAFJbO0J029363@sheep.berlios.de>

Author: pschneider
Date: 2004-11-15 20:37:23 +0100 (Mon, 15 Nov 2004)
New Revision: 135

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeImage.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/main.properties
   project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Image.hbm.xml
   project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java
   project_src/provirent_hibernate/src/log4j.properties
Log:
-sprachen erg?\195?\164nzt
- immer noch mit fehlern, neues funktioniert bereit
- hibernate file ver?\195?\164ndertn, ANT ERNEUT AUSF?\195?\156HREN!!

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeImage.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeImage.java	2004-11-15 15:02:24 UTC (rev 134)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeImage.java	2004-11-15 19:37:23 UTC (rev 135)
@@ -1,6 +1,9 @@
 package de.hsharz.provirent.management.gui;
 
+import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
+import java.io.IOException;
+import java.text.MessageFormat;
 import java.util.Locale;
 import java.util.PropertyResourceBundle;
 import java.util.ResourceBundle;
@@ -42,23 +45,24 @@
 import com.cloudgarden.resource.SWTResourceManager;
 
 import de.hsharz.provirent.objects.Actor;
+import de.hsharz.provirent.persistence.DataBaseException;
 import de.hsharz.provirent.persistence.Database;
-import org.eclipse.swt.widgets.Slider;
+
 /**
-* This code was generated using CloudGarden's Jigloo
-* SWT/Swing GUI Builder, which is free for non-commercial
-* use. If Jigloo is being used commercially (ie, by a corporation,
-* company or business for any purpose whatever) then you
-* should purchase a license for each developer using Jigloo.
-* Please visit www.cloudgarden.com for details.
-* Use of Jigloo implies acceptance of these licensing terms.
-* *************************************
-* A COMMERCIAL LICENSE HAS NOT BEEN PURCHASED
-* for this machine, so Jigloo or this code cannot be used legally
-* for any corporate or commercial purpose.
-* *************************************
-*/
-public class CompositeImage extends AbstractComposite{
+ * This code was generated using CloudGarden's Jigloo
+ * SWT/Swing GUI Builder, which is free for non-commercial
+ * use. If Jigloo is being used commercially (ie, by a corporation,
+ * company or business for any purpose whatever) then you
+ * should purchase a license for each developer using Jigloo.
+ * Please visit www.cloudgarden.com for details.
+ * Use of Jigloo implies acceptance of these licensing terms.
+ * *************************************
+ * A COMMERCIAL LICENSE HAS NOT BEEN PURCHASED
+ * for this machine, so Jigloo or this code cannot be used legally
+ * for any corporate or commercial purpose.
+ * *************************************
+ */
+public class CompositeImage extends AbstractComposite {
 
     {
         //Register as a resource user - SWTResourceManager will
@@ -66,59 +70,93 @@
         SWTResourceManager.registerResourceUser(this);
     }
 
-
     /**
      * Logger for this class
      */
-    private static final Logger logger = Logger
-            .getLogger(CompositeImage.class);
-    
+    private static final Logger logger = Logger.getLogger(CompositeImage.class);
+
     byte[] imagebytedata;
+
+    private Label labelImagesResize;
+
+    private Scale scaleResize;
+
+    private Text textFileUrl;
+
+    private Button buttonSelectFile;
+
+    private Label labelImagesFile;
+
+    private SashForm sashForm1;
+
+    private SashForm sashForm2;
+
+    private Image ideaImage, scaledImage;
+
+    int iy, ix = 0;
+
+    private String currentDir = "";
+
+    private Canvas canvasImg;
+
     private final static int MODE_VIEW = 0;
+
     private final static int MODE_ADD = 1;
-    private Label label2;
-    private Scale scale1;
-    private Canvas canvas1;
-    private Text text1;
-    private Button button1;
-    private Label label1;
+
+    private Composite compositeButtons;
+
+    private Button buttonImageCancel;
+
+    private Button buttonImageSave;
+
+    private Button buttonImageFill;
+
+    private Button buttonImageDelete;
+
+    private Button buttonImageEdit;
+
+    private Button buttonImageNew;
+
     private final static int MODE_EDIT = 2;
-    
-    private Table tableActorsOverview;
-    private TableColumn tableActorsOverview_ColumnID;
-    private TableColumn tableActorsOverview_ColumnFName;
-    private TableColumn tableActorsOverview_ColumnLName;
-    
-    
-    private SashForm sashForm1;
-    private SashForm sashForm2;
-    
-    private Group groupActor;
-    private Group groupActorsOverview;
-    private Group groupActorsDetail;
-    
-    private Text textActorsSearch;
-    private Text textActorsID;
-    private Text textActorsFName;
-    private Text textActorsLName;
-    
-    private Label labelActorsSearch;
-    private Label labelActorsID;
-    private Label labelActorsFName;
-    private Label labelActorsLName;
 
-    protected int mode_actor;
-    
-    private Image ideaImage,scaledImage;
-    int iy,ix = 0;
-    
+    private Table tableImagesOverview;
+
+    private TableColumn tableImagesOverview_ColumnID;
+
+    private TableColumn tableImagesOverview_ColumnName;
+
+    private TableColumn tableImagesOverview_ColumnDescription;
+
+    private Group groupImage;
+
+    private Group groupImagesOverview;
+
+    private Group groupImagesDetail;
+
+    private Text textImagesSearch;
+
+    private Text textImagesID;
+
+    private Text textImagesName;
+
+    private Text textImagesDescription;
+
+    private Label labelImagesSearch;
+
+    private Label labelImagesID;
+
+    private Label labelImagesFName;
+
+    private Label labelImagesLName;
+
+    protected int mode_image;
+
     private StatusLineStyledText statusLine;
 
     private ResourceBundle l;
-    
+
     private Composite parent;
 
-    private String currentDir = "C:/";
     /*
      * ?ndert die Sprache aller Elemente
      * 
@@ -135,53 +173,52 @@
     public void initLanguage(Locale locale) {
 
         l = PropertyResourceBundle.getBundle(
-                "de.hsharz.provirent.management.gui.language.actors", locale);
+                "de.hsharz.provirent.management.gui.language.images", locale);
 
     }
-    
-    
-	/**
-	* Auto-generated main method to display this 
-	* org.eclipse.swt.widgets.Composite inside a new Shell.
-	*/
-	public static void main(String[] args) {
-		showGUI();
-	}
-		
-	/**
-	* Auto-generated method to display this 
-	* org.eclipse.swt.widgets.Composite inside a new Shell.
-	*/
-	public static void showGUI() {
-		Display display = Display.getDefault();
-		Shell shell = new Shell(display);
 
-		CompositeImage p = new CompositeImage(shell,SWT.NONE,null,Locale.getDefault());
-		
-		shell.open();
-		while (!shell.isDisposed()) {
-			if (!display.readAndDispatch())
-				display.sleep();
-		}
-	}
+    /**
+     * Auto-generated main method to display this 
+     * org.eclipse.swt.widgets.Composite inside a new Shell.
+     */
+    public static void main(String[] args) {
+        showGUI();
+    }
 
-	public CompositeImage(Composite p, int style,
-            StatusLineStyledText status, Locale l) {
-	    super(p, style, status, l);
+    /**
+     * Auto-generated method to display this 
+     * org.eclipse.swt.widgets.Composite inside a new Shell.
+     */
+    public static void showGUI() {
+        Display display = Display.getDefault();
+        Shell shell = new Shell(display);
+
+        CompositeImage p = new CompositeImage(shell, SWT.NONE, null, Locale
+                .getDefault());
+
+        shell.open();
+        while (!shell.isDisposed()) {
+            if (!display.readAndDispatch())
+                display.sleep();
+        }
+    }
+
+    public CompositeImage(Composite p, int style, StatusLineStyledText status,
+            Locale l) {
+        super(p, style, status, l);
         parent = p;
         //Statusline wird gestzt
         statusLine = status;
-        
+
         //sprache wird init
         initLanguage(l);
-	    
-	    
-		initGUI();
-	}
 
-	private void initGUI() {
-		{
-		}
+        initGUI();
+    }
+
+    private void initGUI() {
+        {
+        }
         if (logger.isDebugEnabled()) {
             logger.debug("initGUI() - start");
         }
@@ -189,534 +226,900 @@
         this.setLayout(new GridLayout());
         this.setSize(816, 540);
         {
-            groupActor = new Group(this, SWT.NONE);
+            groupImage = new Group(this, SWT.NONE);
             GridLayout groupActorLayout = new GridLayout();
             GridData groupActorLData = new GridData();
             groupActorLData.grabExcessHorizontalSpace = true;
             groupActorLData.grabExcessVerticalSpace = true;
             groupActorLData.horizontalAlignment = GridData.FILL;
             groupActorLData.verticalAlignment = GridData.FILL;
-            groupActor.setLayoutData(groupActorLData);
+            groupImage.setLayoutData(groupActorLData);
             groupActorLayout.makeColumnsEqualWidth = true;
-            groupActor.setLayout(groupActorLayout);
-            groupActor.setText(l.getString("actors.group.label"));
+            groupImage.setLayout(groupActorLayout);
+            groupImage.setText(l.getString("images.group.label"));
             {
-                sashForm2 = new SashForm(groupActor, SWT.NONE);
+                sashForm2 = new SashForm(groupImage, SWT.NONE);
                 GridData sashForm2LData = new GridData();
                 sashForm2LData.verticalAlignment = GridData.FILL;
                 sashForm2LData.horizontalAlignment = GridData.FILL;
                 sashForm2LData.grabExcessHorizontalSpace = true;
                 sashForm2LData.grabExcessVerticalSpace = true;
                 sashForm2.setLayoutData(sashForm2LData);
-                
-               
+
             }
             // init the rest of the layout
-            initActorsOverview();
-            initActorsDetail();
-            refreshActorsOverviewTable(textActorsSearch.getText());
+            initImagesOverview();
+            initImagesDetail();
+            refreshImageOverviewTable(textImagesSearch.getText());
         }
 
         this.layout();
 
-
-        
         if (logger.isDebugEnabled()) {
             logger.debug("initGUI() - end");
         }
-	}
+    }
 
-	
-	private void initActorsOverview()  {	    
-//	  Group Actors Overview 
-        {
-            groupActorsOverview = new Group(sashForm2,SWT.NONE);
-            GridLayout group1Layout = new GridLayout();
-            group1Layout.numColumns = 8;
-            groupActorsOverview.setLayout(group1Layout);
-            groupActorsOverview.setText(l.getString("actors.groupoverview.label"));
-            
-            {// table Actors Overview
-                tableActorsOverview = new Table(
-                    groupActorsOverview,
-                    SWT.SINGLE
-                        | SWT.FULL_SELECTION
-                        | SWT.V_SCROLL | SWT.BORDER);
-                GridData tableActorsOverviewLData = new GridData();
-                tableActorsOverview.setHeaderVisible(true);
-                tableActorsOverview.setLinesVisible(true);
-                tableActorsOverviewLData.horizontalAlignment = GridData.FILL;
-                tableActorsOverviewLData.verticalAlignment = GridData.FILL;
-                tableActorsOverviewLData.horizontalSpan = 8;
-                tableActorsOverviewLData.grabExcessHorizontalSpace = true;
-                tableActorsOverviewLData.grabExcessVerticalSpace = true;
-                tableActorsOverview.setLayoutData(tableActorsOverviewLData);
-                tableActorsOverview.addFocusListener(new FocusAdapter() {
-                        public void focusLost(FocusEvent evt) {
-                            System.out
-                                .println("tableActorsOverview.focusLost, event="
-                                    + evt);
-                        }
-                        public void focusGained(FocusEvent evt) {
-                            System.out
-                                .println("tableActorsOverview.focusGained, event="
-                                    + evt);
-                        }
-                    });
-                tableActorsOverview.addSelectionListener(new SelectionAdapter() {
-                        public void widgetSelected(SelectionEvent evt) {
-                            if (logger.isDebugEnabled()) {
-                                logger
-                                    .debug("widgetSelected(SelectionEvent evt = "
-                                        + evt
-                                        + ") - start");
-                            }
+    private void initImagesOverview() {
+        //	  Group Images Overview 
 
-                            int index = tableActorsOverview
-                                .getSelectionIndex();
+        groupImagesOverview = new Group(sashForm2, SWT.NONE);
+        GridLayout group1Layout = new GridLayout();
+        group1Layout.numColumns = 8;
+        groupImagesOverview.setLayout(group1Layout);
+        groupImagesOverview.setText(l.getString("images.groupoverview.label"));
 
-                            System.out.println("Table select. id: "
-                                + index
-                                + " TableItem:"
-                                + tableActorsOverview.getItem(index)
-                                + " id: "
-                                + tableActorsOverview.getItem(index)
-                                    .getText(0));
+        {// table Images Overview
+            tableImagesOverview = new Table(groupImagesOverview, SWT.SINGLE
+                    | SWT.FULL_SELECTION | SWT.V_SCROLL | SWT.BORDER);
+            GridData tableImagesOverviewLData = new GridData();
+            tableImagesOverview.setHeaderVisible(true);
+            tableImagesOverview.setLinesVisible(true);
+            tableImagesOverviewLData.horizontalAlignment = GridData.FILL;
+            tableImagesOverviewLData.verticalAlignment = GridData.FILL;
+            tableImagesOverviewLData.horizontalSpan = 8;
+            tableImagesOverviewLData.grabExcessHorizontalSpace = true;
+            tableImagesOverviewLData.grabExcessVerticalSpace = true;
+            tableImagesOverview.setLayoutData(tableImagesOverviewLData);
+            tableImagesOverview.addSelectionListener(new SelectionAdapter() {
+                public void widgetSelected(SelectionEvent evt) {
+                    if (logger.isDebugEnabled()) {
+                        logger.debug("widgetSelected(SelectionEvent evt = "
+                                + evt + ") - start");
+                    }
 
-                            //es wurde ein Element aus Tabelle ausgewaehlt jetzt muss die
-                            //Detailansicht aktualisiert werden
-                            refreshActorsDetail(tableActorsOverview.getItem(index)
-                                                              .getText(0));
+                    int index = tableImagesOverview.getSelectionIndex();
 
-                            if (logger.isDebugEnabled()) {
-                                logger
-                                    .debug("widgetSelected(SelectionEvent) - end");
-                            }
-                        }
-                    });
-                {
-                    tableActorsOverview_ColumnID = new TableColumn(
-                        tableActorsOverview,
-                        SWT.CENTER);
-                    tableActorsOverview_ColumnID.setText(l
-                        .getString("actors.groupoverview.columnid"));
-                    tableActorsOverview_ColumnID.setWidth(40);
+                    //es wurde ein Element aus Tabelle ausgewaehlt jetzt muss die
+                    //Detailansicht aktualisiert werden
+                    refreshImagesDetail(tableImagesOverview.getItem(index)
+                            .getText(0));
+
+                    if (logger.isDebugEnabled()) {
+                        logger.debug("widgetSelected(SelectionEvent) - end");
+                    }
                 }
-                {
-                    tableActorsOverview_ColumnFName = new TableColumn(
-                        tableActorsOverview,
-                        SWT.CENTER);
-                    tableActorsOverview_ColumnFName.setText(l
-                        .getString("actors.groupoverview.columnfirstname"));
-                    tableActorsOverview_ColumnFName.setWidth(80);
-                }
-                {
-                    tableActorsOverview_ColumnLName = new TableColumn(
-                        tableActorsOverview,
-                        SWT.CENTER);
-                    tableActorsOverview_ColumnLName.setText(l
-                        .getString("actors.groupoverview.columnlastname"));
-                    tableActorsOverview_ColumnLName.setWidth(80);
-                }
-            }
-            // table Actors Overview
-            // Search
+            });
             {
-                //label for Search
-                labelActorsSearch = new Label(groupActorsOverview, SWT.NONE);
-                labelActorsSearch.setText(l
-                        .getString("actors.groupoverview.searchlabel")
-                        + ":");
-                GridData label2LData = new GridData();
-                label2LData.horizontalSpan = 3;
-                labelActorsSearch.setLayoutData(label2LData);
+                tableImagesOverview_ColumnID = new TableColumn(
+                        tableImagesOverview, SWT.CENTER);
+                tableImagesOverview_ColumnID.setText(l
+                        .getString("images.groupoverview.columnid"));
+                tableImagesOverview_ColumnID.setWidth(40);
 
-                //text Search
-                textActorsSearch = new Text(groupActorsOverview, SWT.BORDER);
-                GridData text2LData = new GridData();
-                textActorsSearch.addFocusListener(new FocusAdapter() {
-                    public void focusLost(FocusEvent evt) {
-                        if (logger.isDebugEnabled()) {
-                            logger.debug("focusLost(FocusEvent evt = " + evt + " "
-                                    + textActorsSearch.getText() + ") - start");
-                        }
+                tableImagesOverview_ColumnName = new TableColumn(
+                        tableImagesOverview, SWT.CENTER);
+                tableImagesOverview_ColumnName.setText(l
+                        .getString("images.groupoverview.name"));
+                tableImagesOverview_ColumnName.setWidth(80);
 
-                        refreshActorsOverviewTable(textActorsSearch.getText());
+                tableImagesOverview_ColumnDescription = new TableColumn(
+                        tableImagesOverview, SWT.CENTER);
+                tableImagesOverview_ColumnDescription.setText(l
+                        .getString("images.groupoverview.description"));
+                tableImagesOverview_ColumnDescription.setWidth(80);
 
-                        if (logger.isDebugEnabled()) {
-                            logger.debug("focusLost(FocusEvent) - end");
-                        }
+            }
+        }
+        // table Images Overview
+        // Search
+        {
+            //label for Search
+            labelImagesSearch = new Label(groupImagesOverview, SWT.NONE);
+            labelImagesSearch.setText(l
+                    .getString("images.groupoverview.searchlabel")
+                    + ":");
+            GridData labelImagesResizeLData = new GridData();
+            labelImagesResizeLData.horizontalSpan = 3;
+            labelImagesSearch.setLayoutData(labelImagesResizeLData);
+
+            //text Search
+            textImagesSearch = new Text(groupImagesOverview, SWT.BORDER);
+            GridData text2LData = new GridData();
+            textImagesSearch.addFocusListener(new FocusAdapter() {
+                public void focusLost(FocusEvent evt) {
+                    if (logger.isDebugEnabled()) {
+                        logger.debug("focusLost(FocusEvent evt = " + evt + " "
+                                + textImagesSearch.getText() + ") - start");
                     }
-                });
-                textActorsSearch.addListener(SWT.DefaultSelection, new Listener() {
-                    public void handleEvent(Event e) {
-                        if (logger.isDebugEnabled()) {
-                            logger.debug("handleEvent(Event e = " + e + " "
-                                    + textActorsSearch.getText() + ") - start");
-                        }
 
-                        refreshActorsOverviewTable(textActorsSearch.getText());
+                    refreshImageOverviewTable(textImagesSearch.getText());
 
-                        if (logger.isDebugEnabled()) {
-                            logger.debug("handleEvent(Event) - end");
-                        }
+                    if (logger.isDebugEnabled()) {
+                        logger.debug("focusLost(FocusEvent) - end");
                     }
-                });
-                text2LData.horizontalAlignment = GridData.FILL;
-                text2LData.horizontalSpan = 5;
-                text2LData.grabExcessHorizontalSpace = true;
-                textActorsSearch.setLayoutData(text2LData);
-            }// Search                    
-        }
-	}
-	
-	private void initActorsDetail()  {	    
-	    // Group Actors Detail
+                }
+            });
+            textImagesSearch.addListener(SWT.DefaultSelection, new Listener() {
+                public void handleEvent(Event e) {
+                    if (logger.isDebugEnabled()) {
+                        logger.debug("handleEvent(Event e = " + e + " "
+                                + textImagesSearch.getText() + ") - start");
+                    }
+
+                    refreshImageOverviewTable(textImagesSearch.getText());
+
+                    if (logger.isDebugEnabled()) {
+                        logger.debug("handleEvent(Event) - end");
+                    }
+                }
+            });
+            text2LData.horizontalAlignment = GridData.FILL;
+            text2LData.horizontalSpan = 5;
+            text2LData.grabExcessHorizontalSpace = true;
+            textImagesSearch.setLayoutData(text2LData);
+        }// Search                    
+
+    }
+
+    private void initImagesDetail() {
+        // Group Images Detail
         {
-            groupActorsDetail = new Group(sashForm2, SWT.NONE);
+            groupImagesDetail = new Group(sashForm2, SWT.NONE);
             GridLayout group2Layout = new GridLayout();
             GridData group2LData = new GridData();
             group2Layout.verticalSpacing = 15;
             group2Layout.numColumns = 6;
-            groupActorsDetail.setText(l.getString("actors.groupdetail.label"));   
+            groupImagesDetail.setText(l.getString("images.groupdetail.label"));
             FormData formData = new FormData();
-            groupActorsDetail.setLayout(group2Layout);
+            groupImagesDetail.setLayout(group2Layout);
             formData.right = new FormAttachment(100, 100, -5);
             formData.top = new FormAttachment(0, 100, 5);
             formData.bottom = new FormAttachment(100, 100, -5);
-            groupActorsDetail.setLayoutData(formData);
+            groupImagesDetail.setLayoutData(formData);
+
+            // labels and buttons for detail
+
+            labelImagesID = new Label(groupImagesDetail, SWT.NONE);
+            labelImagesID.setText(l.getString("images.groupdetail.labelid")
+                    + ":");
+            labelImagesID.setSize(125, 15);
+            GridData formData2 = new GridData();
+            formData2.widthHint = 125;
+            formData2.heightHint = 15;
+            formData2.horizontalSpan = 2;
+            labelImagesID.setLayoutData(formData2);
         }
-        	// labels and buttons for detail
-        	{
-        	    labelActorsID = new Label(groupActorsDetail, SWT.NONE);
-        	    labelActorsID.setText(l
-        	            .getString("actors.groupdetail.labelid")
-        	            + ":");
-        	    labelActorsID.setSize(125, 15);
-        	    GridData formData2 = new GridData();
-        	    formData2.widthHint = 125;
-        	    formData2.heightHint = 15;
-        	    formData2.horizontalSpan = 2;
-        	    labelActorsID.setLayoutData(formData2);
-        	}
-        	{
-        	    textActorsID = new Text(
-        	            groupActorsDetail,
-        	            SWT.READ_ONLY | SWT.BORDER);
-        	    GridData text1LData1 = new GridData();
-        	    text1LData1.horizontalAlignment = GridData.FILL;
-        	    text1LData1.heightHint = 13;
-        	    text1LData1.horizontalSpan = 4;
-        	    text1LData1.grabExcessHorizontalSpace = true;
-        	    textActorsID.setLayoutData(text1LData1);
-        	}
-        	{
-                labelActorsFName = new Label(
-                    groupActorsDetail,
-                    SWT.NONE);
-                labelActorsFName.setText(l
-                    .getString("actors.groupdetail.labelfirstname")
+        {
+            textImagesID = new Text(groupImagesDetail, SWT.READ_ONLY
+                    | SWT.BORDER);
+            GridData text1LData1 = new GridData();
+            text1LData1.horizontalAlignment = GridData.FILL;
+            text1LData1.heightHint = 13;
+            text1LData1.horizontalSpan = 4;
+            text1LData1.grabExcessHorizontalSpace = true;
+            textImagesID.setLayoutData(text1LData1);
+        }
+        {
+            labelImagesFName = new Label(groupImagesDetail, SWT.NONE);
+            labelImagesFName.setText(l
+                    .getString("images.groupdetail.labelname")
                     + ":");
-                labelActorsFName.setSize(125, 15);
-                GridData labelActorNameLData = new GridData();
-                labelActorNameLData.widthHint = 125;
-                labelActorNameLData.heightHint = 15;
-                labelActorNameLData.horizontalSpan = 2;
-                labelActorsFName
-                    .setLayoutData(labelActorNameLData);
-            }
-            {
-        	    textActorsFName = new Text(groupActorsDetail,
-        	            SWT.READ_ONLY | SWT.BORDER);
-        	    GridData text1LData2 = new GridData();
-        	    text1LData2.horizontalAlignment = GridData.FILL;
-        	    text1LData2.heightHint = 13;
-        	    text1LData2.horizontalSpan = 4;
-        	    text1LData2.grabExcessHorizontalSpace = true;
-        	    textActorsFName.setLayoutData(text1LData2);
-        	}
-            {
-        	    labelActorsLName = new Label(groupActorsDetail,
-        	            SWT.NONE);
-        	    labelActorsLName.setText(l
-        	            .getString("actors.groupdetail.labellastname")
-        	            + ":");
-        	    labelActorsLName.setSize(125, 15);
-        	    GridData label1LData1 = new GridData();
-        	    label1LData1.widthHint = 125;
-        	    label1LData1.heightHint = 15;
-        	    label1LData1.horizontalSpan = 2;
-        	    labelActorsLName.setLayoutData(label1LData1);
-        	}
-        	{
-        	    textActorsLName = new Text(groupActorsDetail,
-        	            SWT.READ_ONLY | SWT.BORDER);
-        	    GridData text1LData3 = new GridData();
-        	    text1LData3.horizontalAlignment = GridData.FILL;
-        	    text1LData3.heightHint = 13;
-        	    text1LData3.horizontalSpan = 4;
-        	    text1LData3.grabExcessHorizontalSpace = true;
-        	    textActorsLName.setLayoutData(text1LData3);
-        	}// label and buttons for detail      
-            {
-                label1 = new Label(groupActorsDetail, SWT.NONE);
-                label1.setText(l.getString("actors.groupdetail.labellastname")
+            labelImagesFName.setSize(125, 15);
+            GridData labelActorNameLData = new GridData();
+            labelActorNameLData.widthHint = 125;
+            labelActorNameLData.heightHint = 15;
+            labelActorNameLData.horizontalSpan = 2;
+            labelImagesFName.setLayoutData(labelActorNameLData);
+        }
+        {
+            textImagesName = new Text(groupImagesDetail, SWT.READ_ONLY
+                    | SWT.BORDER);
+            GridData text1LData2 = new GridData();
+            text1LData2.horizontalAlignment = GridData.FILL;
+            text1LData2.heightHint = 13;
+            text1LData2.horizontalSpan = 4;
+            text1LData2.grabExcessHorizontalSpace = true;
+            textImagesName.setLayoutData(text1LData2);
+        }
+        {
+            labelImagesLName = new Label(groupImagesDetail, SWT.NONE);
+            labelImagesLName.setText(l
+                    .getString("images.groupdetail.labeldescription")
                     + ":");
-                label1.setSize(125, 15);
-                GridData label1LData = new GridData();
-                label1LData.widthHint = 125;
-                label1LData.heightHint = 15;
-                label1LData.horizontalSpan = 2;
-                label1.setLayoutData(label1LData);
-            }
+            labelImagesLName.setSize(125, 15);
+            GridData labelImagesFileLData1 = new GridData();
+            labelImagesFileLData1.widthHint = 125;
+            labelImagesFileLData1.heightHint = 15;
+            labelImagesFileLData1.horizontalSpan = 2;
+            labelImagesFileLData1.verticalAlignment = GridData.BEGINNING;
+            labelImagesLName.setLayoutData(labelImagesFileLData1);
+        }
+        {
+            textImagesDescription = new Text(groupImagesDetail, SWT.MULTI
+                    | SWT.V_SCROLL | SWT.BORDER);
+            GridData text1LData3 = new GridData();
+            text1LData3.horizontalAlignment = GridData.FILL;
+            text1LData3.heightHint = 36;
+            text1LData3.horizontalSpan = 4;
+            text1LData3.grabExcessHorizontalSpace = true;
+            textImagesDescription.setLayoutData(text1LData3);
+        }// label and buttons for detail      
+        {
+            labelImagesFile = new Label(groupImagesDetail, SWT.NONE);
+            labelImagesFile.setText(l
+                    .getString("images.groupdetail.labelselectfile")
+                    + ":");
+            labelImagesFile.setSize(125, 15);
+            GridData labelImagesFileLData = new GridData();
+            labelImagesFileLData.widthHint = 125;
+            labelImagesFileLData.heightHint = 15;
+            labelImagesFileLData.horizontalSpan = 2;
+            labelImagesFile.setLayoutData(labelImagesFileLData);
+        }
+        {
+            textFileUrl = new Text(groupImagesDetail, SWT.NONE);
+            textFileUrl.setText(l
+                    .getString("images.groupdetail.labelselecteddatabase"));
+            textFileUrl.setEditable(false);
+            GridData text1LData = new GridData();
+            text1LData.widthHint = 105;
+            text1LData.heightHint = 15;
+            text1LData.horizontalSpan = 2;
+            textFileUrl.setLayoutData(text1LData);
+        }
+        {
+            //Button for selecting a new image file from filesystem
+            buttonSelectFile = new Button(groupImagesDetail, SWT.PUSH
+                    | SWT.CENTER);
+            buttonSelectFile.setText(l
+                    .getString("images.groupdetail.buttonselectfile"));
+            currentDir = l.getString("images.groupdetail.fileselect.title");
+            buttonSelectFile.setEnabled(false);
+
+            GridData buttonSelectFileLData = new GridData();
+            buttonSelectFile.addSelectionListener(new SelectionAdapter() {
+                //if button is pressed
+                public void widgetSelected(SelectionEvent evt) {
+
+                    String[] filterExtensions = { "*.gif", "*.jpg", "*.*" };
+                    FileDialog fileDialog = new FileDialog(getShell(), SWT.OPEN);
+                    fileDialog.setText(currentDir);
+                    fileDialog
+                            .setFilterPath(l
+                                    .getString("images.groupdetail.fileselect.filterpath"));
+
+                    fileDialog.setFilterExtensions(filterExtensions);
+                    //open the dialog and get the returnvalue
+                    String selectedFile = fileDialog.open();
+                    if (selectedFile != null) {
+
+                        scaledImage = ideaImage = new Image(getDisplay(),
+                                selectedFile);
+
+                        canvasImg.redraw();
+                        textFileUrl.setText(fileDialog.getFilterPath()
+                                + System.getProperty("file.separator")
+                                + fileDialog.getFileName());
+
+                        //save the selected dir 
+                        currentDir = fileDialog.getFilterPath();
+
+                        //set the resizescale enable
+                        scaleResize.setEnabled(true);
+                        scaleResize.setSelection(100);
+                        scaleResize.setToolTipText(l
+                                .getString("images.groupdetail.resize.size")
+                                + ": 100%");
+
+                        //reset and resize the scrollbars
+                        resetScrollBars();
+                        resizeScrollBars();
+                    }
+                }
+            });
+            buttonSelectFileLData.horizontalAlignment = GridData.FILL;
+            buttonSelectFileLData.grabExcessHorizontalSpace = true;
+            buttonSelectFileLData.horizontalSpan = 2;
+            buttonSelectFile.setLayoutData(buttonSelectFileLData);
+
+            canvasImg = new Canvas(groupImagesDetail, SWT.NO_REDRAW_RESIZE
+                    | SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER);
+            GridData canvasImgLData = new GridData();
+            canvasImgLData.grabExcessHorizontalSpace = true;
+            canvasImgLData.horizontalAlignment = GridData.FILL;
+            canvasImgLData.horizontalSpan = 6;
+            canvasImgLData.grabExcessVerticalSpace = true;
+            canvasImgLData.verticalAlignment = GridData.FILL;
+            canvasImg.setLayoutData(canvasImgLData);
+            canvasImg.addPaintListener(new PaintListener() {
+                public void paintControl(PaintEvent e) {
+                    if (ideaImage != null && !ideaImage.isDisposed()) {
+                        paintImage(e);
+                        //e.gc.drawImage(scaledImage, 0, 0);
+                    }
+                }
+            });
+
+            // Set up the image canvas scroll bars.
+            ScrollBar horizontal = canvasImg.getHorizontalBar();
+            horizontal.setVisible(true);
+            horizontal.setMinimum(0);
+            horizontal.setEnabled(false);
+            horizontal.addSelectionListener(new SelectionAdapter() {
+                public void widgetSelected(SelectionEvent event) {
+                    scrollHorizontally((ScrollBar) event.widget);
+                }
+            });
+            ScrollBar vertical = canvasImg.getVerticalBar();
+            vertical.setVisible(true);
+            vertical.setMinimum(0);
+            vertical.setEnabled(false);
+            vertical.addSelectionListener(new SelectionAdapter() {
+                public void widgetSelected(SelectionEvent event) {
+                    scrollVertically((ScrollBar) event.widget);
+                }
+            });
+
+        }
+        {
+            labelImagesResize = new Label(groupImagesDetail, SWT.NONE);
+            labelImagesResize.setText(l
+                    .getString("images.groupdetail.labelresize")
+                    + ":");
+            labelImagesResize.setSize(125, 15);
+            GridData labelImagesResizeLData1 = new GridData();
+            labelImagesResizeLData1.widthHint = 125;
+            labelImagesResizeLData1.heightHint = 15;
+            labelImagesResizeLData1.horizontalSpan = 2;
+            labelImagesResize.setLayoutData(labelImagesResizeLData1);
+        }
+        {
+            scaleResize = new Scale(groupImagesDetail, SWT.NONE);
+            GridData scaleResizeLData = new GridData();
+            scaleResize.setEnabled(false);
+            scaleResize.addSelectionListener(new SelectionAdapter() {
+                public void widgetSelected(SelectionEvent evt) {
+
+                    //set new tooltip, so User can see the current size
+                    scaleResize.setToolTipText(l
+                            .getString("images.groupdetail.resize.size")
+                            + ": " + scaleResize.getSelection() + "%");
+
+                    //skale the image
+                    float scaleFaktor = (float) scaleResize.getSelection() / 100;
+                    if (scaleFaktor < 0.01)
+                        scaleFaktor = (float) 0.01;
+                    int newwidth = (int) (ideaImage.getBounds().width * scaleFaktor);
+                    int newheight = (int) (ideaImage.getBounds().height * scaleFaktor);
+
+                    ImageData newdata = ideaImage.getImageData().scaledTo(
+                            newwidth, newheight);
+
+                    scaledImage = new Image(getDisplay(), newdata);
+
+                    //redraw the image
+                    canvasImg.redraw();
+                    resizeScrollBars();
+                }
+            });
+            scaleResizeLData.grabExcessHorizontalSpace = true;
+            scaleResizeLData.horizontalAlignment = GridData.FILL;
+            scaleResizeLData.horizontalSpan = 4;
+            scaleResize.setLayoutData(scaleResizeLData);
+
+            scaleResize.setMaximum(200);
+            scaleResize.setMinimum(1);
+            scaleResize.setIncrement(5);
+            scaleResize.setPageIncrement(5);
+        }
+        {
+            compositeButtons = new Composite(groupImagesDetail, SWT.EMBEDDED);
+            GridLayout composite2Layout = new GridLayout();
+            composite2Layout.numColumns = 6;
+            GridData composite2LData = new GridData();
+            compositeButtons.setLayout(composite2Layout);
+            composite2LData.verticalAlignment = GridData.END;
+            composite2LData.horizontalAlignment = GridData.CENTER;
+            composite2LData.widthHint = 391;
+            composite2LData.heightHint = 35;
+            composite2LData.horizontalSpan = 6;
+            composite2LData.grabExcessHorizontalSpace = true;
+            compositeButtons.setLayoutData(composite2LData);
             {
-                text1 = new Text(groupActorsDetail, SWT.NONE);
-                text1.setText("text1");
-                text1.setEditable(false);
-                GridData text1LData = new GridData();
-                text1LData.widthHint = 105;
-                text1LData.heightHint = 15;
-                text1LData.horizontalSpan = 2;
-                text1.setLayoutData(text1LData);
-            }
-            {
-                button1 = new Button(groupActorsDetail, SWT.PUSH | SWT.CENTER);
-                button1.setText("Datei");
-                GridData button1LData = new GridData();
-                button1.addSelectionListener(new SelectionAdapter() {
+                buttonImageNew = new Button(compositeButtons, SWT.PUSH
+                        | SWT.CENTER);
+                buttonImageNew.setText(l.getString("button.new"));
+                buttonImageNew.addSelectionListener(new SelectionAdapter() {
                     public void widgetSelected(SelectionEvent evt) {
-                        String[] filterExtensions = { "*.gif", "*.jpg", "*.*" };
-                        FileDialog fileDialog = new FileDialog(
-                            getShell(),
-                            SWT.OPEN);
-                        fileDialog.setText("FileDialog Demo");
-                        fileDialog.setFilterPath("C:/");
 
-                        fileDialog.setFilterExtensions(filterExtensions);
-                        String selectedFile = fileDialog.open();
-                        if (selectedFile != null) {
-                            scaledImage = ideaImage = new Image(
-                                getDisplay(),
-                                selectedFile);
-                            canvas1.redraw();
-                            text1.setText(fileDialog.getFileName());
-                            scale1.setEnabled(true);
-                            resetScrollBars();
-                            resizeScrollBars();
-                        }
+                        mode_image = ManagementGui.MODE_ADD;
+
+                        textImagesID.setText("");
+                        textImagesName.setText("");
+                        textImagesDescription.setText("");
+                        textImagesName.setEditable(true);
+                        textImagesDescription.setEditable(true);
+                        buttonSelectFile.setEnabled(true);
+
+                        buttonImageCancel.setEnabled(true);
+                        buttonImageSave.setEnabled(true);
+                        buttonImageNew.setEnabled(false);
+                        buttonImageEdit.setEnabled(false);
+                        buttonImageDelete.setEnabled(false);
+
+                        textImagesSearch.setEditable(false);
+                        tableImagesOverview.setEnabled(false);
+
                     }
                 });
-                button1LData.horizontalAlignment = GridData.FILL;
-                button1LData.grabExcessHorizontalSpace = true;
-                button1LData.horizontalSpan = 2;
-                button1.setLayoutData(button1LData);
 
-                canvas1 = new Canvas(groupActorsDetail, SWT.NO_REDRAW_RESIZE
-                    | SWT.H_SCROLL
-                    | SWT.V_SCROLL
-                    | SWT.BORDER);
-                GridData canvas1LData = new GridData();
-                canvas1LData.grabExcessHorizontalSpace = true;
-                canvas1LData.horizontalAlignment = GridData.FILL;
-                canvas1LData.horizontalSpan = 6;
-                canvas1LData.grabExcessVerticalSpace = true;
-                canvas1LData.verticalAlignment = GridData.FILL;
-                canvas1.setLayoutData(canvas1LData);
-                canvas1.addPaintListener(new PaintListener() {
-                    public void paintControl(PaintEvent e) {
-                        if (ideaImage != null && !ideaImage.isDisposed()) {
-                            paintImage(e);
-                            //e.gc.drawImage(scaledImage, 0, 0);
-                        }
+                buttonImageEdit = new Button(compositeButtons, SWT.PUSH
+                        | SWT.CENTER);
+                buttonImageEdit.setText(l.getString("button.edit"));
+                buttonImageEdit.setEnabled(false);
+                buttonImageEdit.addSelectionListener(new SelectionAdapter() {
+                    public void widgetSelected(SelectionEvent evt) {
+
+                        mode_image = ManagementGui.MODE_EDIT;
+
+                        textImagesID.setEditable(false);
+                        textImagesName.setText("");
+                        textImagesName.setEditable(true);
+                        textImagesDescription.setText("");
+                        textImagesDescription.setEditable(true);
+                        textImagesName.setFocus();
+
+                        buttonImageCancel.setEnabled(true);
+                        buttonImageSave.setEnabled(true);
+                        buttonImageNew.setEnabled(false);
+                        buttonImageEdit.setEnabled(false);
+                        buttonImageDelete.setEnabled(false);
+
+                        tableImagesOverview.setEnabled(false);
+                        textImagesSearch.setEnabled(false);
+
                     }
                 });
 
-                // Set up the image canvas scroll bars.
-                ScrollBar horizontal = canvas1.getHorizontalBar();
-                horizontal.setVisible(true);
-                horizontal.setMinimum(0);
-                horizontal.setEnabled(false);
-                horizontal.addSelectionListener(new SelectionAdapter() {
-                    public void widgetSelected(SelectionEvent event) {
-                        scrollHorizontally((ScrollBar)event.widget);
+                buttonImageDelete = new Button(compositeButtons, SWT.PUSH
+                        | SWT.CENTER);
+                buttonImageDelete.setText(l.getString("button.delete"));
+                buttonImageDelete.setEnabled(false);
+                buttonImageDelete.addSelectionListener(new SelectionAdapter() {
+                    public void widgetSelected(SelectionEvent evt) {
+                        logger.debug("buttonImageDelete.widgetSelected, event="
+                                + evt);
+
+                        String msg = MessageFormat
+                                .format(
+                                        l
+                                                .getString("images.groupdetail.deletebutton.question.text"),
+                                        new Object[] { textImagesName.getText() });
+
+                        int question = showMsg(
+                                msg,
+                                l
+                                        .getString("images.groupdetail.deletebutton.question.header"),
+                                SWT.ICON_QUESTION | SWT.YES | SWT.NO);
+
+                        if (question != SWT.YES) {
+                            return;
+                        }
+
+                        de.hsharz.provirent.objects.Image o = new de.hsharz.provirent.objects.Image();
+                        o.setImageId(new Integer(Integer.parseInt(textImagesID
+                                .getText())));
+                        o.setImageFileName(textImagesName.getText());
+                        o.setImageFileDescription(textImagesDescription
+                                .getText());
+
+                        /**@todo BildDatei holen */
+                        /*
+                         try {
+                         //object speichern
+                         // Fehlerbehandlung
+                         Database.deleteObject(o);
+
+                         //?bersichtsTabelle aktualisieren
+                         refreshImageOverviewTable(textImageSearch
+                         .getText());
+
+                         //Detailansicht leeren
+                         textImageID.setText("");
+                         textImageFName.setText("");
+                         textImageLName.setText("");
+
+                         //in Tabelle n?chsten ausw?hlen
+                         try {
+                         tableImageOverview.select(0);
+                         } catch (Exception ex) {
+                         }
+
+                         //Statusline Nachricht sezten
+                         statusLine
+                         .setStatus(
+                         1,
+                         l
+                         .getString("images.groupdetail.deletebutton.newok"));
+
+                         } catch (DataBaseException e) {
+                         if (e.getMessage().equalsIgnoreCase("1")) {
+                         //Fehler beim Speichern des Objectes
+
+                         statusLine
+                         .setStatus(
+                         3,
+                         l
+                         .getString("images.groupdetail.deletebutton.errorsave"));
+                         showMsg(
+                         l
+                         .getString("images.groupdetail.deletebutton.errorsave"),
+                         l.getString("error"),
+                         SWT.ICON_ERROR | SWT.OK);
+
+                         } else if (e.getMessage().equalsIgnoreCase("2")) {
+                         //fehler beim db aufbau
+                         statusLine
+                         .setStatus(
+                         3,
+                         l
+                         .getString("images.groupdetail.deletebutton.errordb"));
+                         showMsg(
+                         l
+                         .getString("images.groupdetail.deletebutton.errordb"),
+                         l.getString("error"),
+                         SWT.ICON_ERROR | SWT.OK);
+
+                         } else {
+                         //@todo
+                         e.printStackTrace();
+                         }
+
+                         }
+                         */
+
                     }
                 });
-                ScrollBar vertical = canvas1.getVerticalBar();
-                vertical.setVisible(true);
-                vertical.setMinimum(0);
-                vertical.setEnabled(false);
-                vertical.addSelectionListener(new SelectionAdapter() {
-                    public void widgetSelected(SelectionEvent event) {
-                        scrollVertically((ScrollBar)event.widget);
-                    }
-                });
-
             }
             {
-                label2 = new Label(groupActorsDetail, SWT.NONE);
-                label2.setText(l.getString("actors.groupdetail.labellastname")
-                    + ":");
-                label2.setSize(125, 15);
-                GridData label2LData1 = new GridData();
-                label2LData1.widthHint = 125;
-                label2LData1.heightHint = 15;
-                label2LData1.horizontalSpan = 2;
-                label2.setLayoutData(label2LData1);
+                buttonImageFill = new Button(compositeButtons, SWT.PUSH
+                        | SWT.CENTER);
+                GridData buttonActorFillLData = new GridData();
+                buttonImageFill.setVisible(false);
+                buttonImageFill.setEnabled(false);
+                buttonActorFillLData.widthHint = 30;
+                buttonActorFillLData.heightHint = 23;
+                buttonImageFill.setLayoutData(buttonActorFillLData);
             }
             {
-                scale1 = new Scale(groupActorsDetail, SWT.NONE);
-                GridData scale1LData = new GridData();
-                scale1.setEnabled(false);
-                scale1.addSelectionListener(new SelectionAdapter() {
+                buttonImageSave = new Button(compositeButtons, SWT.PUSH
+                        | SWT.CENTER);
+                buttonImageSave.setText(l.getString("button.save"));
+                buttonImageSave.setEnabled(false);
+                buttonImageSave.addSelectionListener(new SelectionAdapter() {
                     public void widgetSelected(SelectionEvent evt) {
-                        //System.out.println("scale1.widgetSelected, event="
-                        //    + evt);
+                        logger.warn("buttonImageSave.widgetSelected, event="
+                                + evt);
 
-                        float scaleFaktor = (float) scale1.getSelection() / 100;
-                        int newwidth = (int) (ideaImage.getBounds().width * scaleFaktor);
-                        int newheight = (int) (ideaImage.getBounds().height * scaleFaktor);
+                        if (scaledImage == null) {
+                            statusLine
+                                    .setStatus(
+                                            StatusLineStyledText.STATUS_WARN,
+                                            l
+                                                    .getString("images.groupdetail.savebutton.warnnoimage"));
+                            return;
+                        }
 
-                        ImageData newdata = ideaImage.getImageData().scaledTo(
-                            newwidth,
-                            newheight);
+                        //testen ob Name leer ist
+                        if (textImagesName.getText().trim()
+                                .equalsIgnoreCase("")
+                                || textImagesDescription.getText().trim()
+                                        .equalsIgnoreCase("")) {
 
-                        scaledImage = new Image(getDisplay(), newdata);
-                        canvas1.redraw();
+                            showMsg(
+                                    l
+                                            .getString("images.groupdetail.savebutton.warn.noname.msg"),
+                                    l
+                                            .getString("images.groupdetail.savebutton.warn.noname.title"),
+                                    SWT.ICON_WARNING | SWT.YES);
 
-                        ImageLoader imageLoader = new ImageLoader();
-                        imageLoader.data = new ImageData[] { newdata };
-                        ByteArrayOutputStream bos = new ByteArrayOutputStream();
-                        imageLoader.save(bos, SWT.IMAGE_GIF);
+                            return;
+                        }
 
-                        imagebytedata = bos.toByteArray();
-                        resizeScrollBars();
+                        //testen welcher mode
+
+                        if (mode_image == ManagementGui.MODE_ADD) {
+
+                            /**
+                             * @todo eine Exception bekommen wieder leider NOCH nicht mit
+                             * d.h. es muss noch ein r?ckgabewert kommen oder eine Exception 
+                             * ?bermitteln werden (aus der DB Klasse)
+                             */
+                            //neues Objekt erzeugen
+                            de.hsharz.provirent.objects.Image tmp = new de.hsharz.provirent.objects.Image();
+                            tmp.setImageFileName(textImagesName.getText());
+                            tmp.setImageFileDescription(textImagesDescription
+                                    .getText());
+
+                            ImageLoader imageLoader = new ImageLoader();
+                            imageLoader.data = new ImageData[] { scaledImage
+                                    .getImageData() };
+                            ByteArrayOutputStream bos = new ByteArrayOutputStream();
+                            imageLoader.save(bos, SWT.IMAGE_GIF);
+
+                            tmp.setImageFile(bos.toByteArray());
+
+                            try {
+                                bos.close();
+                            } catch (IOException e1) {
+                                logger
+                                        .warn(
+                                                "Fehler beim schlie?en des BytearrayOutputstream",
+                                                e1);
+                            }
+
+                            try {
+                                //object speichern
+                                // Fehlerbehandlung
+                                Object o = Database.saveObject(tmp);
+
+                                // in ?bersichtstabelle einf?gen
+                                insertIntoImagesOverviewTable((de.hsharz.provirent.objects.Image) o);
+                                textImagesID
+                                        .setText(((de.hsharz.provirent.objects.Image) o)
+                                                .getImageId()
+                                                + "");
+
+                                //Statusline Nachricht sezten
+                                statusLine
+                                        .setStatus(
+                                                StatusLineStyledText.STATUS_INFO,
+                                                l
+                                                        .getString("images.groupdetail.savebutton.newok"));
+
+                            } catch (DataBaseException e) {
+                                if (e.getMessage().equalsIgnoreCase("1")) {
+                                    //Fehler beim Speichern des Objectes
+
+                                    statusLine
+                                            .setStatus(
+                                                    3,
+                                                    l
+                                                            .getString("images.groupdetail.savebutton.errorsave"));
+                                    showMsg(
+                                            l
+                                                    .getString("images.groupdetail.savebutton.errorsave"),
+                                            "Fehler", SWT.ICON_ERROR | SWT.OK);
+
+                                } else if (e.getMessage().equalsIgnoreCase("2")) {
+                                    //fehler beim db aufbau
+                                    statusLine
+                                            .setStatus(
+                                                    3,
+                                                    l
+                                                            .getString("images.groupdetail.savebutton.errordb"));
+                                    showMsg(
+                                            l
+                                                    .getString("images.groupdetail.savebutton.errordb"),
+                                            "Fehler", SWT.ICON_ERROR | SWT.OK);
+
+                                } else {
+                                    //@todo
+                                    e.printStackTrace();
+                                }
+
+                            }
+
+                            //alle Buttons auf aktiv setzen
+                            //setImagesGroupButtonSaveCancel();
+
+                        } else if (mode_image == ManagementGui.MODE_EDIT) {
+                            /*
+                             Actor tmp = new Actor(
+                             textImageFName.getText(),
+                             textImageLName.getText());
+                             tmp.setActorId(new Integer(Integer
+                             .parseInt(textImageID.getText())));
+                             try {
+                             //object speichern
+                             // Fehlerbehandlung
+                             Database.saveObject(tmp);
+                             //?bersichtstabelle aktualisieren
+                             refreshImageOverviewTable(textImageSearch
+                             .getText());
+
+                             //Statusline Nachricht sezten
+                             statusLine
+                             .setStatus(
+                             1,
+                             l
+                             .getString("images.groupdetail.savebutton.editok"));
+
+                             } catch (DataBaseException e) {
+                             if (e.getMessage().equalsIgnoreCase("1")) {
+                             //Fehler beim Speichern des Objectes
+
+                             statusLine
+                             .setStatus(
+                             3,
+                             l
+                             .getString("images.groupdetail.savebutton.errorsave"));
+                             showMsg(
+                             l
+                             .getString("images.groupdetail.savebutton.errorsave"),
+                             "Fehler",
+                             SWT.ICON_ERROR | SWT.OK);
+
+                             } else if (e.getMessage().equalsIgnoreCase(
+                             "2")) {
+                             //fehler beim db aufbau
+                             statusLine
+                             .setStatus(
+                             3,
+                             l
+                             .getString("images.groupdetail.savebutton.errordb"));
+                             showMsg(
+                             l
+                             .getString("images.groupdetail.savebutton.errordb"),
+                             "Fehler",
+                             SWT.ICON_ERROR | SWT.OK);
+
+                             } else {
+                             //@todo
+                             e.printStackTrace();
+                             }
+
+                             }
+
+                             //alle Buttons auf aktiv setzen
+                             setImageGroupButtonSaveCancel();
+
+                             }
+                             */
+                            /**
+                             * @todo Exception werfen, da nur die zwei Modes sein d?rfen
+                             */
+                        }
                     }
                 });
-                scale1LData.grabExcessHorizontalSpace = true;
-                scale1LData.horizontalAlignment = GridData.FILL;
-                scale1LData.horizontalSpan = 4;
-                scale1.setLayoutData(scale1LData);
-                scale1.setMaximum(100);
-                scale1.setMinimum(0);
-                scale1.setIncrement(10);
-                scale1.setSelection(100);
+            }
+            {
+                buttonImageCancel = new Button(compositeButtons, SWT.PUSH
+                        | SWT.CENTER);
+                buttonImageCancel.setText(l.getString("button.cancel"));
+                buttonImageCancel.setEnabled(false);
+                buttonImageCancel.addSelectionListener(new SelectionAdapter() {
+                    public void widgetSelected(SelectionEvent evt) {
+                        System.out
+                                .println("buttonImageCancel.widgetSelected, event="
+                                        + evt);
+                        //setImageGroupButtonSaveCancel();
+                    }
+                });
+            }
+        }
 
+        // buttons for detail
+    }
+
+    void resizeScrollBars() {
+        // Set the max and thumb for the image canvas scroll bars.
+        ScrollBar horizontal = canvasImg.getHorizontalBar();
+        ScrollBar vertical = canvasImg.getVerticalBar();
+        Rectangle canvasBounds = canvasImg.getClientArea();
+        int width = Math.round(scaledImage.getImageData().width);
+        if (width > canvasBounds.width) {
+            // The image is wider than the canvas.
+            horizontal.setEnabled(true);
+            horizontal.setMaximum(width);
+            horizontal.setThumb(canvasBounds.width);
+            horizontal.setPageIncrement(canvasBounds.width);
+        } else {
+            // The canvas is wider than the image.
+            horizontal.setEnabled(false);
+
+            canvasImg.redraw();
+        }
+        int height = Math.round(scaledImage.getImageData().height);
+        if (height > canvasBounds.height) {
+            // The image is taller than the canvas.
+            vertical.setEnabled(true);
+            vertical.setMaximum(height);
+            vertical.setThumb(canvasBounds.height);
+            vertical.setPageIncrement(canvasBounds.height);
+        } else {
+            // The canvas is taller than the image.
+            vertical.setEnabled(false);
+            canvasImg.redraw();
+
+        }
+    }
+
+    void scrollHorizontally(ScrollBar scrollBar) {
+        if (scaledImage == null)
+            return;
+        Rectangle canvasBounds = canvasImg.getClientArea();
+        int width = Math.round(scaledImage.getImageData().width);
+        int height = Math.round(scaledImage.getImageData().height);
+        if (width > canvasBounds.width) {
+            // Only scroll if the image is bigger than the canvas.
+            int x = -scrollBar.getSelection();
+            if (x + width < canvasBounds.width) {
+                // Don't scroll past the end of the image.
+                x = canvasBounds.width - width;
             }
+            canvasImg.scroll(x, iy, ix, iy, width, height, false);
+            ix = x;
 
-        	// buttons for detail
-	}
+        }
+    }
 
-	void resizeScrollBars() {
-		// Set the max and thumb for the image canvas scroll bars.
-		ScrollBar horizontal = canvas1.getHorizontalBar();
-		ScrollBar vertical = canvas1.getVerticalBar();
-		Rectangle canvasBounds = canvas1.getClientArea();
-		int width = Math.round(scaledImage.getImageData().width);
-		if (width > canvasBounds.width) {
-			// The image is wider than the canvas.
-			horizontal.setEnabled(true);
-			horizontal.setMaximum(width);
-			horizontal.setThumb(canvasBounds.width);
-			horizontal.setPageIncrement(canvasBounds.width);
-		} else {
-			// The canvas is wider than the image.
-			horizontal.setEnabled(false);
+    void scrollVertically(ScrollBar scrollBar) {
+        if (scaledImage == null)
+            return;
+        Rectangle canvasBounds = canvasImg.getClientArea();
+        int width = Math.round(scaledImage.getImageData().width);
+        int height = Math.round(scaledImage.getImageData().height);
+        if (height > canvasBounds.height) {
+            // Only scroll if the image is bigger than the canvas.
+            int y = -scrollBar.getSelection();
+            if (y + height < canvasBounds.height) {
+                // Don't scroll past the end of the image.
+                y = canvasBounds.height - height;
+            }
+            canvasImg.scroll(ix, y, ix, iy, width, height, false);
+            iy = y;
+        }
+    }
 
-			canvas1.redraw();
-		}
-		int height = Math.round(scaledImage.getImageData().height);
-		if (height > canvasBounds.height) {
-			// The image is taller than the canvas.
-			vertical.setEnabled(true);
-			vertical.setMaximum(height);
-			vertical.setThumb(canvasBounds.height);
-			vertical.setPageIncrement(canvasBounds.height);
-		} else {
-			// The canvas is taller than the image.
-			vertical.setEnabled(false);
-				canvas1.redraw();
-			
-		}
-	}
-	
-	
-	void scrollHorizontally(ScrollBar scrollBar) {
-		if (scaledImage == null) return;
-		Rectangle canvasBounds = canvas1.getClientArea();
-		int width = Math.round(scaledImage.getImageData().width );
-		int height = Math.round(scaledImage.getImageData().height );
-		if (width > canvasBounds.width) {
-			// Only scroll if the image is bigger than the canvas.
-			int x = -scrollBar.getSelection();
-			if (x + width < canvasBounds.width) {
-				// Don't scroll past the end of the image.
-				x = canvasBounds.width - width;
-			}
-			canvas1.scroll(x, iy, ix, iy, width, height, false);
-			ix = x;
-			
-		}
-	}
-	
-	void scrollVertically(ScrollBar scrollBar) {
-		if (scaledImage == null) return;
-		Rectangle canvasBounds = canvas1.getClientArea();
-		int width = Math.round(scaledImage.getImageData().width);
-		int height = Math.round(scaledImage.getImageData().height);
-		if (height > canvasBounds.height) {
-			// Only scroll if the image is bigger than the canvas.
-			int y = -scrollBar.getSelection();
-			if (y + height < canvasBounds.height) {
-				// Don't scroll past the end of the image.
-				y = canvasBounds.height - height;
-			}
-			canvas1.scroll(ix, y, ix, iy, width, height, false);
-			iy = y;
-		}
-	}	
-	
-	// Reset the scroll bars to 0.
-	void resetScrollBars() {
-		if (scaledImage == null) return;
-		ix = 0; iy = 0;
-		resizeScrollBars();
-		canvas1.getHorizontalBar().setSelection(0);
-		canvas1.getVerticalBar().setSelection(0);
-		
-	}
-	
-	
-	void paintImage(PaintEvent event) {
-		Image paintImage = scaledImage;
+    // Reset the scroll bars to 0.
+    void resetScrollBars() {
+        if (scaledImage == null)
+            return;
+        ix = 0;
+        iy = 0;
+        resizeScrollBars();
+        canvasImg.getHorizontalBar().setSelection(0);
+        canvasImg.getVerticalBar().setSelection(0);
 
-		int w = Math.round(scaledImage.getImageData().width);
-		int h = Math.round(scaledImage.getImageData().height);
-		event.gc.drawImage(
-			paintImage,
-			0,
-			0,
-			scaledImage.getImageData().width,
-			scaledImage.getImageData().height,
-			ix + scaledImage.getImageData().x,
-			iy + scaledImage.getImageData().y,
-			w,
-			h);
-	}
+    }
 
+    void paintImage(PaintEvent event) {
+        Image paintImage = scaledImage;
 
-	
-	/**
+        int w = Math.round(scaledImage.getImageData().width);
+        int h = Math.round(scaledImage.getImageData().height);
+        event.gc.drawImage(paintImage, 0, 0, scaledImage.getImageData().width,
+                scaledImage.getImageData().height, ix
+                        + scaledImage.getImageData().x, iy
+                        + scaledImage.getImageData().y, w, h);
+    }
+
+    /**
      * @param text
      */
-    private void refreshActorsDetail(final String id) {
-        Actor object;
+    private void refreshImagesDetail(final String id) {
+        de.hsharz.provirent.objects.Image object = null;
         try {
             //since we only can get a String value from the table, we
             //need to convert this
-            object = Database.getSingleActor(Integer.parseInt(id));
+            object = (de.hsharz.provirent.objects.Image) Database
+                    .getSingleObject(new de.hsharz.provirent.objects.Image()
+                            .getClass(), Integer.parseInt(id));
 
             if (object == null) {
-
+                logger.error("Es wurde null von der Datenbank zur?ckgegeben");
                 /*
                  * 
                  * @TODO Statusbar aktualiseren
@@ -728,48 +1131,88 @@
             return;
         }
 
-        textActorsID.setText(object.getActorId() + "");
-        textActorsFName.setText(object.getFirstName());
-        textActorsLName.setText(object.getLastName());
+        textImagesID.setText(object.getImageId() + "");
+        textImagesName.setText(object.getImageFileName());
+        textImagesDescription.setText(object.getImageFileDescription());
 
+        if (object.getImageFile() != null && object.getImageFile().length > 0) {
+            scaledImage = ideaImage = new Image(getDisplay(),
+                    new ByteArrayInputStream(object.getImageFile()));
+            canvasImg.redraw();
+        }
+
+        canvasImg.redraw();
+
         //Buttons zum l?schen und editieren aktivieren
 
         //Mode auf view setzen
-        mode_actor = ManagementGui.MODE_VIEW;
-        
+        mode_image = ManagementGui.MODE_VIEW;
+
     }
 
     /**
      * 
      */
 
-    protected void insertIntoActorsOverviewTable(Actor actor) {
-        TableItem item = new TableItem(tableActorsOverview, SWT.NONE);
-        item.setText(new String[] { actor.getActorId() + "", actor.getFirstName(),
-                actor.getLastName() });        
+    protected void insertIntoImagesOverviewTable(
+            final de.hsharz.provirent.objects.Image image) {
+        TableItem item = new TableItem(tableImagesOverview, SWT.NONE);
+        item.setText(new String[] { image.getImageId() + "",
+                image.getImageFileName(), image.getImageFileDescription() });
+        if (image.getImageFile() != null && image.getImageFile().length > 0) {
+            item.setImage(0, new Image(getDisplay(), new ByteArrayInputStream(
+                    image.getImageFile())));
+        }
+
     }
-    
-    protected void refreshActorsOverviewTable(final String filter) {
-        /*
-        if (tableActorsOverview == null) {
-            System.out
-                    .println("Konnte ActorsOverviewtable nicht refreshen, da diese null ist!");
+
+    protected void refreshImageOverviewTable(final String filter) {
+
+        if (tableImagesOverview == null) {
+            logger
+                    .error("Konnte ImagesOverviewtable nicht refreshen, da diese null ist!");
             return;
         }
-        System.out.println("Versuche nun ActorsOverviewtable zu refreshen. Filter: "
+        logger.debug("Versuche nun ImagesOverviewtable zu refreshen. Filter: "
                 + filter);
-        tableActorsOverview.removeAll();
+        tableImagesOverview.removeAll();
         TableItem item;
-        java.util.List Actorlist = Database.getActor(filter);
+        java.util.List Imagelist = Database.getImages(filter);
 
-        for (int i = 0; i < Actorlist.size(); i++) {
+        for (int i = 0; i < Imagelist.size(); i++) {
 
-            Actor o = (Actor) Actorlist.get(i);
-            item = new TableItem(tableActorsOverview, SWT.NONE);
-            item.setText(new String[] { o.getActorId() + "", o.getFirstName(),
-                    o.getLastName() });
+            de.hsharz.provirent.objects.Image o = (de.hsharz.provirent.objects.Image) Imagelist
+                    .get(i);
+            item = new TableItem(tableImagesOverview, SWT.NONE);
+            
+            /*
+            if (o.getImageFile() != null && o.getImageFile().length > 0) {
+            System.out.println("id"+o.getImageId()+" byte:"+o.getImageFile().toString());
+            ImageData imgdata = new ImageData(new ByteArrayInputStream((o.getImageFile())));
+            imgdata.scaledTo(10,10);
+ 
+            Image img = new Image(getDisplay(),imgdata);
+            System.out.println("Gr??e: "+img.getBounds());
+            
+                item.setImage(0, new Image(getDisplay(),imgdata));
+            }            
+            */
+            item.setText(new String[] { o.getImageId() + "",
+                    o.getImageFileName(), o.getImageFileDescription() });
 
         }
-        */
     }
-}
+    
+    private Image createThumbnailImage(byte[] data){
+        ImageData imgdata = new ImageData(new ByteArrayInputStream(data));
+        int maxheight = 10;
+        int maxwidth = 10;
+        imgdata.scaledTo(maxwidth,maxheight);
+            /**
+             * @todo hier noch einen algorithmus zum verkleinern
+             */
+
+        return new Image(getDisplay(),imgdata);
+        
+    }
+}
\ No newline at end of file

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java	2004-11-15 15:02:24 UTC (rev 134)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java	2004-11-15 19:37:23 UTC (rev 135)
@@ -104,13 +104,14 @@
 
     private CTabFolder cTabFolderMain;
 
-    private CTabItem tabItemFormat,tabItemActor,tabItemDirector,tabItemLanguage,tabItemGenre;
+    private CTabItem tabItemFormat,tabItemActor,tabItemDirector,tabItemLanguage,tabItemGenre,tabItemImage;
 
     private CompositeFormate compositeFormate;
     private CompositeActors compositeActor;
     private CompositeDirectors compositeDirector;
     private CompositeGenre compositeGenre;
     private CompositeLanguage compositeLanguage;
+    private CompositeImage compositeImage;
     
 
     private MenuItem aboutMenuItem;
@@ -125,7 +126,7 @@
     
     private MenuItem viewVideoFormatMenuItem,viewActorMenuItem,viewGenreMenuItem;
     private MenuItem viewLanguageMenuItem,viewStatusMenuItem;
-    private MenuItem viewConditionMenuItem,viewMovieMenuItem,viewDvdMenuItem, viewBillMenuItem;
+    private MenuItem viewConditionMenuItem,viewMovieMenuItem,viewDvdMenuItem, viewBillMenuItem, viewImageMenuItem;
     
 
     private Shell shell;
@@ -494,6 +495,23 @@
             }
         });   
 
+        viewImageMenuItem = new MenuItem(viewMenu, SWT.CHECK);
+        viewImageMenuItem.setText(l.getString("menu.view.image"));
+        viewImageMenuItem.setSelection(false);
+        viewImageMenuItem.addSelectionListener(new SelectionAdapter() {
+            public void widgetSelected(SelectionEvent evt) {
+				if(tabItemImage == null || tabItemImage.isDisposed()){
+				    initImageTab();
+				    return;   
+				}
+				
+				cTabFolderMain.setSelection(tabItemStatus);
+				viewStatusMenuItem.setSelection(true);
+				cTabFolderMain.showSelection();
+            }
+        });   
+        
+        
         viewMovieMenuItem = new MenuItem(viewMenu, SWT.CHECK);
         viewMovieMenuItem.setText(l.getString("menu.view.movie"));
         viewMovieMenuItem.setSelection(false);
@@ -533,7 +551,28 @@
         cTabFolderMain.setSelection(tabItemStatus);
     }
 
+    private void initImageTab() {
+        tabItemImage = new CTabItem(cTabFolderMain, SWT.NONE);
+        tabItemImage.setText(l.getString("tab.image.title"));
+        tabItemImage.addDisposeListener(new DisposeListener() {
 
+            public void widgetDisposed(DisposeEvent evt) {
+                if(!viewImageMenuItem.isDisposed()){
+                    viewImageMenuItem.setSelection(false);
+                }
+            }
+            
+        });
+        {
+            compositeImage = new CompositeImage(
+                cTabFolderMain,
+                SWT.NONE, statusLine, locale);
+            
+            tabItemImage.setControl(compositeImage);
+        }
+        cTabFolderMain.setSelection(tabItemImage);
+    }
+    
     /**
      * init the help menu
      */

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/main.properties
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/main.properties	2004-11-15 15:02:24 UTC (rev 134)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/main.properties	2004-11-15 19:37:23 UTC (rev 135)
@@ -21,6 +21,8 @@
 
 menu.view.status=Status
 
+menu.view.image=Bilder
+
 menu.view.movie=Film
 
 menu.view.dvd=DVD
@@ -36,5 +38,6 @@
 tab.genre.title=Genre
 tab.language.title=Sprache/Untertitel
 tab.Status.title=Status/Zustand
-tab.movie.title=
+tab.movie.title=Filme
+tab.image.title=Bilder
 status.resizewarn=Fenster kann Mindestgr??e nicht unterschreiten.
\ No newline at end of file

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Image.hbm.xml
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Image.hbm.xml	2004-11-15 15:02:24 UTC (rev 134)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Image.hbm.xml	2004-11-15 19:37:23 UTC (rev 135)
@@ -22,7 +22,7 @@
 
  
       <property name="imageFile" type="binary">
-      	<column name="pdffile" sql-type="BLOB" />
+      	<column name="imageFile" sql-type="BLOB" />
       </property>
 				
       <property name="imageFileSize" type="int">

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java	2004-11-15 15:02:24 UTC (rev 134)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java	2004-11-15 19:37:23 UTC (rev 135)
@@ -44,15 +44,16 @@
 
 import org.apache.log4j.Logger;
 
+import de.hsharz.provirent.objects.Actor;
 import de.hsharz.provirent.objects.AudioFormat;
 import de.hsharz.provirent.objects.Condition;
 import de.hsharz.provirent.objects.Director;
 import de.hsharz.provirent.objects.Genre;
+import de.hsharz.provirent.objects.Image;
 import de.hsharz.provirent.objects.Language;
 import de.hsharz.provirent.objects.Status;
 import de.hsharz.provirent.objects.Subtitle;
 import de.hsharz.provirent.objects.VideoFormat;
-import de.hsharz.provirent.objects.Actor;
 
 
 /**
@@ -676,14 +677,14 @@
 	}
 
 	/**
-	 * This method gets all Actor from the database.
+	 * This method gets all Images from the database.
 	 * searches for firstname or lastname or id
 	 * @param filter 
-	 * @return List of Director objects, or an empty List
+	 * @return List of Image objects, or an empty List
 	 */
-	public static List getActor(final String filter){
+	public static List getImages(final String filter){
 	    if (logger.isDebugEnabled()) {
-	        logger.debug("getActor() - start. String filter= "+filter);
+	        logger.debug("getImages() - start. String filter= "+filter);
 	    }
 	    //init the returnlist
 	    List returnlist = new ArrayList();
@@ -695,18 +696,18 @@
 	        s = HibernateUtil.currentSession();
 	            
 	            //init the criteria
-	            Criteria criteria = s.createCriteria(Actor.class);
+	            Criteria criteria = s.createCriteria(Image.class);
 	            //any of the criteria 
 	            Disjunction any = Expression.disjunction();
 	
 	            //if filter not empty
 	            if (filter != null && !filter.equalsIgnoreCase("")) {
-	                any.add(Expression.like("firstName", "%"+filter+"%"));
-	                any.add(Expression.like("lastName", "%"+filter+"%"));
+	                any.add(Expression.like("imageFileName", "%"+filter+"%"));
+	                any.add(Expression.like("imageFileDescription", "%"+filter+"%"));
 	                
 	                //maybe we are searching for the id?
 	                try {
-	                    any.add(Expression.eq("actorId", new Integer(Integer.parseInt(filter))));
+	                    any.add(Expression.eq("imageId", new Integer(Integer.parseInt(filter))));
 	                } catch (Exception e) {
 	                }
 	                
@@ -721,7 +722,7 @@
 	
 	    } catch (Exception e) {
 	        logger.error(
-	                "getActor() - Error while trying to do Transaction",
+	                "getImages() - Error while trying to do Transaction",
 	                e);
 	        returnlist = new ArrayList();
 	    } finally {
@@ -729,24 +730,24 @@
 	            // No matter what, close the session
 	            HibernateUtil.closeSession();
 	        } catch (HibernateException e1) {
-	            logger.error("getActor() - Could not Close the Session", e1);
+	            logger.error("getImages() - Could not Close the Session", e1);
 	        }
 	    }
 	
 	    if (logger.isDebugEnabled()) {
-	        logger.debug("getActor() - end");
+	        logger.debug("getImages() - end");
 	    }
 	    return returnlist;
 	    	
 	}
 	
 	
-	public static Actor getSingleActor(final int id){
+	public static Object getSingleObject( final Class gclass, final int id){
 	    if (logger.isDebugEnabled()) {
-	        logger.debug("getSingleActor() - start. int filter= "+id);
+	        logger.debug("getSingleObject() - start. int filter= "+id);
 	    }
 	    //init the returnlist
-	    Actor returnobject = null;
+	    Object returnobject = null;
 	
 	    Session s = null;
 	    Transaction tx = null;
@@ -754,11 +755,11 @@
 	        //get new Session and begin Transaction
 	        s = HibernateUtil.currentSession();
 	
-	            returnobject = (Actor)s.get(Actor.class, new Integer(id));
+	            returnobject = (Object)s.get(gclass, new Integer(id));
 	
 	    } catch (Exception e) {
 	        logger.error(
-	                "getSingleActor() - Error while trying to do Transaction",
+	                "getSingleObject() - Error while trying to do Transaction",
 	                e);
 	        
 	    } finally {
@@ -766,12 +767,12 @@
 	            // No matter what, close the session
 	            HibernateUtil.closeSession();
 	        } catch (HibernateException e1) {
-	            logger.error("getSingleActor() - Could not Close the Session", e1);
+	            logger.error("getSingleObject() - Could not Close the Session", e1);
 	        }
 	    }
 	
 	    if (logger.isDebugEnabled()) {
-	        logger.debug("getSingleActor() - end");
+	        logger.debug("getSingleObject() - end");
 	    }
 	    return returnobject;
 	    	
@@ -1191,7 +1192,112 @@
 	    	
 	}
 	
+
+	/**
+	 * This method gets all Actor from the database.
+	 * searches for firstname or lastname or id
+	 * @param filter 
+	 * @return List of Actors objects, or an empty List
+	 */
+	public static List getActor(final String filter){
+	    if (logger.isDebugEnabled()) {
+	        logger.debug("getActor() - start. String filter= "+filter);
+	    }
+	    //init the returnlist
+	    List returnlist = new ArrayList();
 	
+	    Session s = null;
+	    
+	    try {
+	        //get new Session and begin Transaction
+	        s = HibernateUtil.currentSession();
+	            
+	            //init the criteria
+	            Criteria criteria = s.createCriteria(Actor.class);
+	            //any of the criteria 
+	            Disjunction any = Expression.disjunction();
+	
+	            //if filter not empty
+	            if (filter != null && !filter.equalsIgnoreCase("")) {
+	                any.add(Expression.like("firstName", "%"+filter+"%"));
+	                any.add(Expression.like("lastName", "%"+filter+"%"));
+	                
+	                //maybe we are searching for the id?
+	                try {
+	                    any.add(Expression.eq("actorId", new Integer(Integer.parseInt(filter))));
+	                } catch (Exception e) {
+	                }
+	                
+	            }
+	            //add all criteria
+	            criteria.add(any);
+	            //get the results
+	            returnlist = criteria.list();
+	
+	
+	
+	
+	    } catch (Exception e) {
+	        logger.error(
+	                "getActor() - Error while trying to do Transaction",
+	                e);
+	        returnlist = new ArrayList();
+	    } finally {
+	        try {
+	            // No matter what, close the session
+	            HibernateUtil.closeSession();
+	        } catch (HibernateException e1) {
+	            logger.error("getActor() - Could not Close the Session", e1);
+	        }
+	    }
+	
+	    if (logger.isDebugEnabled()) {
+	        logger.debug("getActor() - end");
+	    }
+	    return returnlist;
+	    	
+	}
+	
+	
+	public static Actor getSingleActor(final int id){
+	    if (logger.isDebugEnabled()) {
+	        logger.debug("getSingleActor() - start. int filter= "+id);
+	    }
+	    //init the returnlist
+	    Actor returnobject = null;
+	
+	    Session s = null;
+	    Transaction tx = null;
+	    try {
+	        //get new Session and begin Transaction
+	        s = HibernateUtil.currentSession();
+	
+	            returnobject = (Actor)s.get(Actor.class, new Integer(id));
+	
+	    } catch (Exception e) {
+	        logger.error(
+	                "getSingleActor() - Error while trying to do Transaction",
+	                e);
+	        
+	    } finally {
+	        try {
+	            // No matter what, close the session
+	            HibernateUtil.closeSession();
+	        } catch (HibernateException e1) {
+	            logger.error("getSingleActor() - Could not Close the Session", e1);
+	        }
+	    }
+	
+	    if (logger.isDebugEnabled()) {
+	        logger.debug("getSingleActor() - end");
+	    }
+	    return returnobject;
+	    	
+	}
+	
+	
+	
+	
 	/**
      * Constructor for TestActor.
      * @param arg0

Modified: project_src/provirent_hibernate/src/log4j.properties
===================================================================
--- project_src/provirent_hibernate/src/log4j.properties	2004-11-15 15:02:24 UTC (rev 134)
+++ project_src/provirent_hibernate/src/log4j.properties	2004-11-15 19:37:23 UTC (rev 135)
@@ -13,7 +13,7 @@
 
 ### set log levels - for more verbose logging change 'info' to 'debug' ###
 
-log4j.rootLogger=warn, stdout
+log4j.rootLogger=debug, stdout
 log4j.logger.net.sf.hibernate=info
 log4j.logger.test.provirent.hibernate=debug
 



From pschneider at sheep.berlios.de  Mon Nov 15 20:40:11 2004
From: pschneider at sheep.berlios.de (Philipp Schneider at BerliOS)
Date: Mon, 15 Nov 2004 20:40:11 +0100
Subject: [Provirent-svn-commit] r136 - project_src/provirent_hibernate/src/de/hsharz/provirent/objects
Message-ID: <200411151940.iAFJeBWc029463@sheep.berlios.de>

Author: pschneider
Date: 2004-11-15 20:40:10 +0100 (Mon, 15 Nov 2004)
New Revision: 136

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Image.hbm.xml
   project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Image.java
Log:
- bei image gibt es auch ein thumb image

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Image.hbm.xml
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Image.hbm.xml	2004-11-15 19:37:23 UTC (rev 135)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Image.hbm.xml	2004-11-15 19:40:10 UTC (rev 136)
@@ -24,6 +24,10 @@
       <property name="imageFile" type="binary">
       	<column name="imageFile" sql-type="BLOB" />
       </property>
+
+      <property name="imageFileThumb" type="binary">
+      	<column name="imageFileThumb" sql-type="BLOB" />
+      </property>
 				
       <property name="imageFileSize" type="int">
       	<meta attribute="use-in-tostring">true</meta>

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Image.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Image.java	2004-11-15 19:37:23 UTC (rev 135)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Image.java	2004-11-15 19:40:10 UTC (rev 136)
@@ -20,6 +20,9 @@
     private byte[] imageFile;
 
     /** nullable persistent field */
+    private byte[] imageFileThumb;
+
+    /** nullable persistent field */
     private int imageFileSize;
 
     /** nullable persistent field */
@@ -29,8 +32,9 @@
     private String imageFileDescription;
 
     /** full constructor */
-    public Image(byte[] imageFile, int imageFileSize, String imageFileName, String imageFileDescription) {
+    public Image(byte[] imageFile, byte[] imageFileThumb, int imageFileSize, String imageFileName, String imageFileDescription) {
         this.imageFile = imageFile;
+        this.imageFileThumb = imageFileThumb;
         this.imageFileSize = imageFileSize;
         this.imageFileName = imageFileName;
         this.imageFileDescription = imageFileDescription;
@@ -56,6 +60,14 @@
         this.imageFile = imageFile;
     }
 
+    public byte[] getImageFileThumb() {
+        return this.imageFileThumb;
+    }
+
+    public void setImageFileThumb(byte[] imageFileThumb) {
+        this.imageFileThumb = imageFileThumb;
+    }
+
     public int getImageFileSize() {
         return this.imageFileSize;
     }
@@ -96,6 +108,7 @@
         return new EqualsBuilder()
             .append(this.getImageId(), castOther.getImageId())
             .append(this.getImageFile(), castOther.getImageFile())
+            .append(this.getImageFileThumb(), castOther.getImageFileThumb())
             .append(this.getImageFileSize(), castOther.getImageFileSize())
             .append(this.getImageFileName(), castOther.getImageFileName())
             .append(this.getImageFileDescription(), castOther.getImageFileDescription())
@@ -106,6 +119,7 @@
         return new HashCodeBuilder()
             .append(getImageId())
             .append(getImageFile())
+            .append(getImageFileThumb())
             .append(getImageFileSize())
             .append(getImageFileName())
             .append(getImageFileDescription())



From rgriesch at sheep.berlios.de  Mon Nov 15 22:23:09 2004
From: rgriesch at sheep.berlios.de (Remo Griesch at BerliOS)
Date: Mon, 15 Nov 2004 22:23:09 +0100
Subject: [Provirent-svn-commit] r137 - project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui
Message-ID: <200411152123.iAFLN9ai000306@sheep.berlios.de>

Author: rgriesch
Date: 2004-11-15 22:23:08 +0100 (Mon, 15 Nov 2004)
New Revision: 137

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeActors.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeDirectors.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java
Log:
ManagementGui  - einzelne CTab erzeugt
               - Movie Funktionalit?\195?\164t hinzugef?\195?\188gt

CompositeMovie - erzeugt und angefangen

movies.properties - angelegt 

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeActors.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeActors.java	2004-11-15 19:40:10 UTC (rev 136)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeActors.java	2004-11-15 21:23:08 UTC (rev 137)
@@ -73,9 +73,7 @@
     private TableColumn tableActorsOverview_ColumnFName;
     private TableColumn tableActorsOverview_ColumnLName;
     
-    
     private SashForm sashForm1;
-    private SashForm sashForm2;
     
     private Group groupActor;
     private Group groupActorsOverview;
@@ -185,13 +183,13 @@
             groupActor.setLayout(groupActorLayout);
             groupActor.setText(l.getString("actors.group.label"));
             {
-                sashForm2 = new SashForm(groupActor, SWT.NONE);
-                GridData sashForm2LData = new GridData();
-                sashForm2LData.verticalAlignment = GridData.FILL;
-                sashForm2LData.horizontalAlignment = GridData.FILL;
-                sashForm2LData.grabExcessHorizontalSpace = true;
-                sashForm2LData.grabExcessVerticalSpace = true;
-                sashForm2.setLayoutData(sashForm2LData);
+                sashForm1 = new SashForm(groupActor, SWT.NONE);
+                GridData sashForm1LData = new GridData();
+                sashForm1LData.verticalAlignment = GridData.FILL;
+                sashForm1LData.horizontalAlignment = GridData.FILL;
+                sashForm1LData.grabExcessHorizontalSpace = true;
+                sashForm1LData.grabExcessVerticalSpace = true;
+                sashForm1.setLayoutData(sashForm1LData);
                 
                
             }
@@ -212,9 +210,9 @@
 
 	
 	private void initActorsOverview()  {	    
-//	  Group Actors Overview 
+	    //	  Group Actors Overview 
         {
-            groupActorsOverview = new Group(sashForm2,SWT.NONE);
+            groupActorsOverview = new Group(sashForm1,SWT.NONE);
             GridLayout group1Layout = new GridLayout();
             group1Layout.numColumns = 8;
             groupActorsOverview.setLayout(group1Layout);
@@ -357,7 +355,7 @@
 	private void initActorsDetail()  {	    
 	    // Group Actors Detail
         {
-            groupActorsDetail = new Group(sashForm2, SWT.NONE);
+            groupActorsDetail = new Group(sashForm1, SWT.NONE);
             GridLayout group2Layout = new GridLayout();
             GridData group2LData = new GridData();
             group2Layout.verticalSpacing = 15;

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeDirectors.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeDirectors.java	2004-11-15 19:40:10 UTC (rev 136)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeDirectors.java	2004-11-15 21:23:08 UTC (rev 137)
@@ -71,10 +71,8 @@
     private TableColumn tableDirectorsOverview_ColumnID;
     private TableColumn tableDirectorsOverview_ColumnFName;
     private TableColumn tableDirectorsOverview_ColumnLName;
-    
-    
+      
     private SashForm sashForm1;
-    private SashForm sashForm2;
     
     private Group groupDirector;
     private Group groupDirectorsOverview;
@@ -184,13 +182,13 @@
             groupDirector.setLayout(groupDirectorLayout);
             groupDirector.setText(l.getString("directors.group.label"));
             {
-                sashForm2 = new SashForm(groupDirector, SWT.NONE);
-                GridData sashForm2LData = new GridData();
-                sashForm2LData.verticalAlignment = GridData.FILL;
-                sashForm2LData.horizontalAlignment = GridData.FILL;
-                sashForm2LData.grabExcessHorizontalSpace = true;
-                sashForm2LData.grabExcessVerticalSpace = true;
-                sashForm2.setLayoutData(sashForm2LData);
+                sashForm1 = new SashForm(groupDirector, SWT.NONE);
+                GridData sashForm1LData = new GridData();
+                sashForm1LData.verticalAlignment = GridData.FILL;
+                sashForm1LData.horizontalAlignment = GridData.FILL;
+                sashForm1LData.grabExcessHorizontalSpace = true;
+                sashForm1LData.grabExcessVerticalSpace = true;
+                sashForm1.setLayoutData(sashForm1LData);
                 
                
             }
@@ -213,7 +211,7 @@
 	private void initDirectorsOverview()  {	    
 //	  Group Actors Overview 
         {
-            groupDirectorsOverview = new Group(sashForm2,SWT.NONE);
+            groupDirectorsOverview = new Group(sashForm1,SWT.NONE);
             GridLayout group1Layout = new GridLayout();
             group1Layout.numColumns = 8;
             groupDirectorsOverview.setLayout(group1Layout);
@@ -356,7 +354,7 @@
 	private void initDirectorsDetail()  {	    
 	    // Group Actors Detail
         {
-            groupDirectorsDetail = new Group(sashForm2, SWT.NONE);
+            groupDirectorsDetail = new Group(sashForm1, SWT.NONE);
             GridLayout group2Layout = new GridLayout();
             GridData group2LData = new GridData();
             group2Layout.verticalSpacing = 15;

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java	2004-11-15 19:40:10 UTC (rev 136)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java	2004-11-15 21:23:08 UTC (rev 137)
@@ -104,14 +104,24 @@
 
     private CTabFolder cTabFolderMain;
 
-    private CTabItem tabItemFormat,tabItemActor,tabItemDirector,tabItemLanguage,tabItemGenre,tabItemImage;
-
+    private CTabItem tabItemFormat;
+    private CTabItem tabItemActor;
+    private CTabItem tabItemDirector;
+    private CTabItem tabItemLanguage;
+    private CTabItem tabItemGenre;
+    private CTabItem tabItemImage;
+    private CTabItem tabItemMovie;
+    
+    
+    
+    
     private CompositeFormate compositeFormate;
     private CompositeActors compositeActor;
     private CompositeDirectors compositeDirector;
     private CompositeGenre compositeGenre;
     private CompositeLanguage compositeLanguage;
     private CompositeImage compositeImage;
+    private CompositeMovie compositeMovie;
     
 
     private MenuItem aboutMenuItem;
@@ -515,6 +525,19 @@
         viewMovieMenuItem = new MenuItem(viewMenu, SWT.CHECK);
         viewMovieMenuItem.setText(l.getString("menu.view.movie"));
         viewMovieMenuItem.setSelection(false);
+        viewMovieMenuItem.addSelectionListener(new SelectionAdapter() {
+            public void widgetSelected(SelectionEvent evt) {
+				if(tabItemMovie == null || tabItemMovie.isDisposed()){
+				    initMovieTab();
+				    return;   
+				}
+				
+				cTabFolderMain.setSelection(tabItemActor);
+				viewActorMenuItem.setSelection(true);
+				cTabFolderMain.showSelection();				
+            
+            }
+        });         
 
         viewDvdMenuItem = new MenuItem(viewMenu, SWT.CHECK);
         viewDvdMenuItem.setText(l.getString("menu.view.dvd"));
@@ -712,6 +735,29 @@
         cTabFolderMain.setSelection(tabItemLanguage);
     }    
     
+    private void initMovieTab() {
+        tabItemMovie = new CTabItem(cTabFolderMain, SWT.NONE);
+        tabItemMovie.setText(l.getString("tab.movie.title"));
+        tabItemMovie.addDisposeListener(new DisposeListener() {
+
+            public void widgetDisposed(DisposeEvent evt) {
+                if(!viewMovieMenuItem.isDisposed()){
+                viewMovieMenuItem.setSelection(false);
+                }
+            }
+            
+        });
+  
+        {
+            compositeMovie = new CompositeMovie(
+                cTabFolderMain,
+                SWT.NONE, statusLine, locale);
+            
+            tabItemMovie.setControl(compositeMovie);
+        }
+        cTabFolderMain.setSelection(tabItemMovie);
+    }
+    
     private void initStatusLine() {
         statusLine = new StatusLineStyledText(compositeStatusLine, SWT.READ_ONLY);
         statusLine.setText("");



From rgriesch at sheep.berlios.de  Mon Nov 15 22:29:02 2004
From: rgriesch at sheep.berlios.de (Remo Griesch at BerliOS)
Date: Mon, 15 Nov 2004 22:29:02 +0100
Subject: [Provirent-svn-commit] r138 - in project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui: . language
Message-ID: <200411152129.iAFLT2IH000582@sheep.berlios.de>

Author: rgriesch
Date: 2004-11-15 22:29:01 +0100 (Mon, 15 Nov 2004)
New Revision: 138

Added:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/movies.properties
Log:
CompositeMovie und properties hinzugef?\195?\188gt
Sorry!

Added: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java	2004-11-15 21:23:08 UTC (rev 137)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java	2004-11-15 21:29:01 UTC (rev 138)
@@ -0,0 +1,389 @@
+package de.hsharz.provirent.management.gui;
+
+import java.text.MessageFormat;
+import java.util.Locale;
+import java.util.PropertyResourceBundle;
+import java.util.ResourceBundle;
+
+import org.apache.log4j.Logger;
+import org.eclipse.swt.SWT;
+import org.eclipse.swt.custom.SashForm;
+import org.eclipse.swt.events.FocusAdapter;
+import org.eclipse.swt.events.FocusEvent;
+import org.eclipse.swt.events.SelectionAdapter;
+import org.eclipse.swt.events.SelectionEvent;
+import org.eclipse.swt.layout.FormAttachment;
+import org.eclipse.swt.layout.FormData;
+import org.eclipse.swt.layout.GridData;
+import org.eclipse.swt.layout.GridLayout;
+import org.eclipse.swt.widgets.Button;
+import org.eclipse.swt.widgets.Composite;
+import org.eclipse.swt.widgets.Display;
+import org.eclipse.swt.widgets.Event;
+import org.eclipse.swt.widgets.Group;
+import org.eclipse.swt.widgets.Label;
+import org.eclipse.swt.widgets.Listener;
+import org.eclipse.swt.widgets.Shell;
+import org.eclipse.swt.widgets.Table;
+import org.eclipse.swt.widgets.TableColumn;
+import org.eclipse.swt.widgets.TableItem;
+import org.eclipse.swt.widgets.Text;
+
+import com.cloudgarden.resource.SWTResourceManager;
+
+import de.hsharz.provirent.objects.Movie;
+import de.hsharz.provirent.persistence.DataBaseException;
+import de.hsharz.provirent.persistence.Database;
+
+
+/**
+* This code was generated using CloudGarden's Jigloo
+* SWT/Swing GUI Builder, which is free for non-commercial
+* use. If Jigloo is being used commercially (ie, by a corporation,
+* company or business for any purpose whatever) then you
+* should purchase a license for each developer using Jigloo.
+* Please visit www.cloudgarden.com for details.
+* Use of Jigloo implies acceptance of these licensing terms.
+* *************************************
+* A COMMERCIAL LICENSE HAS NOT BEEN PURCHASED
+* for this machine, so Jigloo or this code cannot be used legally
+* for any corporate or commercial purpose.
+* *************************************
+*/
+public class CompositeMovie extends de.hsharz.provirent.management.gui.AbstractComposite {
+
+    {
+        //Register as a resource user - SWTResourceManager will
+        //handle the obtaining and disposing of resources
+        SWTResourceManager.registerResourceUser(this);
+    }
+
+
+    /**
+     * Logger for this class
+     */
+    private static final Logger logger = Logger
+            .getLogger(CompositeActors.class);
+    
+    
+    private final static int MODE_VIEW = 0;
+    private final static int MODE_ADD = 1;
+    private final static int MODE_EDIT = 2;
+    
+    private Table tableMoviesOverview;
+    private TableColumn tableMoviesOverview_ColumnID;
+    private TableColumn tableMoviesOverview_ColumnFName;
+    private TableColumn tableMoviesOverview_ColumnLName;
+        
+    private Group groupMovie;
+    private Group groupMoviesOverview;
+    private Group groupMoviesDetail;
+    
+    private Text textMoviesSearch;
+    private Text textMoviesID;
+    private Text textMoviesFName;
+    private Text textMoviesLName;
+    
+    private Label labelMoviesSearch;
+    private Label labelMoviesID;
+    private Label labelMoviesFName;
+    private Label labelMoviesLName;
+    
+    private Button buttonMoviesNew;
+    private Button buttonMoviesSave;
+    private Button buttonMoviesEdit;
+    private Button buttonMoviesCancel;
+    private Button buttonMoviesDelete;
+    private Button buttonMoviesFill;
+    
+    private SashForm sashForm1;
+    
+    private Composite parent;
+    
+    protected int mode_actor;
+    
+    private StatusLineStyledText statusLine;
+    
+    private ResourceBundle l;
+    
+    /*
+     * ?ndert die Sprache aller Elemente
+     * 
+     * @see de.hsharz.provirent.managment.gui.AbstractComposite#changeLanguage(java.util.Locale)
+     */
+    public void changeLanguage(Locale locale) {
+
+    }
+
+    /* 
+     * Init die Sprache (properties Datei)
+     * @see de.hsharz.provirent.managment.gui.AbstractComposite#initLanguage(java.util.Locale)
+     */
+    public void initLanguage(Locale locale) {
+
+        l = PropertyResourceBundle.getBundle(
+                "de.hsharz.provirent.management.gui.language.movies", locale);
+
+    }
+    
+    
+    
+	/**
+	* Auto-generated main method to display this 
+	* de.hsharz.provirent.management.gui.AbstractComposite inside a new Shell.
+	*/
+	public static void main(String[] args) {
+		showGUI();
+	}
+		
+	/**
+	* Auto-generated method to display this 
+	* de.hsharz.provirent.management.gui.AbstractComposite inside a new Shell.
+	*/
+	/**
+	* Auto-generated method to display this 
+	* org.eclipse.swt.widgets.Composite inside a new Shell.
+	*/
+	public static void showGUI() {
+		Display display = Display.getDefault();
+		Shell shell = new Shell(display);
+
+		shell.open();
+		while (!shell.isDisposed()) {
+			if (!display.readAndDispatch())
+				display.sleep();
+		}
+	}
+
+	public CompositeMovie(Composite p, int style,
+            StatusLineStyledText status, Locale l) {
+	    super(p, style, status, l);
+        parent = p;
+        //Statusline wird gestzt
+        statusLine = status;
+        
+        //sprache wird init
+        initLanguage(l);
+	    
+	    
+		initGUI();
+	}
+
+
+	private void initGUI() {
+        if (logger.isDebugEnabled()) {
+            logger.debug("initGUI() - start");
+        }
+
+        this.setLayout(new GridLayout());
+        this.setSize(816, 540);
+        {
+            groupMovie = new Group(this, SWT.NONE);
+            GridLayout groupMovieLayout = new GridLayout();
+            GridData groupMovieLData = new GridData();
+            groupMovieLData.grabExcessHorizontalSpace = true;
+            groupMovieLData.grabExcessVerticalSpace = true;
+            groupMovieLData.horizontalAlignment = GridData.FILL;
+            groupMovieLData.verticalAlignment = GridData.FILL;
+            groupMovie.setLayoutData(groupMovieLData);
+            groupMovieLayout.makeColumnsEqualWidth = true;
+            groupMovie.setLayout(groupMovieLayout);
+            groupMovie.setText(l.getString("movies.group.label"));
+            {
+                sashForm1 = new SashForm(groupMovie, SWT.NONE);
+                GridData sashForm1LData = new GridData();
+                sashForm1LData.verticalAlignment = GridData.FILL;
+                sashForm1LData.horizontalAlignment = GridData.FILL;
+                sashForm1LData.grabExcessHorizontalSpace = true;
+                sashForm1LData.grabExcessVerticalSpace = true;
+                sashForm1.setLayoutData(sashForm1LData);
+                
+               
+            }
+            // init the rest of the layout
+            initMoviesOverview();
+            initMoviesDetail();
+            refreshMoviesOverviewTable(textMoviesSearch.getText());
+        }
+
+        this.layout();
+
+
+        
+        if (logger.isDebugEnabled()) {
+            logger.debug("initGUI() - end");
+        }
+	}
+
+    /**
+     * 
+     */
+    private void initMoviesOverview() {
+	    //	  Group Actors Overview 
+        {
+            groupMoviesOverview = new Group(sashForm1,SWT.NONE);
+            GridLayout group1Layout = new GridLayout();
+            group1Layout.numColumns = 8;
+            groupMoviesOverview.setLayout(group1Layout);
+            groupMoviesOverview.setText(l.getString("movies.groupoverview.label"));
+            
+            {// table Actors Overview
+                tableMoviesOverview = new Table(
+                    groupMoviesOverview,
+                    SWT.SINGLE
+                        | SWT.FULL_SELECTION
+                        | SWT.V_SCROLL | SWT.BORDER);
+                GridData tableMoviesOverviewLData = new GridData();
+                tableMoviesOverview.setHeaderVisible(true);
+                tableMoviesOverview.setLinesVisible(true);
+                tableMoviesOverviewLData.horizontalAlignment = GridData.FILL;
+                tableMoviesOverviewLData.verticalAlignment = GridData.FILL;
+                tableMoviesOverviewLData.horizontalSpan = 8;
+                tableMoviesOverviewLData.grabExcessHorizontalSpace = true;
+                tableMoviesOverviewLData.grabExcessVerticalSpace = true;
+                tableMoviesOverview.setLayoutData(tableMoviesOverviewLData);
+                tableMoviesOverview.addFocusListener(new FocusAdapter() {
+                        public void focusLost(FocusEvent evt) {
+                            System.out
+                                .println("tableMoviesOverview.focusLost, event="
+                                    + evt);
+                        }
+                        public void focusGained(FocusEvent evt) {
+                            System.out
+                                .println("tableMoviesOverview.focusGained, event="
+                                    + evt);
+                        }
+                    });
+                tableMoviesOverview.addSelectionListener(new SelectionAdapter() {
+                        public void widgetSelected(SelectionEvent evt) {
+                            if (logger.isDebugEnabled()) {
+                                logger
+                                    .debug("widgetSelected(SelectionEvent evt = "
+                                        + evt
+                                        + ") - start");
+                            }
+
+                            int index = tableMoviesOverview
+                                .getSelectionIndex();
+
+                            System.out.println("Table select. id: "
+                                + index
+                                + " TableItem:"
+                                + tableMoviesOverview.getItem(index)
+                                + " id: "
+                                + tableMoviesOverview.getItem(index)
+                                    .getText(0));
+
+                            //es wurde ein Element aus Tabelle ausgewaehlt jetzt muss die
+                            //Detailansicht aktualisiert werden
+                            refreshMoviesDetail(tableMoviesOverview.getItem(index)
+                                                              .getText(0));
+
+                            if (logger.isDebugEnabled()) {
+                                logger
+                                    .debug("widgetSelected(SelectionEvent) - end");
+                            }
+                        }
+                    });
+                {
+                    tableMoviesOverview_ColumnID = new TableColumn(
+                        tableMoviesOverview,
+                        SWT.CENTER);
+                    tableMoviesOverview_ColumnID.setText(l
+                        .getString("movies.groupoverview.columnid"));
+                    tableMoviesOverview_ColumnID.setWidth(40);
+                }
+                {
+                    tableMoviesOverview_ColumnFName = new TableColumn(
+                        tableMoviesOverview,
+                        SWT.CENTER);
+                    tableMoviesOverview_ColumnFName.setText(l
+                        .getString("movies.groupoverview.columnfirstname"));
+                    tableMoviesOverview_ColumnFName.setWidth(120);
+                }
+                {
+                    tableMoviesOverview_ColumnLName = new TableColumn(
+                        tableMoviesOverview,
+                        SWT.CENTER);
+                    tableMoviesOverview_ColumnLName.setText(l
+                        .getString("movies.groupoverview.columnlastname"));
+                    tableMoviesOverview_ColumnLName.setWidth(120);
+                }
+            }
+            // table Actors Overview
+            // Search
+            {
+                //label for Search
+                labelMoviesSearch = new Label(groupMoviesOverview, SWT.NONE);
+                labelMoviesSearch.setText(l
+                        .getString("movies.groupoverview.searchlabel")
+                        + ":");
+                GridData label2LData = new GridData();
+                label2LData.horizontalSpan = 3;
+                labelMoviesSearch.setLayoutData(label2LData);
+
+                //text Search
+                textMoviesSearch = new Text(groupMoviesOverview, SWT.BORDER);
+                GridData text2LData = new GridData();
+                textMoviesSearch.addFocusListener(new FocusAdapter() {
+                    public void focusLost(FocusEvent evt) {
+                        if (logger.isDebugEnabled()) {
+                            logger.debug("focusLost(FocusEvent evt = " + evt + " "
+                                    + textMoviesSearch.getText() + ") - start");
+                        }
+
+                        refreshMoviesOverviewTable(textMoviesSearch.getText());
+
+                        if (logger.isDebugEnabled()) {
+                            logger.debug("focusLost(FocusEvent) - end");
+                        }
+                    }
+                });
+                textMoviesSearch.addListener(SWT.DefaultSelection, new Listener() {
+                    public void handleEvent(Event e) {
+                        if (logger.isDebugEnabled()) {
+                            logger.debug("handleEvent(Event e = " + e + " "
+                                    + textMoviesSearch.getText() + ") - start");
+                        }
+
+                        refreshMoviesOverviewTable(textMoviesSearch.getText());
+
+                        if (logger.isDebugEnabled()) {
+                            logger.debug("handleEvent(Event) - end");
+                        }
+                    }
+                    
+                });
+                text2LData.horizontalAlignment = GridData.FILL;
+                text2LData.horizontalSpan = 5;
+                text2LData.grabExcessHorizontalSpace = true;
+                textMoviesSearch.setLayoutData(text2LData);
+            }// Search                    
+        }
+    }
+
+
+    /**
+     * 
+     */
+    private void initMoviesDetail() {
+        // TODO Auto-generated method stub
+        
+    }
+
+    /**
+     * @param text
+     */
+    protected void refreshMoviesOverviewTable(String text) {
+        // TODO Auto-generated method stub
+        
+    }
+
+    /**
+     * @param text
+     */
+    protected void refreshMoviesDetail(String text) {
+        // TODO Auto-generated method stub
+        
+    }
+}

Added: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/movies.properties
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/movies.properties	2004-11-15 21:23:08 UTC (rev 137)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/movies.properties	2004-11-15 21:29:01 UTC (rev 138)
@@ -0,0 +1,33 @@
+error=Fehler
+movies.group.label=Darsteller
+
+movies.groupoverview.label =?berblick
+movies.groupoverview.searchlabel =Suche nach
+movies.groupoverview.columnid =ID
+movies.groupoverview.columnfirstname =Vorname
+movies.groupoverview.columnlastname =Nachname
+
+
+movies.groupdetail.label =Detail
+movies.groupdetail.labelid =Darsteller ID
+movies.groupdetail.labelfirstname =Vorname
+movies.groupdetail.labellastname =Nachname
+
+button.new=Neu
+button.edit=Bearbeiten
+button.delete=L?schen
+button.save=Speichern
+button.cancel=Abbruch
+
+movies.groupdetail.savebutton.warn.noname.title=Datensatz speichern
+movies.groupdetail.savebutton.warn.noname.msg=Der Datensatz kann nicht gespeichert werden. \n Bitte geben Sie eine volst?ndigen Namen an
+movies.groupdetail.savebutton.newok=Speichern des neuen VideoFormates erfolgreich.
+movies.groupdetail.savebutton.editok=?ndern des VideoFormates erfolgreich.
+movies.groupdetail.savebutton.errorsave=Datenbankfehler beim Speichern.
+movies.groupdetail.savebutton.errordb=Datenbankfehler beim Herstellen der Verbindung.(save).
+
+movies.groupdetail.deletebutton.question.header=Wirklich l?schen?
+movies.groupdetail.deletebutton.question.text=Wollen Sie den Datensatz {0} wirklich l?schen?
+movies.groupdetail.deletebutton.newok=Datensatz wurde erfolgreich gel?scht.
+movies.groupdetail.deletebutton.errorsave=Datenbankfehler beim L?schen.
+movies.groupdetail.deletebutton.errordb=Datenbankfehler beim Herstellen der Verbindung(del).
\ No newline at end of file



From rgriesch at sheep.berlios.de  Tue Nov 16 00:05:57 2004
From: rgriesch at sheep.berlios.de (Remo Griesch at BerliOS)
Date: Tue, 16 Nov 2004 00:05:57 +0100
Subject: [Provirent-svn-commit] r139 - in project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui: . language
Message-ID: <200411152305.iAFN5vFa004193@sheep.berlios.de>

Author: rgriesch
Date: 2004-11-16 00:05:56 +0100 (Tue, 16 Nov 2004)
New Revision: 139

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/actors.properties
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/directors.properties
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/movies.properties
Log:
Properties -ge?\195?\164ndert
CompositeMovie -erweitert 

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java	2004-11-15 21:29:01 UTC (rev 138)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java	2004-11-15 23:05:56 UTC (rev 139)
@@ -72,9 +72,19 @@
     
     private Table tableMoviesOverview;
     private TableColumn tableMoviesOverview_ColumnID;
-    private TableColumn tableMoviesOverview_ColumnFName;
-    private TableColumn tableMoviesOverview_ColumnLName;
-        
+    private TableColumn tableMoviesOverview_ColumnTitle;
+    private TableColumn tableMoviesOverview_ColumnSubtitles;
+    private TableColumn tableMoviesOverview_ColumnGenres;
+    private TableColumn tableMoviesOverview_ColumnActors;
+    private TableColumn tableMoviesOverview_ColumnDescription;
+    private TableColumn tableMoviesOverview_ColumnDate;
+    private TableColumn tableMoviesOverview_ColumnVideoformats;
+    private TableColumn tableMoviesOverview_ColumnAudioformats;
+    
+    private TableColumn tableMoviesOverview_Column;
+    
+    
+    
     private Group groupMovie;
     private Group groupMoviesOverview;
     private Group groupMoviesDetail;
@@ -219,7 +229,7 @@
      * 
      */
     private void initMoviesOverview() {
-	    //	  Group Actors Overview 
+	    //	  Group Movies Overview 
         {
             groupMoviesOverview = new Group(sashForm1,SWT.NONE);
             GridLayout group1Layout = new GridLayout();
@@ -294,23 +304,31 @@
                     tableMoviesOverview_ColumnID.setWidth(40);
                 }
                 {
-                    tableMoviesOverview_ColumnFName = new TableColumn(
+                    tableMoviesOverview_ColumnTitle = new TableColumn(
                         tableMoviesOverview,
                         SWT.CENTER);
-                    tableMoviesOverview_ColumnFName.setText(l
-                        .getString("movies.groupoverview.columnfirstname"));
-                    tableMoviesOverview_ColumnFName.setWidth(120);
+                    tableMoviesOverview_ColumnTitle.setText(l
+                        .getString("movies.groupoverview.columntitle"));
+                    tableMoviesOverview_ColumnTitle.setWidth(120);
                 }
                 {
-                    tableMoviesOverview_ColumnLName = new TableColumn(
+                    tableMoviesOverview_ColumnSubtitles = new TableColumn(
                         tableMoviesOverview,
                         SWT.CENTER);
-                    tableMoviesOverview_ColumnLName.setText(l
-                        .getString("movies.groupoverview.columnlastname"));
-                    tableMoviesOverview_ColumnLName.setWidth(120);
+                    tableMoviesOverview_ColumnSubtitles.setText(l
+                        .getString("movies.groupoverview.columnsubtitles"));
+                    tableMoviesOverview_ColumnSubtitles.setWidth(120);
                 }
+                {
+                    tableMoviesOverview_ColumnDate = new TableColumn(
+                        tableMoviesOverview,
+                        SWT.CENTER);
+                    tableMoviesOverview_ColumnDate.setText(l
+                        .getString("movies.groupoverview.columndate"));
+                    tableMoviesOverview_ColumnDate.setWidth(120);
+                }
             }
-            // table Actors Overview
+            // table Movies Overview
             // Search
             {
                 //label for Search
@@ -367,8 +385,21 @@
      * 
      */
     private void initMoviesDetail() {
-        // TODO Auto-generated method stub
-        
+        // Group Actors Detail
+        {
+            groupMoviesDetail = new Group(sashForm1, SWT.NONE);
+            GridLayout group2Layout = new GridLayout();
+            GridData group2LData = new GridData();
+            group2Layout.verticalSpacing = 15;
+            group2Layout.numColumns = 6;
+            groupMoviesDetail.setText(l.getString("movies.groupdetail.label"));   
+            FormData formData = new FormData();
+            groupMoviesDetail.setLayout(group2Layout);
+            formData.right = new FormAttachment(100, 100, -5);
+            formData.top = new FormAttachment(0, 100, 5);
+            formData.bottom = new FormAttachment(100, 100, -5);
+            groupMoviesDetail.setLayoutData(formData);
+        }
     }
 
     /**

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/actors.properties
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/actors.properties	2004-11-15 21:29:01 UTC (rev 138)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/actors.properties	2004-11-15 23:05:56 UTC (rev 139)
@@ -21,8 +21,8 @@
 
 actors.groupdetail.savebutton.warn.noname.title=Datensatz speichern
 actors.groupdetail.savebutton.warn.noname.msg=Der Datensatz kann nicht gespeichert werden. \n Bitte geben Sie eine volst?ndigen Namen an
-actors.groupdetail.savebutton.newok=Speichern des neuen VideoFormates erfolgreich.
-actors.groupdetail.savebutton.editok=?ndern des VideoFormates erfolgreich.
+actors.groupdetail.savebutton.newok=Speichern des neuen Darstellers erfolgreich.
+actors.groupdetail.savebutton.editok=?ndern des Darstellers erfolgreich.
 actors.groupdetail.savebutton.errorsave=Datenbankfehler beim Speichern.
 actors.groupdetail.savebutton.errordb=Datenbankfehler beim Herstellen der Verbindung.(save).
 

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/directors.properties
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/directors.properties	2004-11-15 21:29:01 UTC (rev 138)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/directors.properties	2004-11-15 23:05:56 UTC (rev 139)
@@ -21,8 +21,8 @@
 
 directors.groupdetail.savebutton.warn.noname.title=Datensatz speichern
 directors.groupdetail.savebutton.warn.noname.msg=Der Datensatz kann nicht gespeichert werden. \n Bitte geben Sie eine volst?ndigen Namen an
-directors.groupdetail.savebutton.newok=Speichern des neuen VideoFormates erfolgreich.
-directors.groupdetail.savebutton.editok=?ndern des VideoFormates erfolgreich.
+directors.groupdetail.savebutton.newok=Speichern des neuen Regisseurs erfolgreich.
+directors.groupdetail.savebutton.editok=?ndern des Regisseurs erfolgreich.
 directors.groupdetail.savebutton.errorsave=Datenbankfehler beim Speichern.
 directors.groupdetail.savebutton.errordb=Datenbankfehler beim Herstellen der Verbindung.(save).
 

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/movies.properties
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/movies.properties	2004-11-15 21:29:01 UTC (rev 138)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/movies.properties	2004-11-15 23:05:56 UTC (rev 139)
@@ -1,11 +1,12 @@
 error=Fehler
-movies.group.label=Darsteller
+movies.group.label=Filme
 
 movies.groupoverview.label =?berblick
 movies.groupoverview.searchlabel =Suche nach
 movies.groupoverview.columnid =ID
-movies.groupoverview.columnfirstname =Vorname
-movies.groupoverview.columnlastname =Nachname
+movies.groupoverview.columntitle =Titel
+movies.groupoverview.columnsubtitles =Untertitel
+movies.groupoverview.columndate =Erscheinungsdatum
 
 
 movies.groupdetail.label =Detail
@@ -21,8 +22,8 @@
 
 movies.groupdetail.savebutton.warn.noname.title=Datensatz speichern
 movies.groupdetail.savebutton.warn.noname.msg=Der Datensatz kann nicht gespeichert werden. \n Bitte geben Sie eine volst?ndigen Namen an
-movies.groupdetail.savebutton.newok=Speichern des neuen VideoFormates erfolgreich.
-movies.groupdetail.savebutton.editok=?ndern des VideoFormates erfolgreich.
+movies.groupdetail.savebutton.newok=Speichern des neuen Films erfolgreich.
+movies.groupdetail.savebutton.editok=?ndern des Films erfolgreich.
 movies.groupdetail.savebutton.errorsave=Datenbankfehler beim Speichern.
 movies.groupdetail.savebutton.errordb=Datenbankfehler beim Herstellen der Verbindung.(save).
 



From pschneider at sheep.berlios.de  Tue Nov 16 00:11:00 2004
From: pschneider at sheep.berlios.de (Philipp Schneider at BerliOS)
Date: Tue, 16 Nov 2004 00:11:00 +0100
Subject: [Provirent-svn-commit] r140 - project_src/provirent_hibernate/src/test/provirent/hibernate
Message-ID: <200411152311.iAFNB0Fp004314@sheep.berlios.de>

Author: pschneider
Date: 2004-11-16 00:10:59 +0100 (Tue, 16 Nov 2004)
New Revision: 140

Added:
   project_src/provirent_hibernate/src/test/provirent/hibernate/logo.gif
   project_src/provirent_hibernate/src/test/provirent/hibernate/pic.gif
Modified:
   project_src/provirent_hibernate/src/test/provirent/hibernate/TestImage.java
Log:
- Bildertest werden jetzt bilder richtig in datenbank gespeichert

Modified: project_src/provirent_hibernate/src/test/provirent/hibernate/TestImage.java
===================================================================
--- project_src/provirent_hibernate/src/test/provirent/hibernate/TestImage.java	2004-11-15 23:05:56 UTC (rev 139)
+++ project_src/provirent_hibernate/src/test/provirent/hibernate/TestImage.java	2004-11-15 23:10:59 UTC (rev 140)
@@ -32,6 +32,9 @@
  */
 package test.provirent.hibernate;
 
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.InputStream;
 import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;
@@ -100,35 +103,36 @@
                 assertTrue("Connected to Db? ", s.isConnected());
                 assertTrue("Db Open? ", s.isOpen());
 
+
+
+
                 //cretae new objects
                 List Images = new ArrayList();
 
                 Image myd1 = new Image();
-                myd1.setImageFile(new byte[]{1,2,3,4});
+                myd1.setImageFile(new byte[] { 1, 2, 3, 4 });
                 myd1.setImageFileDescription("Bild 1");
                 myd1.setImageFileName("image1.jpg");
                 myd1.setImageFileSize(123);
-                
+
                 Image myd2 = new Image();
-                myd2.setImageFile(new byte[]{5,6,7,8});
+                myd2.setImageFile(new byte[] { 5, 6, 7, 8 });
                 myd2.setImageFileDescription("Bild 2");
                 myd2.setImageFileName("image2.jpg");
                 myd2.setImageFileSize(123);
 
                 Image myd3 = new Image();
-                myd3.setImageFile(new byte[]{9,10,11,12});
+                myd3.setImageFile(new byte[] { 9, 10, 11, 12 });
                 myd3.setImageFileDescription("Bild 3");
                 myd3.setImageFileName("image3.jpg");
                 myd3.setImageFileSize(123);
 
                 Image myd4 = new Image();
-                myd4.setImageFile(new byte[]{13,14,15,16});
+                myd4.setImageFile(new byte[] { 13, 14, 15, 16 });
                 myd4.setImageFileDescription("Bild 4");
                 myd4.setImageFileName("image4.jpg");
                 myd4.setImageFileSize(123);
 
-                
-                
                 Images.add(myd1);
                 Images.add(myd2);
                 Images.add(myd3);
@@ -234,38 +238,57 @@
 
                 //cretae new objects
                 List Images = new ArrayList();
+                File file = new File(this.getClass()
+                        .getResource("logo.gif").getFile());
+                
+                InputStream is = new  FileInputStream(file);
 
+                long length = file.length();
+                
+                byte[] bytes = new byte[(int)length];
+
+                // Read in the bytes
+                int offset = 0;
+                int numRead = 0;
+                while (offset < bytes.length
+                        && (numRead = is.read(bytes, offset, bytes.length
+                                - offset)) >= 0) {
+                    offset += numRead;
+                }
+
+                is.close();                
+                
+                System.out.println("bytes l?nge "+bytes.length );
+                
                 Image myd1 = new Image();
-                myd1.setImageFile(new byte[]{1,2,3,4});
+                myd1.setImageFile(bytes);
                 myd1.setImageFileDescription("Bild 1");
                 myd1.setImageFileName("image1.jpg");
                 myd1.setImageFileSize(123);
-                
+
                 Image myd2 = new Image();
-                myd2.setImageFile(new byte[]{5,6,7,8});
+                myd2.setImageFile(bytes);
                 myd2.setImageFileDescription("Bild 2");
                 myd2.setImageFileName("image2.jpg");
                 myd2.setImageFileSize(123);
 
                 Image myd3 = new Image();
-                myd3.setImageFile(new byte[]{9,10,11,12});
+                myd3.setImageFile(bytes);
                 myd3.setImageFileDescription("Bild 3");
                 myd3.setImageFileName("image3.jpg");
                 myd3.setImageFileSize(123);
 
                 Image myd4 = new Image();
-                myd4.setImageFile(new byte[]{13,14,15,16});
+                myd4.setImageFile(bytes);
                 myd4.setImageFileDescription("Bild 4");
                 myd4.setImageFileName("image4.jpg");
                 myd4.setImageFileSize(123);
 
-                
-                
                 Images.add(myd1);
                 Images.add(myd2);
                 Images.add(myd3);
                 Images.add(myd4);
-                
+
                 List ids = new ArrayList();
 
                 //save objects

Added: project_src/provirent_hibernate/src/test/provirent/hibernate/logo.gif
===================================================================
(Binary files differ)


Property changes on: project_src/provirent_hibernate/src/test/provirent/hibernate/logo.gif
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: project_src/provirent_hibernate/src/test/provirent/hibernate/pic.gif
===================================================================
(Binary files differ)


Property changes on: project_src/provirent_hibernate/src/test/provirent/hibernate/pic.gif
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream



From pschneider at sheep.berlios.de  Tue Nov 16 00:15:04 2004
From: pschneider at sheep.berlios.de (Philipp Schneider at BerliOS)
Date: Tue, 16 Nov 2004 00:15:04 +0100
Subject: [Provirent-svn-commit] r141 - project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui
Message-ID: <200411152315.iAFNF4tw004490@sheep.berlios.de>

Author: pschneider
Date: 2004-11-16 00:15:02 +0100 (Tue, 16 Nov 2004)
New Revision: 141

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeImage.java
Log:
- Bilder werden in Tabelle?\195?\188bersicht angezeigt
- wenn kein bild vorhanden wird bildanzeige geleert

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeImage.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeImage.java	2004-11-15 23:10:59 UTC (rev 140)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeImage.java	2004-11-15 23:15:02 UTC (rev 141)
@@ -147,7 +147,7 @@
 
     private Label labelImagesFName;
 
-    private Label labelImagesLName;
+    private Label labelImagesDescription;
 
     protected int mode_image;
 
@@ -433,21 +433,22 @@
             textImagesName.setLayoutData(text1LData2);
         }
         {
-            labelImagesLName = new Label(groupImagesDetail, SWT.NONE);
-            labelImagesLName.setText(l
+            labelImagesDescription = new Label(groupImagesDetail, SWT.NONE);
+            labelImagesDescription.setText(l
                     .getString("images.groupdetail.labeldescription")
                     + ":");
-            labelImagesLName.setSize(125, 15);
+            labelImagesDescription.setSize(125, 15);
             GridData labelImagesFileLData1 = new GridData();
             labelImagesFileLData1.widthHint = 125;
             labelImagesFileLData1.heightHint = 15;
             labelImagesFileLData1.horizontalSpan = 2;
             labelImagesFileLData1.verticalAlignment = GridData.BEGINNING;
-            labelImagesLName.setLayoutData(labelImagesFileLData1);
+            labelImagesDescription.setLayoutData(labelImagesFileLData1);
         }
         {
             textImagesDescription = new Text(groupImagesDetail, SWT.MULTI
                     | SWT.V_SCROLL | SWT.BORDER);
+            textImagesDescription.setEnabled(false);
             GridData text1LData3 = new GridData();
             text1LData3.horizontalAlignment = GridData.FILL;
             text1LData3.heightHint = 36;
@@ -469,8 +470,6 @@
         }
         {
             textFileUrl = new Text(groupImagesDetail, SWT.NONE);
-            textFileUrl.setText(l
-                    .getString("images.groupdetail.labelselecteddatabase"));
             textFileUrl.setEditable(false);
             GridData text1LData = new GridData();
             text1LData.widthHint = 105;
@@ -648,10 +647,14 @@
                         textImagesID.setText("");
                         textImagesName.setText("");
                         textImagesDescription.setText("");
+                        
                         textImagesName.setEditable(true);
                         textImagesDescription.setEditable(true);
                         buttonSelectFile.setEnabled(true);
-
+                        
+                        ideaImage=scaledImage = null;
+                        canvasImg.redraw();
+                        
                         buttonImageCancel.setEnabled(true);
                         buttonImageSave.setEnabled(true);
                         buttonImageNew.setEnabled(false);
@@ -674,14 +677,14 @@
                         mode_image = ManagementGui.MODE_EDIT;
 
                         textImagesID.setEditable(false);
-                        textImagesName.setText("");
                         textImagesName.setEditable(true);
-                        textImagesDescription.setText("");
+                        
                         textImagesDescription.setEditable(true);
                         textImagesName.setFocus();
 
                         buttonImageCancel.setEnabled(true);
                         buttonImageSave.setEnabled(true);
+                        
                         buttonImageNew.setEnabled(false);
                         buttonImageEdit.setEnabled(false);
                         buttonImageDelete.setEnabled(false);
@@ -1134,11 +1137,19 @@
         textImagesID.setText(object.getImageId() + "");
         textImagesName.setText(object.getImageFileName());
         textImagesDescription.setText(object.getImageFileDescription());
-
+        
+        textFileUrl.setText(l
+                .getString("images.groupdetail.labelselecteddatabase"));
+        
         if (object.getImageFile() != null && object.getImageFile().length > 0) {
+            System.out.println("Versuche zu zeichnen");
             scaledImage = ideaImage = new Image(getDisplay(),
                     new ByteArrayInputStream(object.getImageFile()));
             canvasImg.redraw();
+        }else{
+            statusLine.setStatus(StatusLineStyledText.STATUS_WARN,"Bilddaten k?nnen f?r Bild "+ object.getImageFileName() +"nicht geladen werden.");
+            scaledImage = ideaImage = null;
+            canvasImg.redraw();
         }
 
         canvasImg.redraw();
@@ -1185,18 +1196,14 @@
                     .get(i);
             item = new TableItem(tableImagesOverview, SWT.NONE);
             
-            /*
+            
             if (o.getImageFile() != null && o.getImageFile().length > 0) {
-            System.out.println("id"+o.getImageId()+" byte:"+o.getImageFile().toString());
-            ImageData imgdata = new ImageData(new ByteArrayInputStream((o.getImageFile())));
-            imgdata.scaledTo(10,10);
- 
-            Image img = new Image(getDisplay(),imgdata);
-            System.out.println("Gr??e: "+img.getBounds());
+                System.out.println("id"+o.getImageId()+" byte:"+o.getImageFile().toString());
+                
             
-                item.setImage(0, new Image(getDisplay(),imgdata));
+                item.setImage(0, createThumbnailImage(o.getImageFile()));
             }            
-            */
+            
             item.setText(new String[] { o.getImageId() + "",
                     o.getImageFileName(), o.getImageFileDescription() });
 
@@ -1204,15 +1211,33 @@
     }
     
     private Image createThumbnailImage(byte[] data){
-        ImageData imgdata = new ImageData(new ByteArrayInputStream(data));
-        int maxheight = 10;
-        int maxwidth = 10;
-        imgdata.scaledTo(maxwidth,maxheight);
-            /**
-             * @todo hier noch einen algorithmus zum verkleinern
-             */
+        
+        int maxheight = 75;
+        int maxwidth = 75;
 
-        return new Image(getDisplay(),imgdata);
+        final Image image = new Image(getDisplay(),new ByteArrayInputStream(data));
+        final int width = image.getBounds().width;
+        final int height = image.getBounds().height;
+        float scalefactor = 1;
         
+        if (width > maxwidth) {
+            scalefactor = (float)maxwidth/width;
+        }
+        if (height > maxheight) {
+            if ( ((float)maxheight/height)< scalefactor ){
+                scalefactor = ((float)maxheight/height);
+            }
+            
+        }
+        
+        final Image scaledtemp = new Image(getDisplay(),
+                image.getImageData().scaledTo((int)(width*scalefactor),(int)(height*scalefactor)));
+        
+
+        System.out.println("Gr??e: "+scaledtemp.getBounds());
+        
+        
+        return scaledtemp;
+        
     }
 }
\ No newline at end of file



From rgriesch at sheep.berlios.de  Tue Nov 16 22:27:04 2004
From: rgriesch at sheep.berlios.de (Remo Griesch at BerliOS)
Date: Tue, 16 Nov 2004 22:27:04 +0100
Subject: [Provirent-svn-commit] r142 - in project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui: . language
Message-ID: <200411162127.iAGLR4GM007974@sheep.berlios.de>

Author: rgriesch
Date: 2004-11-16 22:27:03 +0100 (Tue, 16 Nov 2004)
New Revision: 142

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/movies.properties
Log:
Composite Move - weiter bearbeitet
               - 2.Tabelle auf Overview Seite
properties     - um entsprechende Eintr?\195?\164ge erweitert

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java	2004-11-15 23:15:02 UTC (rev 141)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java	2004-11-16 21:27:03 UTC (rev 142)
@@ -71,20 +71,21 @@
     private final static int MODE_EDIT = 2;
     
     private Table tableMoviesOverview;
+    private Table tableMoviesOverviewDetail;
     private TableColumn tableMoviesOverview_ColumnID;
     private TableColumn tableMoviesOverview_ColumnTitle;
     private TableColumn tableMoviesOverview_ColumnSubtitles;
-    private TableColumn tableMoviesOverview_ColumnGenres;
-    private TableColumn tableMoviesOverview_ColumnActors;
-    private TableColumn tableMoviesOverview_ColumnDescription;
     private TableColumn tableMoviesOverview_ColumnDate;
-    private TableColumn tableMoviesOverview_ColumnVideoformats;
-    private TableColumn tableMoviesOverview_ColumnAudioformats;
+    private TableColumn tableMoviesOverviewDetail_ColumnGenres;
+    private TableColumn tableMoviesOverviewDetail_ColumnActors;
+    private TableColumn tableMoviesOverviewDetail_ColumnVideoformats;
+    private TableColumn tableMoviesOverviewDetail_ColumnAudioformats;
+    private TableColumn tableMoviesOverviewDetail_ColumnLanguages;   
+    private TableColumn tableMoviesOverviewDetail_ColumnDescription;
+    private TableColumn tableMoviesOverviewDetail_ColumnImages;
     
-    private TableColumn tableMoviesOverview_Column;
     
     
-    
     private Group groupMovie;
     private Group groupMoviesOverview;
     private Group groupMoviesDetail;
@@ -327,8 +328,121 @@
                         .getString("movies.groupoverview.columndate"));
                     tableMoviesOverview_ColumnDate.setWidth(120);
                 }
-            }
-            // table Movies Overview
+            }// table Movies Overview
+            //Table Movies Overview Detail
+            tableMoviesOverviewDetail = new Table(
+                    groupMoviesOverview,
+                    SWT.SINGLE
+                        | SWT.FULL_SELECTION
+                        | SWT.V_SCROLL | SWT.BORDER);
+                GridData tableMoviesOverviewLData = new GridData();
+                tableMoviesOverviewDetail.setHeaderVisible(true);
+                tableMoviesOverviewDetail.setLinesVisible(true);
+                tableMoviesOverviewLData.horizontalAlignment = GridData.FILL;
+                tableMoviesOverviewLData.verticalAlignment = GridData.FILL;
+                tableMoviesOverviewLData.horizontalSpan = 8;
+                tableMoviesOverviewLData.grabExcessHorizontalSpace = true;
+                tableMoviesOverviewLData.grabExcessVerticalSpace = true;
+                tableMoviesOverviewDetail.setLayoutData(tableMoviesOverviewLData);
+                tableMoviesOverviewDetail.addFocusListener(new FocusAdapter() {
+                        public void focusLost(FocusEvent evt) {
+                            System.out
+                                .println("tableMoviesOverviewDetail.focusLost, event="
+                                    + evt);
+                        }
+                        public void focusGained(FocusEvent evt) {
+                            System.out
+                                .println("tableMoviesOverviewDetail.focusGained, event="
+                                    + evt);
+                        }
+                    });
+                tableMoviesOverviewDetail.addSelectionListener(new SelectionAdapter() {
+                        public void widgetSelected(SelectionEvent evt) {
+                            if (logger.isDebugEnabled()) {
+                                logger
+                                    .debug("widgetSelected(SelectionEvent evt = "
+                                        + evt
+                                        + ") - start");
+                            }
+
+                            int index = tableMoviesOverview
+                                .getSelectionIndex();
+
+                            System.out.println("Table select. id: "
+                                + index
+                                + " TableItem:"
+                                + tableMoviesOverviewDetail.getItem(index)
+                                + " id: "
+                                + tableMoviesOverviewDetail.getItem(index)
+                                    .getText(0));
+
+                            //es wurde ein Element aus Tabelle ausgewaehlt jetzt muss die
+                            //Detailansicht aktualisiert werden
+                            //folgende Zeile nicht notwendig
+                            //refreshMoviesDetail(tableMoviesOverview.getItem(index).getText(0));
+
+                            if (logger.isDebugEnabled()) {
+                                logger
+                                    .debug("widgetSelected(SelectionEvent) - end");
+                            }
+                        }
+                    });
+                {
+                    tableMoviesOverviewDetail_ColumnGenres = new TableColumn(
+                        tableMoviesOverviewDetail,
+                        SWT.CENTER);
+                    tableMoviesOverviewDetail_ColumnGenres.setText(l
+                        .getString("movies.groupoverviewdetail.columngenres"));
+                    tableMoviesOverviewDetail_ColumnGenres.setWidth(80);
+                }
+                {
+                    tableMoviesOverviewDetail_ColumnActors = new TableColumn(
+                        tableMoviesOverviewDetail,
+                        SWT.CENTER);
+                    tableMoviesOverviewDetail_ColumnActors.setText(l
+                        .getString("movies.groupoverviewdetail.columnactors"));
+                    tableMoviesOverviewDetail_ColumnActors.setWidth(80);
+                }
+                {
+                    tableMoviesOverviewDetail_ColumnVideoformats = new TableColumn(
+                        tableMoviesOverviewDetail,
+                        SWT.CENTER);
+                    tableMoviesOverviewDetail_ColumnVideoformats.setText(l
+                        .getString("movies.groupoverviewdetail.columnvideoformats"));
+                    tableMoviesOverviewDetail_ColumnVideoformats.setWidth(80);
+                }
+                {
+                    tableMoviesOverviewDetail_ColumnAudioformats = new TableColumn(
+                        tableMoviesOverviewDetail,
+                        SWT.CENTER);
+                    tableMoviesOverviewDetail_ColumnAudioformats.setText(l
+                        .getString("movies.groupoverviewdetail.columnaudioformats"));
+                    tableMoviesOverviewDetail_ColumnAudioformats.setWidth(80);
+                }
+                {
+                    tableMoviesOverviewDetail_ColumnLanguages = new TableColumn(
+                        tableMoviesOverviewDetail,
+                        SWT.CENTER);
+                    tableMoviesOverviewDetail_ColumnLanguages.setText(l
+                        .getString("movies.groupoverviewdetail.columnlanguages"));
+                    tableMoviesOverviewDetail_ColumnLanguages.setWidth(80);
+                }
+                {
+                    tableMoviesOverviewDetail_ColumnDescription = new TableColumn(
+                        tableMoviesOverviewDetail,
+                        SWT.CENTER);
+                    tableMoviesOverviewDetail_ColumnDescription.setText(l
+                        .getString("movies.groupoverviewdetail.columndescription"));
+                    tableMoviesOverviewDetail_ColumnDescription.setWidth(80);
+                }
+                {
+                    tableMoviesOverviewDetail_ColumnImages = new TableColumn(
+                        tableMoviesOverviewDetail,
+                        SWT.CENTER);
+                    tableMoviesOverviewDetail_ColumnImages.setText(l
+                        .getString("movies.groupoverviewdetail.columnimages"));
+                    tableMoviesOverviewDetail_ColumnImages.setWidth(80);
+                }
             // Search
             {
                 //label for Search

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/movies.properties
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/movies.properties	2004-11-15 23:15:02 UTC (rev 141)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/movies.properties	2004-11-16 21:27:03 UTC (rev 142)
@@ -7,8 +7,14 @@
 movies.groupoverview.columntitle =Titel
 movies.groupoverview.columnsubtitles =Untertitel
 movies.groupoverview.columndate =Erscheinungsdatum
+movies.groupoverviewdetail.columngenres =Genre
+movies.groupoverviewdetail.columnactors =Dartsteller
+movies.groupoverviewdetail.columnvideoformats =Videoformate
+movies.groupoverviewdetail.columnaudioformats =Audioformate
+movies.groupoverviewdetail.columnlanguages =Sprachen
+movies.groupoverviewdetail.columndescription =Beschreibung
+movies.groupoverviewdetail.columnimages =Bilder
 
-
 movies.groupdetail.label =Detail
 movies.groupdetail.labelid =Darsteller ID
 movies.groupdetail.labelfirstname =Vorname



From rgriesch at sheep.berlios.de  Wed Nov 17 00:25:03 2004
From: rgriesch at sheep.berlios.de (Remo Griesch at BerliOS)
Date: Wed, 17 Nov 2004 00:25:03 +0100
Subject: [Provirent-svn-commit] r143 - in project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui: . language
Message-ID: <200411162325.iAGNP3wD012274@sheep.berlios.de>

Author: rgriesch
Date: 2004-11-17 00:24:58 +0100 (Wed, 17 Nov 2004)
New Revision: 143

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeActors.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/movies.properties
Log:
Composite Move - weiter bearbeitet
               - die ersten labels und textfelder eingef.
properties     - um entsprechende Eintr?\195?\164ge erweitert

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeActors.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeActors.java	2004-11-16 21:27:03 UTC (rev 142)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeActors.java	2004-11-16 23:24:58 UTC (rev 143)
@@ -368,7 +368,7 @@
             formData.bottom = new FormAttachment(100, 100, -5);
             groupActorsDetail.setLayoutData(formData);
         }
-        	// labels and buttons for detail
+        	// labels and text for detail
         	{
         	    labelActorsID = new Label(groupActorsDetail, SWT.NONE);
         	    labelActorsID.setText(l
@@ -439,7 +439,7 @@
         	    text1LData3.horizontalSpan = 4;
         	    text1LData3.grabExcessHorizontalSpace = true;
         	    textActorsLName.setLayoutData(text1LData3);
-        	}// label and buttons for detail      
+        	}// label and text for detail      
         	// buttons for detail
         	{
         	    compositeButtons = new Composite(groupActorsDetail, SWT.EMBEDDED);

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java	2004-11-16 21:27:03 UTC (rev 142)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java	2004-11-16 23:24:58 UTC (rev 143)
@@ -92,13 +92,11 @@
     
     private Text textMoviesSearch;
     private Text textMoviesID;
-    private Text textMoviesFName;
-    private Text textMoviesLName;
+    private Text textMoviesTitle;
     
     private Label labelMoviesSearch;
     private Label labelMoviesID;
-    private Label labelMoviesFName;
-    private Label labelMoviesLName;
+    private Label labelMoviesTitle;
     
     private Button buttonMoviesNew;
     private Button buttonMoviesSave;
@@ -514,6 +512,55 @@
             formData.bottom = new FormAttachment(100, 100, -5);
             groupMoviesDetail.setLayoutData(formData);
         }
+//      labels and text for detail
+    	{
+    	    labelMoviesID = new Label(groupMoviesDetail, SWT.NONE);
+    	    labelMoviesID.setText(l
+    	            .getString("movies.groupdetail.labelid")
+    	            + ":");
+    	    labelMoviesID.setSize(125, 15);
+    	    GridData formData2 = new GridData();
+    	    formData2.widthHint = 125;
+    	    formData2.heightHint = 15;
+    	    formData2.horizontalSpan = 2;
+    	    labelMoviesID.setLayoutData(formData2);
+    	}
+    	{
+    	    textMoviesID = new Text(
+    	            groupMoviesDetail,
+    	            SWT.READ_ONLY | SWT.BORDER);
+    	    GridData text1LData1 = new GridData();
+    	    text1LData1.horizontalAlignment = GridData.FILL;
+    	    text1LData1.heightHint = 13;
+    	    text1LData1.horizontalSpan = 4;
+    	    text1LData1.grabExcessHorizontalSpace = true;
+    	    textMoviesID.setLayoutData(text1LData1);
+    	}
+    	{
+            labelMoviesTitle = new Label(
+                groupMoviesDetail,
+                SWT.NONE);
+            labelMoviesTitle.setText(l
+                .getString("movies.groupdetail.labeltitle")
+                + ":");
+            labelMoviesTitle.setSize(125, 15);
+            GridData labelActorNameLData = new GridData();
+            labelActorNameLData.widthHint = 125;
+            labelActorNameLData.heightHint = 15;
+            labelActorNameLData.horizontalSpan = 2;
+            labelMoviesTitle
+                .setLayoutData(labelActorNameLData);
+        }
+        {
+    	    textMoviesTitle = new Text(groupMoviesDetail,
+    	            SWT.READ_ONLY | SWT.BORDER);
+    	    GridData text1LData2 = new GridData();
+    	    text1LData2.horizontalAlignment = GridData.FILL;
+    	    text1LData2.heightHint = 13;
+    	    text1LData2.horizontalSpan = 4;
+    	    text1LData2.grabExcessHorizontalSpace = true;
+    	    textMoviesTitle.setLayoutData(text1LData2);        
+    	}// label and buttons for detail      
     }
 
     /**

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/movies.properties
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/movies.properties	2004-11-16 21:27:03 UTC (rev 142)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/movies.properties	2004-11-16 23:24:58 UTC (rev 143)
@@ -16,10 +16,10 @@
 movies.groupoverviewdetail.columnimages =Bilder
 
 movies.groupdetail.label =Detail
-movies.groupdetail.labelid =Darsteller ID
-movies.groupdetail.labelfirstname =Vorname
-movies.groupdetail.labellastname =Nachname
+movies.groupdetail.labelid =Film ID
+movies.groupdetail.labeltitle =Titel
 
+
 button.new=Neu
 button.edit=Bearbeiten
 button.delete=L?schen



From rgriesch at sheep.berlios.de  Wed Nov 17 11:16:28 2004
From: rgriesch at sheep.berlios.de (Remo Griesch at BerliOS)
Date: Wed, 17 Nov 2004 11:16:28 +0100
Subject: [Provirent-svn-commit] r144 - in project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui: . language
Message-ID: <200411171016.iAHAGSDB007156@sheep.berlios.de>

Author: rgriesch
Date: 2004-11-17 11:16:25 +0100 (Wed, 17 Nov 2004)
New Revision: 144

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/movies.properties
Log:
Composite Movie  - Layout fertiggestellt
                 - Funktionalit?\195?\164t angefangen
properties       - entsprechend erweitert

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java	2004-11-16 23:24:58 UTC (rev 143)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java	2004-11-17 10:16:25 UTC (rev 144)
@@ -31,6 +31,7 @@
 
 import com.cloudgarden.resource.SWTResourceManager;
 
+import de.hsharz.provirent.objects.Actor;
 import de.hsharz.provirent.objects.Movie;
 import de.hsharz.provirent.persistence.DataBaseException;
 import de.hsharz.provirent.persistence.Database;
@@ -78,6 +79,7 @@
     private TableColumn tableMoviesOverview_ColumnDate;
     private TableColumn tableMoviesOverviewDetail_ColumnGenres;
     private TableColumn tableMoviesOverviewDetail_ColumnActors;
+    private TableColumn tableMoviesOverviewDetail_ColumnDirectors;
     private TableColumn tableMoviesOverviewDetail_ColumnVideoformats;
     private TableColumn tableMoviesOverviewDetail_ColumnAudioformats;
     private TableColumn tableMoviesOverviewDetail_ColumnLanguages;   
@@ -93,10 +95,13 @@
     private Text textMoviesSearch;
     private Text textMoviesID;
     private Text textMoviesTitle;
+    private Text textMoviesDate;
     
     private Label labelMoviesSearch;
     private Label labelMoviesID;
     private Label labelMoviesTitle;
+    private Label labelMoviesDate;
+    private Label labelMoviesAdvice;
     
     private Button buttonMoviesNew;
     private Button buttonMoviesSave;
@@ -104,10 +109,22 @@
     private Button buttonMoviesCancel;
     private Button buttonMoviesDelete;
     private Button buttonMoviesFill;
+    private Button buttonMoviesEditActors;
+    private Button buttonMoviesEditDirectors;
+    private Button buttonMoviesEditGenres;
+    private Button buttonMoviesEditLanguages;
+    private Button buttonMoviesEditSubtitles;
+    private Button buttonMoviesEditAudioformats;
+    private Button buttonMoviesEditVideoformats;
+    private Button buttonMoviesEditImages;
+    private Button buttonMoviesEditDescription;
     
+    
+    
     private SashForm sashForm1;
     
     private Composite parent;
+    private Composite compositeButtons;
     
     protected int mode_actor;
     
@@ -386,6 +403,14 @@
                         }
                     });
                 {
+                    tableMoviesOverviewDetail_ColumnDirectors = new TableColumn(
+                        tableMoviesOverviewDetail,
+                        SWT.CENTER);
+                    tableMoviesOverviewDetail_ColumnDirectors.setText(l
+                        .getString("movies.groupoverviewdetail.columndirectors"));
+                    tableMoviesOverviewDetail_ColumnDirectors.setWidth(80);
+                }
+                {
                     tableMoviesOverviewDetail_ColumnGenres = new TableColumn(
                         tableMoviesOverviewDetail,
                         SWT.CENTER);
@@ -560,10 +585,530 @@
     	    text1LData2.horizontalSpan = 4;
     	    text1LData2.grabExcessHorizontalSpace = true;
     	    textMoviesTitle.setLayoutData(text1LData2);        
-    	}// label and buttons for detail      
+    	}     
+        {
+            labelMoviesDate = new Label(
+                groupMoviesDetail,
+                SWT.NONE);
+            labelMoviesDate.setText(l
+                .getString("movies.groupdetail.labeldate")
+                + ":");
+            labelMoviesDate.setSize(125, 15);
+            GridData labelActorNameLData = new GridData();
+            labelActorNameLData.widthHint = 125;
+            labelActorNameLData.heightHint = 15;
+            labelActorNameLData.horizontalSpan = 2;
+            labelMoviesDate
+                .setLayoutData(labelActorNameLData);
+        }
+        {
+    	    textMoviesDate = new Text(groupMoviesDetail,
+    	            SWT.READ_ONLY | SWT.BORDER);
+    	    GridData text1LData2 = new GridData();
+    	    text1LData2.horizontalAlignment = GridData.FILL;
+    	    text1LData2.heightHint = 13;
+    	    text1LData2.horizontalSpan = 4;
+    	    text1LData2.grabExcessHorizontalSpace = true;
+    	    textMoviesDate.setLayoutData(text1LData2);        
+    	    textMoviesDate.setText(l
+                .getString("movies.groupdetail.textdate"));
+        }// label and text for detail
+        //labels and buttons for Detail
+        {
+    	    labelMoviesAdvice = new Label(groupMoviesDetail, SWT.NONE);
+    	    labelMoviesAdvice.setText(l
+    	            .getString("movies.groupdetail.labeladvice")
+    	            + ":");
+    	    GridData formData2 = new GridData();
+    	    formData2.horizontalSpan = 6;
+    	    formData2.horizontalAlignment = GridData.FILL;
+    	    formData2.grabExcessHorizontalSpace = true;
+    	    formData2.verticalSpan = 3;
+    	    labelMoviesAdvice.setLayoutData(formData2);
+    	}
+        {
+            buttonMoviesEditDescription = new Button(groupMoviesDetail
+                    , SWT.NONE);
+            buttonMoviesEditDescription.setText(l
+                .getString("movies.button.editdescription"));
+            buttonMoviesEditDescription.setEnabled(false);
+            GridData text1LData2 = new GridData();
+    	    text1LData2.horizontalAlignment = GridData.FILL;
+    	    text1LData2.heightHint = 20;
+    	    text1LData2.horizontalSpan = 1;
+    	    text1LData2.grabExcessHorizontalSpace = true;
+    	    buttonMoviesEditDescription.setLayoutData(text1LData2);        
+            buttonMoviesEditDescription.addSelectionListener(new SelectionAdapter() {
+                public void widgetSelected(SelectionEvent evt) {
+                   // TODO
+                    
+                }
+            });
+        }
+        {
+            buttonMoviesEditDirectors = new Button(groupMoviesDetail
+                    , SWT.NONE);
+            buttonMoviesEditDirectors.setText(l
+                .getString("movies.button.editdirectors"));
+            buttonMoviesEditDirectors.setEnabled(false);
+            GridData text1LData2 = new GridData();
+    	    text1LData2.horizontalAlignment = GridData.FILL;
+    	    text1LData2.heightHint = 20;
+    	    text1LData2.horizontalSpan = 5;
+    	    text1LData2.grabExcessHorizontalSpace = true;
+    	    buttonMoviesEditDirectors.setLayoutData(text1LData2);        
+            buttonMoviesEditDirectors.addSelectionListener(new SelectionAdapter() {
+                public void widgetSelected(SelectionEvent evt) {
+                   // TODO
+                    
+                }
+            });  
+        }
+        {
+            buttonMoviesEditActors = new Button(groupMoviesDetail
+                    , SWT.NONE);
+            buttonMoviesEditActors.setText(l
+                .getString("movies.button.editactors"));
+            buttonMoviesEditActors.setEnabled(false);
+            GridData text1LData2 = new GridData();
+    	    text1LData2.horizontalAlignment = GridData.FILL;
+    	    text1LData2.heightHint = 20;
+    	    text1LData2.horizontalSpan = 1;
+    	    text1LData2.grabExcessHorizontalSpace = true;
+    	    buttonMoviesEditActors.setLayoutData(text1LData2);        
+            buttonMoviesEditActors.addSelectionListener(new SelectionAdapter() {
+                public void widgetSelected(SelectionEvent evt) {
+                   // TODO
+                    
+                }
+            });  
+        }
+        {
+            buttonMoviesEditGenres = new Button(groupMoviesDetail
+                    , SWT.NONE);
+            buttonMoviesEditGenres.setText(l
+                .getString("movies.button.editgenres"));
+            buttonMoviesEditGenres.setEnabled(false);
+            GridData text1LData2 = new GridData();
+    	    text1LData2.horizontalAlignment = GridData.FILL;
+    	    text1LData2.heightHint = 20;
+    	    text1LData2.horizontalSpan = 5;
+    	    text1LData2.grabExcessHorizontalSpace = true;
+    	    buttonMoviesEditGenres.setLayoutData(text1LData2);        
+            buttonMoviesEditGenres.addSelectionListener(new SelectionAdapter() {
+                public void widgetSelected(SelectionEvent evt) {
+                   // TODO
+                    
+                }
+            });  
+        }
+        {
+            buttonMoviesEditSubtitles = new Button(groupMoviesDetail
+                    , SWT.NONE);
+            buttonMoviesEditSubtitles.setText(l
+                .getString("movies.button.editsubtitles"));
+            buttonMoviesEditSubtitles.setEnabled(false);
+            GridData text1LData2 = new GridData();
+    	    text1LData2.horizontalAlignment = GridData.FILL;
+    	    text1LData2.heightHint = 20;
+    	    text1LData2.horizontalSpan = 1;
+    	    text1LData2.grabExcessHorizontalSpace = true;
+    	    buttonMoviesEditSubtitles.setLayoutData(text1LData2);        
+            buttonMoviesEditSubtitles.addSelectionListener(new SelectionAdapter() {
+                public void widgetSelected(SelectionEvent evt) {
+                   // TODO
+                    
+                }
+            });  
+        }
+        {
+            buttonMoviesEditLanguages = new Button(groupMoviesDetail
+                    , SWT.NONE);
+            buttonMoviesEditLanguages.setText(l
+                .getString("movies.button.editlanguages"));
+            buttonMoviesEditLanguages.setEnabled(false);
+            GridData text1LData2 = new GridData();
+    	    text1LData2.horizontalAlignment = GridData.FILL;
+    	    text1LData2.heightHint = 20;
+    	    text1LData2.horizontalSpan = 5;
+    	    text1LData2.grabExcessHorizontalSpace = true;
+    	    buttonMoviesEditLanguages.setLayoutData(text1LData2);        
+            buttonMoviesEditLanguages.addSelectionListener(new SelectionAdapter() {
+                public void widgetSelected(SelectionEvent evt) {
+                   // TODO
+                    
+                }
+            });  
+        }
+        {
+            buttonMoviesEditVideoformats = new Button(groupMoviesDetail
+                    , SWT.NONE);
+            buttonMoviesEditVideoformats.setText(l
+                .getString("movies.button.editvideoformats"));
+            buttonMoviesEditVideoformats.setEnabled(false);
+            GridData text1LData2 = new GridData();
+    	    text1LData2.horizontalAlignment = GridData.FILL;
+    	    text1LData2.heightHint = 20;
+    	    text1LData2.horizontalSpan = 1;
+    	    text1LData2.grabExcessHorizontalSpace = true;
+    	    buttonMoviesEditVideoformats.setLayoutData(text1LData2);        
+            buttonMoviesEditVideoformats.addSelectionListener(new SelectionAdapter() {
+                public void widgetSelected(SelectionEvent evt) {
+                   // TODO
+                    
+                }
+            });  
+        }
+        {
+            buttonMoviesEditAudioformats = new Button(groupMoviesDetail
+                    , SWT.NONE);
+            buttonMoviesEditAudioformats.setText(l
+                .getString("movies.button.editaudioformats"));
+            buttonMoviesEditAudioformats.setEnabled(false);
+            GridData text1LData2 = new GridData();
+    	    text1LData2.horizontalAlignment = GridData.FILL;
+    	    text1LData2.heightHint = 20;
+    	    text1LData2.horizontalSpan = 5;
+    	    text1LData2.grabExcessHorizontalSpace = true;
+    	    buttonMoviesEditAudioformats.setLayoutData(text1LData2);        
+            buttonMoviesEditAudioformats.addSelectionListener(new SelectionAdapter() {
+                public void widgetSelected(SelectionEvent evt) {
+                   // TODO
+                    
+                }
+            });  
+        }
+        {
+            buttonMoviesEditImages = new Button(groupMoviesDetail
+                    , SWT.NONE);
+            buttonMoviesEditImages.setText(l
+                .getString("movies.button.editimages"));
+            buttonMoviesEditImages.setEnabled(false);
+            GridData text1LData2 = new GridData();
+    	    text1LData2.heightHint = 20;
+    	    text1LData2.horizontalSpan = 1;
+    	    text1LData2.horizontalAlignment = GridData.FILL;
+    	    buttonMoviesEditImages.setLayoutData(text1LData2);        
+            buttonMoviesEditImages.addSelectionListener(new SelectionAdapter() {
+                public void widgetSelected(SelectionEvent evt) {
+                   // TODO
+                    
+                }
+            });  
+        }
+        {
+    	    compositeButtons = new Composite(groupMoviesDetail, SWT.EMBEDDED);
+    	    GridLayout composite2Layout = new GridLayout();
+    	    composite2Layout.numColumns = 6;
+    	    GridData composite2LData = new GridData();
+    	    compositeButtons.setLayout(composite2Layout);
+    	    composite2LData.verticalAlignment = GridData.END;
+    	    composite2LData.horizontalAlignment = GridData.CENTER;
+    	    composite2LData.widthHint = 391;
+    	    composite2LData.horizontalSpan = 6;
+    	    composite2LData.grabExcessHorizontalSpace = true;
+        	composite2LData.grabExcessVerticalSpace = true;
+        	composite2LData.heightHint = 35;
+        	compositeButtons.setLayoutData(composite2LData);
+    	}
+    	{
+    	    buttonMoviesNew = new Button(compositeButtons, SWT.PUSH | SWT.CENTER);
+    	    buttonMoviesNew.setText(l.getString("button.new"));
+    	    buttonMoviesNew.addSelectionListener(new SelectionAdapter() {
+            public void widgetSelected(SelectionEvent evt) {
+                
+                mode_actor = ManagementGui.MODE_ADD;
+                
+                textMoviesID.setText("");
+                textMoviesTitle.setText("");
+                textMoviesDate.setText("");
+                textMoviesTitle.setEditable(true);
+                textMoviesDate.setEditable(true);
+                
+                buttonMoviesCancel.setEnabled(true);
+                buttonMoviesSave.setEnabled(true);
+                buttonMoviesNew.setEnabled(false);
+                buttonMoviesEdit.setEnabled(false);
+                buttonMoviesDelete.setEnabled(false);
+                
+                textMoviesSearch.setEditable(false);
+                tableMoviesOverview.setEnabled(false);
+
+            }
+        });
+
+    	    buttonMoviesEdit = new Button(compositeButtons, SWT.PUSH | SWT.CENTER);
+    	    buttonMoviesEdit.setText(l.getString("button.edit"));
+    	    buttonMoviesEdit.setEnabled(false);
+    	    buttonMoviesEdit.addSelectionListener(new SelectionAdapter() {
+            public void widgetSelected(SelectionEvent evt) {
+
+                mode_actor = ManagementGui.MODE_EDIT;
+
+                textMoviesID.setEditable(false);
+                textMoviesTitle.setEditable(true);
+                textMoviesTitle.setFocus();
+                textMoviesDate.setEditable(true);
+                
+                buttonMoviesCancel.setEnabled(true);
+                buttonMoviesSave.setEnabled(true);
+                buttonMoviesNew.setEnabled(false);
+                buttonMoviesEdit.setEnabled(false);
+                buttonMoviesDelete.setEnabled(false);
+
+                tableMoviesOverview.setEnabled(false);
+                textMoviesSearch.setEnabled(false);
+                
+            }
+        });
+
+    	    buttonMoviesDelete = new Button(compositeButtons, SWT.PUSH | SWT.CENTER);
+    	    buttonMoviesDelete.setText(l.getString("button.delete"));
+    	    buttonMoviesDelete.setEnabled(false);
+    	    buttonMoviesDelete.addSelectionListener(new SelectionAdapter() {
+            public void widgetSelected(SelectionEvent evt) {
+                System.out
+                        .println("buttonMoviesDelete.widgetSelected, event="
+                                + evt);
+                
+                
+               String msg = MessageFormat.format(
+                       l.getString("movies.groupdetail.deletebutton.question.text"),
+                               new Object[]{textMoviesTitle.getText()+" "
+                               +l.getString("movies.groupdetail.deletebutton.question.gap")
+                               +" "+textMoviesDate.getText()});
+                
+               int question = showMsg(msg,
+                       l.getString("movies.groupdetail.deletebutton.question.header"), 
+                       SWT.ICON_QUESTION | SWT.YES | SWT.NO);
+               
+               if (question != SWT.YES){
+                   return;
+               }
+                
+                Movie o = new Movie();
+                o.setMovieId(new Integer(Integer.parseInt(textMoviesID.getText())));
+                o.setTitle(textMoviesTitle.getText());
+                //TODO
+                //entsprechendes Objekt erzeugen
+                //o.setReleaseDate(textMoviesDate.getText());
+                
+                try {
+                    //object speichern
+                    // Fehlerbehandlung
+                    Database.deleteObject(o);
+
+                    //?bersichtsTabelle aktualisieren
+                    refreshMoviesOverviewTable(textMoviesSearch.getText());
+                    
+                    //Detailansicht leeren
+                    textMoviesID.setText("");
+                    textMoviesTitle.setText("");
+                    textMoviesDate.setText("");
+                    tableMoviesOverviewDetail.removeAll();
+                    //in Tabelle n?chsten ausw?hlen
+                    try {
+                        tableMoviesOverview.select(0);
+                    } catch (Exception ex) {}
+                    
+                    //Statusline Nachricht sezten
+                    statusLine.setStatus(1,l.getString("movies.groupdetail.deletebutton.newok"));
+
+                } catch (DataBaseException e) {
+                    if (e.getMessage().equalsIgnoreCase("1")) {
+                        //Fehler beim Speichern des Objectes
+
+                        statusLine.setStatus(3,l.getString("movies.groupdetail.deletebutton.errorsave"));
+                        showMsg(l.getString("movies.groupdetail.deletebutton.errorsave"),
+                                l.getString("error"), SWT.ICON_ERROR | SWT.OK);
+                        
+                    } else if (e.getMessage().equalsIgnoreCase("2")) {
+                        //fehler beim db aufbau
+                        statusLine.setStatus(3,l.getString("movies.groupdetail.deletebutton.errordb"));
+                        showMsg(l.getString("movies.groupdetail.deletebutton.errordb"),
+                                l.getString("error"), SWT.ICON_ERROR | SWT.OK);
+                        
+                    } else {
+                        //@todo
+                        e.printStackTrace();
+                    }
+                    
+                }                
+                
+
+                }
+
+            }
+    	    );
+
+    	    //leerer nicht sichtbarer Button
+    	    buttonMoviesFill = new Button(compositeButtons, SWT.PUSH | SWT.CENTER);
+    	    GridData buttonActorFillLData = new GridData();
+    	    buttonMoviesFill.setVisible(false);
+    	    buttonMoviesFill.setEnabled(false);
+    	    buttonActorFillLData.widthHint = 30;
+    	    buttonActorFillLData.heightHint = 23;
+    	    buttonMoviesFill.setLayoutData(buttonActorFillLData);
+
+    	    buttonMoviesSave = new Button(compositeButtons, SWT.PUSH | SWT.CENTER);
+    	    buttonMoviesSave.setText(l.getString("button.save"));
+    	    buttonMoviesSave.setEnabled(false);
+    	    buttonMoviesSave.addSelectionListener(new SelectionAdapter() {
+            public void widgetSelected(SelectionEvent evt) {
+                System.out
+                        .println("buttonMoviesSave.widgetSelected, event="
+                                + evt);
+
+                
+                //testen ob Name leer ist
+                //TODO
+                //komplette Speichervorgan muss erweitert werden da
+                //Ausma? von Film gr??er als bei anderen Composite
+                /*
+                if (textActorsFName.getText().trim().equalsIgnoreCase("") 
+                    ||  textActorsLName.getText().trim().equalsIgnoreCase("")   ) {
+                    
+                    showMsg(l.getString("actors.groupdetail.savebutton.warn.noname.msg"),
+                            l.getString("actors.groupdetail.savebutton.warn.noname.title"),
+                            SWT.ICON_WARNING | SWT.YES);
+
+                    	return;
+                }
+                
+                //testen welcher mode
+                
+                if (mode_actor == ManagementGui.MODE_ADD) {
+                */    
+                    /**
+                     * @todo eine Exception bekommen wieder leider NOCH nicht mit
+                     * d.h. es muss noch ein r?ckgabewert kommen oder eine Exception 
+                     * ?bermitteln werden (aus der DB Klasse)
+                     */
+                    //neues Objekt erzeugen
+                /*
+                	Actor tmp = new Actor(textActorsFName.getText(),
+                            textActorsLName.getText());
+                    
+                    try {
+                        //object speichern
+                        // Fehlerbehandlung
+                        Object o = Database.saveObject(
+                                new Actor(textActorsFName.getText(),
+                                        textActorsLName.getText()));
+                        
+                        // in ?bersichtstabelle einf?gen
+                        insertIntoActorsOverviewTable((Actor)o);
+                        textActorsID.setText( ((Actor)o).getActorId()+"" );
+                        
+                        
+                        //Statusline Nachricht sezten
+                        statusLine.setStatus(1,l.getString("actors.groupdetail.savebutton.newok"));
+
+                    } catch (DataBaseException e) {
+                        if (e.getMessage().equalsIgnoreCase("1")) {
+                            //Fehler beim Speichern des Objectes
+
+                            statusLine.setStatus(3,l.getString("actors.groupdetail.savebutton.errorsave"));
+                            showMsg(l.getString("actors.groupdetail.savebutton.errorsave"),"Fehler", SWT.ICON_ERROR | SWT.OK);
+                            
+                        } else if (e.getMessage().equalsIgnoreCase("2")) {
+                            //fehler beim db aufbau
+                            statusLine.setStatus(3,l.getString("actors.groupdetail.savebutton.errordb"));
+                            showMsg(l.getString("actors.groupdetail.savebutton.errordb"),"Fehler", SWT.ICON_ERROR | SWT.OK);
+                            
+                        } else {
+                            //@todo
+                            e.printStackTrace();
+                        }
+                        
+                    }
+                    
+                    
+                    //alle Buttons auf aktiv setzen
+                    setActorsGroupButtonSaveCancel();
+                    
+                } else if (mode_actor == ManagementGui.MODE_EDIT) {
+                    
+                    Actor tmp = new Actor(textActorsFName.getText(),
+                                    textActorsLName.getText());
+        		tmp.setActorId( new Integer (Integer.parseInt(textActorsID.getText())) );
+                try {
+                    //object speichern
+                    // Fehlerbehandlung
+                    Database.saveObject(tmp);
+                    //?bersichtstabelle aktualisieren
+                    refreshActorsOverviewTable(textActorsSearch.getText());
+                    
+                    //Statusline Nachricht sezten
+                    statusLine.setStatus(1,l.getString("actors.groupdetail.savebutton.editok"));
+                   
+
+                } catch (DataBaseException e) {
+                    if (e.getMessage().equalsIgnoreCase("1")) {
+                        //Fehler beim Speichern des Objectes
+
+                        statusLine.setStatus(3,l.getString("actors.groupdetail.savebutton.errorsave"));
+                        showMsg(l.getString("actors.groupdetail.savebutton.errorsave"),"Fehler", SWT.ICON_ERROR | SWT.OK);
+                        
+                    } else if (e.getMessage().equalsIgnoreCase("2")) {
+                        //fehler beim db aufbau
+                        statusLine.setStatus(3,l.getString("actors.groupdetail.savebutton.errordb"));
+                        showMsg(l.getString("actors.groupdetail.savebutton.errordb"),"Fehler", SWT.ICON_ERROR | SWT.OK);
+                        
+                    } else {
+                        //@todo
+                        e.printStackTrace();
+                    }
+                    
+                }
+                    
+ 
+                    //alle Buttons auf aktiv setzen
+                    setActorsGroupButtonSaveCancel();
+                    
+                }
+                
+                
+                
+                
+                 // @todo Exception werfen, da nur die zwei Modes sein d?rfen
+                 
+            */   
+            }
+        
+        });
+        
+    	    buttonMoviesCancel = new Button(compositeButtons, SWT.PUSH | SWT.CENTER);
+    	    buttonMoviesCancel.setText(l.getString("button.cancel"));
+    	    buttonMoviesCancel.setEnabled(false);
+    	    buttonMoviesCancel.addSelectionListener(new SelectionAdapter() {
+            public void widgetSelected(SelectionEvent evt) {
+                System.out
+                        .println("buttonMoviesCancel.widgetSelected, event="
+                                + evt);
+                setMoviesGroupButtonSaveCancel();
+            }
+        });
     }
+    
+    }
 
     /**
+     * 
+     */
+    protected void setMoviesGroupButtonSaveCancel() {
+        tableMoviesOverview.setEnabled(true);
+        textMoviesTitle.setEditable(false);
+        textMoviesDate.setEditable(false);
+        buttonMoviesCancel.setEnabled(false);
+        buttonMoviesSave.setEnabled(false);
+        buttonMoviesNew.setEnabled(true);
+        buttonMoviesEdit.setEnabled(false);
+        buttonMoviesDelete.setEnabled(false);
+        
+    }
+
+    /**
      * @param text
      */
     protected void refreshMoviesOverviewTable(String text) {

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/movies.properties
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/movies.properties	2004-11-16 23:24:58 UTC (rev 143)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/movies.properties	2004-11-17 10:16:25 UTC (rev 144)
@@ -1,5 +1,5 @@
-error=Fehler
-movies.group.label=Filme
+error =Fehler
+movies.group.label =Filme
 
 movies.groupoverview.label =?berblick
 movies.groupoverview.searchlabel =Suche nach
@@ -9,6 +9,7 @@
 movies.groupoverview.columndate =Erscheinungsdatum
 movies.groupoverviewdetail.columngenres =Genre
 movies.groupoverviewdetail.columnactors =Dartsteller
+movies.groupoverviewdetail.columndirectors =Regisseur
 movies.groupoverviewdetail.columnvideoformats =Videoformate
 movies.groupoverviewdetail.columnaudioformats =Audioformate
 movies.groupoverviewdetail.columnlanguages =Sprachen
@@ -18,23 +19,35 @@
 movies.groupdetail.label =Detail
 movies.groupdetail.labelid =Film ID
 movies.groupdetail.labeltitle =Titel
+movies.groupdetail.labeldate =Erscheinungsdatum
+movies.groupdetail.labeladvice =Um die Elemente zu Bearbeiten bitte entsprechende Schaltfl?che anklicken
+movies.groupdetail.textdate = (Beispiel: 01.01.2001)
 
+button.new =Neu
+button.edit =Bearbeiten
+button.delete =L?schen
+button.save =Speichern
+button.cancel =Abbruch
+movies.button.editdescription =Beschreibung
+movies.button.editactors =Darsteller
+movies.button.editdirectors =Regisseur
+movies.button.editgenres =Genres
+movies.button.editlanguages =Sprachen
+movies.button.editsubtitles =Untertitel
+movies.button.editaudioformats =Audioformate
+movies.button.editvideoformats =Videoformate
+movies.button.editimages =Bilder
 
-button.new=Neu
-button.edit=Bearbeiten
-button.delete=L?schen
-button.save=Speichern
-button.cancel=Abbruch
+movies.groupdetail.savebutton.warn.noname.title =Datensatz speichern
+movies.groupdetail.savebutton.warn.noname.msg =Der Datensatz kann nicht gespeichert werden. \n Bitte geben Sie eine volst?ndigen Namen an
+movies.groupdetail.savebutton.newok =Speichern des neuen Films erfolgreich.
+movies.groupdetail.savebutton.editok =?ndern des Films erfolgreich.
+movies.groupdetail.savebutton.errorsave =Datenbankfehler beim Speichern.
+movies.groupdetail.savebutton.errordb =Datenbankfehler beim Herstellen der Verbindung.(save).
 
-movies.groupdetail.savebutton.warn.noname.title=Datensatz speichern
-movies.groupdetail.savebutton.warn.noname.msg=Der Datensatz kann nicht gespeichert werden. \n Bitte geben Sie eine volst?ndigen Namen an
-movies.groupdetail.savebutton.newok=Speichern des neuen Films erfolgreich.
-movies.groupdetail.savebutton.editok=?ndern des Films erfolgreich.
-movies.groupdetail.savebutton.errorsave=Datenbankfehler beim Speichern.
-movies.groupdetail.savebutton.errordb=Datenbankfehler beim Herstellen der Verbindung.(save).
-
 movies.groupdetail.deletebutton.question.header=Wirklich l?schen?
 movies.groupdetail.deletebutton.question.text=Wollen Sie den Datensatz {0} wirklich l?schen?
 movies.groupdetail.deletebutton.newok=Datensatz wurde erfolgreich gel?scht.
 movies.groupdetail.deletebutton.errorsave=Datenbankfehler beim L?schen.
-movies.groupdetail.deletebutton.errordb=Datenbankfehler beim Herstellen der Verbindung(del).
\ No newline at end of file
+movies.groupdetail.deletebutton.errordb=Datenbankfehler beim Herstellen der Verbindung(del).
+movies.groupdetail.deletebutton.question.gap =erschienen am
\ No newline at end of file



From pschneider at sheep.berlios.de  Wed Nov 17 14:04:14 2004
From: pschneider at sheep.berlios.de (Philipp Schneider at BerliOS)
Date: Wed, 17 Nov 2004 14:04:14 +0100
Subject: [Provirent-svn-commit] r145 - project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language
Message-ID: <200411171304.iAHD4EaH030941@sheep.berlios.de>

Author: pschneider
Date: 2004-11-17 14:04:13 +0100 (Wed, 17 Nov 2004)
New Revision: 145

Added:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/images.properties
Log:
-Sprachdatei f?\195?\188r bilder

Added: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/images.properties
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/images.properties	2004-11-17 10:16:25 UTC (rev 144)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/images.properties	2004-11-17 13:04:13 UTC (rev 145)
@@ -0,0 +1,43 @@
+error=Fehler
+images.group.label=Bilder
+images.groupoverview.label =?berblick
+images.groupoverview.searchlabel =Suche nach
+images.groupoverview.columnid =ID
+images.groupoverview.name=Bildname
+images.groupoverview.description=Beschreibung
+
+
+images.groupdetail.label=Detail
+images.groupdetail.labelid =Bild ID
+images.groupdetail.labelname =Bildname
+images.groupdetail.labeldescription=Beschreibung
+images.groupdetail.labelselectfile=Datei
+images.groupdetail.labelselecteddatabase=<< aus Datenbank >>
+images.groupdetail.buttonselectfile=Datei ausw?hlen
+images.groupdetail.labelresize=Vergr??ern/Verkleinern
+images.groupdetail.fileselect.title=Bilddatei ausw?hlen
+images.groupdetail.fileselect.filterpath=C:\
+
+images.groupdetail.resize.size=Gr??e
+
+
+button.new=Neu
+button.edit=Bearbeiten
+button.delete=L?schen
+button.save=Speichern
+button.cancel=Abbruch
+
+images.groupdetail.savebutton.warn.noname.title=Datensatz speichern
+images.groupdetail.savebutton.warnnoimage=Der Datensatz kann nicht gespeichert werden. \n Bitte w?hlen Sie ein Bild aus!
+images.groupdetail.savebutton.warn.noname.msg=Der Datensatz kann nicht gespeichert werden. \n Bitte geben Sie eine volst?ndigen Namen an
+images.groupdetail.savebutton.newok=Speichern des neuen VideoFormates erfolgreich.
+images.groupdetail.savebutton.editok=?ndern des VideoFormates erfolgreich.
+images.groupdetail.savebutton.errorsave=Datenbankfehler beim Speichern.
+images.groupdetail.savebutton.errordb=Datenbankfehler beim Herstellen der Verbindung.(save).
+
+
+images.groupdetail.deletebutton.question.header=Wirklich l?schen?
+images.groupdetail.deletebutton.question.text=Wollen Sie den Datensatz {0} wirklich l?schen?
+images.groupdetail.deletebutton.newok=Datensatz wurde erfolgreich gel?scht.
+images.groupdetail.deletebutton.errorsave=Datenbankfehler beim L?schen.
+images.groupdetail.deletebutton.errordb=Datenbankfehler beim Herstellen der Verbindung(del).
\ No newline at end of file



From rgriesch at sheep.berlios.de  Sun Nov 21 00:54:38 2004
From: rgriesch at sheep.berlios.de (Remo Griesch at BerliOS)
Date: Sun, 21 Nov 2004 00:54:38 +0100
Subject: [Provirent-svn-commit] r146 - project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui
Message-ID: <200411202354.iAKNsciP030545@sheep.berlios.de>

Author: rgriesch
Date: 2004-11-21 00:54:35 +0100 (Sun, 21 Nov 2004)
New Revision: 146

Added:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/DialogDescription.java
Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java
Log:
DialogDescription  - erstellt
                   - Layout fertiggestellt 
                   - Funktionalit?\195?\164t angefangen

 

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java	2004-11-17 13:04:13 UTC (rev 145)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java	2004-11-20 23:54:35 UTC (rev 146)
@@ -7,6 +7,7 @@
 
 import org.apache.log4j.Logger;
 import org.eclipse.swt.SWT;
+import org.eclipse.swt.widgets.Dialog;
 import org.eclipse.swt.custom.SashForm;
 import org.eclipse.swt.events.FocusAdapter;
 import org.eclipse.swt.events.FocusEvent;
@@ -31,7 +32,6 @@
 
 import com.cloudgarden.resource.SWTResourceManager;
 
-import de.hsharz.provirent.objects.Actor;
 import de.hsharz.provirent.objects.Movie;
 import de.hsharz.provirent.persistence.DataBaseException;
 import de.hsharz.provirent.persistence.Database;
@@ -118,9 +118,7 @@
     private Button buttonMoviesEditVideoformats;
     private Button buttonMoviesEditImages;
     private Button buttonMoviesEditDescription;
-    
-    
-    
+     
     private SashForm sashForm1;
     
     private Composite parent;
@@ -132,6 +130,7 @@
     
     private ResourceBundle l;
     
+    
     /*
      * ?ndert die Sprache aller Elemente
      * 
@@ -641,7 +640,7 @@
             buttonMoviesEditDescription.addSelectionListener(new SelectionAdapter() {
                 public void widgetSelected(SelectionEvent evt) {
                    // TODO
-                    
+                   openDialogDescription();
                 }
             });
         }
@@ -830,6 +829,15 @@
                 buttonMoviesNew.setEnabled(false);
                 buttonMoviesEdit.setEnabled(false);
                 buttonMoviesDelete.setEnabled(false);
+                buttonMoviesEditDescription.setEnabled(true);
+                buttonMoviesEditDirectors.setEnabled(true);
+                buttonMoviesEditActors.setEnabled(true);
+                buttonMoviesEditGenres.setEnabled(true);
+                buttonMoviesEditSubtitles.setEnabled(true);
+                buttonMoviesEditLanguages.setEnabled(true);
+                buttonMoviesEditVideoformats.setEnabled(true);
+                buttonMoviesEditAudioformats.setEnabled(true);
+                buttonMoviesEditImages.setEnabled(true);
                 
                 textMoviesSearch.setEditable(false);
                 tableMoviesOverview.setEnabled(false);
@@ -1105,7 +1113,15 @@
         buttonMoviesNew.setEnabled(true);
         buttonMoviesEdit.setEnabled(false);
         buttonMoviesDelete.setEnabled(false);
-        
+        buttonMoviesEditDescription.setEnabled(false);
+        buttonMoviesEditDirectors.setEnabled(false);
+        buttonMoviesEditActors.setEnabled(false);
+        buttonMoviesEditGenres.setEnabled(false);
+        buttonMoviesEditSubtitles.setEnabled(false);
+        buttonMoviesEditLanguages.setEnabled(false);
+        buttonMoviesEditVideoformats.setEnabled(false);
+        buttonMoviesEditAudioformats.setEnabled(false);
+        buttonMoviesEditImages.setEnabled(false);
     }
 
     /**
@@ -1123,4 +1139,14 @@
         // TODO Auto-generated method stub
         
     }
+
+    protected void openDialogDescription() {
+        // TODO Auto-generated method stub
+        Shell dialogShell = new Shell();
+        //Dialog dialogDescription=new Dialog(dialogShell);
+        //dialogDescription.open();
+        DialogDescription test= new DialogDescription(dialogShell,0);
+        test.open();
+    }
+    
 }

Added: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/DialogDescription.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/DialogDescription.java	2004-11-17 13:04:13 UTC (rev 145)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/DialogDescription.java	2004-11-20 23:54:35 UTC (rev 146)
@@ -0,0 +1,173 @@
+package de.hsharz.provirent.management.gui;
+
+/**
+* This code was generated using CloudGarden's Jigloo
+* SWT/Swing GUI Builder, which is free for non-commercial
+* use. If Jigloo is being used commercially (ie, by a corporation,
+* company or business for any purpose whatever) then you
+* should purchase a license for each developer using Jigloo.
+* Please visit www.cloudgarden.com for details.
+* Use of Jigloo implies acceptance of these licensing terms.
+* *************************************
+* A COMMERCIAL LICENSE HAS NOT BEEN PURCHASED
+* for this machine, so Jigloo or this code cannot be used legally
+* for any corporate or commercial purpose.
+* *************************************
+*/
+
+import org.eclipse.swt.layout.FillLayout;
+import org.eclipse.swt.layout.GridLayout;
+import org.eclipse.swt.widgets.Display;
+import org.eclipse.swt.widgets.Shell;
+import org.eclipse.swt.SWT;
+
+import org.eclipse.swt.widgets.Group;
+import org.eclipse.swt.layout.GridData;
+import org.eclipse.swt.custom.SashForm;
+import org.eclipse.swt.widgets.Label;
+import org.eclipse.swt.widgets.Text;
+import org.eclipse.swt.widgets.Button;
+import org.eclipse.swt.custom.StyledText;
+import org.eclipse.swt.events.SelectionAdapter;
+import org.eclipse.swt.events.SelectionEvent;
+
+import java.util.Locale;
+import java.util.PropertyResourceBundle;
+import java.util.ResourceBundle;
+
+
+
+public class DialogDescription extends org.eclipse.swt.widgets.Dialog {
+    
+	private Shell dialogShell;
+    
+	private Group groupDialogDescription;
+	
+	private Button buttonDescriptionAbort;
+	private Button buttonDescriptionAccept;
+	
+	private Label labelDescriptionAdvice;
+	
+	private StyledText styledTextDescritpion;
+	
+	private SashForm sashForm1;
+
+	private ResourceBundle l;
+	
+	/**
+	* Auto-generated main method to display this 
+	* org.eclipse.swt.widgets.Dialog inside a new Shell.
+	*/
+	public static void main(String[] args) {
+		try {
+			Display display = Display.getDefault();
+			Shell shell = new Shell(display);
+			DialogDescription inst = new DialogDescription(shell, SWT.NULL);
+			inst.open();
+		} catch (Exception e) {
+			e.printStackTrace();
+		}
+	}
+	
+	/*
+     * ?ndert die Sprache aller Elemente
+     * 
+     * @see de.hsharz.provirent.managment.gui.AbstractComposite#changeLanguage(java.util.Locale)
+     */
+    public void changeLanguage(Locale locale) {
+
+    }
+
+    /* 
+     * Init die Sprache (properties Datei)
+     * @see de.hsharz.provirent.managment.gui.AbstractComposite#initLanguage(java.util.Locale)
+     */
+    public void initLanguage(Locale locale) {
+        l = PropertyResourceBundle.getBundle(
+                "de.hsharz.provirent.management.gui.language.dialogmovies", locale);
+
+    }
+	
+	
+	public DialogDescription(Shell parent, int style) {
+		super(parent, style);
+	}
+
+	public void open() {
+		try {
+			Shell parent = getParent();
+			dialogShell = new Shell(parent, SWT.DIALOG_TRIM | SWT.APPLICATION_MODAL);
+
+			dialogShell.setLayout(new GridLayout());
+            {
+                sashForm1 = new SashForm(dialogShell, SWT.NONE);
+                GridData sashForm1LData = new GridData();
+                sashForm1LData.widthHint = 300;
+                sashForm1LData.heightHint = 200;
+                sashForm1.setLayoutData(sashForm1LData);
+                {
+                    groupDialogDescription = new Group(sashForm1, SWT.NONE);
+                    GridLayout groupDialogDescriptionLayout = new GridLayout();
+                    groupDialogDescriptionLayout.numColumns = 5;
+                    groupDialogDescriptionLayout.makeColumnsEqualWidth = true;
+                    groupDialogDescription.setBounds(0, 0, 316, 178);
+                    groupDialogDescription.setLayout(groupDialogDescriptionLayout);
+                    groupDialogDescription.setText("Beschreibung");
+                    {
+                        labelDescriptionAdvice = new Label(groupDialogDescription, SWT.NONE);
+                        labelDescriptionAdvice.setText("Beschreibung ins Textfeld schreiben oder ?ndern");
+        
+                    }
+                    {
+                        styledTextDescritpion = new StyledText(groupDialogDescription, SWT.NONE);
+                        styledTextDescritpion.setText("");
+                        GridData styledTextDescritpionLData = new GridData();
+                        styledTextDescritpionLData.horizontalSpan = 5;
+                        styledTextDescritpionLData.horizontalAlignment = GridData.FILL;
+                        styledTextDescritpionLData.verticalAlignment = GridData.FILL;
+                        styledTextDescritpionLData.verticalSpan = 3;
+                        styledTextDescritpionLData.grabExcessHorizontalSpace = true;
+                        styledTextDescritpionLData.grabExcessVerticalSpace = true;
+                        styledTextDescritpion.setLayoutData(styledTextDescritpionLData);
+                    }
+                    {
+                        buttonDescriptionAccept = new Button(groupDialogDescription, SWT.PUSH | SWT.CENTER);
+                        buttonDescriptionAccept.setText("?bernehmen");
+                        GridData buttonDescriptionAcceptLData2 = new GridData();
+                        buttonDescriptionAcceptLData2.horizontalSpan = 2;
+                        buttonDescriptionAcceptLData2.grabExcessHorizontalSpace = true;
+                        buttonDescriptionAcceptLData2.horizontalAlignment = GridData.FILL;
+                        buttonDescriptionAccept.setLayoutData(buttonDescriptionAcceptLData2);
+                    }
+                    {
+                        buttonDescriptionAbort = new Button(groupDialogDescription, SWT.PUSH | SWT.CENTER);
+                        buttonDescriptionAbort.setText("Abbruch");
+                        GridData buttonDescriptionAbortLData = new GridData();
+                        buttonDescriptionAbortLData.grabExcessHorizontalSpace = true;
+                        buttonDescriptionAbortLData.horizontalAlignment = GridData.FILL;
+                        buttonDescriptionAbortLData.horizontalSpan = 2;
+                        buttonDescriptionAbort.setLayoutData(buttonDescriptionAbortLData);
+                        buttonDescriptionAbort.addSelectionListener(new SelectionAdapter() {
+                            public void widgetSelected(SelectionEvent evt) {
+                               // TODO
+                               dialogShell.close();
+                            }
+                        });  
+                    }
+
+                }
+            }
+			dialogShell.layout();
+			dialogShell.pack();
+			dialogShell.open();
+			Display display = dialogShell.getDisplay();
+			while (!dialogShell.isDisposed()) {
+				if (!display.readAndDispatch())
+					display.sleep();
+			}
+		} catch (Exception e) {
+			e.printStackTrace();
+		}
+	}
+	
+}



From pschneider at sheep.berlios.de  Mon Nov 22 20:24:57 2004
From: pschneider at sheep.berlios.de (Philipp Schneider at BerliOS)
Date: Mon, 22 Nov 2004 20:24:57 +0100
Subject: [Provirent-svn-commit] r147 - project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui
Message-ID: <200411221924.iAMJOv5G001693@sheep.berlios.de>

Author: pschneider
Date: 2004-11-22 20:24:56 +0100 (Mon, 22 Nov 2004)
New Revision: 147

Added:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CopyOfCompositeMovie.java
Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/DialogDescription.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java
Log:


Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java	2004-11-20 23:54:35 UTC (rev 146)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java	2004-11-22 19:24:56 UTC (rev 147)
@@ -1145,8 +1145,9 @@
         Shell dialogShell = new Shell();
         //Dialog dialogDescription=new Dialog(dialogShell);
         //dialogDescription.open();
-        DialogDescription test= new DialogDescription(dialogShell,0);
+        DialogDescription test= new DialogDescription(dialogShell,1,l.getLocale());
         test.open();
+
     }
     
 }

Added: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CopyOfCompositeMovie.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CopyOfCompositeMovie.java	2004-11-20 23:54:35 UTC (rev 146)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CopyOfCompositeMovie.java	2004-11-22 19:24:56 UTC (rev 147)
@@ -0,0 +1,1048 @@
+package de.hsharz.provirent.management.gui;
+
+import java.text.MessageFormat;
+import java.util.Locale;
+import java.util.PropertyResourceBundle;
+import java.util.ResourceBundle;
+
+import org.apache.log4j.Logger;
+import org.eclipse.swt.SWT;
+import org.eclipse.swt.custom.SashForm;
+import org.eclipse.swt.events.FocusAdapter;
+import org.eclipse.swt.events.FocusEvent;
+import org.eclipse.swt.events.SelectionAdapter;
+import org.eclipse.swt.events.SelectionEvent;
+import org.eclipse.swt.layout.FormAttachment;
+import org.eclipse.swt.layout.FormData;
+import org.eclipse.swt.layout.GridData;
+import org.eclipse.swt.layout.GridLayout;
+import org.eclipse.swt.widgets.Button;
+import org.eclipse.swt.widgets.Composite;
+import org.eclipse.swt.widgets.Display;
+import org.eclipse.swt.widgets.Event;
+import org.eclipse.swt.widgets.Group;
+import org.eclipse.swt.widgets.Label;
+import org.eclipse.swt.widgets.Listener;
+import org.eclipse.swt.widgets.Shell;
+import org.eclipse.swt.widgets.Table;
+import org.eclipse.swt.widgets.TableColumn;
+import org.eclipse.swt.widgets.TableItem;
+import org.eclipse.swt.widgets.Text;
+
+import com.cloudgarden.resource.SWTResourceManager;
+
+import de.hsharz.provirent.objects.Actor;
+import de.hsharz.provirent.objects.Movie;
+import de.hsharz.provirent.persistence.DataBaseException;
+import de.hsharz.provirent.persistence.Database;
+
+
+import org.eclipse.swt.widgets.List;
+import org.eclipse.swt.widgets.Combo;
+/**
+* This code was generated using CloudGarden's Jigloo
+* SWT/Swing GUI Builder, which is free for non-commercial
+* use. If Jigloo is being used commercially (ie, by a corporation,
+* company or business for any purpose whatever) then you
+* should purchase a license for each developer using Jigloo.
+* Please visit www.cloudgarden.com for details.
+* Use of Jigloo implies acceptance of these licensing terms.
+* *************************************
+* A COMMERCIAL LICENSE HAS NOT BEEN PURCHASED
+* for this machine, so Jigloo or this code cannot be used legally
+* for any corporate or commercial purpose.
+* *************************************
+*/
+public class CopyOfCompositeMovie extends de.hsharz.provirent.management.gui.AbstractComposite {
+
+    {
+        //Register as a resource user - SWTResourceManager will
+        //handle the obtaining and disposing of resources
+        SWTResourceManager.registerResourceUser(this);
+    }
+
+
+    /**
+     * Logger for this class
+     */
+    private static final Logger logger = Logger
+            .getLogger(CompositeActors.class);
+    
+    
+    private final static int MODE_VIEW = 0;
+    private final static int MODE_ADD = 1;
+    private final static int MODE_EDIT = 2;
+    
+    private Table tableMoviesOverview;
+    private Table tableMoviesOverviewDetail;
+    private TableColumn tableMoviesOverview_ColumnID;
+    private TableColumn tableMoviesOverview_ColumnTitle;
+    private TableColumn tableMoviesOverview_ColumnSubtitles;
+    private TableColumn tableMoviesOverview_ColumnDate;
+    private TableColumn tableMoviesOverviewDetail_ColumnGenres;
+    private TableColumn tableMoviesOverviewDetail_ColumnActors;
+    private TableColumn tableMoviesOverviewDetail_ColumnDirectors;
+    private TableColumn tableMoviesOverviewDetail_ColumnVideoformats;
+    private TableColumn tableMoviesOverviewDetail_ColumnAudioformats;
+    private TableColumn tableMoviesOverviewDetail_ColumnLanguages;   
+    private TableColumn tableMoviesOverviewDetail_ColumnDescription;
+    private TableColumn tableMoviesOverviewDetail_ColumnImages;
+    
+    
+    
+    private Group groupMovie;
+    private Group groupMoviesOverview;
+    private Group groupMoviesDetail;
+    
+    private Text textMoviesSearch;
+    private Text textMoviesID;
+    private Text textMoviesTitle;
+    private Text textMoviesDate;
+    
+    private Label labelMoviesSearch;
+    private Label labelMoviesID;
+    private Label labelMoviesTitle;
+    private Label labelMoviesDate;
+    private Label labelMoviesAdvice;
+    
+    private Button buttonMoviesNew;
+    private Button buttonMoviesSave;
+    private Button buttonMoviesEdit;
+    private Button buttonMoviesCancel;
+    private Button buttonMoviesDelete;
+    private Button buttonMoviesFill;
+
+    private SashForm sashForm1;
+    
+    private Composite parent;
+    private Composite compositeButtons;
+    private Button button5;
+    private Combo combo1;
+    private Button button4;
+    private Button button3;
+    private Button button2;
+    private Button button1;
+    private List list1;
+
+    protected int mode_actor;
+    
+    private StatusLineStyledText statusLine;
+    
+    private ResourceBundle l;
+    
+    /*
+     * ?ndert die Sprache aller Elemente
+     * 
+     * @see de.hsharz.provirent.managment.gui.AbstractComposite#changeLanguage(java.util.Locale)
+     */
+    public void changeLanguage(Locale locale) {
+
+    }
+
+    /* 
+     * Init die Sprache (properties Datei)
+     * @see de.hsharz.provirent.managment.gui.AbstractComposite#initLanguage(java.util.Locale)
+     */
+    public void initLanguage(Locale locale) {
+
+        l = PropertyResourceBundle.getBundle(
+                "de.hsharz.provirent.management.gui.language.movies", locale);
+
+    }
+    
+    
+    
+	/**
+	* Auto-generated main method to display this 
+	* de.hsharz.provirent.management.gui.AbstractComposite inside a new Shell.
+	*/
+	public static void main(String[] args) {
+		showGUI();
+	}
+		
+	/**
+	* Auto-generated method to display this 
+	* de.hsharz.provirent.management.gui.AbstractComposite inside a new Shell.
+	*/
+	/**
+	* Auto-generated method to display this 
+	* org.eclipse.swt.widgets.Composite inside a new Shell.
+	*/
+	public static void showGUI() {
+		Display display = Display.getDefault();
+		Shell shell = new Shell(display);
+
+		shell.open();
+		while (!shell.isDisposed()) {
+			if (!display.readAndDispatch())
+				display.sleep();
+		}
+	}
+
+	public CopyOfCompositeMovie(Composite p, int style,
+            StatusLineStyledText status, Locale l) {
+	    super(p, style, status, l);
+        parent = p;
+        //Statusline wird gestzt
+        statusLine = status;
+        
+        //sprache wird init
+        initLanguage(l);
+	    
+	    
+		initGUI();
+	}
+
+
+	private void initGUI() {
+        if (logger.isDebugEnabled()) {
+            logger.debug("initGUI() - start");
+        }
+
+        this.setLayout(new GridLayout());
+        this.setSize(816, 540);
+        {
+            groupMovie = new Group(this, SWT.NONE);
+            GridLayout groupMovieLayout = new GridLayout();
+            GridData groupMovieLData = new GridData();
+            groupMovieLData.grabExcessHorizontalSpace = true;
+            groupMovieLData.grabExcessVerticalSpace = true;
+            groupMovieLData.horizontalAlignment = GridData.FILL;
+            groupMovieLData.verticalAlignment = GridData.FILL;
+            groupMovie.setLayoutData(groupMovieLData);
+            groupMovieLayout.makeColumnsEqualWidth = true;
+            groupMovie.setLayout(groupMovieLayout);
+            groupMovie.setText(l.getString("movies.group.label"));
+            {
+                sashForm1 = new SashForm(groupMovie, SWT.NONE);
+                GridData sashForm1LData = new GridData();
+                sashForm1LData.verticalAlignment = GridData.FILL;
+                sashForm1LData.horizontalAlignment = GridData.FILL;
+                sashForm1LData.grabExcessHorizontalSpace = true;
+                sashForm1LData.grabExcessVerticalSpace = true;
+                sashForm1.setLayoutData(sashForm1LData);
+                
+               
+            }
+            // init the rest of the layout
+            initMoviesOverview();
+            initMoviesDetail();
+            refreshMoviesOverviewTable(textMoviesSearch.getText());
+        }
+
+        this.layout();
+
+
+        
+        if (logger.isDebugEnabled()) {
+            logger.debug("initGUI() - end");
+        }
+	}
+
+    /**
+     * 
+     */
+    private void initMoviesOverview() {
+	    //	  Group Movies Overview 
+        {
+            groupMoviesOverview = new Group(sashForm1,SWT.NONE);
+            GridLayout group1Layout = new GridLayout();
+            group1Layout.numColumns = 8;
+            groupMoviesOverview.setLayout(group1Layout);
+            groupMoviesOverview.setText(l.getString("movies.groupoverview.label"));
+            
+            {// table Actors Overview
+                tableMoviesOverview = new Table(
+                    groupMoviesOverview,
+                    SWT.SINGLE
+                        | SWT.FULL_SELECTION
+                        | SWT.V_SCROLL | SWT.BORDER);
+                GridData tableMoviesOverviewLData = new GridData();
+                tableMoviesOverview.setHeaderVisible(true);
+                tableMoviesOverview.setLinesVisible(true);
+                tableMoviesOverviewLData.horizontalAlignment = GridData.FILL;
+                tableMoviesOverviewLData.verticalAlignment = GridData.FILL;
+                tableMoviesOverviewLData.horizontalSpan = 8;
+                tableMoviesOverviewLData.grabExcessHorizontalSpace = true;
+                tableMoviesOverviewLData.grabExcessVerticalSpace = true;
+                tableMoviesOverview.setLayoutData(tableMoviesOverviewLData);
+                tableMoviesOverview.addFocusListener(new FocusAdapter() {
+                        public void focusLost(FocusEvent evt) {
+                            System.out
+                                .println("tableMoviesOverview.focusLost, event="
+                                    + evt);
+                        }
+                        public void focusGained(FocusEvent evt) {
+                            System.out
+                                .println("tableMoviesOverview.focusGained, event="
+                                    + evt);
+                        }
+                    });
+                tableMoviesOverview.addSelectionListener(new SelectionAdapter() {
+                        public void widgetSelected(SelectionEvent evt) {
+                            if (logger.isDebugEnabled()) {
+                                logger
+                                    .debug("widgetSelected(SelectionEvent evt = "
+                                        + evt
+                                        + ") - start");
+                            }
+
+                            int index = tableMoviesOverview
+                                .getSelectionIndex();
+
+                            System.out.println("Table select. id: "
+                                + index
+                                + " TableItem:"
+                                + tableMoviesOverview.getItem(index)
+                                + " id: "
+                                + tableMoviesOverview.getItem(index)
+                                    .getText(0));
+
+                            //es wurde ein Element aus Tabelle ausgewaehlt jetzt muss die
+                            //Detailansicht aktualisiert werden
+                            refreshMoviesDetail(tableMoviesOverview.getItem(index)
+                                                              .getText(0));
+
+                            if (logger.isDebugEnabled()) {
+                                logger
+                                    .debug("widgetSelected(SelectionEvent) - end");
+                            }
+                        }
+                    });
+                {
+                    tableMoviesOverview_ColumnID = new TableColumn(
+                        tableMoviesOverview,
+                        SWT.CENTER);
+                    tableMoviesOverview_ColumnID.setText(l
+                        .getString("movies.groupoverview.columnid"));
+                    tableMoviesOverview_ColumnID.setWidth(40);
+                }
+                {
+                    tableMoviesOverview_ColumnTitle = new TableColumn(
+                        tableMoviesOverview,
+                        SWT.CENTER);
+                    tableMoviesOverview_ColumnTitle.setText(l
+                        .getString("movies.groupoverview.columntitle"));
+                    tableMoviesOverview_ColumnTitle.setWidth(120);
+                }
+                {
+                    tableMoviesOverview_ColumnSubtitles = new TableColumn(
+                        tableMoviesOverview,
+                        SWT.CENTER);
+                    tableMoviesOverview_ColumnSubtitles.setText(l
+                        .getString("movies.groupoverview.columnsubtitles"));
+                    tableMoviesOverview_ColumnSubtitles.setWidth(120);
+                }
+                {
+                    tableMoviesOverview_ColumnDate = new TableColumn(
+                        tableMoviesOverview,
+                        SWT.CENTER);
+                    tableMoviesOverview_ColumnDate.setText(l
+                        .getString("movies.groupoverview.columndate"));
+                    tableMoviesOverview_ColumnDate.setWidth(120);
+                }
+            }// table Movies Overview
+            //Table Movies Overview Detail
+            tableMoviesOverviewDetail = new Table(
+                    groupMoviesOverview,
+                    SWT.SINGLE
+                        | SWT.FULL_SELECTION
+                        | SWT.V_SCROLL | SWT.BORDER);
+                GridData tableMoviesOverviewLData = new GridData();
+                tableMoviesOverviewDetail.setHeaderVisible(true);
+                tableMoviesOverviewDetail.setLinesVisible(true);
+                tableMoviesOverviewLData.horizontalAlignment = GridData.FILL;
+                tableMoviesOverviewLData.verticalAlignment = GridData.FILL;
+                tableMoviesOverviewLData.horizontalSpan = 8;
+                tableMoviesOverviewLData.grabExcessHorizontalSpace = true;
+                tableMoviesOverviewLData.grabExcessVerticalSpace = true;
+                tableMoviesOverviewDetail.setLayoutData(tableMoviesOverviewLData);
+                tableMoviesOverviewDetail.addFocusListener(new FocusAdapter() {
+                        public void focusLost(FocusEvent evt) {
+                            System.out
+                                .println("tableMoviesOverviewDetail.focusLost, event="
+                                    + evt);
+                        }
+                        public void focusGained(FocusEvent evt) {
+                            System.out
+                                .println("tableMoviesOverviewDetail.focusGained, event="
+                                    + evt);
+                        }
+                    });
+                tableMoviesOverviewDetail.addSelectionListener(new SelectionAdapter() {
+                        public void widgetSelected(SelectionEvent evt) {
+                            if (logger.isDebugEnabled()) {
+                                logger
+                                    .debug("widgetSelected(SelectionEvent evt = "
+                                        + evt
+                                        + ") - start");
+                            }
+
+                            int index = tableMoviesOverview
+                                .getSelectionIndex();
+
+                            System.out.println("Table select. id: "
+                                + index
+                                + " TableItem:"
+                                + tableMoviesOverviewDetail.getItem(index)
+                                + " id: "
+                                + tableMoviesOverviewDetail.getItem(index)
+                                    .getText(0));
+
+                            //es wurde ein Element aus Tabelle ausgewaehlt jetzt muss die
+                            //Detailansicht aktualisiert werden
+                            //folgende Zeile nicht notwendig
+                            //refreshMoviesDetail(tableMoviesOverview.getItem(index).getText(0));
+
+                            if (logger.isDebugEnabled()) {
+                                logger
+                                    .debug("widgetSelected(SelectionEvent) - end");
+                            }
+                        }
+                    });
+                {
+                    tableMoviesOverviewDetail_ColumnDirectors = new TableColumn(
+                        tableMoviesOverviewDetail,
+                        SWT.CENTER);
+                    tableMoviesOverviewDetail_ColumnDirectors.setText(l
+                        .getString("movies.groupoverviewdetail.columndirectors"));
+                    tableMoviesOverviewDetail_ColumnDirectors.setWidth(80);
+                }
+                {
+                    tableMoviesOverviewDetail_ColumnGenres = new TableColumn(
+                        tableMoviesOverviewDetail,
+                        SWT.CENTER);
+                    tableMoviesOverviewDetail_ColumnGenres.setText(l
+                        .getString("movies.groupoverviewdetail.columngenres"));
+                    tableMoviesOverviewDetail_ColumnGenres.setWidth(80);
+                }
+                {
+                    tableMoviesOverviewDetail_ColumnActors = new TableColumn(
+                        tableMoviesOverviewDetail,
+                        SWT.CENTER);
+                    tableMoviesOverviewDetail_ColumnActors.setText(l
+                        .getString("movies.groupoverviewdetail.columnactors"));
+                    tableMoviesOverviewDetail_ColumnActors.setWidth(80);
+                }
+                {
+                    tableMoviesOverviewDetail_ColumnVideoformats = new TableColumn(
+                        tableMoviesOverviewDetail,
+                        SWT.CENTER);
+                    tableMoviesOverviewDetail_ColumnVideoformats.setText(l
+                        .getString("movies.groupoverviewdetail.columnvideoformats"));
+                    tableMoviesOverviewDetail_ColumnVideoformats.setWidth(80);
+                }
+                {
+                    tableMoviesOverviewDetail_ColumnAudioformats = new TableColumn(
+                        tableMoviesOverviewDetail,
+                        SWT.CENTER);
+                    tableMoviesOverviewDetail_ColumnAudioformats.setText(l
+                        .getString("movies.groupoverviewdetail.columnaudioformats"));
+                    tableMoviesOverviewDetail_ColumnAudioformats.setWidth(80);
+                }
+                {
+                    tableMoviesOverviewDetail_ColumnLanguages = new TableColumn(
+                        tableMoviesOverviewDetail,
+                        SWT.CENTER);
+                    tableMoviesOverviewDetail_ColumnLanguages.setText(l
+                        .getString("movies.groupoverviewdetail.columnlanguages"));
+                    tableMoviesOverviewDetail_ColumnLanguages.setWidth(80);
+                }
+                {
+                    tableMoviesOverviewDetail_ColumnDescription = new TableColumn(
+                        tableMoviesOverviewDetail,
+                        SWT.CENTER);
+                    tableMoviesOverviewDetail_ColumnDescription.setText(l
+                        .getString("movies.groupoverviewdetail.columndescription"));
+                    tableMoviesOverviewDetail_ColumnDescription.setWidth(80);
+                }
+                {
+                    tableMoviesOverviewDetail_ColumnImages = new TableColumn(
+                        tableMoviesOverviewDetail,
+                        SWT.CENTER);
+                    tableMoviesOverviewDetail_ColumnImages.setText(l
+                        .getString("movies.groupoverviewdetail.columnimages"));
+                    tableMoviesOverviewDetail_ColumnImages.setWidth(80);
+                }
+            // Search
+            {
+                //label for Search
+                labelMoviesSearch = new Label(groupMoviesOverview, SWT.NONE);
+                labelMoviesSearch.setText(l
+                        .getString("movies.groupoverview.searchlabel")
+                        + ":");
+                GridData label2LData = new GridData();
+                label2LData.horizontalSpan = 3;
+                labelMoviesSearch.setLayoutData(label2LData);
+
+                //text Search
+                textMoviesSearch = new Text(groupMoviesOverview, SWT.BORDER);
+                GridData text2LData = new GridData();
+                textMoviesSearch.addFocusListener(new FocusAdapter() {
+                    public void focusLost(FocusEvent evt) {
+                        if (logger.isDebugEnabled()) {
+                            logger.debug("focusLost(FocusEvent evt = " + evt + " "
+                                    + textMoviesSearch.getText() + ") - start");
+                        }
+
+                        refreshMoviesOverviewTable(textMoviesSearch.getText());
+
+                        if (logger.isDebugEnabled()) {
+                            logger.debug("focusLost(FocusEvent) - end");
+                        }
+                    }
+                });
+                textMoviesSearch.addListener(SWT.DefaultSelection, new Listener() {
+                    public void handleEvent(Event e) {
+                        if (logger.isDebugEnabled()) {
+                            logger.debug("handleEvent(Event e = " + e + " "
+                                    + textMoviesSearch.getText() + ") - start");
+                        }
+
+                        refreshMoviesOverviewTable(textMoviesSearch.getText());
+
+                        if (logger.isDebugEnabled()) {
+                            logger.debug("handleEvent(Event) - end");
+                        }
+                    }
+                    
+                });
+                text2LData.horizontalAlignment = GridData.FILL;
+                text2LData.horizontalSpan = 5;
+                text2LData.grabExcessHorizontalSpace = true;
+                textMoviesSearch.setLayoutData(text2LData);
+            }// Search                    
+        }
+    }
+
+
+    /**
+     * 
+     */
+    private void initMoviesDetail() {
+        // Group Actors Detail
+        {
+            groupMoviesDetail = new Group(sashForm1, SWT.NONE);
+            GridLayout group2Layout = new GridLayout();
+            GridData group2LData = new GridData();
+            group2Layout.verticalSpacing = 15;
+            group2Layout.numColumns = 6;
+            groupMoviesDetail.setText(l.getString("movies.groupdetail.label"));   
+            FormData formData = new FormData();
+            groupMoviesDetail.setLayout(group2Layout);
+            formData.right = new FormAttachment(100, 100, -5);
+            formData.top = new FormAttachment(0, 100, 5);
+            formData.bottom = new FormAttachment(100, 100, -5);
+            groupMoviesDetail.setLayoutData(formData);
+        }
+//      labels and text for detail
+    	{
+    	    labelMoviesID = new Label(groupMoviesDetail, SWT.NONE);
+    	    labelMoviesID.setText(l
+    	            .getString("movies.groupdetail.labelid")
+    	            + ":");
+    	    labelMoviesID.setSize(125, 15);
+    	    GridData formData2 = new GridData();
+    	    formData2.widthHint = 125;
+    	    formData2.heightHint = 15;
+    	    formData2.horizontalSpan = 2;
+    	    labelMoviesID.setLayoutData(formData2);
+    	}
+    	{
+    	    textMoviesID = new Text(
+    	            groupMoviesDetail,
+    	            SWT.READ_ONLY | SWT.BORDER);
+    	    GridData text1LData1 = new GridData();
+    	    text1LData1.horizontalAlignment = GridData.FILL;
+    	    text1LData1.heightHint = 13;
+    	    text1LData1.horizontalSpan = 4;
+    	    text1LData1.grabExcessHorizontalSpace = true;
+    	    textMoviesID.setLayoutData(text1LData1);
+    	}
+    	{
+            labelMoviesTitle = new Label(
+                groupMoviesDetail,
+                SWT.NONE);
+            labelMoviesTitle.setText(l
+                .getString("movies.groupdetail.labeltitle")
+                + ":");
+            labelMoviesTitle.setSize(125, 15);
+            GridData labelActorNameLData = new GridData();
+            labelActorNameLData.widthHint = 125;
+            labelActorNameLData.heightHint = 15;
+            labelActorNameLData.horizontalSpan = 2;
+            labelMoviesTitle
+                .setLayoutData(labelActorNameLData);
+        }
+        {
+    	    textMoviesTitle = new Text(groupMoviesDetail,
+    	            SWT.READ_ONLY | SWT.BORDER);
+    	    GridData text1LData2 = new GridData();
+    	    text1LData2.horizontalAlignment = GridData.FILL;
+    	    text1LData2.heightHint = 13;
+    	    text1LData2.horizontalSpan = 4;
+    	    text1LData2.grabExcessHorizontalSpace = true;
+    	    textMoviesTitle.setLayoutData(text1LData2);        
+    	}     
+        {
+            labelMoviesDate = new Label(
+                groupMoviesDetail,
+                SWT.NONE);
+            labelMoviesDate.setText(l
+                .getString("movies.groupdetail.labeldate")
+                + ":");
+            labelMoviesDate.setSize(125, 15);
+            GridData labelActorNameLData = new GridData();
+            labelActorNameLData.widthHint = 125;
+            labelActorNameLData.heightHint = 15;
+            labelActorNameLData.horizontalSpan = 2;
+            labelMoviesDate
+                .setLayoutData(labelActorNameLData);
+        }
+        {
+    	    textMoviesDate = new Text(groupMoviesDetail,
+    	            SWT.READ_ONLY | SWT.BORDER);
+    	    GridData text1LData2 = new GridData();
+    	    text1LData2.horizontalAlignment = GridData.FILL;
+    	    text1LData2.heightHint = 13;
+    	    text1LData2.horizontalSpan = 4;
+    	    text1LData2.grabExcessHorizontalSpace = true;
+    	    textMoviesDate.setLayoutData(text1LData2);        
+    	    textMoviesDate.setText(l
+                .getString("movies.groupdetail.textdate"));
+        }// label and text for detail
+        //labels and buttons for Detail
+        {
+    	    labelMoviesAdvice = new Label(groupMoviesDetail, SWT.NONE);
+    	    labelMoviesAdvice.setText(l
+    	            .getString("movies.groupdetail.labeladvice")
+    	            + ":");
+    	    GridData formData2 = new GridData();
+    	    formData2.horizontalSpan = 6;
+    	    formData2.horizontalAlignment = GridData.FILL;
+    	    formData2.grabExcessHorizontalSpace = true;
+    	    formData2.verticalSpan = 3;
+    	    labelMoviesAdvice.setLayoutData(formData2);
+    	}
+        {
+            combo1 = new Combo(groupMoviesDetail, SWT.NONE);
+            combo1.add("AudioFormate");
+            combo1.add("VideoFormate");
+            combo1.add("Darsteller");
+            combo1.add("Genre");
+            combo1.add("Director");
+            
+            GridData combo1LData = new GridData();
+            combo1LData.horizontalSpan = 5;
+            combo1LData.grabExcessHorizontalSpace = true;
+            combo1LData.horizontalAlignment = GridData.FILL;
+            combo1.setLayoutData(combo1LData);
+        }
+        {
+            buttonMoviesNew = new Button(compositeButtons, SWT.PUSH
+                | SWT.CENTER);
+            buttonMoviesNew.setText(l.getString("button.new"));
+            buttonMoviesNew.addSelectionListener(new SelectionAdapter() {
+                public void widgetSelected(SelectionEvent evt) {
+
+                    mode_actor = ManagementGui.MODE_ADD;
+
+                    textMoviesID.setText("");
+                    textMoviesTitle.setText("");
+                    textMoviesDate.setText("");
+                    textMoviesTitle.setEditable(true);
+                    textMoviesDate.setEditable(true);
+
+                    buttonMoviesCancel.setEnabled(true);
+                    buttonMoviesSave.setEnabled(true);
+                    buttonMoviesNew.setEnabled(false);
+                    buttonMoviesEdit.setEnabled(false);
+                    buttonMoviesDelete.setEnabled(false);
+
+                    textMoviesSearch.setEditable(false);
+                    tableMoviesOverview.setEnabled(false);
+
+                }
+            });
+
+            buttonMoviesEdit = new Button(compositeButtons, SWT.PUSH
+                | SWT.CENTER);
+            buttonMoviesEdit.setText(l.getString("button.edit"));
+            buttonMoviesEdit.setEnabled(false);
+            buttonMoviesEdit.addSelectionListener(new SelectionAdapter() {
+                public void widgetSelected(SelectionEvent evt) {
+
+                    mode_actor = ManagementGui.MODE_EDIT;
+
+                    textMoviesID.setEditable(false);
+                    textMoviesTitle.setEditable(true);
+                    textMoviesTitle.setFocus();
+                    textMoviesDate.setEditable(true);
+
+                    buttonMoviesCancel.setEnabled(true);
+                    buttonMoviesSave.setEnabled(true);
+                    buttonMoviesNew.setEnabled(false);
+                    buttonMoviesEdit.setEnabled(false);
+                    buttonMoviesDelete.setEnabled(false);
+
+                    tableMoviesOverview.setEnabled(false);
+                    textMoviesSearch.setEnabled(false);
+
+                }
+            });
+
+            buttonMoviesDelete = new Button(compositeButtons, SWT.PUSH
+                | SWT.CENTER);
+            buttonMoviesDelete.setText(l.getString("button.delete"));
+            buttonMoviesDelete.setEnabled(false);
+            buttonMoviesDelete.addSelectionListener(new SelectionAdapter() {
+                public void widgetSelected(SelectionEvent evt) {
+                    System.out
+                        .println("buttonMoviesDelete.widgetSelected, event="
+                            + evt);
+
+                    String msg = MessageFormat
+                        .format(
+                            l
+                                .getString("movies.groupdetail.deletebutton.question.text"),
+                            new Object[] { textMoviesTitle.getText()
+                                + " "
+                                + l
+                                    .getString("movies.groupdetail.deletebutton.question.gap")
+                                + " "
+                                + textMoviesDate.getText() });
+
+                    int question = showMsg(
+                        msg,
+                        l
+                            .getString("movies.groupdetail.deletebutton.question.header"),
+                        SWT.ICON_QUESTION | SWT.YES | SWT.NO);
+
+                    if (question != SWT.YES) {
+                        return;
+                    }
+
+                    Movie o = new Movie();
+                    o.setMovieId(new Integer(Integer.parseInt(textMoviesID
+                        .getText())));
+                    o.setTitle(textMoviesTitle.getText());
+                    //TODO
+                    //entsprechendes Objekt erzeugen
+                    //o.setReleaseDate(textMoviesDate.getText());
+
+                    try {
+                        //object speichern
+                        // Fehlerbehandlung
+                        Database.deleteObject(o);
+
+                        //?bersichtsTabelle aktualisieren
+                        refreshMoviesOverviewTable(textMoviesSearch.getText());
+
+                        //Detailansicht leeren
+                        textMoviesID.setText("");
+                        textMoviesTitle.setText("");
+                        textMoviesDate.setText("");
+                        tableMoviesOverviewDetail.removeAll();
+                        //in Tabelle n?chsten ausw?hlen
+                        try {
+                            tableMoviesOverview.select(0);
+                        } catch (Exception ex) {
+                        }
+
+                        //Statusline Nachricht sezten
+                        statusLine
+                            .setStatus(
+                                1,
+                                l
+                                    .getString("movies.groupdetail.deletebutton.newok"));
+
+                    } catch (DataBaseException e) {
+                        if (e.getMessage().equalsIgnoreCase("1")) {
+                            //Fehler beim Speichern des Objectes
+
+                            statusLine
+                                .setStatus(
+                                    3,
+                                    l
+                                        .getString("movies.groupdetail.deletebutton.errorsave"));
+                            showMsg(
+                                l
+                                    .getString("movies.groupdetail.deletebutton.errorsave"),
+                                l.getString("error"),
+                                SWT.ICON_ERROR | SWT.OK);
+
+                        } else if (e.getMessage().equalsIgnoreCase("2")) {
+                            //fehler beim db aufbau
+                            statusLine
+                                .setStatus(
+                                    3,
+                                    l
+                                        .getString("movies.groupdetail.deletebutton.errordb"));
+                            showMsg(
+                                l
+                                    .getString("movies.groupdetail.deletebutton.errordb"),
+                                l.getString("error"),
+                                SWT.ICON_ERROR | SWT.OK);
+
+                        } else {
+                            //@todo
+                            e.printStackTrace();
+                        }
+
+                    }
+
+                }
+
+            });
+
+            //leerer nicht sichtbarer Button
+            buttonMoviesFill = new Button(compositeButtons, SWT.PUSH
+                | SWT.CENTER);
+            GridData buttonActorFillLData = new GridData();
+            buttonMoviesFill.setVisible(false);
+            buttonMoviesFill.setEnabled(false);
+            buttonActorFillLData.widthHint = 30;
+            buttonActorFillLData.heightHint = 23;
+            buttonMoviesFill.setLayoutData(buttonActorFillLData);
+
+            buttonMoviesSave = new Button(compositeButtons, SWT.PUSH
+                | SWT.CENTER);
+            buttonMoviesSave.setText(l.getString("button.save"));
+            buttonMoviesSave.setEnabled(false);
+            buttonMoviesSave.addSelectionListener(new SelectionAdapter() {
+                public void widgetSelected(SelectionEvent evt) {
+                    System.out
+                        .println("buttonMoviesSave.widgetSelected, event="
+                            + evt);
+
+                    //testen ob Name leer ist
+                    //TODO
+                    //komplette Speichervorgan muss erweitert werden da
+                    //Ausma? von Film gr??er als bei anderen Composite
+                    /*
+                     if (textActorsFName.getText().trim().equalsIgnoreCase("") 
+                     ||  textActorsLName.getText().trim().equalsIgnoreCase("")   ) {
+                     
+                     showMsg(l.getString("actors.groupdetail.savebutton.warn.noname.msg"),
+                     l.getString("actors.groupdetail.savebutton.warn.noname.title"),
+                     SWT.ICON_WARNING | SWT.YES);
+
+                     return;
+                     }
+                     
+                     //testen welcher mode
+                     
+                     if (mode_actor == ManagementGui.MODE_ADD) {
+                     */
+                    /**
+                     * @todo eine Exception bekommen wieder leider NOCH nicht mit
+                     * d.h. es muss noch ein r?ckgabewert kommen oder eine Exception 
+                     * ?bermitteln werden (aus der DB Klasse)
+                     */
+                    //neues Objekt erzeugen
+                    /*
+                     Actor tmp = new Actor(textActorsFName.getText(),
+                     textActorsLName.getText());
+                     
+                     try {
+                     //object speichern
+                     // Fehlerbehandlung
+                     Object o = Database.saveObject(
+                     new Actor(textActorsFName.getText(),
+                     textActorsLName.getText()));
+                     
+                     // in ?bersichtstabelle einf?gen
+                     insertIntoActorsOverviewTable((Actor)o);
+                     textActorsID.setText( ((Actor)o).getActorId()+"" );
+                     
+                     
+                     //Statusline Nachricht sezten
+                     statusLine.setStatus(1,l.getString("actors.groupdetail.savebutton.newok"));
+
+                     } catch (DataBaseException e) {
+                     if (e.getMessage().equalsIgnoreCase("1")) {
+                     //Fehler beim Speichern des Objectes
+
+                     statusLine.setStatus(3,l.getString("actors.groupdetail.savebutton.errorsave"));
+                     showMsg(l.getString("actors.groupdetail.savebutton.errorsave"),"Fehler", SWT.ICON_ERROR | SWT.OK);
+                     
+                     } else if (e.getMessage().equalsIgnoreCase("2")) {
+                     //fehler beim db aufbau
+                     statusLine.setStatus(3,l.getString("actors.groupdetail.savebutton.errordb"));
+                     showMsg(l.getString("actors.groupdetail.savebutton.errordb"),"Fehler", SWT.ICON_ERROR | SWT.OK);
+                     
+                     } else {
+                     //@todo
+                     e.printStackTrace();
+                     }
+                     
+                     }
+                     
+                     
+                     //alle Buttons auf aktiv setzen
+                     setActorsGroupButtonSaveCancel();
+                     
+                     } else if (mode_actor == ManagementGui.MODE_EDIT) {
+                     
+                     Actor tmp = new Actor(textActorsFName.getText(),
+                     textActorsLName.getText());
+                     tmp.setActorId( new Integer (Integer.parseInt(textActorsID.getText())) );
+                     try {
+                     //object speichern
+                     // Fehlerbehandlung
+                     Database.saveObject(tmp);
+                     //?bersichtstabelle aktualisieren
+                     refreshActorsOverviewTable(textActorsSearch.getText());
+                     
+                     //Statusline Nachricht sezten
+                     statusLine.setStatus(1,l.getString("actors.groupdetail.savebutton.editok"));
+                     
+
+                     } catch (DataBaseException e) {
+                     if (e.getMessage().equalsIgnoreCase("1")) {
+                     //Fehler beim Speichern des Objectes
+
+                     statusLine.setStatus(3,l.getString("actors.groupdetail.savebutton.errorsave"));
+                     showMsg(l.getString("actors.groupdetail.savebutton.errorsave"),"Fehler", SWT.ICON_ERROR | SWT.OK);
+                     
+                     } else if (e.getMessage().equalsIgnoreCase("2")) {
+                     //fehler beim db aufbau
+                     statusLine.setStatus(3,l.getString("actors.groupdetail.savebutton.errordb"));
+                     showMsg(l.getString("actors.groupdetail.savebutton.errordb"),"Fehler", SWT.ICON_ERROR | SWT.OK);
+                     
+                     } else {
+                     //@todo
+                     e.printStackTrace();
+                     }
+                     
+                     }
+                     
+                     
+                     //alle Buttons auf aktiv setzen
+                     setActorsGroupButtonSaveCancel();
+                     
+                     }
+                     
+                     
+                     
+                     
+                     // @todo Exception werfen, da nur die zwei Modes sein d?rfen
+                     
+                     */
+                }
+
+            });
+
+            buttonMoviesCancel = new Button(groupMoviesDetail, SWT.PUSH
+                | SWT.CENTER);
+            buttonMoviesCancel.setText("ansehen / bearbeiten");
+            buttonMoviesCancel.setEnabled(false);
+            buttonMoviesCancel.addSelectionListener(new SelectionAdapter() {
+                public void widgetSelected(SelectionEvent evt) {
+                    System.out
+                        .println("buttonMoviesCancel.widgetSelected, event="
+                            + evt);
+                    setMoviesGroupButtonSaveCancel();
+                }
+            });
+        }
+        {
+            list1 = new List(groupMoviesDetail, SWT.MULTI | SWT.V_SCROLL | SWT.BORDER);
+            GridData list1LData = new GridData();
+            list1LData.horizontalAlignment = GridData.FILL;
+            list1LData.horizontalSpan = 4;
+            list1LData.verticalSpan = 4;
+            list1LData.grabExcessHorizontalSpace = true;
+            list1LData.verticalAlignment = GridData.FILL;
+            list1.setLayoutData(list1LData);
+        }
+        {
+            button1 = new Button(groupMoviesDetail, SWT.PUSH | SWT.CENTER);
+            button1.setText("add");
+            GridData list1LData = new GridData();
+            list1LData.horizontalAlignment = GridData.FILL;
+            list1LData.horizontalSpan = 2;
+            list1LData.grabExcessHorizontalSpace = true;
+            button1.setLayoutData(list1LData);            
+            
+        }
+        {
+            button3 = new Button(groupMoviesDetail, SWT.PUSH | SWT.CENTER);
+            button3.setText("up");
+            GridData list1LData = new GridData();
+            list1LData.horizontalAlignment = GridData.FILL;
+            list1LData.horizontalSpan = 2;
+            list1LData.grabExcessHorizontalSpace = true;
+            button3.setLayoutData(list1LData); 
+        }
+        {
+            button2 = new Button(groupMoviesDetail, SWT.PUSH | SWT.CENTER);
+            button2.setText("Delete");
+            GridData list1LData = new GridData();
+            list1LData.horizontalAlignment = GridData.FILL;
+            list1LData.horizontalSpan = 2;
+            list1LData.grabExcessHorizontalSpace = true;
+            button2.setLayoutData(list1LData); 
+        }
+        {
+            button4 = new Button(groupMoviesDetail, SWT.PUSH | SWT.CENTER);
+            button4.setText("down");
+            GridData list1LData = new GridData();
+            list1LData.horizontalAlignment = GridData.FILL;
+            list1LData.horizontalSpan = 2;
+            list1LData.grabExcessHorizontalSpace = true;
+            button4.setLayoutData(list1LData); 
+        }
+        {
+    	    compositeButtons = new Composite(groupMoviesDetail, SWT.EMBEDDED);
+    	    GridLayout composite2Layout = new GridLayout();
+    	    composite2Layout.numColumns = 6;
+    	    GridData composite2LData = new GridData();
+    	    compositeButtons.setLayout(composite2Layout);
+    	    composite2LData.verticalAlignment = GridData.END;
+    	    composite2LData.horizontalAlignment = GridData.CENTER;
+    	    composite2LData.widthHint = 391;
+    	    composite2LData.horizontalSpan = 6;
+    	    composite2LData.grabExcessHorizontalSpace = true;
+        	composite2LData.grabExcessVerticalSpace = true;
+        	composite2LData.heightHint = 35;
+        	compositeButtons.setLayoutData(composite2LData);
+    	}
+        {
+            button5 = new Button(groupMoviesDetail, SWT.PUSH | SWT.CENTER);
+            button5.setText("ausw?hlen");
+        }
+
+    }
+
+    /**
+     * 
+     */
+    protected void setMoviesGroupButtonSaveCancel() {
+        tableMoviesOverview.setEnabled(true);
+        textMoviesTitle.setEditable(false);
+        textMoviesDate.setEditable(false);
+        buttonMoviesCancel.setEnabled(false);
+        buttonMoviesSave.setEnabled(false);
+        buttonMoviesNew.setEnabled(true);
+        buttonMoviesEdit.setEnabled(false);
+        buttonMoviesDelete.setEnabled(false);
+        
+    }
+
+    /**
+     * @param text
+     */
+    protected void refreshMoviesOverviewTable(String text) {
+        // TODO Auto-generated method stub
+        
+    }
+
+    /**
+     * @param text
+     */
+    protected void refreshMoviesDetail(String text) {
+        // TODO Auto-generated method stub
+        
+    }
+}

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/DialogDescription.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/DialogDescription.java	2004-11-20 23:54:35 UTC (rev 146)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/DialogDescription.java	2004-11-22 19:24:56 UTC (rev 147)
@@ -62,7 +62,7 @@
 		try {
 			Display display = Display.getDefault();
 			Shell shell = new Shell(display);
-			DialogDescription inst = new DialogDescription(shell, SWT.NULL);
+			DialogDescription inst = new DialogDescription(shell, SWT.NULL, Locale.GERMAN);
 			inst.open();
 		} catch (Exception e) {
 			e.printStackTrace();
@@ -89,10 +89,15 @@
     }
 	
 	
-	public DialogDescription(Shell parent, int style) {
+    
+	public DialogDescription(Shell parent, int style, Locale locale) {
 		super(parent, style);
+		
+		initLanguage(locale);
 	}
 
+
+	
 	public void open() {
 		try {
 			Shell parent = getParent();

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java	2004-11-20 23:54:35 UTC (rev 146)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java	2004-11-22 19:24:56 UTC (rev 147)
@@ -346,8 +346,8 @@
             cTabFolder1LData.verticalAlignment = GridData.FILL;
             cTabFolderMain.setLayoutData(cTabFolder1LData);
             
-            initFormatTab();
-            
+            //initFormatTab();
+            initMovieTab();
 
         } catch (Exception e) {
             e.printStackTrace();



From rgriesch at sheep.berlios.de  Mon Nov 22 22:39:02 2004
From: rgriesch at sheep.berlios.de (Remo Griesch at BerliOS)
Date: Mon, 22 Nov 2004 22:39:02 +0100
Subject: [Provirent-svn-commit] r148 - project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui
Message-ID: <200411222139.iAMLd2J6008688@sheep.berlios.de>

Author: rgriesch
Date: 2004-11-22 22:39:02 +0100 (Mon, 22 Nov 2004)
New Revision: 148

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java
Log:
management gui - problem behoben
               - programm ist abgest?\195?\188rzt wenn man                  aktives tabitem erneut aufgerufen hat
               - Ursache fehlerhafter Code in                  Actionlistener 

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java	2004-11-22 19:24:56 UTC (rev 147)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java	2004-11-22 21:39:02 UTC (rev 148)
@@ -515,7 +515,7 @@
 				    return;   
 				}
 				
-				cTabFolderMain.setSelection(tabItemStatus);
+				cTabFolderMain.setSelection(tabItemImage);
 				viewStatusMenuItem.setSelection(true);
 				cTabFolderMain.showSelection();
             }
@@ -532,7 +532,7 @@
 				    return;   
 				}
 				
-				cTabFolderMain.setSelection(tabItemActor);
+				cTabFolderMain.setSelection(tabItemMovie);
 				viewActorMenuItem.setSelection(true);
 				cTabFolderMain.showSelection();				
             



From sforstner at sheep.berlios.de  Mon Nov 22 22:53:20 2004
From: sforstner at sheep.berlios.de (Stefan at BerliOS)
Date: Mon, 22 Nov 2004 22:53:20 +0100
Subject: [Provirent-svn-commit] r149 - in project_src/provirent_hibernate/src: de/hsharz/provirent/management/gui de/hsharz/provirent/management/gui/language de/hsharz/provirent/objects de/hsharz/provirent/persistence test/provirent/hibernate
Message-ID: <200411222153.iAMLrKmY009260@sheep.berlios.de>

Author: sforstner
Date: 2004-11-22 22:53:19 +0100 (Mon, 22 Nov 2004)
New Revision: 149

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeFormate.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/formate.properties
   project_src/provirent_hibernate/src/de/hsharz/provirent/objects/AudioFormat.hbm.xml
   project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Movie.hbm.xml
   project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java
   project_src/provirent_hibernate/src/test/provirent/hibernate/TestAudioFormat.java
Log:


Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeFormate.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeFormate.java	2004-11-22 21:39:02 UTC (rev 148)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeFormate.java	2004-11-22 21:53:19 UTC (rev 149)
@@ -31,6 +31,9 @@
 import org.eclipse.swt.widgets.TableItem;
 import org.eclipse.swt.widgets.Text;
 
+import de.hsharz.provirent.objects.AudioFormat;
+import de.hsharz.provirent.objects.AudioFormat;
+import de.hsharz.provirent.objects.AudioFormat;
 import de.hsharz.provirent.objects.VideoFormat;
 import de.hsharz.provirent.persistence.DataBaseException;
 import de.hsharz.provirent.persistence.Database;
@@ -69,15 +72,25 @@
     private Label labelVideoFormatName;
 
     private Text textVideoFormatID;
+    
+    private Group groupAudioFormatOverview;
 
+    private Group groupAudioFormatDetail;
+
+    private Label labelAudioFormatId;
+
+    private Label labelAudioFormatShortname;
+
+    private Text textAudioFormatName;
+
+    private Label labelAudioFormatName;
+
+    private Text textAudioFormatID;
+
     private Composite composite2;
 
-    private Group groupAudioFormatOverview;
-
     private List list1;
 
-    private Group groupAudioFormatDetail;
-
     private Text textAudioFormatSearch;
 
     private Label labelAudioFormatSearch;
@@ -103,13 +116,29 @@
     private Button buttonVideoFormatEdit;
 
     private Button buttonVideoFormatNew;
+    
+    private Button buttonAudioFormatCancel;
 
+    private Button buttonAudioFormatSave;
+
+    private Button buttonAudioFormatFill;
+
+    private Button buttonAudioFormatDelete;
+
+    private Button buttonAudioFormatEdit;
+
+    private Button buttonAudioFormatNew;
+
+
     private Text textVideoFormatShortname;
 
     private Text textVideoFormatSearch;
 
     private Label labelVideoFormatSearch;
+    
+    private Text textAudioFormatShortname;
 
+
     private Table tableVideoFormat;
 
     private SashForm sashFormVideoFormat;
@@ -207,6 +236,7 @@
         
         //die VideoFormattabelle wird gef?llt
         refreshVideoFormatTable("");
+        refreshAudioFormatTable("");
         
     }
 
@@ -836,141 +866,669 @@
    
     
     private void initAudioFormatGroup() {
+        //init a group for the AudioFormat
         groupAudioFormat = new Group(sashForm1, SWT.NONE);
-        
-        GridLayout group1Layout = new GridLayout();
-        group1Layout.makeColumnsEqualWidth = true;
-        groupAudioFormat.setText("AudioFormat");
-        FormData group1LData = new FormData();
-        groupAudioFormat.setLayout(group1Layout);
-        group1LData.height = 240;
-        group1LData.width = 750;
-        groupAudioFormat.setLayoutData(group1LData);
+        GridLayout group2Layout = new GridLayout();
+        group2Layout.makeColumnsEqualWidth = true;
+        groupAudioFormat.setText(l.getString("AudioFormat.group.label"));
+        groupAudioFormat.setSize(758, 284);
+        FormData group2LData = new FormData();
+        groupAudioFormat.addFocusListener(new FocusAdapter() {
+            public void focusLost(FocusEvent evt) {
+                System.out.println("groupAudioFormat.focusLost, event="
+                    + evt);
+                buttonAudioFormatCancel.setEnabled(false);
+                buttonAudioFormatDelete.setEnabled(false);
+                buttonAudioFormatEdit.setEnabled(false);
+                buttonAudioFormatNew.setEnabled(false);
+                buttonAudioFormatSave.setEnabled(false);
+                
+            }
+        });
+        groupAudioFormat.setLayout(group2Layout);
+        groupAudioFormat.setLayoutData(group2LData);
         {
             sashFormAudioFormat = new SashForm(groupAudioFormat, SWT.NONE);
-            FormLayout sashForm1Layout = new FormLayout();
-            GridData sashForm1LData = new GridData();
-            sashFormAudioFormat.setLayout(sashForm1Layout);
-            sashForm1LData.verticalAlignment = GridData.FILL;
-            sashForm1LData.horizontalAlignment = GridData.FILL;
-            sashForm1LData.horizontalSpan = 6;
-            sashForm1LData.grabExcessHorizontalSpace = true;
-            sashForm1LData.grabExcessVerticalSpace = true;
-            sashFormAudioFormat.setLayoutData(sashForm1LData);
-            {
-                groupAudioFormatOverview = new Group(sashFormAudioFormat,
-                        SWT.NONE);
-                GridLayout group3Layout = new GridLayout();
-                group3Layout.numColumns = 6;
-                groupAudioFormatOverview.setText("?bersicht");
-                FormData group3LData = new FormData();
-                groupAudioFormatOverview.setLayout(group3Layout);
-                group3LData.right = new FormAttachment(100, 100, -5);
-                group3LData.top = new FormAttachment(0, 100, 5);
-                group3LData.bottom = new FormAttachment(100, 100, -5);
-                groupAudioFormatOverview.setLayoutData(group3LData);
-                {
-                    tableAudioFormat = new Table(groupAudioFormatOverview,
-                            SWT.SINGLE | SWT.FULL_SELECTION | SWT.V_SCROLL
-                                    | SWT.BORDER);
-                    tableAudioFormat.setHeaderVisible(true);
-                    tableAudioFormat.setLinesVisible(true);
-                    GridData table1LData = new GridData();
-                    tableAudioFormat
-                            .addSelectionListener(new SelectionAdapter() {
-                                public void widgetSelected(SelectionEvent evt) {
+            FormLayout sashForm2Layout = new FormLayout();
+            sashFormAudioFormat.setSize(748, 300);
+            GridData sashForm2LData = new GridData();
+            sashFormAudioFormat.setLayout(sashForm2Layout);
+            sashForm2LData.verticalAlignment = GridData.FILL;
+            sashForm2LData.horizontalAlignment = GridData.FILL;
+            sashForm2LData.grabExcessHorizontalSpace = true;
+            sashForm2LData.grabExcessVerticalSpace = true;
+            sashFormAudioFormat.setLayoutData(sashForm2LData);
 
-                                    int index = tableDirector
-                                            .getSelectionIndex();
-                                    System.out.println("Table select. id: "
-                                            + index
-                                            + " TableItem:"
-                                            + tableDirector.getItem(index)
-                                            + " id: "
-                                            + tableDirector.getItem(index)
-                                                    .getText(0));
-                                }
-                            });
-                    table1LData.verticalAlignment = GridData.FILL;
-                    table1LData.horizontalAlignment = GridData.FILL;
-                    table1LData.horizontalSpan = 6;
-                    table1LData.grabExcessHorizontalSpace = true;
-                    table1LData.grabExcessVerticalSpace = true;
-                    tableAudioFormat.setLayoutData(table1LData);
-                    {
-                        tableColumn1 = new TableColumn(tableAudioFormat,
-                                SWT.CENTER);
-                        tableColumn1.setText("id");
-                        tableColumn1.setWidth(100);
+            //init die Gruppe f?r AudioFormat ?berblick
+            initAudioFormatGroupOverview();
+            //init die Detailansicht
+            initAudioFormatGroupDetail();
+        }
+    }
+
+    /**
+     * 
+     */
+    private void initAudioFormatGroupDetail() {
+        groupAudioFormatDetail = new Group(sashFormAudioFormat, SWT.NONE);
+        GridLayout groupAudioFormatDetailLayout = new GridLayout();
+        groupAudioFormatDetailLayout.marginHeight = 25;
+        groupAudioFormatDetailLayout.numColumns = 6;
+        groupAudioFormatDetailLayout.verticalSpacing = 15;
+        groupAudioFormatDetail.setText(l
+                .getString("AudioFormat.groupdetail.label"));
+        FormData formData = new FormData();
+        groupAudioFormatDetail.setLayout(groupAudioFormatDetailLayout);
+        formData.right = new FormAttachment(100, 100, -5);
+        formData.top = new FormAttachment(0, 100, 5);
+        formData.bottom = new FormAttachment(100, 100, -5);
+        groupAudioFormatDetail.setLayoutData(formData);
+        {
+            labelAudioFormatId = new Label(groupAudioFormatDetail, SWT.NONE);
+            labelAudioFormatId.setText(l
+                    .getString("AudioFormat.groupdetail.idlabel")
+                    + ":");
+            labelAudioFormatId.setSize(125, 15);
+            GridData formData2 = new GridData();
+            formData2.widthHint = 125;
+            formData2.heightHint = 15;
+            formData2.horizontalSpan = 2;
+            labelAudioFormatId.setLayoutData(formData2);
+        }
+        {
+            textAudioFormatID = new Text(groupAudioFormatDetail, SWT.READ_ONLY
+                    | SWT.BORDER);
+            GridData text1LData1 = new GridData();
+            text1LData1.horizontalAlignment = GridData.FILL;
+            text1LData1.heightHint = 13;
+            text1LData1.horizontalSpan = 4;
+            text1LData1.grabExcessHorizontalSpace = true;
+            textAudioFormatID.setLayoutData(text1LData1);
+        }
+        {
+            labelAudioFormatName = new Label(groupAudioFormatDetail, SWT.NONE);
+            labelAudioFormatName.setText(l
+                    .getString("AudioFormat.groupdetail.namelabel")
+                    + ":");
+            labelAudioFormatName.setSize(125, 15);
+            GridData labelAudioFormatNameLData = new GridData();
+            labelAudioFormatNameLData.widthHint = 125;
+            labelAudioFormatNameLData.heightHint = 15;
+            labelAudioFormatNameLData.horizontalSpan = 2;
+            labelAudioFormatName.setLayoutData(labelAudioFormatNameLData);
+        }
+        {
+            textAudioFormatName = new Text(groupAudioFormatDetail,
+                    SWT.READ_ONLY | SWT.BORDER);
+            GridData text1LData2 = new GridData();
+            text1LData2.horizontalAlignment = GridData.FILL;
+            text1LData2.heightHint = 13;
+            text1LData2.horizontalSpan = 4;
+            text1LData2.grabExcessHorizontalSpace = true;
+            textAudioFormatName.setLayoutData(text1LData2);
+        }
+        {
+            labelAudioFormatShortname = new Label(groupAudioFormatDetail,
+                    SWT.NONE);
+            labelAudioFormatShortname.setText(l
+                    .getString("AudioFormat.groupdetail.shortcutlabel")
+                    + ":");
+            labelAudioFormatShortname.setSize(125, 15);
+            GridData label1LData1 = new GridData();
+            label1LData1.widthHint = 125;
+            label1LData1.heightHint = 15;
+            label1LData1.horizontalSpan = 2;
+            labelAudioFormatShortname.setLayoutData(label1LData1);
+        }
+        {
+            textAudioFormatShortname = new Text(groupAudioFormatDetail,
+                    SWT.READ_ONLY | SWT.BORDER);
+            GridData text1LData3 = new GridData();
+            text1LData3.horizontalAlignment = GridData.FILL;
+            text1LData3.heightHint = 13;
+            text1LData3.horizontalSpan = 4;
+            text1LData3.grabExcessHorizontalSpace = true;
+            textAudioFormatShortname.setLayoutData(text1LData3);
+        }
+        {
+
+//          die Buttons bekommen ein eigenes Composite
+            composite2 = new Composite(groupAudioFormatDetail, SWT.EMBEDDED);
+            GridLayout composite2Layout = new GridLayout();
+            composite2Layout.numColumns = 6;
+            GridData composite2LData = new GridData();
+            composite2.setLayout(composite2Layout);
+            composite2LData.verticalAlignment = GridData.END;
+            composite2LData.horizontalAlignment = GridData.CENTER;
+            composite2LData.widthHint = 391;
+            composite2LData.horizontalSpan = 6;
+            composite2LData.grabExcessHorizontalSpace = true;
+            composite2LData.grabExcessVerticalSpace = true;
+            composite2LData.heightHint = 35;
+            composite2.setLayoutData(composite2LData);
+
+            //init all the Buttons
+            initAudioFormatDetailButtons();
+
+        }
+    }
+
+    /**
+     * 
+     */
+    private void initAudioFormatDetailButtons() {
+        buttonAudioFormatNew = new Button(composite2, SWT.PUSH | SWT.CENTER);
+        buttonAudioFormatNew.setText(l.getString("button.new"));
+        buttonAudioFormatNew.addSelectionListener(new SelectionAdapter() {
+            public void widgetSelected(SelectionEvent evt) {
+
+                textAudioFormatID.setText("");
+                textAudioFormatName.setText("");
+                textAudioFormatShortname.setText("");
+                
+
+                textAudioFormatName.setEditable(true);
+                textAudioFormatShortname.setEditable(true);
+                buttonAudioFormatCancel.setEnabled(true);
+                buttonAudioFormatSave.setEnabled(true);
+                buttonAudioFormatNew.setEnabled(false);
+                buttonAudioFormatEdit.setEnabled(false);
+                buttonAudioFormatDelete.setEnabled(false);
+                
+                textAudioFormatSearch.setEditable(false);
+                tableAudioFormat.setEnabled(false);
+
+                mode_AudioFormat = ManagementGui.MODE_ADD;
+
+            }
+        });
+
+        buttonAudioFormatEdit = new Button(composite2, SWT.PUSH | SWT.CENTER);
+        buttonAudioFormatEdit.setText(l.getString("button.edit"));
+        buttonAudioFormatEdit.setEnabled(false);
+        buttonAudioFormatEdit.addSelectionListener(new SelectionAdapter() {
+            public void widgetSelected(SelectionEvent evt) {
+
+                mode_AudioFormat = ManagementGui.MODE_EDIT;
+
+
+                textAudioFormatID.setEditable(false);
+
+                textAudioFormatName.setEditable(true);
+                textAudioFormatName.setFocus();
+                textAudioFormatShortname.setEditable(true);
+                buttonAudioFormatCancel.setEnabled(true);
+                buttonAudioFormatSave.setEnabled(true);
+                buttonAudioFormatNew.setEnabled(false);
+                buttonAudioFormatEdit.setEnabled(false);
+                buttonAudioFormatDelete.setEnabled(false);
+
+
+                tableAudioFormat.setEnabled(false);
+                textAudioFormatSearch.setEnabled(false);
+                
+
+            }
+        });
+
+        buttonAudioFormatDelete = new Button(composite2, SWT.PUSH | SWT.CENTER);
+        buttonAudioFormatDelete.setText(l.getString("button.delete"));
+        buttonAudioFormatDelete.setEnabled(false);
+        buttonAudioFormatDelete.addSelectionListener(new SelectionAdapter() {
+            public void widgetSelected(SelectionEvent evt) {
+                System.out
+                        .println("buttonAudioFormatDelete.widgetSelected, event="
+                                + evt);
+                
+                
+               String msg = MessageFormat.format(
+                       l.getString("AudioFormat.groupdetail.deletebutton.question.text"),
+                               new Object[]{textAudioFormatName.getText()+" "+textAudioFormatShortname.getText()});
+                
+               int question = showMsg(msg,
+                       l.getString("AudioFormat.groupdetail.deletebutton.question.header"), 
+                       SWT.ICON_QUESTION | SWT.YES | SWT.NO);
+               
+               if (question != SWT.YES){
+                   return;
+               }
+                
+                AudioFormat o = new AudioFormat();
+                o.setAudioFormatId(new Integer(Integer.parseInt(textAudioFormatID.getText())));
+                o.setName(textAudioFormatName.getText());
+                o.setShortname(textAudioFormatShortname.getText());
+                
+                try {
+                    //object speichern
+                    // Fehlerbehandlung
+                    Database.deleteObject(o);
+
+                    //?bersichtsTabelle aktualisieren
+                    refreshAudioFormatTable(textAudioFormatSearch.getText());
+                    
+                    //Detailansicht leeren
+                    textAudioFormatID.setText("");
+                    textAudioFormatName.setText("");
+                    textAudioFormatShortname.setText("");
+                    
+                    //in Tabelle n?chsten ausw?hlen
+                    try {
+                        tableAudioFormat.select(0);
+                    } catch (Exception ex) {}
+                    
+                    //Statusline Nachricht sezten
+                    statusLine.setStatus(1,l.getString("AudioFormat.groupdetail.deletebutton.newok"));
+
+                } catch (DataBaseException e) {
+                    if (e.getMessage().equalsIgnoreCase("1")) {
+                        //Fehler beim Speichern des Objectes
+
+                        statusLine.setStatus(3,l.getString("AudioFormat.groupdetail.deletebutton.errorsave"));
+                        showMsg(l.getString("AudioFormat.groupdetail.deletebutton.errorsave"),
+                                l.getString("error"), SWT.ICON_ERROR | SWT.OK);
+                        
+                    } else if (e.getMessage().equalsIgnoreCase("2")) {
+                        //fehler beim db aufbau
+                        statusLine.setStatus(3,l.getString("AudioFormat.groupdetail.deletebutton.errordb"));
+                        showMsg(l.getString("AudioFormat.groupdetail.deletebutton.errordb"),
+                                l.getString("error"), SWT.ICON_ERROR | SWT.OK);
+                        
+                    } else {
+                        //@todo
+                        e.printStackTrace();
                     }
-                    {
-                        tableColumn2 = new TableColumn(tableAudioFormat,
-                                SWT.CENTER);
-                        tableColumn2.setText("Name");
-                        tableColumn2.setWidth(100);
+                    
+                }                
+                
+
+                }
+
+            }
+        );
+
+        //leerer nicht sichtbarer Button
+        buttonAudioFormatFill = new Button(composite2, SWT.PUSH | SWT.CENTER);
+        GridData buttonAudioFormatFillLData = new GridData();
+        buttonAudioFormatFill.setVisible(false);
+        buttonAudioFormatFill.setEnabled(false);
+        buttonAudioFormatFillLData.widthHint = 30;
+        buttonAudioFormatFillLData.heightHint = 23;
+        buttonAudioFormatFill.setLayoutData(buttonAudioFormatFillLData);
+
+        buttonAudioFormatSave = new Button(composite2, SWT.PUSH | SWT.CENTER);
+        buttonAudioFormatSave.setText(l.getString("button.save"));
+        buttonAudioFormatSave.setEnabled(false);
+        buttonAudioFormatSave.addSelectionListener(new SelectionAdapter() {
+            public void widgetSelected(SelectionEvent evt) {
+                System.out
+                        .println("buttonAudioFormatSave.widgetSelected, event="
+                                + evt);
+
+                
+                //testen ob Name leer ist
+                if (textAudioFormatName.getText().trim().equalsIgnoreCase("")) {
+                    
+                    showMsg(l.getString("AudioFormat.groupdetail.savebutton.warn.noname.msg"),
+                            l.getString("AudioFormat.groupdetail.savebutton.warn.noname.title"),
+                            SWT.ICON_WARNING | SWT.YES);
+
+                    	return;
+                }
+                
+                //testen welcher mode
+                
+                if (mode_AudioFormat == ManagementGui.MODE_ADD) {
+                    
+                    /**
+                     * @todo eine Exception bekommen wieder leider NOCH nicht mit
+                     * d.h. es muss noch ein r?ckgabewert kommen oder eine Exception 
+                     * ?bermitteln werden (aus der DB Klasse)
+                     */
+                    //neues Objekt erzeugen
+                    AudioFormat tmp = new AudioFormat(textAudioFormatName.getText(),
+                            textAudioFormatShortname.getText());
+                    
+                    try {
+                        //object speichern
+                        // Fehlerbehandlung
+                        Object o = Database.saveObject(
+                                new AudioFormat(textAudioFormatName.getText(),
+                                        textAudioFormatShortname.getText()));
+                        
+                        // in ?bersichtstabelle einf?gen
+                        insertIntoAudioFormatTable((AudioFormat)o);
+                        textAudioFormatID.setText( ((AudioFormat)o).getAudioFormatId()+"" );
+                        
+                        
+                        //Statusline Nachricht sezten
+                        statusLine.setStatus(1,l.getString("AudioFormat.groupdetail.savebutton.newok"));
+
+                    } catch (DataBaseException e) {
+                        if (e.getMessage().equalsIgnoreCase("1")) {
+                            //Fehler beim Speichern des Objectes
+
+                            statusLine.setStatus(3,l.getString("AudioFormat.groupdetail.savebutton.errorsave"));
+                            showMsg(l.getString("AudioFormat.groupdetail.savebutton.errorsave"),"Fehler", SWT.ICON_ERROR | SWT.OK);
+                            
+                        } else if (e.getMessage().equalsIgnoreCase("2")) {
+                            //fehler beim db aufbau
+                            statusLine.setStatus(3,l.getString("AudioFormat.groupdetail.savebutton.errordb"));
+                            showMsg(l.getString("AudioFormat.groupdetail.savebutton.errordb"),"Fehler", SWT.ICON_ERROR | SWT.OK);
+                            
+                        } else {
+                            //@todo
+                            e.printStackTrace();
+                        }
+                        
                     }
-                    {
-                        tableColumn3 = new TableColumn(tableAudioFormat,
-                                SWT.CENTER);
-                        tableColumn3.setText("vorname");
-                        tableColumn3.setWidth(100);
+                    
+                    
+                    //alle Buttons auf aktiv setzen
+                    setVideoGroupButtonSaveCancel();
+                    
+                } else if (mode_AudioFormat == ManagementGui.MODE_EDIT) {
+                    
+                    AudioFormat tmp = new AudioFormat(textAudioFormatName.getText(),
+                                    textAudioFormatShortname.getText());
+        		tmp.setAudioFormatId( new Integer (Integer.parseInt(textAudioFormatID.getText())) );
+                try {
+                    //object speichern
+                    // Fehlerbehandlung
+                    Database.saveObject(tmp);
+                    //?bersichtstabelle aktualisieren
+                    refreshAudioFormatTable(textAudioFormatSearch.getText());
+                    
+                    //Statusline Nachricht sezten
+                    statusLine.setStatus(1,l.getString("AudioFormat.groupdetail.savebutton.editok"));
+                   
+
+                } catch (DataBaseException e) {
+                    if (e.getMessage().equalsIgnoreCase("1")) {
+                        //Fehler beim Speichern des Objectes
+
+                        statusLine.setStatus(3,l.getString("AudioFormat.groupdetail.savebutton.errorsave"));
+                        showMsg(l.getString("AudioFormat.groupdetail.savebutton.errorsave"),"Fehler", SWT.ICON_ERROR | SWT.OK);
+                        
+                    } else if (e.getMessage().equalsIgnoreCase("2")) {
+                        //fehler beim db aufbau
+                        statusLine.setStatus(3,l.getString("AudioFormat.groupdetail.savebutton.errordb"));
+                        showMsg(l.getString("AudioFormat.groupdetail.savebutton.errordb"),"Fehler", SWT.ICON_ERROR | SWT.OK);
+                        
+                    } else {
+                        //@todo
+                        e.printStackTrace();
                     }
+                    
                 }
-                {
-                    labelAudioFormatSearch = new Label(
-                            groupAudioFormatOverview, SWT.NONE);
-                    labelAudioFormatSearch.setText("Suche nach:");
-                    GridData label1LData = new GridData();
-                    label1LData.horizontalSpan = 2;
-                    labelAudioFormatSearch.setLayoutData(label1LData);
+                    
+ 
+                    //alle Buttons auf aktiv setzen
+                    setVideoGroupButtonSaveCancel();
+                    
                 }
-                {
-                    textAudioFormatSearch = new Text(groupAudioFormatOverview,
-                            SWT.BORDER);
-                    GridData text1LData = new GridData();
-                    text1LData.horizontalAlignment = GridData.FILL;
-                    text1LData.horizontalSpan = 4;
-                    text1LData.grabExcessHorizontalSpace = true;
-                    textAudioFormatSearch.setLayoutData(text1LData);
+                
+                
+                
+                /**
+                 * @todo Exception werfen, da nur die zwei Modes sein d?rfen
+                 */
+                
+            }
+        });
+
+        buttonAudioFormatCancel = new Button(composite2, SWT.PUSH | SWT.CENTER);
+        buttonAudioFormatCancel.setText(l.getString("button.cancel"));
+        buttonAudioFormatCancel.setEnabled(false);
+        buttonAudioFormatCancel.addSelectionListener(new SelectionAdapter() {
+            public void widgetSelected(SelectionEvent evt) {
+                System.out
+                        .println("buttonAudioFormatCancel.widgetSelected, event="
+                                + evt);
+                setVideoGroupButtonSaveCancel();
+            }
+        });
+
+    }
+
+    /**
+     * @param format
+     */
+    protected void insertIntoAudioFormatTable(AudioFormat format) {
+        TableItem item = new TableItem(tableAudioFormat, SWT.NONE);
+        item.setText(new String[] { format.getAudioFormatId() + "", format.getName(),
+                format.getShortname() });
+    }
+
+    /**
+     * @param text
+     */
+    protected void refreshAudioFormatTable(final String filter) {
+        if (tableAudioFormat == null) {
+            System.out
+                    .println("Konnte AudioFormattable nicht refreshen, da diese null ist!");
+            return;
+        }
+        System.out.println("Versuche nun VideoListe zu refreshen. Filter: "
+                + filter);
+        tableAudioFormat.removeAll();
+        TableItem item;
+        java.util.List AudioFormatlist = Database.getAudioFormat(filter);
+
+        for (int i = 0; i < AudioFormatlist.size(); i++) {
+
+            AudioFormat o = (AudioFormat) AudioFormatlist.get(i);
+            item = new TableItem(tableAudioFormat, SWT.NONE);
+            item.setText(new String[] { o.getAudioFormatId() + "", o.getName(),
+                    o.getShortname() });
+
+        }
+
+    }
+
+    /**
+     * 
+     */
+    private void initAudioFormatGroupOverview() {
+        if (logger.isDebugEnabled()) {
+            logger.debug("initAudioFormatGroupOverview() - start");
+        }
+
+        groupAudioFormatOverview = new Group(sashFormAudioFormat, SWT.NONE);
+        GridLayout group5Layout = new GridLayout();
+        group5Layout.numColumns = 8;
+        groupAudioFormatOverview.setText(l
+                .getString("AudioFormat.groupoverview.label"));
+        FormData group5LData = new FormData();
+        groupAudioFormatOverview.setLayout(group5Layout);
+        group5LData.left = new FormAttachment(0, 100, 0);
+        group5LData.top = new FormAttachment(0, 100, 0);
+        groupAudioFormatOverview.setLayoutData(group5LData);
+
+        //Tabelle anzeigen
+        initTableAudioFormat();
+        //Suche darunter anzeigen
+        initAudioFormatSearch();
+
+        if (logger.isDebugEnabled()) {
+            logger.debug("initAudioFormatGroupOverview() - end");
+        }
+    }
+
+    /**
+     * 
+     */
+    private void initAudioFormatSearch() {
+        if (logger.isDebugEnabled()) {
+            logger.debug("initAudioFormatSearch() - start");
+        }
+
+        //label f?r die Suche
+        labelAudioFormatSearch = new Label(groupAudioFormatOverview, SWT.NONE);
+        labelAudioFormatSearch.setText(l
+                .getString("AudioFormat.groupoverview.searchlabel")
+                + ":");
+        GridData label2LData = new GridData();
+        label2LData.horizontalSpan = 3;
+        labelAudioFormatSearch.setLayoutData(label2LData);
+
+        //das Suchfeld
+        textAudioFormatSearch = new Text(groupAudioFormatOverview, SWT.BORDER);
+        GridData text2LData = new GridData();
+        textAudioFormatSearch.addFocusListener(new FocusAdapter() {
+            public void focusLost(FocusEvent evt) {
+                if (logger.isDebugEnabled()) {
+                    logger.debug("focusLost(FocusEvent evt = " + evt + " "
+                            + textAudioFormatSearch.getText() + ") - start");
                 }
+
+                refreshAudioFormatTable(textAudioFormatSearch.getText());
+
+                if (logger.isDebugEnabled()) {
+                    logger.debug("focusLost(FocusEvent) - end");
+                }
             }
-            {
-                groupAudioFormatDetail = new Group(sashFormAudioFormat,
-                        SWT.NONE);
-                GridLayout group4Layout = new GridLayout();
-                group4Layout.numColumns = 2;
-                groupAudioFormatDetail.setText("Detail");
-                FormData group4LData = new FormData();
-                groupAudioFormatDetail.setLayout(group4Layout);
-                group4LData.left = new FormAttachment(0, 100, 5);
-                group4LData.top = new FormAttachment(0, 100, 5);
-                group4LData.bottom = new FormAttachment(100, 100, -5);
-                groupAudioFormatDetail.setLayoutData(group4LData);
-                {
-                    list1 = new List(groupAudioFormatDetail, SWT.SINGLE
-                            | SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER);
-                    GridData list1LData = new GridData();
-                    list1.addSelectionListener(new SelectionAdapter() {
-                        public void widgetSelected(SelectionEvent evt) {
-                            System.out.println("list1.widgetSelected, event="
-                                    + evt);
+        });
 
-                            //TODO add your
-                            // code for
-                            // list1.widgetSelected
-                        }
-                    });
-                    list1LData.verticalAlignment = GridData.FILL;
-                    list1LData.horizontalAlignment = GridData.FILL;
-                    list1LData.grabExcessHorizontalSpace = true;
-                    list1LData.grabExcessVerticalSpace = true;
-                    list1.setLayoutData(list1LData);
+        textAudioFormatSearch.addListener(SWT.DefaultSelection, new Listener() {
+            public void handleEvent(Event e) {
+                if (logger.isDebugEnabled()) {
+                    logger.debug("handleEvent(Event e = " + e + " "
+                            + textAudioFormatSearch.getText() + ") - start");
                 }
+
+                refreshAudioFormatTable(textAudioFormatSearch.getText());
+
+                if (logger.isDebugEnabled()) {
+                    logger.debug("handleEvent(Event) - end");
+                }
             }
+        });
+
+        text2LData.horizontalAlignment = GridData.FILL;
+        text2LData.horizontalSpan = 5;
+        text2LData.grabExcessHorizontalSpace = true;
+        textAudioFormatSearch.setLayoutData(text2LData);
+
+
+
+        if (logger.isDebugEnabled()) {
+            logger.debug("initAudioFormatSearch() - end");
         }
+    }
 
+    /**
+     * 
+     */
+    private void initTableAudioFormat() {
+        if (logger.isDebugEnabled()) {
+            logger.debug("initTableAudioFormat() - start");
+        }
+
+        tableAudioFormat = new Table(groupAudioFormatOverview, SWT.SINGLE
+                | SWT.FULL_SELECTION | SWT.V_SCROLL | SWT.BORDER);
+        tableAudioFormat.setHeaderVisible(true);
+        tableAudioFormat.setLinesVisible(true);
+        GridData table2LData = new GridData();
+        tableAudioFormat.addFocusListener(new FocusAdapter() {
+            public void focusLost(FocusEvent evt) {
+                System.out.println("tableAudioFormat.focusLost, event=" + evt);
+                
+            }
+            public void focusGained(FocusEvent evt) {
+                System.out
+                    .println("tableAudioFormat.focusGained, event=" + evt);
+                
+            }
+        });
+        tableAudioFormat.addSelectionListener(new SelectionAdapter() {
+            public void widgetSelected(SelectionEvent evt) {
+                if (logger.isDebugEnabled()) {
+                    logger.debug("widgetSelected(SelectionEvent evt = "
+                        + evt
+                        + ") - start");
+                }
+
+                int index = tableAudioFormat.getSelectionIndex();
+
+                System.out.println("Table select. id: "
+                    + index
+                    + " TableItem:"
+                    + tableAudioFormat.getItem(index)
+                    + " id: "
+                    + tableAudioFormat.getItem(index).getText(0));
+
+                //es wurde ein Element aus Tabelle ausgewaehlt jetzt muss die
+                //Detailansicht aktualisiert werden
+                refreshAudioFormatDetail(tableAudioFormat.getItem(index)
+                    .getText(0));
+
+                if (logger.isDebugEnabled()) {
+                    logger.debug("widgetSelected(SelectionEvent) - end");
+                }
+            }
+        });
+        table2LData.verticalAlignment = GridData.FILL;
+        table2LData.horizontalAlignment = GridData.FILL;
+        table2LData.horizontalSpan = 8;
+        table2LData.grabExcessHorizontalSpace = true;
+        table2LData.grabExcessVerticalSpace = true;
+        tableAudioFormat.setLayoutData(table2LData);
+
+        //einzelne Spalten hinzuf?gen
+        tableColumn = new TableColumn(tableAudioFormat, SWT.CENTER);
+        tableColumn.setText(l.getString("AudioFormat.groupoverview.columnid"));
+        tableColumn.setWidth(50);
+
+        tableColumn = new TableColumn(tableAudioFormat, SWT.CENTER);
+        tableColumn.setText(l.getString("AudioFormat.groupoverview.columnname"));
+        tableColumn.setWidth(200);
+
+        tableColumn = new TableColumn(tableAudioFormat, SWT.CENTER);
+        tableColumn.setText(l.getString("AudioFormat.groupoverview.columnshortname"));
+        tableColumn.setWidth(75);
+
+        if (logger.isDebugEnabled()) {
+            logger.debug("initTableAudioFormat() - end");
+        }
     }
 
+    /**
+     * @param text
+     */
+    protected void refreshAudioFormatDetail(final String id) {
+        AudioFormat object;
+        try {
+            //since we only can get a String value from the table, we
+            //need to convert this
+            object = Database.getSingleAudioFormat(Integer.parseInt(id));
+
+            if (object == null) {
+
+                /*
+                 * 
+                 * @TODO Statusbar aktualiseren
+                 */
+                return;
+            }
+        } catch (Exception e) {
+            
+            //id ist keine Zahl
+            return;
+        }
+
+        textAudioFormatID.setText(object.getAudioFormatId() + "");
+        textAudioFormatName.setText(object.getName());
+        textAudioFormatShortname.setText(object.getShortname());
+
+        //Buttons zum l?schen und editieren aktivieren
+        buttonAudioFormatEdit.setEnabled(true);
+        buttonAudioFormatDelete.setEnabled(true);
+
+        //Mode auf view setzen
+        mode_AudioFormat = ManagementGui.MODE_VIEW;
+
+    }
+
     private void initGUI() {
         if (logger.isDebugEnabled()) {
             logger.debug("initGUI() - start");
@@ -1052,7 +1610,6 @@
                 return;
             }
         } catch (Exception e) {
-            // TODO: handle exception
             //id ist keine Zahl
             return;
         }

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java	2004-11-22 21:39:02 UTC (rev 148)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java	2004-11-22 21:53:19 UTC (rev 149)
@@ -408,7 +408,7 @@
 
         viewVideoFormatMenuItem = new MenuItem(viewMenu, SWT.CHECK);
         viewVideoFormatMenuItem.setText(l.getString("menu.view.format"));
-        viewVideoFormatMenuItem.setSelection(true);
+        viewVideoFormatMenuItem.setSelection(false);
         viewVideoFormatMenuItem.addSelectionListener(new SelectionAdapter() {
             public void widgetSelected(SelectionEvent evt) {
 				if(tabItemFormat == null || tabItemFormat.isDisposed()){
@@ -524,7 +524,7 @@
         
         viewMovieMenuItem = new MenuItem(viewMenu, SWT.CHECK);
         viewMovieMenuItem.setText(l.getString("menu.view.movie"));
-        viewMovieMenuItem.setSelection(false);
+        viewMovieMenuItem.setSelection(true);
         viewMovieMenuItem.addSelectionListener(new SelectionAdapter() {
             public void widgetSelected(SelectionEvent evt) {
 				if(tabItemMovie == null || tabItemMovie.isDisposed()){

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/formate.properties
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/formate.properties	2004-11-22 21:39:02 UTC (rev 148)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/formate.properties	2004-11-22 21:53:19 UTC (rev 149)
@@ -32,3 +32,30 @@
 videoformat.groupdetail.deletebutton.newok=Datensatz wurde erfolgreich gel?scht.
 videoformat.groupdetail.deletebutton.errorsave=Datenbankfehler beim L?schen.
 videoformat.groupdetail.deletebutton.errordb=Datenbankfehler beim Herstellen der Verbindung(del).
+
+AudioFormat.group.label=AudioFormat
+AudioFormat.groupoverview.label=?berblick
+AudioFormat.groupoverview.columnid=Id
+AudioFormat.groupoverview.columnname=Name
+AudioFormat.groupoverview.columnshortname=Abk.
+
+
+AudioFormat.groupoverview.searchlabel=Suche nach
+AudioFormat.groupdetail.label=Detail
+AudioFormat.groupdetail.idlabel=Audioformat ID
+AudioFormat.groupdetail.namelabel=Audioformat Name
+AudioFormat.groupdetail.shortcutlabel=Audioformat Abk?rzung
+
+AudioFormat.groupdetail.savebutton.warn.noname.title=Datensatz speichern
+AudioFormat.groupdetail.savebutton.warn.noname.msg=Der Datensatz kann nicht gespeichert werden. \n Bitte geben Sie einen Namen an
+AudioFormat.groupdetail.savebutton.newok=Speichern des neuen AudioFormates erfolgreich.
+AudioFormat.groupdetail.savebutton.editok=?ndern des AudioFormates erfolgreich.
+
+AudioFormat.groupdetail.savebutton.errorsave=Datenbankfehler beim Speichern.
+AudioFormat.groupdetail.savebutton.errordb=Datenbankfehler beim Herstellen der Verbindung.(save).
+
+AudioFormat.groupdetail.deletebutton.question.header=Wirklich l?schen?
+AudioFormat.groupdetail.deletebutton.question.text=Wollen Sie den Datensatz {0} wirklich l?schen?
+AudioFormat.groupdetail.deletebutton.newok=Datensatz wurde erfolgreich gel?scht.
+AudioFormat.groupdetail.deletebutton.errorsave=Datenbankfehler beim L?schen.
+AudioFormat.groupdetail.deletebutton.errordb=Datenbankfehler beim Herstellen der Verbindung(del).

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/objects/AudioFormat.hbm.xml
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/objects/AudioFormat.hbm.xml	2004-11-22 21:39:02 UTC (rev 148)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/objects/AudioFormat.hbm.xml	2004-11-22 21:53:19 UTC (rev 149)
@@ -17,7 +17,9 @@
       <id name="audioFormatId" type="int" column="AUIOFORMATID">
         <meta attribute="scope-set">public</meta>
         <meta attribute="use-in-equals">true</meta>
-        <generator class="native"/>
+        <generator class="sequence">
+			<param name="sequence" >audio_format_id_sequence</param>
+		</generator>
       </id>
  
       <property name="name" type="string" not-null="true">

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Movie.hbm.xml
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Movie.hbm.xml	2004-11-22 21:39:02 UTC (rev 148)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Movie.hbm.xml	2004-11-22 21:53:19 UTC (rev 149)
@@ -17,7 +17,9 @@
       <id name="movieId" type="int" column="MOVIEID">
         <meta attribute="scope-set">public</meta>
         <meta attribute="use-in-equals">true</meta>
-        <generator class="native"/>
+        <generator class="sequence">
+			<param name="sequence">movie_id_sequence</param>
+		</generator>
       </id>
  
       <property name="title" type="string" not-null="true">

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java	2004-11-22 21:39:02 UTC (rev 148)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java	2004-11-22 21:53:19 UTC (rev 149)
@@ -1304,6 +1304,43 @@
      */
     public Database(String arg0) {
 
-    }
+    }	
+	
+	public static AudioFormat getSingleAudioFormat(final int id){
+	    if (logger.isDebugEnabled()) {
+	        logger.debug("getSingleAudioFormat() - start. int filter= "+id);
+	    }
+	    //init the returnlist
+	    AudioFormat returnobject = null;
+	
+	    Session s = null;
+	    Transaction tx = null;
+	    try {
+	        //get new Session and begin Transaction
+	        s = HibernateUtil.currentSession();
+	
+	            returnobject = (AudioFormat)s.get(AudioFormat.class, new Integer(id));
+	
+	    } catch (Exception e) {
+	        logger.error(
+	                "getSingleAudioFormat() - Error while trying to do Transaction",
+	                e);
+	        
+	    } finally {
+	        try {
+	            // No matter what, close the session
+	            HibernateUtil.closeSession();
+	        } catch (HibernateException e1) {
+	            logger.error("getSingleAudioFormat() - Could not Close the Session", e1);
+	        }
+	    }
+	
+	    if (logger.isDebugEnabled()) {
+	        logger.debug("getSingleAudioFormat() - end");
+	    }
+	    return returnobject;
+	    
+	
+	}
 
 }

Modified: project_src/provirent_hibernate/src/test/provirent/hibernate/TestAudioFormat.java
===================================================================
--- project_src/provirent_hibernate/src/test/provirent/hibernate/TestAudioFormat.java	2004-11-22 21:39:02 UTC (rev 148)
+++ project_src/provirent_hibernate/src/test/provirent/hibernate/TestAudioFormat.java	2004-11-22 21:53:19 UTC (rev 149)
@@ -84,7 +84,7 @@
         }
     }
 
-    public void testAudioFormat() throws Exception {
+    /*public void testAudioFormat() throws Exception {
         if (logger.isDebugEnabled()) {
             logger.debug("testCreating() - start");
         }
@@ -192,7 +192,7 @@
         if (logger.isDebugEnabled()) {
             logger.debug("testCreating() - end");
         }
-    }
+    }*/
 
     public void testSaveAudioFormat() throws Exception {
         if (logger.isDebugEnabled()) {



From pschneider at sheep.berlios.de  Tue Nov 23 01:00:56 2004
From: pschneider at sheep.berlios.de (Philipp Schneider at BerliOS)
Date: Tue, 23 Nov 2004 01:00:56 +0100
Subject: [Provirent-svn-commit] r150 - project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui
Message-ID: <200411230000.iAN00uCq021437@sheep.berlios.de>

Author: pschneider
Date: 2004-11-23 01:00:48 +0100 (Tue, 23 Nov 2004)
New Revision: 150

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeActors.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeImage.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/DialogDescription.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java
Log:
- speicherleaks versucht zu beseitigen


Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeActors.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeActors.java	2004-11-22 21:53:19 UTC (rev 149)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeActors.java	2004-11-23 00:00:48 UTC (rev 150)
@@ -769,7 +769,7 @@
     /**
      * 
      */
-    protected void setActorsGroupButtonSaveCancel() {
+    private void setActorsGroupButtonSaveCancel() {
         buttonActorsSave.setEnabled(false);
         buttonActorsCancel.setEnabled(false);
         buttonActorsEdit.setEnabled(true);
@@ -786,13 +786,13 @@
         textActorsSearch.setEnabled(true);        
     }
 
-    protected void insertIntoActorsOverviewTable(Actor actor) {
+    private void insertIntoActorsOverviewTable(Actor actor) {
         TableItem item = new TableItem(tableActorsOverview, SWT.NONE);
         item.setText(new String[] { actor.getActorId() + "", actor.getFirstName(),
                 actor.getLastName() });        
     }
     
-    protected void refreshActorsOverviewTable(final String filter) {
+    private void refreshActorsOverviewTable(final String filter) {
         if (tableActorsOverview == null) {
             System.out
                     .println("Konnte ActorsOverviewtable nicht refreshen, da diese null ist!");

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeImage.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeImage.java	2004-11-22 21:53:19 UTC (rev 149)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeImage.java	2004-11-23 00:00:48 UTC (rev 150)
@@ -546,6 +546,7 @@
                     if (ideaImage != null && !ideaImage.isDisposed()) {
                         paintImage(e);
                         //e.gc.drawImage(scaledImage, 0, 0);
+                        e.gc.dispose();
                     }
                 }
             });
@@ -1107,6 +1108,8 @@
                 scaledImage.getImageData().height, ix
                         + scaledImage.getImageData().x, iy
                         + scaledImage.getImageData().y, w, h);
+        event.gc.dispose();
+        paintImage.dispose();
     }
 
     /**
@@ -1152,7 +1155,6 @@
             canvasImg.redraw();
         }
 
-        canvasImg.redraw();
 
         //Buttons zum l?schen und editieren aktivieren
 
@@ -1208,6 +1210,7 @@
                     o.getImageFileName(), o.getImageFileDescription() });
 
         }
+        Imagelist = null;
     }
     
     private Image createThumbnailImage(byte[] data){
@@ -1233,6 +1236,8 @@
         final Image scaledtemp = new Image(getDisplay(),
                 image.getImageData().scaledTo((int)(width*scalefactor),(int)(height*scalefactor)));
         
+        
+        image.dispose();
 
         System.out.println("Gr??e: "+scaledtemp.getBounds());
         

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/DialogDescription.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/DialogDescription.java	2004-11-22 21:53:19 UTC (rev 149)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/DialogDescription.java	2004-11-23 00:00:48 UTC (rev 150)
@@ -50,7 +50,6 @@
 	
 	private StyledText styledTextDescritpion;
 	
-	private SashForm sashForm1;
 
 	private ResourceBundle l;
 	
@@ -84,7 +83,7 @@
      */
     public void initLanguage(Locale locale) {
         l = PropertyResourceBundle.getBundle(
-                "de.hsharz.provirent.management.gui.language.dialogmovies", locale);
+                "de.hsharz.provirent.management.gui.language.movies", locale);
 
     }
 	
@@ -105,19 +104,19 @@
 
 			dialogShell.setLayout(new GridLayout());
             {
-                sashForm1 = new SashForm(dialogShell, SWT.NONE);
-                GridData sashForm1LData = new GridData();
-                sashForm1LData.widthHint = 300;
-                sashForm1LData.heightHint = 200;
-                sashForm1.setLayoutData(sashForm1LData);
-                {
-                    groupDialogDescription = new Group(sashForm1, SWT.NONE);
+
+                    groupDialogDescription = new Group(dialogShell, SWT.NONE);
                     GridLayout groupDialogDescriptionLayout = new GridLayout();
                     groupDialogDescriptionLayout.numColumns = 5;
                     groupDialogDescriptionLayout.makeColumnsEqualWidth = true;
                     groupDialogDescription.setBounds(0, 0, 316, 178);
                     groupDialogDescription.setLayout(groupDialogDescriptionLayout);
                     groupDialogDescription.setText("Beschreibung");
+                    GridData groupForm1LData = new GridData();
+                    groupForm1LData.widthHint = 300;
+                    groupForm1LData.heightHint = 200;
+                    groupDialogDescription.setLayoutData(groupForm1LData);                      
+                    
                     {
                         labelDescriptionAdvice = new Label(groupDialogDescription, SWT.NONE);
                         labelDescriptionAdvice.setText("Beschreibung ins Textfeld schreiben oder ?ndern");
@@ -161,7 +160,7 @@
                     }
 
                 }
-            }
+            
 			dialogShell.layout();
 			dialogShell.pack();
 			dialogShell.open();

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java	2004-11-22 21:53:19 UTC (rev 149)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java	2004-11-23 00:00:48 UTC (rev 150)
@@ -583,6 +583,11 @@
                 if(!viewImageMenuItem.isDisposed()){
                     viewImageMenuItem.setSelection(false);
                 }
+                if (compositeImage != null && !compositeImage.isDisposed()){
+                    compositeImage.dispose();
+                    compositeImage = null;
+                }
+                
             }
             
         });



From pschneider at sheep.berlios.de  Tue Nov 23 01:01:31 2004
From: pschneider at sheep.berlios.de (Philipp Schneider at BerliOS)
Date: Tue, 23 Nov 2004 01:01:31 +0100
Subject: [Provirent-svn-commit] r151 - project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui
Message-ID: <200411230001.iAN01Vrp021493@sheep.berlios.de>

Author: pschneider
Date: 2004-11-23 01:01:30 +0100 (Tue, 23 Nov 2004)
New Revision: 151

Added:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/DialogActors.java
Log:


Added: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/DialogActors.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/DialogActors.java	2004-11-23 00:00:48 UTC (rev 150)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/DialogActors.java	2004-11-23 00:01:30 UTC (rev 151)
@@ -0,0 +1,275 @@
+package de.hsharz.provirent.management.gui;
+
+/**
+* This code was generated using CloudGarden's Jigloo
+* SWT/Swing GUI Builder, which is free for non-commercial
+* use. If Jigloo is being used commercially (ie, by a corporation,
+* company or business for any purpose whatever) then you
+* should purchase a license for each developer using Jigloo.
+* Please visit www.cloudgarden.com for details.
+* Use of Jigloo implies acceptance of these licensing terms.
+* *************************************
+* A COMMERCIAL LICENSE HAS NOT BEEN PURCHASED
+* for this machine, so Jigloo or this code cannot be used legally
+* for any corporate or commercial purpose.
+* *************************************
+*/
+
+import org.eclipse.swt.layout.FillLayout;
+import org.eclipse.swt.layout.GridLayout;
+import org.eclipse.swt.widgets.Display;
+import org.eclipse.swt.widgets.Shell;
+import org.eclipse.swt.SWT;
+
+import org.eclipse.swt.widgets.Group;
+import org.eclipse.swt.layout.GridData;
+import org.eclipse.swt.custom.SashForm;
+import org.eclipse.swt.widgets.Label;
+import org.eclipse.swt.widgets.TableItem;
+import org.eclipse.swt.widgets.Text;
+import org.eclipse.swt.widgets.Button;
+import org.eclipse.swt.custom.StyledText;
+import org.eclipse.swt.events.SelectionAdapter;
+import org.eclipse.swt.events.SelectionEvent;
+
+import java.util.Locale;
+import java.util.PropertyResourceBundle;
+import java.util.ResourceBundle;
+
+
+
+import org.eclipse.swt.widgets.List;
+
+import de.hsharz.provirent.objects.Actor;
+import de.hsharz.provirent.persistence.Database;
+import org.eclipse.swt.events.MouseAdapter;
+import org.eclipse.swt.events.MouseEvent;
+public class DialogActors extends org.eclipse.swt.widgets.Dialog {
+    
+	private Shell dialogShell;
+    
+	private Group groupDialogDescription;
+	
+	private Button buttonDescriptionAbort;
+	private Button buttonDescriptionAccept;
+	
+	private Label labelDescriptionAdvice;
+
+	private List list1;
+	private Button button1;
+	private Button button2;
+	private Text text1;
+
+
+
+	private ResourceBundle l;
+	
+	/**
+	* Auto-generated main method to display this 
+	* org.eclipse.swt.widgets.Dialog inside a new Shell.
+	*/
+	public static void main(String[] args) {
+
+		try {
+
+
+			Display display = Display.getDefault();
+			
+			Shell shell = new Shell(display);
+			DialogActors inst = new DialogActors(shell, SWT.NULL, Locale.GERMAN);
+			inst.open();
+		} catch (Exception e) {
+			e.printStackTrace();
+		}
+	}
+	
+	/*
+     * ?ndert die Sprache aller Elemente
+     * 
+     * @see de.hsharz.provirent.managment.gui.AbstractComposite#changeLanguage(java.util.Locale)
+     */
+    public void changeLanguage(Locale locale) {
+
+    }
+
+    /* 
+     * Init die Sprache (properties Datei)
+     * @see de.hsharz.provirent.managment.gui.AbstractComposite#initLanguage(java.util.Locale)
+     */
+    public void initLanguage(Locale locale) {
+        l = PropertyResourceBundle.getBundle(
+                "de.hsharz.provirent.management.gui.language.movies", locale);
+
+    }
+	
+	
+    
+	public DialogActors(Shell parent, int style, Locale locale) {
+		super(parent, style);
+		
+		initLanguage(locale);
+	}
+
+
+	
+	public void open() {
+		try {
+			Shell parent = getParent();
+			dialogShell = new Shell(parent, SWT.DIALOG_TRIM | SWT.APPLICATION_MODAL);
+			dialogShell.setSize(200,210);
+			dialogShell.setLayout(new GridLayout());
+            {
+
+                    groupDialogDescription = new Group(dialogShell, SWT.NONE);
+                    GridLayout groupDialogDescriptionLayout = new GridLayout();
+                    groupDialogDescriptionLayout.numColumns = 5;
+                    groupDialogDescriptionLayout.makeColumnsEqualWidth = true;
+                    groupDialogDescription.setBounds(0, 0, 316, 178);
+                    groupDialogDescription.setLayout(groupDialogDescriptionLayout);
+                    groupDialogDescription.setText("Schauspieler");
+                    
+                    GridData groupForm1LData = new GridData();
+                    groupForm1LData.widthHint = 300;
+                    groupForm1LData.heightHint = 200;
+                    groupDialogDescription.setLayoutData(groupForm1LData);                    
+
+                    
+                    {
+                        text1 = new Text(groupDialogDescription, SWT.BORDER);
+                        text1.setText("");
+                        text1.setToolTipText("Geben Sie hier einen Suchbegriff ein");
+                        GridData text1LData = new GridData();
+                        text1LData.horizontalSpan = 4;
+                        text1LData.horizontalAlignment = GridData.FILL;
+                        text1LData.grabExcessHorizontalSpace = true;
+                        text1.setLayoutData(text1LData);
+                       
+                        
+                    }
+                    {
+                        button1 = new Button(groupDialogDescription, SWT.PUSH
+                            | SWT.CENTER);
+                        button1.setText("Suchen");
+                        button1.addSelectionListener(new SelectionAdapter() {
+                            public void widgetSelected(SelectionEvent evt) {
+                                refreshActorsList(text1.getText());
+                                
+                               
+                            }
+                        });                         
+                    }
+                    {
+                        labelDescriptionAdvice = new Label(groupDialogDescription, SWT.NONE);
+                        labelDescriptionAdvice.setText("Beschreibung ins Textfeld schreiben oder ?ndern");
+        
+                    }
+                    {
+                        list1 = new List(groupDialogDescription, SWT.MULTI | SWT.V_SCROLL | SWT.BORDER);
+                        list1.setSize(57, 30);
+                        GridData list1LData = new GridData();
+                        list1LData.horizontalSpan = 5;
+                        list1LData.horizontalAlignment = GridData.FILL;
+                        list1LData.grabExcessHorizontalSpace = true;
+                        list1LData.verticalAlignment = GridData.FILL;
+                        list1LData.grabExcessVerticalSpace = true;
+                        list1.setLayoutData(list1LData);
+                        
+                        list1.add("Hallo0",0);
+                        list1.add("Hallo1",1);
+                        list1.add("Hallo2",2);
+                        list1.add("Hallo3",3);
+                        list1.add("Hallo2",4);
+                        list1.add("Hallo5",5);
+                        
+            			{
+                            list1.addMouseListener(new MouseAdapter() {
+                                public void mouseDoubleClick(MouseEvent evt) {
+                                    System.out.println("list1.mouseDoubleClick, event="
+                                        + evt);
+                                    
+                                    
+                                    //TODO add your code for list1.mouseDoubleClick
+                                }
+                            });
+            			}                         
+                    }
+                    {
+                        buttonDescriptionAccept = new Button(groupDialogDescription, SWT.PUSH | SWT.CENTER);
+                        buttonDescriptionAccept.setText("Hinzuf?gen");
+                        GridData buttonDescriptionAcceptLData2 = new GridData();
+                        buttonDescriptionAcceptLData2.horizontalSpan = 2;
+                        buttonDescriptionAcceptLData2.horizontalAlignment = GridData.FILL;
+                        buttonDescriptionAccept.setLayoutData(buttonDescriptionAcceptLData2);
+                        
+            			{
+                            buttonDescriptionAccept
+                                .addSelectionListener(new SelectionAdapter() {
+                                public void widgetSelected(SelectionEvent evt) {
+                                    System.out
+                                        .println("buttonDescriptionAccept.widgetSelected, event="
+                                            + evt);
+                                    
+                                    String[] sel = list1.getSelection();
+                                    for (int i = 0; i < sel.length; i++) {
+                                        System.out.println("Auswahl:"+i+" "+sel[i]);
+                                        list1.remove(sel[i]);
+                                    }
+                                    
+                                    //TODO add your code for buttonDescriptionAccept.widgetSelected
+                                }
+                                });
+            			}                        
+                        
+                    }
+                    {
+                        button2 = new Button(groupDialogDescription, SWT.FLAT | SWT.CENTER);
+                        button2.setEnabled(false);
+                        button2.setVisible(false);
+                    }
+                    {
+                        buttonDescriptionAbort = new Button(groupDialogDescription, SWT.PUSH | SWT.CENTER);
+                        buttonDescriptionAbort.setText("Fertig");
+                        GridData buttonDescriptionAbortLData = new GridData();
+                        buttonDescriptionAbortLData.horizontalAlignment = GridData.FILL;
+                        buttonDescriptionAbortLData.horizontalSpan = 2;
+                        buttonDescriptionAbort.setLayoutData(buttonDescriptionAbortLData);
+                        buttonDescriptionAbort.addSelectionListener(new SelectionAdapter() {
+                            public void widgetSelected(SelectionEvent evt) {
+                               // TODO
+                               dialogShell.close();
+                            }
+                        });  
+                    }
+
+            }
+			dialogShell.layout();
+			dialogShell.pack();
+			dialogShell.open();
+			Display display = dialogShell.getDisplay();
+			while (!dialogShell.isDisposed()) {
+				if (!display.readAndDispatch())
+					display.sleep();
+			}
+		} catch (Exception e) {
+			e.printStackTrace();
+		}
+	}
+	
+	  private void refreshActorsList(final String filter) {
+	        if (list1 == null || list1.isDisposed()) {
+	            System.out
+	                    .println("Konnte DialogActors List nicht refreshen, da diese null ist!");
+	            return;
+	        }
+	        System.out.println("Versuche nun DialogActors List zu refreshen. Filter: "
+	                + filter);
+	        list1.removeAll();
+	        
+	        java.util.List actorList = Database.getActor(filter);
+
+	        for (int i = 0; i < actorList.size(); i++) {
+	            Actor o = (Actor)actorList.get(i);
+	            list1.add(o.getLastName()+", "+ o.getFirstName()+" ("+o.getActorId() + ")");
+	        }
+	    }
+}



From pschneider at sheep.berlios.de  Tue Nov 23 11:13:40 2004
From: pschneider at sheep.berlios.de (Philipp Schneider at BerliOS)
Date: Tue, 23 Nov 2004 11:13:40 +0100
Subject: [Provirent-svn-commit] r152 - project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui
Message-ID: <200411231013.iANADe9b002326@sheep.berlios.de>

Author: pschneider
Date: 2004-11-23 11:13:39 +0100 (Tue, 23 Nov 2004)
New Revision: 152

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/DialogActors.java
Log:
- list durch tabelle ersetzt
- mehrere hinzuf?\195?\188gen ergibt exception
- doppelclick fkt. auch noch nicht

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/DialogActors.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/DialogActors.java	2004-11-23 00:01:30 UTC (rev 151)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/DialogActors.java	2004-11-23 10:13:39 UTC (rev 152)
@@ -25,6 +25,7 @@
 import org.eclipse.swt.layout.GridData;
 import org.eclipse.swt.custom.SashForm;
 import org.eclipse.swt.widgets.Label;
+import org.eclipse.swt.widgets.TableColumn;
 import org.eclipse.swt.widgets.TableItem;
 import org.eclipse.swt.widgets.Text;
 import org.eclipse.swt.widgets.Button;
@@ -44,6 +45,7 @@
 import de.hsharz.provirent.persistence.Database;
 import org.eclipse.swt.events.MouseAdapter;
 import org.eclipse.swt.events.MouseEvent;
+import org.eclipse.swt.widgets.Table;
 public class DialogActors extends org.eclipse.swt.widgets.Dialog {
     
 	private Shell dialogShell;
@@ -55,8 +57,8 @@
 	
 	private Label labelDescriptionAdvice;
 
-	private List list1;
 	private Button button1;
+	private Table table1 ;
 	private Button button2;
 	private Text text1;
 
@@ -164,34 +166,42 @@
         
                     }
                     {
-                        list1 = new List(groupDialogDescription, SWT.MULTI | SWT.V_SCROLL | SWT.BORDER);
-                        list1.setSize(57, 30);
-                        GridData list1LData = new GridData();
-                        list1LData.horizontalSpan = 5;
-                        list1LData.horizontalAlignment = GridData.FILL;
-                        list1LData.grabExcessHorizontalSpace = true;
-                        list1LData.verticalAlignment = GridData.FILL;
-                        list1LData.grabExcessVerticalSpace = true;
-                        list1.setLayoutData(list1LData);
+                        table1 =  new Table(groupDialogDescription, SWT.MULTI | SWT.FULL_SELECTION);
+                        GridData table1LData = new GridData();
+                        table1LData.horizontalAlignment = GridData.FILL;
+                        table1LData.horizontalSpan = 5;
+                        table1LData.grabExcessHorizontalSpace = true;
+                        table1LData.verticalAlignment = GridData.FILL;
+                        table1LData.grabExcessVerticalSpace = true;
+                        table1.setLayoutData(table1LData);
+                        {
+                            TableColumn item = new TableColumn(
+                                    table1,
+                                SWT.CENTER);
+                            item.setText("id");
+                            item.setWidth(0);
+                            item.setResizable(false);
+                        }                        
+                        {
+                            TableColumn item = new TableColumn(
+                                    table1,
+                                SWT.CENTER);
+                            item.setText("nachname");
+                            item.setAlignment(SWT.LEFT);
+                            item.setWidth(100);
+                            
+                        }                        
+                        {
+                            TableColumn item = new TableColumn(
+                                    table1,
+                                SWT.CENTER);
+                            item.setText("Vorname");
+                            item.setAlignment(SWT.LEFT);
+                            item.setWidth(100);
+                            
+                        }                        
                         
-                        list1.add("Hallo0",0);
-                        list1.add("Hallo1",1);
-                        list1.add("Hallo2",2);
-                        list1.add("Hallo3",3);
-                        list1.add("Hallo2",4);
-                        list1.add("Hallo5",5);
                         
-            			{
-                            list1.addMouseListener(new MouseAdapter() {
-                                public void mouseDoubleClick(MouseEvent evt) {
-                                    System.out.println("list1.mouseDoubleClick, event="
-                                        + evt);
-                                    
-                                    
-                                    //TODO add your code for list1.mouseDoubleClick
-                                }
-                            });
-            			}                         
                     }
                     {
                         buttonDescriptionAccept = new Button(groupDialogDescription, SWT.PUSH | SWT.CENTER);
@@ -209,10 +219,11 @@
                                         .println("buttonDescriptionAccept.widgetSelected, event="
                                             + evt);
                                     
-                                    String[] sel = list1.getSelection();
+                                    int[] sel = table1.getSelectionIndices();
                                     for (int i = 0; i < sel.length; i++) {
-                                        System.out.println("Auswahl:"+i+" "+sel[i]);
-                                        list1.remove(sel[i]);
+                                        System.out.println("Auswahl:"+i+" "+table1.getItem(sel[i]));
+
+                                        table1.remove(sel[i]);
                                     }
                                     
                                     //TODO add your code for buttonDescriptionAccept.widgetSelected
@@ -256,20 +267,21 @@
 	}
 	
 	  private void refreshActorsList(final String filter) {
-	        if (list1 == null || list1.isDisposed()) {
+	        if (table1 == null || table1.isDisposed()) {
 	            System.out
 	                    .println("Konnte DialogActors List nicht refreshen, da diese null ist!");
 	            return;
 	        }
 	        System.out.println("Versuche nun DialogActors List zu refreshen. Filter: "
 	                + filter);
-	        list1.removeAll();
+	        table1.removeAll();
 	        
 	        java.util.List actorList = Database.getActor(filter);
 
 	        for (int i = 0; i < actorList.size(); i++) {
 	            Actor o = (Actor)actorList.get(i);
-	            list1.add(o.getLastName()+", "+ o.getFirstName()+" ("+o.getActorId() + ")");
+	            TableItem item = new TableItem(table1, SWT.NONE);
+	            item.setText(new String[] {o.getActorId()+"",o.getLastName(), o.getFirstName() });
 	        }
-	    }
+	  }
 }



From pschneider at sheep.berlios.de  Tue Nov 23 19:24:09 2004
From: pschneider at sheep.berlios.de (Philipp Schneider at BerliOS)
Date: Tue, 23 Nov 2004 19:24:09 +0100
Subject: [Provirent-svn-commit] r153 - in project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui: . language
Message-ID: <200411231824.iANIO9b1021365@sheep.berlios.de>

Author: pschneider
Date: 2004-11-23 19:24:08 +0100 (Tue, 23 Nov 2004)
New Revision: 153

Removed:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/DialogActors.java
Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeImage.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/images.properties
Log:


Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeImage.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeImage.java	2004-11-23 10:13:39 UTC (rev 152)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeImage.java	2004-11-23 18:24:08 UTC (rev 153)
@@ -123,6 +123,8 @@
 
     private TableColumn tableImagesOverview_ColumnID;
 
+    private TableColumn tableImagesOverview_ColumnThumb;
+    
     private TableColumn tableImagesOverview_ColumnName;
 
     private TableColumn tableImagesOverview_ColumnDescription;
@@ -305,8 +307,17 @@
                         tableImagesOverview, SWT.CENTER);
                 tableImagesOverview_ColumnID.setText(l
                         .getString("images.groupoverview.columnid"));
-                tableImagesOverview_ColumnID.setWidth(40);
+                tableImagesOverview_ColumnID.setWidth(0);
+                tableImagesOverview_ColumnID.setResizable(false);
 
+                tableImagesOverview_ColumnThumb = new TableColumn(
+                        tableImagesOverview, SWT.CENTER);
+                tableImagesOverview_ColumnThumb.setText(l
+                        .getString("images.groupoverview.thumbnail"));
+                tableImagesOverview_ColumnThumb.setWidth(75);
+                
+                
+                
                 tableImagesOverview_ColumnName = new TableColumn(
                         tableImagesOverview, SWT.CENTER);
                 tableImagesOverview_ColumnName.setText(l
@@ -317,7 +328,7 @@
                         tableImagesOverview, SWT.CENTER);
                 tableImagesOverview_ColumnDescription.setText(l
                         .getString("images.groupoverview.description"));
-                tableImagesOverview_ColumnDescription.setWidth(80);
+                tableImagesOverview_ColumnDescription.setWidth(150);
 
             }
         }
@@ -448,7 +459,8 @@
         {
             textImagesDescription = new Text(groupImagesDetail, SWT.MULTI
                     | SWT.V_SCROLL | SWT.BORDER);
-            textImagesDescription.setEnabled(false);
+            textImagesDescription.setEditable(false);
+            
             GridData text1LData3 = new GridData();
             text1LData3.horizontalAlignment = GridData.FILL;
             text1LData3.heightHint = 36;
@@ -488,9 +500,10 @@
 
             GridData buttonSelectFileLData = new GridData();
             buttonSelectFile.addSelectionListener(new SelectionAdapter() {
-                //if button is pressed
                 public void widgetSelected(SelectionEvent evt) {
 
+                    //file is selected
+                    
                     String[] filterExtensions = { "*.gif", "*.jpg", "*.*" };
                     FileDialog fileDialog = new FileDialog(getShell(), SWT.OPEN);
                     fileDialog.setText(currentDir);
@@ -505,12 +518,14 @@
 
                         scaledImage = ideaImage = new Image(getDisplay(),
                                 selectedFile);
-
+                        
                         canvasImg.redraw();
                         textFileUrl.setText(fileDialog.getFilterPath()
                                 + System.getProperty("file.separator")
                                 + fileDialog.getFileName());
 
+                        //set the Image Name
+                        textImagesName.setText(fileDialog.getFileName().substring(0,fileDialog.getFileName().lastIndexOf(".")));
                         //save the selected dir 
                         currentDir = fileDialog.getFilterPath();
 
@@ -645,12 +660,15 @@
 
                         mode_image = ManagementGui.MODE_ADD;
 
+                        tableImagesOverview.deselectAll();
+                        
                         textImagesID.setText("");
                         textImagesName.setText("");
                         textImagesDescription.setText("");
                         
                         textImagesName.setEditable(true);
                         textImagesDescription.setEditable(true);
+                        
                         buttonSelectFile.setEnabled(true);
                         
                         ideaImage=scaledImage = null;
@@ -813,9 +831,10 @@
                 buttonImageSave.setEnabled(false);
                 buttonImageSave.addSelectionListener(new SelectionAdapter() {
                     public void widgetSelected(SelectionEvent evt) {
-                        logger.warn("buttonImageSave.widgetSelected, event="
+                        logger.debug("buttonImageSave.widgetSelected, event="
                                 + evt);
 
+                        
                         if (scaledImage == null) {
                             statusLine
                                     .setStatus(
@@ -825,6 +844,8 @@
                             return;
                         }
 
+                        
+
                         //testen ob Name leer ist
                         if (textImagesName.getText().trim()
                                 .equalsIgnoreCase("")
@@ -860,8 +881,13 @@
                             imageLoader.data = new ImageData[] { scaledImage
                                     .getImageData() };
                             ByteArrayOutputStream bos = new ByteArrayOutputStream();
-                            imageLoader.save(bos, SWT.IMAGE_GIF);
+                            ImageData imgdata = scaledImage.getImageData();
+                            
+                            System.out.println(imgdata.type);
+                            System.out.println(SWT.IMAGE_JPEG);
 
+                            imageLoader.save(bos, scaledImage.getImageData().type);
+
                             tmp.setImageFile(bos.toByteArray());
 
                             try {
@@ -1109,7 +1135,7 @@
                         + scaledImage.getImageData().x, iy
                         + scaledImage.getImageData().y, w, h);
         event.gc.dispose();
-        paintImage.dispose();
+        //paintImage.dispose();
     }
 
     /**
@@ -1200,13 +1226,10 @@
             
             
             if (o.getImageFile() != null && o.getImageFile().length > 0) {
-                System.out.println("id"+o.getImageId()+" byte:"+o.getImageFile().toString());
-                
-            
-                item.setImage(0, createThumbnailImage(o.getImageFile()));
+                item.setImage(1, createThumbnailImage(o.getImageFile()));
             }            
             
-            item.setText(new String[] { o.getImageId() + "",
+            item.setText(new String[] { o.getImageId() + "","",
                     o.getImageFileName(), o.getImageFileDescription() });
 
         }
@@ -1236,10 +1259,11 @@
         final Image scaledtemp = new Image(getDisplay(),
                 image.getImageData().scaledTo((int)(width*scalefactor),(int)(height*scalefactor)));
         
+        System.out.println("Type:"+image.getImageData().type);
         
         image.dispose();
 
-        System.out.println("Gr??e: "+scaledtemp.getBounds());
+        //System.out.println("Gr??e: "+scaledtemp.getBounds());
         
         
         return scaledtemp;

Deleted: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/DialogActors.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/DialogActors.java	2004-11-23 10:13:39 UTC (rev 152)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/DialogActors.java	2004-11-23 18:24:08 UTC (rev 153)
@@ -1,287 +0,0 @@
-package de.hsharz.provirent.management.gui;
-
-/**
-* This code was generated using CloudGarden's Jigloo
-* SWT/Swing GUI Builder, which is free for non-commercial
-* use. If Jigloo is being used commercially (ie, by a corporation,
-* company or business for any purpose whatever) then you
-* should purchase a license for each developer using Jigloo.
-* Please visit www.cloudgarden.com for details.
-* Use of Jigloo implies acceptance of these licensing terms.
-* *************************************
-* A COMMERCIAL LICENSE HAS NOT BEEN PURCHASED
-* for this machine, so Jigloo or this code cannot be used legally
-* for any corporate or commercial purpose.
-* *************************************
-*/
-
-import org.eclipse.swt.layout.FillLayout;
-import org.eclipse.swt.layout.GridLayout;
-import org.eclipse.swt.widgets.Display;
-import org.eclipse.swt.widgets.Shell;
-import org.eclipse.swt.SWT;
-
-import org.eclipse.swt.widgets.Group;
-import org.eclipse.swt.layout.GridData;
-import org.eclipse.swt.custom.SashForm;
-import org.eclipse.swt.widgets.Label;
-import org.eclipse.swt.widgets.TableColumn;
-import org.eclipse.swt.widgets.TableItem;
-import org.eclipse.swt.widgets.Text;
-import org.eclipse.swt.widgets.Button;
-import org.eclipse.swt.custom.StyledText;
-import org.eclipse.swt.events.SelectionAdapter;
-import org.eclipse.swt.events.SelectionEvent;
-
-import java.util.Locale;
-import java.util.PropertyResourceBundle;
-import java.util.ResourceBundle;
-
-
-
-import org.eclipse.swt.widgets.List;
-
-import de.hsharz.provirent.objects.Actor;
-import de.hsharz.provirent.persistence.Database;
-import org.eclipse.swt.events.MouseAdapter;
-import org.eclipse.swt.events.MouseEvent;
-import org.eclipse.swt.widgets.Table;
-public class DialogActors extends org.eclipse.swt.widgets.Dialog {
-    
-	private Shell dialogShell;
-    
-	private Group groupDialogDescription;
-	
-	private Button buttonDescriptionAbort;
-	private Button buttonDescriptionAccept;
-	
-	private Label labelDescriptionAdvice;
-
-	private Button button1;
-	private Table table1 ;
-	private Button button2;
-	private Text text1;
-
-
-
-	private ResourceBundle l;
-	
-	/**
-	* Auto-generated main method to display this 
-	* org.eclipse.swt.widgets.Dialog inside a new Shell.
-	*/
-	public static void main(String[] args) {
-
-		try {
-
-
-			Display display = Display.getDefault();
-			
-			Shell shell = new Shell(display);
-			DialogActors inst = new DialogActors(shell, SWT.NULL, Locale.GERMAN);
-			inst.open();
-		} catch (Exception e) {
-			e.printStackTrace();
-		}
-	}
-	
-	/*
-     * ?ndert die Sprache aller Elemente
-     * 
-     * @see de.hsharz.provirent.managment.gui.AbstractComposite#changeLanguage(java.util.Locale)
-     */
-    public void changeLanguage(Locale locale) {
-
-    }
-
-    /* 
-     * Init die Sprache (properties Datei)
-     * @see de.hsharz.provirent.managment.gui.AbstractComposite#initLanguage(java.util.Locale)
-     */
-    public void initLanguage(Locale locale) {
-        l = PropertyResourceBundle.getBundle(
-                "de.hsharz.provirent.management.gui.language.movies", locale);
-
-    }
-	
-	
-    
-	public DialogActors(Shell parent, int style, Locale locale) {
-		super(parent, style);
-		
-		initLanguage(locale);
-	}
-
-
-	
-	public void open() {
-		try {
-			Shell parent = getParent();
-			dialogShell = new Shell(parent, SWT.DIALOG_TRIM | SWT.APPLICATION_MODAL);
-			dialogShell.setSize(200,210);
-			dialogShell.setLayout(new GridLayout());
-            {
-
-                    groupDialogDescription = new Group(dialogShell, SWT.NONE);
-                    GridLayout groupDialogDescriptionLayout = new GridLayout();
-                    groupDialogDescriptionLayout.numColumns = 5;
-                    groupDialogDescriptionLayout.makeColumnsEqualWidth = true;
-                    groupDialogDescription.setBounds(0, 0, 316, 178);
-                    groupDialogDescription.setLayout(groupDialogDescriptionLayout);
-                    groupDialogDescription.setText("Schauspieler");
-                    
-                    GridData groupForm1LData = new GridData();
-                    groupForm1LData.widthHint = 300;
-                    groupForm1LData.heightHint = 200;
-                    groupDialogDescription.setLayoutData(groupForm1LData);                    
-
-                    
-                    {
-                        text1 = new Text(groupDialogDescription, SWT.BORDER);
-                        text1.setText("");
-                        text1.setToolTipText("Geben Sie hier einen Suchbegriff ein");
-                        GridData text1LData = new GridData();
-                        text1LData.horizontalSpan = 4;
-                        text1LData.horizontalAlignment = GridData.FILL;
-                        text1LData.grabExcessHorizontalSpace = true;
-                        text1.setLayoutData(text1LData);
-                       
-                        
-                    }
-                    {
-                        button1 = new Button(groupDialogDescription, SWT.PUSH
-                            | SWT.CENTER);
-                        button1.setText("Suchen");
-                        button1.addSelectionListener(new SelectionAdapter() {
-                            public void widgetSelected(SelectionEvent evt) {
-                                refreshActorsList(text1.getText());
-                                
-                               
-                            }
-                        });                         
-                    }
-                    {
-                        labelDescriptionAdvice = new Label(groupDialogDescription, SWT.NONE);
-                        labelDescriptionAdvice.setText("Beschreibung ins Textfeld schreiben oder ?ndern");
-        
-                    }
-                    {
-                        table1 =  new Table(groupDialogDescription, SWT.MULTI | SWT.FULL_SELECTION);
-                        GridData table1LData = new GridData();
-                        table1LData.horizontalAlignment = GridData.FILL;
-                        table1LData.horizontalSpan = 5;
-                        table1LData.grabExcessHorizontalSpace = true;
-                        table1LData.verticalAlignment = GridData.FILL;
-                        table1LData.grabExcessVerticalSpace = true;
-                        table1.setLayoutData(table1LData);
-                        {
-                            TableColumn item = new TableColumn(
-                                    table1,
-                                SWT.CENTER);
-                            item.setText("id");
-                            item.setWidth(0);
-                            item.setResizable(false);
-                        }                        
-                        {
-                            TableColumn item = new TableColumn(
-                                    table1,
-                                SWT.CENTER);
-                            item.setText("nachname");
-                            item.setAlignment(SWT.LEFT);
-                            item.setWidth(100);
-                            
-                        }                        
-                        {
-                            TableColumn item = new TableColumn(
-                                    table1,
-                                SWT.CENTER);
-                            item.setText("Vorname");
-                            item.setAlignment(SWT.LEFT);
-                            item.setWidth(100);
-                            
-                        }                        
-                        
-                        
-                    }
-                    {
-                        buttonDescriptionAccept = new Button(groupDialogDescription, SWT.PUSH | SWT.CENTER);
-                        buttonDescriptionAccept.setText("Hinzuf?gen");
-                        GridData buttonDescriptionAcceptLData2 = new GridData();
-                        buttonDescriptionAcceptLData2.horizontalSpan = 2;
-                        buttonDescriptionAcceptLData2.horizontalAlignment = GridData.FILL;
-                        buttonDescriptionAccept.setLayoutData(buttonDescriptionAcceptLData2);
-                        
-            			{
-                            buttonDescriptionAccept
-                                .addSelectionListener(new SelectionAdapter() {
-                                public void widgetSelected(SelectionEvent evt) {
-                                    System.out
-                                        .println("buttonDescriptionAccept.widgetSelected, event="
-                                            + evt);
-                                    
-                                    int[] sel = table1.getSelectionIndices();
-                                    for (int i = 0; i < sel.length; i++) {
-                                        System.out.println("Auswahl:"+i+" "+table1.getItem(sel[i]));
-
-                                        table1.remove(sel[i]);
-                                    }
-                                    
-                                    //TODO add your code for buttonDescriptionAccept.widgetSelected
-                                }
-                                });
-            			}                        
-                        
-                    }
-                    {
-                        button2 = new Button(groupDialogDescription, SWT.FLAT | SWT.CENTER);
-                        button2.setEnabled(false);
-                        button2.setVisible(false);
-                    }
-                    {
-                        buttonDescriptionAbort = new Button(groupDialogDescription, SWT.PUSH | SWT.CENTER);
-                        buttonDescriptionAbort.setText("Fertig");
-                        GridData buttonDescriptionAbortLData = new GridData();
-                        buttonDescriptionAbortLData.horizontalAlignment = GridData.FILL;
-                        buttonDescriptionAbortLData.horizontalSpan = 2;
-                        buttonDescriptionAbort.setLayoutData(buttonDescriptionAbortLData);
-                        buttonDescriptionAbort.addSelectionListener(new SelectionAdapter() {
-                            public void widgetSelected(SelectionEvent evt) {
-                               // TODO
-                               dialogShell.close();
-                            }
-                        });  
-                    }
-
-            }
-			dialogShell.layout();
-			dialogShell.pack();
-			dialogShell.open();
-			Display display = dialogShell.getDisplay();
-			while (!dialogShell.isDisposed()) {
-				if (!display.readAndDispatch())
-					display.sleep();
-			}
-		} catch (Exception e) {
-			e.printStackTrace();
-		}
-	}
-	
-	  private void refreshActorsList(final String filter) {
-	        if (table1 == null || table1.isDisposed()) {
-	            System.out
-	                    .println("Konnte DialogActors List nicht refreshen, da diese null ist!");
-	            return;
-	        }
-	        System.out.println("Versuche nun DialogActors List zu refreshen. Filter: "
-	                + filter);
-	        table1.removeAll();
-	        
-	        java.util.List actorList = Database.getActor(filter);
-
-	        for (int i = 0; i < actorList.size(); i++) {
-	            Actor o = (Actor)actorList.get(i);
-	            TableItem item = new TableItem(table1, SWT.NONE);
-	            item.setText(new String[] {o.getActorId()+"",o.getLastName(), o.getFirstName() });
-	        }
-	  }
-}

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java	2004-11-23 10:13:39 UTC (rev 152)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java	2004-11-23 18:24:08 UTC (rev 153)
@@ -347,7 +347,8 @@
             cTabFolderMain.setLayoutData(cTabFolder1LData);
             
             //initFormatTab();
-            initMovieTab();
+            //initMovieTab();
+            initImageTab();
 
         } catch (Exception e) {
             e.printStackTrace();

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/images.properties
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/images.properties	2004-11-23 10:13:39 UTC (rev 152)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/images.properties	2004-11-23 18:24:08 UTC (rev 153)
@@ -3,6 +3,7 @@
 images.groupoverview.label =?berblick
 images.groupoverview.searchlabel =Suche nach
 images.groupoverview.columnid =ID
+images.groupoverview.thumbnail=Vorschau
 images.groupoverview.name=Bildname
 images.groupoverview.description=Beschreibung
 
@@ -29,7 +30,7 @@
 
 images.groupdetail.savebutton.warn.noname.title=Datensatz speichern
 images.groupdetail.savebutton.warnnoimage=Der Datensatz kann nicht gespeichert werden. \n Bitte w?hlen Sie ein Bild aus!
-images.groupdetail.savebutton.warn.noname.msg=Der Datensatz kann nicht gespeichert werden. \n Bitte geben Sie eine volst?ndigen Namen an
+images.groupdetail.savebutton.warn.noname.msg=Der Datensatz kann nicht gespeichert werden. \n Bitte geben Sie eine volst?ndigen Bildnamen und Beschreibung an
 images.groupdetail.savebutton.newok=Speichern des neuen VideoFormates erfolgreich.
 images.groupdetail.savebutton.editok=?ndern des VideoFormates erfolgreich.
 images.groupdetail.savebutton.errorsave=Datenbankfehler beim Speichern.



From pschneider at sheep.berlios.de  Tue Nov 23 19:26:49 2004
From: pschneider at sheep.berlios.de (Philipp Schneider at BerliOS)
Date: Tue, 23 Nov 2004 19:26:49 +0100
Subject: [Provirent-svn-commit] r154 - project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui
Message-ID: <200411231826.iANIQnRY021558@sheep.berlios.de>

Author: pschneider
Date: 2004-11-23 19:26:49 +0100 (Tue, 23 Nov 2004)
New Revision: 154

Added:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/DialogMovie.java
Removed:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/DialogDescription.java
Log:


Deleted: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/DialogDescription.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/DialogDescription.java	2004-11-23 18:24:08 UTC (rev 153)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/DialogDescription.java	2004-11-23 18:26:49 UTC (rev 154)
@@ -1,177 +0,0 @@
-package de.hsharz.provirent.management.gui;
-
-/**
-* This code was generated using CloudGarden's Jigloo
-* SWT/Swing GUI Builder, which is free for non-commercial
-* use. If Jigloo is being used commercially (ie, by a corporation,
-* company or business for any purpose whatever) then you
-* should purchase a license for each developer using Jigloo.
-* Please visit www.cloudgarden.com for details.
-* Use of Jigloo implies acceptance of these licensing terms.
-* *************************************
-* A COMMERCIAL LICENSE HAS NOT BEEN PURCHASED
-* for this machine, so Jigloo or this code cannot be used legally
-* for any corporate or commercial purpose.
-* *************************************
-*/
-
-import org.eclipse.swt.layout.FillLayout;
-import org.eclipse.swt.layout.GridLayout;
-import org.eclipse.swt.widgets.Display;
-import org.eclipse.swt.widgets.Shell;
-import org.eclipse.swt.SWT;
-
-import org.eclipse.swt.widgets.Group;
-import org.eclipse.swt.layout.GridData;
-import org.eclipse.swt.custom.SashForm;
-import org.eclipse.swt.widgets.Label;
-import org.eclipse.swt.widgets.Text;
-import org.eclipse.swt.widgets.Button;
-import org.eclipse.swt.custom.StyledText;
-import org.eclipse.swt.events.SelectionAdapter;
-import org.eclipse.swt.events.SelectionEvent;
-
-import java.util.Locale;
-import java.util.PropertyResourceBundle;
-import java.util.ResourceBundle;
-
-
-
-public class DialogDescription extends org.eclipse.swt.widgets.Dialog {
-    
-	private Shell dialogShell;
-    
-	private Group groupDialogDescription;
-	
-	private Button buttonDescriptionAbort;
-	private Button buttonDescriptionAccept;
-	
-	private Label labelDescriptionAdvice;
-	
-	private StyledText styledTextDescritpion;
-	
-
-	private ResourceBundle l;
-	
-	/**
-	* Auto-generated main method to display this 
-	* org.eclipse.swt.widgets.Dialog inside a new Shell.
-	*/
-	public static void main(String[] args) {
-		try {
-			Display display = Display.getDefault();
-			Shell shell = new Shell(display);
-			DialogDescription inst = new DialogDescription(shell, SWT.NULL, Locale.GERMAN);
-			inst.open();
-		} catch (Exception e) {
-			e.printStackTrace();
-		}
-	}
-	
-	/*
-     * ?ndert die Sprache aller Elemente
-     * 
-     * @see de.hsharz.provirent.managment.gui.AbstractComposite#changeLanguage(java.util.Locale)
-     */
-    public void changeLanguage(Locale locale) {
-
-    }
-
-    /* 
-     * Init die Sprache (properties Datei)
-     * @see de.hsharz.provirent.managment.gui.AbstractComposite#initLanguage(java.util.Locale)
-     */
-    public void initLanguage(Locale locale) {
-        l = PropertyResourceBundle.getBundle(
-                "de.hsharz.provirent.management.gui.language.movies", locale);
-
-    }
-	
-	
-    
-	public DialogDescription(Shell parent, int style, Locale locale) {
-		super(parent, style);
-		
-		initLanguage(locale);
-	}
-
-
-	
-	public void open() {
-		try {
-			Shell parent = getParent();
-			dialogShell = new Shell(parent, SWT.DIALOG_TRIM | SWT.APPLICATION_MODAL);
-
-			dialogShell.setLayout(new GridLayout());
-            {
-
-                    groupDialogDescription = new Group(dialogShell, SWT.NONE);
-                    GridLayout groupDialogDescriptionLayout = new GridLayout();
-                    groupDialogDescriptionLayout.numColumns = 5;
-                    groupDialogDescriptionLayout.makeColumnsEqualWidth = true;
-                    groupDialogDescription.setBounds(0, 0, 316, 178);
-                    groupDialogDescription.setLayout(groupDialogDescriptionLayout);
-                    groupDialogDescription.setText("Beschreibung");
-                    GridData groupForm1LData = new GridData();
-                    groupForm1LData.widthHint = 300;
-                    groupForm1LData.heightHint = 200;
-                    groupDialogDescription.setLayoutData(groupForm1LData);                      
-                    
-                    {
-                        labelDescriptionAdvice = new Label(groupDialogDescription, SWT.NONE);
-                        labelDescriptionAdvice.setText("Beschreibung ins Textfeld schreiben oder ?ndern");
-        
-                    }
-                    {
-                        styledTextDescritpion = new StyledText(groupDialogDescription, SWT.NONE);
-                        styledTextDescritpion.setText("");
-                        GridData styledTextDescritpionLData = new GridData();
-                        styledTextDescritpionLData.horizontalSpan = 5;
-                        styledTextDescritpionLData.horizontalAlignment = GridData.FILL;
-                        styledTextDescritpionLData.verticalAlignment = GridData.FILL;
-                        styledTextDescritpionLData.verticalSpan = 3;
-                        styledTextDescritpionLData.grabExcessHorizontalSpace = true;
-                        styledTextDescritpionLData.grabExcessVerticalSpace = true;
-                        styledTextDescritpion.setLayoutData(styledTextDescritpionLData);
-                    }
-                    {
-                        buttonDescriptionAccept = new Button(groupDialogDescription, SWT.PUSH | SWT.CENTER);
-                        buttonDescriptionAccept.setText("?bernehmen");
-                        GridData buttonDescriptionAcceptLData2 = new GridData();
-                        buttonDescriptionAcceptLData2.horizontalSpan = 2;
-                        buttonDescriptionAcceptLData2.grabExcessHorizontalSpace = true;
-                        buttonDescriptionAcceptLData2.horizontalAlignment = GridData.FILL;
-                        buttonDescriptionAccept.setLayoutData(buttonDescriptionAcceptLData2);
-                    }
-                    {
-                        buttonDescriptionAbort = new Button(groupDialogDescription, SWT.PUSH | SWT.CENTER);
-                        buttonDescriptionAbort.setText("Abbruch");
-                        GridData buttonDescriptionAbortLData = new GridData();
-                        buttonDescriptionAbortLData.grabExcessHorizontalSpace = true;
-                        buttonDescriptionAbortLData.horizontalAlignment = GridData.FILL;
-                        buttonDescriptionAbortLData.horizontalSpan = 2;
-                        buttonDescriptionAbort.setLayoutData(buttonDescriptionAbortLData);
-                        buttonDescriptionAbort.addSelectionListener(new SelectionAdapter() {
-                            public void widgetSelected(SelectionEvent evt) {
-                               // TODO
-                               dialogShell.close();
-                            }
-                        });  
-                    }
-
-                }
-            
-			dialogShell.layout();
-			dialogShell.pack();
-			dialogShell.open();
-			Display display = dialogShell.getDisplay();
-			while (!dialogShell.isDisposed()) {
-				if (!display.readAndDispatch())
-					display.sleep();
-			}
-		} catch (Exception e) {
-			e.printStackTrace();
-		}
-	}
-	
-}

Copied: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/DialogMovie.java (from rev 153, project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/DialogDescription.java)



From pschneider at sheep.berlios.de  Tue Nov 23 19:27:33 2004
From: pschneider at sheep.berlios.de (Philipp Schneider at BerliOS)
Date: Tue, 23 Nov 2004 19:27:33 +0100
Subject: [Provirent-svn-commit] r155 - project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui
Message-ID: <200411231827.iANIRXMj021593@sheep.berlios.de>

Author: pschneider
Date: 2004-11-23 19:27:32 +0100 (Tue, 23 Nov 2004)
New Revision: 155

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/DialogMovie.java
Log:


Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/DialogMovie.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/DialogMovie.java	2004-11-23 18:26:49 UTC (rev 154)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/DialogMovie.java	2004-11-23 18:27:32 UTC (rev 155)
@@ -15,30 +15,37 @@
 * *************************************
 */
 
-import org.eclipse.swt.layout.FillLayout;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Locale;
+import java.util.PropertyResourceBundle;
+import java.util.ResourceBundle;
+
+import org.eclipse.swt.SWT;
+import org.eclipse.swt.events.SelectionAdapter;
+import org.eclipse.swt.events.SelectionEvent;
+import org.eclipse.swt.layout.GridData;
 import org.eclipse.swt.layout.GridLayout;
+import org.eclipse.swt.widgets.Button;
 import org.eclipse.swt.widgets.Display;
-import org.eclipse.swt.widgets.Shell;
-import org.eclipse.swt.SWT;
-
 import org.eclipse.swt.widgets.Group;
-import org.eclipse.swt.layout.GridData;
-import org.eclipse.swt.custom.SashForm;
 import org.eclipse.swt.widgets.Label;
+import org.eclipse.swt.widgets.Shell;
+import org.eclipse.swt.widgets.Table;
+import org.eclipse.swt.widgets.TableColumn;
+import org.eclipse.swt.widgets.TableItem;
 import org.eclipse.swt.widgets.Text;
-import org.eclipse.swt.widgets.Button;
-import org.eclipse.swt.custom.StyledText;
-import org.eclipse.swt.events.SelectionAdapter;
-import org.eclipse.swt.events.SelectionEvent;
 
-import java.util.Locale;
-import java.util.PropertyResourceBundle;
-import java.util.ResourceBundle;
-
-
-
-public class DialogDescription extends org.eclipse.swt.widgets.Dialog {
+import de.hsharz.provirent.objects.Actor;
+import de.hsharz.provirent.objects.Movie;
+import de.hsharz.provirent.persistence.Database;
+public class DialogMovie extends org.eclipse.swt.widgets.Dialog {
     
+    public final static int TYPE_GENRE = 1;
+    public final static int TYPE_IMAGE = 2;
+    public final static int TYPE_ACTOR = 3;
+    public final static int TYPE_DIRECTOR = 4;
+    
 	private Shell dialogShell;
     
 	private Group groupDialogDescription;
@@ -47,10 +54,15 @@
 	private Button buttonDescriptionAccept;
 	
 	private Label labelDescriptionAdvice;
-	
-	private StyledText styledTextDescritpion;
-	
 
+	private Button button1;
+	private Table table1 ;
+	private Button button2;
+	private Text text1;
+
+	private Movie movie ;
+	private List valuelist;
+
 	private ResourceBundle l;
 	
 	/**
@@ -58,10 +70,15 @@
 	* org.eclipse.swt.widgets.Dialog inside a new Shell.
 	*/
 	public static void main(String[] args) {
+
 		try {
+
+
 			Display display = Display.getDefault();
+			Movie film = new Movie();
+			film.setActors(new ArrayList());
 			Shell shell = new Shell(display);
-			DialogDescription inst = new DialogDescription(shell, SWT.NULL, Locale.GERMAN);
+			DialogMovie inst = new DialogMovie(shell, SWT.NULL, Locale.GERMAN,film);
 			inst.open();
 		} catch (Exception e) {
 			e.printStackTrace();
@@ -81,7 +98,7 @@
      * Init die Sprache (properties Datei)
      * @see de.hsharz.provirent.managment.gui.AbstractComposite#initLanguage(java.util.Locale)
      */
-    public void initLanguage(Locale locale) {
+    private void initLanguage(Locale locale) {
         l = PropertyResourceBundle.getBundle(
                 "de.hsharz.provirent.management.gui.language.movies", locale);
 
@@ -89,19 +106,19 @@
 	
 	
     
-	public DialogDescription(Shell parent, int style, Locale locale) {
+	public DialogMovie(Shell parent, int style, Locale locale, Movie movie) {
 		super(parent, style);
-		
+		this.movie = movie;
 		initLanguage(locale);
 	}
 
 
 	
-	public void open() {
+	private void open() {
 		try {
 			Shell parent = getParent();
 			dialogShell = new Shell(parent, SWT.DIALOG_TRIM | SWT.APPLICATION_MODAL);
-
+			dialogShell.setSize(200,210);
 			dialogShell.setLayout(new GridLayout());
             {
 
@@ -111,43 +128,128 @@
                     groupDialogDescriptionLayout.makeColumnsEqualWidth = true;
                     groupDialogDescription.setBounds(0, 0, 316, 178);
                     groupDialogDescription.setLayout(groupDialogDescriptionLayout);
-                    groupDialogDescription.setText("Beschreibung");
+                    groupDialogDescription.setText("Schauspieler");
+                    
                     GridData groupForm1LData = new GridData();
                     groupForm1LData.widthHint = 300;
                     groupForm1LData.heightHint = 200;
-                    groupDialogDescription.setLayoutData(groupForm1LData);                      
+                    groupDialogDescription.setLayoutData(groupForm1LData);                    
+
                     
                     {
+                        text1 = new Text(groupDialogDescription, SWT.BORDER);
+                        text1.setText("");
+                        text1.setToolTipText("Geben Sie hier einen Suchbegriff ein");
+                        GridData text1LData = new GridData();
+                        text1LData.horizontalSpan = 4;
+                        text1LData.horizontalAlignment = GridData.FILL;
+                        text1LData.grabExcessHorizontalSpace = true;
+                        text1.setLayoutData(text1LData);
+                       
+                        
+                    }
+                    {
+                        button1 = new Button(groupDialogDescription, SWT.PUSH
+                            | SWT.CENTER);
+                        button1.setText("Suchen");
+                        button1.addSelectionListener(new SelectionAdapter() {
+                            public void widgetSelected(SelectionEvent evt) {
+                                refreshActorsList(text1.getText());
+                                
+                               
+                            }
+                        });                         
+                    }
+                    {
                         labelDescriptionAdvice = new Label(groupDialogDescription, SWT.NONE);
                         labelDescriptionAdvice.setText("Beschreibung ins Textfeld schreiben oder ?ndern");
         
                     }
                     {
-                        styledTextDescritpion = new StyledText(groupDialogDescription, SWT.NONE);
-                        styledTextDescritpion.setText("");
-                        GridData styledTextDescritpionLData = new GridData();
-                        styledTextDescritpionLData.horizontalSpan = 5;
-                        styledTextDescritpionLData.horizontalAlignment = GridData.FILL;
-                        styledTextDescritpionLData.verticalAlignment = GridData.FILL;
-                        styledTextDescritpionLData.verticalSpan = 3;
-                        styledTextDescritpionLData.grabExcessHorizontalSpace = true;
-                        styledTextDescritpionLData.grabExcessVerticalSpace = true;
-                        styledTextDescritpion.setLayoutData(styledTextDescritpionLData);
+                        table1 =  new Table(groupDialogDescription, SWT.MULTI | SWT.FULL_SELECTION);
+                        GridData table1LData = new GridData();
+                        table1LData.horizontalAlignment = GridData.FILL;
+                        table1LData.horizontalSpan = 5;
+                        table1LData.grabExcessHorizontalSpace = true;
+                        table1LData.verticalAlignment = GridData.FILL;
+                        table1LData.grabExcessVerticalSpace = true;
+                        table1.setLayoutData(table1LData);
+                        {
+                            TableColumn item = new TableColumn(
+                                    table1,
+                                SWT.CENTER);
+                            item.setText("id");
+                            item.setWidth(0);
+                            item.setResizable(false);
+                        }                        
+                        {
+                            TableColumn item = new TableColumn(
+                                    table1,
+                                SWT.CENTER);
+                            item.setText("nachname");
+                            item.setAlignment(SWT.LEFT);
+                            item.setWidth(100);
+                            
+                        }                        
+                        {
+                            TableColumn item = new TableColumn(
+                                    table1,
+                                SWT.CENTER);
+                            item.setText("Vorname");
+                            item.setAlignment(SWT.LEFT);
+                            item.setWidth(100);
+                            
+                        }                        
+                        
+                        
                     }
                     {
                         buttonDescriptionAccept = new Button(groupDialogDescription, SWT.PUSH | SWT.CENTER);
-                        buttonDescriptionAccept.setText("?bernehmen");
+                        buttonDescriptionAccept.setText("Hinzuf?gen");
                         GridData buttonDescriptionAcceptLData2 = new GridData();
                         buttonDescriptionAcceptLData2.horizontalSpan = 2;
-                        buttonDescriptionAcceptLData2.grabExcessHorizontalSpace = true;
                         buttonDescriptionAcceptLData2.horizontalAlignment = GridData.FILL;
                         buttonDescriptionAccept.setLayoutData(buttonDescriptionAcceptLData2);
+                        
+            			{
+                            buttonDescriptionAccept
+                                .addSelectionListener(new SelectionAdapter() {
+                                public void widgetSelected(SelectionEvent evt) {
+                                    System.out
+                                        .println("buttonDescriptionAccept.widgetSelected, event="
+                                            + evt);
+                                    
+                                    int[] sel = table1.getSelectionIndices();
+                                    for (int i = 0; i < sel.length; i++) {
+                                        System.out.println("Auswahl:"+i+" "+table1.getItem(sel[i]));
+                                        
+                                        System.out.println("ID: "+table1.getItem(sel[i]).getText(0));
+                                        for (int j = 0; j < valuelist.size(); j++) {
+                                            System.out.println("Listid:"+((Actor)valuelist.get(j)).getActorId()+"");
+                                            if ( (table1.getItem(sel[i]).getText(0)).equalsIgnoreCase(((Actor)valuelist.get(j)).getActorId()+"") ){
+                                                System.out.println("gefunden");
+                                                movie.getActors().add((Actor)valuelist.get(j));
+                                            }
+                                        }
+                                        //movie.getActors().add()
+                                        table1.remove(sel[i]);
+                                    }
+                                    
+                                    //TODO add your code for buttonDescriptionAccept.widgetSelected
+                                }
+                                });
+            			}                        
+                        
                     }
                     {
+                        button2 = new Button(groupDialogDescription, SWT.FLAT | SWT.CENTER);
+                        button2.setEnabled(false);
+                        button2.setVisible(false);
+                    }
+                    {
                         buttonDescriptionAbort = new Button(groupDialogDescription, SWT.PUSH | SWT.CENTER);
-                        buttonDescriptionAbort.setText("Abbruch");
+                        buttonDescriptionAbort.setText("Fertig");
                         GridData buttonDescriptionAbortLData = new GridData();
-                        buttonDescriptionAbortLData.grabExcessHorizontalSpace = true;
                         buttonDescriptionAbortLData.horizontalAlignment = GridData.FILL;
                         buttonDescriptionAbortLData.horizontalSpan = 2;
                         buttonDescriptionAbort.setLayoutData(buttonDescriptionAbortLData);
@@ -159,8 +261,7 @@
                         });  
                     }
 
-                }
-            
+            }
 			dialogShell.layout();
 			dialogShell.pack();
 			dialogShell.open();
@@ -174,4 +275,23 @@
 		}
 	}
 	
+	
+	  private void refreshActorsList(final String filter) {
+	        if (table1 == null || table1.isDisposed()) {
+	            System.out
+	                    .println("Konnte DialogMovie List nicht refreshen, da diese null ist!");
+	            return;
+	        }
+	        System.out.println("Versuche nun DialogMovie List zu refreshen. Filter: "
+	                + filter);
+	        table1.removeAll();
+	        
+	        valuelist = Database.getActorExcept(filter, this.movie.getActors());
+
+	        for (int i = 0; i < valuelist.size(); i++) {
+	            Actor o = (Actor)valuelist.get(i);
+	            TableItem item = new TableItem(table1, SWT.NONE);
+	            item.setText(new String[] {o.getActorId()+"",o.getLastName(), o.getFirstName() });
+	        }
+	  }
 }



From pschneider at sheep.berlios.de  Wed Nov 24 00:00:20 2004
From: pschneider at sheep.berlios.de (Philipp Schneider at BerliOS)
Date: Wed, 24 Nov 2004 00:00:20 +0100
Subject: [Provirent-svn-commit] r156 - project_src/provirent_hibernate/src/de/hsharz/provirent/persistence
Message-ID: <200411232300.iANN0KDR032184@sheep.berlios.de>

Author: pschneider
Date: 2004-11-24 00:00:04 +0100 (Wed, 24 Nov 2004)
New Revision: 156

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java
Log:
- methoden zum eingeschr?\195?\164nkten abfragen hinzugef?\195?\188gt

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java	2004-11-23 18:27:32 UTC (rev 155)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java	2004-11-23 23:00:04 UTC (rev 156)
@@ -39,6 +39,7 @@
 import net.sf.hibernate.HibernateException;
 import net.sf.hibernate.Session;
 import net.sf.hibernate.Transaction;
+import net.sf.hibernate.expression.Conjunction;
 import net.sf.hibernate.expression.Disjunction;
 import net.sf.hibernate.expression.Expression;
 
@@ -474,10 +475,22 @@
 	 * @param filter 
 	 * @return List of Director objects, or an empty List
 	 */
-	public static List getGenre(final String filter){
+    public static List getGenre(final String filter){
+        return getGenreExcept(filter, new ArrayList());
+    }
+    
+	public static List getGenreExcept(final String filter, List genre){
 	    if (logger.isDebugEnabled()) {
-	        logger.debug("getGenre() - start. String filter= "+filter);
+	        logger.debug("getGenreExcept() - start. String filter= "+filter);
 	    }
+	    
+	    //check if elements in list are Genre Objects
+	    if (genre.size() > 0){
+	        if ( !(genre.get(0) instanceof Genre) ){
+	            logger.error("Elemente in Liste sind keine Genre");
+	            return new ArrayList();
+	        }
+	    }	    
 	    //init the returnlist
 	    List returnlist = new ArrayList();
 	
@@ -504,6 +517,12 @@
 	                }
 	                
 	            }
+	            logger.debug("Anzahl der Genre:"+genre.size());
+	            for (int i = 0; i < genre.size(); i++) {
+                    Genre tmp = (Genre)genre.get(i);
+                    criteria.add(Expression.not(Expression.eq("genreId",tmp.getGenreId())));
+                }	            
+	            
 	            //add all criteria
 	            criteria.add(any);
 	            //get the results
@@ -514,7 +533,7 @@
 	
 	    } catch (Exception e) {
 	        logger.error(
-	                "getGenre() - Error while trying to do Transaction",
+	                "getGenreExcept() - Error while trying to do Transaction",
 	                e);
 	        returnlist = new ArrayList();
 	    } finally {
@@ -522,12 +541,12 @@
 	            // No matter what, close the session
 	            HibernateUtil.closeSession();
 	        } catch (HibernateException e1) {
-	            logger.error("getGenre() - Could not Close the Session", e1);
+	            logger.error("getGenreExcept() - Could not Close the Session", e1);
 	        }
 	    }
 	
 	    if (logger.isDebugEnabled()) {
-	        logger.debug("getGenre() - end");
+	        logger.debug("getGenreExcept() - end");
 	    }
 	    return returnlist;
 	    
@@ -683,9 +702,20 @@
 	 * @return List of Image objects, or an empty List
 	 */
 	public static List getImages(final String filter){
+	    return getImagesExcept(filter, new ArrayList());
+	}
+	public static List getImagesExcept(final String filter, List images){
 	    if (logger.isDebugEnabled()) {
-	        logger.debug("getImages() - start. String filter= "+filter);
+	        logger.debug("getImagesExcept() - start. String filter= "+filter);
 	    }
+	    //check if elements in list are Director Objects
+	    if (images.size() > 0){
+	        if ( !(images.get(0) instanceof Image) ){
+	            logger.error("Elemente in Liste sind keine Image");
+	            return new ArrayList();
+	        }
+	    }	    
+	    
 	    //init the returnlist
 	    List returnlist = new ArrayList();
 	
@@ -710,8 +740,13 @@
 	                    any.add(Expression.eq("imageId", new Integer(Integer.parseInt(filter))));
 	                } catch (Exception e) {
 	                }
-	                
 	            }
+	            logger.debug("Anzahl der Images:"+images.size());
+	            for (int i = 0; i < images.size(); i++) {
+                    Image tmp = (Image)images.get(i);
+                    criteria.add(Expression.not(Expression.eq("imageId",tmp.getImageId())));
+                }
+	            
 	            //add all criteria
 	            criteria.add(any);
 	            //get the results
@@ -722,7 +757,7 @@
 	
 	    } catch (Exception e) {
 	        logger.error(
-	                "getImages() - Error while trying to do Transaction",
+	                "getImagesExcept() - Error while trying to do Transaction",
 	                e);
 	        returnlist = new ArrayList();
 	    } finally {
@@ -730,12 +765,12 @@
 	            // No matter what, close the session
 	            HibernateUtil.closeSession();
 	        } catch (HibernateException e1) {
-	            logger.error("getImages() - Could not Close the Session", e1);
+	            logger.error("getImagesExcept() - Could not Close the Session", e1);
 	        }
 	    }
 	
 	    if (logger.isDebugEnabled()) {
-	        logger.debug("getImages() - end");
+	        logger.debug("getImagesExcept() - end");
 	    }
 	    return returnlist;
 	    	
@@ -1097,9 +1132,24 @@
 	 * @return List of Director objects, or an empty List
 	 */
 	public static List getDirector(final String filter){
+	    return getDirectorExcept(filter, new ArrayList());
+	    
+	}
+	
+	public static List getDirectorExcept(final String filter, List directors){
 	    if (logger.isDebugEnabled()) {
-	        logger.debug("getDirector() - start. String filter= "+filter);
+	        logger.debug("getDirectorExcept() - start. String filter= "+filter);
 	    }
+	
+	    //check if elements in list are Director Objects
+	    if (directors.size() > 0){
+	        if ( !(directors.get(0) instanceof Director) ){
+	            logger.error("Elemente in Liste sind keine Director");
+	            return new ArrayList();
+	        }
+	    }
+	    
+	    
 	    //init the returnlist
 	    List returnlist = new ArrayList();
 	
@@ -1126,6 +1176,13 @@
 	                }
 	                
 	            }
+	            
+	            logger.debug("Anzahl der Directors:"+directors.size());
+	            for (int i = 0; i < directors.size(); i++) {
+                    Director tmp = (Director)directors.get(i);
+                    criteria.add(Expression.not(Expression.eq("directorId",tmp.getDirectorId())));
+                }
+	            
 	            //add all criteria
 	            criteria.add(any);
 	            //get the results
@@ -1136,7 +1193,7 @@
 	
 	    } catch (Exception e) {
 	        logger.error(
-	                "getDirector() - Error while trying to do Transaction",
+	                "getDirectorExcept() - Error while trying to do Transaction",
 	                e);
 	        returnlist = new ArrayList();
 	    } finally {
@@ -1144,12 +1201,12 @@
 	            // No matter what, close the session
 	            HibernateUtil.closeSession();
 	        } catch (HibernateException e1) {
-	            logger.error("getDirector() - Could not Close the Session", e1);
+	            logger.error("getDirectorExcept() - Could not Close the Session", e1);
 	        }
 	    }
 	
 	    if (logger.isDebugEnabled()) {
-	        logger.debug("getDirector() - end");
+	        logger.debug("getDirectorExcept() - end");
 	    }
 	    return returnlist;
 	    	
@@ -1200,9 +1257,29 @@
 	 * @return List of Actors objects, or an empty List
 	 */
 	public static List getActor(final String filter){
+	    return getActorExcept(filter, new ArrayList());	    	
+	}
+	
+	
+	
+	/**
+	 * This method gets all Actor from the database.
+	 * searches for firstname or lastname or id
+	 * @param filter 
+	 * @return List of Actors objects, or an empty List
+	 */
+	public static List getActorExcept(final String filter, List actors){
 	    if (logger.isDebugEnabled()) {
 	        logger.debug("getActor() - start. String filter= "+filter);
 	    }
+	    //check if elements in list are Actor Objects
+	    if (actors.size() > 0){
+	        if ( !(actors.get(0) instanceof Actor) ){
+	            logger.error("Elemente in Liste sind keine Actors");
+	            return new ArrayList();
+	        }
+	    }
+	    
 	    //init the returnlist
 	    List returnlist = new ArrayList();
 	
@@ -1229,14 +1306,20 @@
 	                }
 	                
 	            }
-	            //add all criteria
+	            logger.debug("Anzahl der Actors:"+actors.size());
+	            for (int i = 0; i < actors.size(); i++) {
+                    Actor tmp = (Actor)actors.get(i);
+                    logger.debug("Actor: "+tmp.getActorId());
+                    criteria.add(Expression.not(Expression.eq("actorId",tmp.getActorId())));
+                }
+
+	            //add all filter criteria
 	            criteria.add(any);
+	            
 	            //get the results
 	            returnlist = criteria.list();
 	
 	
-	
-	
 	    } catch (Exception e) {
 	        logger.error(
 	                "getActor() - Error while trying to do Transaction",
@@ -1256,9 +1339,8 @@
 	    }
 	    return returnlist;
 	    	
-	}
+	}	
 	
-	
 	public static Actor getSingleActor(final int id){
 	    if (logger.isDebugEnabled()) {
 	        logger.debug("getSingleActor() - start. int filter= "+id);



From pschneider at sheep.berlios.de  Wed Nov 24 00:01:17 2004
From: pschneider at sheep.berlios.de (Philipp Schneider at BerliOS)
Date: Wed, 24 Nov 2004 00:01:17 +0100
Subject: [Provirent-svn-commit] r157 - in project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui: . language
Message-ID: <200411232301.iANN1HMV032252@sheep.berlios.de>

Author: pschneider
Date: 2004-11-24 00:01:17 +0100 (Wed, 24 Nov 2004)
New Revision: 157

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeImage.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/DialogMovie.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/movies.properties
Log:
- unterschiedliche Anzeige f?\195?\188r genre,image,actor,director

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeImage.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeImage.java	2004-11-23 23:00:04 UTC (rev 156)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeImage.java	2004-11-23 23:01:17 UTC (rev 157)
@@ -1262,10 +1262,7 @@
         System.out.println("Type:"+image.getImageData().type);
         
         image.dispose();
-
-        //System.out.println("Gr??e: "+scaledtemp.getBounds());
         
-        
         return scaledtemp;
         
     }

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java	2004-11-23 23:00:04 UTC (rev 156)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java	2004-11-23 23:01:17 UTC (rev 157)
@@ -1,13 +1,13 @@
 package de.hsharz.provirent.management.gui;
 
 import java.text.MessageFormat;
+import java.util.ArrayList;
 import java.util.Locale;
 import java.util.PropertyResourceBundle;
 import java.util.ResourceBundle;
 
 import org.apache.log4j.Logger;
 import org.eclipse.swt.SWT;
-import org.eclipse.swt.widgets.Dialog;
 import org.eclipse.swt.custom.SashForm;
 import org.eclipse.swt.events.FocusAdapter;
 import org.eclipse.swt.events.FocusEvent;
@@ -27,7 +27,6 @@
 import org.eclipse.swt.widgets.Shell;
 import org.eclipse.swt.widgets.Table;
 import org.eclipse.swt.widgets.TableColumn;
-import org.eclipse.swt.widgets.TableItem;
 import org.eclipse.swt.widgets.Text;
 
 import com.cloudgarden.resource.SWTResourceManager;
@@ -1145,7 +1144,13 @@
         Shell dialogShell = new Shell();
         //Dialog dialogDescription=new Dialog(dialogShell);
         //dialogDescription.open();
-        DialogDescription test= new DialogDescription(dialogShell,1,l.getLocale());
+        Movie film = new Movie();
+        film.setActors(new ArrayList());
+        film.setImages(new ArrayList());
+        film.setGenres(new ArrayList());
+        film.setDirector(new ArrayList());
+        
+        DialogMovie test= new DialogMovie(dialogShell,1, l.getLocale( ),film,DialogMovie.TYPE_ACTOR);
         test.open();
 
     }

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/DialogMovie.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/DialogMovie.java	2004-11-23 23:00:04 UTC (rev 156)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/DialogMovie.java	2004-11-23 23:01:17 UTC (rev 157)
@@ -1,26 +1,13 @@
 package de.hsharz.provirent.management.gui;
 
-/**
-* This code was generated using CloudGarden's Jigloo
-* SWT/Swing GUI Builder, which is free for non-commercial
-* use. If Jigloo is being used commercially (ie, by a corporation,
-* company or business for any purpose whatever) then you
-* should purchase a license for each developer using Jigloo.
-* Please visit www.cloudgarden.com for details.
-* Use of Jigloo implies acceptance of these licensing terms.
-* *************************************
-* A COMMERCIAL LICENSE HAS NOT BEEN PURCHASED
-* for this machine, so Jigloo or this code cannot be used legally
-* for any corporate or commercial purpose.
-* *************************************
-*/
-
+import java.io.ByteArrayInputStream;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Locale;
 import java.util.PropertyResourceBundle;
 import java.util.ResourceBundle;
 
+import org.apache.log4j.Logger;
 import org.eclipse.swt.SWT;
 import org.eclipse.swt.events.SelectionAdapter;
 import org.eclipse.swt.events.SelectionEvent;
@@ -37,55 +24,78 @@
 import org.eclipse.swt.widgets.Text;
 
 import de.hsharz.provirent.objects.Actor;
+import de.hsharz.provirent.objects.Director;
+import de.hsharz.provirent.objects.Genre;
+import de.hsharz.provirent.objects.Image;
 import de.hsharz.provirent.objects.Movie;
 import de.hsharz.provirent.persistence.Database;
+
 public class DialogMovie extends org.eclipse.swt.widgets.Dialog {
-    
+    /**
+     * Logger for this class
+     */
+    private static final Logger logger = Logger.getLogger(DialogMovie.class);
+
     public final static int TYPE_GENRE = 1;
+
     public final static int TYPE_IMAGE = 2;
+
     public final static int TYPE_ACTOR = 3;
+
     public final static int TYPE_DIRECTOR = 4;
+
+    private int type = 0;
     
-	private Shell dialogShell;
-    
-	private Group groupDialogDescription;
-	
-	private Button buttonDescriptionAbort;
-	private Button buttonDescriptionAccept;
-	
-	private Label labelDescriptionAdvice;
+    private Shell dialogShell;
 
-	private Button button1;
-	private Table table1 ;
-	private Button button2;
-	private Text text1;
+    private Group groupDialogDescription;
 
-	private Movie movie ;
-	private List valuelist;
+    private Button buttonDescriptionAbort;
 
-	private ResourceBundle l;
-	
-	/**
-	* Auto-generated main method to display this 
-	* org.eclipse.swt.widgets.Dialog inside a new Shell.
-	*/
-	public static void main(String[] args) {
+    private Button buttonDescriptionAccept;
 
-		try {
+    private Label labelDescriptionAdvice;
 
+    private Button button1;
 
-			Display display = Display.getDefault();
-			Movie film = new Movie();
-			film.setActors(new ArrayList());
-			Shell shell = new Shell(display);
-			DialogMovie inst = new DialogMovie(shell, SWT.NULL, Locale.GERMAN,film);
-			inst.open();
-		} catch (Exception e) {
-			e.printStackTrace();
-		}
-	}
-	
-	/*
+    private Table table1;
+
+    private Button button2;
+
+    private Text text1;
+
+    private Movie movie;
+
+    private List valuelist;
+
+    private ResourceBundle l;
+
+    private Shell shell;
+    /**
+     * Auto-generated main method to display this org.eclipse.swt.widgets.Dialog
+     * inside a new Shell.
+     */
+    public static void main(String[] args) {
+
+        try {
+
+            Display display = Display.getDefault();
+            Movie film = new Movie();
+            film.setActors(new ArrayList());
+            film.setImages(new ArrayList());
+            film.setGenres(new ArrayList());
+            film.setDirector(new ArrayList());
+            
+            Shell shell = new Shell(display);
+            DialogMovie inst = new DialogMovie(shell, SWT.NULL, Locale.GERMAN,
+                    film, TYPE_IMAGE);
+            inst.open();
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+    }
+
+    /*
      * ?ndert die Sprache aller Elemente
      * 
      * @see de.hsharz.provirent.managment.gui.AbstractComposite#changeLanguage(java.util.Locale)
@@ -94,8 +104,9 @@
 
     }
 
-    /* 
+    /*
      * Init die Sprache (properties Datei)
+     * 
      * @see de.hsharz.provirent.managment.gui.AbstractComposite#initLanguage(java.util.Locale)
      */
     private void initLanguage(Locale locale) {
@@ -103,195 +114,283 @@
                 "de.hsharz.provirent.management.gui.language.movies", locale);
 
     }
-	
-	
-    
-	public DialogMovie(Shell parent, int style, Locale locale, Movie movie) {
-		super(parent, style);
-		this.movie = movie;
-		initLanguage(locale);
-	}
 
+    public DialogMovie(Shell parent, int style, Locale locale, Movie movie, int type) {
+        super(parent, style);
+        shell = parent;
+        this.movie = movie;
+        initLanguage(locale);
+        this.type = type;
+    }
 
-	
-	private void open() {
-		try {
-			Shell parent = getParent();
-			dialogShell = new Shell(parent, SWT.DIALOG_TRIM | SWT.APPLICATION_MODAL);
-			dialogShell.setSize(200,210);
-			dialogShell.setLayout(new GridLayout());
-            {
+    public void open() {
+        try {
+            Shell parent = getParent();
+            dialogShell = new Shell(parent, SWT.DIALOG_TRIM
+                    | SWT.APPLICATION_MODAL);
+            dialogShell.setSize(200, 210);
+            dialogShell.setLayout(new GridLayout());
 
-                    groupDialogDescription = new Group(dialogShell, SWT.NONE);
-                    GridLayout groupDialogDescriptionLayout = new GridLayout();
-                    groupDialogDescriptionLayout.numColumns = 5;
-                    groupDialogDescriptionLayout.makeColumnsEqualWidth = true;
-                    groupDialogDescription.setBounds(0, 0, 316, 178);
-                    groupDialogDescription.setLayout(groupDialogDescriptionLayout);
-                    groupDialogDescription.setText("Schauspieler");
-                    
-                    GridData groupForm1LData = new GridData();
-                    groupForm1LData.widthHint = 300;
-                    groupForm1LData.heightHint = 200;
-                    groupDialogDescription.setLayoutData(groupForm1LData);                    
+            groupDialogDescription = new Group(dialogShell, SWT.NONE);
+            GridLayout groupDialogDescriptionLayout = new GridLayout();
+            groupDialogDescriptionLayout.numColumns = 5;
+            groupDialogDescriptionLayout.makeColumnsEqualWidth = true;
+            groupDialogDescription.setBounds(0, 0, 316, 178);
+            groupDialogDescription.setLayout(groupDialogDescriptionLayout);
 
+            if(type == TYPE_ACTOR){
+                groupDialogDescription.setText(l.getString("movies.dialog.title.actor"));
+            } else if (type == TYPE_DIRECTOR) {
+                groupDialogDescription.setText(l.getString("movies.dialog.title.director"));
+            } else if (type == TYPE_GENRE) {
+                groupDialogDescription.setText(l.getString("movies.dialog.title.genre"));
+            } else if (type == TYPE_IMAGE) {
+                groupDialogDescription.setText(l.getString("movies.dialog.title.image"));
+            }
+            
+
+            GridData groupForm1LData = new GridData();
+            groupForm1LData.widthHint = 300;
+            groupForm1LData.heightHint = 200;
+            groupDialogDescription.setLayoutData(groupForm1LData);
+
+            text1 = new Text(groupDialogDescription, SWT.BORDER);
+            text1.setToolTipText(l.getString("movies.dialog.search.tooltip"));
+      
+            GridData text1LData = new GridData();
+            text1LData.horizontalSpan = 4;
+            text1LData.horizontalAlignment = GridData.FILL;
+            text1LData.grabExcessHorizontalSpace = true;
+            text1.setLayoutData(text1LData);
+
+            {
+                button1 = new Button(groupDialogDescription, SWT.PUSH
+                        | SWT.CENTER);
+                button1.setText(l.getString("movies.dialog.search.buttonname"));
+                
+                
+                
+                button1.addSelectionListener(new SelectionAdapter() {
+                    public void widgetSelected(SelectionEvent evt) {
+                            refreshList(text1.getText());
+                    }
+                });
+            }
+            {
+                labelDescriptionAdvice = new Label(groupDialogDescription,
+                        SWT.NONE);
+                
+                if(type == TYPE_ACTOR){
+                    labelDescriptionAdvice
+                    .setText(l.getString("movies.dialog.labeltable.actor"));
+                } else if (type == TYPE_DIRECTOR) {
+                    labelDescriptionAdvice
+                    .setText(l.getString("movies.dialog.labeltable.director"));
+                } else if (type == TYPE_GENRE) {
+                    labelDescriptionAdvice
+                    .setText(l.getString("movies.dialog.labeltable.genre"));
+                } else if (type == TYPE_IMAGE) {
+                    labelDescriptionAdvice
+                    .setText(l.getString("movies.dialog.labeltable.image"));
+                }
+                
+                
+                table1 = new Table(groupDialogDescription, SWT.SINGLE
+                        | SWT.FULL_SELECTION);
+                GridData table1LData = new GridData();
+                table1LData.horizontalAlignment = GridData.FILL;
+                table1LData.horizontalSpan = 5;
+                table1LData.grabExcessHorizontalSpace = true;
+                table1LData.verticalAlignment = GridData.FILL;
+                table1LData.grabExcessVerticalSpace = true;
+                table1.setLayoutData(table1LData);
+                {
+                    TableColumn item = new TableColumn(table1, SWT.CENTER);
+                    item.setText(l.getString("movies.dialog.column.id"));
+                    item.setWidth(0);
+                    item.setResizable(false);
+                }
+                {
+                    TableColumn item = new TableColumn(table1, SWT.CENTER);
+                    item.setAlignment(SWT.LEFT);
+                    item.setWidth(100);
                     
-                    {
-                        text1 = new Text(groupDialogDescription, SWT.BORDER);
-                        text1.setText("");
-                        text1.setToolTipText("Geben Sie hier einen Suchbegriff ein");
-                        GridData text1LData = new GridData();
-                        text1LData.horizontalSpan = 4;
-                        text1LData.horizontalAlignment = GridData.FILL;
-                        text1LData.grabExcessHorizontalSpace = true;
-                        text1.setLayoutData(text1LData);
-                       
-                        
+                    if(type == TYPE_ACTOR){
+                        item.setText(l.getString("movies.dialog.column.lastname.actor"));
+                    } else if (type == TYPE_DIRECTOR) {
+                        item.setText(l.getString("movies.dialog.column.lastname.director"));
+                    } else if (type == TYPE_GENRE) {
+                        item.setText(l.getString("movies.dialog.column.name.genre"));
+                    } else if (type == TYPE_IMAGE) {
+                        item.setText(l.getString("movies.dialog.column.name.image"));
                     }
-                    {
-                        button1 = new Button(groupDialogDescription, SWT.PUSH
-                            | SWT.CENTER);
-                        button1.setText("Suchen");
-                        button1.addSelectionListener(new SelectionAdapter() {
+
+                }
+                {
+                    TableColumn item = new TableColumn(table1, SWT.CENTER);
+                    item.setAlignment(SWT.LEFT);
+                    item.setWidth(100);
+                    if(type == TYPE_ACTOR){
+                        item.setText(l.getString("movies.dialog.column.firstname.actor"));
+                    } else if (type == TYPE_DIRECTOR) {
+                        item.setText(l.getString("movies.dialog.column.firstname.director"));
+                    } else if (type == TYPE_GENRE) {
+                        item.setText(l.getString("movies.dialog.column.shortname.genre"));
+                    } else if (type == TYPE_IMAGE) {
+                        item.setText(l.getString("movies.dialog.column.description.image"));
+                    }
+                }
+
+                buttonDescriptionAccept = new Button(groupDialogDescription,
+                        SWT.PUSH | SWT.CENTER);
+                buttonDescriptionAccept.setText(l.getString("movies.dialog.buttonadd"));
+                GridData buttonDescriptionAcceptLData2 = new GridData();
+                buttonDescriptionAcceptLData2.horizontalSpan = 2;
+                buttonDescriptionAcceptLData2.horizontalAlignment = GridData.FILL;
+                buttonDescriptionAccept
+                        .setLayoutData(buttonDescriptionAcceptLData2);
+
+                buttonDescriptionAccept.addSelectionListener(
+                        new SelectionAdapter() {
                             public void widgetSelected(SelectionEvent evt) {
-                                refreshActorsList(text1.getText());
-                                
-                               
-                            }
-                        });                         
-                    }
-                    {
-                        labelDescriptionAdvice = new Label(groupDialogDescription, SWT.NONE);
-                        labelDescriptionAdvice.setText("Beschreibung ins Textfeld schreiben oder ?ndern");
-        
-                    }
-                    {
-                        table1 =  new Table(groupDialogDescription, SWT.MULTI | SWT.FULL_SELECTION);
-                        GridData table1LData = new GridData();
-                        table1LData.horizontalAlignment = GridData.FILL;
-                        table1LData.horizontalSpan = 5;
-                        table1LData.grabExcessHorizontalSpace = true;
-                        table1LData.verticalAlignment = GridData.FILL;
-                        table1LData.grabExcessVerticalSpace = true;
-                        table1.setLayoutData(table1LData);
-                        {
-                            TableColumn item = new TableColumn(
-                                    table1,
-                                SWT.CENTER);
-                            item.setText("id");
-                            item.setWidth(0);
-                            item.setResizable(false);
-                        }                        
-                        {
-                            TableColumn item = new TableColumn(
-                                    table1,
-                                SWT.CENTER);
-                            item.setText("nachname");
-                            item.setAlignment(SWT.LEFT);
-                            item.setWidth(100);
-                            
-                        }                        
-                        {
-                            TableColumn item = new TableColumn(
-                                    table1,
-                                SWT.CENTER);
-                            item.setText("Vorname");
-                            item.setAlignment(SWT.LEFT);
-                            item.setWidth(100);
-                            
-                        }                        
-                        
-                        
-                    }
-                    {
-                        buttonDescriptionAccept = new Button(groupDialogDescription, SWT.PUSH | SWT.CENTER);
-                        buttonDescriptionAccept.setText("Hinzuf?gen");
-                        GridData buttonDescriptionAcceptLData2 = new GridData();
-                        buttonDescriptionAcceptLData2.horizontalSpan = 2;
-                        buttonDescriptionAcceptLData2.horizontalAlignment = GridData.FILL;
-                        buttonDescriptionAccept.setLayoutData(buttonDescriptionAcceptLData2);
-                        
-            			{
-                            buttonDescriptionAccept
-                                .addSelectionListener(new SelectionAdapter() {
-                                public void widgetSelected(SelectionEvent evt) {
+
+
+                                int[] sel = table1.getSelectionIndices();
+                                for (int i = 0; i < sel.length; i++) {
+                                    System.out.println("Auswahl:" + i + " "
+                                            + table1.getItem(sel[i]));
+
                                     System.out
-                                        .println("buttonDescriptionAccept.widgetSelected, event="
-                                            + evt);
-                                    
-                                    int[] sel = table1.getSelectionIndices();
-                                    for (int i = 0; i < sel.length; i++) {
-                                        System.out.println("Auswahl:"+i+" "+table1.getItem(sel[i]));
-                                        
-                                        System.out.println("ID: "+table1.getItem(sel[i]).getText(0));
-                                        for (int j = 0; j < valuelist.size(); j++) {
-                                            System.out.println("Listid:"+((Actor)valuelist.get(j)).getActorId()+"");
-                                            if ( (table1.getItem(sel[i]).getText(0)).equalsIgnoreCase(((Actor)valuelist.get(j)).getActorId()+"") ){
-                                                System.out.println("gefunden");
-                                                movie.getActors().add((Actor)valuelist.get(j));
-                                            }
+                                            .println("ID: "
+                                                    + table1.getItem(sel[i])
+                                                            .getText(0));
+                                    for (int j = 0; j < valuelist.size(); j++) {
+                                        System.out.println("Listid:"
+                                                + ((Actor) valuelist.get(j))
+                                                        .getActorId() + "");
+                                        if ((table1.getItem(sel[i]).getText(0))
+                                                .equalsIgnoreCase(((Actor) valuelist
+                                                        .get(j)).getActorId()
+                                                        + "")) {
+                                            System.out.println("gefunden");
+                                            movie.getActors().add(
+                                                    (Actor) valuelist.get(j));
                                         }
-                                        //movie.getActors().add()
-                                        table1.remove(sel[i]);
                                     }
-                                    
-                                    //TODO add your code for buttonDescriptionAccept.widgetSelected
+                                    table1.remove(sel[i]);
                                 }
-                                });
-            			}                        
-                        
-                    }
-                    {
-                        button2 = new Button(groupDialogDescription, SWT.FLAT | SWT.CENTER);
-                        button2.setEnabled(false);
-                        button2.setVisible(false);
-                    }
-                    {
-                        buttonDescriptionAbort = new Button(groupDialogDescription, SWT.PUSH | SWT.CENTER);
-                        buttonDescriptionAbort.setText("Fertig");
-                        GridData buttonDescriptionAbortLData = new GridData();
-                        buttonDescriptionAbortLData.horizontalAlignment = GridData.FILL;
-                        buttonDescriptionAbortLData.horizontalSpan = 2;
-                        buttonDescriptionAbort.setLayoutData(buttonDescriptionAbortLData);
-                        buttonDescriptionAbort.addSelectionListener(new SelectionAdapter() {
-                            public void widgetSelected(SelectionEvent evt) {
-                               // TODO
-                               dialogShell.close();
+
+
                             }
-                        });  
-                    }
+                        });
 
             }
-			dialogShell.layout();
-			dialogShell.pack();
-			dialogShell.open();
-			Display display = dialogShell.getDisplay();
-			while (!dialogShell.isDisposed()) {
-				if (!display.readAndDispatch())
-					display.sleep();
-			}
-		} catch (Exception e) {
-			e.printStackTrace();
-		}
-	}
-	
-	
-	  private void refreshActorsList(final String filter) {
-	        if (table1 == null || table1.isDisposed()) {
-	            System.out
-	                    .println("Konnte DialogMovie List nicht refreshen, da diese null ist!");
-	            return;
-	        }
-	        System.out.println("Versuche nun DialogMovie List zu refreshen. Filter: "
-	                + filter);
-	        table1.removeAll();
-	        
-	        valuelist = Database.getActorExcept(filter, this.movie.getActors());
+            {
+                button2 = new Button(groupDialogDescription, SWT.FLAT
+                        | SWT.CENTER);
+                button2.setEnabled(false);
+                button2.setVisible(false);
+            }
 
-	        for (int i = 0; i < valuelist.size(); i++) {
-	            Actor o = (Actor)valuelist.get(i);
-	            TableItem item = new TableItem(table1, SWT.NONE);
-	            item.setText(new String[] {o.getActorId()+"",o.getLastName(), o.getFirstName() });
-	        }
-	  }
-}
+            buttonDescriptionAbort = new Button(groupDialogDescription,
+                    SWT.PUSH | SWT.CENTER);
+            buttonDescriptionAbort.setText(l.getString("movies.dialog.buttonfinish"));
+            GridData buttonDescriptionAbortLData = new GridData();
+            buttonDescriptionAbortLData.horizontalAlignment = GridData.FILL;
+            buttonDescriptionAbortLData.horizontalSpan = 2;
+            buttonDescriptionAbort.setLayoutData(buttonDescriptionAbortLData);
+            buttonDescriptionAbort.addSelectionListener(new SelectionAdapter() {
+                public void widgetSelected(SelectionEvent evt) {
+                    dialogShell.close();
+                }
+            });
+
+            dialogShell.layout();
+            dialogShell.pack();
+            dialogShell.open();
+            Display display = dialogShell.getDisplay();
+            while (!dialogShell.isDisposed()) {
+                if (!display.readAndDispatch())
+                    display.sleep();
+            }
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+    }
+
+    private void refreshList(final String filter) {
+        if (table1 == null || table1.isDisposed()) {
+            logger.warn("Konnte DialogMovie List nicht refreshen, da diese null ist!");
+            return;
+        }
+        table1.removeAll();
+        
+        
+        if (type == TYPE_ACTOR){
+        valuelist = Database.getActorExcept(filter, this.movie.getActors());
+        for (int i = 0; i < valuelist.size(); i++) {
+            Actor o = (Actor) valuelist.get(i);
+            TableItem item = new TableItem(table1, SWT.NONE);
+            item.setText(new String[] { o.getActorId() + "", o.getLastName(),
+                    o.getFirstName() });
+        }
+        } else if (type == TYPE_DIRECTOR){
+            valuelist = Database.getDirectorExcept(filter, this.movie.getDirector());
+            for (int i = 0; i < valuelist.size(); i++) {
+                Director o = (Director) valuelist.get(i);
+                TableItem item = new TableItem(table1, SWT.NONE);
+                item.setText(new String[] { o.getDirectorId() + "", o.getLastName(),
+                        o.getFirstName() });
+            }
+        } else if (type == TYPE_GENRE){
+            valuelist = Database.getGenreExcept(filter, this.movie.getGenres());
+            for (int i = 0; i < valuelist.size(); i++) {
+                Genre o = (Genre) valuelist.get(i);
+                TableItem item = new TableItem(table1, SWT.NONE);
+                item.setText(new String[] { o.getGenreId() + "", o.getName(),
+                        o.getShortname() });
+            }            
+        } else if (type == TYPE_IMAGE){            
+            valuelist = Database.getImagesExcept(filter, this.movie.getImages());
+            for (int i = 0; i < valuelist.size(); i++) {
+                Image o = (Image) valuelist.get(i);
+                TableItem item = new TableItem(table1, SWT.NONE);
+
+                
+                //Scale the image
+                int maxheight = 75;
+                int maxwidth = 75;
+
+                final org.eclipse.swt.graphics.Image image = new org.eclipse.swt.graphics.Image(shell.getDisplay(),new ByteArrayInputStream(o.getImageFile()));
+                final int width = image.getBounds().width;
+                final int height = image.getBounds().height;
+                float scalefactor = 1;
+                
+                if (width > maxwidth) {
+                    scalefactor = (float)maxwidth/width;
+                }
+                if (height > maxheight) {
+                    if ( ((float)maxheight/height)< scalefactor ){
+                        scalefactor = ((float)maxheight/height);
+                    }
+                    
+                }
+                
+                final org.eclipse.swt.graphics.Image scaledtemp = new org.eclipse.swt.graphics.Image(shell.getDisplay(),
+                        image.getImageData().scaledTo((int)(width*scalefactor),(int)(height*scalefactor)));
+                
+                item.setImage(1,scaledtemp);
+                item.setText(new String[] { o.getImageId() + "", o.getImageFileName(),
+                        o.getImageFileDescription() });                
+                
+                //image.dispose();
+                //scaledtemp.dispose();
+                
+                
+                
+            }            
+        }
+        
+        
+    }
+}
\ No newline at end of file

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/movies.properties
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/movies.properties	2004-11-23 23:00:04 UTC (rev 156)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/movies.properties	2004-11-23 23:01:17 UTC (rev 157)
@@ -50,4 +50,30 @@
 movies.groupdetail.deletebutton.newok=Datensatz wurde erfolgreich gel?scht.
 movies.groupdetail.deletebutton.errorsave=Datenbankfehler beim L?schen.
 movies.groupdetail.deletebutton.errordb=Datenbankfehler beim Herstellen der Verbindung(del).
-movies.groupdetail.deletebutton.question.gap =erschienen am
\ No newline at end of file
+movies.groupdetail.deletebutton.question.gap =erschienen am
+
+
+movies.dialog.title.actor=Schauspieler
+movies.dialog.title.genre=Genre
+movies.dialog.title.image=Bilder
+movies.dialog.title.director=Directors
+
+movies.dialog.search.tooltip=Geben Sie hier bitte Ihren Suchbegriff ein
+movies.dialog.search.buttonname=Suchen
+movies.dialog.buttonadd=Hinzuf?gen
+movies.dialog.buttonfinish=Fertig
+movies.dialog.column.id=id
+movies.dialog.column.lastname.actor=Nachname
+movies.dialog.column.firstname.actor=Vorname
+movies.dialog.column.lastname.director=Nachname
+movies.dialog.column.firstname.director=Vorname
+movies.dialog.column.name.genre=Name
+movies.dialog.column.shortname.genre=Kurzname
+movies.dialog.column.name.image=Name
+movies.dialog.column.description.image=Beschreibung
+
+
+movies.dialog.labeltable.actor=W?hlen Sie einen Schaupieler:
+movies.dialog.labeltable.genre=W?hlen Sie ein Genre:
+movies.dialog.labeltable.image=W?hlen Sie ein Bild:
+movies.dialog.labeltable.director=W?hlen Sie einen Director:



From pschneider at sheep.berlios.de  Wed Nov 24 00:36:13 2004
From: pschneider at sheep.berlios.de (Philipp Schneider at BerliOS)
Date: Wed, 24 Nov 2004 00:36:13 +0100
Subject: [Provirent-svn-commit] r158 - in project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui: . language
Message-ID: <200411232336.iANNaDHn021492@sheep.berlios.de>

Author: pschneider
Date: 2004-11-24 00:35:57 +0100 (Wed, 24 Nov 2004)
New Revision: 158

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeImage.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/DialogMovie.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/movies.properties
Log:
- DialogMovie erg?\195?\164nzt und fertig zum testen
- gr?\195?\182?\195?\159e kann in einem weiteren Konstruktur angegeben werden

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeImage.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeImage.java	2004-11-23 23:01:17 UTC (rev 157)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeImage.java	2004-11-23 23:35:57 UTC (rev 158)
@@ -124,7 +124,7 @@
     private TableColumn tableImagesOverview_ColumnID;
 
     private TableColumn tableImagesOverview_ColumnThumb;
-    
+
     private TableColumn tableImagesOverview_ColumnName;
 
     private TableColumn tableImagesOverview_ColumnDescription;
@@ -315,9 +315,7 @@
                 tableImagesOverview_ColumnThumb.setText(l
                         .getString("images.groupoverview.thumbnail"));
                 tableImagesOverview_ColumnThumb.setWidth(75);
-                
-                
-                
+
                 tableImagesOverview_ColumnName = new TableColumn(
                         tableImagesOverview, SWT.CENTER);
                 tableImagesOverview_ColumnName.setText(l
@@ -460,7 +458,7 @@
             textImagesDescription = new Text(groupImagesDetail, SWT.MULTI
                     | SWT.V_SCROLL | SWT.BORDER);
             textImagesDescription.setEditable(false);
-            
+
             GridData text1LData3 = new GridData();
             text1LData3.horizontalAlignment = GridData.FILL;
             text1LData3.heightHint = 36;
@@ -503,7 +501,7 @@
                 public void widgetSelected(SelectionEvent evt) {
 
                     //file is selected
-                    
+
                     String[] filterExtensions = { "*.gif", "*.jpg", "*.*" };
                     FileDialog fileDialog = new FileDialog(getShell(), SWT.OPEN);
                     fileDialog.setText(currentDir);
@@ -518,14 +516,18 @@
 
                         scaledImage = ideaImage = new Image(getDisplay(),
                                 selectedFile);
-                        
+
                         canvasImg.redraw();
                         textFileUrl.setText(fileDialog.getFilterPath()
                                 + System.getProperty("file.separator")
                                 + fileDialog.getFileName());
 
                         //set the Image Name
-                        textImagesName.setText(fileDialog.getFileName().substring(0,fileDialog.getFileName().lastIndexOf(".")));
+                        textImagesName.setText(fileDialog.getFileName()
+                                .substring(
+                                        0,
+                                        fileDialog.getFileName().lastIndexOf(
+                                                ".")));
                         //save the selected dir 
                         currentDir = fileDialog.getFilterPath();
 
@@ -661,19 +663,19 @@
                         mode_image = ManagementGui.MODE_ADD;
 
                         tableImagesOverview.deselectAll();
-                        
+
                         textImagesID.setText("");
                         textImagesName.setText("");
                         textImagesDescription.setText("");
-                        
+
                         textImagesName.setEditable(true);
                         textImagesDescription.setEditable(true);
-                        
+
                         buttonSelectFile.setEnabled(true);
-                        
-                        ideaImage=scaledImage = null;
+
+                        ideaImage = scaledImage = null;
                         canvasImg.redraw();
-                        
+
                         buttonImageCancel.setEnabled(true);
                         buttonImageSave.setEnabled(true);
                         buttonImageNew.setEnabled(false);
@@ -697,13 +699,13 @@
 
                         textImagesID.setEditable(false);
                         textImagesName.setEditable(true);
-                        
+
                         textImagesDescription.setEditable(true);
                         textImagesName.setFocus();
 
                         buttonImageCancel.setEnabled(true);
                         buttonImageSave.setEnabled(true);
-                        
+
                         buttonImageNew.setEnabled(false);
                         buttonImageEdit.setEnabled(false);
                         buttonImageDelete.setEnabled(false);
@@ -834,7 +836,6 @@
                         logger.debug("buttonImageSave.widgetSelected, event="
                                 + evt);
 
-                        
                         if (scaledImage == null) {
                             statusLine
                                     .setStatus(
@@ -844,8 +845,6 @@
                             return;
                         }
 
-                        
-
                         //testen ob Name leer ist
                         if (textImagesName.getText().trim()
                                 .equalsIgnoreCase("")
@@ -882,11 +881,12 @@
                                     .getImageData() };
                             ByteArrayOutputStream bos = new ByteArrayOutputStream();
                             ImageData imgdata = scaledImage.getImageData();
-                            
+
                             System.out.println(imgdata.type);
                             System.out.println(SWT.IMAGE_JPEG);
 
-                            imageLoader.save(bos, scaledImage.getImageData().type);
+                            imageLoader.save(bos,
+                                    scaledImage.getImageData().type);
 
                             tmp.setImageFile(bos.toByteArray());
 
@@ -1166,22 +1166,23 @@
         textImagesID.setText(object.getImageId() + "");
         textImagesName.setText(object.getImageFileName());
         textImagesDescription.setText(object.getImageFileDescription());
-        
+
         textFileUrl.setText(l
                 .getString("images.groupdetail.labelselecteddatabase"));
-        
+
         if (object.getImageFile() != null && object.getImageFile().length > 0) {
             System.out.println("Versuche zu zeichnen");
             scaledImage = ideaImage = new Image(getDisplay(),
                     new ByteArrayInputStream(object.getImageFile()));
             canvasImg.redraw();
-        }else{
-            statusLine.setStatus(StatusLineStyledText.STATUS_WARN,"Bilddaten k?nnen f?r Bild "+ object.getImageFileName() +"nicht geladen werden.");
+        } else {
+            statusLine.setStatus(StatusLineStyledText.STATUS_WARN,
+                    "Bilddaten k?nnen f?r Bild " + object.getImageFileName()
+                            + "nicht geladen werden.");
             scaledImage = ideaImage = null;
             canvasImg.redraw();
         }
 
-
         //Buttons zum l?schen und editieren aktivieren
 
         //Mode auf view setzen
@@ -1223,47 +1224,48 @@
             de.hsharz.provirent.objects.Image o = (de.hsharz.provirent.objects.Image) Imagelist
                     .get(i);
             item = new TableItem(tableImagesOverview, SWT.NONE);
-            
-            
+
             if (o.getImageFile() != null && o.getImageFile().length > 0) {
                 item.setImage(1, createThumbnailImage(o.getImageFile()));
-            }            
-            
-            item.setText(new String[] { o.getImageId() + "","",
+            }
+
+            item.setText(new String[] { o.getImageId() + "", "",
                     o.getImageFileName(), o.getImageFileDescription() });
 
         }
         Imagelist = null;
     }
-    
-    private Image createThumbnailImage(byte[] data){
-        
+
+    private Image createThumbnailImage(byte[] data) {
+
         int maxheight = 75;
         int maxwidth = 75;
 
-        final Image image = new Image(getDisplay(),new ByteArrayInputStream(data));
+        final Image image = new Image(getDisplay(), new ByteArrayInputStream(
+                data));
         final int width = image.getBounds().width;
         final int height = image.getBounds().height;
         float scalefactor = 1;
-        
+
         if (width > maxwidth) {
-            scalefactor = (float)maxwidth/width;
+            scalefactor = (float) maxwidth / width;
         }
         if (height > maxheight) {
-            if ( ((float)maxheight/height)< scalefactor ){
-                scalefactor = ((float)maxheight/height);
+            if (((float) maxheight / height) < scalefactor) {
+                scalefactor = ((float) maxheight / height);
             }
-            
+
         }
-        
-        final Image scaledtemp = new Image(getDisplay(),
-                image.getImageData().scaledTo((int)(width*scalefactor),(int)(height*scalefactor)));
-        
-        System.out.println("Type:"+image.getImageData().type);
-        
+
+        final Image scaledtemp = new Image(getDisplay(), image.getImageData()
+                .scaledTo((int) (width * scalefactor),
+                        (int) (height * scalefactor)));
+
+        System.out.println("Type:" + image.getImageData().type);
+
         image.dispose();
-        
+
         return scaledtemp;
-        
+
     }
 }
\ No newline at end of file

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/DialogMovie.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/DialogMovie.java	2004-11-23 23:01:17 UTC (rev 157)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/DialogMovie.java	2004-11-23 23:35:57 UTC (rev 158)
@@ -45,7 +45,7 @@
     public final static int TYPE_DIRECTOR = 4;
 
     private int type = 0;
-    
+
     private Shell dialogShell;
 
     private Group groupDialogDescription;
@@ -71,6 +71,12 @@
     private ResourceBundle l;
 
     private Shell shell;
+    
+    private int size_width = 200;
+    private int size_height = 210;
+    private int start_x = 50;
+    private int start_y = 50;
+
     /**
      * Auto-generated main method to display this org.eclipse.swt.widgets.Dialog
      * inside a new Shell.
@@ -85,7 +91,7 @@
             film.setImages(new ArrayList());
             film.setGenres(new ArrayList());
             film.setDirector(new ArrayList());
-            
+
             Shell shell = new Shell(display);
             DialogMovie inst = new DialogMovie(shell, SWT.NULL, Locale.GERMAN,
                     film, TYPE_IMAGE);
@@ -115,7 +121,8 @@
 
     }
 
-    public DialogMovie(Shell parent, int style, Locale locale, Movie movie, int type) {
+    public DialogMovie(Shell parent, int style, Locale locale, Movie movie,
+            int type) {
         super(parent, style);
         shell = parent;
         this.movie = movie;
@@ -123,274 +130,341 @@
         this.type = type;
     }
 
+    public DialogMovie(Shell parent, int style, Locale locale, Movie movie,
+            int type, int x, int y, int width, int height) {
+        super(parent, style);
+        shell = parent;
+        this.movie = movie;
+        initLanguage(locale);
+        this.type = type;
+        start_x = x;
+        start_y = y;
+        size_height = height;
+        size_width = width;
+    }
+    
+    
     public void open() {
-        try {
-            Shell parent = getParent();
-            dialogShell = new Shell(parent, SWT.DIALOG_TRIM
-                    | SWT.APPLICATION_MODAL);
-            dialogShell.setSize(200, 210);
-            dialogShell.setLayout(new GridLayout());
 
-            groupDialogDescription = new Group(dialogShell, SWT.NONE);
-            GridLayout groupDialogDescriptionLayout = new GridLayout();
-            groupDialogDescriptionLayout.numColumns = 5;
-            groupDialogDescriptionLayout.makeColumnsEqualWidth = true;
-            groupDialogDescription.setBounds(0, 0, 316, 178);
-            groupDialogDescription.setLayout(groupDialogDescriptionLayout);
+        Shell parent = getParent();
+        dialogShell = new Shell(parent, SWT.DIALOG_TRIM | SWT.APPLICATION_MODAL);
+        dialogShell.setSize(size_width, size_height);
+        dialogShell.setBounds(start_x,start_y,size_width,size_height);
+        dialogShell.setLayout(new GridLayout());
 
-            if(type == TYPE_ACTOR){
-                groupDialogDescription.setText(l.getString("movies.dialog.title.actor"));
+        groupDialogDescription = new Group(dialogShell, SWT.NONE);
+        GridLayout groupDialogDescriptionLayout = new GridLayout();
+        groupDialogDescriptionLayout.numColumns = 5;
+        groupDialogDescriptionLayout.makeColumnsEqualWidth = true;
+
+        groupDialogDescription.setLayout(groupDialogDescriptionLayout);
+
+        if (type == TYPE_ACTOR) {
+            groupDialogDescription.setText(l
+                    .getString("movies.dialog.title.actor"));
+        } else if (type == TYPE_DIRECTOR) {
+            groupDialogDescription.setText(l
+                    .getString("movies.dialog.title.director"));
+        } else if (type == TYPE_GENRE) {
+            groupDialogDescription.setText(l
+                    .getString("movies.dialog.title.genre"));
+        } else if (type == TYPE_IMAGE) {
+            groupDialogDescription.setText(l
+                    .getString("movies.dialog.title.image"));
+        }
+
+        GridData groupForm1LData = new GridData();
+        groupForm1LData.widthHint = 300;
+        groupForm1LData.heightHint = 200;
+        groupDialogDescription.setLayoutData(groupForm1LData);
+
+        text1 = new Text(groupDialogDescription, SWT.BORDER);
+        text1.setToolTipText(l.getString("movies.dialog.search.tooltip"));
+
+        GridData text1LData = new GridData();
+        text1LData.horizontalSpan = 4;
+        text1LData.horizontalAlignment = GridData.FILL;
+        text1LData.grabExcessHorizontalSpace = true;
+        text1.setLayoutData(text1LData);
+
+        {
+            button1 = new Button(groupDialogDescription, SWT.PUSH | SWT.CENTER);
+            button1.setText(l.getString("movies.dialog.search.buttonname"));
+
+            button1.addSelectionListener(new SelectionAdapter() {
+                public void widgetSelected(SelectionEvent evt) {
+                    refreshList(text1.getText());
+                }
+            });
+        }
+        {
+            labelDescriptionAdvice = new Label(groupDialogDescription, SWT.NONE);
+
+            if (type == TYPE_ACTOR) {
+                labelDescriptionAdvice.setText(l
+                        .getString("movies.dialog.labeltable.actor"));
             } else if (type == TYPE_DIRECTOR) {
-                groupDialogDescription.setText(l.getString("movies.dialog.title.director"));
+                labelDescriptionAdvice.setText(l
+                        .getString("movies.dialog.labeltable.director"));
             } else if (type == TYPE_GENRE) {
-                groupDialogDescription.setText(l.getString("movies.dialog.title.genre"));
+                labelDescriptionAdvice.setText(l
+                        .getString("movies.dialog.labeltable.genre"));
             } else if (type == TYPE_IMAGE) {
-                groupDialogDescription.setText(l.getString("movies.dialog.title.image"));
+                labelDescriptionAdvice.setText(l
+                        .getString("movies.dialog.labeltable.image"));
             }
-            
 
-            GridData groupForm1LData = new GridData();
-            groupForm1LData.widthHint = 300;
-            groupForm1LData.heightHint = 200;
-            groupDialogDescription.setLayoutData(groupForm1LData);
+            table1 = new Table(groupDialogDescription, SWT.SINGLE
+                    | SWT.FULL_SELECTION);
+            GridData table1LData = new GridData();
+            table1LData.horizontalAlignment = GridData.FILL;
+            table1LData.horizontalSpan = 5;
+            table1LData.grabExcessHorizontalSpace = true;
+            table1LData.verticalAlignment = GridData.FILL;
+            table1LData.grabExcessVerticalSpace = true;
+            table1.setLayoutData(table1LData);
+            table1.setLinesVisible(true);
+            table1.setHeaderVisible(true);
+            {
+                TableColumn item = new TableColumn(table1, SWT.CENTER);
+                item.setText(l.getString("movies.dialog.column.id"));
+                item.setWidth(0);
+                item.setResizable(false);
+            }
 
-            text1 = new Text(groupDialogDescription, SWT.BORDER);
-            text1.setToolTipText(l.getString("movies.dialog.search.tooltip"));
-      
-            GridData text1LData = new GridData();
-            text1LData.horizontalSpan = 4;
-            text1LData.horizontalAlignment = GridData.FILL;
-            text1LData.grabExcessHorizontalSpace = true;
-            text1.setLayoutData(text1LData);
+            if (type == TYPE_IMAGE) {
+                TableColumn item = new TableColumn(table1, SWT.CENTER);
+                item.setAlignment(SWT.LEFT);
+                item.setWidth(100);
+                item.setText(l.getString("movies.dialog.column.thumb.image"));
+            }
 
             {
-                button1 = new Button(groupDialogDescription, SWT.PUSH
-                        | SWT.CENTER);
-                button1.setText(l.getString("movies.dialog.search.buttonname"));
-                
-                
-                
-                button1.addSelectionListener(new SelectionAdapter() {
-                    public void widgetSelected(SelectionEvent evt) {
-                            refreshList(text1.getText());
-                    }
-                });
+                TableColumn item = new TableColumn(table1, SWT.CENTER);
+                item.setAlignment(SWT.LEFT);
+                item.setWidth(100);
+
+                if (type == TYPE_ACTOR) {
+                    item.setText(l
+                            .getString("movies.dialog.column.lastname.actor"));
+                } else if (type == TYPE_DIRECTOR) {
+                    item
+                            .setText(l
+                                    .getString("movies.dialog.column.lastname.director"));
+                } else if (type == TYPE_GENRE) {
+                    item
+                            .setText(l
+                                    .getString("movies.dialog.column.name.genre"));
+                } else if (type == TYPE_IMAGE) {
+                    item
+                            .setText(l
+                                    .getString("movies.dialog.column.name.image"));
+                }
+
             }
             {
-                labelDescriptionAdvice = new Label(groupDialogDescription,
-                        SWT.NONE);
-                
-                if(type == TYPE_ACTOR){
-                    labelDescriptionAdvice
-                    .setText(l.getString("movies.dialog.labeltable.actor"));
+                TableColumn item = new TableColumn(table1, SWT.CENTER);
+                item.setAlignment(SWT.LEFT);
+                item.setWidth(100);
+                if (type == TYPE_ACTOR) {
+                    item.setText(l
+                            .getString("movies.dialog.column.firstname.actor"));
                 } else if (type == TYPE_DIRECTOR) {
-                    labelDescriptionAdvice
-                    .setText(l.getString("movies.dialog.labeltable.director"));
+                    item
+                            .setText(l
+                                    .getString("movies.dialog.column.firstname.director"));
                 } else if (type == TYPE_GENRE) {
-                    labelDescriptionAdvice
-                    .setText(l.getString("movies.dialog.labeltable.genre"));
+                    item.setText(l
+                            .getString("movies.dialog.column.shortname.genre"));
                 } else if (type == TYPE_IMAGE) {
-                    labelDescriptionAdvice
-                    .setText(l.getString("movies.dialog.labeltable.image"));
+                    item
+                            .setText(l
+                                    .getString("movies.dialog.column.description.image"));
+                    item.setWidth(150);
                 }
-                
-                
-                table1 = new Table(groupDialogDescription, SWT.SINGLE
-                        | SWT.FULL_SELECTION);
-                GridData table1LData = new GridData();
-                table1LData.horizontalAlignment = GridData.FILL;
-                table1LData.horizontalSpan = 5;
-                table1LData.grabExcessHorizontalSpace = true;
-                table1LData.verticalAlignment = GridData.FILL;
-                table1LData.grabExcessVerticalSpace = true;
-                table1.setLayoutData(table1LData);
-                {
-                    TableColumn item = new TableColumn(table1, SWT.CENTER);
-                    item.setText(l.getString("movies.dialog.column.id"));
-                    item.setWidth(0);
-                    item.setResizable(false);
-                }
-                {
-                    TableColumn item = new TableColumn(table1, SWT.CENTER);
-                    item.setAlignment(SWT.LEFT);
-                    item.setWidth(100);
-                    
-                    if(type == TYPE_ACTOR){
-                        item.setText(l.getString("movies.dialog.column.lastname.actor"));
-                    } else if (type == TYPE_DIRECTOR) {
-                        item.setText(l.getString("movies.dialog.column.lastname.director"));
-                    } else if (type == TYPE_GENRE) {
-                        item.setText(l.getString("movies.dialog.column.name.genre"));
-                    } else if (type == TYPE_IMAGE) {
-                        item.setText(l.getString("movies.dialog.column.name.image"));
-                    }
+            }
 
-                }
-                {
-                    TableColumn item = new TableColumn(table1, SWT.CENTER);
-                    item.setAlignment(SWT.LEFT);
-                    item.setWidth(100);
-                    if(type == TYPE_ACTOR){
-                        item.setText(l.getString("movies.dialog.column.firstname.actor"));
-                    } else if (type == TYPE_DIRECTOR) {
-                        item.setText(l.getString("movies.dialog.column.firstname.director"));
-                    } else if (type == TYPE_GENRE) {
-                        item.setText(l.getString("movies.dialog.column.shortname.genre"));
-                    } else if (type == TYPE_IMAGE) {
-                        item.setText(l.getString("movies.dialog.column.description.image"));
-                    }
-                }
+            buttonDescriptionAccept = new Button(groupDialogDescription,
+                    SWT.PUSH | SWT.CENTER);
+            buttonDescriptionAccept.setText(l
+                    .getString("movies.dialog.buttonadd"));
+            GridData buttonDescriptionAcceptLData2 = new GridData();
+            buttonDescriptionAcceptLData2.horizontalSpan = 2;
+            buttonDescriptionAcceptLData2.horizontalAlignment = GridData.FILL;
+            buttonDescriptionAccept
+                    .setLayoutData(buttonDescriptionAcceptLData2);
 
-                buttonDescriptionAccept = new Button(groupDialogDescription,
-                        SWT.PUSH | SWT.CENTER);
-                buttonDescriptionAccept.setText(l.getString("movies.dialog.buttonadd"));
-                GridData buttonDescriptionAcceptLData2 = new GridData();
-                buttonDescriptionAcceptLData2.horizontalSpan = 2;
-                buttonDescriptionAcceptLData2.horizontalAlignment = GridData.FILL;
-                buttonDescriptionAccept
-                        .setLayoutData(buttonDescriptionAcceptLData2);
+            buttonDescriptionAccept
+                    .addSelectionListener(new SelectionAdapter() {
+                        public void widgetSelected(SelectionEvent evt) {
 
-                buttonDescriptionAccept.addSelectionListener(
-                        new SelectionAdapter() {
-                            public void widgetSelected(SelectionEvent evt) {
+                            int[] sel = table1.getSelectionIndices();
+                            for (int i = 0; i < sel.length; i++) {
+                                System.out.println("Auswahl:" + i + " "
+                                        + table1.getItem(sel[i]));
 
-
-                                int[] sel = table1.getSelectionIndices();
-                                for (int i = 0; i < sel.length; i++) {
-                                    System.out.println("Auswahl:" + i + " "
-                                            + table1.getItem(sel[i]));
-
-                                    System.out
-                                            .println("ID: "
-                                                    + table1.getItem(sel[i])
-                                                            .getText(0));
-                                    for (int j = 0; j < valuelist.size(); j++) {
-                                        System.out.println("Listid:"
-                                                + ((Actor) valuelist.get(j))
-                                                        .getActorId() + "");
+                                for (int j = 0; j < valuelist.size(); j++) {
+                                    if (type == TYPE_ACTOR) {
                                         if ((table1.getItem(sel[i]).getText(0))
                                                 .equalsIgnoreCase(((Actor) valuelist
                                                         .get(j)).getActorId()
                                                         + "")) {
-                                            System.out.println("gefunden");
                                             movie.getActors().add(
                                                     (Actor) valuelist.get(j));
+                                            break;
                                         }
+                                    } else if (type == TYPE_DIRECTOR) {
+                                        if ((table1.getItem(sel[i]).getText(0))
+                                                .equalsIgnoreCase(((Director) valuelist
+                                                        .get(j))
+                                                        .getDirectorId()
+                                                        + "")) {
+                                            movie
+                                                    .getDirector()
+                                                    .add(
+                                                            (Director) valuelist
+                                                                    .get(j));
+                                            break;
+                                        }
+                                    } else if (type == TYPE_GENRE) {
+                                        if ((table1.getItem(sel[i]).getText(0))
+                                                .equalsIgnoreCase(((Genre) valuelist
+                                                        .get(j)).getGenreId()
+                                                        + "")) {
+                                            movie.getGenres().add(
+                                                    (Genre) valuelist.get(j));
+                                            break;
+                                        }
+                                    } else if (type == TYPE_IMAGE) {
+                                        if ((table1.getItem(sel[i]).getText(0))
+                                                .equalsIgnoreCase(((Image) valuelist
+                                                        .get(j)).getImageId()
+                                                        + "")) {
+                                            logger
+                                                    .debug("F?ge Bild zum Movie hinzu:"
+                                                            + (Image) valuelist
+                                                                    .get(j));
+                                            movie.getImages().add(
+                                                    (Image) valuelist.get(j));
+                                            break;
+                                        }
                                     }
-                                    table1.remove(sel[i]);
+
                                 }
 
-
+                                table1.remove(sel[i]);
                             }
-                        });
 
-            }
-            {
-                button2 = new Button(groupDialogDescription, SWT.FLAT
-                        | SWT.CENTER);
-                button2.setEnabled(false);
-                button2.setVisible(false);
-            }
+                        }
+                    });
 
-            buttonDescriptionAbort = new Button(groupDialogDescription,
-                    SWT.PUSH | SWT.CENTER);
-            buttonDescriptionAbort.setText(l.getString("movies.dialog.buttonfinish"));
-            GridData buttonDescriptionAbortLData = new GridData();
-            buttonDescriptionAbortLData.horizontalAlignment = GridData.FILL;
-            buttonDescriptionAbortLData.horizontalSpan = 2;
-            buttonDescriptionAbort.setLayoutData(buttonDescriptionAbortLData);
-            buttonDescriptionAbort.addSelectionListener(new SelectionAdapter() {
-                public void widgetSelected(SelectionEvent evt) {
-                    dialogShell.close();
-                }
-            });
+        }
+        {
+            button2 = new Button(groupDialogDescription, SWT.FLAT | SWT.CENTER);
+            button2.setEnabled(false);
+            button2.setVisible(false);
+        }
 
-            dialogShell.layout();
-            dialogShell.pack();
-            dialogShell.open();
-            Display display = dialogShell.getDisplay();
-            while (!dialogShell.isDisposed()) {
-                if (!display.readAndDispatch())
-                    display.sleep();
+        buttonDescriptionAbort = new Button(groupDialogDescription, SWT.PUSH
+                | SWT.CENTER);
+        buttonDescriptionAbort.setText(l
+                .getString("movies.dialog.buttonfinish"));
+        GridData buttonDescriptionAbortLData = new GridData();
+        buttonDescriptionAbortLData.horizontalAlignment = GridData.FILL;
+        buttonDescriptionAbortLData.horizontalSpan = 2;
+        buttonDescriptionAbort.setLayoutData(buttonDescriptionAbortLData);
+        buttonDescriptionAbort.addSelectionListener(new SelectionAdapter() {
+            public void widgetSelected(SelectionEvent evt) {
+                dialogShell.close();
             }
-        } catch (Exception e) {
-            e.printStackTrace();
+        });
+
+        dialogShell.layout();
+        dialogShell.pack();
+        dialogShell.open();
+        Display display = dialogShell.getDisplay();
+        while (!dialogShell.isDisposed()) {
+            if (!display.readAndDispatch())
+                display.sleep();
         }
+
     }
 
     private void refreshList(final String filter) {
         if (table1 == null || table1.isDisposed()) {
-            logger.warn("Konnte DialogMovie List nicht refreshen, da diese null ist!");
+            logger
+                    .warn("Konnte DialogMovie List nicht refreshen, da diese null ist!");
             return;
         }
         table1.removeAll();
-        
-        
-        if (type == TYPE_ACTOR){
-        valuelist = Database.getActorExcept(filter, this.movie.getActors());
-        for (int i = 0; i < valuelist.size(); i++) {
-            Actor o = (Actor) valuelist.get(i);
-            TableItem item = new TableItem(table1, SWT.NONE);
-            item.setText(new String[] { o.getActorId() + "", o.getLastName(),
-                    o.getFirstName() });
-        }
-        } else if (type == TYPE_DIRECTOR){
-            valuelist = Database.getDirectorExcept(filter, this.movie.getDirector());
+        table1.clearAll();
+        if (type == TYPE_ACTOR) {
+            valuelist = Database.getActorExcept(filter, this.movie.getActors());
             for (int i = 0; i < valuelist.size(); i++) {
+                Actor o = (Actor) valuelist.get(i);
+                TableItem item = new TableItem(table1, SWT.NONE);
+                item.setText(new String[] { o.getActorId() + "",
+                        o.getLastName(), o.getFirstName() });
+            }
+        } else if (type == TYPE_DIRECTOR) {
+            valuelist = Database.getDirectorExcept(filter, this.movie
+                    .getDirector());
+            for (int i = 0; i < valuelist.size(); i++) {
                 Director o = (Director) valuelist.get(i);
                 TableItem item = new TableItem(table1, SWT.NONE);
-                item.setText(new String[] { o.getDirectorId() + "", o.getLastName(),
-                        o.getFirstName() });
+                item.setText(new String[] { o.getDirectorId() + "",
+                        o.getLastName(), o.getFirstName() });
             }
-        } else if (type == TYPE_GENRE){
+        } else if (type == TYPE_GENRE) {
             valuelist = Database.getGenreExcept(filter, this.movie.getGenres());
             for (int i = 0; i < valuelist.size(); i++) {
                 Genre o = (Genre) valuelist.get(i);
                 TableItem item = new TableItem(table1, SWT.NONE);
                 item.setText(new String[] { o.getGenreId() + "", o.getName(),
                         o.getShortname() });
-            }            
-        } else if (type == TYPE_IMAGE){            
-            valuelist = Database.getImagesExcept(filter, this.movie.getImages());
+            }
+        } else if (type == TYPE_IMAGE) {
+            valuelist = Database
+                    .getImagesExcept(filter, this.movie.getImages());
             for (int i = 0; i < valuelist.size(); i++) {
                 Image o = (Image) valuelist.get(i);
                 TableItem item = new TableItem(table1, SWT.NONE);
 
-                
                 //Scale the image
                 int maxheight = 75;
                 int maxwidth = 75;
 
-                final org.eclipse.swt.graphics.Image image = new org.eclipse.swt.graphics.Image(shell.getDisplay(),new ByteArrayInputStream(o.getImageFile()));
+                final org.eclipse.swt.graphics.Image image = new org.eclipse.swt.graphics.Image(
+                        shell.getDisplay(), new ByteArrayInputStream(o
+                                .getImageFile()));
                 final int width = image.getBounds().width;
                 final int height = image.getBounds().height;
                 float scalefactor = 1;
-                
+
                 if (width > maxwidth) {
-                    scalefactor = (float)maxwidth/width;
+                    scalefactor = (float) maxwidth / width;
                 }
                 if (height > maxheight) {
-                    if ( ((float)maxheight/height)< scalefactor ){
-                        scalefactor = ((float)maxheight/height);
+                    if (((float) maxheight / height) < scalefactor) {
+                        scalefactor = ((float) maxheight / height);
                     }
-                    
+
                 }
-                
-                final org.eclipse.swt.graphics.Image scaledtemp = new org.eclipse.swt.graphics.Image(shell.getDisplay(),
-                        image.getImageData().scaledTo((int)(width*scalefactor),(int)(height*scalefactor)));
-                
-                item.setImage(1,scaledtemp);
-                item.setText(new String[] { o.getImageId() + "", o.getImageFileName(),
-                        o.getImageFileDescription() });                
-                
+
+                final org.eclipse.swt.graphics.Image scaledtemp = new org.eclipse.swt.graphics.Image(
+                        shell.getDisplay(), image.getImageData().scaledTo(
+                                (int) (width * scalefactor),
+                                (int) (height * scalefactor)));
+
+                item.setImage(1, scaledtemp);
+                item.setText(new String[] { o.getImageId() + "", "",
+                        o.getImageFileName(), o.getImageFileDescription() });
+
                 //image.dispose();
                 //scaledtemp.dispose();
-                
-                
-                
-            }            
+
+            }
         }
-        
-        
+
     }
 }
\ No newline at end of file

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/movies.properties
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/movies.properties	2004-11-23 23:01:17 UTC (rev 157)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/movies.properties	2004-11-23 23:35:57 UTC (rev 158)
@@ -71,8 +71,8 @@
 movies.dialog.column.shortname.genre=Kurzname
 movies.dialog.column.name.image=Name
 movies.dialog.column.description.image=Beschreibung
+movies.dialog.column.thumb.image=Vorschau
 
-
 movies.dialog.labeltable.actor=W?hlen Sie einen Schaupieler:
 movies.dialog.labeltable.genre=W?hlen Sie ein Genre:
 movies.dialog.labeltable.image=W?hlen Sie ein Bild:



From sforstner at sheep.berlios.de  Wed Nov 24 03:13:28 2004
From: sforstner at sheep.berlios.de (Stefan at BerliOS)
Date: Wed, 24 Nov 2004 03:13:28 +0100
Subject: [Provirent-svn-commit] r159 - in project_src/provirent_hibernate/src: de/hsharz/provirent de/hsharz/provirent/management/gui de/hsharz/provirent/management/gui/language de/hsharz/provirent/objects de/hsharz/provirent/persistence test/provirent/hibernate
Message-ID: <200411240213.iAO2DSMd032545@sheep.berlios.de>

Author: sforstner
Date: 2004-11-24 03:13:27 +0100 (Wed, 24 Nov 2004)
New Revision: 159

Added:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositePayment.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/payment.properties
   project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Payment.hbm.xml
   project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Payment.java
   project_src/provirent_hibernate/src/test/provirent/hibernate/TestPayment.java
Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/Util.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeFormate.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/main.properties
   project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java
Log:
composite payment erstellt
testklasse erstellt
zugriff auf datenbank funzt noch nich -> exception

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/Util.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/Util.java	2004-11-23 23:35:57 UTC (rev 158)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/Util.java	2004-11-24 02:13:27 UTC (rev 159)
@@ -34,7 +34,10 @@
 
 import java.io.UnsupportedEncodingException;
 import java.security.MessageDigest;
+import java.util.Calendar;
 import java.util.Properties;
+import java.util.StringTokenizer;
+import java.util.Vector;
 
 import javax.mail.Address;
 import javax.mail.Message;
@@ -46,6 +49,8 @@
 
 import org.apache.log4j.Logger;
 
+import de.hsharz.provirent.persistence.DataBaseException;
+
 /**
  * @author Philipp Schneider
  *  
@@ -120,4 +125,28 @@
         Util h = new Util();
 
     }
+
+    /**
+     * @param text
+     * @return
+     */
+    public static Calendar getDateByText(String textdate) throws DataBaseException {
+        StringTokenizer tokenizer = new StringTokenizer(textdate, ".");
+        Vector vec = new Vector();
+        while (tokenizer.hasMoreTokens()) {
+           vec.add(tokenizer.nextToken());
+        }
+        
+        if (vec.size() != 3) {
+            return null;     
+        } else {
+            String days = (String) vec.get(0);
+            String months = (String) vec.get(1);
+            String years = (String) vec.get(2);
+            Calendar date = Calendar.getInstance();
+            date.set(Integer.parseInt(years), Integer.parseInt(months), 
+                     Integer.parseInt(days));
+            return date;
+        }
+    }
 }
\ No newline at end of file

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeFormate.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeFormate.java	2004-11-23 23:35:57 UTC (rev 158)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeFormate.java	2004-11-24 02:13:27 UTC (rev 159)
@@ -32,8 +32,6 @@
 import org.eclipse.swt.widgets.Text;
 
 import de.hsharz.provirent.objects.AudioFormat;
-import de.hsharz.provirent.objects.AudioFormat;
-import de.hsharz.provirent.objects.AudioFormat;
 import de.hsharz.provirent.objects.VideoFormat;
 import de.hsharz.provirent.persistence.DataBaseException;
 import de.hsharz.provirent.persistence.Database;

Added: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositePayment.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositePayment.java	2004-11-23 23:35:57 UTC (rev 158)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositePayment.java	2004-11-24 02:13:27 UTC (rev 159)
@@ -0,0 +1,1031 @@
+package de.hsharz.provirent.management.gui;
+
+import java.text.MessageFormat;
+import java.util.Locale;
+import java.util.PropertyResourceBundle;
+import java.util.ResourceBundle;
+
+import org.apache.log4j.Logger;
+import org.eclipse.swt.SWT;
+import org.eclipse.swt.custom.SashForm;
+import org.eclipse.swt.events.FocusAdapter;
+import org.eclipse.swt.events.FocusEvent;
+import org.eclipse.swt.events.SelectionAdapter;
+import org.eclipse.swt.events.SelectionEvent;
+import org.eclipse.swt.layout.FormAttachment;
+import org.eclipse.swt.layout.FormData;
+import org.eclipse.swt.layout.FormLayout;
+import org.eclipse.swt.layout.GridData;
+import org.eclipse.swt.layout.GridLayout;
+import org.eclipse.swt.widgets.Button;
+import org.eclipse.swt.widgets.Composite;
+import org.eclipse.swt.widgets.Display;
+import org.eclipse.swt.widgets.Event;
+import org.eclipse.swt.widgets.Group;
+import org.eclipse.swt.widgets.Label;
+import org.eclipse.swt.widgets.Listener;
+import org.eclipse.swt.widgets.Shell;
+import org.eclipse.swt.widgets.Table;
+import org.eclipse.swt.widgets.TableColumn;
+import org.eclipse.swt.widgets.TableItem;
+import org.eclipse.swt.widgets.Text;
+
+import com.cloudgarden.resource.SWTResourceManager;
+
+import de.hsharz.provirent.Util;
+import de.hsharz.provirent.objects.Payment;
+import de.hsharz.provirent.persistence.DataBaseException;
+import de.hsharz.provirent.persistence.Database;
+/**
+* This code was generated using CloudGarden's Jigloo
+* SWT/Swing GUI Builder, which is free for non-commercial
+* use. If Jigloo is being used commercially (ie, by a corporation,
+* company or business for any purpose whatever) then you
+* should purchase a license for each developer using Jigloo.
+* Please visit www.cloudgarden.com for details.
+* Use of Jigloo implies acceptance of these licensing terms.
+* *************************************
+* A COMMERCIAL LICENSE HAS NOT BEEN PURCHASED
+* for this machine, so Jigloo or this code cannot be used legally
+* for any corporate or commercial purpose.
+* *************************************
+*/
+public class CompositePayment extends AbstractComposite{
+
+    {
+        //Register as a resource user - SWTResourceManager will
+        //handle the obtaining and disposing of resources
+        SWTResourceManager.registerResourceUser(this);
+    }
+
+
+    /**
+     * Logger for this class
+     */
+    private static final Logger logger = Logger
+            .getLogger(CompositePayment.class);
+    
+    
+    private final static int MODE_VIEW = 0;
+
+    private final static int MODE_ADD = 1;
+    
+    private SashForm sashForm1;
+    private SashForm sashFormPayment;
+    
+    private Composite parent;
+    private Composite compositeButtons;
+
+    private Group groupPayment;
+
+    private Group groupPaymentOverview;
+
+    private Group groupPaymentDetail;
+
+    private Label labelPaymentId;   
+    private Label labelPaymentName;
+    private Label labelduration1;
+    private Label labelduration2;
+    private Label labelduration3;
+    private Label labelstartdate;
+    
+    private Text textPaymentID;
+    private Text textPaymentName;
+    private Text textduration1;
+    private Text textduration2;
+    private Text textduration3;
+    private Text textstartdate;
+    
+    private Text textPaymentSearch;
+    private Label labelPaymentSearch;
+    
+    private Button buttonPaymentCancel;
+    private Button buttonPaymentSave;
+    private Button buttonPaymentFill;
+    private Button buttonPaymentDelete;
+    private Button buttonPaymentEdit;
+    private Button buttonPaymentNew;
+           
+    private Table tablePayment;
+    private TableColumn tableColumn;
+
+    
+
+    private final static int MODE_EDIT = 2;
+    
+    private StatusLineStyledText statusLine;
+
+    private ResourceBundle l;
+    
+    protected int mode_Payment;
+ 
+    /*
+     * ?ndert die Sprache aller Elemente
+     * 
+     * @see de.hsharz.provirent.managment.gui.AbstractComposite#changeLanguage(java.util.Locale)
+     */
+    public void changeLanguage(Locale locale) {
+
+    }
+
+    /* 
+     * Init die Sprache (properties Datei)
+     * @see de.hsharz.provirent.managment.gui.AbstractComposite#initLanguage(java.util.Locale)
+     */
+    public void initLanguage(Locale locale) {
+
+        l = PropertyResourceBundle.getBundle(
+                "de.hsharz.provirent.management.gui.language.payment", locale);
+
+    }
+    
+    
+	/**
+	* Auto-generated main method to display this 
+	* org.eclipse.swt.widgets.Composite inside a new Shell.
+	*/
+	public static void main(String[] args) {
+		showGUI();
+	}
+		
+	/**
+	* Auto-generated method to display this 
+	* org.eclipse.swt.widgets.Composite inside a new Shell.
+	*/
+	public static void showGUI() {
+		Display display = Display.getDefault();
+		Shell shell = new Shell(display);
+
+		shell.open();
+		while (!shell.isDisposed()) {
+			if (!display.readAndDispatch())
+				display.sleep();
+		}
+	}
+
+	public CompositePayment(Composite p, int style,
+            StatusLineStyledText status, Locale l) {
+	    super(p, style, status, l);
+        parent = p;
+        //Statusline wird gestzt
+        statusLine = status;
+        
+        //sprache wird init
+        initLanguage(l);
+	    
+	    
+		initGUI();
+	}
+
+	private void initGUI() {
+	    if (logger.isDebugEnabled()) {
+            logger.debug("initGUI() - start");
+        }
+
+        this.setLayout(new GridLayout());
+        this.setSize(816, 540);
+        {
+            sashForm1 = new SashForm(this, SWT.VERTICAL | SWT.V_SCROLL);
+            GridData sashForm1LData1 = new GridData();
+            sashForm1LData1.grabExcessHorizontalSpace = true;
+            sashForm1LData1.horizontalAlignment = GridData.FILL;
+            sashForm1LData1.grabExcessVerticalSpace = true;
+            sashForm1LData1.verticalAlignment = GridData.FILL;
+            sashForm1.setLayoutData(sashForm1LData1);
+
+            initPaymentGroup();
+            refreshPaymentTable(textPaymentSearch.getText());
+
+        }
+        this.layout();
+
+        if (logger.isDebugEnabled()) {
+            logger.debug("initGUI() - end");
+        }
+    } 
+	
+	/**
+     * 
+     */
+    private void initPaymentGroup() {
+        {
+            //init a group for the Payment
+            groupPayment = new Group(sashForm1, SWT.NONE);
+            GridLayout group2Layout = new GridLayout();
+            group2Layout.makeColumnsEqualWidth = true;
+            groupPayment.setText(l.getString("Payment.group.label"));
+            groupPayment.setSize(758, 284);
+            FormData group2LData = new FormData();
+            groupPayment.addFocusListener(new FocusAdapter() {
+                public void focusLost(FocusEvent evt) {
+                    System.out.println("groupPayment.focusLost, event="
+                        + evt);
+                    buttonPaymentCancel.setEnabled(false);
+                    buttonPaymentDelete.setEnabled(false);
+                    buttonPaymentEdit.setEnabled(false);
+                    buttonPaymentNew.setEnabled(false);
+                    buttonPaymentSave.setEnabled(false);
+                }
+            });
+            groupPayment.setLayout(group2Layout);
+            groupPayment.setLayoutData(group2LData);
+            {
+                sashFormPayment = new SashForm(groupPayment, SWT.NONE);
+                FormLayout sashForm2Layout = new FormLayout();
+                sashFormPayment.setSize(748, 300);
+                GridData sashForm2LData = new GridData();
+                sashFormPayment.setLayout(sashForm2Layout);
+                sashForm2LData.verticalAlignment = GridData.FILL;
+                sashForm2LData.horizontalAlignment = GridData.FILL;
+                sashForm2LData.grabExcessHorizontalSpace = true;
+                sashForm2LData.grabExcessVerticalSpace = true;
+                sashFormPayment.setLayoutData(sashForm2LData);
+
+                //init die Gruppe f?r Paymente ?berblick
+                initPaymentGroupOverview();
+                //init die Detailansicht
+                initPaymentGroupDetail();
+
+            }
+        }
+
+	}
+
+    /**
+     * 
+     */
+    private void initPaymentGroupDetail() {
+        groupPaymentDetail = new Group(sashFormPayment, SWT.NONE);
+        GridLayout groupPaymentDetailLayout = new GridLayout();
+        groupPaymentDetailLayout.marginHeight = 25;
+        groupPaymentDetailLayout.numColumns = 6;
+        groupPaymentDetailLayout.verticalSpacing = 15;
+        groupPaymentDetail.setText(l
+                .getString("Payment.groupdetail.label"));
+        FormData formData = new FormData();
+        groupPaymentDetail.setLayout(groupPaymentDetailLayout);
+        formData.right = new FormAttachment(100, 100, -5);
+        formData.top = new FormAttachment(0, 100, 5);
+        formData.bottom = new FormAttachment(100, 100, -5);
+        groupPaymentDetail.setLayoutData(formData);
+        {
+            labelPaymentId = new Label(groupPaymentDetail, SWT.NONE);
+            labelPaymentId.setText(l
+                    .getString("Payment.groupdetail.idlabel")
+                    + ":");
+            labelPaymentId.setSize(125, 15);
+            GridData formData2 = new GridData();
+            formData2.widthHint = 125;
+            formData2.heightHint = 15;
+            formData2.horizontalSpan = 2;
+            labelPaymentId.setLayoutData(formData2);
+        }        
+        {
+            textPaymentID = new Text(groupPaymentDetail, SWT.READ_ONLY
+                    | SWT.BORDER);
+            GridData text1LData1 = new GridData();
+            text1LData1.horizontalAlignment = GridData.FILL;
+            text1LData1.heightHint = 13;
+            text1LData1.horizontalSpan = 4;
+            text1LData1.grabExcessHorizontalSpace = true;
+            textPaymentID.setLayoutData(text1LData1);
+        }
+        {
+            labelPaymentName = new Label(groupPaymentDetail, SWT.NONE);
+            labelPaymentName.setText(l
+                    .getString("Payment.groupdetail.namelabel")
+                    + ":");
+            labelPaymentName.setSize(125, 15);
+            GridData formData2 = new GridData();
+            formData2.widthHint = 125;
+            formData2.heightHint = 15;
+            formData2.horizontalSpan = 2;
+            labelPaymentName.setLayoutData(formData2);
+        }
+        {
+            textPaymentName = new Text(groupPaymentDetail, SWT.READ_ONLY
+                    | SWT.BORDER);
+            GridData text1LData1 = new GridData();
+            text1LData1.horizontalAlignment = GridData.FILL;
+            text1LData1.heightHint = 13;
+            text1LData1.horizontalSpan = 4;
+            text1LData1.grabExcessHorizontalSpace = true;
+            textPaymentName.setLayoutData(text1LData1);
+        }
+        {
+            labelduration1 = new Label(groupPaymentDetail, SWT.NONE);
+            labelduration1.setText(l
+                    .getString("Payment.groupdetail.duration1label")
+                    + ":");
+            labelduration1.setSize(125, 15);
+            GridData labelduration1LData = new GridData();
+            labelduration1LData.widthHint = 125;
+            labelduration1LData.heightHint = 15;
+            labelduration1LData.horizontalSpan = 2;
+            labelduration1.setLayoutData(labelduration1LData);
+        }
+        {
+            textduration1 = new Text(groupPaymentDetail,
+                    SWT.READ_ONLY | SWT.BORDER);
+            GridData text1LData2 = new GridData();
+            text1LData2.horizontalAlignment = GridData.FILL;
+            text1LData2.heightHint = 13;
+            text1LData2.horizontalSpan = 4;
+            text1LData2.grabExcessHorizontalSpace = true;
+            textduration1.setLayoutData(text1LData2);
+        }
+        {
+            labelduration2 = new Label(groupPaymentDetail,
+                    SWT.NONE);
+            labelduration2.setText(l
+                    .getString("Payment.groupdetail.duration2label")
+                    + ":");
+            labelduration2.setSize(125, 15);
+            GridData label2LData1 = new GridData();
+            label2LData1.widthHint = 125;
+            label2LData1.heightHint = 15;
+            label2LData1.horizontalSpan = 2;
+            labelduration2.setLayoutData(label2LData1);
+        }
+        {
+            textduration2 = new Text(groupPaymentDetail,
+                    SWT.READ_ONLY | SWT.BORDER);
+            GridData text1LData3 = new GridData();
+            text1LData3.horizontalAlignment = GridData.FILL;
+            text1LData3.heightHint = 13;
+            text1LData3.horizontalSpan = 4;
+            text1LData3.grabExcessHorizontalSpace = true;
+            textduration2.setLayoutData(text1LData3);
+        }
+        {
+            labelduration3 = new Label(groupPaymentDetail,
+                    SWT.NONE);
+            labelduration3.setText(l
+                    .getString("Payment.groupdetail.duration3label")
+                    + ":");
+            labelduration3.setSize(125, 15);
+            GridData label1LData1 = new GridData();
+            label1LData1.widthHint = 125;
+            label1LData1.heightHint = 15;
+            label1LData1.horizontalSpan = 2;
+            labelduration3.setLayoutData(label1LData1);
+        }
+        {
+            textduration3 = new Text(groupPaymentDetail,
+                    SWT.READ_ONLY | SWT.BORDER);
+            GridData text1LData3 = new GridData();
+            text1LData3.horizontalAlignment = GridData.FILL;
+            text1LData3.heightHint = 13;
+            text1LData3.horizontalSpan = 4;
+            text1LData3.grabExcessHorizontalSpace = true;
+            textduration3.setLayoutData(text1LData3);
+        }
+        {
+            labelstartdate = new Label(groupPaymentDetail,
+                    SWT.NONE);
+            labelstartdate.setText(l
+                    .getString("Payment.groupdetail.startdatelabel")
+                    + ":");
+            labelstartdate.setSize(125, 15);
+            GridData label1LData1 = new GridData();
+            label1LData1.widthHint = 125;
+            label1LData1.heightHint = 15;
+            label1LData1.horizontalSpan = 2;
+            labelstartdate.setLayoutData(label1LData1);
+        }
+        {
+            textstartdate = new Text(groupPaymentDetail,
+                    SWT.READ_ONLY | SWT.BORDER);
+            GridData text1LData3 = new GridData();
+            text1LData3.horizontalAlignment = GridData.FILL;
+            text1LData3.heightHint = 13;
+            text1LData3.horizontalSpan = 4;
+            text1LData3.grabExcessHorizontalSpace = true;
+            textstartdate.setLayoutData(text1LData3);
+        }
+        {
+
+            //die Buttons bekommen ein eigenes Composite
+            compositeButtons = new Composite(groupPaymentDetail, SWT.EMBEDDED);
+            GridLayout composite2Layout = new GridLayout();
+            composite2Layout.numColumns = 6;
+            GridData composite2LData = new GridData();
+            compositeButtons.setLayout(composite2Layout);
+            composite2LData.verticalAlignment = GridData.END;
+            composite2LData.horizontalAlignment = GridData.CENTER;
+            composite2LData.widthHint = 391;
+            composite2LData.horizontalSpan = 6;
+            composite2LData.grabExcessHorizontalSpace = true;
+            composite2LData.grabExcessVerticalSpace = true;
+            composite2LData.heightHint = 35;
+            compositeButtons.setLayoutData(composite2LData);
+
+            //init all the Buttons
+            initPaymentDetailButtons();
+
+        }
+
+        
+    }
+
+    /**
+     * 
+     */
+    private void initPaymentDetailButtons() {
+        buttonPaymentNew = new Button(compositeButtons, SWT.PUSH | SWT.CENTER);
+        buttonPaymentNew.setText(l.getString("button.new"));
+        buttonPaymentNew.addSelectionListener(new SelectionAdapter() {
+            
+
+            public void widgetSelected(SelectionEvent evt) {
+
+                textPaymentID.setText("");
+                textPaymentName.setText("");
+                textduration1.setText("");
+                textduration2.setText("");
+                textduration3.setText("");
+                textstartdate.setText("");
+
+                textPaymentName.setEditable(true);
+                textduration1.setEditable(true);
+                textduration2.setEditable(true);
+                textduration3.setEditable(true);
+                textstartdate.setEditable(true);
+                
+                buttonPaymentCancel.setEnabled(true);
+                buttonPaymentSave.setEnabled(true);
+                buttonPaymentNew.setEnabled(false);
+                buttonPaymentEdit.setEnabled(false);
+                buttonPaymentDelete.setEnabled(false);
+                
+                textPaymentSearch.setEditable(false);
+                tablePayment.setEnabled(false);
+
+                mode_Payment = ManagementGui.MODE_ADD;
+
+            }
+        });
+
+        buttonPaymentEdit = new Button(compositeButtons, SWT.PUSH | SWT.CENTER);
+        buttonPaymentEdit.setText(l.getString("button.edit"));
+        buttonPaymentEdit.setEnabled(false);
+        buttonPaymentEdit.addSelectionListener(new SelectionAdapter() {
+            public void widgetSelected(SelectionEvent evt) {
+
+                mode_Payment = ManagementGui.MODE_EDIT;
+
+                textPaymentID.setEditable(false);
+                textPaymentName.setEditable(true);
+                textduration1.setEditable(true);
+                textduration2.setEditable(true);                
+                textduration3.setEditable(true);
+                textstartdate.setEditable(true);
+                
+                textduration1.setFocus();
+                
+                buttonPaymentCancel.setEnabled(true);
+                buttonPaymentSave.setEnabled(true);
+                buttonPaymentNew.setEnabled(false);
+                buttonPaymentEdit.setEnabled(false);
+                buttonPaymentDelete.setEnabled(false);
+
+
+                tablePayment.setEnabled(false);
+                textPaymentSearch.setEnabled(false);
+                
+
+            }
+        });
+
+        buttonPaymentDelete = new Button(compositeButtons, SWT.PUSH | SWT.CENTER);
+        buttonPaymentDelete.setText(l.getString("button.delete"));
+        buttonPaymentDelete.setEnabled(false);
+        buttonPaymentDelete.addSelectionListener(new SelectionAdapter() {
+            public void widgetSelected(SelectionEvent evt) {
+                System.out
+                        .println("buttonPaymentDelete.widgetSelected, event="
+                                + evt);
+                
+                
+               String msg = MessageFormat.format(
+                       l.getString("Payment.groupdetail.deletebutton.question.text"),
+                               new Object[]{textPaymentName.getText() + " " + 
+                               				textduration1.getText() + " " + 
+                               				textduration2.getText() + " " + 
+                               				textduration3.getText() + " " +
+                               				textstartdate.getText()});
+                
+               int question = showMsg(msg,
+                       l.getString("Payment.groupdetail.deletebutton.question.header"), 
+                       SWT.ICON_QUESTION | SWT.YES | SWT.NO);
+               
+               if (question != SWT.YES){
+                   return;
+               }
+                try {
+	                Payment o = new Payment();
+	                o.setPaymentId(new Integer(Integer.parseInt(textPaymentID.getText())));
+	                o.setName(textPaymentName.getText());
+	                o.setDuration1(Float.parseFloat(textduration1.getText()));
+	                o.setDuration2(Float.parseFloat(textduration2.getText()));
+	                o.setDuration3(Float.parseFloat(textduration3.getText()));                
+	                o.setStartdate(Util.getDateByText(textstartdate.getText()));
+
+                    //object speichern
+                    // Fehlerbehandlung
+                    Database.deleteObject(o);
+
+                    //?bersichtsTabelle aktualisieren
+                    refreshPaymentTable(textPaymentSearch.getText());
+                    
+                    //Detailansicht leeren
+                    textPaymentID.setText("");
+                    textPaymentName.setText("");
+                    textduration1.setText("");
+                    textduration2.setText("");
+                    textduration3.setText("");
+                    textstartdate.setText("");
+                    //in Tabelle n?chsten ausw?hlen
+                    try {
+                        tablePayment.select(0);
+                    } catch (Exception ex) {}
+                    
+                    //Statusline Nachricht sezten
+                    statusLine.setStatus(1,l.getString("Payment.groupdetail.deletebutton.newok"));
+
+                } catch (DataBaseException e) {
+                    if (e.getMessage().equalsIgnoreCase("1")) {
+                        //Fehler beim Speichern des Objectes
+
+                        statusLine.setStatus(3,l.getString("Payment.groupdetail.deletebutton.errorsave"));
+                        showMsg(l.getString("Payment.groupdetail.deletebutton.errorsave"),
+                                l.getString("error"), SWT.ICON_ERROR | SWT.OK);
+                        
+                    } else if (e.getMessage().equalsIgnoreCase("2")) {
+                        //fehler beim db aufbau
+                        statusLine.setStatus(3,l.getString("Payment.groupdetail.deletebutton.errordb"));
+                        showMsg(l.getString("Payment.groupdetail.deletebutton.errordb"),
+                                l.getString("error"), SWT.ICON_ERROR | SWT.OK);
+                        
+                    } else {
+                        //@todo
+                        e.printStackTrace();
+                    }
+                    
+                }                
+                
+
+                }
+
+            }
+        );
+
+        //leerer nicht sichtbarer Button
+        buttonPaymentFill = new Button(compositeButtons, SWT.PUSH | SWT.CENTER);
+        GridData buttonPaymentFillLData = new GridData();
+        buttonPaymentFill.setVisible(false);
+        buttonPaymentFill.setEnabled(false);
+        buttonPaymentFillLData.widthHint = 30;
+        buttonPaymentFillLData.heightHint = 23;
+        buttonPaymentFill.setLayoutData(buttonPaymentFillLData);
+
+        buttonPaymentSave = new Button(compositeButtons, SWT.PUSH | SWT.CENTER);
+        buttonPaymentSave.setText(l.getString("button.save"));
+        buttonPaymentSave.setEnabled(false);
+        buttonPaymentSave.addSelectionListener(new SelectionAdapter() {
+            public void widgetSelected(SelectionEvent evt) {
+                System.out
+                        .println("buttonPaymentSave.widgetSelected, event="
+                                + evt);
+
+                
+                //testen ob duration leer ist
+                if (   textPaymentName.getText().trim().equalsIgnoreCase("") ||
+                       textduration1.getText().trim().equalsIgnoreCase("") || 
+                       textduration2.getText().trim().equalsIgnoreCase("") || 
+                       textduration3.getText().trim().equalsIgnoreCase("") ||
+                       textstartdate.getText().trim().equalsIgnoreCase("")) {
+                    
+                    showMsg(l.getString("Payment.groupdetail.savebutton.warn.noname.msg"),
+                            l.getString("Payment.groupdetail.savebutton.warn.noname.title"),
+                            SWT.ICON_WARNING | SWT.YES);
+
+                    	return;
+                }
+                
+                //testen welcher mode
+                
+                if (mode_Payment == ManagementGui.MODE_ADD) {
+                    
+                    /**
+                     * @todo eine Exception bekommen wieder leider NOCH nicht mit
+                     * d.h. es muss noch ein r?ckgabewert kommen oder eine Exception 
+                     * ?bermitteln werden (aus der DB Klasse)
+                     */
+	                    
+                    try {	
+                    	//neues Objekt erzeugen
+	                    Payment tmp = new Payment(textPaymentName.getText(), 
+                            			Float.parseFloat(textduration1.getText()),
+                            			Float.parseFloat(textduration2.getText()), 
+                            			Float.parseFloat(textduration3.getText()),
+                            			Util.getDateByText(textstartdate.getText()));
+                    
+                    
+                        //object speichern
+                        // Fehlerbehandlung
+                        Object o = Database.saveObject(
+                                new Payment(textPaymentName.getText(), 
+                                        Float.parseFloat(textduration1.getText()),
+                                        Float.parseFloat(textduration2.getText()), 
+                                        Float.parseFloat(textduration3.getText()),
+                                        Util.getDateByText(textstartdate.getText())));
+                        
+                        // in ?bersichtstabelle einf?gen
+                        insertIntoPaymentTable((Payment)o);
+                        textPaymentID.setText( ((Payment)o).getPaymentId()+"" );
+                        
+                        
+                        //Statusline Nachricht sezten
+                        statusLine.setStatus(1,l.getString("Payment.groupdetail.savebutton.newok"));
+
+                    } catch (DataBaseException e) {
+                        if (e.getMessage().equalsIgnoreCase("1")) {
+                            //Fehler beim Speichern des Objectes
+
+                            statusLine.setStatus(3,l.getString("Payment.groupdetail.savebutton.errorsave"));
+                            showMsg(l.getString("Payment.groupdetail.savebutton.errorsave"),"Fehler", SWT.ICON_ERROR | SWT.OK);
+                            
+                        } else if (e.getMessage().equalsIgnoreCase("2")) {
+                            //fehler beim db aufbau
+                            statusLine.setStatus(3,l.getString("Payment.groupdetail.savebutton.errordb"));
+                            showMsg(l.getString("Payment.groupdetail.savebutton.errordb"),"Fehler", SWT.ICON_ERROR | SWT.OK);
+                            
+                        } else {
+                            //@todo
+                            e.printStackTrace();
+                        }
+                        
+                    }
+                    
+                    
+                    //alle Buttons auf aktiv setzen
+                    setPaymentGroupButtonSaveCancel();
+                    
+                } else if (mode_Payment == ManagementGui.MODE_EDIT) {
+                    try {
+	                    Payment tmp = new Payment(textPaymentName.getText(), 
+	                            Float.parseFloat(textduration1.getText()),
+	                            Float.parseFloat(textduration2.getText()), 
+	                            Float.parseFloat(textduration3.getText()),
+	                            Util.getDateByText(textstartdate.getText()));
+	                    tmp.setPaymentId(new Integer(Integer.parseInt(textPaymentID.getText())));
+	                
+	                    //object speichern
+	                    // Fehlerbehandlung
+	                    Database.saveObject(tmp);
+	                    //?bersichtstabelle aktualisieren
+	                    refreshPaymentTable(textPaymentSearch.getText());
+	                    
+	                    //Statusline Nachricht sezten
+	                    statusLine.setStatus(1,l.getString("Payment.groupdetail.savebutton.editok"));
+	                   
+	
+	                } catch (DataBaseException e) {
+	                    if (e.getMessage().equalsIgnoreCase("1")) {
+	                        //Fehler beim Speichern des Objectes
+	
+	                        statusLine.setStatus(3,l.getString("Payment.groupdetail.savebutton.errorsave"));
+	                        showMsg(l.getString("Payment.groupdetail.savebutton.errorsave"),"Fehler", SWT.ICON_ERROR | SWT.OK);
+	                        
+	                    } else if (e.getMessage().equalsIgnoreCase("2")) {
+	                        //fehler beim db aufbau
+	                        statusLine.setStatus(3,l.getString("Payment.groupdetail.savebutton.errordb"));
+	                        showMsg(l.getString("Payment.groupdetail.savebutton.errordb"),"Fehler", SWT.ICON_ERROR | SWT.OK);
+	                        
+	                    } else {
+	                        //@todo
+	                        e.printStackTrace();
+	                    }
+                    
+	                }
+                    
+ 
+                    //alle Buttons auf aktiv setzen
+                    setPaymentGroupButtonSaveCancel();
+                    
+                }
+                
+                
+                
+                /**
+                 * @todo Exception werfen, da nur die zwei Modes sein d?rfen
+                 */
+                
+            }
+        });
+
+        buttonPaymentCancel = new Button(compositeButtons, SWT.PUSH | SWT.CENTER);
+        buttonPaymentCancel.setText(l.getString("button.cancel"));
+        buttonPaymentCancel.setEnabled(false);
+        buttonPaymentCancel.addSelectionListener(new SelectionAdapter() {
+            public void widgetSelected(SelectionEvent evt) {
+                System.out
+                        .println("buttonPaymentCancel.widgetSelected, event="
+                                + evt);
+                setPaymentGroupButtonSaveCancel();
+            }
+        });
+       
+    }
+
+    /**
+     * 
+     */
+    protected void setPaymentGroupButtonSaveCancel() {
+        buttonPaymentSave.setEnabled(false);
+        buttonPaymentCancel.setEnabled(false);
+        buttonPaymentEdit.setEnabled(true);
+        buttonPaymentNew.setEnabled(true);
+        buttonPaymentDelete.setEnabled(true);
+        textPaymentName.setEditable(false);
+        textduration1.setEditable(false);
+        textduration2.setEditable(false);
+        textduration3.setEditable(false);
+        textstartdate.setEditable(false);
+        textPaymentSearch.setEditable(true);
+
+        // PaymentTabelle aktivieren
+        tablePayment.setEnabled(true);
+
+        //PaymentSearch aktivieren
+        textPaymentSearch.setEnabled(true);
+        
+    }
+
+    /**
+     * @param Payment
+     */
+    protected void insertIntoPaymentTable(Payment Payment) {
+        TableItem item = new TableItem(tablePayment, SWT.NONE);
+        item.setText(new String[] { Payment.getPaymentId() + "", 
+                					Payment.getName(), 
+                					Double.toString(Payment.getDuration1()),
+                					Double.toString(Payment.getDuration2()), 
+                					Double.toString(Payment.getDuration3()),
+                					Payment.getStartdate().toString()});
+        
+    }
+
+    /**
+     * @param text
+     */
+    protected void refreshPaymentTable(final String filter) {
+        if (tablePayment == null) {
+            System.out
+                    .println("Konnte Paymenttable nicht refreshen, da diese null ist!");
+            return;
+        }
+        System.out.println("Versuche nun PaymentListe zu refreshen. Filter: "
+                + filter);
+        tablePayment.removeAll();
+        TableItem item;
+        java.util.List Paymentlist = Database.getPayment(filter);
+
+        for (int i = 0; i < Paymentlist.size(); i++) {
+
+            Payment o = (Payment) Paymentlist.get(i);
+            item = new TableItem(tablePayment, SWT.NONE);
+            item.setText(new String[] { o.getPaymentId() + "",
+                    					o.getName(),
+                    					Double.toString(o.getDuration1()),
+                    					Double.toString(o.getDuration2()), 
+                    					Double.toString(o.getDuration3()),
+                    					o.getStartdate().toString()});
+
+        }
+
+        
+    }
+
+    /**
+     * 
+     */
+    private void initPaymentGroupOverview() {
+        if (logger.isDebugEnabled()) {
+            logger.debug("initPaymentGroupOverview() - start");
+        }
+
+        groupPaymentOverview = new Group(sashFormPayment, SWT.NONE);
+        GridLayout group5Layout = new GridLayout();
+        group5Layout.numColumns = 8;
+        groupPaymentOverview.setText(l
+                .getString("Payment.groupoverview.label"));
+        FormData group5LData = new FormData();
+        groupPaymentOverview.setLayout(group5Layout);
+        group5LData.left = new FormAttachment(0, 100, 0);
+        group5LData.top = new FormAttachment(0, 100, 0);
+        groupPaymentOverview.setLayoutData(group5LData);
+
+        //Tabelle anzeigen
+        initTablePayment();
+        //Suche darunter anzeigen
+        initPaymentSearch();
+
+        if (logger.isDebugEnabled()) {
+            logger.debug("initPaymentGroupOverview() - end");
+        }
+        
+    }
+
+    /**
+     * 
+     */
+    private void initPaymentSearch() {
+        if (logger.isDebugEnabled()) {
+            logger.debug("initPaymentSearch() - start");
+        }
+
+        //label f?r die Suche
+        labelPaymentSearch = new Label(groupPaymentOverview, SWT.NONE);
+        labelPaymentSearch.setText(l
+                .getString("Payment.groupoverview.searchlabel")
+                + ":");
+        GridData label2LData = new GridData();
+        label2LData.horizontalSpan = 3;
+        labelPaymentSearch.setLayoutData(label2LData);
+
+        //das Suchfeld
+        textPaymentSearch = new Text(groupPaymentOverview, SWT.BORDER);
+        GridData text2LData = new GridData();
+        textPaymentSearch.addFocusListener(new FocusAdapter() {
+            public void focusLost(FocusEvent evt) {
+                if (logger.isDebugEnabled()) {
+                    logger.debug("focusLost(FocusEvent evt = " + evt + " "
+                            + textPaymentSearch.getText() + ") - start");
+                }
+
+                refreshPaymentTable(textPaymentSearch.getText());
+
+                if (logger.isDebugEnabled()) {
+                    logger.debug("focusLost(FocusEvent) - end");
+                }
+            }
+        });
+
+        textPaymentSearch.addListener(SWT.DefaultSelection, new Listener() {
+            public void handleEvent(Event e) {
+                if (logger.isDebugEnabled()) {
+                    logger.debug("handleEvent(Event e = " + e + " "
+                            + textPaymentSearch.getText() + ") - start");
+                }
+
+                refreshPaymentTable(textPaymentSearch.getText());
+
+                if (logger.isDebugEnabled()) {
+                    logger.debug("handleEvent(Event) - end");
+                }
+            }
+        });
+
+        text2LData.horizontalAlignment = GridData.FILL;
+        text2LData.horizontalSpan = 5;
+        text2LData.grabExcessHorizontalSpace = true;
+        textPaymentSearch.setLayoutData(text2LData);
+
+
+
+        if (logger.isDebugEnabled()) {
+            logger.debug("initPaymentSearch() - end");
+        }
+        
+    }
+
+    /**
+     * 
+     */
+    private void initTablePayment() {
+        if (logger.isDebugEnabled()) {
+            logger.debug("initTablePayment() - start");
+        }
+
+        tablePayment = new Table(groupPaymentOverview, SWT.SINGLE
+                | SWT.FULL_SELECTION | SWT.V_SCROLL | SWT.BORDER);
+        tablePayment.setHeaderVisible(true);
+        tablePayment.setLinesVisible(true);
+        GridData table2LData = new GridData();
+        tablePayment.addFocusListener(new FocusAdapter() {
+            public void focusLost(FocusEvent evt) {
+                System.out.println("tablePayment.focusLost, event=" + evt);
+            }
+            public void focusGained(FocusEvent evt) {
+                System.out
+                    .println("tablePayment.focusGained, event=" + evt);
+            }
+        });
+        tablePayment.addSelectionListener(new SelectionAdapter() {
+            public void widgetSelected(SelectionEvent evt) {
+                if (logger.isDebugEnabled()) {
+                    logger.debug("widgetSelected(SelectionEvent evt = "
+                        + evt
+                        + ") - start");
+                }
+
+                int index = tablePayment.getSelectionIndex();
+
+                System.out.println("Table select. id: "
+                    + index
+                    + " TableItem:"
+                    + tablePayment.getItem(index)
+                    + " id: "
+                    + tablePayment.getItem(index).getText(0));
+
+                //es wurde ein Element aus Tabelle ausgewaehlt jetzt muss die
+                //Detailansicht aktualisiert werden
+                refreshPaymentDetail(tablePayment.getItem(index)
+                    .getText(0));
+
+                if (logger.isDebugEnabled()) {
+                    logger.debug("widgetSelected(SelectionEvent) - end");
+                }
+            }
+        });
+        table2LData.verticalAlignment = GridData.FILL;
+        table2LData.horizontalAlignment = GridData.FILL;
+        table2LData.horizontalSpan = 8;
+        table2LData.grabExcessHorizontalSpace = true;
+        table2LData.grabExcessVerticalSpace = true;
+        tablePayment.setLayoutData(table2LData);
+
+        //einzelne Spalten hinzuf?gen
+        tableColumn = new TableColumn(tablePayment, SWT.CENTER);
+        tableColumn.setText(l.getString("Payment.groupoverview.columnid"));
+        tableColumn.setWidth(50);
+        
+        tableColumn = new TableColumn(tablePayment, SWT.CENTER);
+        tableColumn.setText(l.getString("Payment.groupoverview.columnname"));
+        tableColumn.setWidth(50);
+
+        tableColumn = new TableColumn(tablePayment, SWT.CENTER);
+        tableColumn.setText(l.getString("Payment.groupoverview.columnduration1"));
+        tableColumn.setWidth(70);
+
+        tableColumn = new TableColumn(tablePayment, SWT.CENTER);
+        tableColumn.setText(l.getString("Payment.groupoverview.columnduration2"));
+        tableColumn.setWidth(70);
+        
+        tableColumn = new TableColumn(tablePayment, SWT.CENTER);
+        tableColumn.setText(l.getString("Payment.groupoverview.columnduration3"));
+        tableColumn.setWidth(70);
+        tableColumn = new TableColumn(tablePayment, SWT.CENTER);
+        tableColumn.setText(l.getString("Payment.groupoverview.columnstartdate"));
+        tableColumn.setWidth(70);
+
+        if (logger.isDebugEnabled()) {
+            logger.debug("initTablePayment() - end");
+        }
+        
+    }
+
+    /**
+     * @param text
+     */
+    protected void refreshPaymentDetail(final String id) {
+        Payment object;
+        try {
+            //since we only can get a String value from the table, we
+            //need to convert this
+            object = Database.getSinglePayment(Integer.parseInt(id));
+
+            if (object == null) {
+
+                /*
+                 * 
+                 * @TODO Statusbar aktualiseren
+                 */
+                return;
+            }
+        } catch (Exception e) {
+            //id ist keine Zahl
+            return;
+        }
+
+        textPaymentID.setText(object.getPaymentId() + "");
+        textPaymentName.setText(object.getName());
+        textduration1.setText(Double.toString(object.getDuration1()));
+        textduration2.setText(Double.toString(object.getDuration2()));
+        textduration3.setText(Double.toString(object.getDuration3()));
+        textstartdate.setText(object.getStartdate().toString());
+
+        //Buttons zum l?schen und editieren aktivieren
+        buttonPaymentEdit.setEnabled(true);
+        buttonPaymentDelete.setEnabled(true);
+
+        //Mode auf view setzen
+        mode_Payment = ManagementGui.MODE_VIEW;
+        
+    }
+
+	
+
+}

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java	2004-11-23 23:35:57 UTC (rev 158)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java	2004-11-24 02:13:27 UTC (rev 159)
@@ -105,16 +105,16 @@
     private CTabFolder cTabFolderMain;
 
     private CTabItem tabItemFormat;
+    private CTabItem tabItemPayment;
     private CTabItem tabItemActor;
     private CTabItem tabItemDirector;
     private CTabItem tabItemLanguage;
     private CTabItem tabItemGenre;
     private CTabItem tabItemImage;
     private CTabItem tabItemMovie;
-    
-    
-    
-    
+    private CTabItem tabItemStatus;
+    private CTabItem tabStatusLanguage;
+        
     private CompositeFormate compositeFormate;
     private CompositeActors compositeActor;
     private CompositeDirectors compositeDirector;
@@ -122,53 +122,44 @@
     private CompositeLanguage compositeLanguage;
     private CompositeImage compositeImage;
     private CompositeMovie compositeMovie;
+    private CompositePayment compositePayment;
+    private CompositeStatus compositeStatus;   
+
+    private Menu rootMenu;
     
-
+    private Menu fileMenu;
+    private MenuItem fileMenuItem;
+    private MenuItem exitMenuItem;
+    private MenuItem closeFileMenuItem;
+    private MenuItem saveFileMenuItem;
+    private MenuItem newFileMenuItem;
+    private MenuItem openFileMenuItem;  
+    
+    private Menu viewMenu;
+    private MenuItem viewMenuItem;
+    private MenuItem viewDirectorMenuItem;
+    private MenuItem viewVideoFormatMenuItem;
+    private MenuItem viewActorMenuItem;
+    private MenuItem viewGenreMenuItem;
+    private MenuItem viewLanguageMenuItem;
+    private MenuItem viewStatusMenuItem;
+    private MenuItem viewPaymentMenuItem;
+    private MenuItem viewConditionMenuItem;
+    private MenuItem viewMovieMenuItem;
+    private MenuItem viewDvdMenuItem;
+    private MenuItem viewBillMenuItem;
+    private MenuItem viewImageMenuItem;
+    
+    private Menu helpMenu;
     private MenuItem aboutMenuItem;
-
     private MenuItem contentsMenuItem;
-
-    private Menu helpMenu;
-
     private MenuItem helpMenuItem;
 
-    private MenuItem viewDirectorMenuItem;
-    
-    private MenuItem viewVideoFormatMenuItem,viewActorMenuItem,viewGenreMenuItem;
-    private MenuItem viewLanguageMenuItem,viewStatusMenuItem;
-    private MenuItem viewConditionMenuItem,viewMovieMenuItem,viewDvdMenuItem, viewBillMenuItem, viewImageMenuItem;
-    
-
     private Shell shell;
 
     private Display display;
 
-    private Menu viewMenu;
 
-    private MenuItem viewMenuItem;
-
-    private MenuItem exitMenuItem;
-
-    private MenuItem closeFileMenuItem;
-
-    private MenuItem saveFileMenuItem;
-
-    private MenuItem newFileMenuItem;
-
-    private MenuItem openFileMenuItem;
-
-    private Menu fileMenu;
-
-    private MenuItem fileMenuItem;
-
-    private Menu rootMenu;
-
-    private TableColumn tableColumn6;
-
-    private TableColumn tableColumn5;
-
-    private TableColumn tableColumn4;
-
     private StatusLineStyledText statusLine;
 
     private Composite compositeStatusLine;
@@ -177,8 +168,6 @@
 
     private Composite compositeRoot;
 
-    private Text textVideoFormatId;
-
     /**
      * Bundle for multilanguage
      */
@@ -186,12 +175,6 @@
     
     private Locale locale ;
 
-    protected CTabItem tabItemStatus;
-
-    private CompositeStatus compositeStatus;
-
-    private CTabItem tabStatusLanguage;
-
     /**
      * Auto-generated main method to display this
      * org.eclipse.swt.widgets.Composite inside a new Shell.
@@ -489,6 +472,21 @@
             }
         });         
        
+        viewPaymentMenuItem = new MenuItem(viewMenu, SWT.CHECK);
+        viewPaymentMenuItem.setText(l.getString("menu.view.payment"));
+        viewPaymentMenuItem.setSelection(false);
+        viewPaymentMenuItem.addSelectionListener(new SelectionAdapter(){
+            public void widgetSelected(SelectionEvent evt) {
+				if(tabItemPayment == null || tabItemPayment.isDisposed()){
+				    initPaymentTab();
+				    return;   
+				}
+				
+				cTabFolderMain.setSelection(tabItemPayment);
+				viewPaymentMenuItem.setSelection(true);
+				cTabFolderMain.showSelection();
+            }
+        });
         
         viewStatusMenuItem = new MenuItem(viewMenu, SWT.CHECK);
         viewStatusMenuItem.setText(l.getString("menu.view.status"));
@@ -718,7 +716,30 @@
         }
         cTabFolderMain.setSelection(tabItemGenre);
     }
+    
+    private void initPaymentTab() {
+        tabItemPayment = new CTabItem(cTabFolderMain, SWT.NONE);
+        tabItemPayment.setText(l.getString("tab.payment.title"));
+        tabItemPayment.addDisposeListener(new DisposeListener() {
 
+            public void widgetDisposed(DisposeEvent evt) {
+                if(!viewPaymentMenuItem.isDisposed()){
+                    viewPaymentMenuItem.setSelection(false);
+                }
+            }
+            
+        });
+  
+        {
+            compositePayment = new CompositePayment(
+                cTabFolderMain,
+                SWT.NONE, statusLine, locale);
+            
+            tabItemPayment.setControl(compositePayment);
+        }
+        cTabFolderMain.setSelection(tabItemPayment);
+    }
+
     private void initLanguageTab() {
         tabItemLanguage = new CTabItem(cTabFolderMain, SWT.NONE);
         tabItemLanguage.setText(l.getString("tab.language.title"));

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/main.properties
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/main.properties	2004-11-23 23:35:57 UTC (rev 158)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/main.properties	2004-11-24 02:13:27 UTC (rev 159)
@@ -15,6 +15,8 @@
 
 menu.view.director=Regie
 
+menu.view.payment=Preisklassen
+
 menu.view.genre=Genre
 
 menu.view.language=Sprachen
@@ -39,5 +41,6 @@
 tab.language.title=Sprache/Untertitel
 tab.Status.title=Status/Zustand
 tab.movie.title=Filme
+tab.payment.title=Preisklassen
 tab.image.title=Bilder
 status.resizewarn=Fenster kann Mindestgr??e nicht unterschreiten.
\ No newline at end of file

Added: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/payment.properties
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/payment.properties	2004-11-23 23:35:57 UTC (rev 158)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/payment.properties	2004-11-24 02:13:27 UTC (rev 159)
@@ -0,0 +1,40 @@
+
+error=Fehler
+button.new=Neu
+button.edit=Bearbeiten
+button.delete=L?schen
+button.save=Speichern
+button.cancel=Abbruch
+
+Payment.group.label=Preisklassen
+Payment.groupoverview.label=?berblick
+Payment.groupoverview.columnid=Id
+Payment.groupoverview.columnname=Name
+Payment.groupoverview.columnduration1=1 Tag
+Payment.groupoverview.columnduration2=3 Tage
+Payment.groupoverview.columnduration3=7 Tage
+Payment.groupoverview.columnstartdate=Datum
+
+Payment.groupoverview.searchlabel=Suche nach
+Payment.groupdetail.label=Detail
+Payment.groupdetail.idlabel=Preisklasse ID
+Payment.groupdetail.namelabel=Preisklasse Name
+Payment.groupdetail.duration1label=Preis f?r 1 Tag
+Payment.groupdetail.duration2label=Preis f?r 3 Tage
+Payment.groupdetail.duration3label=Preis f?r 7 Tage
+Payment.groupdetail.startdatelabel=G?ltig ab
+
+
+Payment.groupdetail.savebutton.warn.noname.title=Datensatz speichern
+Payment.groupdetail.savebutton.warn.noname.msg=Der Datensatz kann nicht gespeichert werden. \n Bitte geben Sie einen Namen an
+Payment.groupdetail.savebutton.newok=Speichern der neuen Preisklasse erfolgreich.
+Payment.groupdetail.savebutton.editok=?ndern der Preisklasse erfolgreich.
+
+Payment.groupdetail.savebutton.errorsave=Datenbankfehler beim Speichern.
+Payment.groupdetail.savebutton.errordb=Datenbankfehler beim Herstellen der Verbindung.(save).
+
+Payment.groupdetail.deletebutton.question.header=Wirklich l?schen?
+Payment.groupdetail.deletebutton.question.text=Wollen Sie den Datensatz {0} wirklich l?schen?
+Payment.groupdetail.deletebutton.newok=Datensatz wurde erfolgreich gel?scht.
+Payment.groupdetail.deletebutton.errorsave=Datenbankfehler beim L?schen.
+Payment.groupdetail.deletebutton.errordb=Datenbankfehler beim Herstellen der Verbindung(del).

Added: project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Payment.hbm.xml
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Payment.hbm.xml	2004-11-23 23:35:57 UTC (rev 158)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Payment.hbm.xml	2004-11-24 02:13:27 UTC (rev 159)
@@ -0,0 +1,46 @@
+<?xml version="1.0"?>
+<!DOCTYPE hibernate-mapping
+             PUBLIC "-//Hibernate/Hibernate Mapping DTD 2.0//EN"
+             "http://hibernate.sourceforge.net/hibernate-mapping-2.0.dtd">
+  <hibernate-mapping>
+ 
+   <class name="de.hsharz.provirent.objects.Payment" table="PAYMENT">
+      <meta attribute="class-description">
+        Represents a Payment.
+        @author Stefan Forstner
+      </meta>
+      
+ 			<meta attribute="implement-equals">true</meta>
+			<meta attribute="use-in-equals">true</meta>
+ 			
+      <id name="paymentId" type="int" column="PAYMENTID" length="10">
+        <meta attribute="scope-set">public</meta>
+        <meta attribute="use-in-equals">true</meta>
+        <generator class="sequence">
+			<param name="sequence">payment_id_sequence</param>
+		</generator>
+      </id>
+	  
+	  <property name="name" type="string" not-null="true">
+      	<meta attribute="use-in-tostring">true</meta>
+      </property>
+ 
+      <property name="duration1" type="double" not-null="true">
+
+      </property>
+				
+ 
+      <property name="duration2" type="double" not-null="true">
+
+      </property>
+             
+	  <property name="duration3" type="double" not-null="true">
+
+      </property>
+	  
+	  <property name="startdate" type="calendar">
+      	<meta attribute="use-in-tostring">true</meta>
+      </property>
+	  
+    </class>
+  </hibernate-mapping>

Added: project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Payment.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Payment.java	2004-11-23 23:35:57 UTC (rev 158)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Payment.java	2004-11-24 02:13:27 UTC (rev 159)
@@ -0,0 +1,137 @@
+package de.hsharz.provirent.objects;
+
+import java.io.Serializable;
+import java.util.Calendar;
+import org.apache.commons.lang.builder.EqualsBuilder;
+import org.apache.commons.lang.builder.HashCodeBuilder;
+import org.apache.commons.lang.builder.ToStringBuilder;
+
+
+/** 
+ *         Represents a Payment.
+ *         @author Stefan Forstner
+ *       
+*/
+public class Payment implements Serializable {
+
+    /** identifier field */
+    private Integer paymentId;
+
+    /** persistent field */
+    private String name;
+
+    /** persistent field */
+    private double duration1;
+
+    /** persistent field */
+    private double duration2;
+
+    /** persistent field */
+    private double duration3;
+
+    /** nullable persistent field */
+    private Calendar startdate;
+
+    /** full constructor */
+    public Payment(String name, double duration1, double duration2, double duration3, Calendar startdate) {
+        this.name = name;
+        this.duration1 = duration1;
+        this.duration2 = duration2;
+        this.duration3 = duration3;
+        this.startdate = startdate;
+    }
+
+    /** default constructor */
+    public Payment() {
+    }
+
+    /** minimal constructor */
+    public Payment(String name, double duration1, double duration2, double duration3) {
+        this.name = name;
+        this.duration1 = duration1;
+        this.duration2 = duration2;
+        this.duration3 = duration3;
+    }
+
+    public Integer getPaymentId() {
+        return this.paymentId;
+    }
+
+    public void setPaymentId(Integer paymentId) {
+        this.paymentId = paymentId;
+    }
+
+    public String getName() {
+        return this.name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    public double getDuration1() {
+        return this.duration1;
+    }
+
+    public void setDuration1(double duration1) {
+        this.duration1 = duration1;
+    }
+
+    public double getDuration2() {
+        return this.duration2;
+    }
+
+    public void setDuration2(double duration2) {
+        this.duration2 = duration2;
+    }
+
+    public double getDuration3() {
+        return this.duration3;
+    }
+
+    public void setDuration3(double duration3) {
+        this.duration3 = duration3;
+    }
+
+    public Calendar getStartdate() {
+        return this.startdate;
+    }
+
+    public void setStartdate(Calendar startdate) {
+        this.startdate = startdate;
+    }
+
+    public String toString() {
+        return new ToStringBuilder(this)
+            .append("paymentId", getPaymentId())
+            .append("name", getName())
+            .append("startdate", getStartdate())
+            .toString();
+    }
+
+    public boolean equals(Object other) {
+        if ( (this == other ) ) return true;
+        if ( !(other instanceof Payment) ) return false;
+        Payment castOther = (Payment) other;
+        return new EqualsBuilder()
+            .append(this.getPaymentId(), castOther.getPaymentId())
+            .append(this.getName(), castOther.getName())
+            .append(this.getDuration1(), castOther.getDuration1())
+            .append(this.getDuration2(), castOther.getDuration2())
+            .append(this.getDuration3(), castOther.getDuration3())
+            .append(this.getStartdate(), castOther.getStartdate())
+            .isEquals();
+    }
+
+    public int hashCode() {
+        return new HashCodeBuilder()
+            .append(getPaymentId())
+            .append(getName())
+            .append(getDuration1())
+            .append(getDuration2())
+            .append(getDuration3())
+            .append(getStartdate())
+            .toHashCode();
+    }
+
+}

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java	2004-11-23 23:35:57 UTC (rev 158)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java	2004-11-24 02:13:27 UTC (rev 159)
@@ -52,6 +52,7 @@
 import de.hsharz.provirent.objects.Genre;
 import de.hsharz.provirent.objects.Image;
 import de.hsharz.provirent.objects.Language;
+import de.hsharz.provirent.objects.Payment;
 import de.hsharz.provirent.objects.Status;
 import de.hsharz.provirent.objects.Subtitle;
 import de.hsharz.provirent.objects.VideoFormat;
@@ -1424,5 +1425,111 @@
 	    
 	
 	}
+	
+	/**
+	 * This method gets all Payments from the database.
+	 * searches for name,duration1, duration2, duration3, startdate or id
+	 * @param filter 
+	 * @return List of Payment objects, or an empty List
+	 */
+	public static List getPayment(final String filter){
+	    if (logger.isDebugEnabled()) {
+	        logger.debug("getPayment() - start. String filter= "+filter);
+	    }
+	    //init the returnlist
+	    List returnlist = new ArrayList();
+	
+	    Session s = null;
+	    
+	    try {
+	        //get new Session and begin Transaction
+	        s = HibernateUtil.currentSession();
+	            
+	            //init the criteria
+	            Criteria criteria = s.createCriteria(Condition.class);
+	            //any of the criteria 
+	            Disjunction any = Expression.disjunction();
+	
+	            //if filter not empty
+	            if (filter != null && !filter.equalsIgnoreCase("")) {
+	                any.add(Expression.like("name", "%"+filter+"%"));
+	                any.add(Expression.like("duration1", "%"+filter+"%"));
+	                any.add(Expression.like("duration2", "%"+filter+"%"));
+	                any.add(Expression.like("duration3", "%"+filter+"%"));
+	                any.add(Expression.like("startdate", "%"+filter+"%"));
+	                //maybe we are searching for the id?
+	                try {
+	                    any.add(Expression.eq("paymentId", new Integer(Integer.parseInt(filter))));
+	                } catch (Exception e) {
+	                }
+	                
+	            }
+	            //add all criteria
+	            criteria.add(any);
+	            //get the results
+	            returnlist = criteria.list();
+	
+	
+	
+	
+	    } catch (Exception e) {
+	        logger.error(
+	                "getPayment() - Error while trying to do Transaction",
+	                e);
+	        returnlist = new ArrayList();
+	    } finally {
+	        try {
+	            // No matter what, close the session
+	            HibernateUtil.closeSession();
+	        } catch (HibernateException e1) {
+	            logger.error("getPayment() - Could not Close the Session", e1);
+	        }
+	    }
+	
+	    if (logger.isDebugEnabled()) {
+	        logger.debug("getPayment() - end");
+	    }
+	    return returnlist;
+	    
+	
+	}
+	
+	
+	public static Payment getSinglePayment(final int id){
+	    if (logger.isDebugEnabled()) {
+	        logger.debug("getSinglePayment() - start. int filter= "+id);
+	    }
+	    //init the returnlist
+	    Payment returnobject = null;
+	
+	    Session s = null;
+	    Transaction tx = null;
+	    try {
+	        //get new Session and begin Transaction
+	        s = HibernateUtil.currentSession();
+	
+	            returnobject = (Payment)s.get(Payment.class, new Integer(id));
+	
+	    } catch (Exception e) {
+	        logger.error(
+	                "getSinglePayment() - Error while trying to do Transaction",
+	                e);
+	        
+	    } finally {
+	        try {
+	            // No matter what, close the session
+	            HibernateUtil.closeSession();
+	        } catch (HibernateException e1) {
+	            logger.error("getSinglePayment() - Could not Close the Session", e1);
+	        }
+	    }
+	
+	    if (logger.isDebugEnabled()) {
+	        logger.debug("getSinglePayment() - end");
+	    }
+	    return returnobject;
+	    
+	
+	}
 
 }

Added: project_src/provirent_hibernate/src/test/provirent/hibernate/TestPayment.java
===================================================================
--- project_src/provirent_hibernate/src/test/provirent/hibernate/TestPayment.java	2004-11-23 23:35:57 UTC (rev 158)
+++ project_src/provirent_hibernate/src/test/provirent/hibernate/TestPayment.java	2004-11-24 02:13:27 UTC (rev 159)
@@ -0,0 +1,299 @@
+/*
+ * Created on 09.10.2004
+ *
+ * Copyright (c) 2004/2005, Remo Griesch/Stefan Forstner/Philipp Schneider
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * - Redistributions of source code must retain the above copyright notice,
+ * this list of conditions and the following disclaimer.
+ * - Redistributions in binary form must reproduce the above copyright notice,
+ * this list of conditions and the following disclaimer in the documentation
+ * and/or other materials provided with the distribution.
+ * - Neither the name of the Remo Griesch/Stefan Forstner/Philipp Schneider nor
+ * the names of its contributors may be used to endorse or promote products
+ * derived from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+package test.provirent.hibernate;
+
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
+
+import junit.framework.TestCase;
+import net.sf.hibernate.Session;
+import net.sf.hibernate.Transaction;
+
+import org.apache.log4j.Logger;
+
+import de.hsharz.provirent.objects.Payment;
+
+/**
+ * @author Stefan Forstner
+ *
+ */
+public class TestPayment extends TestCase {
+    /**
+     * Logger for this class
+     */
+    private static final Logger logger = Logger.getLogger(TestPayment.class);
+
+    /*
+     * @see TestCase#setUp()
+     */
+    protected void setUp() throws Exception {
+        if (logger.isDebugEnabled()) {
+            logger.debug("setUp() - start");
+        }
+
+        super.setUp();
+
+        if (logger.isDebugEnabled()) {
+            logger.debug("setUp() - end");
+        }
+    }
+
+    /*
+     * @see TestCase#tearDown()
+     */
+    protected void tearDown() throws Exception {
+        if (logger.isDebugEnabled()) {
+            logger.debug("tearDown() - start");
+        }
+
+        super.tearDown();
+
+        if (logger.isDebugEnabled()) {
+            logger.debug("tearDown() - end");
+        }
+    }
+    
+    /*public void testGenre() throws Exception {
+        if (logger.isDebugEnabled()) {
+            logger.debug("testCreating() - start");
+        }
+
+        //get new Session and begin Transaction
+        Session s = HibernateUtil.currentSession();
+        Transaction tx = null;
+        try {
+            tx = s.beginTransaction();
+
+            try {
+                //is DB open and connected
+                assertTrue("Connected to Db? ", s.isConnected());
+                assertTrue("Db Open? ", s.isOpen());
+
+                //cretae new objects
+                List Payments = new ArrayList();
+
+                Payment myp1 = null;
+                Payment myp2 = null;
+                Payment myp3 = null;
+                Payment myp4 = null;
+                
+                s.clear();
+
+                for (int i = 1; i <= 10; i++) {
+                    myp1 = new Payment("A", 2.00d, 4.00d, 8.00d);
+                    myp2 = new Payment("B", 3.00d, 6.00d, 12.00d);
+                    myp3 = new Payment("C", 4.00d, 8.00d, 14.00d);
+                    myp4 = new Payment("D", 5.00d, 10.00d, 20.00d);
+                    Payments.add(myp1);
+                    Payments.add(myp2);
+                    Payments.add(myp3);
+                    Payments.add(myp4);
+                }             
+                
+
+                List ids = new ArrayList();
+
+                //save objects
+                for (Iterator iter = Payments.iterator(); iter.hasNext();) {
+                    Payment dir = (Payment) iter.next();
+                    ids.add((Integer) s.save(dir));
+
+                }
+                s.flush();
+
+                tx.commit();
+
+                for (int i = 0; i < ids.size(); i++) {
+                    int id = ((Integer) ids.get(i)).intValue();
+                    Payment myp = (Payment) Payments.get(i);
+
+                    //get Payment from Hibernate
+                    Payment dbd = (Payment) s.get(Payment.class, new Integer(id));
+                    assertNotNull("Can't get Payment" + id + " from DB", dbd);
+                    if (dbd == null) {
+                        if (logger.isDebugEnabled()) {
+                            logger.debug("testCreating()Kein object mit id "
+                                    + id + "gefunden.");
+                        }
+                        return;
+                    }
+                    //are both equal?
+                    assertEquals(
+                            "Select: Payment aus DB nicht gleich meiner. DB: "
+                                    + dbd + " My:" + myp, myp, dbd);
+
+                    //Update
+
+                    //delete the object
+                    s.delete(myp);
+                    s.flush();
+
+                    logger.debug("L?sche eins per Hand");
+                    Payment o = new Payment();
+                    o.setPaymentId(new Integer(0));
+                    o.setName("");
+                    o.setDuration1(0d);
+                    o.setDuration2(0d);
+                    o.setDuration3(0d);
+                    o.setStartdate(null);
+                    s.delete(o);
+                    s.flush();
+                    
+                    
+                    dbd = myp = null;
+
+                    Object obj = s.get(Payment.class, new Integer(id));
+
+                    //should be null, because data deleted
+                    assertNull("Deleted: Payment" + id + ", but still in DB", obj);
+
+                    if (logger.isDebugEnabled()) {
+                        logger
+                                .debug("testCreating() - Payment aus DB gleich meiner? DB: "
+                                        + dbd + " My:" + myp);
+                    }
+
+                }
+
+                tx.commit();
+
+            } catch (Exception e) {
+                if (tx != null) {
+                    logger
+                            .error(
+                                    "testCreating() - Something went wrong here; discard all partial changes",
+                                    e);
+
+                    // Something went wrong; discard all partial changes
+                    tx.rollback();
+                }
+
+            }
+
+        } catch (Exception e) {
+            logger.error(
+                    "testCreating() - Error while trying to beginTransaction",
+                    e);
+            throw e;
+        } finally {
+            // No matter what, close the session
+            HibernateUtil.closeSession();
+        }
+
+
+        if (logger.isDebugEnabled()) {
+            logger.debug("testCreating() - end");
+        }
+    }*/
+
+    public void testSavePayment() throws Exception {
+        if (logger.isDebugEnabled()) {
+            logger.debug("testSavePayment() - start");
+        }
+
+        //get new Session and begin Transaction
+        Session s = HibernateUtil.currentSession();
+        Transaction tx = null;
+        try {
+            tx = s.beginTransaction();
+
+            try {
+                //is DB open and connected
+                assertTrue("Connected to Db? ", s.isConnected());
+                assertTrue("Db Open? ", s.isOpen());
+
+                //cretae new objects
+                List Payments = new ArrayList();
+
+                Payment myp1 = new Payment("A", 2.00d, 4.00d, 8.00d);
+                Payment myp2 = new Payment("B", 3.00d, 6.00d, 12.00d);
+                Payment myp3 = new Payment("C", 4.00d, 8.00d, 14.00d);
+                Payment myp4 = new Payment("D", 5.00d, 10.00d, 20.00d);
+
+                Payments.add(myp1);
+                Payments.add(myp2);
+                Payments.add(myp3);
+                Payments.add(myp4);
+
+                List ids = new ArrayList();
+
+                //save objects
+                for (Iterator iter = Payments.iterator(); iter.hasNext();) {
+                    Payment dir = (Payment) iter.next();
+                    ids.add((Integer) s.save(dir));
+
+                }
+                s.flush();
+
+                tx.commit();
+
+            } catch (Exception e) {
+                if (tx != null) {
+                    logger
+                            .error(
+                                    "testSavePayment() - Something went wrong here; discard all partial changes",
+                                    e);
+
+                    // Something went wrong; discard all partial changes
+                    tx.rollback();
+                }
+                throw e;
+            }
+
+        } catch (Exception e) {
+            logger.error(
+                    "testSavePayment() - Error while trying to beginTransaction",
+                    e);
+            throw e;
+        } finally {
+            // No matter what, close the session
+            HibernateUtil.closeSession();
+        }
+
+        HibernateUtil.closeSession();
+
+        if (logger.isDebugEnabled()) {
+            logger.debug("testSavePayment() - end");
+        }
+    }
+
+    /**
+     * Constructor for TestGenre.
+     * @param arg0
+     */
+    public TestPayment(String arg0) {
+        super(arg0);
+    }
+
+}
\ No newline at end of file



From pschneider at sheep.berlios.de  Wed Nov 24 10:48:16 2004
From: pschneider at sheep.berlios.de (Philipp Schneider at BerliOS)
Date: Wed, 24 Nov 2004 10:48:16 +0100
Subject: [Provirent-svn-commit] r160 - in project_src/provirent_hibernate/src: de/hsharz/provirent/management/gui de/hsharz/provirent/objects de/hsharz/provirent/persistence test/provirent/hibernate
Message-ID: <200411240948.iAO9mGAj026079@sheep.berlios.de>

Author: pschneider
Date: 2004-11-24 10:48:12 +0100 (Wed, 24 Nov 2004)
New Revision: 160

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositePayment.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Payment.hbm.xml
   project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Payment.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/HibernateUtil.java
   project_src/provirent_hibernate/src/test/provirent/hibernate/AllTestsSimpleObjects.java
   project_src/provirent_hibernate/src/test/provirent/hibernate/HibernateUtil.java
   project_src/provirent_hibernate/src/test/provirent/hibernate/TestPayment.java
Log:
- Fehler beseitig


Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositePayment.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositePayment.java	2004-11-24 02:13:27 UTC (rev 159)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositePayment.java	2004-11-24 09:48:12 UTC (rev 160)
@@ -801,7 +801,7 @@
                     					Double.toString(o.getDuration1()),
                     					Double.toString(o.getDuration2()), 
                     					Double.toString(o.getDuration3()),
-                    					o.getStartdate().toString()});
+                    					((o.getStartdate()== null)?"":o.getStartdate().toString())});
 
         }
 

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Payment.hbm.xml
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Payment.hbm.xml	2004-11-24 02:13:27 UTC (rev 159)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Payment.hbm.xml	2004-11-24 09:48:12 UTC (rev 160)
@@ -38,7 +38,7 @@
 
       </property>
 	  
-	  <property name="startdate" type="calendar">
+	  <property name="startdate" type="calendar" not-null="true">
       	<meta attribute="use-in-tostring">true</meta>
       </property>
 	  

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Payment.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Payment.java	2004-11-24 02:13:27 UTC (rev 159)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Payment.java	2004-11-24 09:48:12 UTC (rev 160)
@@ -29,7 +29,7 @@
     /** persistent field */
     private double duration3;
 
-    /** nullable persistent field */
+    /** persistent field */
     private Calendar startdate;
 
     /** full constructor */
@@ -45,14 +45,6 @@
     public Payment() {
     }
 
-    /** minimal constructor */
-    public Payment(String name, double duration1, double duration2, double duration3) {
-        this.name = name;
-        this.duration1 = duration1;
-        this.duration2 = duration2;
-        this.duration3 = duration3;
-    }
-
     public Integer getPaymentId() {
         return this.paymentId;
     }

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java	2004-11-24 02:13:27 UTC (rev 159)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java	2004-11-24 09:48:12 UTC (rev 160)
@@ -1446,7 +1446,7 @@
 	        s = HibernateUtil.currentSession();
 	            
 	            //init the criteria
-	            Criteria criteria = s.createCriteria(Condition.class);
+	            Criteria criteria = s.createCriteria(Payment.class);
 	            //any of the criteria 
 	            Disjunction any = Expression.disjunction();
 	

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/HibernateUtil.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/HibernateUtil.java	2004-11-24 02:13:27 UTC (rev 159)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/HibernateUtil.java	2004-11-24 09:48:12 UTC (rev 160)
@@ -55,6 +55,7 @@
 import de.hsharz.provirent.objects.Movie;
 import de.hsharz.provirent.objects.MovieOrder;
 import de.hsharz.provirent.objects.OrderItem;
+import de.hsharz.provirent.objects.Payment;
 import de.hsharz.provirent.objects.Person;
 import de.hsharz.provirent.objects.Status;
 import de.hsharz.provirent.objects.Subtitle;
@@ -86,7 +87,7 @@
             .addClass(Subtitle.class).addClass(VideoFormat.class)
             .addClass(Customer.class).addClass(Image.class)
             .addClass(MovieOrder.class).addClass(OrderItem.class)
-            .addClass(Person.class);
+            .addClass(Person.class).addClass(Payment.class);
 
 
             sessionFactory = cfg.buildSessionFactory();

Modified: project_src/provirent_hibernate/src/test/provirent/hibernate/AllTestsSimpleObjects.java
===================================================================
--- project_src/provirent_hibernate/src/test/provirent/hibernate/AllTestsSimpleObjects.java	2004-11-24 02:13:27 UTC (rev 159)
+++ project_src/provirent_hibernate/src/test/provirent/hibernate/AllTestsSimpleObjects.java	2004-11-24 09:48:12 UTC (rev 160)
@@ -55,6 +55,7 @@
         suite.addTestSuite(TestVideoFormat.class);
         suite.addTestSuite(TestLanguage.class);
         suite.addTestSuite(TestPerson.class);
+        suite.addTestSuite(TestPayment.class);
         //$JUnit-END$
         return suite;
     }

Modified: project_src/provirent_hibernate/src/test/provirent/hibernate/HibernateUtil.java
===================================================================
--- project_src/provirent_hibernate/src/test/provirent/hibernate/HibernateUtil.java	2004-11-24 02:13:27 UTC (rev 159)
+++ project_src/provirent_hibernate/src/test/provirent/hibernate/HibernateUtil.java	2004-11-24 09:48:12 UTC (rev 160)
@@ -32,8 +32,6 @@
  */
 package test.provirent.hibernate;
 
-import org.apache.log4j.Logger;
-
 import net.sf.hibernate.HibernateException;
 import net.sf.hibernate.Session;
 import net.sf.hibernate.SessionFactory;
@@ -41,6 +39,7 @@
 
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
+import org.apache.log4j.Logger;
 
 import de.hsharz.provirent.objects.Actor;
 import de.hsharz.provirent.objects.AudioFormat;
@@ -55,6 +54,7 @@
 import de.hsharz.provirent.objects.Movie;
 import de.hsharz.provirent.objects.MovieOrder;
 import de.hsharz.provirent.objects.OrderItem;
+import de.hsharz.provirent.objects.Payment;
 import de.hsharz.provirent.objects.Person;
 import de.hsharz.provirent.objects.Status;
 import de.hsharz.provirent.objects.Subtitle;
@@ -86,7 +86,7 @@
             .addClass(Subtitle.class).addClass(VideoFormat.class)
             .addClass(Customer.class).addClass(Image.class)
             .addClass(MovieOrder.class).addClass(OrderItem.class)
-            .addClass(Person.class);
+            .addClass(Person.class).addClass(Payment.class);
 
 
             sessionFactory = cfg.buildSessionFactory();

Modified: project_src/provirent_hibernate/src/test/provirent/hibernate/TestPayment.java
===================================================================
--- project_src/provirent_hibernate/src/test/provirent/hibernate/TestPayment.java	2004-11-24 02:13:27 UTC (rev 159)
+++ project_src/provirent_hibernate/src/test/provirent/hibernate/TestPayment.java	2004-11-24 09:48:12 UTC (rev 160)
@@ -35,6 +35,7 @@
 import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;
+import java.util.Calendar;
 
 import junit.framework.TestCase;
 import net.sf.hibernate.Session;
@@ -233,14 +234,15 @@
                 assertTrue("Connected to Db? ", s.isConnected());
                 assertTrue("Db Open? ", s.isOpen());
 
-                //cretae new objects
+                //create new objects
                 List Payments = new ArrayList();
 
-                Payment myp1 = new Payment("A", 2.00d, 4.00d, 8.00d);
-                Payment myp2 = new Payment("B", 3.00d, 6.00d, 12.00d);
-                Payment myp3 = new Payment("C", 4.00d, 8.00d, 14.00d);
-                Payment myp4 = new Payment("D", 5.00d, 10.00d, 20.00d);
+                Payment myp1 = new Payment("A", 2.00d, 4.00d, 8.00d,Calendar.getInstance());
+                Payment myp2 = new Payment("B", 3.00d, 6.00d, 12.00d,Calendar.getInstance());
+                Payment myp3 = new Payment("C", 4.00d, 8.00d, 14.00d,Calendar.getInstance());
+                Payment myp4 = new Payment("D", 5.00d, 10.00d, 20.00d,Calendar.getInstance());
 
+                
                 Payments.add(myp1);
                 Payments.add(myp2);
                 Payments.add(myp3);
@@ -250,8 +252,8 @@
 
                 //save objects
                 for (Iterator iter = Payments.iterator(); iter.hasNext();) {
-                    Payment dir = (Payment) iter.next();
-                    ids.add((Integer) s.save(dir));
+                    Payment pay = (Payment) iter.next();
+                    ids.add((Integer) s.save(pay));
 
                 }
                 s.flush();



From rgriesch at sheep.berlios.de  Wed Nov 24 11:14:28 2004
From: rgriesch at sheep.berlios.de (Remo Griesch at BerliOS)
Date: Wed, 24 Nov 2004 11:14:28 +0100
Subject: [Provirent-svn-commit] r161 - in project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui: . language
Message-ID: <200411241014.iAOAEST1027064@sheep.berlios.de>

Author: rgriesch
Date: 2004-11-24 11:14:27 +0100 (Wed, 24 Nov 2004)
New Revision: 161

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/movies.properties
Log:
Composite Movie - angefangen zu ?\195?\164ndern
                - Problem mit styled Text

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java	2004-11-24 09:48:12 UTC (rev 160)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java	2004-11-24 10:14:27 UTC (rev 161)
@@ -13,6 +13,9 @@
 import org.eclipse.swt.events.FocusEvent;
 import org.eclipse.swt.events.SelectionAdapter;
 import org.eclipse.swt.events.SelectionEvent;
+import org.eclipse.swt.graphics.Color;
+import org.eclipse.swt.graphics.Device;
+import org.eclipse.swt.graphics.DeviceData;
 import org.eclipse.swt.layout.FormAttachment;
 import org.eclipse.swt.layout.FormData;
 import org.eclipse.swt.layout.GridData;
@@ -28,6 +31,7 @@
 import org.eclipse.swt.widgets.Table;
 import org.eclipse.swt.widgets.TableColumn;
 import org.eclipse.swt.widgets.Text;
+import org.eclipse.swt.custom.StyledText;
 
 import com.cloudgarden.resource.SWTResourceManager;
 
@@ -78,15 +82,10 @@
     private TableColumn tableMoviesOverview_ColumnDate;
     private TableColumn tableMoviesOverviewDetail_ColumnGenres;
     private TableColumn tableMoviesOverviewDetail_ColumnActors;
-    private TableColumn tableMoviesOverviewDetail_ColumnDirectors;
-    private TableColumn tableMoviesOverviewDetail_ColumnVideoformats;
-    private TableColumn tableMoviesOverviewDetail_ColumnAudioformats;
-    private TableColumn tableMoviesOverviewDetail_ColumnLanguages;   
+    private TableColumn tableMoviesOverviewDetail_ColumnDirectors;   
     private TableColumn tableMoviesOverviewDetail_ColumnDescription;
     private TableColumn tableMoviesOverviewDetail_ColumnImages;
-    
-    
-    
+       
     private Group groupMovie;
     private Group groupMoviesOverview;
     private Group groupMoviesDetail;
@@ -94,7 +93,7 @@
     private Text textMoviesSearch;
     private Text textMoviesID;
     private Text textMoviesTitle;
-    private Text textMoviesDate;
+    private StyledText textMoviesDescription;
     
     private Label labelMoviesSearch;
     private Label labelMoviesID;
@@ -111,18 +110,14 @@
     private Button buttonMoviesEditActors;
     private Button buttonMoviesEditDirectors;
     private Button buttonMoviesEditGenres;
-    private Button buttonMoviesEditLanguages;
-    private Button buttonMoviesEditSubtitles;
-    private Button buttonMoviesEditAudioformats;
-    private Button buttonMoviesEditVideoformats;
     private Button buttonMoviesEditImages;
-    private Button buttonMoviesEditDescription;
      
     private SashForm sashForm1;
     
     private Composite parent;
     private Composite compositeButtons;
-    
+    private Text textMoviesDate;
+
     protected int mode_actor;
     
     private StatusLineStyledText statusLine;
@@ -425,30 +420,6 @@
                     tableMoviesOverviewDetail_ColumnActors.setWidth(80);
                 }
                 {
-                    tableMoviesOverviewDetail_ColumnVideoformats = new TableColumn(
-                        tableMoviesOverviewDetail,
-                        SWT.CENTER);
-                    tableMoviesOverviewDetail_ColumnVideoformats.setText(l
-                        .getString("movies.groupoverviewdetail.columnvideoformats"));
-                    tableMoviesOverviewDetail_ColumnVideoformats.setWidth(80);
-                }
-                {
-                    tableMoviesOverviewDetail_ColumnAudioformats = new TableColumn(
-                        tableMoviesOverviewDetail,
-                        SWT.CENTER);
-                    tableMoviesOverviewDetail_ColumnAudioformats.setText(l
-                        .getString("movies.groupoverviewdetail.columnaudioformats"));
-                    tableMoviesOverviewDetail_ColumnAudioformats.setWidth(80);
-                }
-                {
-                    tableMoviesOverviewDetail_ColumnLanguages = new TableColumn(
-                        tableMoviesOverviewDetail,
-                        SWT.CENTER);
-                    tableMoviesOverviewDetail_ColumnLanguages.setText(l
-                        .getString("movies.groupoverviewdetail.columnlanguages"));
-                    tableMoviesOverviewDetail_ColumnLanguages.setWidth(80);
-                }
-                {
                     tableMoviesOverviewDetail_ColumnDescription = new TableColumn(
                         tableMoviesOverviewDetail,
                         SWT.CENTER);
@@ -543,9 +514,8 @@
     	            + ":");
     	    labelMoviesID.setSize(125, 15);
     	    GridData formData2 = new GridData();
-    	    formData2.widthHint = 125;
     	    formData2.heightHint = 15;
-    	    formData2.horizontalSpan = 2;
+    	    formData2.horizontalAlignment = GridData.FILL;
     	    labelMoviesID.setLayoutData(formData2);
     	}
     	{
@@ -555,7 +525,7 @@
     	    GridData text1LData1 = new GridData();
     	    text1LData1.horizontalAlignment = GridData.FILL;
     	    text1LData1.heightHint = 13;
-    	    text1LData1.horizontalSpan = 4;
+    	    text1LData1.horizontalSpan = 5;
     	    text1LData1.grabExcessHorizontalSpace = true;
     	    textMoviesID.setLayoutData(text1LData1);
     	}
@@ -568,11 +538,9 @@
                 + ":");
             labelMoviesTitle.setSize(125, 15);
             GridData labelActorNameLData = new GridData();
-            labelActorNameLData.widthHint = 125;
             labelActorNameLData.heightHint = 15;
-            labelActorNameLData.horizontalSpan = 2;
-            labelMoviesTitle
-                .setLayoutData(labelActorNameLData);
+            labelActorNameLData.horizontalAlignment = GridData.FILL;
+            labelMoviesTitle.setLayoutData(labelActorNameLData);
         }
         {
     	    textMoviesTitle = new Text(groupMoviesDetail,
@@ -580,7 +548,7 @@
     	    GridData text1LData2 = new GridData();
     	    text1LData2.horizontalAlignment = GridData.FILL;
     	    text1LData2.heightHint = 13;
-    	    text1LData2.horizontalSpan = 4;
+    	    text1LData2.horizontalSpan = 5;
     	    text1LData2.grabExcessHorizontalSpace = true;
     	    textMoviesTitle.setLayoutData(text1LData2);        
     	}     
@@ -593,55 +561,40 @@
                 + ":");
             labelMoviesDate.setSize(125, 15);
             GridData labelActorNameLData = new GridData();
-            labelActorNameLData.widthHint = 125;
             labelActorNameLData.heightHint = 15;
-            labelActorNameLData.horizontalSpan = 2;
-            labelMoviesDate
-                .setLayoutData(labelActorNameLData);
+            labelActorNameLData.horizontalAlignment = GridData.FILL;
+            labelMoviesDate.setLayoutData(labelActorNameLData);
         }
         {
-    	    textMoviesDate = new Text(groupMoviesDetail,
-    	            SWT.READ_ONLY | SWT.BORDER);
-    	    GridData text1LData2 = new GridData();
-    	    text1LData2.horizontalAlignment = GridData.FILL;
-    	    text1LData2.heightHint = 13;
-    	    text1LData2.horizontalSpan = 4;
-    	    text1LData2.grabExcessHorizontalSpace = true;
-    	    textMoviesDate.setLayoutData(text1LData2);        
-    	    textMoviesDate.setText(l
-                .getString("movies.groupdetail.textdate"));
-        }// label and text for detail
+            textMoviesDate = new Text(groupMoviesDetail, SWT.READ_ONLY
+                | SWT.BORDER);
+            GridData text1LData2 = new GridData();
+            text1LData2.horizontalAlignment = GridData.FILL;
+            text1LData2.heightHint = 13;
+            text1LData2.horizontalSpan = 5;
+            text1LData2.grabExcessHorizontalSpace = true;
+            textMoviesDate.setLayoutData(text1LData2);
+            textMoviesDate.setText(l.getString("movies.groupdetail.textdate"));
+        }
         //labels and buttons for Detail
         {
     	    labelMoviesAdvice = new Label(groupMoviesDetail, SWT.NONE);
-    	    labelMoviesAdvice.setText(l
-    	            .getString("movies.groupdetail.labeladvice")
-    	            + ":");
+    	    labelMoviesAdvice.setText(l.getString("movies.groupdetail.textdescription"));
     	    GridData formData2 = new GridData();
-    	    formData2.horizontalSpan = 6;
-    	    formData2.horizontalAlignment = GridData.FILL;
-    	    formData2.grabExcessHorizontalSpace = true;
-    	    formData2.verticalSpan = 3;
+    	    formData2.horizontalSpan = 1;
+    	    formData2.verticalSpan = 5;
     	    labelMoviesAdvice.setLayoutData(formData2);
     	}
         {
-            buttonMoviesEditDescription = new Button(groupMoviesDetail
-                    , SWT.NONE);
-            buttonMoviesEditDescription.setText(l
-                .getString("movies.button.editdescription"));
-            buttonMoviesEditDescription.setEnabled(false);
-            GridData text1LData2 = new GridData();
-    	    text1LData2.horizontalAlignment = GridData.FILL;
-    	    text1LData2.heightHint = 20;
-    	    text1LData2.horizontalSpan = 1;
-    	    text1LData2.grabExcessHorizontalSpace = true;
-    	    buttonMoviesEditDescription.setLayoutData(text1LData2);        
-            buttonMoviesEditDescription.addSelectionListener(new SelectionAdapter() {
-                public void widgetSelected(SelectionEvent evt) {
-                   // TODO
-                   openDialogDescription();
-                }
-            });
+            textMoviesDescription = new StyledText(groupMoviesDetail,SWT.BORDER);
+            GridData formData2 = new GridData();
+    	    formData2.horizontalSpan = 5;
+    	    formData2.verticalSpan = 5;
+    	    formData2.verticalAlignment = GridData.FILL;
+    	    formData2.horizontalAlignment = GridData.FILL;
+    	    textMoviesDescription.setLayoutData(formData2);
+    	    textMoviesDescription.setEnabled(false);
+    	    //textMoviesDescription.setBackground();
         }
         {
             buttonMoviesEditDirectors = new Button(groupMoviesDetail
@@ -652,7 +605,7 @@
             GridData text1LData2 = new GridData();
     	    text1LData2.horizontalAlignment = GridData.FILL;
     	    text1LData2.heightHint = 20;
-    	    text1LData2.horizontalSpan = 5;
+    	    text1LData2.horizontalSpan = 1;
     	    text1LData2.grabExcessHorizontalSpace = true;
     	    buttonMoviesEditDirectors.setLayoutData(text1LData2);        
             buttonMoviesEditDirectors.addSelectionListener(new SelectionAdapter() {
@@ -671,7 +624,7 @@
             GridData text1LData2 = new GridData();
     	    text1LData2.horizontalAlignment = GridData.FILL;
     	    text1LData2.heightHint = 20;
-    	    text1LData2.horizontalSpan = 1;
+    	    text1LData2.horizontalSpan = 5;
     	    text1LData2.grabExcessHorizontalSpace = true;
     	    buttonMoviesEditActors.setLayoutData(text1LData2);        
             buttonMoviesEditActors.addSelectionListener(new SelectionAdapter() {
@@ -690,7 +643,7 @@
             GridData text1LData2 = new GridData();
     	    text1LData2.horizontalAlignment = GridData.FILL;
     	    text1LData2.heightHint = 20;
-    	    text1LData2.horizontalSpan = 5;
+    	    text1LData2.horizontalSpan = 1;
     	    text1LData2.grabExcessHorizontalSpace = true;
     	    buttonMoviesEditGenres.setLayoutData(text1LData2);        
             buttonMoviesEditGenres.addSelectionListener(new SelectionAdapter() {
@@ -701,82 +654,6 @@
             });  
         }
         {
-            buttonMoviesEditSubtitles = new Button(groupMoviesDetail
-                    , SWT.NONE);
-            buttonMoviesEditSubtitles.setText(l
-                .getString("movies.button.editsubtitles"));
-            buttonMoviesEditSubtitles.setEnabled(false);
-            GridData text1LData2 = new GridData();
-    	    text1LData2.horizontalAlignment = GridData.FILL;
-    	    text1LData2.heightHint = 20;
-    	    text1LData2.horizontalSpan = 1;
-    	    text1LData2.grabExcessHorizontalSpace = true;
-    	    buttonMoviesEditSubtitles.setLayoutData(text1LData2);        
-            buttonMoviesEditSubtitles.addSelectionListener(new SelectionAdapter() {
-                public void widgetSelected(SelectionEvent evt) {
-                   // TODO
-                    
-                }
-            });  
-        }
-        {
-            buttonMoviesEditLanguages = new Button(groupMoviesDetail
-                    , SWT.NONE);
-            buttonMoviesEditLanguages.setText(l
-                .getString("movies.button.editlanguages"));
-            buttonMoviesEditLanguages.setEnabled(false);
-            GridData text1LData2 = new GridData();
-    	    text1LData2.horizontalAlignment = GridData.FILL;
-    	    text1LData2.heightHint = 20;
-    	    text1LData2.horizontalSpan = 5;
-    	    text1LData2.grabExcessHorizontalSpace = true;
-    	    buttonMoviesEditLanguages.setLayoutData(text1LData2);        
-            buttonMoviesEditLanguages.addSelectionListener(new SelectionAdapter() {
-                public void widgetSelected(SelectionEvent evt) {
-                   // TODO
-                    
-                }
-            });  
-        }
-        {
-            buttonMoviesEditVideoformats = new Button(groupMoviesDetail
-                    , SWT.NONE);
-            buttonMoviesEditVideoformats.setText(l
-                .getString("movies.button.editvideoformats"));
-            buttonMoviesEditVideoformats.setEnabled(false);
-            GridData text1LData2 = new GridData();
-    	    text1LData2.horizontalAlignment = GridData.FILL;
-    	    text1LData2.heightHint = 20;
-    	    text1LData2.horizontalSpan = 1;
-    	    text1LData2.grabExcessHorizontalSpace = true;
-    	    buttonMoviesEditVideoformats.setLayoutData(text1LData2);        
-            buttonMoviesEditVideoformats.addSelectionListener(new SelectionAdapter() {
-                public void widgetSelected(SelectionEvent evt) {
-                   // TODO
-                    
-                }
-            });  
-        }
-        {
-            buttonMoviesEditAudioformats = new Button(groupMoviesDetail
-                    , SWT.NONE);
-            buttonMoviesEditAudioformats.setText(l
-                .getString("movies.button.editaudioformats"));
-            buttonMoviesEditAudioformats.setEnabled(false);
-            GridData text1LData2 = new GridData();
-    	    text1LData2.horizontalAlignment = GridData.FILL;
-    	    text1LData2.heightHint = 20;
-    	    text1LData2.horizontalSpan = 5;
-    	    text1LData2.grabExcessHorizontalSpace = true;
-    	    buttonMoviesEditAudioformats.setLayoutData(text1LData2);        
-            buttonMoviesEditAudioformats.addSelectionListener(new SelectionAdapter() {
-                public void widgetSelected(SelectionEvent evt) {
-                   // TODO
-                    
-                }
-            });  
-        }
-        {
             buttonMoviesEditImages = new Button(groupMoviesDetail
                     , SWT.NONE);
             buttonMoviesEditImages.setText(l
@@ -784,7 +661,7 @@
             buttonMoviesEditImages.setEnabled(false);
             GridData text1LData2 = new GridData();
     	    text1LData2.heightHint = 20;
-    	    text1LData2.horizontalSpan = 1;
+    	    text1LData2.horizontalSpan = 5;
     	    text1LData2.horizontalAlignment = GridData.FILL;
     	    buttonMoviesEditImages.setLayoutData(text1LData2);        
             buttonMoviesEditImages.addSelectionListener(new SelectionAdapter() {
@@ -820,22 +697,19 @@
                 textMoviesID.setText("");
                 textMoviesTitle.setText("");
                 textMoviesDate.setText("");
+                textMoviesDescription.setText("");
                 textMoviesTitle.setEditable(true);
                 textMoviesDate.setEditable(true);
+                textMoviesDescription.setEnabled(true);
                 
                 buttonMoviesCancel.setEnabled(true);
                 buttonMoviesSave.setEnabled(true);
                 buttonMoviesNew.setEnabled(false);
                 buttonMoviesEdit.setEnabled(false);
                 buttonMoviesDelete.setEnabled(false);
-                buttonMoviesEditDescription.setEnabled(true);
                 buttonMoviesEditDirectors.setEnabled(true);
                 buttonMoviesEditActors.setEnabled(true);
                 buttonMoviesEditGenres.setEnabled(true);
-                buttonMoviesEditSubtitles.setEnabled(true);
-                buttonMoviesEditLanguages.setEnabled(true);
-                buttonMoviesEditVideoformats.setEnabled(true);
-                buttonMoviesEditAudioformats.setEnabled(true);
                 buttonMoviesEditImages.setEnabled(true);
                 
                 textMoviesSearch.setEditable(false);
@@ -1107,19 +981,15 @@
         tableMoviesOverview.setEnabled(true);
         textMoviesTitle.setEditable(false);
         textMoviesDate.setEditable(false);
+        textMoviesDescription.setEnabled(false);
         buttonMoviesCancel.setEnabled(false);
         buttonMoviesSave.setEnabled(false);
         buttonMoviesNew.setEnabled(true);
         buttonMoviesEdit.setEnabled(false);
         buttonMoviesDelete.setEnabled(false);
-        buttonMoviesEditDescription.setEnabled(false);
         buttonMoviesEditDirectors.setEnabled(false);
         buttonMoviesEditActors.setEnabled(false);
         buttonMoviesEditGenres.setEnabled(false);
-        buttonMoviesEditSubtitles.setEnabled(false);
-        buttonMoviesEditLanguages.setEnabled(false);
-        buttonMoviesEditVideoformats.setEnabled(false);
-        buttonMoviesEditAudioformats.setEnabled(false);
         buttonMoviesEditImages.setEnabled(false);
     }
 

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/movies.properties
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/movies.properties	2004-11-24 09:48:12 UTC (rev 160)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/movies.properties	2004-11-24 10:14:27 UTC (rev 161)
@@ -22,6 +22,7 @@
 movies.groupdetail.labeldate =Erscheinungsdatum
 movies.groupdetail.labeladvice =Um die Elemente zu Bearbeiten bitte entsprechende Schaltfl?che anklicken
 movies.groupdetail.textdate = (Beispiel: 01.01.2001)
+movies.groupdetail.textdescription =Beschreibung
 
 button.new =Neu
 button.edit =Bearbeiten



From rgriesch at sheep.berlios.de  Thu Nov 25 00:37:31 2004
From: rgriesch at sheep.berlios.de (Remo Griesch at BerliOS)
Date: Thu, 25 Nov 2004 00:37:31 +0100
Subject: [Provirent-svn-commit] r162 - project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui
Message-ID: <200411242337.iAONbVmY022276@sheep.berlios.de>

Author: rgriesch
Date: 2004-11-25 00:37:19 +0100 (Thu, 25 Nov 2004)
New Revision: 162

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/DialogMovie.java
Log:
Composite Movie -textMoviesDescription (MULTI,SCROLL)

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java	2004-11-24 10:14:27 UTC (rev 161)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java	2004-11-24 23:37:19 UTC (rev 162)
@@ -93,7 +93,7 @@
     private Text textMoviesSearch;
     private Text textMoviesID;
     private Text textMoviesTitle;
-    private StyledText textMoviesDescription;
+    private Text textMoviesDescription;
     
     private Label labelMoviesSearch;
     private Label labelMoviesID;
@@ -586,15 +586,14 @@
     	    labelMoviesAdvice.setLayoutData(formData2);
     	}
         {
-            textMoviesDescription = new StyledText(groupMoviesDetail,SWT.BORDER);
+            textMoviesDescription = new Text(groupMoviesDetail, SWT.MULTI 
+                    | SWT.READ_ONLY | SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER);
             GridData formData2 = new GridData();
     	    formData2.horizontalSpan = 5;
     	    formData2.verticalSpan = 5;
     	    formData2.verticalAlignment = GridData.FILL;
     	    formData2.horizontalAlignment = GridData.FILL;
     	    textMoviesDescription.setLayoutData(formData2);
-    	    textMoviesDescription.setEnabled(false);
-    	    //textMoviesDescription.setBackground();
         }
         {
             buttonMoviesEditDirectors = new Button(groupMoviesDetail
@@ -700,7 +699,7 @@
                 textMoviesDescription.setText("");
                 textMoviesTitle.setEditable(true);
                 textMoviesDate.setEditable(true);
-                textMoviesDescription.setEnabled(true);
+                textMoviesDescription.setEditable(true);
                 
                 buttonMoviesCancel.setEnabled(true);
                 buttonMoviesSave.setEnabled(true);
@@ -981,7 +980,7 @@
         tableMoviesOverview.setEnabled(true);
         textMoviesTitle.setEditable(false);
         textMoviesDate.setEditable(false);
-        textMoviesDescription.setEnabled(false);
+        textMoviesDescription.setEditable(false);
         buttonMoviesCancel.setEnabled(false);
         buttonMoviesSave.setEnabled(false);
         buttonMoviesNew.setEnabled(true);

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/DialogMovie.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/DialogMovie.java	2004-11-24 10:14:27 UTC (rev 161)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/DialogMovie.java	2004-11-24 23:37:19 UTC (rev 162)
@@ -94,7 +94,7 @@
 
             Shell shell = new Shell(display);
             DialogMovie inst = new DialogMovie(shell, SWT.NULL, Locale.GERMAN,
-                    film, TYPE_IMAGE);
+                    film, TYPE_ACTOR);
             inst.open();
         } catch (Exception e) {
             e.printStackTrace();



From pschneider at sheep.berlios.de  Thu Nov 25 01:04:47 2004
From: pschneider at sheep.berlios.de (Philipp Schneider at BerliOS)
Date: Thu, 25 Nov 2004 01:04:47 +0100
Subject: [Provirent-svn-commit] r163 - in project_src/provirent_hibernate: . lib src/de/hsharz/provirent src/de/hsharz/provirent/management/gui src/de/hsharz/provirent/objects
Message-ID: <200411250004.iAP04lkT016701@sheep.berlios.de>

Author: pschneider
Date: 2004-11-25 01:04:42 +0100 (Thu, 25 Nov 2004)
New Revision: 163

Added:
   project_src/provirent_hibernate/lib/swtcalendar.jar
Modified:
   project_src/provirent_hibernate/.classpath
   project_src/provirent_hibernate/src/de/hsharz/provirent/Util.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositePayment.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/objects/MovieOrder.hbm.xml
Log:
- SWT Datepicker hinzugef?\195?\188gt, Datum kann jetzt ausgewaehlt werden

Modified: project_src/provirent_hibernate/.classpath
===================================================================
--- project_src/provirent_hibernate/.classpath	2004-11-24 23:37:19 UTC (rev 162)
+++ project_src/provirent_hibernate/.classpath	2004-11-25 00:04:42 UTC (rev 163)
@@ -43,5 +43,6 @@
 	<classpathentry kind="lib" path="lib/activation.jar"/>
 	<classpathentry kind="lib" path="lib/mail.jar"/>
 	<classpathentry kind="lib" path="lib/firebirdsql.jar"/>
+	<classpathentry kind="lib" path="lib/swtcalendar.jar"/>
 	<classpathentry kind="output" path="bin"/>
 </classpath>

Added: project_src/provirent_hibernate/lib/swtcalendar.jar
===================================================================
(Binary files differ)


Property changes on: project_src/provirent_hibernate/lib/swtcalendar.jar
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/Util.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/Util.java	2004-11-24 23:37:19 UTC (rev 162)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/Util.java	2004-11-25 00:04:42 UTC (rev 163)
@@ -121,6 +121,12 @@
         }
     }
 
+    
+    public static String formatCalendar(Calendar cal){
+        
+        return "";
+    }
+    
     public static void main(String[] args) {
         Util h = new Util();
 

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositePayment.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositePayment.java	2004-11-24 23:37:19 UTC (rev 162)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositePayment.java	2004-11-25 00:04:42 UTC (rev 163)
@@ -1,6 +1,10 @@
 package de.hsharz.provirent.management.gui;
 
+import java.text.DateFormat;
 import java.text.MessageFormat;
+import java.text.ParseException;
+import java.text.SimpleDateFormat;
+import java.util.Date;
 import java.util.Locale;
 import java.util.PropertyResourceBundle;
 import java.util.ResourceBundle;
@@ -29,6 +33,8 @@
 import org.eclipse.swt.widgets.TableColumn;
 import org.eclipse.swt.widgets.TableItem;
 import org.eclipse.swt.widgets.Text;
+import org.vafada.swtcalendar.SWTCalendarEvent;
+import org.vafada.swtcalendar.SWTCalendarListener;
 
 import com.cloudgarden.resource.SWTResourceManager;
 
@@ -36,6 +42,7 @@
 import de.hsharz.provirent.objects.Payment;
 import de.hsharz.provirent.persistence.DataBaseException;
 import de.hsharz.provirent.persistence.Database;
+
 /**
 * This code was generated using CloudGarden's Jigloo
 * SWT/Swing GUI Builder, which is free for non-commercial
@@ -75,6 +82,7 @@
     
     private Composite parent;
     private Composite compositeButtons;
+    private Button changeStartDateButton;
 
     private Group groupPayment;
 
@@ -399,12 +407,58 @@
             GridData text1LData3 = new GridData();
             text1LData3.horizontalAlignment = GridData.FILL;
             text1LData3.heightHint = 13;
-            text1LData3.horizontalSpan = 4;
+            text1LData3.horizontalSpan = 3;
             text1LData3.grabExcessHorizontalSpace = true;
             textstartdate.setLayoutData(text1LData3);
         }
         {
+            changeStartDateButton = new Button(groupPaymentDetail, SWT.PUSH
+                | SWT.CENTER);
+            changeStartDateButton.setText("Change");
+            GridData text1LData3 = new GridData();
+            changeStartDateButton.addSelectionListener(new SelectionAdapter() {
+                public void widgetSelected(SelectionEvent evt) {
 
+                    final SWTCalendarDialog cal = new SWTCalendarDialog(getDisplay());
+
+                    cal.addDateChangedListener(new SWTCalendarListener() {
+
+                        public void dateChanged(SWTCalendarEvent calendarEvent) {
+
+                            textstartdate.setText( DateFormat.getDateInstance(DateFormat.LONG).format(calendarEvent.getCalendar().getTime()));
+
+                        }
+
+                    });
+
+
+
+                    if (textstartdate.getText() != null && textstartdate.getText().length() > 0) {
+
+                        try {
+                               cal.setDate(DateFormat.getDateInstance(DateFormat.LONG).parse(textstartdate.getText()));
+
+                        } catch (ParseException pe) {
+
+
+
+                        }
+
+                    }
+
+                    cal.open();                    
+                    
+                    
+                }
+            });
+            text1LData3.horizontalAlignment = GridData.FILL;
+            
+            text1LData3.horizontalSpan = 1;
+            text1LData3.grabExcessHorizontalSpace = true;
+            changeStartDateButton.setLayoutData(text1LData3);
+        }
+        {
+
             //die Buttons bekommen ein eigenes Composite
             compositeButtons = new Composite(groupPaymentDetail, SWT.EMBEDDED);
             GridLayout composite2Layout = new GridLayout();
@@ -773,7 +827,7 @@
                 					Double.toString(Payment.getDuration1()),
                 					Double.toString(Payment.getDuration2()), 
                 					Double.toString(Payment.getDuration3()),
-                					Payment.getStartdate().toString()});
+                					DateFormat.getDateInstance(DateFormat.MEDIUM).format(Payment.getStartdate().getTime()) });
         
     }
 
@@ -801,7 +855,8 @@
                     					Double.toString(o.getDuration1()),
                     					Double.toString(o.getDuration2()), 
                     					Double.toString(o.getDuration3()),
-                    					((o.getStartdate()== null)?"":o.getStartdate().toString())});
+                    			        DateFormat.getDateInstance(DateFormat.MEDIUM).format(o.getStartdate().getTime())
+                    					});
 
         }
 
@@ -1015,8 +1070,10 @@
         textduration1.setText(Double.toString(object.getDuration1()));
         textduration2.setText(Double.toString(object.getDuration2()));
         textduration3.setText(Double.toString(object.getDuration3()));
-        textstartdate.setText(object.getStartdate().toString());
+        
 
+        textstartdate.setText(DateFormat.getDateInstance(DateFormat.LONG).format(object.getStartdate().getTime()));
+
         //Buttons zum l?schen und editieren aktivieren
         buttonPaymentEdit.setEnabled(true);
         buttonPaymentDelete.setEnabled(true);

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/objects/MovieOrder.hbm.xml
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/objects/MovieOrder.hbm.xml	2004-11-24 23:37:19 UTC (rev 162)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/objects/MovieOrder.hbm.xml	2004-11-25 00:04:42 UTC (rev 163)
@@ -36,16 +36,6 @@
 				<many-to-many class="de.hsharz.provirent.objects.OrderItem" column="ORDERITEMID"/>
 
  			</list>
-
- 
-      <property name="name" type="string" not-null="true">
-      	<meta attribute="use-in-tostring">true</meta>
-      </property>
-				
- 
-      <property name="shortname" type="string" not-null="true">
-      	<meta attribute="use-in-tostring">true</meta>
-      </property>
              
  
     </class>



From rgriesch at sheep.berlios.de  Thu Nov 25 01:07:37 2004
From: rgriesch at sheep.berlios.de (Remo Griesch at BerliOS)
Date: Thu, 25 Nov 2004 01:07:37 +0100
Subject: [Provirent-svn-commit] r164 - project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui
Message-ID: <200411250007.iAP07bm7017074@sheep.berlios.de>

Author: rgriesch
Date: 2004-11-25 01:07:35 +0100 (Thu, 25 Nov 2004)
New Revision: 164

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java
Log:
CompositeMovie -Layout ver?\195?\164ndert

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java	2004-11-25 00:04:42 UTC (rev 163)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java	2004-11-25 00:07:35 UTC (rev 164)
@@ -40,6 +40,7 @@
 import de.hsharz.provirent.persistence.Database;
 
 
+import org.eclipse.swt.widgets.List;
 /**
 * This code was generated using CloudGarden's Jigloo
 * SWT/Swing GUI Builder, which is free for non-commercial
@@ -116,6 +117,10 @@
     
     private Composite parent;
     private Composite compositeButtons;
+    private List listMoviesImages;
+    private List listMoviesGenres;
+    private List listMoviesActors;
+    private List listMoviesDirectors;
     private Text textMoviesDate;
 
     protected int mode_actor;
@@ -195,7 +200,7 @@
         }
 
         this.setLayout(new GridLayout());
-        this.setSize(816, 540);
+        this.setSize(900, 650);
         {
             groupMovie = new Group(this, SWT.NONE);
             GridLayout groupMovieLayout = new GridLayout();
@@ -586,8 +591,7 @@
     	    labelMoviesAdvice.setLayoutData(formData2);
     	}
         {
-            textMoviesDescription = new Text(groupMoviesDetail, SWT.MULTI 
-                    | SWT.READ_ONLY | SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER);
+            textMoviesDescription = new Text(groupMoviesDetail, SWT.MULTI | SWT.READ_ONLY | SWT.V_SCROLL | SWT.BORDER);
             GridData formData2 = new GridData();
     	    formData2.horizontalSpan = 5;
     	    formData2.verticalSpan = 5;
@@ -604,8 +608,8 @@
             GridData text1LData2 = new GridData();
     	    text1LData2.horizontalAlignment = GridData.FILL;
     	    text1LData2.heightHint = 20;
-    	    text1LData2.horizontalSpan = 1;
     	    text1LData2.grabExcessHorizontalSpace = true;
+    	    text1LData2.verticalSpan = 2;
     	    buttonMoviesEditDirectors.setLayoutData(text1LData2);        
             buttonMoviesEditDirectors.addSelectionListener(new SelectionAdapter() {
                 public void widgetSelected(SelectionEvent evt) {
@@ -615,15 +619,24 @@
             });  
         }
         {
+            listMoviesDirectors = new List(groupMoviesDetail, SWT.BORDER);
+            GridData listMoviesDirectorsLData = new GridData();
+            listMoviesDirectorsLData.horizontalAlignment = GridData.FILL;
+            listMoviesDirectorsLData.horizontalSpan = 5;
+            listMoviesDirectorsLData.verticalSpan = 2;
+            listMoviesDirectors.setLayoutData(listMoviesDirectorsLData);
+        }
+        {
             buttonMoviesEditActors = new Button(groupMoviesDetail
                     , SWT.NONE);
             buttonMoviesEditActors.setText(l
                 .getString("movies.button.editactors"));
             buttonMoviesEditActors.setEnabled(false);
             GridData text1LData2 = new GridData();
+            text1LData2.verticalSpan = 2;
+            text1LData2.horizontalSpan = 1;
     	    text1LData2.horizontalAlignment = GridData.FILL;
     	    text1LData2.heightHint = 20;
-    	    text1LData2.horizontalSpan = 5;
     	    text1LData2.grabExcessHorizontalSpace = true;
     	    buttonMoviesEditActors.setLayoutData(text1LData2);        
             buttonMoviesEditActors.addSelectionListener(new SelectionAdapter() {
@@ -634,6 +647,14 @@
             });  
         }
         {
+            listMoviesActors = new List(groupMoviesDetail, SWT.BORDER);
+            GridData listMoviesActorsLData = new GridData();
+            listMoviesActorsLData.horizontalAlignment = GridData.FILL;
+            listMoviesActorsLData.horizontalSpan = 5;
+            listMoviesActorsLData.verticalSpan = 2;
+            listMoviesActors.setLayoutData(listMoviesActorsLData);
+        }
+        {
             buttonMoviesEditGenres = new Button(groupMoviesDetail
                     , SWT.NONE);
             buttonMoviesEditGenres.setText(l
@@ -642,8 +663,8 @@
             GridData text1LData2 = new GridData();
     	    text1LData2.horizontalAlignment = GridData.FILL;
     	    text1LData2.heightHint = 20;
-    	    text1LData2.horizontalSpan = 1;
     	    text1LData2.grabExcessHorizontalSpace = true;
+    	    text1LData2.verticalSpan = 2;
     	    buttonMoviesEditGenres.setLayoutData(text1LData2);        
             buttonMoviesEditGenres.addSelectionListener(new SelectionAdapter() {
                 public void widgetSelected(SelectionEvent evt) {
@@ -653,6 +674,14 @@
             });  
         }
         {
+            listMoviesGenres = new List(groupMoviesDetail, SWT.BORDER);
+            GridData listMoviesGenresLData = new GridData();
+            listMoviesGenresLData.horizontalSpan = 5;
+            listMoviesGenresLData.verticalSpan = 2;
+            listMoviesGenresLData.horizontalAlignment = GridData.FILL;
+            listMoviesGenres.setLayoutData(listMoviesGenresLData);
+        }
+        {
             buttonMoviesEditImages = new Button(groupMoviesDetail
                     , SWT.NONE);
             buttonMoviesEditImages.setText(l
@@ -660,7 +689,7 @@
             buttonMoviesEditImages.setEnabled(false);
             GridData text1LData2 = new GridData();
     	    text1LData2.heightHint = 20;
-    	    text1LData2.horizontalSpan = 5;
+    	    text1LData2.horizontalSpan = 1;
     	    text1LData2.horizontalAlignment = GridData.FILL;
     	    buttonMoviesEditImages.setLayoutData(text1LData2);        
             buttonMoviesEditImages.addSelectionListener(new SelectionAdapter() {
@@ -671,6 +700,13 @@
             });  
         }
         {
+            listMoviesImages = new List(groupMoviesDetail, SWT.BORDER);
+            GridData listMoviesImagesLData = new GridData();
+            listMoviesImagesLData.horizontalSpan = 5;
+            listMoviesImagesLData.horizontalAlignment = GridData.FILL;
+            listMoviesImages.setLayoutData(listMoviesImagesLData);
+        }
+        {
     	    compositeButtons = new Composite(groupMoviesDetail, SWT.EMBEDDED);
     	    GridLayout composite2Layout = new GridLayout();
     	    composite2Layout.numColumns = 6;

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java	2004-11-25 00:04:42 UTC (rev 163)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java	2004-11-25 00:07:35 UTC (rev 164)
@@ -94,13 +94,13 @@
 
     public final static int MODE_EDIT = 2;
 
-    private static final int MAIN_WINDOW_WIDTH = 830;
+    private static final int MAIN_WINDOW_WIDTH = 850;
 
-    private static final int MAIN_WINDOW_HEIGHT = 520;
-    private static final int MIN_WINDOW_WIDTH = 830;
-    private static final int MIN_WINDOW_HEIGHT = 520;
-    private static final int MIN_WINDOW_X = 50;
-    private static final int MIN_WINDOW_Y = 50;
+    private static final int MAIN_WINDOW_HEIGHT = 700;
+    private static final int MIN_WINDOW_WIDTH = 850;
+    private static final int MIN_WINDOW_HEIGHT = 700;
+    private static final int MIN_WINDOW_X = 25;
+    private static final int MIN_WINDOW_Y = 25;
 
     private CTabFolder cTabFolderMain;
 
@@ -230,7 +230,7 @@
             public void controlResized(ControlEvent evt) {
                 //TODO add your code for shell.controlResized
                 //min Size of the Main Window
-                if (shell.getBounds().height < 520 || shell.getBounds().width < 830) {
+                if (shell.getBounds().height < MIN_WINDOW_HEIGHT || shell.getBounds().width < MIN_WINDOW_WIDTH) {
                     shell.setBounds(MIN_WINDOW_X,MIN_WINDOW_Y,MIN_WINDOW_WIDTH,MIN_WINDOW_HEIGHT);
                     statusLine.setStatus(StatusLineStyledText.STATUS_WARN,l.getString("status.resizewarn")); 
                 }                         



From pschneider at sheep.berlios.de  Thu Nov 25 01:10:49 2004
From: pschneider at sheep.berlios.de (Philipp Schneider at BerliOS)
Date: Thu, 25 Nov 2004 01:10:49 +0100
Subject: [Provirent-svn-commit] r165 - in project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui: . language
Message-ID: <200411250010.iAP0AnuJ017545@sheep.berlios.de>

Author: pschneider
Date: 2004-11-25 01:10:42 +0100 (Thu, 25 Nov 2004)
New Revision: 165

Added:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/SWTCalendarDialog.java
Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeImage.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositePayment.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/payment.properties
Log:


Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeImage.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeImage.java	2004-11-25 00:07:35 UTC (rev 164)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeImage.java	2004-11-25 00:10:42 UTC (rev 165)
@@ -75,7 +75,9 @@
      */
     private static final Logger logger = Logger.getLogger(CompositeImage.class);
 
-    byte[] imagebytedata;
+    private byte[] imagebytedata;
+    
+    private ImageData imagedata;
 
     private Label labelImagesResize;
 
@@ -93,7 +95,7 @@
 
     private Image ideaImage, scaledImage;
 
-    int iy, ix = 0;
+    private int iy, ix = 0;
 
     private String currentDir = "";
 
@@ -151,7 +153,7 @@
 
     private Label labelImagesDescription;
 
-    protected int mode_image;
+    private int mode_image;
 
     private StatusLineStyledText statusLine;
 
@@ -297,6 +299,9 @@
                     refreshImagesDetail(tableImagesOverview.getItem(index)
                             .getText(0));
 
+                    buttonImageDelete.setEnabled(true);
+                    buttonImageEdit.setEnabled(true);
+                    
                     if (logger.isDebugEnabled()) {
                         logger.debug("widgetSelected(SelectionEvent) - end");
                     }
@@ -514,8 +519,9 @@
                     String selectedFile = fileDialog.open();
                     if (selectedFile != null) {
 
+                        imagedata = new ImageData(selectedFile);
                         scaledImage = ideaImage = new Image(getDisplay(),
-                                selectedFile);
+                                imagedata);
 
                         canvasImg.redraw();
                         textFileUrl.setText(fileDialog.getFilterPath()
@@ -615,14 +621,20 @@
 
                     //skale the image
                     float scaleFaktor = (float) scaleResize.getSelection() / 100;
-                    if (scaleFaktor < 0.01)
-                        scaleFaktor = (float) 0.01;
-                    int newwidth = (int) (ideaImage.getBounds().width * scaleFaktor);
-                    int newheight = (int) (ideaImage.getBounds().height * scaleFaktor);
 
-                    ImageData newdata = ideaImage.getImageData().scaledTo(
+                    int newwidth = (int) (imagedata.width * scaleFaktor);
+                    int newheight = (int) (imagedata.height * scaleFaktor);
+
+                    if(newwidth== 0){
+                        newwidth = 1;
+                    }
+                    if (newheight == 0){
+                        newheight = 1;
+                    }
+                    System.out.println("newwidth: "+newwidth+" newheight: "+newheight);
+                    ImageData newdata = imagedata.scaledTo(
                             newwidth, newheight);
-
+                    imagedata = newdata;
                     scaledImage = new Image(getDisplay(), newdata);
 
                     //redraw the image
@@ -712,6 +724,7 @@
 
                         tableImagesOverview.setEnabled(false);
                         textImagesSearch.setEnabled(false);
+                        buttonSelectFile.setEnabled(true);
 
                     }
                 });
@@ -877,16 +890,14 @@
                                     .getText());
 
                             ImageLoader imageLoader = new ImageLoader();
-                            imageLoader.data = new ImageData[] { scaledImage
-                                    .getImageData() };
+                            imageLoader.data = new ImageData[] { imagedata };
                             ByteArrayOutputStream bos = new ByteArrayOutputStream();
-                            ImageData imgdata = scaledImage.getImageData();
 
-                            System.out.println(imgdata.type);
+                            System.out.println(imagedata.type);
                             System.out.println(SWT.IMAGE_JPEG);
 
                             imageLoader.save(bos,
-                                    scaledImage.getImageData().type);
+                                    imagedata.type);
 
                             tmp.setImageFile(bos.toByteArray());
 
@@ -1031,10 +1042,22 @@
                 buttonImageCancel.setEnabled(false);
                 buttonImageCancel.addSelectionListener(new SelectionAdapter() {
                     public void widgetSelected(SelectionEvent evt) {
-                        System.out
-                                .println("buttonImageCancel.widgetSelected, event="
-                                        + evt);
-                        //setImageGroupButtonSaveCancel();
+
+                        tableImagesOverview.setEnabled(true);
+                        textImagesSearch.setEnabled(true);
+                        
+                        textImagesDescription.setEnabled(false);
+                        textImagesName.setEnabled(false);
+                        
+                        buttonImageCancel.setEnabled(false);
+                        buttonImageDelete.setEnabled(false);
+                        buttonImageEdit.setEnabled(false);
+                        buttonSelectFile.setEnabled(false);
+                        buttonImageSave.setEnabled(false);
+                        buttonImageNew.setEnabled(true);
+                        scaleResize.setEnabled(false);
+                        
+                        
                     }
                 });
             }
@@ -1240,11 +1263,12 @@
 
         int maxheight = 75;
         int maxwidth = 75;
+        
+        final ImageData imgdata = new ImageData(new ByteArrayInputStream(data));
 
-        final Image image = new Image(getDisplay(), new ByteArrayInputStream(
-                data));
-        final int width = image.getBounds().width;
-        final int height = image.getBounds().height;
+        
+        final int width = imgdata.width;
+        final int height = imgdata.height;
         float scalefactor = 1;
 
         if (width > maxwidth) {
@@ -1257,13 +1281,13 @@
 
         }
 
-        final Image scaledtemp = new Image(getDisplay(), image.getImageData()
+        final Image scaledtemp = new Image(getDisplay(), imgdata
                 .scaledTo((int) (width * scalefactor),
                         (int) (height * scalefactor)));
 
-        System.out.println("Type:" + image.getImageData().type);
+        System.out.println("Type:" + imgdata.type);
 
-        image.dispose();
+        
 
         return scaledtemp;
 

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositePayment.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositePayment.java	2004-11-25 00:07:35 UTC (rev 164)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositePayment.java	2004-11-25 00:10:42 UTC (rev 165)
@@ -414,12 +414,13 @@
         {
             changeStartDateButton = new Button(groupPaymentDetail, SWT.PUSH
                 | SWT.CENTER);
-            changeStartDateButton.setText("Change");
+            changeStartDateButton.setText(l.getString("Payment.groupdetail.startdatebuttonchange"));
             GridData text1LData3 = new GridData();
+            changeStartDateButton.setEnabled(false);
             changeStartDateButton.addSelectionListener(new SelectionAdapter() {
                 public void widgetSelected(SelectionEvent evt) {
 
-                    final SWTCalendarDialog cal = new SWTCalendarDialog(getDisplay());
+                    final SWTCalendarDialog cal = new SWTCalendarDialog(getDisplay(),l.getString("Payment.groupdetail.startdatebuttonfinish"));
 
                     cal.addDateChangedListener(new SWTCalendarListener() {
 
@@ -505,13 +506,16 @@
                 textduration2.setEditable(true);
                 textduration3.setEditable(true);
                 textstartdate.setEditable(true);
+                changeStartDateButton.setEnabled(true);
                 
+                
                 buttonPaymentCancel.setEnabled(true);
                 buttonPaymentSave.setEnabled(true);
                 buttonPaymentNew.setEnabled(false);
                 buttonPaymentEdit.setEnabled(false);
                 buttonPaymentDelete.setEnabled(false);
                 
+                
                 textPaymentSearch.setEditable(false);
                 tablePayment.setEnabled(false);
 
@@ -534,6 +538,7 @@
                 textduration2.setEditable(true);                
                 textduration3.setEditable(true);
                 textstartdate.setEditable(true);
+                changeStartDateButton.setEnabled(true);
                 
                 textduration1.setFocus();
                 
@@ -807,6 +812,7 @@
         textduration2.setEditable(false);
         textduration3.setEditable(false);
         textstartdate.setEditable(false);
+        changeStartDateButton.setEnabled(false);
         textPaymentSearch.setEditable(true);
 
         // PaymentTabelle aktivieren

Added: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/SWTCalendarDialog.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/SWTCalendarDialog.java	2004-11-25 00:07:35 UTC (rev 164)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/SWTCalendarDialog.java	2004-11-25 00:10:42 UTC (rev 165)
@@ -0,0 +1,37 @@
+package de.hsharz.provirent.management.gui;
+
+import java.text.DateFormat;import java.util.Calendar;import java.util.Date;import org.eclipse.swt.SWT;import org.eclipse.swt.events.SelectionAdapter;import org.eclipse.swt.events.SelectionEvent;import org.eclipse.swt.layout.GridData;import org.eclipse.swt.layout.GridLayout;import org.eclipse.swt.layout.RowLayout;import org.eclipse.swt.widgets.Button;import org.eclipse.swt.widgets.Display;import org.eclipse.swt.widgets.Shell;import org.vafada.swtcalendar.SWTCalendar;import org.vafada.swtcalendar.SWTCalendarEvent;import org.vafada.swtcalendar.SWTCalendarListener;
+
+/*** This code was generated using CloudGarden's Jigloo* SWT/Swing GUI Builder, which is free for non-commercial* use. If Jigloo is being used commercially (ie, by a corporation,* company or business for any purpose whatever) then you* should purchase a license for each developer using Jigloo.* Please visit www.cloudgarden.com for details.* Use of Jigloo implies acceptance of these licensing terms.* ************************************** A COMMERCIAL LICENSE HAS NOT BEEN PURCHASED* for this machine, so Jigloo or this code cannot be used legally* for any corporate or commercial purpose.* **************************************/public class SWTCalendarDialog {
+    private Shell shell;
+    private SWTCalendar swtcal;
+    private Display display;    
+
+    public SWTCalendarDialog(Display display, String finishbut) {
+        this.display = display;
+        shell = new Shell(display, SWT.APPLICATION_MODAL | SWT.CLOSE);        GridLayout grid = new GridLayout();        grid.numColumns = 1;        shell.setLayout(grid);
+        swtcal = new SWTCalendar(shell);        Button finish = new Button(shell, SWT.PUSH                | SWT.CENTER);        finish.setText(finishbut);        GridData text1LData3 = new GridData();
+        text1LData3.horizontalAlignment = GridData.FILL;        text1LData3.horizontalSpan = 1;        text1LData3.grabExcessHorizontalSpace = true;        finish.setLayoutData(text1LData3);                finish.addSelectionListener(new SelectionAdapter() {            public void widgetSelected(SelectionEvent evt) {                shell.close();                }});                        }
+
+    public void open() {
+        shell.pack();
+        shell.open();
+        while (!shell.isDisposed()) {
+            if (!display.readAndDispatch()) display.sleep();
+        }
+    }
+
+    public Calendar getCalendar() {
+        return swtcal.getCalendar();
+    }
+
+    public void setDate(Date date) {
+        Calendar calendar = Calendar.getInstance();
+        calendar.setTime(date);
+        swtcal.setCalendar(calendar);
+    }    public void setCalendar(Calendar cal){        swtcal.setCalendar(cal);    }
+
+    public void addDateChangedListener(SWTCalendarListener listener) {
+        swtcal.addSWTCalendarListener(listener);
+    }
+}

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/payment.properties
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/payment.properties	2004-11-25 00:07:35 UTC (rev 164)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/payment.properties	2004-11-25 00:10:42 UTC (rev 165)
@@ -23,8 +23,9 @@
 Payment.groupdetail.duration2label=Preis f?r 3 Tage
 Payment.groupdetail.duration3label=Preis f?r 7 Tage
 Payment.groupdetail.startdatelabel=G?ltig ab
+Payment.groupdetail.startdatebuttonchange=?ndern
+Payment.groupdetail.startdatebuttonfinish=Fertig
 
-
 Payment.groupdetail.savebutton.warn.noname.title=Datensatz speichern
 Payment.groupdetail.savebutton.warn.noname.msg=Der Datensatz kann nicht gespeichert werden. \n Bitte geben Sie einen Namen an
 Payment.groupdetail.savebutton.newok=Speichern der neuen Preisklasse erfolgreich.



From pschneider at sheep.berlios.de  Thu Nov 25 01:27:55 2004
From: pschneider at sheep.berlios.de (Philipp Schneider at BerliOS)
Date: Thu, 25 Nov 2004 01:27:55 +0100
Subject: [Provirent-svn-commit] r166 - project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui
Message-ID: <200411250027.iAP0Rt4Q028001@sheep.berlios.de>

Author: pschneider
Date: 2004-11-25 01:27:43 +0100 (Thu, 25 Nov 2004)
New Revision: 166

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositePayment.java
Log:
- Fehler beim Speichern behoben

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositePayment.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositePayment.java	2004-11-25 00:10:42 UTC (rev 165)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositePayment.java	2004-11-25 00:27:43 UTC (rev 166)
@@ -4,6 +4,7 @@
 import java.text.MessageFormat;
 import java.text.ParseException;
 import java.text.SimpleDateFormat;
+import java.util.Calendar;
 import java.util.Date;
 import java.util.Locale;
 import java.util.PropertyResourceBundle;
@@ -410,6 +411,7 @@
             text1LData3.horizontalSpan = 3;
             text1LData3.grabExcessHorizontalSpace = true;
             textstartdate.setLayoutData(text1LData3);
+            textstartdate.setEditable(false);
         }
         {
             changeStartDateButton = new Button(groupPaymentDetail, SWT.PUSH
@@ -505,7 +507,7 @@
                 textduration1.setEditable(true);
                 textduration2.setEditable(true);
                 textduration3.setEditable(true);
-                textstartdate.setEditable(true);
+                //textstartdate.setEditable(true);
                 changeStartDateButton.setEnabled(true);
                 
                 
@@ -537,7 +539,7 @@
                 textduration1.setEditable(true);
                 textduration2.setEditable(true);                
                 textduration3.setEditable(true);
-                textstartdate.setEditable(true);
+                //textstartdate.setEditable(true);
                 changeStartDateButton.setEnabled(true);
                 
                 textduration1.setFocus();
@@ -653,11 +655,7 @@
         buttonPaymentSave.setEnabled(false);
         buttonPaymentSave.addSelectionListener(new SelectionAdapter() {
             public void widgetSelected(SelectionEvent evt) {
-                System.out
-                        .println("buttonPaymentSave.widgetSelected, event="
-                                + evt);
-
-                
+    
                 //testen ob duration leer ist
                 if (   textPaymentName.getText().trim().equalsIgnoreCase("") ||
                        textduration1.getText().trim().equalsIgnoreCase("") || 
@@ -683,22 +681,20 @@
                      */
 	                    
                     try {	
+                        
+                        Calendar tmp_cal = Calendar.getInstance();
+                        tmp_cal.setTime(DateFormat.getDateInstance(DateFormat.LONG).parse(textstartdate.getText()));
                     	//neues Objekt erzeugen
 	                    Payment tmp = new Payment(textPaymentName.getText(), 
                             			Float.parseFloat(textduration1.getText()),
                             			Float.parseFloat(textduration2.getText()), 
                             			Float.parseFloat(textduration3.getText()),
-                            			Util.getDateByText(textstartdate.getText()));
+                            			tmp_cal);
                     
                     
                         //object speichern
                         // Fehlerbehandlung
-                        Object o = Database.saveObject(
-                                new Payment(textPaymentName.getText(), 
-                                        Float.parseFloat(textduration1.getText()),
-                                        Float.parseFloat(textduration2.getText()), 
-                                        Float.parseFloat(textduration3.getText()),
-                                        Util.getDateByText(textstartdate.getText())));
+                        Object o = Database.saveObject(tmp);
                         
                         // in ?bersichtstabelle einf?gen
                         insertIntoPaymentTable((Payment)o);
@@ -725,6 +721,10 @@
                             e.printStackTrace();
                         }
                         
+                    } catch (ParseException pex){
+                        statusLine.setStatus(3,l.getString("Payment.groupdetail.savebutton.errorsave"));
+                        showMsg(l.getString("Payment.groupdetail.savebutton.errorsave"),"Fehler", SWT.ICON_ERROR | SWT.OK);
+                        
                     }
                     
                     
@@ -733,11 +733,15 @@
                     
                 } else if (mode_Payment == ManagementGui.MODE_EDIT) {
                     try {
+                        
+                        Calendar tmp_cal = Calendar.getInstance();
+                        tmp_cal.setTime(DateFormat.getDateInstance(DateFormat.LONG).parse(textstartdate.getText()));
+                        
 	                    Payment tmp = new Payment(textPaymentName.getText(), 
 	                            Float.parseFloat(textduration1.getText()),
 	                            Float.parseFloat(textduration2.getText()), 
 	                            Float.parseFloat(textduration3.getText()),
-	                            Util.getDateByText(textstartdate.getText()));
+	                            tmp_cal);
 	                    tmp.setPaymentId(new Integer(Integer.parseInt(textPaymentID.getText())));
 	                
 	                    //object speichern
@@ -767,7 +771,11 @@
 	                        e.printStackTrace();
 	                    }
                     
-	                }
+                    } catch (ParseException pex){
+                        statusLine.setStatus(3,l.getString("Payment.groupdetail.savebutton.errorsave"));
+                        showMsg(l.getString("Payment.groupdetail.savebutton.errorsave"),"Fehler", SWT.ICON_ERROR | SWT.OK);
+                        
+                    }
                     
  
                     //alle Buttons auf aktiv setzen
@@ -811,7 +819,7 @@
         textduration1.setEditable(false);
         textduration2.setEditable(false);
         textduration3.setEditable(false);
-        textstartdate.setEditable(false);
+        //textstartdate.setEditable(false);
         changeStartDateButton.setEnabled(false);
         textPaymentSearch.setEditable(true);
 



From pschneider at sheep.berlios.de  Thu Nov 25 11:23:55 2004
From: pschneider at sheep.berlios.de (Philipp Schneider at BerliOS)
Date: Thu, 25 Nov 2004 11:23:55 +0100
Subject: [Provirent-svn-commit] r167 - project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui
Message-ID: <200411251023.iAPANt6V027816@sheep.berlios.de>

Author: pschneider
Date: 2004-11-25 11:23:53 +0100 (Thu, 25 Nov 2004)
New Revision: 167

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java
Log:
- beispiel f?\195?\188r buttons

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java	2004-11-25 00:27:43 UTC (rev 166)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java	2004-11-25 10:23:53 UTC (rev 167)
@@ -108,7 +108,6 @@
     private Button buttonMoviesCancel;
     private Button buttonMoviesDelete;
     private Button buttonMoviesFill;
-    private Button buttonMoviesEditActors;
     private Button buttonMoviesEditDirectors;
     private Button buttonMoviesEditGenres;
     private Button buttonMoviesEditImages;
@@ -117,6 +116,11 @@
     
     private Composite parent;
     private Composite compositeButtons;
+    private Label label1;
+    private Button button4;
+    private Button button3;
+    private Button button2;
+    private Button button1;
     private List listMoviesImages;
     private List listMoviesGenres;
     private List listMoviesActors;
@@ -502,7 +506,7 @@
             GridLayout group2Layout = new GridLayout();
             GridData group2LData = new GridData();
             group2Layout.verticalSpacing = 15;
-            group2Layout.numColumns = 6;
+            group2Layout.numColumns = 12;
             groupMoviesDetail.setText(l.getString("movies.groupdetail.label"));   
             FormData formData = new FormData();
             groupMoviesDetail.setLayout(group2Layout);
@@ -521,6 +525,7 @@
     	    GridData formData2 = new GridData();
     	    formData2.heightHint = 15;
     	    formData2.horizontalAlignment = GridData.FILL;
+    	    formData2.horizontalSpan=2;
     	    labelMoviesID.setLayoutData(formData2);
     	}
     	{
@@ -530,7 +535,7 @@
     	    GridData text1LData1 = new GridData();
     	    text1LData1.horizontalAlignment = GridData.FILL;
     	    text1LData1.heightHint = 13;
-    	    text1LData1.horizontalSpan = 5;
+    	    text1LData1.horizontalSpan = 10;
     	    text1LData1.grabExcessHorizontalSpace = true;
     	    textMoviesID.setLayoutData(text1LData1);
     	}
@@ -545,6 +550,7 @@
             GridData labelActorNameLData = new GridData();
             labelActorNameLData.heightHint = 15;
             labelActorNameLData.horizontalAlignment = GridData.FILL;
+            labelActorNameLData.horizontalSpan=2;
             labelMoviesTitle.setLayoutData(labelActorNameLData);
         }
         {
@@ -553,7 +559,7 @@
     	    GridData text1LData2 = new GridData();
     	    text1LData2.horizontalAlignment = GridData.FILL;
     	    text1LData2.heightHint = 13;
-    	    text1LData2.horizontalSpan = 5;
+    	    text1LData2.horizontalSpan = 10;
     	    text1LData2.grabExcessHorizontalSpace = true;
     	    textMoviesTitle.setLayoutData(text1LData2);        
     	}     
@@ -568,6 +574,7 @@
             GridData labelActorNameLData = new GridData();
             labelActorNameLData.heightHint = 15;
             labelActorNameLData.horizontalAlignment = GridData.FILL;
+            labelActorNameLData.horizontalSpan=2;
             labelMoviesDate.setLayoutData(labelActorNameLData);
         }
         {
@@ -576,7 +583,7 @@
             GridData text1LData2 = new GridData();
             text1LData2.horizontalAlignment = GridData.FILL;
             text1LData2.heightHint = 13;
-            text1LData2.horizontalSpan = 5;
+            text1LData2.horizontalSpan = 10;
             text1LData2.grabExcessHorizontalSpace = true;
             textMoviesDate.setLayoutData(text1LData2);
             textMoviesDate.setText(l.getString("movies.groupdetail.textdate"));
@@ -586,15 +593,15 @@
     	    labelMoviesAdvice = new Label(groupMoviesDetail, SWT.NONE);
     	    labelMoviesAdvice.setText(l.getString("movies.groupdetail.textdescription"));
     	    GridData formData2 = new GridData();
-    	    formData2.horizontalSpan = 1;
-    	    formData2.verticalSpan = 5;
+    	    //formData2.verticalSpan = 5;
+    	    formData2.horizontalSpan=2;
     	    labelMoviesAdvice.setLayoutData(formData2);
     	}
         {
             textMoviesDescription = new Text(groupMoviesDetail, SWT.MULTI | SWT.READ_ONLY | SWT.V_SCROLL | SWT.BORDER);
             GridData formData2 = new GridData();
-    	    formData2.horizontalSpan = 5;
-    	    formData2.verticalSpan = 5;
+    	    formData2.horizontalSpan = 10;
+    	    //formData2.verticalSpan = 5;
     	    formData2.verticalAlignment = GridData.FILL;
     	    formData2.horizontalAlignment = GridData.FILL;
     	    textMoviesDescription.setLayoutData(formData2);
@@ -610,6 +617,7 @@
     	    text1LData2.heightHint = 20;
     	    text1LData2.grabExcessHorizontalSpace = true;
     	    text1LData2.verticalSpan = 2;
+    	    text1LData2.horizontalSpan=2;
     	    buttonMoviesEditDirectors.setLayoutData(text1LData2);        
             buttonMoviesEditDirectors.addSelectionListener(new SelectionAdapter() {
                 public void widgetSelected(SelectionEvent evt) {
@@ -622,39 +630,66 @@
             listMoviesDirectors = new List(groupMoviesDetail, SWT.BORDER);
             GridData listMoviesDirectorsLData = new GridData();
             listMoviesDirectorsLData.horizontalAlignment = GridData.FILL;
-            listMoviesDirectorsLData.horizontalSpan = 5;
+            listMoviesDirectorsLData.horizontalSpan = 10;
             listMoviesDirectorsLData.verticalSpan = 2;
             listMoviesDirectors.setLayoutData(listMoviesDirectorsLData);
         }
         {
-            buttonMoviesEditActors = new Button(groupMoviesDetail
-                    , SWT.NONE);
-            buttonMoviesEditActors.setText(l
-                .getString("movies.button.editactors"));
-            buttonMoviesEditActors.setEnabled(false);
+            label1 = new Label(groupMoviesDetail, SWT.NONE);
+            label1.setText("Actors");
             GridData text1LData2 = new GridData();
-            text1LData2.verticalSpan = 2;
-            text1LData2.horizontalSpan = 1;
-    	    text1LData2.horizontalAlignment = GridData.FILL;
-    	    text1LData2.heightHint = 20;
-    	    text1LData2.grabExcessHorizontalSpace = true;
-    	    buttonMoviesEditActors.setLayoutData(text1LData2);        
-            buttonMoviesEditActors.addSelectionListener(new SelectionAdapter() {
-                public void widgetSelected(SelectionEvent evt) {
-                   // TODO
-                    
-                }
-            });  
+    	    text1LData2.horizontalSpan = 2;
+    	    text1LData2.verticalAlignment = GridData.BEGINNING;
+    	    label1.setLayoutData(text1LData2);              
         }
+   
         {
             listMoviesActors = new List(groupMoviesDetail, SWT.BORDER);
             GridData listMoviesActorsLData = new GridData();
             listMoviesActorsLData.horizontalAlignment = GridData.FILL;
-            listMoviesActorsLData.horizontalSpan = 5;
-            listMoviesActorsLData.verticalSpan = 2;
+            listMoviesActorsLData.horizontalSpan = 10;
+            listMoviesActorsLData.verticalSpan = 3;
+            listMoviesActorsLData.grabExcessHorizontalSpace = true;
+            listMoviesActorsLData.verticalAlignment = GridData.FILL;
             listMoviesActors.setLayoutData(listMoviesActorsLData);
         }
         {
+            button3 = new Button(groupMoviesDetail, SWT.PUSH | SWT.CENTER);
+            button3.setText("add");
+            GridData text1LData2 = new GridData();
+            text1LData2.widthHint=40;
+            text1LData2.verticalAlignment = GridData.BEGINNING;
+            text1LData2.horizontalAlignment = GridData.END;
+            button3.setLayoutData(text1LData2);            
+        }
+        {
+            button1 = new Button(groupMoviesDetail, SWT.PUSH | SWT.CENTER);
+            button1.setText("up");
+            GridData text1LData2 = new GridData();
+            text1LData2.widthHint=40;
+            text1LData2.verticalAlignment = GridData.BEGINNING;
+            text1LData2.horizontalAlignment = GridData.END;
+            button1.setLayoutData(text1LData2);
+        }
+        {
+            button4 = new Button(groupMoviesDetail, SWT.PUSH | SWT.CENTER);
+            button4.setText("remove");
+            GridData text1LData2 = new GridData();
+            text1LData2.widthHint=40;
+            text1LData2.verticalAlignment = GridData.BEGINNING;
+            text1LData2.horizontalAlignment = GridData.END;
+            button4.setLayoutData(text1LData2);
+        }
+        {
+            button2 = new Button(groupMoviesDetail, SWT.PUSH | SWT.CENTER);
+            button2.setText("down");
+            GridData text1LData2 = new GridData();
+    	    text1LData2.verticalAlignment = GridData.BEGINNING;
+    	    text1LData2.widthHint=40;
+    	    text1LData2.horizontalAlignment = GridData.END;
+    	    button2.setLayoutData(text1LData2);            
+        }    
+        {
             buttonMoviesEditGenres = new Button(groupMoviesDetail
                     , SWT.NONE);
             buttonMoviesEditGenres.setText(l
@@ -664,6 +699,7 @@
     	    text1LData2.horizontalAlignment = GridData.FILL;
     	    text1LData2.heightHint = 20;
     	    text1LData2.grabExcessHorizontalSpace = true;
+    	    text1LData2.horizontalSpan=2;
     	    text1LData2.verticalSpan = 2;
     	    buttonMoviesEditGenres.setLayoutData(text1LData2);        
             buttonMoviesEditGenres.addSelectionListener(new SelectionAdapter() {
@@ -676,7 +712,7 @@
         {
             listMoviesGenres = new List(groupMoviesDetail, SWT.BORDER);
             GridData listMoviesGenresLData = new GridData();
-            listMoviesGenresLData.horizontalSpan = 5;
+            listMoviesGenresLData.horizontalSpan = 10;
             listMoviesGenresLData.verticalSpan = 2;
             listMoviesGenresLData.horizontalAlignment = GridData.FILL;
             listMoviesGenres.setLayoutData(listMoviesGenresLData);
@@ -690,6 +726,7 @@
             GridData text1LData2 = new GridData();
     	    text1LData2.heightHint = 20;
     	    text1LData2.horizontalSpan = 1;
+    	    text1LData2.horizontalSpan=2;
     	    text1LData2.horizontalAlignment = GridData.FILL;
     	    buttonMoviesEditImages.setLayoutData(text1LData2);        
             buttonMoviesEditImages.addSelectionListener(new SelectionAdapter() {
@@ -702,7 +739,7 @@
         {
             listMoviesImages = new List(groupMoviesDetail, SWT.BORDER);
             GridData listMoviesImagesLData = new GridData();
-            listMoviesImagesLData.horizontalSpan = 5;
+            listMoviesImagesLData.horizontalSpan = 10;
             listMoviesImagesLData.horizontalAlignment = GridData.FILL;
             listMoviesImages.setLayoutData(listMoviesImagesLData);
         }
@@ -715,7 +752,7 @@
     	    composite2LData.verticalAlignment = GridData.END;
     	    composite2LData.horizontalAlignment = GridData.CENTER;
     	    composite2LData.widthHint = 391;
-    	    composite2LData.horizontalSpan = 6;
+    	    composite2LData.horizontalSpan = 12;
     	    composite2LData.grabExcessHorizontalSpace = true;
         	composite2LData.grabExcessVerticalSpace = true;
         	composite2LData.heightHint = 35;
@@ -743,7 +780,7 @@
                 buttonMoviesEdit.setEnabled(false);
                 buttonMoviesDelete.setEnabled(false);
                 buttonMoviesEditDirectors.setEnabled(true);
-                buttonMoviesEditActors.setEnabled(true);
+               // buttonMoviesEditActors.setEnabled(true);
                 buttonMoviesEditGenres.setEnabled(true);
                 buttonMoviesEditImages.setEnabled(true);
                 
@@ -1023,7 +1060,7 @@
         buttonMoviesEdit.setEnabled(false);
         buttonMoviesDelete.setEnabled(false);
         buttonMoviesEditDirectors.setEnabled(false);
-        buttonMoviesEditActors.setEnabled(false);
+        //buttonMoviesEditActors.setEnabled(false);
         buttonMoviesEditGenres.setEnabled(false);
         buttonMoviesEditImages.setEnabled(false);
     }



From rgriesch at sheep.berlios.de  Thu Nov 25 12:51:32 2004
From: rgriesch at sheep.berlios.de (Remo Griesch at BerliOS)
Date: Thu, 25 Nov 2004 12:51:32 +0100
Subject: [Provirent-svn-commit] r168 - in project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui: . language
Message-ID: <200411251151.iAPBpWXw004744@sheep.berlios.de>

Author: rgriesch
Date: 2004-11-25 12:51:25 +0100 (Thu, 25 Nov 2004)
New Revision: 168

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/movies.properties
Log:
Composite Movie -Layout beendet !! hoffentlich!!

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java	2004-11-25 10:23:53 UTC (rev 167)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java	2004-11-25 11:51:25 UTC (rev 168)
@@ -100,7 +100,11 @@
     private Label labelMoviesID;
     private Label labelMoviesTitle;
     private Label labelMoviesDate;
-    private Label labelMoviesAdvice;
+    private Label labelMoviesDescription;
+    private Label labelMoviesDirectors;
+    private Label labelMoviesActors;
+    private Label labelMoviesGenres;
+    private Label labelMoviesImages;
     
     private Button buttonMoviesNew;
     private Button buttonMoviesSave;
@@ -108,19 +112,37 @@
     private Button buttonMoviesCancel;
     private Button buttonMoviesDelete;
     private Button buttonMoviesFill;
+<<<<<<< .mine
+    private Button buttonMoviesAddActors;
+    private Button buttonMoviesDeleteActors;
+    private Button buttonMoviesAddDirectors;
+    private Button buttonMoviesDeleteDirectors;
+    private Button buttonMoviesAddGenres;
+    private Button buttonMoviesDeleteGenres;
+    private Button buttonMoviesAddImages;
+    private Button buttonMoviesDeleteImages;
+=======
     private Button buttonMoviesEditDirectors;
     private Button buttonMoviesEditGenres;
     private Button buttonMoviesEditImages;
+>>>>>>> .r167
      
     private SashForm sashForm1;
     
     private Composite parent;
     private Composite compositeButtons;
+<<<<<<< .mine
+    private Composite compositeMoviesEditDirectors;
+    private Composite compositeMoviesEditActors;
+    private Composite compositeMoviesEditGenres;
+    private Composite compositeMoviesEditImages;
+=======
     private Label label1;
     private Button button4;
     private Button button3;
     private Button button2;
     private Button button1;
+>>>>>>> .r167
     private List listMoviesImages;
     private List listMoviesGenres;
     private List listMoviesActors;
@@ -204,7 +226,7 @@
         }
 
         this.setLayout(new GridLayout());
-        this.setSize(900, 650);
+        this.setSize(830, 650);
         {
             groupMovie = new Group(this, SWT.NONE);
             GridLayout groupMovieLayout = new GridLayout();
@@ -256,11 +278,7 @@
             groupMoviesOverview.setText(l.getString("movies.groupoverview.label"));
             
             {// table Actors Overview
-                tableMoviesOverview = new Table(
-                    groupMoviesOverview,
-                    SWT.SINGLE
-                        | SWT.FULL_SELECTION
-                        | SWT.V_SCROLL | SWT.BORDER);
+                tableMoviesOverview = new Table(groupMoviesOverview, SWT.SINGLE | SWT.FULL_SELECTION | SWT.V_SCROLL | SWT.BORDER);
                 GridData tableMoviesOverviewLData = new GridData();
                 tableMoviesOverview.setHeaderVisible(true);
                 tableMoviesOverview.setLinesVisible(true);
@@ -502,7 +520,7 @@
     private void initMoviesDetail() {
         // Group Actors Detail
         {
-            groupMoviesDetail = new Group(sashForm1, SWT.NONE);
+            groupMoviesDetail = new Group(sashForm1, SWT.H_SCROLL);
             GridLayout group2Layout = new GridLayout();
             GridData group2LData = new GridData();
             group2Layout.verticalSpacing = 15;
@@ -590,12 +608,12 @@
         }
         //labels and buttons for Detail
         {
-    	    labelMoviesAdvice = new Label(groupMoviesDetail, SWT.NONE);
-    	    labelMoviesAdvice.setText(l.getString("movies.groupdetail.textdescription"));
+    	    labelMoviesDescription = new Label(groupMoviesDetail, SWT.NONE);
+    	    labelMoviesDescription.setText(l.getString("movies.groupdetail.labeldescription"));
     	    GridData formData2 = new GridData();
     	    //formData2.verticalSpan = 5;
     	    formData2.horizontalSpan=2;
-    	    labelMoviesAdvice.setLayoutData(formData2);
+    	    labelMoviesDescription.setLayoutData(formData2);
     	}
         {
             textMoviesDescription = new Text(groupMoviesDetail, SWT.MULTI | SWT.READ_ONLY | SWT.V_SCROLL | SWT.BORDER);
@@ -606,7 +624,42 @@
     	    formData2.horizontalAlignment = GridData.FILL;
     	    textMoviesDescription.setLayoutData(formData2);
         }
+        //      EditDirectors
         {
+<<<<<<< .mine
+            compositeMoviesEditDirectors = new Composite(groupMoviesDetail, SWT.NONE);
+            GridLayout composite1Layout = new GridLayout();
+            GridData composite1LData = new GridData();
+            composite1LData.horizontalAlignment = GridData.FILL;
+            composite1LData.horizontalSpan=1;
+            composite1LData.verticalSpan=1;
+            compositeMoviesEditDirectors.setLayoutData(composite1LData);
+            composite1Layout.numColumns = 2;
+            compositeMoviesEditDirectors.setLayout(composite1Layout);
+        }
+        	{
+        	    labelMoviesDirectors = new Label(compositeMoviesEditDirectors, SWT.NONE);
+        	    labelMoviesDirectors.setText(l.getString("movies.groupdetail.labeldirectors"));
+        	    GridData formData2 = new GridData();
+        	    formData2.horizontalSpan = 2;
+        	    formData2.verticalSpan = 5;
+        	    labelMoviesDirectors.setLayoutData(formData2);
+        	}
+        	{
+        	    buttonMoviesAddDirectors = new Button(compositeMoviesEditDirectors
+        	            , SWT.NONE);
+        	    buttonMoviesAddDirectors.setText(l
+        	            .getString("movies.button.additem"));
+        	    buttonMoviesAddDirectors.setEnabled(false);
+        	    GridData text1LData2 = new GridData();
+        	    text1LData2.heightHint = 20;
+        	    text1LData2.horizontalSpan =1;
+        	    text1LData2.horizontalAlignment = GridData.BEGINNING;
+        	    buttonMoviesAddDirectors.setLayoutData(text1LData2);        
+        	    buttonMoviesAddDirectors.addSelectionListener(new SelectionAdapter() {
+        	        public void widgetSelected(SelectionEvent evt) {
+        	            // TODO
+=======
             buttonMoviesEditDirectors = new Button(groupMoviesDetail
                     , SWT.NONE);
             buttonMoviesEditDirectors.setText(l
@@ -622,18 +675,93 @@
             buttonMoviesEditDirectors.addSelectionListener(new SelectionAdapter() {
                 public void widgetSelected(SelectionEvent evt) {
                    // TODO
+>>>>>>> .r167
                     
-                }
-            });  
-        }
+        	        }
+        	    });  
+        	}
+        	{
+        	    buttonMoviesDeleteDirectors = new Button(compositeMoviesEditDirectors, SWT.NONE);
+        	    buttonMoviesDeleteDirectors.setText(l
+        	            .getString("movies.button.deleteitem"));
+        	    buttonMoviesDeleteDirectors.setEnabled(false);
+        	    GridData text1LData2 = new GridData();
+        	    text1LData2.horizontalAlignment = GridData.BEGINNING;
+        	    text1LData2.heightHint = 20;
+        	    text1LData2.horizontalSpan =1;
+        	    buttonMoviesDeleteDirectors.setLayoutData(text1LData2);        
+        	    buttonMoviesDeleteDirectors.addSelectionListener(new SelectionAdapter() {
+        	        public void widgetSelected(SelectionEvent evt) {
+        	            // TODO
+                    
+        	        }
+        	    });  
+        	}
         {
             listMoviesDirectors = new List(groupMoviesDetail, SWT.BORDER);
             GridData listMoviesDirectorsLData = new GridData();
             listMoviesDirectorsLData.horizontalAlignment = GridData.FILL;
             listMoviesDirectorsLData.horizontalSpan = 10;
-            listMoviesDirectorsLData.verticalSpan = 2;
+            listMoviesDirectorsLData.verticalSpan = 1;
             listMoviesDirectors.setLayoutData(listMoviesDirectorsLData);
+        }// EditDirectors
+        // Edit Actors
+        {
+            compositeMoviesEditActors = new Composite(groupMoviesDetail, SWT.NONE);
+            GridLayout composite1Layout = new GridLayout();
+            GridData composite1LData = new GridData();
+            composite1LData.horizontalAlignment = GridData.FILL;
+            composite1LData.horizontalSpan=1;
+            composite1LData.verticalSpan=1;
+            compositeMoviesEditActors.setLayoutData(composite1LData);
+            composite1Layout.numColumns = 2;
+            compositeMoviesEditActors.setLayout(composite1Layout);
         }
+<<<<<<< .mine
+        	{
+        	    labelMoviesActors = new Label(compositeMoviesEditActors, SWT.NONE);
+        	    labelMoviesActors.setText(l.getString("movies.groupdetail.labelactors"));
+        	    GridData formData2 = new GridData();
+        	    formData2.horizontalSpan = 2;
+        	    formData2.verticalSpan = 5;
+        	    labelMoviesActors.setLayoutData(formData2);
+        	}
+        	{
+        	    buttonMoviesAddActors = new Button(compositeMoviesEditActors
+        	            , SWT.NONE);
+        	    buttonMoviesAddActors.setText(l
+        	            .getString("movies.button.additem"));
+        	    buttonMoviesAddActors.setEnabled(false);
+        	    GridData text1LData2 = new GridData();
+        	    text1LData2.heightHint = 20;
+        	    text1LData2.horizontalSpan =1;
+        	    text1LData2.horizontalAlignment = GridData.BEGINNING;
+        	    buttonMoviesAddActors.setLayoutData(text1LData2);        
+        	    buttonMoviesAddActors.addSelectionListener(new SelectionAdapter() {
+        	        public void widgetSelected(SelectionEvent evt) {
+        	            // TODO
+                    
+        	        }
+        	    });  
+        	}
+        	{
+        	    buttonMoviesDeleteActors = new Button(compositeMoviesEditActors, SWT.NONE);
+        	    buttonMoviesDeleteActors.setText(l
+        	            .getString("movies.button.deleteitem"));
+        	    buttonMoviesDeleteActors.setEnabled(false);
+        	    GridData text1LData2 = new GridData();
+        	    text1LData2.horizontalAlignment = GridData.BEGINNING;
+        	    text1LData2.heightHint = 20;
+        	    text1LData2.horizontalSpan =1;
+        	    buttonMoviesDeleteActors.setLayoutData(text1LData2);        
+        	    buttonMoviesDeleteActors.addSelectionListener(new SelectionAdapter() {
+        	        public void widgetSelected(SelectionEvent evt) {
+        	            // TODO
+                    
+        	        }
+        	    });  
+        	}
+=======
         {
             label1 = new Label(groupMoviesDetail, SWT.NONE);
             label1.setText("Actors");
@@ -642,17 +770,59 @@
     	    text1LData2.verticalAlignment = GridData.BEGINNING;
     	    label1.setLayoutData(text1LData2);              
         }
+>>>>>>> .r167
    
         {
             listMoviesActors = new List(groupMoviesDetail, SWT.BORDER);
             GridData listMoviesActorsLData = new GridData();
             listMoviesActorsLData.horizontalAlignment = GridData.FILL;
+<<<<<<< .mine
+            listMoviesActorsLData.horizontalSpan = 5;
+            listMoviesActorsLData.verticalSpan = 1;
+=======
             listMoviesActorsLData.horizontalSpan = 10;
             listMoviesActorsLData.verticalSpan = 3;
             listMoviesActorsLData.grabExcessHorizontalSpace = true;
             listMoviesActorsLData.verticalAlignment = GridData.FILL;
+>>>>>>> .r167
             listMoviesActors.setLayoutData(listMoviesActorsLData);
+        }//Edit Actors
+        //Edit Genres
+        {
+            compositeMoviesEditGenres = new Composite(groupMoviesDetail, SWT.NONE);
+            GridLayout composite1Layout = new GridLayout();
+            GridData composite1LData = new GridData();
+            composite1LData.horizontalAlignment = GridData.FILL;
+            composite1LData.horizontalSpan=1;
+            composite1LData.verticalSpan=1;
+            compositeMoviesEditGenres.setLayoutData(composite1LData);
+            composite1Layout.numColumns = 2;
+            compositeMoviesEditGenres.setLayout(composite1Layout);
         }
+<<<<<<< .mine
+        	{
+        	    labelMoviesGenres = new Label(compositeMoviesEditGenres, SWT.NONE);
+        	    labelMoviesGenres.setText(l.getString("movies.groupdetail.labelgenres"));
+        	    GridData formData2 = new GridData();
+        	    formData2.horizontalSpan = 2;
+        	    formData2.verticalSpan = 5;
+        	    labelMoviesGenres.setLayoutData(formData2);
+        	}
+        	{
+        	    buttonMoviesAddGenres = new Button(compositeMoviesEditGenres
+        	            , SWT.NONE);
+        	    buttonMoviesAddGenres.setText(l
+        	            .getString("movies.button.additem"));
+        	    buttonMoviesAddGenres.setEnabled(false);
+        	    GridData text1LData2 = new GridData();
+        	    text1LData2.heightHint = 20;
+        	    text1LData2.horizontalSpan =1;
+        	    text1LData2.horizontalAlignment = GridData.BEGINNING;
+        	    buttonMoviesAddGenres.setLayoutData(text1LData2);        
+        	    buttonMoviesAddGenres.addSelectionListener(new SelectionAdapter() {
+        	        public void widgetSelected(SelectionEvent evt) {
+        	            // TODO
+=======
         {
             button3 = new Button(groupMoviesDetail, SWT.PUSH | SWT.CENTER);
             button3.setText("add");
@@ -705,18 +875,76 @@
             buttonMoviesEditGenres.addSelectionListener(new SelectionAdapter() {
                 public void widgetSelected(SelectionEvent evt) {
                    // TODO
+>>>>>>> .r167
                     
-                }
-            });  
-        }
+        	        }
+        	    });  
+        	}
+        	{
+        	    buttonMoviesDeleteGenres = new Button(compositeMoviesEditGenres, SWT.NONE);
+        	    buttonMoviesDeleteGenres.setText(l
+        	            .getString("movies.button.deleteitem"));
+        	    buttonMoviesDeleteGenres.setEnabled(false);
+        	    GridData text1LData2 = new GridData();
+        	    text1LData2.horizontalAlignment = GridData.BEGINNING;
+        	    text1LData2.heightHint = 20;
+        	    text1LData2.horizontalSpan =1;
+        	    buttonMoviesDeleteGenres.setLayoutData(text1LData2);        
+        	    buttonMoviesDeleteGenres.addSelectionListener(new SelectionAdapter() {
+        	        public void widgetSelected(SelectionEvent evt) {
+        	            // TODO
+                    
+        	        }
+        	    });  
+        	}
         {
             listMoviesGenres = new List(groupMoviesDetail, SWT.BORDER);
             GridData listMoviesGenresLData = new GridData();
+<<<<<<< .mine
+            listMoviesGenresLData.horizontalAlignment = GridData.FILL;
+            listMoviesGenresLData.horizontalSpan = 5;
+=======
             listMoviesGenresLData.horizontalSpan = 10;
-            listMoviesGenresLData.verticalSpan = 2;
-            listMoviesGenresLData.horizontalAlignment = GridData.FILL;
+>>>>>>> .r167
+            listMoviesGenresLData.verticalSpan = 1;
             listMoviesGenres.setLayoutData(listMoviesGenresLData);
+        }// Edit Genre
+        // Edit Images
+        {
+            compositeMoviesEditImages = new Composite(groupMoviesDetail, SWT.NONE);
+            GridLayout composite1Layout = new GridLayout();
+            GridData composite1LData = new GridData();
+            composite1LData.horizontalAlignment = GridData.FILL;
+            composite1LData.horizontalSpan=1;
+            composite1LData.verticalSpan=1;
+            compositeMoviesEditImages.setLayoutData(composite1LData);
+            composite1Layout.numColumns = 2;
+            compositeMoviesEditImages.setLayout(composite1Layout);
         }
+<<<<<<< .mine
+        	{
+        	    labelMoviesImages = new Label(compositeMoviesEditImages, SWT.NONE);
+        	    labelMoviesImages.setText(l.getString("movies.groupdetail.labelimages"));
+        	    GridData formData2 = new GridData();
+        	    formData2.horizontalSpan = 2;
+        	    formData2.verticalSpan = 5;
+        	    labelMoviesImages.setLayoutData(formData2);
+        	}
+        	{
+        	    buttonMoviesAddImages = new Button(compositeMoviesEditImages
+        	            , SWT.NONE);
+        	    buttonMoviesAddImages.setText(l
+        	            .getString("movies.button.additem"));
+        	    buttonMoviesAddImages.setEnabled(false);
+        	    GridData text1LData2 = new GridData();
+        	    text1LData2.heightHint = 20;
+        	    text1LData2.horizontalSpan =1;
+        	    text1LData2.horizontalAlignment = GridData.BEGINNING;
+        	    buttonMoviesAddImages.setLayoutData(text1LData2);        
+        	    buttonMoviesAddImages.addSelectionListener(new SelectionAdapter() {
+        	        public void widgetSelected(SelectionEvent evt) {
+        	            // TODO
+=======
         {
             buttonMoviesEditImages = new Button(groupMoviesDetail
                     , SWT.NONE);
@@ -732,17 +960,41 @@
             buttonMoviesEditImages.addSelectionListener(new SelectionAdapter() {
                 public void widgetSelected(SelectionEvent evt) {
                    // TODO
+>>>>>>> .r167
                     
-                }
-            });  
-        }
+        	        }
+        	    });  
+        	}
+        	{
+        	    buttonMoviesDeleteImages = new Button(compositeMoviesEditImages, SWT.NONE);
+        	    buttonMoviesDeleteImages.setText(l
+        	            .getString("movies.button.deleteitem"));
+        	    buttonMoviesDeleteImages.setEnabled(false);
+        	    GridData text1LData2 = new GridData();
+        	    text1LData2.horizontalAlignment = GridData.BEGINNING;
+        	    text1LData2.heightHint = 20;
+        	    text1LData2.horizontalSpan =1;
+        	    buttonMoviesDeleteImages.setLayoutData(text1LData2);        
+        	    buttonMoviesDeleteImages.addSelectionListener(new SelectionAdapter() {
+        	        public void widgetSelected(SelectionEvent evt) {
+        	            // TODO
+                    
+        	        }
+        	    });  
+        	}
         {
             listMoviesImages = new List(groupMoviesDetail, SWT.BORDER);
             GridData listMoviesImagesLData = new GridData();
+<<<<<<< .mine
+            listMoviesImagesLData.horizontalAlignment = GridData.FILL;
+            listMoviesImagesLData.horizontalSpan = 5;
+=======
             listMoviesImagesLData.horizontalSpan = 10;
-            listMoviesImagesLData.horizontalAlignment = GridData.FILL;
+>>>>>>> .r167
+            listMoviesImagesLData.verticalSpan = 1;
             listMoviesImages.setLayoutData(listMoviesImagesLData);
-        }
+        }// Edit Images
+        // Composite Buttons 
         {
     	    compositeButtons = new Composite(groupMoviesDetail, SWT.EMBEDDED);
     	    GridLayout composite2Layout = new GridLayout();
@@ -750,11 +1002,8 @@
     	    GridData composite2LData = new GridData();
     	    compositeButtons.setLayout(composite2Layout);
     	    composite2LData.verticalAlignment = GridData.END;
-    	    composite2LData.horizontalAlignment = GridData.CENTER;
-    	    composite2LData.widthHint = 391;
+    	    composite2LData.horizontalAlignment = GridData.FILL;
     	    composite2LData.horizontalSpan = 12;
-    	    composite2LData.grabExcessHorizontalSpace = true;
-        	composite2LData.grabExcessVerticalSpace = true;
         	composite2LData.heightHint = 35;
         	compositeButtons.setLayoutData(composite2LData);
     	}
@@ -779,10 +1028,21 @@
                 buttonMoviesNew.setEnabled(false);
                 buttonMoviesEdit.setEnabled(false);
                 buttonMoviesDelete.setEnabled(false);
+<<<<<<< .mine
+                buttonMoviesAddDirectors.setEnabled(true);
+                buttonMoviesDeleteDirectors.setEnabled(true);
+                buttonMoviesAddActors.setEnabled(true);
+                buttonMoviesDeleteActors.setEnabled(true);
+                buttonMoviesAddGenres.setEnabled(true);
+                buttonMoviesDeleteGenres.setEnabled(true);
+                buttonMoviesAddImages.setEnabled(true);
+                buttonMoviesDeleteImages.setEnabled(true);
+=======
                 buttonMoviesEditDirectors.setEnabled(true);
                // buttonMoviesEditActors.setEnabled(true);
                 buttonMoviesEditGenres.setEnabled(true);
                 buttonMoviesEditImages.setEnabled(true);
+>>>>>>> .r167
                 
                 textMoviesSearch.setEditable(false);
                 tableMoviesOverview.setEnabled(false);
@@ -1042,9 +1302,9 @@
                 setMoviesGroupButtonSaveCancel();
             }
         });
-    }
+    }//Composite Buttons
     
-    }
+  }
 
     /**
      * 
@@ -1058,11 +1318,22 @@
         buttonMoviesSave.setEnabled(false);
         buttonMoviesNew.setEnabled(true);
         buttonMoviesEdit.setEnabled(false);
+<<<<<<< .mine
+        buttonMoviesAddDirectors.setEnabled(false);
+        buttonMoviesDeleteDirectors.setEnabled(false);
+        buttonMoviesAddActors.setEnabled(false);
+        buttonMoviesDeleteActors.setEnabled(false);
+        buttonMoviesAddGenres.setEnabled(false);
+        buttonMoviesDeleteGenres.setEnabled(false);
+        buttonMoviesAddImages.setEnabled(false);
+        buttonMoviesDeleteImages.setEnabled(false);
+=======
         buttonMoviesDelete.setEnabled(false);
         buttonMoviesEditDirectors.setEnabled(false);
         //buttonMoviesEditActors.setEnabled(false);
         buttonMoviesEditGenres.setEnabled(false);
         buttonMoviesEditImages.setEnabled(false);
+>>>>>>> .r167
     }
 
     /**

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java	2004-11-25 10:23:53 UTC (rev 167)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java	2004-11-25 11:51:25 UTC (rev 168)
@@ -94,10 +94,11 @@
 
     public final static int MODE_EDIT = 2;
 
-    private static final int MAIN_WINDOW_WIDTH = 850;
-
+    private static final int MAIN_WINDOW_WIDTH = 830;
     private static final int MAIN_WINDOW_HEIGHT = 700;
-    private static final int MIN_WINDOW_WIDTH = 850;
+    private static final int MAIN_WINDOW_X = 25;
+    private static final int MAIN_WINDOW_Y = 25;
+    private static final int MIN_WINDOW_WIDTH = 830;
     private static final int MIN_WINDOW_HEIGHT = 700;
     private static final int MIN_WINDOW_X = 25;
     private static final int MIN_WINDOW_Y = 25;
@@ -218,7 +219,7 @@
 
         //set the Site
         shell.setSize(MAIN_WINDOW_WIDTH, MAIN_WINDOW_HEIGHT);
-
+        shell.setLocation(MAIN_WINDOW_X,MAIN_WINDOW_Y);
         {
             //Register as a resource user - SWTResourceManager will
             //handle the obtaining and disposing of resources

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/movies.properties
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/movies.properties	2004-11-25 10:23:53 UTC (rev 167)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/language/movies.properties	2004-11-25 11:51:25 UTC (rev 168)
@@ -10,9 +10,6 @@
 movies.groupoverviewdetail.columngenres =Genre
 movies.groupoverviewdetail.columnactors =Dartsteller
 movies.groupoverviewdetail.columndirectors =Regisseur
-movies.groupoverviewdetail.columnvideoformats =Videoformate
-movies.groupoverviewdetail.columnaudioformats =Audioformate
-movies.groupoverviewdetail.columnlanguages =Sprachen
 movies.groupoverviewdetail.columndescription =Beschreibung
 movies.groupoverviewdetail.columnimages =Bilder
 
@@ -20,25 +17,24 @@
 movies.groupdetail.labelid =Film ID
 movies.groupdetail.labeltitle =Titel
 movies.groupdetail.labeldate =Erscheinungsdatum
-movies.groupdetail.labeladvice =Um die Elemente zu Bearbeiten bitte entsprechende Schaltfl?che anklicken
+movies.groupdetail.labeldirectors =Liste der Regisseure
+movies.groupdetail.labelactors =Liste der Darsteller
+movies.groupdetail.labelgenres =Liste der Genre
+movies.groupdetail.labelimages =Liste der Bilder
+movies.groupdetail.labeldescription =Beschreibung
 movies.groupdetail.textdate = (Beispiel: 01.01.2001)
-movies.groupdetail.textdescription =Beschreibung
 
+
 button.new =Neu
 button.edit =Bearbeiten
 button.delete =L?schen
 button.save =Speichern
 button.cancel =Abbruch
 movies.button.editdescription =Beschreibung
-movies.button.editactors =Darsteller
-movies.button.editdirectors =Regisseur
-movies.button.editgenres =Genres
-movies.button.editlanguages =Sprachen
-movies.button.editsubtitles =Untertitel
-movies.button.editaudioformats =Audioformate
-movies.button.editvideoformats =Videoformate
-movies.button.editimages =Bilder
+movies.button.additem =Hinzuf?gen
+movies.button.deleteitem =L?schen
 
+
 movies.groupdetail.savebutton.warn.noname.title =Datensatz speichern
 movies.groupdetail.savebutton.warn.noname.msg =Der Datensatz kann nicht gespeichert werden. \n Bitte geben Sie eine volst?ndigen Namen an
 movies.groupdetail.savebutton.newok =Speichern des neuen Films erfolgreich.



From rgriesch at sheep.berlios.de  Thu Nov 25 13:28:07 2004
From: rgriesch at sheep.berlios.de (Remo Griesch at BerliOS)
Date: Thu, 25 Nov 2004 13:28:07 +0100
Subject: [Provirent-svn-commit] r169 - project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui
Message-ID: <200411251228.iAPCS7S3015579@sheep.berlios.de>

Author: rgriesch
Date: 2004-11-25 13:28:05 +0100 (Thu, 25 Nov 2004)
New Revision: 169

Removed:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java
Log:


Deleted: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java	2004-11-25 11:51:25 UTC (rev 168)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java	2004-11-25 12:28:05 UTC (rev 169)
@@ -1,1371 +0,0 @@
-package de.hsharz.provirent.management.gui;
-
-import java.text.MessageFormat;
-import java.util.ArrayList;
-import java.util.Locale;
-import java.util.PropertyResourceBundle;
-import java.util.ResourceBundle;
-
-import org.apache.log4j.Logger;
-import org.eclipse.swt.SWT;
-import org.eclipse.swt.custom.SashForm;
-import org.eclipse.swt.events.FocusAdapter;
-import org.eclipse.swt.events.FocusEvent;
-import org.eclipse.swt.events.SelectionAdapter;
-import org.eclipse.swt.events.SelectionEvent;
-import org.eclipse.swt.graphics.Color;
-import org.eclipse.swt.graphics.Device;
-import org.eclipse.swt.graphics.DeviceData;
-import org.eclipse.swt.layout.FormAttachment;
-import org.eclipse.swt.layout.FormData;
-import org.eclipse.swt.layout.GridData;
-import org.eclipse.swt.layout.GridLayout;
-import org.eclipse.swt.widgets.Button;
-import org.eclipse.swt.widgets.Composite;
-import org.eclipse.swt.widgets.Display;
-import org.eclipse.swt.widgets.Event;
-import org.eclipse.swt.widgets.Group;
-import org.eclipse.swt.widgets.Label;
-import org.eclipse.swt.widgets.Listener;
-import org.eclipse.swt.widgets.Shell;
-import org.eclipse.swt.widgets.Table;
-import org.eclipse.swt.widgets.TableColumn;
-import org.eclipse.swt.widgets.Text;
-import org.eclipse.swt.custom.StyledText;
-
-import com.cloudgarden.resource.SWTResourceManager;
-
-import de.hsharz.provirent.objects.Movie;
-import de.hsharz.provirent.persistence.DataBaseException;
-import de.hsharz.provirent.persistence.Database;
-
-
-import org.eclipse.swt.widgets.List;
-/**
-* This code was generated using CloudGarden's Jigloo
-* SWT/Swing GUI Builder, which is free for non-commercial
-* use. If Jigloo is being used commercially (ie, by a corporation,
-* company or business for any purpose whatever) then you
-* should purchase a license for each developer using Jigloo.
-* Please visit www.cloudgarden.com for details.
-* Use of Jigloo implies acceptance of these licensing terms.
-* *************************************
-* A COMMERCIAL LICENSE HAS NOT BEEN PURCHASED
-* for this machine, so Jigloo or this code cannot be used legally
-* for any corporate or commercial purpose.
-* *************************************
-*/
-public class CompositeMovie extends de.hsharz.provirent.management.gui.AbstractComposite {
-
-    {
-        //Register as a resource user - SWTResourceManager will
-        //handle the obtaining and disposing of resources
-        SWTResourceManager.registerResourceUser(this);
-    }
-
-
-    /**
-     * Logger for this class
-     */
-    private static final Logger logger = Logger
-            .getLogger(CompositeActors.class);
-    
-    
-    private final static int MODE_VIEW = 0;
-    private final static int MODE_ADD = 1;
-    private final static int MODE_EDIT = 2;
-    
-    private Table tableMoviesOverview;
-    private Table tableMoviesOverviewDetail;
-    private TableColumn tableMoviesOverview_ColumnID;
-    private TableColumn tableMoviesOverview_ColumnTitle;
-    private TableColumn tableMoviesOverview_ColumnSubtitles;
-    private TableColumn tableMoviesOverview_ColumnDate;
-    private TableColumn tableMoviesOverviewDetail_ColumnGenres;
-    private TableColumn tableMoviesOverviewDetail_ColumnActors;
-    private TableColumn tableMoviesOverviewDetail_ColumnDirectors;   
-    private TableColumn tableMoviesOverviewDetail_ColumnDescription;
-    private TableColumn tableMoviesOverviewDetail_ColumnImages;
-       
-    private Group groupMovie;
-    private Group groupMoviesOverview;
-    private Group groupMoviesDetail;
-    
-    private Text textMoviesSearch;
-    private Text textMoviesID;
-    private Text textMoviesTitle;
-    private Text textMoviesDescription;
-    
-    private Label labelMoviesSearch;
-    private Label labelMoviesID;
-    private Label labelMoviesTitle;
-    private Label labelMoviesDate;
-    private Label labelMoviesDescription;
-    private Label labelMoviesDirectors;
-    private Label labelMoviesActors;
-    private Label labelMoviesGenres;
-    private Label labelMoviesImages;
-    
-    private Button buttonMoviesNew;
-    private Button buttonMoviesSave;
-    private Button buttonMoviesEdit;
-    private Button buttonMoviesCancel;
-    private Button buttonMoviesDelete;
-    private Button buttonMoviesFill;
-<<<<<<< .mine
-    private Button buttonMoviesAddActors;
-    private Button buttonMoviesDeleteActors;
-    private Button buttonMoviesAddDirectors;
-    private Button buttonMoviesDeleteDirectors;
-    private Button buttonMoviesAddGenres;
-    private Button buttonMoviesDeleteGenres;
-    private Button buttonMoviesAddImages;
-    private Button buttonMoviesDeleteImages;
-=======
-    private Button buttonMoviesEditDirectors;
-    private Button buttonMoviesEditGenres;
-    private Button buttonMoviesEditImages;
->>>>>>> .r167
-     
-    private SashForm sashForm1;
-    
-    private Composite parent;
-    private Composite compositeButtons;
-<<<<<<< .mine
-    private Composite compositeMoviesEditDirectors;
-    private Composite compositeMoviesEditActors;
-    private Composite compositeMoviesEditGenres;
-    private Composite compositeMoviesEditImages;
-=======
-    private Label label1;
-    private Button button4;
-    private Button button3;
-    private Button button2;
-    private Button button1;
->>>>>>> .r167
-    private List listMoviesImages;
-    private List listMoviesGenres;
-    private List listMoviesActors;
-    private List listMoviesDirectors;
-    private Text textMoviesDate;
-
-    protected int mode_actor;
-    
-    private StatusLineStyledText statusLine;
-    
-    private ResourceBundle l;
-    
-    
-    /*
-     * ?ndert die Sprache aller Elemente
-     * 
-     * @see de.hsharz.provirent.managment.gui.AbstractComposite#changeLanguage(java.util.Locale)
-     */
-    public void changeLanguage(Locale locale) {
-
-    }
-
-    /* 
-     * Init die Sprache (properties Datei)
-     * @see de.hsharz.provirent.managment.gui.AbstractComposite#initLanguage(java.util.Locale)
-     */
-    public void initLanguage(Locale locale) {
-
-        l = PropertyResourceBundle.getBundle(
-                "de.hsharz.provirent.management.gui.language.movies", locale);
-
-    }
-    
-    
-    
-	/**
-	* Auto-generated main method to display this 
-	* de.hsharz.provirent.management.gui.AbstractComposite inside a new Shell.
-	*/
-	public static void main(String[] args) {
-		showGUI();
-	}
-		
-	/**
-	* Auto-generated method to display this 
-	* de.hsharz.provirent.management.gui.AbstractComposite inside a new Shell.
-	*/
-	/**
-	* Auto-generated method to display this 
-	* org.eclipse.swt.widgets.Composite inside a new Shell.
-	*/
-	public static void showGUI() {
-		Display display = Display.getDefault();
-		Shell shell = new Shell(display);
-
-		shell.open();
-		while (!shell.isDisposed()) {
-			if (!display.readAndDispatch())
-				display.sleep();
-		}
-	}
-
-	public CompositeMovie(Composite p, int style,
-            StatusLineStyledText status, Locale l) {
-	    super(p, style, status, l);
-        parent = p;
-        //Statusline wird gestzt
-        statusLine = status;
-        
-        //sprache wird init
-        initLanguage(l);
-	    
-	    
-		initGUI();
-	}
-
-
-	private void initGUI() {
-        if (logger.isDebugEnabled()) {
-            logger.debug("initGUI() - start");
-        }
-
-        this.setLayout(new GridLayout());
-        this.setSize(830, 650);
-        {
-            groupMovie = new Group(this, SWT.NONE);
-            GridLayout groupMovieLayout = new GridLayout();
-            GridData groupMovieLData = new GridData();
-            groupMovieLData.grabExcessHorizontalSpace = true;
-            groupMovieLData.grabExcessVerticalSpace = true;
-            groupMovieLData.horizontalAlignment = GridData.FILL;
-            groupMovieLData.verticalAlignment = GridData.FILL;
-            groupMovie.setLayoutData(groupMovieLData);
-            groupMovieLayout.makeColumnsEqualWidth = true;
-            groupMovie.setLayout(groupMovieLayout);
-            groupMovie.setText(l.getString("movies.group.label"));
-            {
-                sashForm1 = new SashForm(groupMovie, SWT.NONE);
-                GridData sashForm1LData = new GridData();
-                sashForm1LData.verticalAlignment = GridData.FILL;
-                sashForm1LData.horizontalAlignment = GridData.FILL;
-                sashForm1LData.grabExcessHorizontalSpace = true;
-                sashForm1LData.grabExcessVerticalSpace = true;
-                sashForm1.setLayoutData(sashForm1LData);
-                
-               
-            }
-            // init the rest of the layout
-            initMoviesOverview();
-            initMoviesDetail();
-            refreshMoviesOverviewTable(textMoviesSearch.getText());
-        }
-
-        this.layout();
-
-
-        
-        if (logger.isDebugEnabled()) {
-            logger.debug("initGUI() - end");
-        }
-	}
-
-    /**
-     * 
-     */
-    private void initMoviesOverview() {
-	    //	  Group Movies Overview 
-        {
-            groupMoviesOverview = new Group(sashForm1,SWT.NONE);
-            GridLayout group1Layout = new GridLayout();
-            group1Layout.numColumns = 8;
-            groupMoviesOverview.setLayout(group1Layout);
-            groupMoviesOverview.setText(l.getString("movies.groupoverview.label"));
-            
-            {// table Actors Overview
-                tableMoviesOverview = new Table(groupMoviesOverview, SWT.SINGLE | SWT.FULL_SELECTION | SWT.V_SCROLL | SWT.BORDER);
-                GridData tableMoviesOverviewLData = new GridData();
-                tableMoviesOverview.setHeaderVisible(true);
-                tableMoviesOverview.setLinesVisible(true);
-                tableMoviesOverviewLData.horizontalAlignment = GridData.FILL;
-                tableMoviesOverviewLData.verticalAlignment = GridData.FILL;
-                tableMoviesOverviewLData.horizontalSpan = 8;
-                tableMoviesOverviewLData.grabExcessHorizontalSpace = true;
-                tableMoviesOverviewLData.grabExcessVerticalSpace = true;
-                tableMoviesOverview.setLayoutData(tableMoviesOverviewLData);
-                tableMoviesOverview.addFocusListener(new FocusAdapter() {
-                        public void focusLost(FocusEvent evt) {
-                            System.out
-                                .println("tableMoviesOverview.focusLost, event="
-                                    + evt);
-                        }
-                        public void focusGained(FocusEvent evt) {
-                            System.out
-                                .println("tableMoviesOverview.focusGained, event="
-                                    + evt);
-                        }
-                    });
-                tableMoviesOverview.addSelectionListener(new SelectionAdapter() {
-                        public void widgetSelected(SelectionEvent evt) {
-                            if (logger.isDebugEnabled()) {
-                                logger
-                                    .debug("widgetSelected(SelectionEvent evt = "
-                                        + evt
-                                        + ") - start");
-                            }
-
-                            int index = tableMoviesOverview
-                                .getSelectionIndex();
-
-                            System.out.println("Table select. id: "
-                                + index
-                                + " TableItem:"
-                                + tableMoviesOverview.getItem(index)
-                                + " id: "
-                                + tableMoviesOverview.getItem(index)
-                                    .getText(0));
-
-                            //es wurde ein Element aus Tabelle ausgewaehlt jetzt muss die
-                            //Detailansicht aktualisiert werden
-                            refreshMoviesDetail(tableMoviesOverview.getItem(index)
-                                                              .getText(0));
-
-                            if (logger.isDebugEnabled()) {
-                                logger
-                                    .debug("widgetSelected(SelectionEvent) - end");
-                            }
-                        }
-                    });
-                {
-                    tableMoviesOverview_ColumnID = new TableColumn(
-                        tableMoviesOverview,
-                        SWT.CENTER);
-                    tableMoviesOverview_ColumnID.setText(l
-                        .getString("movies.groupoverview.columnid"));
-                    tableMoviesOverview_ColumnID.setWidth(40);
-                }
-                {
-                    tableMoviesOverview_ColumnTitle = new TableColumn(
-                        tableMoviesOverview,
-                        SWT.CENTER);
-                    tableMoviesOverview_ColumnTitle.setText(l
-                        .getString("movies.groupoverview.columntitle"));
-                    tableMoviesOverview_ColumnTitle.setWidth(120);
-                }
-                {
-                    tableMoviesOverview_ColumnSubtitles = new TableColumn(
-                        tableMoviesOverview,
-                        SWT.CENTER);
-                    tableMoviesOverview_ColumnSubtitles.setText(l
-                        .getString("movies.groupoverview.columnsubtitles"));
-                    tableMoviesOverview_ColumnSubtitles.setWidth(120);
-                }
-                {
-                    tableMoviesOverview_ColumnDate = new TableColumn(
-                        tableMoviesOverview,
-                        SWT.CENTER);
-                    tableMoviesOverview_ColumnDate.setText(l
-                        .getString("movies.groupoverview.columndate"));
-                    tableMoviesOverview_ColumnDate.setWidth(120);
-                }
-            }// table Movies Overview
-            //Table Movies Overview Detail
-            tableMoviesOverviewDetail = new Table(
-                    groupMoviesOverview,
-                    SWT.SINGLE
-                        | SWT.FULL_SELECTION
-                        | SWT.V_SCROLL | SWT.BORDER);
-                GridData tableMoviesOverviewLData = new GridData();
-                tableMoviesOverviewDetail.setHeaderVisible(true);
-                tableMoviesOverviewDetail.setLinesVisible(true);
-                tableMoviesOverviewLData.horizontalAlignment = GridData.FILL;
-                tableMoviesOverviewLData.verticalAlignment = GridData.FILL;
-                tableMoviesOverviewLData.horizontalSpan = 8;
-                tableMoviesOverviewLData.grabExcessHorizontalSpace = true;
-                tableMoviesOverviewLData.grabExcessVerticalSpace = true;
-                tableMoviesOverviewDetail.setLayoutData(tableMoviesOverviewLData);
-                tableMoviesOverviewDetail.addFocusListener(new FocusAdapter() {
-                        public void focusLost(FocusEvent evt) {
-                            System.out
-                                .println("tableMoviesOverviewDetail.focusLost, event="
-                                    + evt);
-                        }
-                        public void focusGained(FocusEvent evt) {
-                            System.out
-                                .println("tableMoviesOverviewDetail.focusGained, event="
-                                    + evt);
-                        }
-                    });
-                tableMoviesOverviewDetail.addSelectionListener(new SelectionAdapter() {
-                        public void widgetSelected(SelectionEvent evt) {
-                            if (logger.isDebugEnabled()) {
-                                logger
-                                    .debug("widgetSelected(SelectionEvent evt = "
-                                        + evt
-                                        + ") - start");
-                            }
-
-                            int index = tableMoviesOverview
-                                .getSelectionIndex();
-
-                            System.out.println("Table select. id: "
-                                + index
-                                + " TableItem:"
-                                + tableMoviesOverviewDetail.getItem(index)
-                                + " id: "
-                                + tableMoviesOverviewDetail.getItem(index)
-                                    .getText(0));
-
-                            //es wurde ein Element aus Tabelle ausgewaehlt jetzt muss die
-                            //Detailansicht aktualisiert werden
-                            //folgende Zeile nicht notwendig
-                            //refreshMoviesDetail(tableMoviesOverview.getItem(index).getText(0));
-
-                            if (logger.isDebugEnabled()) {
-                                logger
-                                    .debug("widgetSelected(SelectionEvent) - end");
-                            }
-                        }
-                    });
-                {
-                    tableMoviesOverviewDetail_ColumnDirectors = new TableColumn(
-                        tableMoviesOverviewDetail,
-                        SWT.CENTER);
-                    tableMoviesOverviewDetail_ColumnDirectors.setText(l
-                        .getString("movies.groupoverviewdetail.columndirectors"));
-                    tableMoviesOverviewDetail_ColumnDirectors.setWidth(80);
-                }
-                {
-                    tableMoviesOverviewDetail_ColumnGenres = new TableColumn(
-                        tableMoviesOverviewDetail,
-                        SWT.CENTER);
-                    tableMoviesOverviewDetail_ColumnGenres.setText(l
-                        .getString("movies.groupoverviewdetail.columngenres"));
-                    tableMoviesOverviewDetail_ColumnGenres.setWidth(80);
-                }
-                {
-                    tableMoviesOverviewDetail_ColumnActors = new TableColumn(
-                        tableMoviesOverviewDetail,
-                        SWT.CENTER);
-                    tableMoviesOverviewDetail_ColumnActors.setText(l
-                        .getString("movies.groupoverviewdetail.columnactors"));
-                    tableMoviesOverviewDetail_ColumnActors.setWidth(80);
-                }
-                {
-                    tableMoviesOverviewDetail_ColumnDescription = new TableColumn(
-                        tableMoviesOverviewDetail,
-                        SWT.CENTER);
-                    tableMoviesOverviewDetail_ColumnDescription.setText(l
-                        .getString("movies.groupoverviewdetail.columndescription"));
-                    tableMoviesOverviewDetail_ColumnDescription.setWidth(80);
-                }
-                {
-                    tableMoviesOverviewDetail_ColumnImages = new TableColumn(
-                        tableMoviesOverviewDetail,
-                        SWT.CENTER);
-                    tableMoviesOverviewDetail_ColumnImages.setText(l
-                        .getString("movies.groupoverviewdetail.columnimages"));
-                    tableMoviesOverviewDetail_ColumnImages.setWidth(80);
-                }
-            // Search
-            {
-                //label for Search
-                labelMoviesSearch = new Label(groupMoviesOverview, SWT.NONE);
-                labelMoviesSearch.setText(l
-                        .getString("movies.groupoverview.searchlabel")
-                        + ":");
-                GridData label2LData = new GridData();
-                label2LData.horizontalSpan = 3;
-                labelMoviesSearch.setLayoutData(label2LData);
-
-                //text Search
-                textMoviesSearch = new Text(groupMoviesOverview, SWT.BORDER);
-                GridData text2LData = new GridData();
-                textMoviesSearch.addFocusListener(new FocusAdapter() {
-                    public void focusLost(FocusEvent evt) {
-                        if (logger.isDebugEnabled()) {
-                            logger.debug("focusLost(FocusEvent evt = " + evt + " "
-                                    + textMoviesSearch.getText() + ") - start");
-                        }
-
-                        refreshMoviesOverviewTable(textMoviesSearch.getText());
-
-                        if (logger.isDebugEnabled()) {
-                            logger.debug("focusLost(FocusEvent) - end");
-                        }
-                    }
-                });
-                textMoviesSearch.addListener(SWT.DefaultSelection, new Listener() {
-                    public void handleEvent(Event e) {
-                        if (logger.isDebugEnabled()) {
-                            logger.debug("handleEvent(Event e = " + e + " "
-                                    + textMoviesSearch.getText() + ") - start");
-                        }
-
-                        refreshMoviesOverviewTable(textMoviesSearch.getText());
-
-                        if (logger.isDebugEnabled()) {
-                            logger.debug("handleEvent(Event) - end");
-                        }
-                    }
-                    
-                });
-                text2LData.horizontalAlignment = GridData.FILL;
-                text2LData.horizontalSpan = 5;
-                text2LData.grabExcessHorizontalSpace = true;
-                textMoviesSearch.setLayoutData(text2LData);
-            }// Search                    
-        }
-    }
-
-
-    /**
-     * 
-     */
-    private void initMoviesDetail() {
-        // Group Actors Detail
-        {
-            groupMoviesDetail = new Group(sashForm1, SWT.H_SCROLL);
-            GridLayout group2Layout = new GridLayout();
-            GridData group2LData = new GridData();
-            group2Layout.verticalSpacing = 15;
-            group2Layout.numColumns = 12;
-            groupMoviesDetail.setText(l.getString("movies.groupdetail.label"));   
-            FormData formData = new FormData();
-            groupMoviesDetail.setLayout(group2Layout);
-            formData.right = new FormAttachment(100, 100, -5);
-            formData.top = new FormAttachment(0, 100, 5);
-            formData.bottom = new FormAttachment(100, 100, -5);
-            groupMoviesDetail.setLayoutData(formData);
-        }
-//      labels and text for detail
-    	{
-    	    labelMoviesID = new Label(groupMoviesDetail, SWT.NONE);
-    	    labelMoviesID.setText(l
-    	            .getString("movies.groupdetail.labelid")
-    	            + ":");
-    	    labelMoviesID.setSize(125, 15);
-    	    GridData formData2 = new GridData();
-    	    formData2.heightHint = 15;
-    	    formData2.horizontalAlignment = GridData.FILL;
-    	    formData2.horizontalSpan=2;
-    	    labelMoviesID.setLayoutData(formData2);
-    	}
-    	{
-    	    textMoviesID = new Text(
-    	            groupMoviesDetail,
-    	            SWT.READ_ONLY | SWT.BORDER);
-    	    GridData text1LData1 = new GridData();
-    	    text1LData1.horizontalAlignment = GridData.FILL;
-    	    text1LData1.heightHint = 13;
-    	    text1LData1.horizontalSpan = 10;
-    	    text1LData1.grabExcessHorizontalSpace = true;
-    	    textMoviesID.setLayoutData(text1LData1);
-    	}
-    	{
-            labelMoviesTitle = new Label(
-                groupMoviesDetail,
-                SWT.NONE);
-            labelMoviesTitle.setText(l
-                .getString("movies.groupdetail.labeltitle")
-                + ":");
-            labelMoviesTitle.setSize(125, 15);
-            GridData labelActorNameLData = new GridData();
-            labelActorNameLData.heightHint = 15;
-            labelActorNameLData.horizontalAlignment = GridData.FILL;
-            labelActorNameLData.horizontalSpan=2;
-            labelMoviesTitle.setLayoutData(labelActorNameLData);
-        }
-        {
-    	    textMoviesTitle = new Text(groupMoviesDetail,
-    	            SWT.READ_ONLY | SWT.BORDER);
-    	    GridData text1LData2 = new GridData();
-    	    text1LData2.horizontalAlignment = GridData.FILL;
-    	    text1LData2.heightHint = 13;
-    	    text1LData2.horizontalSpan = 10;
-    	    text1LData2.grabExcessHorizontalSpace = true;
-    	    textMoviesTitle.setLayoutData(text1LData2);        
-    	}     
-        {
-            labelMoviesDate = new Label(
-                groupMoviesDetail,
-                SWT.NONE);
-            labelMoviesDate.setText(l
-                .getString("movies.groupdetail.labeldate")
-                + ":");
-            labelMoviesDate.setSize(125, 15);
-            GridData labelActorNameLData = new GridData();
-            labelActorNameLData.heightHint = 15;
-            labelActorNameLData.horizontalAlignment = GridData.FILL;
-            labelActorNameLData.horizontalSpan=2;
-            labelMoviesDate.setLayoutData(labelActorNameLData);
-        }
-        {
-            textMoviesDate = new Text(groupMoviesDetail, SWT.READ_ONLY
-                | SWT.BORDER);
-            GridData text1LData2 = new GridData();
-            text1LData2.horizontalAlignment = GridData.FILL;
-            text1LData2.heightHint = 13;
-            text1LData2.horizontalSpan = 10;
-            text1LData2.grabExcessHorizontalSpace = true;
-            textMoviesDate.setLayoutData(text1LData2);
-            textMoviesDate.setText(l.getString("movies.groupdetail.textdate"));
-        }
-        //labels and buttons for Detail
-        {
-    	    labelMoviesDescription = new Label(groupMoviesDetail, SWT.NONE);
-    	    labelMoviesDescription.setText(l.getString("movies.groupdetail.labeldescription"));
-    	    GridData formData2 = new GridData();
-    	    //formData2.verticalSpan = 5;
-    	    formData2.horizontalSpan=2;
-    	    labelMoviesDescription.setLayoutData(formData2);
-    	}
-        {
-            textMoviesDescription = new Text(groupMoviesDetail, SWT.MULTI | SWT.READ_ONLY | SWT.V_SCROLL | SWT.BORDER);
-            GridData formData2 = new GridData();
-    	    formData2.horizontalSpan = 10;
-    	    //formData2.verticalSpan = 5;
-    	    formData2.verticalAlignment = GridData.FILL;
-    	    formData2.horizontalAlignment = GridData.FILL;
-    	    textMoviesDescription.setLayoutData(formData2);
-        }
-        //      EditDirectors
-        {
-<<<<<<< .mine
-            compositeMoviesEditDirectors = new Composite(groupMoviesDetail, SWT.NONE);
-            GridLayout composite1Layout = new GridLayout();
-            GridData composite1LData = new GridData();
-            composite1LData.horizontalAlignment = GridData.FILL;
-            composite1LData.horizontalSpan=1;
-            composite1LData.verticalSpan=1;
-            compositeMoviesEditDirectors.setLayoutData(composite1LData);
-            composite1Layout.numColumns = 2;
-            compositeMoviesEditDirectors.setLayout(composite1Layout);
-        }
-        	{
-        	    labelMoviesDirectors = new Label(compositeMoviesEditDirectors, SWT.NONE);
-        	    labelMoviesDirectors.setText(l.getString("movies.groupdetail.labeldirectors"));
-        	    GridData formData2 = new GridData();
-        	    formData2.horizontalSpan = 2;
-        	    formData2.verticalSpan = 5;
-        	    labelMoviesDirectors.setLayoutData(formData2);
-        	}
-        	{
-        	    buttonMoviesAddDirectors = new Button(compositeMoviesEditDirectors
-        	            , SWT.NONE);
-        	    buttonMoviesAddDirectors.setText(l
-        	            .getString("movies.button.additem"));
-        	    buttonMoviesAddDirectors.setEnabled(false);
-        	    GridData text1LData2 = new GridData();
-        	    text1LData2.heightHint = 20;
-        	    text1LData2.horizontalSpan =1;
-        	    text1LData2.horizontalAlignment = GridData.BEGINNING;
-        	    buttonMoviesAddDirectors.setLayoutData(text1LData2);        
-        	    buttonMoviesAddDirectors.addSelectionListener(new SelectionAdapter() {
-        	        public void widgetSelected(SelectionEvent evt) {
-        	            // TODO
-=======
-            buttonMoviesEditDirectors = new Button(groupMoviesDetail
-                    , SWT.NONE);
-            buttonMoviesEditDirectors.setText(l
-                .getString("movies.button.editdirectors"));
-            buttonMoviesEditDirectors.setEnabled(false);
-            GridData text1LData2 = new GridData();
-    	    text1LData2.horizontalAlignment = GridData.FILL;
-    	    text1LData2.heightHint = 20;
-    	    text1LData2.grabExcessHorizontalSpace = true;
-    	    text1LData2.verticalSpan = 2;
-    	    text1LData2.horizontalSpan=2;
-    	    buttonMoviesEditDirectors.setLayoutData(text1LData2);        
-            buttonMoviesEditDirectors.addSelectionListener(new SelectionAdapter() {
-                public void widgetSelected(SelectionEvent evt) {
-                   // TODO
->>>>>>> .r167
-                    
-        	        }
-        	    });  
-        	}
-        	{
-        	    buttonMoviesDeleteDirectors = new Button(compositeMoviesEditDirectors, SWT.NONE);
-        	    buttonMoviesDeleteDirectors.setText(l
-        	            .getString("movies.button.deleteitem"));
-        	    buttonMoviesDeleteDirectors.setEnabled(false);
-        	    GridData text1LData2 = new GridData();
-        	    text1LData2.horizontalAlignment = GridData.BEGINNING;
-        	    text1LData2.heightHint = 20;
-        	    text1LData2.horizontalSpan =1;
-        	    buttonMoviesDeleteDirectors.setLayoutData(text1LData2);        
-        	    buttonMoviesDeleteDirectors.addSelectionListener(new SelectionAdapter() {
-        	        public void widgetSelected(SelectionEvent evt) {
-        	            // TODO
-                    
-        	        }
-        	    });  
-        	}
-        {
-            listMoviesDirectors = new List(groupMoviesDetail, SWT.BORDER);
-            GridData listMoviesDirectorsLData = new GridData();
-            listMoviesDirectorsLData.horizontalAlignment = GridData.FILL;
-            listMoviesDirectorsLData.horizontalSpan = 10;
-            listMoviesDirectorsLData.verticalSpan = 1;
-            listMoviesDirectors.setLayoutData(listMoviesDirectorsLData);
-        }// EditDirectors
-        // Edit Actors
-        {
-            compositeMoviesEditActors = new Composite(groupMoviesDetail, SWT.NONE);
-            GridLayout composite1Layout = new GridLayout();
-            GridData composite1LData = new GridData();
-            composite1LData.horizontalAlignment = GridData.FILL;
-            composite1LData.horizontalSpan=1;
-            composite1LData.verticalSpan=1;
-            compositeMoviesEditActors.setLayoutData(composite1LData);
-            composite1Layout.numColumns = 2;
-            compositeMoviesEditActors.setLayout(composite1Layout);
-        }
-<<<<<<< .mine
-        	{
-        	    labelMoviesActors = new Label(compositeMoviesEditActors, SWT.NONE);
-        	    labelMoviesActors.setText(l.getString("movies.groupdetail.labelactors"));
-        	    GridData formData2 = new GridData();
-        	    formData2.horizontalSpan = 2;
-        	    formData2.verticalSpan = 5;
-        	    labelMoviesActors.setLayoutData(formData2);
-        	}
-        	{
-        	    buttonMoviesAddActors = new Button(compositeMoviesEditActors
-        	            , SWT.NONE);
-        	    buttonMoviesAddActors.setText(l
-        	            .getString("movies.button.additem"));
-        	    buttonMoviesAddActors.setEnabled(false);
-        	    GridData text1LData2 = new GridData();
-        	    text1LData2.heightHint = 20;
-        	    text1LData2.horizontalSpan =1;
-        	    text1LData2.horizontalAlignment = GridData.BEGINNING;
-        	    buttonMoviesAddActors.setLayoutData(text1LData2);        
-        	    buttonMoviesAddActors.addSelectionListener(new SelectionAdapter() {
-        	        public void widgetSelected(SelectionEvent evt) {
-        	            // TODO
-                    
-        	        }
-        	    });  
-        	}
-        	{
-        	    buttonMoviesDeleteActors = new Button(compositeMoviesEditActors, SWT.NONE);
-        	    buttonMoviesDeleteActors.setText(l
-        	            .getString("movies.button.deleteitem"));
-        	    buttonMoviesDeleteActors.setEnabled(false);
-        	    GridData text1LData2 = new GridData();
-        	    text1LData2.horizontalAlignment = GridData.BEGINNING;
-        	    text1LData2.heightHint = 20;
-        	    text1LData2.horizontalSpan =1;
-        	    buttonMoviesDeleteActors.setLayoutData(text1LData2);        
-        	    buttonMoviesDeleteActors.addSelectionListener(new SelectionAdapter() {
-        	        public void widgetSelected(SelectionEvent evt) {
-        	            // TODO
-                    
-        	        }
-        	    });  
-        	}
-=======
-        {
-            label1 = new Label(groupMoviesDetail, SWT.NONE);
-            label1.setText("Actors");
-            GridData text1LData2 = new GridData();
-    	    text1LData2.horizontalSpan = 2;
-    	    text1LData2.verticalAlignment = GridData.BEGINNING;
-    	    label1.setLayoutData(text1LData2);              
-        }
->>>>>>> .r167
-   
-        {
-            listMoviesActors = new List(groupMoviesDetail, SWT.BORDER);
-            GridData listMoviesActorsLData = new GridData();
-            listMoviesActorsLData.horizontalAlignment = GridData.FILL;
-<<<<<<< .mine
-            listMoviesActorsLData.horizontalSpan = 5;
-            listMoviesActorsLData.verticalSpan = 1;
-=======
-            listMoviesActorsLData.horizontalSpan = 10;
-            listMoviesActorsLData.verticalSpan = 3;
-            listMoviesActorsLData.grabExcessHorizontalSpace = true;
-            listMoviesActorsLData.verticalAlignment = GridData.FILL;
->>>>>>> .r167
-            listMoviesActors.setLayoutData(listMoviesActorsLData);
-        }//Edit Actors
-        //Edit Genres
-        {
-            compositeMoviesEditGenres = new Composite(groupMoviesDetail, SWT.NONE);
-            GridLayout composite1Layout = new GridLayout();
-            GridData composite1LData = new GridData();
-            composite1LData.horizontalAlignment = GridData.FILL;
-            composite1LData.horizontalSpan=1;
-            composite1LData.verticalSpan=1;
-            compositeMoviesEditGenres.setLayoutData(composite1LData);
-            composite1Layout.numColumns = 2;
-            compositeMoviesEditGenres.setLayout(composite1Layout);
-        }
-<<<<<<< .mine
-        	{
-        	    labelMoviesGenres = new Label(compositeMoviesEditGenres, SWT.NONE);
-        	    labelMoviesGenres.setText(l.getString("movies.groupdetail.labelgenres"));
-        	    GridData formData2 = new GridData();
-        	    formData2.horizontalSpan = 2;
-        	    formData2.verticalSpan = 5;
-        	    labelMoviesGenres.setLayoutData(formData2);
-        	}
-        	{
-        	    buttonMoviesAddGenres = new Button(compositeMoviesEditGenres
-        	            , SWT.NONE);
-        	    buttonMoviesAddGenres.setText(l
-        	            .getString("movies.button.additem"));
-        	    buttonMoviesAddGenres.setEnabled(false);
-        	    GridData text1LData2 = new GridData();
-        	    text1LData2.heightHint = 20;
-        	    text1LData2.horizontalSpan =1;
-        	    text1LData2.horizontalAlignment = GridData.BEGINNING;
-        	    buttonMoviesAddGenres.setLayoutData(text1LData2);        
-        	    buttonMoviesAddGenres.addSelectionListener(new SelectionAdapter() {
-        	        public void widgetSelected(SelectionEvent evt) {
-        	            // TODO
-=======
-        {
-            button3 = new Button(groupMoviesDetail, SWT.PUSH | SWT.CENTER);
-            button3.setText("add");
-            GridData text1LData2 = new GridData();
-            text1LData2.widthHint=40;
-            text1LData2.verticalAlignment = GridData.BEGINNING;
-            text1LData2.horizontalAlignment = GridData.END;
-            button3.setLayoutData(text1LData2);            
-        }
-        {
-            button1 = new Button(groupMoviesDetail, SWT.PUSH | SWT.CENTER);
-            button1.setText("up");
-            GridData text1LData2 = new GridData();
-            text1LData2.widthHint=40;
-            text1LData2.verticalAlignment = GridData.BEGINNING;
-            text1LData2.horizontalAlignment = GridData.END;
-            button1.setLayoutData(text1LData2);
-        }
-        {
-            button4 = new Button(groupMoviesDetail, SWT.PUSH | SWT.CENTER);
-            button4.setText("remove");
-            GridData text1LData2 = new GridData();
-            text1LData2.widthHint=40;
-            text1LData2.verticalAlignment = GridData.BEGINNING;
-            text1LData2.horizontalAlignment = GridData.END;
-            button4.setLayoutData(text1LData2);
-        }
-        {
-            button2 = new Button(groupMoviesDetail, SWT.PUSH | SWT.CENTER);
-            button2.setText("down");
-            GridData text1LData2 = new GridData();
-    	    text1LData2.verticalAlignment = GridData.BEGINNING;
-    	    text1LData2.widthHint=40;
-    	    text1LData2.horizontalAlignment = GridData.END;
-    	    button2.setLayoutData(text1LData2);            
-        }    
-        {
-            buttonMoviesEditGenres = new Button(groupMoviesDetail
-                    , SWT.NONE);
-            buttonMoviesEditGenres.setText(l
-                .getString("movies.button.editgenres"));
-            buttonMoviesEditGenres.setEnabled(false);
-            GridData text1LData2 = new GridData();
-    	    text1LData2.horizontalAlignment = GridData.FILL;
-    	    text1LData2.heightHint = 20;
-    	    text1LData2.grabExcessHorizontalSpace = true;
-    	    text1LData2.horizontalSpan=2;
-    	    text1LData2.verticalSpan = 2;
-    	    buttonMoviesEditGenres.setLayoutData(text1LData2);        
-            buttonMoviesEditGenres.addSelectionListener(new SelectionAdapter() {
-                public void widgetSelected(SelectionEvent evt) {
-                   // TODO
->>>>>>> .r167
-                    
-        	        }
-        	    });  
-        	}
-        	{
-        	    buttonMoviesDeleteGenres = new Button(compositeMoviesEditGenres, SWT.NONE);
-        	    buttonMoviesDeleteGenres.setText(l
-        	            .getString("movies.button.deleteitem"));
-        	    buttonMoviesDeleteGenres.setEnabled(false);
-        	    GridData text1LData2 = new GridData();
-        	    text1LData2.horizontalAlignment = GridData.BEGINNING;
-        	    text1LData2.heightHint = 20;
-        	    text1LData2.horizontalSpan =1;
-        	    buttonMoviesDeleteGenres.setLayoutData(text1LData2);        
-        	    buttonMoviesDeleteGenres.addSelectionListener(new SelectionAdapter() {
-        	        public void widgetSelected(SelectionEvent evt) {
-        	            // TODO
-                    
-        	        }
-        	    });  
-        	}
-        {
-            listMoviesGenres = new List(groupMoviesDetail, SWT.BORDER);
-            GridData listMoviesGenresLData = new GridData();
-<<<<<<< .mine
-            listMoviesGenresLData.horizontalAlignment = GridData.FILL;
-            listMoviesGenresLData.horizontalSpan = 5;
-=======
-            listMoviesGenresLData.horizontalSpan = 10;
->>>>>>> .r167
-            listMoviesGenresLData.verticalSpan = 1;
-            listMoviesGenres.setLayoutData(listMoviesGenresLData);
-        }// Edit Genre
-        // Edit Images
-        {
-            compositeMoviesEditImages = new Composite(groupMoviesDetail, SWT.NONE);
-            GridLayout composite1Layout = new GridLayout();
-            GridData composite1LData = new GridData();
-            composite1LData.horizontalAlignment = GridData.FILL;
-            composite1LData.horizontalSpan=1;
-            composite1LData.verticalSpan=1;
-            compositeMoviesEditImages.setLayoutData(composite1LData);
-            composite1Layout.numColumns = 2;
-            compositeMoviesEditImages.setLayout(composite1Layout);
-        }
-<<<<<<< .mine
-        	{
-        	    labelMoviesImages = new Label(compositeMoviesEditImages, SWT.NONE);
-        	    labelMoviesImages.setText(l.getString("movies.groupdetail.labelimages"));
-        	    GridData formData2 = new GridData();
-        	    formData2.horizontalSpan = 2;
-        	    formData2.verticalSpan = 5;
-        	    labelMoviesImages.setLayoutData(formData2);
-        	}
-        	{
-        	    buttonMoviesAddImages = new Button(compositeMoviesEditImages
-        	            , SWT.NONE);
-        	    buttonMoviesAddImages.setText(l
-        	            .getString("movies.button.additem"));
-        	    buttonMoviesAddImages.setEnabled(false);
-        	    GridData text1LData2 = new GridData();
-        	    text1LData2.heightHint = 20;
-        	    text1LData2.horizontalSpan =1;
-        	    text1LData2.horizontalAlignment = GridData.BEGINNING;
-        	    buttonMoviesAddImages.setLayoutData(text1LData2);        
-        	    buttonMoviesAddImages.addSelectionListener(new SelectionAdapter() {
-        	        public void widgetSelected(SelectionEvent evt) {
-        	            // TODO
-=======
-        {
-            buttonMoviesEditImages = new Button(groupMoviesDetail
-                    , SWT.NONE);
-            buttonMoviesEditImages.setText(l
-                .getString("movies.button.editimages"));
-            buttonMoviesEditImages.setEnabled(false);
-            GridData text1LData2 = new GridData();
-    	    text1LData2.heightHint = 20;
-    	    text1LData2.horizontalSpan = 1;
-    	    text1LData2.horizontalSpan=2;
-    	    text1LData2.horizontalAlignment = GridData.FILL;
-    	    buttonMoviesEditImages.setLayoutData(text1LData2);        
-            buttonMoviesEditImages.addSelectionListener(new SelectionAdapter() {
-                public void widgetSelected(SelectionEvent evt) {
-                   // TODO
->>>>>>> .r167
-                    
-        	        }
-        	    });  
-        	}
-        	{
-        	    buttonMoviesDeleteImages = new Button(compositeMoviesEditImages, SWT.NONE);
-        	    buttonMoviesDeleteImages.setText(l
-        	            .getString("movies.button.deleteitem"));
-        	    buttonMoviesDeleteImages.setEnabled(false);
-        	    GridData text1LData2 = new GridData();
-        	    text1LData2.horizontalAlignment = GridData.BEGINNING;
-        	    text1LData2.heightHint = 20;
-        	    text1LData2.horizontalSpan =1;
-        	    buttonMoviesDeleteImages.setLayoutData(text1LData2);        
-        	    buttonMoviesDeleteImages.addSelectionListener(new SelectionAdapter() {
-        	        public void widgetSelected(SelectionEvent evt) {
-        	            // TODO
-                    
-        	        }
-        	    });  
-        	}
-        {
-            listMoviesImages = new List(groupMoviesDetail, SWT.BORDER);
-            GridData listMoviesImagesLData = new GridData();
-<<<<<<< .mine
-            listMoviesImagesLData.horizontalAlignment = GridData.FILL;
-            listMoviesImagesLData.horizontalSpan = 5;
-=======
-            listMoviesImagesLData.horizontalSpan = 10;
->>>>>>> .r167
-            listMoviesImagesLData.verticalSpan = 1;
-            listMoviesImages.setLayoutData(listMoviesImagesLData);
-        }// Edit Images
-        // Composite Buttons 
-        {
-    	    compositeButtons = new Composite(groupMoviesDetail, SWT.EMBEDDED);
-    	    GridLayout composite2Layout = new GridLayout();
-    	    composite2Layout.numColumns = 6;
-    	    GridData composite2LData = new GridData();
-    	    compositeButtons.setLayout(composite2Layout);
-    	    composite2LData.verticalAlignment = GridData.END;
-    	    composite2LData.horizontalAlignment = GridData.FILL;
-    	    composite2LData.horizontalSpan = 12;
-        	composite2LData.heightHint = 35;
-        	compositeButtons.setLayoutData(composite2LData);
-    	}
-    	{
-    	    buttonMoviesNew = new Button(compositeButtons, SWT.PUSH | SWT.CENTER);
-    	    buttonMoviesNew.setText(l.getString("button.new"));
-    	    buttonMoviesNew.addSelectionListener(new SelectionAdapter() {
-            public void widgetSelected(SelectionEvent evt) {
-                
-                mode_actor = ManagementGui.MODE_ADD;
-                
-                textMoviesID.setText("");
-                textMoviesTitle.setText("");
-                textMoviesDate.setText("");
-                textMoviesDescription.setText("");
-                textMoviesTitle.setEditable(true);
-                textMoviesDate.setEditable(true);
-                textMoviesDescription.setEditable(true);
-                
-                buttonMoviesCancel.setEnabled(true);
-                buttonMoviesSave.setEnabled(true);
-                buttonMoviesNew.setEnabled(false);
-                buttonMoviesEdit.setEnabled(false);
-                buttonMoviesDelete.setEnabled(false);
-<<<<<<< .mine
-                buttonMoviesAddDirectors.setEnabled(true);
-                buttonMoviesDeleteDirectors.setEnabled(true);
-                buttonMoviesAddActors.setEnabled(true);
-                buttonMoviesDeleteActors.setEnabled(true);
-                buttonMoviesAddGenres.setEnabled(true);
-                buttonMoviesDeleteGenres.setEnabled(true);
-                buttonMoviesAddImages.setEnabled(true);
-                buttonMoviesDeleteImages.setEnabled(true);
-=======
-                buttonMoviesEditDirectors.setEnabled(true);
-               // buttonMoviesEditActors.setEnabled(true);
-                buttonMoviesEditGenres.setEnabled(true);
-                buttonMoviesEditImages.setEnabled(true);
->>>>>>> .r167
-                
-                textMoviesSearch.setEditable(false);
-                tableMoviesOverview.setEnabled(false);
-
-            }
-        });
-
-    	    buttonMoviesEdit = new Button(compositeButtons, SWT.PUSH | SWT.CENTER);
-    	    buttonMoviesEdit.setText(l.getString("button.edit"));
-    	    buttonMoviesEdit.setEnabled(false);
-    	    buttonMoviesEdit.addSelectionListener(new SelectionAdapter() {
-            public void widgetSelected(SelectionEvent evt) {
-
-                mode_actor = ManagementGui.MODE_EDIT;
-
-                textMoviesID.setEditable(false);
-                textMoviesTitle.setEditable(true);
-                textMoviesTitle.setFocus();
-                textMoviesDate.setEditable(true);
-                
-                buttonMoviesCancel.setEnabled(true);
-                buttonMoviesSave.setEnabled(true);
-                buttonMoviesNew.setEnabled(false);
-                buttonMoviesEdit.setEnabled(false);
-                buttonMoviesDelete.setEnabled(false);
-
-                tableMoviesOverview.setEnabled(false);
-                textMoviesSearch.setEnabled(false);
-                
-            }
-        });
-
-    	    buttonMoviesDelete = new Button(compositeButtons, SWT.PUSH | SWT.CENTER);
-    	    buttonMoviesDelete.setText(l.getString("button.delete"));
-    	    buttonMoviesDelete.setEnabled(false);
-    	    buttonMoviesDelete.addSelectionListener(new SelectionAdapter() {
-            public void widgetSelected(SelectionEvent evt) {
-                System.out
-                        .println("buttonMoviesDelete.widgetSelected, event="
-                                + evt);
-                
-                
-               String msg = MessageFormat.format(
-                       l.getString("movies.groupdetail.deletebutton.question.text"),
-                               new Object[]{textMoviesTitle.getText()+" "
-                               +l.getString("movies.groupdetail.deletebutton.question.gap")
-                               +" "+textMoviesDate.getText()});
-                
-               int question = showMsg(msg,
-                       l.getString("movies.groupdetail.deletebutton.question.header"), 
-                       SWT.ICON_QUESTION | SWT.YES | SWT.NO);
-               
-               if (question != SWT.YES){
-                   return;
-               }
-                
-                Movie o = new Movie();
-                o.setMovieId(new Integer(Integer.parseInt(textMoviesID.getText())));
-                o.setTitle(textMoviesTitle.getText());
-                //TODO
-                //entsprechendes Objekt erzeugen
-                //o.setReleaseDate(textMoviesDate.getText());
-                
-                try {
-                    //object speichern
-                    // Fehlerbehandlung
-                    Database.deleteObject(o);
-
-                    //?bersichtsTabelle aktualisieren
-                    refreshMoviesOverviewTable(textMoviesSearch.getText());
-                    
-                    //Detailansicht leeren
-                    textMoviesID.setText("");
-                    textMoviesTitle.setText("");
-                    textMoviesDate.setText("");
-                    tableMoviesOverviewDetail.removeAll();
-                    //in Tabelle n?chsten ausw?hlen
-                    try {
-                        tableMoviesOverview.select(0);
-                    } catch (Exception ex) {}
-                    
-                    //Statusline Nachricht sezten
-                    statusLine.setStatus(1,l.getString("movies.groupdetail.deletebutton.newok"));
-
-                } catch (DataBaseException e) {
-                    if (e.getMessage().equalsIgnoreCase("1")) {
-                        //Fehler beim Speichern des Objectes
-
-                        statusLine.setStatus(3,l.getString("movies.groupdetail.deletebutton.errorsave"));
-                        showMsg(l.getString("movies.groupdetail.deletebutton.errorsave"),
-                                l.getString("error"), SWT.ICON_ERROR | SWT.OK);
-                        
-                    } else if (e.getMessage().equalsIgnoreCase("2")) {
-                        //fehler beim db aufbau
-                        statusLine.setStatus(3,l.getString("movies.groupdetail.deletebutton.errordb"));
-                        showMsg(l.getString("movies.groupdetail.deletebutton.errordb"),
-                                l.getString("error"), SWT.ICON_ERROR | SWT.OK);
-                        
-                    } else {
-                        //@todo
-                        e.printStackTrace();
-                    }
-                    
-                }                
-                
-
-                }
-
-            }
-    	    );
-
-    	    //leerer nicht sichtbarer Button
-    	    buttonMoviesFill = new Button(compositeButtons, SWT.PUSH | SWT.CENTER);
-    	    GridData buttonActorFillLData = new GridData();
-    	    buttonMoviesFill.setVisible(false);
-    	    buttonMoviesFill.setEnabled(false);
-    	    buttonActorFillLData.widthHint = 30;
-    	    buttonActorFillLData.heightHint = 23;
-    	    buttonMoviesFill.setLayoutData(buttonActorFillLData);
-
-    	    buttonMoviesSave = new Button(compositeButtons, SWT.PUSH | SWT.CENTER);
-    	    buttonMoviesSave.setText(l.getString("button.save"));
-    	    buttonMoviesSave.setEnabled(false);
-    	    buttonMoviesSave.addSelectionListener(new SelectionAdapter() {
-            public void widgetSelected(SelectionEvent evt) {
-                System.out
-                        .println("buttonMoviesSave.widgetSelected, event="
-                                + evt);
-
-                
-                //testen ob Name leer ist
-                //TODO
-                //komplette Speichervorgan muss erweitert werden da
-                //Ausma? von Film gr??er als bei anderen Composite
-                /*
-                if (textActorsFName.getText().trim().equalsIgnoreCase("") 
-                    ||  textActorsLName.getText().trim().equalsIgnoreCase("")   ) {
-                    
-                    showMsg(l.getString("actors.groupdetail.savebutton.warn.noname.msg"),
-                            l.getString("actors.groupdetail.savebutton.warn.noname.title"),
-                            SWT.ICON_WARNING | SWT.YES);
-
-                    	return;
-                }
-                
-                //testen welcher mode
-                
-                if (mode_actor == ManagementGui.MODE_ADD) {
-                */    
-                    /**
-                     * @todo eine Exception bekommen wieder leider NOCH nicht mit
-                     * d.h. es muss noch ein r?ckgabewert kommen oder eine Exception 
-                     * ?bermitteln werden (aus der DB Klasse)
-                     */
-                    //neues Objekt erzeugen
-                /*
-                	Actor tmp = new Actor(textActorsFName.getText(),
-                            textActorsLName.getText());
-                    
-                    try {
-                        //object speichern
-                        // Fehlerbehandlung
-                        Object o = Database.saveObject(
-                                new Actor(textActorsFName.getText(),
-                                        textActorsLName.getText()));
-                        
-                        // in ?bersichtstabelle einf?gen
-                        insertIntoActorsOverviewTable((Actor)o);
-                        textActorsID.setText( ((Actor)o).getActorId()+"" );
-                        
-                        
-                        //Statusline Nachricht sezten
-                        statusLine.setStatus(1,l.getString("actors.groupdetail.savebutton.newok"));
-
-                    } catch (DataBaseException e) {
-                        if (e.getMessage().equalsIgnoreCase("1")) {
-                            //Fehler beim Speichern des Objectes
-
-                            statusLine.setStatus(3,l.getString("actors.groupdetail.savebutton.errorsave"));
-                            showMsg(l.getString("actors.groupdetail.savebutton.errorsave"),"Fehler", SWT.ICON_ERROR | SWT.OK);
-                            
-                        } else if (e.getMessage().equalsIgnoreCase("2")) {
-                            //fehler beim db aufbau
-                            statusLine.setStatus(3,l.getString("actors.groupdetail.savebutton.errordb"));
-                            showMsg(l.getString("actors.groupdetail.savebutton.errordb"),"Fehler", SWT.ICON_ERROR | SWT.OK);
-                            
-                        } else {
-                            //@todo
-                            e.printStackTrace();
-                        }
-                        
-                    }
-                    
-                    
-                    //alle Buttons auf aktiv setzen
-                    setActorsGroupButtonSaveCancel();
-                    
-                } else if (mode_actor == ManagementGui.MODE_EDIT) {
-                    
-                    Actor tmp = new Actor(textActorsFName.getText(),
-                                    textActorsLName.getText());
-        		tmp.setActorId( new Integer (Integer.parseInt(textActorsID.getText())) );
-                try {
-                    //object speichern
-                    // Fehlerbehandlung
-                    Database.saveObject(tmp);
-                    //?bersichtstabelle aktualisieren
-                    refreshActorsOverviewTable(textActorsSearch.getText());
-                    
-                    //Statusline Nachricht sezten
-                    statusLine.setStatus(1,l.getString("actors.groupdetail.savebutton.editok"));
-                   
-
-                } catch (DataBaseException e) {
-                    if (e.getMessage().equalsIgnoreCase("1")) {
-                        //Fehler beim Speichern des Objectes
-
-                        statusLine.setStatus(3,l.getString("actors.groupdetail.savebutton.errorsave"));
-                        showMsg(l.getString("actors.groupdetail.savebutton.errorsave"),"Fehler", SWT.ICON_ERROR | SWT.OK);
-                        
-                    } else if (e.getMessage().equalsIgnoreCase("2")) {
-                        //fehler beim db aufbau
-                        statusLine.setStatus(3,l.getString("actors.groupdetail.savebutton.errordb"));
-                        showMsg(l.getString("actors.groupdetail.savebutton.errordb"),"Fehler", SWT.ICON_ERROR | SWT.OK);
-                        
-                    } else {
-                        //@todo
-                        e.printStackTrace();
-                    }
-                    
-                }
-                    
- 
-                    //alle Buttons auf aktiv setzen
-                    setActorsGroupButtonSaveCancel();
-                    
-                }
-                
-                
-                
-                
-                 // @todo Exception werfen, da nur die zwei Modes sein d?rfen
-                 
-            */   
-            }
-        
-        });
-        
-    	    buttonMoviesCancel = new Button(compositeButtons, SWT.PUSH | SWT.CENTER);
-    	    buttonMoviesCancel.setText(l.getString("button.cancel"));
-    	    buttonMoviesCancel.setEnabled(false);
-    	    buttonMoviesCancel.addSelectionListener(new SelectionAdapter() {
-            public void widgetSelected(SelectionEvent evt) {
-                System.out
-                        .println("buttonMoviesCancel.widgetSelected, event="
-                                + evt);
-                setMoviesGroupButtonSaveCancel();
-            }
-        });
-    }//Composite Buttons
-    
-  }
-
-    /**
-     * 
-     */
-    protected void setMoviesGroupButtonSaveCancel() {
-        tableMoviesOverview.setEnabled(true);
-        textMoviesTitle.setEditable(false);
-        textMoviesDate.setEditable(false);
-        textMoviesDescription.setEditable(false);
-        buttonMoviesCancel.setEnabled(false);
-        buttonMoviesSave.setEnabled(false);
-        buttonMoviesNew.setEnabled(true);
-        buttonMoviesEdit.setEnabled(false);
-<<<<<<< .mine
-        buttonMoviesAddDirectors.setEnabled(false);
-        buttonMoviesDeleteDirectors.setEnabled(false);
-        buttonMoviesAddActors.setEnabled(false);
-        buttonMoviesDeleteActors.setEnabled(false);
-        buttonMoviesAddGenres.setEnabled(false);
-        buttonMoviesDeleteGenres.setEnabled(false);
-        buttonMoviesAddImages.setEnabled(false);
-        buttonMoviesDeleteImages.setEnabled(false);
-=======
-        buttonMoviesDelete.setEnabled(false);
-        buttonMoviesEditDirectors.setEnabled(false);
-        //buttonMoviesEditActors.setEnabled(false);
-        buttonMoviesEditGenres.setEnabled(false);
-        buttonMoviesEditImages.setEnabled(false);
->>>>>>> .r167
-    }
-
-    /**
-     * @param text
-     */
-    protected void refreshMoviesOverviewTable(String text) {
-        // TODO Auto-generated method stub
-        
-    }
-
-    /**
-     * @param text
-     */
-    protected void refreshMoviesDetail(String text) {
-        // TODO Auto-generated method stub
-        
-    }
-
-    protected void openDialogDescription() {
-        // TODO Auto-generated method stub
-        Shell dialogShell = new Shell();
-        //Dialog dialogDescription=new Dialog(dialogShell);
-        //dialogDescription.open();
-        Movie film = new Movie();
-        film.setActors(new ArrayList());
-        film.setImages(new ArrayList());
-        film.setGenres(new ArrayList());
-        film.setDirector(new ArrayList());
-        
-        DialogMovie test= new DialogMovie(dialogShell,1, l.getLocale( ),film,DialogMovie.TYPE_ACTOR);
-        test.open();
-
-    }
-    
-}



From rgriesch at sheep.berlios.de  Thu Nov 25 13:28:30 2004
From: rgriesch at sheep.berlios.de (Remo Griesch at BerliOS)
Date: Thu, 25 Nov 2004 13:28:30 +0100
Subject: [Provirent-svn-commit] r170 - project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui
Message-ID: <200411251228.iAPCSURC015670@sheep.berlios.de>

Author: rgriesch
Date: 2004-11-25 13:28:29 +0100 (Thu, 25 Nov 2004)
New Revision: 170

Added:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java
Log:


Added: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java	2004-11-25 12:28:05 UTC (rev 169)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java	2004-11-25 12:28:29 UTC (rev 170)
@@ -0,0 +1,1059 @@
+package de.hsharz.provirent.management.gui;
+
+import java.text.MessageFormat;
+import java.util.ArrayList;
+import java.util.Locale;
+import java.util.PropertyResourceBundle;
+import java.util.ResourceBundle;
+
+import org.apache.log4j.Logger;
+import org.eclipse.swt.SWT;
+import org.eclipse.swt.custom.SashForm;
+import org.eclipse.swt.events.FocusAdapter;
+import org.eclipse.swt.events.FocusEvent;
+import org.eclipse.swt.events.SelectionAdapter;
+import org.eclipse.swt.events.SelectionEvent;
+import org.eclipse.swt.graphics.Color;
+import org.eclipse.swt.graphics.Device;
+import org.eclipse.swt.graphics.DeviceData;
+import org.eclipse.swt.layout.FormAttachment;
+import org.eclipse.swt.layout.FormData;
+import org.eclipse.swt.layout.GridData;
+import org.eclipse.swt.layout.GridLayout;
+import org.eclipse.swt.widgets.Button;
+import org.eclipse.swt.widgets.Composite;
+import org.eclipse.swt.widgets.Display;
+import org.eclipse.swt.widgets.Event;
+import org.eclipse.swt.widgets.Group;
+import org.eclipse.swt.widgets.Label;
+import org.eclipse.swt.widgets.Listener;
+import org.eclipse.swt.widgets.Shell;
+import org.eclipse.swt.widgets.Table;
+import org.eclipse.swt.widgets.TableColumn;
+import org.eclipse.swt.widgets.Text;
+import org.eclipse.swt.custom.StyledText;
+
+import com.cloudgarden.resource.SWTResourceManager;
+
+import de.hsharz.provirent.objects.Movie;
+import de.hsharz.provirent.persistence.DataBaseException;
+import de.hsharz.provirent.persistence.Database;
+
+
+import org.eclipse.swt.widgets.List;
+/**
+* This code was generated using CloudGarden's Jigloo
+* SWT/Swing GUI Builder, which is free for non-commercial
+* use. If Jigloo is being used commercially (ie, by a corporation,
+* company or business for any purpose whatever) then you
+* should purchase a license for each developer using Jigloo.
+* Please visit www.cloudgarden.com for details.
+* Use of Jigloo implies acceptance of these licensing terms.
+* *************************************
+* A COMMERCIAL LICENSE HAS NOT BEEN PURCHASED
+* for this machine, so Jigloo or this code cannot be used legally
+* for any corporate or commercial purpose.
+* *************************************
+*/
+public class CompositeMovie extends de.hsharz.provirent.management.gui.AbstractComposite {
+
+    {
+        //Register as a resource user - SWTResourceManager will
+        //handle the obtaining and disposing of resources
+        SWTResourceManager.registerResourceUser(this);
+    }
+
+
+    /**
+     * Logger for this class
+     */
+    private static final Logger logger = Logger
+            .getLogger(CompositeActors.class);
+    
+    
+    private final static int MODE_VIEW = 0;
+    private final static int MODE_ADD = 1;
+    private final static int MODE_EDIT = 2;
+    
+    private Table tableMoviesOverview;
+    private Table tableMoviesOverviewDetail;
+    private TableColumn tableMoviesOverview_ColumnID;
+    private TableColumn tableMoviesOverview_ColumnTitle;
+    private TableColumn tableMoviesOverview_ColumnSubtitles;
+    private TableColumn tableMoviesOverview_ColumnDate;
+    private TableColumn tableMoviesOverviewDetail_ColumnGenres;
+    private TableColumn tableMoviesOverviewDetail_ColumnActors;
+    private TableColumn tableMoviesOverviewDetail_ColumnDirectors;   
+    private TableColumn tableMoviesOverviewDetail_ColumnDescription;
+    private TableColumn tableMoviesOverviewDetail_ColumnImages;
+       
+    private Group groupMovie;
+    private Group groupMoviesOverview;
+    private Group groupMoviesDetail;
+    
+    private Text textMoviesSearch;
+    private Text textMoviesID;
+    private Text textMoviesTitle;
+    private Text textMoviesDescription;
+    
+    private Label labelMoviesSearch;
+    private Label labelMoviesID;
+    private Label labelMoviesTitle;
+    private Label labelMoviesDate;
+    private Label labelMoviesAdvice;
+    
+    private Button buttonMoviesNew;
+    private Button buttonMoviesSave;
+    private Button buttonMoviesEdit;
+    private Button buttonMoviesCancel;
+    private Button buttonMoviesDelete;
+    private Button buttonMoviesFill;
+    private Button buttonMoviesEditActors;
+    private Button buttonMoviesEditDirectors;
+    private Button buttonMoviesEditGenres;
+    private Button buttonMoviesEditImages;
+     
+    private SashForm sashForm1;
+    
+    private Composite parent;
+    private Composite compositeButtons;
+    private List listMoviesImages;
+    private List listMoviesGenres;
+    private List listMoviesActors;
+    private List listMoviesDirectors;
+    private Text textMoviesDate;
+
+    protected int mode_actor;
+    
+    private StatusLineStyledText statusLine;
+    
+    private ResourceBundle l;
+    
+    
+    /*
+     * ?ndert die Sprache aller Elemente
+     * 
+     * @see de.hsharz.provirent.managment.gui.AbstractComposite#changeLanguage(java.util.Locale)
+     */
+    public void changeLanguage(Locale locale) {
+
+    }
+
+    /* 
+     * Init die Sprache (properties Datei)
+     * @see de.hsharz.provirent.managment.gui.AbstractComposite#initLanguage(java.util.Locale)
+     */
+    public void initLanguage(Locale locale) {
+
+        l = PropertyResourceBundle.getBundle(
+                "de.hsharz.provirent.management.gui.language.movies", locale);
+
+    }
+    
+    
+    
+	/**
+	* Auto-generated main method to display this 
+	* de.hsharz.provirent.management.gui.AbstractComposite inside a new Shell.
+	*/
+	public static void main(String[] args) {
+		showGUI();
+	}
+		
+	/**
+	* Auto-generated method to display this 
+	* de.hsharz.provirent.management.gui.AbstractComposite inside a new Shell.
+	*/
+	/**
+	* Auto-generated method to display this 
+	* org.eclipse.swt.widgets.Composite inside a new Shell.
+	*/
+	public static void showGUI() {
+		Display display = Display.getDefault();
+		Shell shell = new Shell(display);
+
+		shell.open();
+		while (!shell.isDisposed()) {
+			if (!display.readAndDispatch())
+				display.sleep();
+		}
+	}
+
+	public CompositeMovie(Composite p, int style,
+            StatusLineStyledText status, Locale l) {
+	    super(p, style, status, l);
+        parent = p;
+        //Statusline wird gestzt
+        statusLine = status;
+        
+        //sprache wird init
+        initLanguage(l);
+	    
+	    
+		initGUI();
+	}
+
+
+	private void initGUI() {
+        if (logger.isDebugEnabled()) {
+            logger.debug("initGUI() - start");
+        }
+
+        this.setLayout(new GridLayout());
+        this.setSize(830, 650);
+        {
+            groupMovie = new Group(this, SWT.NONE);
+            GridLayout groupMovieLayout = new GridLayout();
+            GridData groupMovieLData = new GridData();
+            groupMovieLData.grabExcessHorizontalSpace = true;
+            groupMovieLData.grabExcessVerticalSpace = true;
+            groupMovieLData.horizontalAlignment = GridData.FILL;
+            groupMovieLData.verticalAlignment = GridData.FILL;
+            groupMovie.setLayoutData(groupMovieLData);
+            groupMovieLayout.makeColumnsEqualWidth = true;
+            groupMovie.setLayout(groupMovieLayout);
+            groupMovie.setText(l.getString("movies.group.label"));
+            {
+                sashForm1 = new SashForm(groupMovie, SWT.NONE);
+                GridData sashForm1LData = new GridData();
+                sashForm1LData.verticalAlignment = GridData.FILL;
+                sashForm1LData.horizontalAlignment = GridData.FILL;
+                sashForm1LData.grabExcessHorizontalSpace = true;
+                sashForm1LData.grabExcessVerticalSpace = true;
+                sashForm1.setLayoutData(sashForm1LData);
+                
+               
+            }
+            // init the rest of the layout
+            initMoviesOverview();
+            initMoviesDetail();
+            refreshMoviesOverviewTable(textMoviesSearch.getText());
+        }
+
+        this.layout();
+
+
+        
+        if (logger.isDebugEnabled()) {
+            logger.debug("initGUI() - end");
+        }
+	}
+
+    /**
+     * 
+     */
+    private void initMoviesOverview() {
+	    //	  Group Movies Overview 
+        {
+            groupMoviesOverview = new Group(sashForm1,SWT.NONE);
+            GridLayout group1Layout = new GridLayout();
+            group1Layout.numColumns = 8;
+            groupMoviesOverview.setLayout(group1Layout);
+            groupMoviesOverview.setText(l.getString("movies.groupoverview.label"));
+            
+            {// table Actors Overview
+                tableMoviesOverview = new Table(groupMoviesOverview, SWT.SINGLE | SWT.FULL_SELECTION | SWT.V_SCROLL | SWT.BORDER);
+                GridData tableMoviesOverviewLData = new GridData();
+                tableMoviesOverview.setHeaderVisible(true);
+                tableMoviesOverview.setLinesVisible(true);
+                tableMoviesOverviewLData.horizontalAlignment = GridData.FILL;
+                tableMoviesOverviewLData.verticalAlignment = GridData.FILL;
+                tableMoviesOverviewLData.horizontalSpan = 8;
+                tableMoviesOverviewLData.grabExcessHorizontalSpace = true;
+                tableMoviesOverviewLData.grabExcessVerticalSpace = true;
+                tableMoviesOverview.setLayoutData(tableMoviesOverviewLData);
+                tableMoviesOverview.addFocusListener(new FocusAdapter() {
+                        public void focusLost(FocusEvent evt) {
+                            System.out
+                                .println("tableMoviesOverview.focusLost, event="
+                                    + evt);
+                        }
+                        public void focusGained(FocusEvent evt) {
+                            System.out
+                                .println("tableMoviesOverview.focusGained, event="
+                                    + evt);
+                        }
+                    });
+                tableMoviesOverview.addSelectionListener(new SelectionAdapter() {
+                        public void widgetSelected(SelectionEvent evt) {
+                            if (logger.isDebugEnabled()) {
+                                logger
+                                    .debug("widgetSelected(SelectionEvent evt = "
+                                        + evt
+                                        + ") - start");
+                            }
+
+                            int index = tableMoviesOverview
+                                .getSelectionIndex();
+
+                            System.out.println("Table select. id: "
+                                + index
+                                + " TableItem:"
+                                + tableMoviesOverview.getItem(index)
+                                + " id: "
+                                + tableMoviesOverview.getItem(index)
+                                    .getText(0));
+
+                            //es wurde ein Element aus Tabelle ausgewaehlt jetzt muss die
+                            //Detailansicht aktualisiert werden
+                            refreshMoviesDetail(tableMoviesOverview.getItem(index)
+                                                              .getText(0));
+
+                            if (logger.isDebugEnabled()) {
+                                logger
+                                    .debug("widgetSelected(SelectionEvent) - end");
+                            }
+                        }
+                    });
+                {
+                    tableMoviesOverview_ColumnID = new TableColumn(
+                        tableMoviesOverview,
+                        SWT.CENTER);
+                    tableMoviesOverview_ColumnID.setText(l
+                        .getString("movies.groupoverview.columnid"));
+                    tableMoviesOverview_ColumnID.setWidth(40);
+                }
+                {
+                    tableMoviesOverview_ColumnTitle = new TableColumn(
+                        tableMoviesOverview,
+                        SWT.CENTER);
+                    tableMoviesOverview_ColumnTitle.setText(l
+                        .getString("movies.groupoverview.columntitle"));
+                    tableMoviesOverview_ColumnTitle.setWidth(120);
+                }
+                {
+                    tableMoviesOverview_ColumnSubtitles = new TableColumn(
+                        tableMoviesOverview,
+                        SWT.CENTER);
+                    tableMoviesOverview_ColumnSubtitles.setText(l
+                        .getString("movies.groupoverview.columnsubtitles"));
+                    tableMoviesOverview_ColumnSubtitles.setWidth(120);
+                }
+                {
+                    tableMoviesOverview_ColumnDate = new TableColumn(
+                        tableMoviesOverview,
+                        SWT.CENTER);
+                    tableMoviesOverview_ColumnDate.setText(l
+                        .getString("movies.groupoverview.columndate"));
+                    tableMoviesOverview_ColumnDate.setWidth(120);
+                }
+            }// table Movies Overview
+            //Table Movies Overview Detail
+            tableMoviesOverviewDetail = new Table(
+                    groupMoviesOverview,
+                    SWT.SINGLE
+                        | SWT.FULL_SELECTION
+                        | SWT.V_SCROLL | SWT.BORDER);
+                GridData tableMoviesOverviewLData = new GridData();
+                tableMoviesOverviewDetail.setHeaderVisible(true);
+                tableMoviesOverviewDetail.setLinesVisible(true);
+                tableMoviesOverviewLData.horizontalAlignment = GridData.FILL;
+                tableMoviesOverviewLData.verticalAlignment = GridData.FILL;
+                tableMoviesOverviewLData.horizontalSpan = 8;
+                tableMoviesOverviewLData.grabExcessHorizontalSpace = true;
+                tableMoviesOverviewLData.grabExcessVerticalSpace = true;
+                tableMoviesOverviewDetail.setLayoutData(tableMoviesOverviewLData);
+                tableMoviesOverviewDetail.addFocusListener(new FocusAdapter() {
+                        public void focusLost(FocusEvent evt) {
+                            System.out
+                                .println("tableMoviesOverviewDetail.focusLost, event="
+                                    + evt);
+                        }
+                        public void focusGained(FocusEvent evt) {
+                            System.out
+                                .println("tableMoviesOverviewDetail.focusGained, event="
+                                    + evt);
+                        }
+                    });
+                tableMoviesOverviewDetail.addSelectionListener(new SelectionAdapter() {
+                        public void widgetSelected(SelectionEvent evt) {
+                            if (logger.isDebugEnabled()) {
+                                logger
+                                    .debug("widgetSelected(SelectionEvent evt = "
+                                        + evt
+                                        + ") - start");
+                            }
+
+                            int index = tableMoviesOverview
+                                .getSelectionIndex();
+
+                            System.out.println("Table select. id: "
+                                + index
+                                + " TableItem:"
+                                + tableMoviesOverviewDetail.getItem(index)
+                                + " id: "
+                                + tableMoviesOverviewDetail.getItem(index)
+                                    .getText(0));
+
+                            //es wurde ein Element aus Tabelle ausgewaehlt jetzt muss die
+                            //Detailansicht aktualisiert werden
+                            //folgende Zeile nicht notwendig
+                            //refreshMoviesDetail(tableMoviesOverview.getItem(index).getText(0));
+
+                            if (logger.isDebugEnabled()) {
+                                logger
+                                    .debug("widgetSelected(SelectionEvent) - end");
+                            }
+                        }
+                    });
+                {
+                    tableMoviesOverviewDetail_ColumnDirectors = new TableColumn(
+                        tableMoviesOverviewDetail,
+                        SWT.CENTER);
+                    tableMoviesOverviewDetail_ColumnDirectors.setText(l
+                        .getString("movies.groupoverviewdetail.columndirectors"));
+                    tableMoviesOverviewDetail_ColumnDirectors.setWidth(80);
+                }
+                {
+                    tableMoviesOverviewDetail_ColumnGenres = new TableColumn(
+                        tableMoviesOverviewDetail,
+                        SWT.CENTER);
+                    tableMoviesOverviewDetail_ColumnGenres.setText(l
+                        .getString("movies.groupoverviewdetail.columngenres"));
+                    tableMoviesOverviewDetail_ColumnGenres.setWidth(80);
+                }
+                {
+                    tableMoviesOverviewDetail_ColumnActors = new TableColumn(
+                        tableMoviesOverviewDetail,
+                        SWT.CENTER);
+                    tableMoviesOverviewDetail_ColumnActors.setText(l
+                        .getString("movies.groupoverviewdetail.columnactors"));
+                    tableMoviesOverviewDetail_ColumnActors.setWidth(80);
+                }
+                {
+                    tableMoviesOverviewDetail_ColumnDescription = new TableColumn(
+                        tableMoviesOverviewDetail,
+                        SWT.CENTER);
+                    tableMoviesOverviewDetail_ColumnDescription.setText(l
+                        .getString("movies.groupoverviewdetail.columndescription"));
+                    tableMoviesOverviewDetail_ColumnDescription.setWidth(80);
+                }
+                {
+                    tableMoviesOverviewDetail_ColumnImages = new TableColumn(
+                        tableMoviesOverviewDetail,
+                        SWT.CENTER);
+                    tableMoviesOverviewDetail_ColumnImages.setText(l
+                        .getString("movies.groupoverviewdetail.columnimages"));
+                    tableMoviesOverviewDetail_ColumnImages.setWidth(80);
+                }
+            // Search
+            {
+                //label for Search
+                labelMoviesSearch = new Label(groupMoviesOverview, SWT.NONE);
+                labelMoviesSearch.setText(l
+                        .getString("movies.groupoverview.searchlabel")
+                        + ":");
+                GridData label2LData = new GridData();
+                label2LData.horizontalSpan = 3;
+                labelMoviesSearch.setLayoutData(label2LData);
+
+                //text Search
+                textMoviesSearch = new Text(groupMoviesOverview, SWT.BORDER);
+                GridData text2LData = new GridData();
+                textMoviesSearch.addFocusListener(new FocusAdapter() {
+                    public void focusLost(FocusEvent evt) {
+                        if (logger.isDebugEnabled()) {
+                            logger.debug("focusLost(FocusEvent evt = " + evt + " "
+                                    + textMoviesSearch.getText() + ") - start");
+                        }
+
+                        refreshMoviesOverviewTable(textMoviesSearch.getText());
+
+                        if (logger.isDebugEnabled()) {
+                            logger.debug("focusLost(FocusEvent) - end");
+                        }
+                    }
+                });
+                textMoviesSearch.addListener(SWT.DefaultSelection, new Listener() {
+                    public void handleEvent(Event e) {
+                        if (logger.isDebugEnabled()) {
+                            logger.debug("handleEvent(Event e = " + e + " "
+                                    + textMoviesSearch.getText() + ") - start");
+                        }
+
+                        refreshMoviesOverviewTable(textMoviesSearch.getText());
+
+                        if (logger.isDebugEnabled()) {
+                            logger.debug("handleEvent(Event) - end");
+                        }
+                    }
+                    
+                });
+                text2LData.horizontalAlignment = GridData.FILL;
+                text2LData.horizontalSpan = 5;
+                text2LData.grabExcessHorizontalSpace = true;
+                textMoviesSearch.setLayoutData(text2LData);
+            }// Search                    
+        }
+    }
+
+
+    /**
+     * 
+     */
+    private void initMoviesDetail() {
+        // Group Actors Detail
+        {
+            groupMoviesDetail = new Group(sashForm1, SWT.H_SCROLL);
+            GridLayout group2Layout = new GridLayout();
+            GridData group2LData = new GridData();
+            group2Layout.verticalSpacing = 15;
+            group2Layout.numColumns = 6;
+            groupMoviesDetail.setText(l.getString("movies.groupdetail.label"));   
+            FormData formData = new FormData();
+            groupMoviesDetail.setLayout(group2Layout);
+            formData.right = new FormAttachment(100, 100, -5);
+            formData.top = new FormAttachment(0, 100, 5);
+            formData.bottom = new FormAttachment(100, 100, -5);
+            groupMoviesDetail.setLayoutData(formData);
+        }
+//      labels and text for detail
+    	{
+    	    labelMoviesID = new Label(groupMoviesDetail, SWT.NONE);
+    	    labelMoviesID.setText(l
+    	            .getString("movies.groupdetail.labelid")
+    	            + ":");
+    	    labelMoviesID.setSize(125, 15);
+    	    GridData formData2 = new GridData();
+    	    formData2.heightHint = 15;
+    	    formData2.horizontalAlignment = GridData.FILL;
+    	    labelMoviesID.setLayoutData(formData2);
+    	}
+    	{
+    	    textMoviesID = new Text(
+    	            groupMoviesDetail,
+    	            SWT.READ_ONLY | SWT.BORDER);
+    	    GridData text1LData1 = new GridData();
+    	    text1LData1.horizontalAlignment = GridData.FILL;
+    	    text1LData1.heightHint = 13;
+    	    text1LData1.horizontalSpan = 5;
+    	    text1LData1.grabExcessHorizontalSpace = true;
+    	    textMoviesID.setLayoutData(text1LData1);
+    	}
+    	{
+            labelMoviesTitle = new Label(
+                groupMoviesDetail,
+                SWT.NONE);
+            labelMoviesTitle.setText(l
+                .getString("movies.groupdetail.labeltitle")
+                + ":");
+            labelMoviesTitle.setSize(125, 15);
+            GridData labelActorNameLData = new GridData();
+            labelActorNameLData.heightHint = 15;
+            labelActorNameLData.horizontalAlignment = GridData.FILL;
+            labelMoviesTitle.setLayoutData(labelActorNameLData);
+        }
+        {
+    	    textMoviesTitle = new Text(groupMoviesDetail,
+    	            SWT.READ_ONLY | SWT.BORDER);
+    	    GridData text1LData2 = new GridData();
+    	    text1LData2.horizontalAlignment = GridData.FILL;
+    	    text1LData2.heightHint = 13;
+    	    text1LData2.horizontalSpan = 5;
+    	    text1LData2.grabExcessHorizontalSpace = true;
+    	    textMoviesTitle.setLayoutData(text1LData2);        
+    	}     
+        {
+            labelMoviesDate = new Label(
+                groupMoviesDetail,
+                SWT.NONE);
+            labelMoviesDate.setText(l
+                .getString("movies.groupdetail.labeldate")
+                + ":");
+            labelMoviesDate.setSize(125, 15);
+            GridData labelActorNameLData = new GridData();
+            labelActorNameLData.heightHint = 15;
+            labelActorNameLData.horizontalAlignment = GridData.FILL;
+            labelMoviesDate.setLayoutData(labelActorNameLData);
+        }
+        {
+            textMoviesDate = new Text(groupMoviesDetail, SWT.READ_ONLY
+                | SWT.BORDER);
+            GridData text1LData2 = new GridData();
+            text1LData2.horizontalAlignment = GridData.FILL;
+            text1LData2.heightHint = 13;
+            text1LData2.horizontalSpan = 5;
+            text1LData2.grabExcessHorizontalSpace = true;
+            textMoviesDate.setLayoutData(text1LData2);
+            textMoviesDate.setText(l.getString("movies.groupdetail.textdate"));
+        }
+        //labels and buttons for Detail
+        {
+    	    labelMoviesAdvice = new Label(groupMoviesDetail, SWT.NONE);
+    	    labelMoviesAdvice.setText(l.getString("movies.groupdetail.textdescription"));
+    	    GridData formData2 = new GridData();
+    	    formData2.horizontalSpan = 1;
+    	    formData2.verticalSpan = 5;
+    	    labelMoviesAdvice.setLayoutData(formData2);
+    	}
+        {
+            textMoviesDescription = new Text(groupMoviesDetail, SWT.MULTI | SWT.READ_ONLY | SWT.V_SCROLL | SWT.BORDER);
+            GridData formData2 = new GridData();
+    	    formData2.horizontalSpan = 5;
+    	    formData2.verticalSpan = 5;
+    	    formData2.verticalAlignment = GridData.FILL;
+    	    formData2.horizontalAlignment = GridData.FILL;
+    	    textMoviesDescription.setLayoutData(formData2);
+        }
+        {
+            buttonMoviesEditDirectors = new Button(groupMoviesDetail
+                    , SWT.NONE);
+            buttonMoviesEditDirectors.setText(l
+                .getString("movies.button.editdirectors"));
+            buttonMoviesEditDirectors.setEnabled(false);
+            GridData text1LData2 = new GridData();
+    	    text1LData2.horizontalAlignment = GridData.FILL;
+    	    text1LData2.heightHint = 20;
+    	    text1LData2.grabExcessHorizontalSpace = true;
+    	    text1LData2.verticalSpan = 2;
+    	    buttonMoviesEditDirectors.setLayoutData(text1LData2);        
+            buttonMoviesEditDirectors.addSelectionListener(new SelectionAdapter() {
+                public void widgetSelected(SelectionEvent evt) {
+                   // TODO
+                    
+                }
+            });  
+        }
+        {
+            listMoviesDirectors = new List(groupMoviesDetail, SWT.BORDER);
+            GridData listMoviesDirectorsLData = new GridData();
+            listMoviesDirectorsLData.horizontalAlignment = GridData.FILL;
+            listMoviesDirectorsLData.horizontalSpan = 5;
+            listMoviesDirectorsLData.verticalSpan = 2;
+            listMoviesDirectors.setLayoutData(listMoviesDirectorsLData);
+        }
+        {
+            buttonMoviesEditActors = new Button(groupMoviesDetail
+                    , SWT.NONE);
+            buttonMoviesEditActors.setText(l
+                .getString("movies.button.editactors"));
+            buttonMoviesEditActors.setEnabled(false);
+            GridData text1LData2 = new GridData();
+            text1LData2.verticalSpan = 2;
+            text1LData2.horizontalSpan = 1;
+    	    text1LData2.horizontalAlignment = GridData.FILL;
+    	    text1LData2.heightHint = 20;
+    	    text1LData2.grabExcessHorizontalSpace = true;
+    	    buttonMoviesEditActors.setLayoutData(text1LData2);        
+            buttonMoviesEditActors.addSelectionListener(new SelectionAdapter() {
+                public void widgetSelected(SelectionEvent evt) {
+                   // TODO
+                    
+                }
+            });  
+        }
+        {
+            listMoviesActors = new List(groupMoviesDetail, SWT.BORDER);
+            GridData listMoviesActorsLData = new GridData();
+            listMoviesActorsLData.horizontalAlignment = GridData.FILL;
+            listMoviesActorsLData.horizontalSpan = 5;
+            listMoviesActorsLData.verticalSpan = 2;
+            listMoviesActors.setLayoutData(listMoviesActorsLData);
+        }
+        {
+            buttonMoviesEditGenres = new Button(groupMoviesDetail
+                    , SWT.NONE);
+            buttonMoviesEditGenres.setText(l
+                .getString("movies.button.editgenres"));
+            buttonMoviesEditGenres.setEnabled(false);
+            GridData text1LData2 = new GridData();
+    	    text1LData2.horizontalAlignment = GridData.FILL;
+    	    text1LData2.heightHint = 20;
+    	    text1LData2.grabExcessHorizontalSpace = true;
+    	    text1LData2.verticalSpan = 2;
+    	    buttonMoviesEditGenres.setLayoutData(text1LData2);        
+            buttonMoviesEditGenres.addSelectionListener(new SelectionAdapter() {
+                public void widgetSelected(SelectionEvent evt) {
+                   // TODO
+                    
+                }
+            });  
+        }
+        {
+            listMoviesGenres = new List(groupMoviesDetail, SWT.BORDER);
+            GridData listMoviesGenresLData = new GridData();
+            listMoviesGenresLData.horizontalSpan = 5;
+            listMoviesGenresLData.verticalSpan = 2;
+            listMoviesGenresLData.horizontalAlignment = GridData.FILL;
+            listMoviesGenres.setLayoutData(listMoviesGenresLData);
+        }
+        {
+            buttonMoviesEditImages = new Button(groupMoviesDetail
+                    , SWT.NONE);
+            buttonMoviesEditImages.setText(l
+                .getString("movies.button.editimages"));
+            buttonMoviesEditImages.setEnabled(false);
+            GridData text1LData2 = new GridData();
+    	    text1LData2.heightHint = 20;
+    	    text1LData2.horizontalSpan = 1;
+    	    text1LData2.horizontalAlignment = GridData.FILL;
+    	    buttonMoviesEditImages.setLayoutData(text1LData2);        
+            buttonMoviesEditImages.addSelectionListener(new SelectionAdapter() {
+                public void widgetSelected(SelectionEvent evt) {
+                   // TODO
+                    
+                }
+            });  
+        }
+        {
+            listMoviesImages = new List(groupMoviesDetail, SWT.BORDER);
+            GridData listMoviesImagesLData = new GridData();
+            listMoviesImagesLData.horizontalSpan = 5;
+            listMoviesImagesLData.horizontalAlignment = GridData.FILL;
+            listMoviesImages.setLayoutData(listMoviesImagesLData);
+        }
+        {
+    	    compositeButtons = new Composite(groupMoviesDetail, SWT.EMBEDDED);
+    	    GridLayout composite2Layout = new GridLayout();
+    	    composite2Layout.numColumns = 6;
+    	    GridData composite2LData = new GridData();
+    	    compositeButtons.setLayout(composite2Layout);
+    	    composite2LData.verticalAlignment = GridData.END;
+    	    composite2LData.horizontalAlignment = GridData.CENTER;
+    	    composite2LData.widthHint = 391;
+    	    composite2LData.horizontalSpan = 6;
+    	    composite2LData.grabExcessHorizontalSpace = true;
+        	composite2LData.grabExcessVerticalSpace = true;
+        	composite2LData.heightHint = 35;
+        	compositeButtons.setLayoutData(composite2LData);
+    	}
+    	{
+    	    buttonMoviesNew = new Button(compositeButtons, SWT.PUSH | SWT.CENTER);
+    	    buttonMoviesNew.setText(l.getString("button.new"));
+    	    buttonMoviesNew.addSelectionListener(new SelectionAdapter() {
+            public void widgetSelected(SelectionEvent evt) {
+                
+                mode_actor = ManagementGui.MODE_ADD;
+                
+                textMoviesID.setText("");
+                textMoviesTitle.setText("");
+                textMoviesDate.setText("");
+                textMoviesDescription.setText("");
+                textMoviesTitle.setEditable(true);
+                textMoviesDate.setEditable(true);
+                textMoviesDescription.setEditable(true);
+                
+                buttonMoviesCancel.setEnabled(true);
+                buttonMoviesSave.setEnabled(true);
+                buttonMoviesNew.setEnabled(false);
+                buttonMoviesEdit.setEnabled(false);
+                buttonMoviesDelete.setEnabled(false);
+                buttonMoviesEditDirectors.setEnabled(true);
+                buttonMoviesEditActors.setEnabled(true);
+                buttonMoviesEditGenres.setEnabled(true);
+                buttonMoviesEditImages.setEnabled(true);
+                
+                textMoviesSearch.setEditable(false);
+                tableMoviesOverview.setEnabled(false);
+
+            }
+        });
+
+    	    buttonMoviesEdit = new Button(compositeButtons, SWT.PUSH | SWT.CENTER);
+    	    buttonMoviesEdit.setText(l.getString("button.edit"));
+    	    buttonMoviesEdit.setEnabled(false);
+    	    buttonMoviesEdit.addSelectionListener(new SelectionAdapter() {
+            public void widgetSelected(SelectionEvent evt) {
+
+                mode_actor = ManagementGui.MODE_EDIT;
+
+                textMoviesID.setEditable(false);
+                textMoviesTitle.setEditable(true);
+                textMoviesTitle.setFocus();
+                textMoviesDate.setEditable(true);
+                
+                buttonMoviesCancel.setEnabled(true);
+                buttonMoviesSave.setEnabled(true);
+                buttonMoviesNew.setEnabled(false);
+                buttonMoviesEdit.setEnabled(false);
+                buttonMoviesDelete.setEnabled(false);
+
+                tableMoviesOverview.setEnabled(false);
+                textMoviesSearch.setEnabled(false);
+                
+            }
+        });
+
+    	    buttonMoviesDelete = new Button(compositeButtons, SWT.PUSH | SWT.CENTER);
+    	    buttonMoviesDelete.setText(l.getString("button.delete"));
+    	    buttonMoviesDelete.setEnabled(false);
+    	    buttonMoviesDelete.addSelectionListener(new SelectionAdapter() {
+            public void widgetSelected(SelectionEvent evt) {
+                System.out
+                        .println("buttonMoviesDelete.widgetSelected, event="
+                                + evt);
+                
+                
+               String msg = MessageFormat.format(
+                       l.getString("movies.groupdetail.deletebutton.question.text"),
+                               new Object[]{textMoviesTitle.getText()+" "
+                               +l.getString("movies.groupdetail.deletebutton.question.gap")
+                               +" "+textMoviesDate.getText()});
+                
+               int question = showMsg(msg,
+                       l.getString("movies.groupdetail.deletebutton.question.header"), 
+                       SWT.ICON_QUESTION | SWT.YES | SWT.NO);
+               
+               if (question != SWT.YES){
+                   return;
+               }
+                
+                Movie o = new Movie();
+                o.setMovieId(new Integer(Integer.parseInt(textMoviesID.getText())));
+                o.setTitle(textMoviesTitle.getText());
+                //TODO
+                //entsprechendes Objekt erzeugen
+                //o.setReleaseDate(textMoviesDate.getText());
+                
+                try {
+                    //object speichern
+                    // Fehlerbehandlung
+                    Database.deleteObject(o);
+
+                    //?bersichtsTabelle aktualisieren
+                    refreshMoviesOverviewTable(textMoviesSearch.getText());
+                    
+                    //Detailansicht leeren
+                    textMoviesID.setText("");
+                    textMoviesTitle.setText("");
+                    textMoviesDate.setText("");
+                    tableMoviesOverviewDetail.removeAll();
+                    //in Tabelle n?chsten ausw?hlen
+                    try {
+                        tableMoviesOverview.select(0);
+                    } catch (Exception ex) {}
+                    
+                    //Statusline Nachricht sezten
+                    statusLine.setStatus(1,l.getString("movies.groupdetail.deletebutton.newok"));
+
+                } catch (DataBaseException e) {
+                    if (e.getMessage().equalsIgnoreCase("1")) {
+                        //Fehler beim Speichern des Objectes
+
+                        statusLine.setStatus(3,l.getString("movies.groupdetail.deletebutton.errorsave"));
+                        showMsg(l.getString("movies.groupdetail.deletebutton.errorsave"),
+                                l.getString("error"), SWT.ICON_ERROR | SWT.OK);
+                        
+                    } else if (e.getMessage().equalsIgnoreCase("2")) {
+                        //fehler beim db aufbau
+                        statusLine.setStatus(3,l.getString("movies.groupdetail.deletebutton.errordb"));
+                        showMsg(l.getString("movies.groupdetail.deletebutton.errordb"),
+                                l.getString("error"), SWT.ICON_ERROR | SWT.OK);
+                        
+                    } else {
+                        //@todo
+                        e.printStackTrace();
+                    }
+                    
+                }                
+                
+
+                }
+
+            }
+    	    );
+
+    	    //leerer nicht sichtbarer Button
+    	    buttonMoviesFill = new Button(compositeButtons, SWT.PUSH | SWT.CENTER);
+    	    GridData buttonActorFillLData = new GridData();
+    	    buttonMoviesFill.setVisible(false);
+    	    buttonMoviesFill.setEnabled(false);
+    	    buttonActorFillLData.widthHint = 30;
+    	    buttonActorFillLData.heightHint = 23;
+    	    buttonMoviesFill.setLayoutData(buttonActorFillLData);
+
+    	    buttonMoviesSave = new Button(compositeButtons, SWT.PUSH | SWT.CENTER);
+    	    buttonMoviesSave.setText(l.getString("button.save"));
+    	    buttonMoviesSave.setEnabled(false);
+    	    buttonMoviesSave.addSelectionListener(new SelectionAdapter() {
+            public void widgetSelected(SelectionEvent evt) {
+                System.out
+                        .println("buttonMoviesSave.widgetSelected, event="
+                                + evt);
+
+                
+                //testen ob Name leer ist
+                //TODO
+                //komplette Speichervorgan muss erweitert werden da
+                //Ausma? von Film gr??er als bei anderen Composite
+                /*
+                if (textActorsFName.getText().trim().equalsIgnoreCase("") 
+                    ||  textActorsLName.getText().trim().equalsIgnoreCase("")   ) {
+                    
+                    showMsg(l.getString("actors.groupdetail.savebutton.warn.noname.msg"),
+                            l.getString("actors.groupdetail.savebutton.warn.noname.title"),
+                            SWT.ICON_WARNING | SWT.YES);
+
+                    	return;
+                }
+                
+                //testen welcher mode
+                
+                if (mode_actor == ManagementGui.MODE_ADD) {
+                */    
+                    /**
+                     * @todo eine Exception bekommen wieder leider NOCH nicht mit
+                     * d.h. es muss noch ein r?ckgabewert kommen oder eine Exception 
+                     * ?bermitteln werden (aus der DB Klasse)
+                     */
+                    //neues Objekt erzeugen
+                /*
+                	Actor tmp = new Actor(textActorsFName.getText(),
+                            textActorsLName.getText());
+                    
+                    try {
+                        //object speichern
+                        // Fehlerbehandlung
+                        Object o = Database.saveObject(
+                                new Actor(textActorsFName.getText(),
+                                        textActorsLName.getText()));
+                        
+                        // in ?bersichtstabelle einf?gen
+                        insertIntoActorsOverviewTable((Actor)o);
+                        textActorsID.setText( ((Actor)o).getActorId()+"" );
+                        
+                        
+                        //Statusline Nachricht sezten
+                        statusLine.setStatus(1,l.getString("actors.groupdetail.savebutton.newok"));
+
+                    } catch (DataBaseException e) {
+                        if (e.getMessage().equalsIgnoreCase("1")) {
+                            //Fehler beim Speichern des Objectes
+
+                            statusLine.setStatus(3,l.getString("actors.groupdetail.savebutton.errorsave"));
+                            showMsg(l.getString("actors.groupdetail.savebutton.errorsave"),"Fehler", SWT.ICON_ERROR | SWT.OK);
+                            
+                        } else if (e.getMessage().equalsIgnoreCase("2")) {
+                            //fehler beim db aufbau
+                            statusLine.setStatus(3,l.getString("actors.groupdetail.savebutton.errordb"));
+                            showMsg(l.getString("actors.groupdetail.savebutton.errordb"),"Fehler", SWT.ICON_ERROR | SWT.OK);
+                            
+                        } else {
+                            //@todo
+                            e.printStackTrace();
+                        }
+                        
+                    }
+                    
+                    
+                    //alle Buttons auf aktiv setzen
+                    setActorsGroupButtonSaveCancel();
+                    
+                } else if (mode_actor == ManagementGui.MODE_EDIT) {
+                    
+                    Actor tmp = new Actor(textActorsFName.getText(),
+                                    textActorsLName.getText());
+        		tmp.setActorId( new Integer (Integer.parseInt(textActorsID.getText())) );
+                try {
+                    //object speichern
+                    // Fehlerbehandlung
+                    Database.saveObject(tmp);
+                    //?bersichtstabelle aktualisieren
+                    refreshActorsOverviewTable(textActorsSearch.getText());
+                    
+                    //Statusline Nachricht sezten
+                    statusLine.setStatus(1,l.getString("actors.groupdetail.savebutton.editok"));
+                   
+
+                } catch (DataBaseException e) {
+                    if (e.getMessage().equalsIgnoreCase("1")) {
+                        //Fehler beim Speichern des Objectes
+
+                        statusLine.setStatus(3,l.getString("actors.groupdetail.savebutton.errorsave"));
+                        showMsg(l.getString("actors.groupdetail.savebutton.errorsave"),"Fehler", SWT.ICON_ERROR | SWT.OK);
+                        
+                    } else if (e.getMessage().equalsIgnoreCase("2")) {
+                        //fehler beim db aufbau
+                        statusLine.setStatus(3,l.getString("actors.groupdetail.savebutton.errordb"));
+                        showMsg(l.getString("actors.groupdetail.savebutton.errordb"),"Fehler", SWT.ICON_ERROR | SWT.OK);
+                        
+                    } else {
+                        //@todo
+                        e.printStackTrace();
+                    }
+                    
+                }
+                    
+ 
+                    //alle Buttons auf aktiv setzen
+                    setActorsGroupButtonSaveCancel();
+                    
+                }
+                
+                
+                
+                
+                 // @todo Exception werfen, da nur die zwei Modes sein d?rfen
+                 
+            */   
+            }
+        
+        });
+        
+    	    buttonMoviesCancel = new Button(compositeButtons, SWT.PUSH | SWT.CENTER);
+    	    buttonMoviesCancel.setText(l.getString("button.cancel"));
+    	    buttonMoviesCancel.setEnabled(false);
+    	    buttonMoviesCancel.addSelectionListener(new SelectionAdapter() {
+            public void widgetSelected(SelectionEvent evt) {
+                System.out
+                        .println("buttonMoviesCancel.widgetSelected, event="
+                                + evt);
+                setMoviesGroupButtonSaveCancel();
+            }
+        });
+    }
+    
+  }
+
+    /**
+     * 
+     */
+    protected void setMoviesGroupButtonSaveCancel() {
+        tableMoviesOverview.setEnabled(true);
+        textMoviesTitle.setEditable(false);
+        textMoviesDate.setEditable(false);
+        textMoviesDescription.setEditable(false);
+        buttonMoviesCancel.setEnabled(false);
+        buttonMoviesSave.setEnabled(false);
+        buttonMoviesNew.setEnabled(true);
+        buttonMoviesEdit.setEnabled(false);
+        buttonMoviesDelete.setEnabled(false);
+        buttonMoviesEditDirectors.setEnabled(false);
+        buttonMoviesEditActors.setEnabled(false);
+        buttonMoviesEditGenres.setEnabled(false);
+        buttonMoviesEditImages.setEnabled(false);
+    }
+
+    /**
+     * @param text
+     */
+    protected void refreshMoviesOverviewTable(String text) {
+        // TODO Auto-generated method stub
+        
+    }
+
+    /**
+     * @param text
+     */
+    protected void refreshMoviesDetail(String text) {
+        // TODO Auto-generated method stub
+        
+    }
+
+    protected void openDialogDescription() {
+        // TODO Auto-generated method stub
+        Shell dialogShell = new Shell();
+        //Dialog dialogDescription=new Dialog(dialogShell);
+        //dialogDescription.open();
+        Movie film = new Movie();
+        film.setActors(new ArrayList());
+        film.setImages(new ArrayList());
+        film.setGenres(new ArrayList());
+        film.setDirector(new ArrayList());
+        
+        DialogMovie test= new DialogMovie(dialogShell,1, l.getLocale( ),film,DialogMovie.TYPE_ACTOR);
+        test.open();
+
+    }
+    
+}



From rgriesch at sheep.berlios.de  Thu Nov 25 13:46:23 2004
From: rgriesch at sheep.berlios.de (Remo Griesch at BerliOS)
Date: Thu, 25 Nov 2004 13:46:23 +0100
Subject: [Provirent-svn-commit] r171 - project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui
Message-ID: <200411251246.iAPCkNHa016220@sheep.berlios.de>

Author: rgriesch
Date: 2004-11-25 13:46:22 +0100 (Thu, 25 Nov 2004)
New Revision: 171

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java
Log:
Composite Movie - neu eingef?\195?\188gt (nach Absturz)
                  und layout wiederhergestellt

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java	2004-11-25 12:28:29 UTC (rev 170)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java	2004-11-25 12:46:22 UTC (rev 171)
@@ -100,7 +100,11 @@
     private Label labelMoviesID;
     private Label labelMoviesTitle;
     private Label labelMoviesDate;
-    private Label labelMoviesAdvice;
+    private Label labelMoviesDescription;
+    private Label labelMoviesDirectors;
+    private Label labelMoviesActors;
+    private Label labelMoviesGenres;
+    private Label labelMoviesImages;
     
     private Button buttonMoviesNew;
     private Button buttonMoviesSave;
@@ -108,15 +112,23 @@
     private Button buttonMoviesCancel;
     private Button buttonMoviesDelete;
     private Button buttonMoviesFill;
-    private Button buttonMoviesEditActors;
-    private Button buttonMoviesEditDirectors;
-    private Button buttonMoviesEditGenres;
-    private Button buttonMoviesEditImages;
+    private Button buttonMoviesAddActors;
+    private Button buttonMoviesDeleteActors;
+    private Button buttonMoviesAddDirectors;
+    private Button buttonMoviesDeleteDirectors;
+    private Button buttonMoviesAddGenres;
+    private Button buttonMoviesDeleteGenres;
+    private Button buttonMoviesAddImages;
+    private Button buttonMoviesDeleteImages;
      
     private SashForm sashForm1;
     
     private Composite parent;
     private Composite compositeButtons;
+    private Composite compositeMoviesEditDirectors;
+    private Composite compositeMoviesEditActors;
+    private Composite compositeMoviesEditGenres;
+    private Composite compositeMoviesEditImages;
     private List listMoviesImages;
     private List listMoviesGenres;
     private List listMoviesActors;
@@ -579,12 +591,12 @@
         }
         //labels and buttons for Detail
         {
-    	    labelMoviesAdvice = new Label(groupMoviesDetail, SWT.NONE);
-    	    labelMoviesAdvice.setText(l.getString("movies.groupdetail.textdescription"));
+    	    labelMoviesDescription = new Label(groupMoviesDetail, SWT.NONE);
+    	    labelMoviesDescription.setText(l.getString("movies.groupdetail.labeldescription"));
     	    GridData formData2 = new GridData();
     	    formData2.horizontalSpan = 1;
     	    formData2.verticalSpan = 5;
-    	    labelMoviesAdvice.setLayoutData(formData2);
+    	    labelMoviesDescription.setLayoutData(formData2);
     	}
         {
             textMoviesDescription = new Text(groupMoviesDetail, SWT.MULTI | SWT.READ_ONLY | SWT.V_SCROLL | SWT.BORDER);
@@ -595,113 +607,269 @@
     	    formData2.horizontalAlignment = GridData.FILL;
     	    textMoviesDescription.setLayoutData(formData2);
         }
+        //      EditDirectors
         {
-            buttonMoviesEditDirectors = new Button(groupMoviesDetail
-                    , SWT.NONE);
-            buttonMoviesEditDirectors.setText(l
-                .getString("movies.button.editdirectors"));
-            buttonMoviesEditDirectors.setEnabled(false);
-            GridData text1LData2 = new GridData();
-    	    text1LData2.horizontalAlignment = GridData.FILL;
-    	    text1LData2.heightHint = 20;
-    	    text1LData2.grabExcessHorizontalSpace = true;
-    	    text1LData2.verticalSpan = 2;
-    	    buttonMoviesEditDirectors.setLayoutData(text1LData2);        
-            buttonMoviesEditDirectors.addSelectionListener(new SelectionAdapter() {
-                public void widgetSelected(SelectionEvent evt) {
-                   // TODO
+
+            compositeMoviesEditDirectors = new Composite(groupMoviesDetail, SWT.NONE);
+            GridLayout composite1Layout = new GridLayout();
+            GridData composite1LData = new GridData();
+            composite1LData.horizontalAlignment = GridData.FILL;
+            composite1LData.horizontalSpan=1;
+            composite1LData.verticalSpan=1;
+            compositeMoviesEditDirectors.setLayoutData(composite1LData);
+            composite1Layout.numColumns = 2;
+            compositeMoviesEditDirectors.setLayout(composite1Layout);
+        }
+        	{
+        	    labelMoviesDirectors = new Label(compositeMoviesEditDirectors, SWT.NONE);
+        	    labelMoviesDirectors.setText(l.getString("movies.groupdetail.labeldirectors"));
+        	    GridData formData2 = new GridData();
+        	    formData2.horizontalSpan = 2;
+        	    formData2.verticalSpan = 1;
+        	    labelMoviesDirectors.setLayoutData(formData2);
+        	}
+        	{
+        	    buttonMoviesAddDirectors = new Button(compositeMoviesEditDirectors
+        	            , SWT.NONE);
+        	    buttonMoviesAddDirectors.setText(l
+        	            .getString("movies.button.additem"));
+        	    buttonMoviesAddDirectors.setEnabled(false);
+        	    GridData text1LData2 = new GridData();
+        	    text1LData2.heightHint = 20;
+        	    text1LData2.horizontalSpan =1;
+        	    text1LData2.horizontalAlignment = GridData.BEGINNING;
+        	    buttonMoviesAddDirectors.setLayoutData(text1LData2);        
+        	    buttonMoviesAddDirectors.addSelectionListener(new SelectionAdapter() {
+        	        public void widgetSelected(SelectionEvent evt) {
+        	            // TODO
+
+
                     
-                }
-            });  
-        }
+        	        }
+        	    });  
+        	}
+        	{
+        	    buttonMoviesDeleteDirectors = new Button(compositeMoviesEditDirectors, SWT.NONE);
+        	    buttonMoviesDeleteDirectors.setText(l
+        	            .getString("movies.button.deleteitem"));
+        	    buttonMoviesDeleteDirectors.setEnabled(false);
+        	    GridData text1LData2 = new GridData();
+        	    text1LData2.horizontalAlignment = GridData.BEGINNING;
+        	    text1LData2.heightHint = 20;
+        	    text1LData2.horizontalSpan =1;
+        	    buttonMoviesDeleteDirectors.setLayoutData(text1LData2);        
+        	    buttonMoviesDeleteDirectors.addSelectionListener(new SelectionAdapter() {
+        	        public void widgetSelected(SelectionEvent evt) {
+        	            // TODO
+                    
+        	        }
+        	    });  
+        	}
         {
             listMoviesDirectors = new List(groupMoviesDetail, SWT.BORDER);
             GridData listMoviesDirectorsLData = new GridData();
             listMoviesDirectorsLData.horizontalAlignment = GridData.FILL;
             listMoviesDirectorsLData.horizontalSpan = 5;
-            listMoviesDirectorsLData.verticalSpan = 2;
+            listMoviesDirectorsLData.verticalSpan = 1;
             listMoviesDirectors.setLayoutData(listMoviesDirectorsLData);
+        }// EditDirectors
+        // Edit Actors
+        {
+            compositeMoviesEditActors = new Composite(groupMoviesDetail, SWT.NONE);
+            GridLayout composite1Layout = new GridLayout();
+            GridData composite1LData = new GridData();
+            composite1LData.horizontalAlignment = GridData.FILL;
+            composite1LData.horizontalSpan=1;
+            composite1LData.verticalSpan=1;
+            compositeMoviesEditActors.setLayoutData(composite1LData);
+            composite1Layout.numColumns = 2;
+            compositeMoviesEditActors.setLayout(composite1Layout);
         }
-        {
-            buttonMoviesEditActors = new Button(groupMoviesDetail
-                    , SWT.NONE);
-            buttonMoviesEditActors.setText(l
-                .getString("movies.button.editactors"));
-            buttonMoviesEditActors.setEnabled(false);
-            GridData text1LData2 = new GridData();
-            text1LData2.verticalSpan = 2;
-            text1LData2.horizontalSpan = 1;
-    	    text1LData2.horizontalAlignment = GridData.FILL;
-    	    text1LData2.heightHint = 20;
-    	    text1LData2.grabExcessHorizontalSpace = true;
-    	    buttonMoviesEditActors.setLayoutData(text1LData2);        
-            buttonMoviesEditActors.addSelectionListener(new SelectionAdapter() {
-                public void widgetSelected(SelectionEvent evt) {
-                   // TODO
+
+        	{
+        	    labelMoviesActors = new Label(compositeMoviesEditActors, SWT.NONE);
+        	    labelMoviesActors.setText(l.getString("movies.groupdetail.labelactors"));
+        	    GridData formData2 = new GridData();
+        	    formData2.horizontalSpan = 2;
+        	    formData2.verticalSpan = 1;
+        	    labelMoviesActors.setLayoutData(formData2);
+        	}
+        	{
+        	    buttonMoviesAddActors = new Button(compositeMoviesEditActors
+        	            , SWT.NONE);
+        	    buttonMoviesAddActors.setText(l
+        	            .getString("movies.button.additem"));
+        	    buttonMoviesAddActors.setEnabled(false);
+        	    GridData text1LData2 = new GridData();
+        	    text1LData2.heightHint = 20;
+        	    text1LData2.horizontalSpan =1;
+        	    text1LData2.horizontalAlignment = GridData.BEGINNING;
+        	    buttonMoviesAddActors.setLayoutData(text1LData2);        
+        	    buttonMoviesAddActors.addSelectionListener(new SelectionAdapter() {
+        	        public void widgetSelected(SelectionEvent evt) {
+        	            // TODO
                     
-                }
-            });  
-        }
+        	        }
+        	    });  
+        	}
+        	{
+        	    buttonMoviesDeleteActors = new Button(compositeMoviesEditActors, SWT.NONE);
+        	    buttonMoviesDeleteActors.setText(l
+        	            .getString("movies.button.deleteitem"));
+        	    buttonMoviesDeleteActors.setEnabled(false);
+        	    GridData text1LData2 = new GridData();
+        	    text1LData2.horizontalAlignment = GridData.BEGINNING;
+        	    text1LData2.heightHint = 20;
+        	    text1LData2.horizontalSpan =1;
+        	    buttonMoviesDeleteActors.setLayoutData(text1LData2);        
+        	    buttonMoviesDeleteActors.addSelectionListener(new SelectionAdapter() {
+        	        public void widgetSelected(SelectionEvent evt) {
+        	            // TODO
+                    
+        	        }
+        	    });  
+        	}
         {
             listMoviesActors = new List(groupMoviesDetail, SWT.BORDER);
             GridData listMoviesActorsLData = new GridData();
             listMoviesActorsLData.horizontalAlignment = GridData.FILL;
             listMoviesActorsLData.horizontalSpan = 5;
-            listMoviesActorsLData.verticalSpan = 2;
+            listMoviesActorsLData.verticalSpan = 1;
+            listMoviesActorsLData.grabExcessHorizontalSpace = true;
+            listMoviesActorsLData.verticalAlignment = GridData.FILL;
             listMoviesActors.setLayoutData(listMoviesActorsLData);
+        }//Edit Actors
+        //Edit Genres
+        {
+            compositeMoviesEditGenres = new Composite(groupMoviesDetail, SWT.NONE);
+            GridLayout composite1Layout = new GridLayout();
+            GridData composite1LData = new GridData();
+            composite1LData.horizontalAlignment = GridData.FILL;
+            composite1LData.horizontalSpan=1;
+            composite1LData.verticalSpan=1;
+            compositeMoviesEditGenres.setLayoutData(composite1LData);
+            composite1Layout.numColumns = 2;
+            compositeMoviesEditGenres.setLayout(composite1Layout);
         }
-        {
-            buttonMoviesEditGenres = new Button(groupMoviesDetail
-                    , SWT.NONE);
-            buttonMoviesEditGenres.setText(l
-                .getString("movies.button.editgenres"));
-            buttonMoviesEditGenres.setEnabled(false);
-            GridData text1LData2 = new GridData();
-    	    text1LData2.horizontalAlignment = GridData.FILL;
-    	    text1LData2.heightHint = 20;
-    	    text1LData2.grabExcessHorizontalSpace = true;
-    	    text1LData2.verticalSpan = 2;
-    	    buttonMoviesEditGenres.setLayoutData(text1LData2);        
-            buttonMoviesEditGenres.addSelectionListener(new SelectionAdapter() {
-                public void widgetSelected(SelectionEvent evt) {
-                   // TODO
+
+        	{
+        	    labelMoviesGenres = new Label(compositeMoviesEditGenres, SWT.NONE);
+        	    labelMoviesGenres.setText(l.getString("movies.groupdetail.labelgenres"));
+        	    GridData formData2 = new GridData();
+        	    formData2.horizontalSpan = 2;
+        	    formData2.verticalSpan = 1;
+        	    labelMoviesGenres.setLayoutData(formData2);
+        	}
+        	{
+        	    buttonMoviesAddGenres = new Button(compositeMoviesEditGenres
+        	            , SWT.NONE);
+        	    buttonMoviesAddGenres.setText(l
+        	            .getString("movies.button.additem"));
+        	    buttonMoviesAddGenres.setEnabled(false);
+        	    GridData text1LData2 = new GridData();
+        	    text1LData2.heightHint = 20;
+        	    text1LData2.horizontalSpan =1;
+        	    text1LData2.horizontalAlignment = GridData.BEGINNING;
+        	    buttonMoviesAddGenres.setLayoutData(text1LData2);        
+        	    buttonMoviesAddGenres.addSelectionListener(new SelectionAdapter() {
+        	        public void widgetSelected(SelectionEvent evt) {
+        	            // TODO
+
                     
-                }
-            });  
-        }
+        	        }
+        	    });  
+        	}
+        	{
+        	    buttonMoviesDeleteGenres = new Button(compositeMoviesEditGenres, SWT.NONE);
+        	    buttonMoviesDeleteGenres.setText(l
+        	            .getString("movies.button.deleteitem"));
+        	    buttonMoviesDeleteGenres.setEnabled(false);
+        	    GridData text1LData2 = new GridData();
+        	    text1LData2.horizontalAlignment = GridData.BEGINNING;
+        	    text1LData2.heightHint = 20;
+        	    text1LData2.horizontalSpan =1;
+        	    buttonMoviesDeleteGenres.setLayoutData(text1LData2);        
+        	    buttonMoviesDeleteGenres.addSelectionListener(new SelectionAdapter() {
+        	        public void widgetSelected(SelectionEvent evt) {
+        	            // TODO
+                    
+        	        }
+        	    });  
+        	}
         {
             listMoviesGenres = new List(groupMoviesDetail, SWT.BORDER);
             GridData listMoviesGenresLData = new GridData();
+
+            listMoviesGenresLData.horizontalAlignment = GridData.FILL;
             listMoviesGenresLData.horizontalSpan = 5;
-            listMoviesGenresLData.verticalSpan = 2;
-            listMoviesGenresLData.horizontalAlignment = GridData.FILL;
+            listMoviesGenresLData.verticalSpan = 1;
             listMoviesGenres.setLayoutData(listMoviesGenresLData);
+        }// Edit Genre
+        // Edit Images
+        {
+            compositeMoviesEditImages = new Composite(groupMoviesDetail, SWT.NONE);
+            GridLayout composite1Layout = new GridLayout();
+            GridData composite1LData = new GridData();
+            composite1LData.horizontalAlignment = GridData.FILL;
+            composite1LData.horizontalSpan=1;
+            composite1LData.verticalSpan=1;
+            compositeMoviesEditImages.setLayoutData(composite1LData);
+            composite1Layout.numColumns = 2;
+            compositeMoviesEditImages.setLayout(composite1Layout);
         }
-        {
-            buttonMoviesEditImages = new Button(groupMoviesDetail
-                    , SWT.NONE);
-            buttonMoviesEditImages.setText(l
-                .getString("movies.button.editimages"));
-            buttonMoviesEditImages.setEnabled(false);
-            GridData text1LData2 = new GridData();
-    	    text1LData2.heightHint = 20;
-    	    text1LData2.horizontalSpan = 1;
-    	    text1LData2.horizontalAlignment = GridData.FILL;
-    	    buttonMoviesEditImages.setLayoutData(text1LData2);        
-            buttonMoviesEditImages.addSelectionListener(new SelectionAdapter() {
-                public void widgetSelected(SelectionEvent evt) {
-                   // TODO
+
+        	{
+        	    labelMoviesImages = new Label(compositeMoviesEditImages, SWT.NONE);
+        	    labelMoviesImages.setText(l.getString("movies.groupdetail.labelimages"));
+        	    GridData formData2 = new GridData();
+        	    formData2.horizontalSpan = 2;
+        	    formData2.verticalSpan = 1;
+        	    labelMoviesImages.setLayoutData(formData2);
+        	}
+        	{
+        	    buttonMoviesAddImages = new Button(compositeMoviesEditImages
+        	            , SWT.NONE);
+        	    buttonMoviesAddImages.setText(l
+        	            .getString("movies.button.additem"));
+        	    buttonMoviesAddImages.setEnabled(false);
+        	    GridData text1LData2 = new GridData();
+        	    text1LData2.heightHint = 20;
+        	    text1LData2.horizontalSpan =1;
+        	    text1LData2.horizontalAlignment = GridData.BEGINNING;
+        	    buttonMoviesAddImages.setLayoutData(text1LData2);        
+        	    buttonMoviesAddImages.addSelectionListener(new SelectionAdapter() {
+        	        public void widgetSelected(SelectionEvent evt) {
+        	            // TODO
+
+        	        }
+        	    });  
+        	}
+        	{
+        	    buttonMoviesDeleteImages = new Button(compositeMoviesEditImages, SWT.NONE);
+        	    buttonMoviesDeleteImages.setText(l
+        	            .getString("movies.button.deleteitem"));
+        	    buttonMoviesDeleteImages.setEnabled(false);
+        	    GridData text1LData2 = new GridData();
+        	    text1LData2.horizontalAlignment = GridData.BEGINNING;
+        	    text1LData2.heightHint = 20;
+        	    text1LData2.horizontalSpan =1;
+        	    buttonMoviesDeleteImages.setLayoutData(text1LData2);        
+        	    buttonMoviesDeleteImages.addSelectionListener(new SelectionAdapter() {
+        	        public void widgetSelected(SelectionEvent evt) {
+        	            // TODO
                     
-                }
-            });  
-        }
+        	        }
+        	    });  
+        	}
         {
             listMoviesImages = new List(groupMoviesDetail, SWT.BORDER);
             GridData listMoviesImagesLData = new GridData();
+            listMoviesImagesLData.horizontalAlignment = GridData.FILL;
             listMoviesImagesLData.horizontalSpan = 5;
-            listMoviesImagesLData.horizontalAlignment = GridData.FILL;
+            listMoviesImagesLData.verticalSpan = 1;
             listMoviesImages.setLayoutData(listMoviesImagesLData);
-        }
+        }// Edit Images
+
         {
     	    compositeButtons = new Composite(groupMoviesDetail, SWT.EMBEDDED);
     	    GridLayout composite2Layout = new GridLayout();
@@ -738,10 +906,14 @@
                 buttonMoviesNew.setEnabled(false);
                 buttonMoviesEdit.setEnabled(false);
                 buttonMoviesDelete.setEnabled(false);
-                buttonMoviesEditDirectors.setEnabled(true);
-                buttonMoviesEditActors.setEnabled(true);
-                buttonMoviesEditGenres.setEnabled(true);
-                buttonMoviesEditImages.setEnabled(true);
+                buttonMoviesAddDirectors.setEnabled(true);
+                buttonMoviesDeleteDirectors.setEnabled(true);
+                buttonMoviesAddActors.setEnabled(true);
+                buttonMoviesDeleteActors.setEnabled(true);
+                buttonMoviesAddGenres.setEnabled(true);
+                buttonMoviesDeleteGenres.setEnabled(true);
+                buttonMoviesAddImages.setEnabled(true);
+                buttonMoviesDeleteImages.setEnabled(true);
                 
                 textMoviesSearch.setEditable(false);
                 tableMoviesOverview.setEnabled(false);
@@ -1018,10 +1190,14 @@
         buttonMoviesNew.setEnabled(true);
         buttonMoviesEdit.setEnabled(false);
         buttonMoviesDelete.setEnabled(false);
-        buttonMoviesEditDirectors.setEnabled(false);
-        buttonMoviesEditActors.setEnabled(false);
-        buttonMoviesEditGenres.setEnabled(false);
-        buttonMoviesEditImages.setEnabled(false);
+        buttonMoviesAddDirectors.setEnabled(false);
+        buttonMoviesDeleteDirectors.setEnabled(false);
+        buttonMoviesAddActors.setEnabled(false);
+        buttonMoviesDeleteActors.setEnabled(false);
+        buttonMoviesAddGenres.setEnabled(false);
+        buttonMoviesDeleteGenres.setEnabled(false);
+        buttonMoviesAddImages.setEnabled(false);
+        buttonMoviesDeleteImages.setEnabled(false);
     }
 
     /**



From pschneider at sheep.berlios.de  Fri Nov 26 23:02:23 2004
From: pschneider at sheep.berlios.de (Philipp Schneider at BerliOS)
Date: Fri, 26 Nov 2004 23:02:23 +0100
Subject: [Provirent-svn-commit] r172 - project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui
Message-ID: <200411262202.iAQM2NNH016516@sheep.berlios.de>

Author: pschneider
Date: 2004-11-26 23:02:22 +0100 (Fri, 26 Nov 2004)
New Revision: 172

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java
Log:
- Button hinzuf?\195?\188gen implementiert

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java	2004-11-25 12:46:22 UTC (rev 171)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java	2004-11-26 22:02:22 UTC (rev 172)
@@ -13,9 +13,6 @@
 import org.eclipse.swt.events.FocusEvent;
 import org.eclipse.swt.events.SelectionAdapter;
 import org.eclipse.swt.events.SelectionEvent;
-import org.eclipse.swt.graphics.Color;
-import org.eclipse.swt.graphics.Device;
-import org.eclipse.swt.graphics.DeviceData;
 import org.eclipse.swt.layout.FormAttachment;
 import org.eclipse.swt.layout.FormData;
 import org.eclipse.swt.layout.GridData;
@@ -26,21 +23,22 @@
 import org.eclipse.swt.widgets.Event;
 import org.eclipse.swt.widgets.Group;
 import org.eclipse.swt.widgets.Label;
+import org.eclipse.swt.widgets.List;
 import org.eclipse.swt.widgets.Listener;
 import org.eclipse.swt.widgets.Shell;
 import org.eclipse.swt.widgets.Table;
 import org.eclipse.swt.widgets.TableColumn;
 import org.eclipse.swt.widgets.Text;
-import org.eclipse.swt.custom.StyledText;
 
 import com.cloudgarden.resource.SWTResourceManager;
 
+import de.hsharz.provirent.objects.Actor;
+import de.hsharz.provirent.objects.Director;
+import de.hsharz.provirent.objects.Genre;
+import de.hsharz.provirent.objects.Image;
 import de.hsharz.provirent.objects.Movie;
 import de.hsharz.provirent.persistence.DataBaseException;
 import de.hsharz.provirent.persistence.Database;
-
-
-import org.eclipse.swt.widgets.List;
 /**
 * This code was generated using CloudGarden's Jigloo
 * SWT/Swing GUI Builder, which is free for non-commercial
@@ -140,7 +138,9 @@
     private StatusLineStyledText statusLine;
     
     private ResourceBundle l;
+    private Locale locale;
     
+    private Movie movie;
     
     /*
      * ?ndert die Sprache aller Elemente
@@ -198,8 +198,9 @@
         //Statusline wird gestzt
         statusLine = status;
         
+        locale = l;
         //sprache wird init
-        initLanguage(l);
+        initLanguage(locale);
 	    
 	    
 		initGUI();
@@ -529,6 +530,7 @@
     	    GridData formData2 = new GridData();
     	    formData2.heightHint = 15;
     	    formData2.horizontalAlignment = GridData.FILL;
+    	    formData2.verticalAlignment = GridData.BEGINNING;
     	    labelMoviesID.setLayoutData(formData2);
     	}
     	{
@@ -553,6 +555,7 @@
             GridData labelActorNameLData = new GridData();
             labelActorNameLData.heightHint = 15;
             labelActorNameLData.horizontalAlignment = GridData.FILL;
+            labelActorNameLData.verticalAlignment = GridData.BEGINNING;
             labelMoviesTitle.setLayoutData(labelActorNameLData);
         }
         {
@@ -576,6 +579,7 @@
             GridData labelActorNameLData = new GridData();
             labelActorNameLData.heightHint = 15;
             labelActorNameLData.horizontalAlignment = GridData.FILL;
+            labelActorNameLData.verticalAlignment = GridData.BEGINNING;
             labelMoviesDate.setLayoutData(labelActorNameLData);
         }
         {
@@ -594,8 +598,8 @@
     	    labelMoviesDescription = new Label(groupMoviesDetail, SWT.NONE);
     	    labelMoviesDescription.setText(l.getString("movies.groupdetail.labeldescription"));
     	    GridData formData2 = new GridData();
-    	    formData2.horizontalSpan = 1;
     	    formData2.verticalSpan = 5;
+    	    formData2.verticalAlignment = GridData.BEGINNING;
     	    labelMoviesDescription.setLayoutData(formData2);
     	}
         {
@@ -614,8 +618,7 @@
             GridLayout composite1Layout = new GridLayout();
             GridData composite1LData = new GridData();
             composite1LData.horizontalAlignment = GridData.FILL;
-            composite1LData.horizontalSpan=1;
-            composite1LData.verticalSpan=1;
+            composite1LData.verticalAlignment = GridData.BEGINNING;
             compositeMoviesEditDirectors.setLayoutData(composite1LData);
             composite1Layout.numColumns = 2;
             compositeMoviesEditDirectors.setLayout(composite1Layout);
@@ -641,10 +644,14 @@
         	    buttonMoviesAddDirectors.setLayoutData(text1LData2);        
         	    buttonMoviesAddDirectors.addSelectionListener(new SelectionAdapter() {
         	        public void widgetSelected(SelectionEvent evt) {
-        	            // TODO
-
-
+        	            DialogMovie dialog = new DialogMovie(getShell(),0,locale,movie,DialogMovie.TYPE_DIRECTOR);
+        	            dialog.open();
                     
+        	            listMoviesDirectors.removeAll();
+        	            for(int i =0; i< movie.getDirector().size(); i++){
+        	                listMoviesDirectors.add( ((Director)movie.getDirector().get(i)).getLastName() );
+        	            }                    
+        	            
         	        }
         	    });  
         	}
@@ -679,8 +686,7 @@
             GridLayout composite1Layout = new GridLayout();
             GridData composite1LData = new GridData();
             composite1LData.horizontalAlignment = GridData.FILL;
-            composite1LData.horizontalSpan=1;
-            composite1LData.verticalSpan=1;
+            composite1LData.verticalAlignment = GridData.BEGINNING;
             compositeMoviesEditActors.setLayoutData(composite1LData);
             composite1Layout.numColumns = 2;
             compositeMoviesEditActors.setLayout(composite1Layout);
@@ -707,8 +713,13 @@
         	    buttonMoviesAddActors.setLayoutData(text1LData2);        
         	    buttonMoviesAddActors.addSelectionListener(new SelectionAdapter() {
         	        public void widgetSelected(SelectionEvent evt) {
-        	            // TODO
-                    
+        	            DialogMovie dialog = new DialogMovie(getShell(),0,locale,movie,DialogMovie.TYPE_ACTOR);
+        	            dialog.open();
+
+        	            listMoviesActors.removeAll();
+        	            for(int i =0; i< movie.getActors().size(); i++){
+        	                listMoviesActors.add( ((Actor)movie.getActors().get(i)).getLastName() );
+        	            }                    
         	        }
         	    });  
         	}
@@ -745,8 +756,7 @@
             GridLayout composite1Layout = new GridLayout();
             GridData composite1LData = new GridData();
             composite1LData.horizontalAlignment = GridData.FILL;
-            composite1LData.horizontalSpan=1;
-            composite1LData.verticalSpan=1;
+            composite1LData.verticalAlignment = GridData.BEGINNING;
             compositeMoviesEditGenres.setLayoutData(composite1LData);
             composite1Layout.numColumns = 2;
             compositeMoviesEditGenres.setLayout(composite1Layout);
@@ -773,8 +783,15 @@
         	    buttonMoviesAddGenres.setLayoutData(text1LData2);        
         	    buttonMoviesAddGenres.addSelectionListener(new SelectionAdapter() {
         	        public void widgetSelected(SelectionEvent evt) {
-        	            // TODO
+        	            DialogMovie dialog = new DialogMovie(getShell(),0,locale,movie,DialogMovie.TYPE_GENRE);
+        	            dialog.open();
 
+        	            listMoviesGenres.removeAll();
+        	            for(int i =0; i< movie.getGenres().size(); i++){
+        	                listMoviesGenres.add( ((Genre)movie.getGenres().get(i)).getName() );
+        	            }
+        	            
+
                     
         	        }
         	    });  
@@ -811,8 +828,7 @@
             GridLayout composite1Layout = new GridLayout();
             GridData composite1LData = new GridData();
             composite1LData.horizontalAlignment = GridData.FILL;
-            composite1LData.horizontalSpan=1;
-            composite1LData.verticalSpan=1;
+            composite1LData.verticalAlignment = GridData.BEGINNING;
             compositeMoviesEditImages.setLayoutData(composite1LData);
             composite1Layout.numColumns = 2;
             compositeMoviesEditImages.setLayout(composite1Layout);
@@ -839,8 +855,13 @@
         	    buttonMoviesAddImages.setLayoutData(text1LData2);        
         	    buttonMoviesAddImages.addSelectionListener(new SelectionAdapter() {
         	        public void widgetSelected(SelectionEvent evt) {
-        	            // TODO
+        	            DialogMovie dialog = new DialogMovie(getShell(),0,locale,movie,DialogMovie.TYPE_IMAGE);
+        	            dialog.open();
 
+        	            listMoviesImages.removeAll();
+        	            for(int i =0; i< movie.getImages().size(); i++){
+        	                listMoviesImages.add( ((Image)movie.getImages().get(i)).getImageFileName() );
+        	            }
         	        }
         	    });  
         	}
@@ -918,6 +939,15 @@
                 textMoviesSearch.setEditable(false);
                 tableMoviesOverview.setEnabled(false);
 
+                movie = new Movie();
+                movie.setActors(new ArrayList());
+                movie.setAudioFormats(new ArrayList());
+                movie.setDirector(new ArrayList());
+                movie.setGenres(new ArrayList());
+                movie.setImages(new ArrayList());
+                movie.setLanguages(new ArrayList());
+                movie.setSubtitles(new ArrayList());
+                movie.setVideoFormats(new ArrayList());
             }
         });
 



From sforstner at sheep.berlios.de  Mon Nov 29 10:47:21 2004
From: sforstner at sheep.berlios.de (Stefan at BerliOS)
Date: Mon, 29 Nov 2004 10:47:21 +0100
Subject: [Provirent-svn-commit] r173 - in project_src/provirent_hibernate/src: de/hsharz/provirent de/hsharz/provirent/persistence test/provirent/hibernate
Message-ID: <200411290947.iAT9lLSw019060@sheep.berlios.de>

Author: sforstner
Date: 2004-11-29 10:47:20 +0100 (Mon, 29 Nov 2004)
New Revision: 173

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/Util.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java
   project_src/provirent_hibernate/src/test/provirent/hibernate/TestPayment.java
Log:


Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/Util.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/Util.java	2004-11-26 22:02:22 UTC (rev 172)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/Util.java	2004-11-29 09:47:20 UTC (rev 173)
@@ -34,6 +34,9 @@
 
 import java.io.UnsupportedEncodingException;
 import java.security.MessageDigest;
+import java.text.DateFormatSymbols;
+import java.text.ParseException;
+import java.text.SimpleDateFormat;
 import java.util.Calendar;
 import java.util.Properties;
 import java.util.StringTokenizer;
@@ -139,20 +142,25 @@
     public static Calendar getDateByText(String textdate) throws DataBaseException {
         StringTokenizer tokenizer = new StringTokenizer(textdate, ".");
         Vector vec = new Vector();
-        while (tokenizer.hasMoreTokens()) {
-           vec.add(tokenizer.nextToken());
+        SimpleDateFormat format = new SimpleDateFormat("dd.MM.yyyy");
+        Calendar date = Calendar.getInstance();
+        try {
+            date.setTime(format.parse(textdate));
+        } catch (ParseException e) {
+            // TODO Auto-generated catch block
+            e.printStackTrace();
         }
+        return date;
+    }
+    
+    public static String getTextByDate(Calendar date) throws DataBaseException {
+        SimpleDateFormat format = new SimpleDateFormat("dd.MM.yyyy");
         
-        if (vec.size() != 3) {
-            return null;     
-        } else {
-            String days = (String) vec.get(0);
-            String months = (String) vec.get(1);
-            String years = (String) vec.get(2);
-            Calendar date = Calendar.getInstance();
-            date.set(Integer.parseInt(years), Integer.parseInt(months), 
-                     Integer.parseInt(days));
-            return date;
-        }
+        return format.format(date.getTime());
     }
+    
+    public static int compareDates(Calendar Date1, Calendar Date2) {
+        
+        return 0;
+    }
 }
\ No newline at end of file

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java	2004-11-26 22:02:22 UTC (rev 172)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java	2004-11-29 09:47:20 UTC (rev 173)
@@ -33,6 +33,8 @@
 package de.hsharz.provirent.persistence;
 
 import java.util.ArrayList;
+import java.util.Calendar;
+import java.util.Hashtable;
 import java.util.List;
 
 import net.sf.hibernate.Criteria;
@@ -1449,6 +1451,13 @@
 	            Criteria criteria = s.createCriteria(Payment.class);
 	            //any of the criteria 
 	            Disjunction any = Expression.disjunction();
+	            any.add(Expression.sql("Select * from PAYMENT where name like '" + 
+	                    		name + 
+	                    		"' and startdate = (select startdate from PAYMENT where name like '" + 
+	                    		name +
+	                    						   "')"));
+	            
+	            
 	
 	            //if filter not empty
 	            if (filter != null && !filter.equalsIgnoreCase("")) {
@@ -1464,10 +1473,18 @@
 	                }
 	                
 	            }
+	            
 	            //add all criteria
 	            criteria.add(any);
 	            //get the results
 	            returnlist = criteria.list();
+	            Hashtable list = new Hashtable();
+	            for (int i = 0; i < returnlist.size(); i++) {
+	                Payment paym = (Payment) returnlist.get(i);
+	                list.put(paym.getName(), paym.getStartdate());
+	            }
+	            
+	            
 	
 	
 	

Modified: project_src/provirent_hibernate/src/test/provirent/hibernate/TestPayment.java
===================================================================
--- project_src/provirent_hibernate/src/test/provirent/hibernate/TestPayment.java	2004-11-26 22:02:22 UTC (rev 172)
+++ project_src/provirent_hibernate/src/test/provirent/hibernate/TestPayment.java	2004-11-29 09:47:20 UTC (rev 173)
@@ -236,12 +236,19 @@
 
                 //create new objects
                 List Payments = new ArrayList();
+                Calendar date1 = Calendar.getInstance();
+                date1.set(2004,11,12);
+                Calendar date2 = Calendar.getInstance();
+                date2.set(2004,11,30);
+                Calendar date3 = Calendar.getInstance();
+                date3.set(2005,1,16);
+                Calendar date4 = Calendar.getInstance();
+                date4.set(2005,11,8);
+                Payment myp1 = new Payment("A", 2.00d, 4.00d, 8.00d,date1);
+                Payment myp2 = new Payment("B", 3.00d, 6.00d, 12.00d,date2);
+                Payment myp3 = new Payment("C", 4.00d, 8.00d, 14.00d,date3);
+                Payment myp4 = new Payment("D", 5.00d, 10.00d, 20.00d,date4);
 
-                Payment myp1 = new Payment("A", 2.00d, 4.00d, 8.00d,Calendar.getInstance());
-                Payment myp2 = new Payment("B", 3.00d, 6.00d, 12.00d,Calendar.getInstance());
-                Payment myp3 = new Payment("C", 4.00d, 8.00d, 14.00d,Calendar.getInstance());
-                Payment myp4 = new Payment("D", 5.00d, 10.00d, 20.00d,Calendar.getInstance());
-
                 
                 Payments.add(myp1);
                 Payments.add(myp2);



From sforstner at sheep.berlios.de  Mon Nov 29 11:18:59 2004
From: sforstner at sheep.berlios.de (Stefan at BerliOS)
Date: Mon, 29 Nov 2004 11:18:59 +0100
Subject: [Provirent-svn-commit] r174 - project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui
Message-ID: <200411291018.iATAIxfx020104@sheep.berlios.de>

Author: sforstner
Date: 2004-11-29 11:18:58 +0100 (Mon, 29 Nov 2004)
New Revision: 174

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositePayment.java
Log:


Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositePayment.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositePayment.java	2004-11-29 09:47:20 UTC (rev 173)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositePayment.java	2004-11-29 10:18:58 UTC (rev 174)
@@ -3,9 +3,7 @@
 import java.text.DateFormat;
 import java.text.MessageFormat;
 import java.text.ParseException;
-import java.text.SimpleDateFormat;
 import java.util.Calendar;
-import java.util.Date;
 import java.util.Locale;
 import java.util.PropertyResourceBundle;
 import java.util.ResourceBundle;
@@ -203,7 +201,12 @@
             sashForm1.setLayoutData(sashForm1LData1);
 
             initPaymentGroup();
-            refreshPaymentTable(textPaymentSearch.getText());
+            try {
+                refreshPaymentTable(textPaymentSearch.getText());
+            } catch (DataBaseException e) {
+                // TODO Auto-generated catch block
+                e.printStackTrace();
+            }
 
         }
         this.layout();
@@ -847,8 +850,9 @@
 
     /**
      * @param text
+     * @throws DataBaseException
      */
-    protected void refreshPaymentTable(final String filter) {
+    protected void refreshPaymentTable(final String filter) throws DataBaseException {
         if (tablePayment == null) {
             System.out
                     .println("Konnte Paymenttable nicht refreshen, da diese null ist!");
@@ -869,7 +873,7 @@
                     					Double.toString(o.getDuration1()),
                     					Double.toString(o.getDuration2()), 
                     					Double.toString(o.getDuration3()),
-                    			        DateFormat.getDateInstance(DateFormat.MEDIUM).format(o.getStartdate().getTime())
+                    					Util.getTextByDate(o.getStartdate())
                     					});
 
         }
@@ -934,7 +938,12 @@
                             + textPaymentSearch.getText() + ") - start");
                 }
 
-                refreshPaymentTable(textPaymentSearch.getText());
+                try {
+                    refreshPaymentTable(textPaymentSearch.getText());
+                } catch (DataBaseException e) {
+                    // TODO Auto-generated catch block
+                    e.printStackTrace();
+                }
 
                 if (logger.isDebugEnabled()) {
                     logger.debug("focusLost(FocusEvent) - end");
@@ -949,7 +958,12 @@
                             + textPaymentSearch.getText() + ") - start");
                 }
 
-                refreshPaymentTable(textPaymentSearch.getText());
+                try {
+                    refreshPaymentTable(textPaymentSearch.getText());
+                } catch (DataBaseException e1) {
+                    // TODO Auto-generated catch block
+                    e1.printStackTrace();
+                }
 
                 if (logger.isDebugEnabled()) {
                     logger.debug("handleEvent(Event) - end");



From pschneider at sheep.berlios.de  Mon Nov 29 19:29:26 2004
From: pschneider at sheep.berlios.de (Philipp Schneider at BerliOS)
Date: Mon, 29 Nov 2004 19:29:26 +0100
Subject: [Provirent-svn-commit] r175 - in project_src/provirent_hibernate/src: de/hsharz/provirent/management/gui de/hsharz/provirent/objects de/hsharz/provirent/persistence test/provirent/hibernate
Message-ID: <200411291829.iATITQf3027299@sheep.berlios.de>

Author: pschneider
Date: 2004-11-29 19:29:26 +0100 (Mon, 29 Nov 2004)
New Revision: 175

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeImage.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Dvd.hbm.xml
   project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Dvd.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Movie.hbm.xml
   project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Movie.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/objects/MovieOrder.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java
   project_src/provirent_hibernate/src/test/provirent/hibernate/TestAudioFormat.java
Log:


Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeImage.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeImage.java	2004-11-29 10:18:58 UTC (rev 174)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeImage.java	2004-11-29 18:29:26 UTC (rev 175)
@@ -75,10 +75,8 @@
      */
     private static final Logger logger = Logger.getLogger(CompositeImage.class);
 
-    private byte[] imagebytedata;
-    
-    private ImageData imagedata;
 
+
     private Label labelImagesResize;
 
     private Scale scaleResize;
@@ -93,7 +91,10 @@
 
     private SashForm sashForm2;
 
-    private Image ideaImage, scaledImage;
+    //private Image ideaImage, scaledImage;
+    //private byte[] imagebytedata;
+    private ImageData original_imagedata;    
+    private ImageData scaled_imagedata;
 
     private int iy, ix = 0;
 
@@ -519,9 +520,7 @@
                     String selectedFile = fileDialog.open();
                     if (selectedFile != null) {
 
-                        imagedata = new ImageData(selectedFile);
-                        scaledImage = ideaImage = new Image(getDisplay(),
-                                imagedata);
+                        original_imagedata = scaled_imagedata = new ImageData(selectedFile);
 
                         canvasImg.redraw();
                         textFileUrl.setText(fileDialog.getFilterPath()
@@ -566,7 +565,7 @@
             canvasImg.setLayoutData(canvasImgLData);
             canvasImg.addPaintListener(new PaintListener() {
                 public void paintControl(PaintEvent e) {
-                    if (ideaImage != null && !ideaImage.isDisposed()) {
+                    if (scaled_imagedata != null ) {
                         paintImage(e);
                         //e.gc.drawImage(scaledImage, 0, 0);
                         e.gc.dispose();
@@ -622,8 +621,8 @@
                     //skale the image
                     float scaleFaktor = (float) scaleResize.getSelection() / 100;
 
-                    int newwidth = (int) (imagedata.width * scaleFaktor);
-                    int newheight = (int) (imagedata.height * scaleFaktor);
+                    int newwidth = (int) (original_imagedata.width * scaleFaktor);
+                    int newheight = (int) (original_imagedata.height * scaleFaktor);
 
                     if(newwidth== 0){
                         newwidth = 1;
@@ -631,12 +630,15 @@
                     if (newheight == 0){
                         newheight = 1;
                     }
-                    System.out.println("newwidth: "+newwidth+" newheight: "+newheight);
-                    ImageData newdata = imagedata.scaledTo(
+                    if (logger.isDebugEnabled()) {
+                        logger
+                                .debug("widgetSelected(SelectionEvent) - newwidth: "
+                                        + newwidth + " newheight: " + newheight);
+                    }
+                    scaled_imagedata = original_imagedata.scaledTo(
                             newwidth, newheight);
-                    imagedata = newdata;
-                    scaledImage = new Image(getDisplay(), newdata);
 
+
                     //redraw the image
                     canvasImg.redraw();
                     resizeScrollBars();
@@ -685,7 +687,7 @@
 
                         buttonSelectFile.setEnabled(true);
 
-                        ideaImage = scaledImage = null;
+                        original_imagedata = scaled_imagedata = null;
                         canvasImg.redraw();
 
                         buttonImageCancel.setEnabled(true);
@@ -726,6 +728,17 @@
                         textImagesSearch.setEnabled(false);
                         buttonSelectFile.setEnabled(true);
 
+                        scaleResize.setEnabled(true);
+                        scaleResize.setSelection(100);
+                        scaleResize.setToolTipText(l
+                                .getString("images.groupdetail.resize.size")
+                                + ": 100%");
+
+                        //reset and resize the scrollbars
+                        resetScrollBars();
+                        resizeScrollBars();
+                        
+
                     }
                 });
 
@@ -749,7 +762,7 @@
                                 l
                                         .getString("images.groupdetail.deletebutton.question.header"),
                                 SWT.ICON_QUESTION | SWT.YES | SWT.NO);
-
+                        
                         if (question != SWT.YES) {
                             return;
                         }
@@ -849,7 +862,7 @@
                         logger.debug("buttonImageSave.widgetSelected, event="
                                 + evt);
 
-                        if (scaledImage == null) {
+                        if (scaled_imagedata == null) {
                             statusLine
                                     .setStatus(
                                             StatusLineStyledText.STATUS_WARN,
@@ -890,14 +903,20 @@
                                     .getText());
 
                             ImageLoader imageLoader = new ImageLoader();
-                            imageLoader.data = new ImageData[] { imagedata };
+                            imageLoader.data = new ImageData[] { scaled_imagedata };
                             ByteArrayOutputStream bos = new ByteArrayOutputStream();
 
-                            System.out.println(imagedata.type);
-                            System.out.println(SWT.IMAGE_JPEG);
+                            if (logger.isDebugEnabled()) {
+                                logger.debug("widgetSelected(SelectionEvent)"
+                                        + scaled_imagedata.type);
+                            }
+                            if (logger.isDebugEnabled()) {
+                                logger.debug("widgetSelected(SelectionEvent)"
+                                        + SWT.IMAGE_JPEG);
+                            }
 
                             imageLoader.save(bos,
-                                    imagedata.type);
+                                    scaled_imagedata.type);
 
                             tmp.setImageFile(bos.toByteArray());
 
@@ -957,7 +976,10 @@
 
                                 } else {
                                     //@todo
-                                    e.printStackTrace();
+                                    logger
+                                            .error(
+                                                    "widgetSelected(SelectionEvent)",
+                                                    e);
                                 }
 
                             }
@@ -1071,7 +1093,7 @@
         ScrollBar horizontal = canvasImg.getHorizontalBar();
         ScrollBar vertical = canvasImg.getVerticalBar();
         Rectangle canvasBounds = canvasImg.getClientArea();
-        int width = Math.round(scaledImage.getImageData().width);
+        int width = Math.round(scaled_imagedata.width);
         if (width > canvasBounds.width) {
             // The image is wider than the canvas.
             horizontal.setEnabled(true);
@@ -1084,7 +1106,7 @@
 
             canvasImg.redraw();
         }
-        int height = Math.round(scaledImage.getImageData().height);
+        int height = Math.round(scaled_imagedata.height);
         if (height > canvasBounds.height) {
             // The image is taller than the canvas.
             vertical.setEnabled(true);
@@ -1100,11 +1122,11 @@
     }
 
     void scrollHorizontally(ScrollBar scrollBar) {
-        if (scaledImage == null)
+        if (scaled_imagedata == null)
             return;
         Rectangle canvasBounds = canvasImg.getClientArea();
-        int width = Math.round(scaledImage.getImageData().width);
-        int height = Math.round(scaledImage.getImageData().height);
+        int width = Math.round(scaled_imagedata.width);
+        int height = Math.round(scaled_imagedata.height);
         if (width > canvasBounds.width) {
             // Only scroll if the image is bigger than the canvas.
             int x = -scrollBar.getSelection();
@@ -1119,11 +1141,11 @@
     }
 
     void scrollVertically(ScrollBar scrollBar) {
-        if (scaledImage == null)
+        if (scaled_imagedata == null)
             return;
         Rectangle canvasBounds = canvasImg.getClientArea();
-        int width = Math.round(scaledImage.getImageData().width);
-        int height = Math.round(scaledImage.getImageData().height);
+        int width = Math.round(scaled_imagedata.width);
+        int height = Math.round(scaled_imagedata.height);
         if (height > canvasBounds.height) {
             // Only scroll if the image is bigger than the canvas.
             int y = -scrollBar.getSelection();
@@ -1138,8 +1160,6 @@
 
     // Reset the scroll bars to 0.
     void resetScrollBars() {
-        if (scaledImage == null)
-            return;
         ix = 0;
         iy = 0;
         resizeScrollBars();
@@ -1149,16 +1169,15 @@
     }
 
     void paintImage(PaintEvent event) {
-        Image paintImage = scaledImage;
+        Image paintImage = new Image(getDisplay(),scaled_imagedata);
 
-        int w = Math.round(scaledImage.getImageData().width);
-        int h = Math.round(scaledImage.getImageData().height);
-        event.gc.drawImage(paintImage, 0, 0, scaledImage.getImageData().width,
-                scaledImage.getImageData().height, ix
-                        + scaledImage.getImageData().x, iy
-                        + scaledImage.getImageData().y, w, h);
+        int w = Math.round(scaled_imagedata.width);
+        int h = Math.round(scaled_imagedata.height);
+        event.gc.drawImage(paintImage, 0, 0, scaled_imagedata.width,
+                scaled_imagedata.height, ix
+                        + scaled_imagedata.x, iy
+                        + scaled_imagedata.y, w, h);
         event.gc.dispose();
-        //paintImage.dispose();
     }
 
     /**
@@ -1194,15 +1213,17 @@
                 .getString("images.groupdetail.labelselecteddatabase"));
 
         if (object.getImageFile() != null && object.getImageFile().length > 0) {
-            System.out.println("Versuche zu zeichnen");
-            scaledImage = ideaImage = new Image(getDisplay(),
-                    new ByteArrayInputStream(object.getImageFile()));
+            if (logger.isDebugEnabled()) {
+                logger
+                        .debug("refreshImagesDetail(String) - Versuche zu zeichnen");
+            }
+            scaled_imagedata = original_imagedata = new ImageData(new ByteArrayInputStream(object.getImageFile()));
             canvasImg.redraw();
         } else {
             statusLine.setStatus(StatusLineStyledText.STATUS_WARN,
                     "Bilddaten k?nnen f?r Bild " + object.getImageFileName()
                             + "nicht geladen werden.");
-            scaledImage = ideaImage = null;
+            scaled_imagedata = original_imagedata = null;
             canvasImg.redraw();
         }
 
@@ -1265,7 +1286,6 @@
         int maxwidth = 75;
         
         final ImageData imgdata = new ImageData(new ByteArrayInputStream(data));
-
         
         final int width = imgdata.width;
         final int height = imgdata.height;
@@ -1281,15 +1301,9 @@
 
         }
 
-        final Image scaledtemp = new Image(getDisplay(), imgdata
+        return new Image(getDisplay(), imgdata
                 .scaledTo((int) (width * scalefactor),
                         (int) (height * scalefactor)));
 
-        System.out.println("Type:" + imgdata.type);
-
-        
-
-        return scaledtemp;
-
     }
 }
\ No newline at end of file

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java	2004-11-29 10:18:58 UTC (rev 174)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java	2004-11-29 18:29:26 UTC (rev 175)
@@ -941,13 +941,9 @@
 
                 movie = new Movie();
                 movie.setActors(new ArrayList());
-                movie.setAudioFormats(new ArrayList());
                 movie.setDirector(new ArrayList());
                 movie.setGenres(new ArrayList());
                 movie.setImages(new ArrayList());
-                movie.setLanguages(new ArrayList());
-                movie.setSubtitles(new ArrayList());
-                movie.setVideoFormats(new ArrayList());
             }
         });
 

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java	2004-11-29 10:18:58 UTC (rev 174)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java	2004-11-29 18:29:26 UTC (rev 175)
@@ -122,7 +122,7 @@
     private CompositeGenre compositeGenre;
     private CompositeLanguage compositeLanguage;
     private CompositeImage compositeImage;
-    private CompositeMovie compositeMovie;
+    private CopyOfCompositeMovie compositeMovie;
     private CompositePayment compositePayment;
     private CompositeStatus compositeStatus;   
 
@@ -189,6 +189,7 @@
     public void run() {
         shell.layout();
         shell.open();
+
         while (!shell.isDisposed()) {
             if (!display.readAndDispatch())
                 display.sleep();
@@ -777,7 +778,7 @@
         });
   
         {
-            compositeMovie = new CompositeMovie(
+            compositeMovie = new CopyOfCompositeMovie(
                 cTabFolderMain,
                 SWT.NONE, statusLine, locale);
             

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Dvd.hbm.xml
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Dvd.hbm.xml	2004-11-29 10:18:58 UTC (rev 174)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Dvd.hbm.xml	2004-11-29 18:29:26 UTC (rev 175)
@@ -30,6 +30,44 @@
 						<meta attribute="use-in-tostring">true</meta>
 				</many-to-one>
   
+  
+   			<list	name="languages"
+ 						table="MOVIELANGUAGES"
+ 						 >
+				<meta attribute="use-in-tostring">true</meta>
+				<key column="MOVIEID"/>
+				<index column="POS"/>
+				<many-to-many class="de.hsharz.provirent.objects.Language" column="LANGUAGEID" />			
+ 			</list> 			
+
+ 			<list	name="subtitles"
+ 						table="DVDSUBTITLES"
+ 						 >
+				<meta attribute="use-in-tostring">true</meta>
+				<key column="DVDID"/>
+				<index column="POS"/>
+				<many-to-many class="de.hsharz.provirent.objects.Subtitle" column="SUBTITLEID" />			
+ 			</list> 
+			
+ 			<list	name="audioFormats"
+ 						table="DVDAUDIOFORMATES"
+ 						 >
+				<meta attribute="use-in-tostring">true</meta>
+				<key column="DVDID"/>
+				<index column="POS"/>
+				<many-to-many class="de.hsharz.provirent.objects.AudioFormat" column="AUDIOFORMATID" />			
+ 			</list>  
+
+ 			<list	name="videoFormats"
+ 						table="DVDVIDEOFORMATES"
+ 						 >
+				<meta attribute="use-in-tostring">true</meta>
+				<key column="DVDID"/>
+				<index column="POS"/>
+				<many-to-many class="de.hsharz.provirent.objects.VideoFormat" column="VIDEOFORMATID" />			
+ 			</list> 			
+  
+  
   	<many-to-one name="condition" class="de.hsharz.provirent.objects.Condition" column="CONDITION"/>
   	
   	<many-to-one name="status" class="de.hsharz.provirent.objects.Status" column="STATUS"/>

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Dvd.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Dvd.java	2004-11-29 10:18:58 UTC (rev 174)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Dvd.java	2004-11-29 18:29:26 UTC (rev 175)
@@ -1,6 +1,7 @@
 package de.hsharz.provirent.objects;
 
 import java.io.Serializable;
+import java.util.List;
 import org.apache.commons.lang.builder.EqualsBuilder;
 import org.apache.commons.lang.builder.HashCodeBuilder;
 import org.apache.commons.lang.builder.ToStringBuilder;
@@ -28,18 +29,42 @@
     /** nullable persistent field */
     private de.hsharz.provirent.objects.Status status;
 
+    /** persistent field */
+    private List languages;
+
+    /** persistent field */
+    private List subtitles;
+
+    /** persistent field */
+    private List audioFormats;
+
+    /** persistent field */
+    private List videoFormats;
+
     /** full constructor */
-    public Dvd(String barcode, de.hsharz.provirent.objects.Movie movie, de.hsharz.provirent.objects.Condition condition, de.hsharz.provirent.objects.Status status) {
+    public Dvd(String barcode, de.hsharz.provirent.objects.Movie movie, de.hsharz.provirent.objects.Condition condition, de.hsharz.provirent.objects.Status status, List languages, List subtitles, List audioFormats, List videoFormats) {
         this.barcode = barcode;
         this.movie = movie;
         this.condition = condition;
         this.status = status;
+        this.languages = languages;
+        this.subtitles = subtitles;
+        this.audioFormats = audioFormats;
+        this.videoFormats = videoFormats;
     }
 
     /** default constructor */
     public Dvd() {
     }
 
+    /** minimal constructor */
+    public Dvd(List languages, List subtitles, List audioFormats, List videoFormats) {
+        this.languages = languages;
+        this.subtitles = subtitles;
+        this.audioFormats = audioFormats;
+        this.videoFormats = videoFormats;
+    }
+
     public Integer getDvdId() {
         return this.dvdId;
     }
@@ -80,11 +105,47 @@
         this.status = status;
     }
 
+    public List getLanguages() {
+        return this.languages;
+    }
+
+    public void setLanguages(List languages) {
+        this.languages = languages;
+    }
+
+    public List getSubtitles() {
+        return this.subtitles;
+    }
+
+    public void setSubtitles(List subtitles) {
+        this.subtitles = subtitles;
+    }
+
+    public List getAudioFormats() {
+        return this.audioFormats;
+    }
+
+    public void setAudioFormats(List audioFormats) {
+        this.audioFormats = audioFormats;
+    }
+
+    public List getVideoFormats() {
+        return this.videoFormats;
+    }
+
+    public void setVideoFormats(List videoFormats) {
+        this.videoFormats = videoFormats;
+    }
+
     public String toString() {
         return new ToStringBuilder(this)
             .append("dvdId", getDvdId())
             .append("barcode", getBarcode())
             .append("movie", getMovie())
+            .append("languages", getLanguages())
+            .append("subtitles", getSubtitles())
+            .append("audioFormats", getAudioFormats())
+            .append("videoFormats", getVideoFormats())
             .toString();
     }
 
@@ -98,6 +159,10 @@
             .append(this.getMovie(), castOther.getMovie())
             .append(this.getCondition(), castOther.getCondition())
             .append(this.getStatus(), castOther.getStatus())
+            .append(this.getLanguages(), castOther.getLanguages())
+            .append(this.getSubtitles(), castOther.getSubtitles())
+            .append(this.getAudioFormats(), castOther.getAudioFormats())
+            .append(this.getVideoFormats(), castOther.getVideoFormats())
             .isEquals();
     }
 
@@ -108,6 +173,10 @@
             .append(getMovie())
             .append(getCondition())
             .append(getStatus())
+            .append(getLanguages())
+            .append(getSubtitles())
+            .append(getAudioFormats())
+            .append(getVideoFormats())
             .toHashCode();
     }
 

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Movie.hbm.xml
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Movie.hbm.xml	2004-11-29 10:18:58 UTC (rev 174)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Movie.hbm.xml	2004-11-29 18:29:26 UTC (rev 175)
@@ -78,24 +78,8 @@
 				<many-to-many class="de.hsharz.provirent.objects.Director" column="DIRECTORID" />			
  			</list> 			
 
- 			<list	name="languages"
- 						table="MOVIELANGUAGES"
- 						 >
-				<meta attribute="use-in-tostring">true</meta>
-				<key column="MOVIEID"/>
-				<index column="POS"/>
-				<many-to-many class="de.hsharz.provirent.objects.Language" column="LANGUAGEID" />			
- 			</list> 			
+	
 
- 			<list	name="subtitles"
- 						table="MOVIESUBTITLES"
- 						 >
-				<meta attribute="use-in-tostring">true</meta>
-				<key column="MOVIEID"/>
-				<index column="POS"/>
-				<many-to-many class="de.hsharz.provirent.objects.Subtitle" column="SUBTITLEID" />			
- 			</list> 	
-
  			<list	name="genres"
  						table="MOVIEGENRES"
  						 >
@@ -105,23 +89,7 @@
 				<many-to-many class="de.hsharz.provirent.objects.Genre" column="GENREID" />			
  			</list>  			
 
- 			<list	name="audioFormats"
- 						table="MOVIEAUDIOFORMATES"
- 						 >
-				<meta attribute="use-in-tostring">true</meta>
-				<key column="MOVIEID"/>
-				<index column="POS"/>
-				<many-to-many class="de.hsharz.provirent.objects.AudioFormat" column="AUDIOFORMATID" />			
- 			</list>  
 
- 			<list	name="videoFormats"
- 						table="MOVIEVIDEOFORMATES"
- 						 >
-				<meta attribute="use-in-tostring">true</meta>
-				<key column="MOVIEID"/>
-				<index column="POS"/>
-				<many-to-many class="de.hsharz.provirent.objects.VideoFormat" column="VIDEOFORMATID" />			
- 			</list> 
  			
 
  			

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Movie.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Movie.java	2004-11-29 10:18:58 UTC (rev 174)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/objects/Movie.java	2004-11-29 18:29:26 UTC (rev 175)
@@ -43,22 +43,10 @@
     private List director;
 
     /** persistent field */
-    private List languages;
-
-    /** persistent field */
-    private List subtitles;
-
-    /** persistent field */
     private List genres;
 
-    /** persistent field */
-    private List audioFormats;
-
-    /** persistent field */
-    private List videoFormats;
-
     /** full constructor */
-    public Movie(String title, String description, int runtime, Calendar releaseDate, de.hsharz.provirent.objects.Image mainImage, List images, List actors, List director, List languages, List subtitles, List genres, List audioFormats, List videoFormats) {
+    public Movie(String title, String description, int runtime, Calendar releaseDate, de.hsharz.provirent.objects.Image mainImage, List images, List actors, List director, List genres) {
         this.title = title;
         this.description = description;
         this.runtime = runtime;
@@ -67,11 +55,7 @@
         this.images = images;
         this.actors = actors;
         this.director = director;
-        this.languages = languages;
-        this.subtitles = subtitles;
         this.genres = genres;
-        this.audioFormats = audioFormats;
-        this.videoFormats = videoFormats;
     }
 
     /** default constructor */
@@ -79,17 +63,13 @@
     }
 
     /** minimal constructor */
-    public Movie(String title, String description, List images, List actors, List director, List languages, List subtitles, List genres, List audioFormats, List videoFormats) {
+    public Movie(String title, String description, List images, List actors, List director, List genres) {
         this.title = title;
         this.description = description;
         this.images = images;
         this.actors = actors;
         this.director = director;
-        this.languages = languages;
-        this.subtitles = subtitles;
         this.genres = genres;
-        this.audioFormats = audioFormats;
-        this.videoFormats = videoFormats;
     }
 
     public Integer getMovieId() {
@@ -170,22 +150,6 @@
         this.director = director;
     }
 
-    public List getLanguages() {
-        return this.languages;
-    }
-
-    public void setLanguages(List languages) {
-        this.languages = languages;
-    }
-
-    public List getSubtitles() {
-        return this.subtitles;
-    }
-
-    public void setSubtitles(List subtitles) {
-        this.subtitles = subtitles;
-    }
-
     public List getGenres() {
         return this.genres;
     }
@@ -194,22 +158,6 @@
         this.genres = genres;
     }
 
-    public List getAudioFormats() {
-        return this.audioFormats;
-    }
-
-    public void setAudioFormats(List audioFormats) {
-        this.audioFormats = audioFormats;
-    }
-
-    public List getVideoFormats() {
-        return this.videoFormats;
-    }
-
-    public void setVideoFormats(List videoFormats) {
-        this.videoFormats = videoFormats;
-    }
-
     public String toString() {
         return new ToStringBuilder(this)
             .append("movieId", getMovieId())
@@ -221,11 +169,7 @@
             .append("images", getImages())
             .append("actors", getActors())
             .append("director", getDirector())
-            .append("languages", getLanguages())
-            .append("subtitles", getSubtitles())
             .append("genres", getGenres())
-            .append("audioFormats", getAudioFormats())
-            .append("videoFormats", getVideoFormats())
             .toString();
     }
 
@@ -243,11 +187,7 @@
             .append(this.getImages(), castOther.getImages())
             .append(this.getActors(), castOther.getActors())
             .append(this.getDirector(), castOther.getDirector())
-            .append(this.getLanguages(), castOther.getLanguages())
-            .append(this.getSubtitles(), castOther.getSubtitles())
             .append(this.getGenres(), castOther.getGenres())
-            .append(this.getAudioFormats(), castOther.getAudioFormats())
-            .append(this.getVideoFormats(), castOther.getVideoFormats())
             .isEquals();
     }
 
@@ -262,11 +202,7 @@
             .append(getImages())
             .append(getActors())
             .append(getDirector())
-            .append(getLanguages())
-            .append(getSubtitles())
             .append(getGenres())
-            .append(getAudioFormats())
-            .append(getVideoFormats())
             .toHashCode();
     }
 

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/objects/MovieOrder.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/objects/MovieOrder.java	2004-11-29 10:18:58 UTC (rev 174)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/objects/MovieOrder.java	2004-11-29 18:29:26 UTC (rev 175)
@@ -17,12 +17,6 @@
     /** identifier field */
     private Integer movieOrderId;
 
-    /** persistent field */
-    private String name;
-
-    /** persistent field */
-    private String shortname;
-
     /** nullable persistent field */
     private de.hsharz.provirent.objects.Customer customer;
 
@@ -30,9 +24,7 @@
     private List movieOrderItems;
 
     /** full constructor */
-    public MovieOrder(String name, String shortname, de.hsharz.provirent.objects.Customer customer, List movieOrderItems) {
-        this.name = name;
-        this.shortname = shortname;
+    public MovieOrder(de.hsharz.provirent.objects.Customer customer, List movieOrderItems) {
         this.customer = customer;
         this.movieOrderItems = movieOrderItems;
     }
@@ -42,9 +34,7 @@
     }
 
     /** minimal constructor */
-    public MovieOrder(String name, String shortname, List movieOrderItems) {
-        this.name = name;
-        this.shortname = shortname;
+    public MovieOrder(List movieOrderItems) {
         this.movieOrderItems = movieOrderItems;
     }
 
@@ -56,22 +46,6 @@
         this.movieOrderId = movieOrderId;
     }
 
-    public String getName() {
-        return this.name;
-    }
-
-    public void setName(String name) {
-        this.name = name;
-    }
-
-    public String getShortname() {
-        return this.shortname;
-    }
-
-    public void setShortname(String shortname) {
-        this.shortname = shortname;
-    }
-
     public de.hsharz.provirent.objects.Customer getCustomer() {
         return this.customer;
     }
@@ -91,8 +65,6 @@
     public String toString() {
         return new ToStringBuilder(this)
             .append("movieOrderId", getMovieOrderId())
-            .append("name", getName())
-            .append("shortname", getShortname())
             .append("customer", getCustomer())
             .append("movieOrderItems", getMovieOrderItems())
             .toString();
@@ -104,8 +76,6 @@
         MovieOrder castOther = (MovieOrder) other;
         return new EqualsBuilder()
             .append(this.getMovieOrderId(), castOther.getMovieOrderId())
-            .append(this.getName(), castOther.getName())
-            .append(this.getShortname(), castOther.getShortname())
             .append(this.getCustomer(), castOther.getCustomer())
             .append(this.getMovieOrderItems(), castOther.getMovieOrderItems())
             .isEquals();
@@ -114,8 +84,6 @@
     public int hashCode() {
         return new HashCodeBuilder()
             .append(getMovieOrderId())
-            .append(getName())
-            .append(getShortname())
             .append(getCustomer())
             .append(getMovieOrderItems())
             .toHashCode();

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java	2004-11-29 10:18:58 UTC (rev 174)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java	2004-11-29 18:29:26 UTC (rev 175)
@@ -1451,13 +1451,15 @@
 	            Criteria criteria = s.createCriteria(Payment.class);
 	            //any of the criteria 
 	            Disjunction any = Expression.disjunction();
+	          
+	            /*
 	            any.add(Expression.sql("Select * from PAYMENT where name like '" + 
 	                    		name + 
 	                    		"' and startdate = (select startdate from PAYMENT where name like '" + 
 	                    		name +
 	                    						   "')"));
 	            
-	            
+	            */
 	
 	            //if filter not empty
 	            if (filter != null && !filter.equalsIgnoreCase("")) {

Modified: project_src/provirent_hibernate/src/test/provirent/hibernate/TestAudioFormat.java
===================================================================
--- project_src/provirent_hibernate/src/test/provirent/hibernate/TestAudioFormat.java	2004-11-29 10:18:58 UTC (rev 174)
+++ project_src/provirent_hibernate/src/test/provirent/hibernate/TestAudioFormat.java	2004-11-29 18:29:26 UTC (rev 175)
@@ -37,6 +37,7 @@
 import java.util.List;
 
 import junit.framework.TestCase;
+import net.sf.hibernate.AssertionFailure;
 import net.sf.hibernate.Session;
 import net.sf.hibernate.Transaction;
 
@@ -202,7 +203,6 @@
         //get new Session and begin Transaction
         Session s = HibernateUtil.currentSession();
         Transaction tx = null;
-        try {
             tx = s.beginTransaction();
 
             try {
@@ -235,24 +235,7 @@
 
                 tx.commit();
 
-            } catch (Exception e) {
-                if (tx != null) {
-                    logger
-                            .error(
-                                    "testSaveAudioFormat() - Something went wrong here; discard all partial changes",
-                                    e);
 
-                    // Something went wrong; discard all partial changes
-                    tx.rollback();
-                }
-
-            }
-
-        } catch (Exception e) {
-            logger.error(
-                    "testSaveAudioFormat() - Error while trying to beginTransaction",
-                    e);
-            throw e;
         } finally {
             // No matter what, close the session
             HibernateUtil.closeSession();



From sforstner at sheep.berlios.de  Mon Nov 29 20:20:37 2004
From: sforstner at sheep.berlios.de (Stefan at BerliOS)
Date: Mon, 29 Nov 2004 20:20:37 +0100
Subject: [Provirent-svn-commit] r176 - in project_src/provirent_hibernate/src: de/hsharz/provirent/management/gui de/hsharz/provirent/objects de/hsharz/provirent/persistence test/provirent/hibernate
Message-ID: <200411291920.iATJKbZ4032500@sheep.berlios.de>

Author: sforstner
Date: 2004-11-29 20:20:36 +0100 (Mon, 29 Nov 2004)
New Revision: 176

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositePayment.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/objects/OrderItem.hbm.xml
   project_src/provirent_hibernate/src/de/hsharz/provirent/objects/OrderItem.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java
   project_src/provirent_hibernate/src/test/provirent/hibernate/TestPayment.java
Log:


Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositePayment.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositePayment.java	2004-11-29 18:29:26 UTC (rev 175)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositePayment.java	2004-11-29 19:20:36 UTC (rev 176)
@@ -4,9 +4,12 @@
 import java.text.MessageFormat;
 import java.text.ParseException;
 import java.util.Calendar;
+import java.util.Enumeration;
+import java.util.Hashtable;
 import java.util.Locale;
 import java.util.PropertyResourceBundle;
 import java.util.ResourceBundle;
+import java.util.Vector;
 
 import org.apache.log4j.Logger;
 import org.eclipse.swt.SWT;
@@ -116,7 +119,7 @@
     private Table tablePayment;
     private TableColumn tableColumn;
 
-    
+    Hashtable list = null;
 
     private final static int MODE_EDIT = 2;
     
@@ -609,9 +612,11 @@
                     textduration2.setText("");
                     textduration3.setText("");
                     textstartdate.setText("");
+                    buttonPaymentEdit.setEnabled(false);
+                    buttonPaymentDelete.setEnabled(false);
                     //in Tabelle n?chsten ausw?hlen
                     try {
-                        tablePayment.select(0);
+                        tablePayment.deselectAll();
                     } catch (Exception ex) {}
                     
                     //Statusline Nachricht sezten
@@ -673,6 +678,9 @@
                     	return;
                 }
                 
+                buttonPaymentEdit.setEnabled(false);
+                buttonPaymentDelete.setEnabled(false);
+                
                 //testen welcher mode
                 
                 if (mode_Payment == ManagementGui.MODE_ADD) {
@@ -693,17 +701,14 @@
                             			Float.parseFloat(textduration2.getText()), 
                             			Float.parseFloat(textduration3.getText()),
                             			tmp_cal);
-                    
-                    
+                                        
                         //object speichern
                         // Fehlerbehandlung
                         Object o = Database.saveObject(tmp);
                         
                         // in ?bersichtstabelle einf?gen
-                        insertIntoPaymentTable((Payment)o);
-                        textPaymentID.setText( ((Payment)o).getPaymentId()+"" );
-                        
-                        
+                        insertIntoPaymentTable((Payment)o);                        
+                                                
                         //Statusline Nachricht sezten
                         statusLine.setStatus(1,l.getString("Payment.groupdetail.savebutton.newok"));
 
@@ -731,8 +736,10 @@
                     }
                     
                     
-                    //alle Buttons auf aktiv setzen
+//                  alle Buttons auf aktiv setzen
                     setPaymentGroupButtonSaveCancel();
+                    buttonPaymentDelete.setEnabled(false);
+                    buttonPaymentEdit.setEnabled(false);
                     
                 } else if (mode_Payment == ManagementGui.MODE_EDIT) {
                     try {
@@ -780,10 +787,10 @@
                         
                     }
                     
- 
                     //alle Buttons auf aktiv setzen
                     setPaymentGroupButtonSaveCancel();
-                    
+                    buttonPaymentDelete.setEnabled(false);
+                    buttonPaymentEdit.setEnabled(false);
                 }
                 
                 
@@ -836,16 +843,26 @@
 
     /**
      * @param Payment
+     * @throws DataBaseException
      */
-    protected void insertIntoPaymentTable(Payment Payment) {
+    protected void insertIntoPaymentTable(Payment Payment) throws DataBaseException {
         TableItem item = new TableItem(tablePayment, SWT.NONE);
         item.setText(new String[] { Payment.getPaymentId() + "", 
                 					Payment.getName(), 
                 					Double.toString(Payment.getDuration1()),
                 					Double.toString(Payment.getDuration2()), 
                 					Double.toString(Payment.getDuration3()),
-                					DateFormat.getDateInstance(DateFormat.MEDIUM).format(Payment.getStartdate().getTime()) });
+                					Util.getTextByDate(Payment.getStartdate()) });
         
+        tablePayment.deselectAll();
+        refreshPaymentDetail("");
+        
+        try {
+            refreshPaymentTable(textPaymentSearch.getText());
+        } catch (DataBaseException e) {
+            // TODO Auto-generated catch block
+            e.printStackTrace();
+        }
     }
 
     /**
@@ -863,6 +880,56 @@
         tablePayment.removeAll();
         TableItem item;
         java.util.List Paymentlist = Database.getPayment(filter);
+        list = new Hashtable();
+        for (int i = 0; i < Paymentlist.size(); i++) {
+            Payment paym = (Payment) Paymentlist.get(i);
+            String name = paym.getName();
+            
+            if (list.containsKey(name)) {
+                Vector vec = (Vector) list.get(name);
+                vec.add(paym.getStartdate());
+            } else {
+                Vector vec = new Vector();
+                vec.add(paym.getStartdate());
+                
+                list.put(paym.getName(), vec);
+            }
+        }
+        Enumeration keys = list.keys();
+        while (keys.hasMoreElements()) {
+            String key = (String) keys.nextElement();
+            Vector vec = (Vector) list.get(key);
+            Vector aktDates = new Vector();
+            Calendar temp = null;
+            for (int i = 0; i < vec.size(); i++) {
+                Calendar today = Calendar.getInstance();
+                if (temp == null) {
+                    temp = (Calendar) vec.get(i);
+                    if (temp.after(today)) {
+                        aktDates.add(temp);
+                        temp = null;
+                        continue;
+                    } else{
+	                    aktDates.add(0, temp);
+	                    continue;
+                    }
+                }  
+                Calendar date = (Calendar) vec.get(i);
+                
+                if (!date.after(today)) {
+                    if (date.after(temp)) {
+                        temp = date;
+                        aktDates.set(0, date);
+                    }
+                    
+                } else {
+                    aktDates.add(date);
+                }
+                                    
+            }
+            list.remove(key);
+            list.put(key, aktDates);
+        }
 
         for (int i = 0; i < Paymentlist.size(); i++) {
 
@@ -1074,38 +1141,61 @@
      * @param text
      */
     protected void refreshPaymentDetail(final String id) {
-        Payment object;
-        try {
-            //since we only can get a String value from the table, we
-            //need to convert this
-            object = Database.getSinglePayment(Integer.parseInt(id));
-
-            if (object == null) {
-
-                /*
-                 * 
-                 * @TODO Statusbar aktualiseren
-                 */
-                return;
-            }
-        } catch (Exception e) {
-            //id ist keine Zahl
-            return;
+        if (!id.equals("") && id != null) {
+	        Payment object;
+	        try {
+	            //since we only can get a String value from the table, we
+	            //need to convert this
+	            object = Database.getSinglePayment(Integer.parseInt(id));
+	
+	            if (object == null) {
+	
+	                /*
+	                 * 
+	                 * @TODO Statusbar aktualiseren
+	                 */
+	                return;
+	            }
+	        } catch (Exception e) {
+	            //id ist keine Zahl
+	            return;
+	        }
+	
+	        textPaymentID.setText(object.getPaymentId() + "");
+	        textPaymentName.setText(object.getName());
+	        textduration1.setText(Double.toString(object.getDuration1()));
+	        textduration2.setText(Double.toString(object.getDuration2()));
+	        textduration3.setText(Double.toString(object.getDuration3()));
+	        textstartdate.setText(DateFormat.getDateInstance(DateFormat.LONG).format(object.getStartdate().getTime()));
+	        //Buttons zum l?schen und editieren aktivieren
+	        
+	        buttonPaymentEdit.setEnabled(false);
+	        buttonPaymentDelete.setEnabled(true);
+	        Vector vec = (Vector) list.get(object.getName());
+	        
+	        for (int i = 0; i < vec.size(); i++) {
+	            Calendar date = (Calendar) vec.get(i);
+	            try {
+	                if (Util.getTextByDate(date).equals(Util.getTextByDate(object.getStartdate()))) {
+	                    buttonPaymentEdit.setEnabled(true);
+	                    
+	                }
+	            } catch (DataBaseException e1) {
+	                // TODO Auto-generated catch block
+	                e1.printStackTrace();
+	            }
+	        }
+        } else {
+            textPaymentID.setText("");
+            textPaymentName.setText("");
+            textduration1.setText("");
+            textduration2.setText("");
+            textduration3.setText("");
+            textstartdate.setText("");
+            buttonPaymentEdit.setEnabled(false);
+            buttonPaymentDelete.setEnabled(false);
         }
 
-        textPaymentID.setText(object.getPaymentId() + "");
-        textPaymentName.setText(object.getName());
-        textduration1.setText(Double.toString(object.getDuration1()));
-        textduration2.setText(Double.toString(object.getDuration2()));
-        textduration3.setText(Double.toString(object.getDuration3()));
-        
-
-        textstartdate.setText(DateFormat.getDateInstance(DateFormat.LONG).format(object.getStartdate().getTime()));
-
-        //Buttons zum l?schen und editieren aktivieren
-        buttonPaymentEdit.setEnabled(true);
-        buttonPaymentDelete.setEnabled(true);
-
         //Mode auf view setzen
         mode_Payment = ManagementGui.MODE_VIEW;
         

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/objects/OrderItem.hbm.xml
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/objects/OrderItem.hbm.xml	2004-11-29 18:29:26 UTC (rev 175)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/objects/OrderItem.hbm.xml	2004-11-29 19:20:36 UTC (rev 176)
@@ -49,6 +49,10 @@
 		 >
 			 	<meta attribute="use-in-tostring">true</meta>
 		 </many-to-one>
+		 
+		 <many-to-one name="payment" class="de.hsharz.provirent.objects.Payment">
+				<meta attribute="use-in-tostring">true</meta>
+		 </many-to-one>
 
 				
  
@@ -70,7 +74,7 @@
 				class="de.hsharz.provirent.objects.Condition"
 		 >
 			 	<meta attribute="use-in-tostring">true</meta>
-		 </many-to-one> 
+		 </many-to-one>
  
     </class>
   </hibernate-mapping>

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/objects/OrderItem.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/objects/OrderItem.java	2004-11-29 18:29:26 UTC (rev 175)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/objects/OrderItem.java	2004-11-29 19:20:36 UTC (rev 176)
@@ -37,19 +37,23 @@
     private de.hsharz.provirent.objects.Dvd dvd;
 
     /** nullable persistent field */
+    private de.hsharz.provirent.objects.Payment payment;
+
+    /** nullable persistent field */
     private de.hsharz.provirent.objects.Condition conditionSend;
 
     /** nullable persistent field */
     private de.hsharz.provirent.objects.Condition conditionReceiving;
 
     /** full constructor */
-    public OrderItem(Calendar senderTime, Calendar receivingTime, int duration, Date orderTime, de.hsharz.provirent.objects.Customer customer, de.hsharz.provirent.objects.Dvd dvd, de.hsharz.provirent.objects.Condition conditionSend, de.hsharz.provirent.objects.Condition conditionReceiving) {
+    public OrderItem(Calendar senderTime, Calendar receivingTime, int duration, Date orderTime, de.hsharz.provirent.objects.Customer customer, de.hsharz.provirent.objects.Dvd dvd, de.hsharz.provirent.objects.Payment payment, de.hsharz.provirent.objects.Condition conditionSend, de.hsharz.provirent.objects.Condition conditionReceiving) {
         this.senderTime = senderTime;
         this.receivingTime = receivingTime;
         this.duration = duration;
         this.orderTime = orderTime;
         this.customer = customer;
         this.dvd = dvd;
+        this.payment = payment;
         this.conditionSend = conditionSend;
         this.conditionReceiving = conditionReceiving;
     }
@@ -119,6 +123,14 @@
         this.dvd = dvd;
     }
 
+    public de.hsharz.provirent.objects.Payment getPayment() {
+        return this.payment;
+    }
+
+    public void setPayment(de.hsharz.provirent.objects.Payment payment) {
+        this.payment = payment;
+    }
+
     public de.hsharz.provirent.objects.Condition getConditionSend() {
         return this.conditionSend;
     }
@@ -144,6 +156,7 @@
             .append("orderTime", getOrderTime())
             .append("customer", getCustomer())
             .append("dvd", getDvd())
+            .append("payment", getPayment())
             .append("conditionSend", getConditionSend())
             .append("conditionReceiving", getConditionReceiving())
             .toString();
@@ -161,6 +174,7 @@
             .append(this.getOrderTime(), castOther.getOrderTime())
             .append(this.getCustomer(), castOther.getCustomer())
             .append(this.getDvd(), castOther.getDvd())
+            .append(this.getPayment(), castOther.getPayment())
             .append(this.getConditionSend(), castOther.getConditionSend())
             .append(this.getConditionReceiving(), castOther.getConditionReceiving())
             .isEquals();
@@ -175,6 +189,7 @@
             .append(getOrderTime())
             .append(getCustomer())
             .append(getDvd())
+            .append(getPayment())
             .append(getConditionSend())
             .append(getConditionReceiving())
             .toHashCode();

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java	2004-11-29 18:29:26 UTC (rev 175)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java	2004-11-29 19:20:36 UTC (rev 176)
@@ -33,15 +33,12 @@
 package de.hsharz.provirent.persistence;
 
 import java.util.ArrayList;
-import java.util.Calendar;
-import java.util.Hashtable;
 import java.util.List;
 
 import net.sf.hibernate.Criteria;
 import net.sf.hibernate.HibernateException;
 import net.sf.hibernate.Session;
 import net.sf.hibernate.Transaction;
-import net.sf.hibernate.expression.Conjunction;
 import net.sf.hibernate.expression.Disjunction;
 import net.sf.hibernate.expression.Expression;
 
@@ -1451,6 +1448,8 @@
 	            Criteria criteria = s.createCriteria(Payment.class);
 	            //any of the criteria 
 	            Disjunction any = Expression.disjunction();
+<<<<<<< .mine
+=======
 	          
 	            /*
 	            any.add(Expression.sql("Select * from PAYMENT where name like '" + 
@@ -1458,8 +1457,10 @@
 	                    		"' and startdate = (select startdate from PAYMENT where name like '" + 
 	                    		name +
 	                    						   "')"));
+>>>>>>> .r175
 	            
 	            */
+	            
 	
 	            //if filter not empty
 	            if (filter != null && !filter.equalsIgnoreCase("")) {
@@ -1480,13 +1481,9 @@
 	            criteria.add(any);
 	            //get the results
 	            returnlist = criteria.list();
-	            Hashtable list = new Hashtable();
-	            for (int i = 0; i < returnlist.size(); i++) {
-	                Payment paym = (Payment) returnlist.get(i);
-	                list.put(paym.getName(), paym.getStartdate());
-	            }
 	            
 	            
+	            int i = 0;
 	
 	
 	

Modified: project_src/provirent_hibernate/src/test/provirent/hibernate/TestPayment.java
===================================================================
--- project_src/provirent_hibernate/src/test/provirent/hibernate/TestPayment.java	2004-11-29 18:29:26 UTC (rev 175)
+++ project_src/provirent_hibernate/src/test/provirent/hibernate/TestPayment.java	2004-11-29 19:20:36 UTC (rev 176)
@@ -244,16 +244,31 @@
                 date3.set(2005,1,16);
                 Calendar date4 = Calendar.getInstance();
                 date4.set(2005,11,8);
+                Calendar date5 = Calendar.getInstance();
+                date5.set(2004,10,12);
+                Calendar date6 = Calendar.getInstance();
+                date6.set(2004,10,28);
+                Calendar date7 = Calendar.getInstance();
+                date7.set(2004,10,29);
+                Calendar date8 = Calendar.getInstance();
+                date8.set(2004,10,20);
                 Payment myp1 = new Payment("A", 2.00d, 4.00d, 8.00d,date1);
                 Payment myp2 = new Payment("B", 3.00d, 6.00d, 12.00d,date2);
                 Payment myp3 = new Payment("C", 4.00d, 8.00d, 14.00d,date3);
                 Payment myp4 = new Payment("D", 5.00d, 10.00d, 20.00d,date4);
-
+                Payment myp5 = new Payment("A", 2.00d, 4.00d, 8.00d,date5);
+                Payment myp6= new Payment("A", 3.00d, 6.00d, 12.00d,date6);
+                Payment myp7 = new Payment("A", 4.00d, 8.00d, 14.00d,date7);
+                Payment myp8 = new Payment("B", 5.00d, 10.00d, 20.00d,date8);
                 
                 Payments.add(myp1);
                 Payments.add(myp2);
                 Payments.add(myp3);
                 Payments.add(myp4);
+                Payments.add(myp5);
+                Payments.add(myp6);
+                Payments.add(myp7);
+                Payments.add(myp8);
 
                 List ids = new ArrayList();
 



From sforstner at sheep.berlios.de  Mon Nov 29 21:12:24 2004
From: sforstner at sheep.berlios.de (Stefan at BerliOS)
Date: Mon, 29 Nov 2004 21:12:24 +0100
Subject: [Provirent-svn-commit] r177 - project_src/provirent_hibernate/src/de/hsharz/provirent/persistence
Message-ID: <200411292012.iATKCOAH001838@sheep.berlios.de>

Author: sforstner
Date: 2004-11-29 21:12:23 +0100 (Mon, 29 Nov 2004)
New Revision: 177

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java
Log:


Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java	2004-11-29 19:20:36 UTC (rev 176)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java	2004-11-29 20:12:23 UTC (rev 177)
@@ -1448,21 +1448,7 @@
 	            Criteria criteria = s.createCriteria(Payment.class);
 	            //any of the criteria 
 	            Disjunction any = Expression.disjunction();
-<<<<<<< .mine
-=======
-	          
-	            /*
-	            any.add(Expression.sql("Select * from PAYMENT where name like '" + 
-	                    		name + 
-	                    		"' and startdate = (select startdate from PAYMENT where name like '" + 
-	                    		name +
-	                    						   "')"));
->>>>>>> .r175
-	            
-	            */
-	            
-	
-	            //if filter not empty
+
 	            if (filter != null && !filter.equalsIgnoreCase("")) {
 	                any.add(Expression.like("name", "%"+filter+"%"));
 	                any.add(Expression.like("duration1", "%"+filter+"%"));



From rgriesch at sheep.berlios.de  Mon Nov 29 22:33:05 2004
From: rgriesch at sheep.berlios.de (Remo Griesch at BerliOS)
Date: Mon, 29 Nov 2004 22:33:05 +0100
Subject: [Provirent-svn-commit] r178 - in project_src/provirent_hibernate/src: de/hsharz/provirent/management/gui de/hsharz/provirent/persistence test/provirent/hibernate
Message-ID: <200411292133.iATLX5Ph005587@sheep.berlios.de>

Author: rgriesch
Date: 2004-11-29 22:33:03 +0100 (Mon, 29 Nov 2004)
New Revision: 178

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java
   project_src/provirent_hibernate/src/test/provirent/hibernate/TestMovie.java
Log:
Database.java     - um Movie erweitert
TestMovie.java    - an ge?\195?\164nderte Movie.java angepasst
CompositeMovie    - Methode refreshDetail implementiert

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java	2004-11-29 20:12:23 UTC (rev 177)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java	2004-11-29 21:33:03 UTC (rev 178)
@@ -93,6 +93,7 @@
     private Text textMoviesID;
     private Text textMoviesTitle;
     private Text textMoviesDescription;
+    private Text textMoviesDate;
     
     private Label labelMoviesSearch;
     private Label labelMoviesID;
@@ -131,9 +132,9 @@
     private List listMoviesGenres;
     private List listMoviesActors;
     private List listMoviesDirectors;
-    private Text textMoviesDate;
+    
 
-    protected int mode_actor;
+    protected int mode_movie;
     
     private StatusLineStyledText statusLine;
     
@@ -912,7 +913,7 @@
     	    buttonMoviesNew.addSelectionListener(new SelectionAdapter() {
             public void widgetSelected(SelectionEvent evt) {
                 
-                mode_actor = ManagementGui.MODE_ADD;
+                mode_movie = ManagementGui.MODE_ADD;
                 
                 textMoviesID.setText("");
                 textMoviesTitle.setText("");
@@ -953,7 +954,7 @@
     	    buttonMoviesEdit.addSelectionListener(new SelectionAdapter() {
             public void widgetSelected(SelectionEvent evt) {
 
-                mode_actor = ManagementGui.MODE_EDIT;
+                mode_movie = ManagementGui.MODE_EDIT;
 
                 textMoviesID.setEditable(false);
                 textMoviesTitle.setEditable(true);
@@ -1237,9 +1238,41 @@
     /**
      * @param text
      */
-    protected void refreshMoviesDetail(String text) {
+    protected void refreshMoviesDetail(String id) {
         // TODO Auto-generated method stub
-        
+        Movie object;
+        try {
+            //since we only can get a String value from the table, we
+            //need to convert this
+            object = Database.getSingleMovie(Integer.parseInt(id));
+
+            if (object == null) {
+
+                /*
+                 * 
+                 * @TODO Statusbar aktualiseren
+                 */
+                return;
+            }
+        } catch (Exception e) {
+            // TODO: handle exception
+            //id ist keine Zahl
+            return;
+        }
+
+        textMoviesID.setText(object.getMovieId() + "");
+        textMoviesTitle.setText(object.getTitle());
+        textMoviesDate.setText(object.getReleaseDate().toString());
+        textMoviesDescription.setText(object.getDescription());
+        //listMoviesImages.
+
+        //Buttons zum l?schen und editieren aktivieren
+        buttonMoviesEdit.setEnabled(true);
+        buttonMoviesDelete.setEnabled(true);
+
+        //Mode auf view setzen
+        mode_movie = ManagementGui.MODE_VIEW;
+          
     }
 
     protected void openDialogDescription() {

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java	2004-11-29 20:12:23 UTC (rev 177)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/ManagementGui.java	2004-11-29 21:33:03 UTC (rev 178)
@@ -122,7 +122,7 @@
     private CompositeGenre compositeGenre;
     private CompositeLanguage compositeLanguage;
     private CompositeImage compositeImage;
-    private CopyOfCompositeMovie compositeMovie;
+    private CompositeMovie compositeMovie;
     private CompositePayment compositePayment;
     private CompositeStatus compositeStatus;   
 
@@ -778,7 +778,7 @@
         });
   
         {
-            compositeMovie = new CopyOfCompositeMovie(
+            compositeMovie = new CompositeMovie(
                 cTabFolderMain,
                 SWT.NONE, statusLine, locale);
             

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java	2004-11-29 20:12:23 UTC (rev 177)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java	2004-11-29 21:33:03 UTC (rev 178)
@@ -51,6 +51,7 @@
 import de.hsharz.provirent.objects.Genre;
 import de.hsharz.provirent.objects.Image;
 import de.hsharz.provirent.objects.Language;
+import de.hsharz.provirent.objects.Movie;
 import de.hsharz.provirent.objects.Payment;
 import de.hsharz.provirent.objects.Status;
 import de.hsharz.provirent.objects.Subtitle;
@@ -1534,4 +1535,120 @@
 	
 	}
 
+	/**
+	 * This method gets all Movies from the database.
+	 * searches for ID,Title,Date,Description,Actor,Director...
+	 * @param filter 
+	 * @return List of Payment objects, or an empty List
+	 */
+	public static List getMovie(final String filter){
+	    if (logger.isDebugEnabled()) {
+	        logger.debug("getMovie() - start. String filter= "+filter);
+	    }
+	    //init the returnlist
+	    List returnlist = new ArrayList();
+	
+	    Session s = null;
+	    
+	    try {
+	        //get new Session and begin Transaction
+	        s = HibernateUtil.currentSession();
+	            
+	            //init the criteria
+	            Criteria criteria = s.createCriteria(Movie.class);
+	            //any of the criteria 
+	            Disjunction any = Expression.disjunction();
+	          
+	            /*
+	            any.add(Expression.sql("Select * from PAYMENT where name like '" + 
+	                    		name + 
+	                    		"' and startdate = (select startdate from PAYMENT where name like '" + 
+	                    		name +
+	                    						   "')"));
+	            
+	            */
+	
+	            //if filter not empty
+	            if (filter != null && !filter.equalsIgnoreCase("")) {
+	                any.add(Expression.like("title", "%"+filter+"%"));
+	                any.add(Expression.like("releaseDate", "%"+filter+"%"));
+	                any.add(Expression.like("description", "%"+filter+"%"));
+	                any.add(Expression.like("actors", "%"+filter+"%"));
+	                any.add(Expression.like("directors", "%"+filter+"%"));
+	                //any.add(Expression.like("images", "%"+filter+"%"));
+	                //maybe we are searching for the id?
+	                try {
+	                    any.add(Expression.eq("movieId", new Integer(Integer.parseInt(filter))));
+	                } catch (Exception e) {
+	                }
+	                
+	            }
+	            
+	            //add all criteria
+	            criteria.add(any);
+	            //get the results
+	            returnlist = criteria.list();
+	            
+	            
+	
+	    } catch (Exception e) {
+	        logger.error(
+	                "getMovie() - Error while trying to do Transaction",
+	                e);
+	        returnlist = new ArrayList();
+	    } finally {
+	        try {
+	            // No matter what, close the session
+	            HibernateUtil.closeSession();
+	        } catch (HibernateException e1) {
+	            logger.error("getMovie() - Could not Close the Session", e1);
+	        }
+	    }
+	
+	    if (logger.isDebugEnabled()) {
+	        logger.debug("getMovie() - end");
+	    }
+	    return returnlist;
+	    
+	}
+	
+	
+	public static Movie getSingleMovie(final int id){
+	    if (logger.isDebugEnabled()) {
+	        logger.debug("getSingleMovie() - start. int filter= "+id);
+	    }
+	    //init the returnlist
+	    Movie returnobject = null;
+	
+	    Session s = null;
+	    Transaction tx = null;
+	    try {
+	        //get new Session and begin Transaction
+	        s = HibernateUtil.currentSession();
+	
+	            returnobject = (Movie)s.get(Movie.class, new Integer(id));
+	
+	    } catch (Exception e) {
+	        logger.error(
+	                "getSingleMovie() - Error while trying to do Transaction",
+	                e);
+	        
+	    } finally {
+	        try {
+	            // No matter what, close the session
+	            HibernateUtil.closeSession();
+	        } catch (HibernateException e1) {
+	            logger.error("getSingleMovie() - Could not Close the Session", e1);
+	        }
+	    }
+	
+	    if (logger.isDebugEnabled()) {
+	        logger.debug("getSingleMovie() - end");
+	    }
+	    return returnobject;
+	    
+	}
+
+
 }
+

Modified: project_src/provirent_hibernate/src/test/provirent/hibernate/TestMovie.java
===================================================================
--- project_src/provirent_hibernate/src/test/provirent/hibernate/TestMovie.java	2004-11-29 20:12:23 UTC (rev 177)
+++ project_src/provirent_hibernate/src/test/provirent/hibernate/TestMovie.java	2004-11-29 21:33:03 UTC (rev 178)
@@ -142,7 +142,7 @@
                     s.save( iter.next() );
                 }
                 movie.setGenres(objects);
-                
+              /*  
                 objects = new ArrayList();
                 objects.add(new Language("Deutsch","de"));
                 objects.add(new Language("Englisch","en"));
@@ -175,7 +175,7 @@
                     s.save( iter.next() );
                 }
                 movie.setVideoFormats(new ArrayList());
-
+                */
                 //add movie to movie List
                 movies.add(movie);
 
@@ -335,6 +335,7 @@
                 }
                 movie.setGenres(movieprops);
                 
+                /*
                 //try to get Language from db
                 dbprops =  s.find("from Language as language");
                 assertNotNull("testCreateDBMovie(): Can't get Language from DB. Null", dbprops);
@@ -400,8 +401,8 @@
                     movieprops.add(prop);
                 }
                 movie.setVideoFormats(movieprops);
+                */
                 
-                
                 int id = ((Integer)s.save(movie)).intValue();
                 s.flush();
 



From pschneider at sheep.berlios.de  Tue Nov 30 17:49:53 2004
From: pschneider at sheep.berlios.de (Philipp Schneider at BerliOS)
Date: Tue, 30 Nov 2004 17:49:53 +0100
Subject: [Provirent-svn-commit] r179 - in project_src/provirent_hibernate/src/de/hsharz/provirent: management/gui persistence
Message-ID: <200411301649.iAUGnrHH012492@sheep.berlios.de>

Author: pschneider
Date: 2004-11-30 17:49:51 +0100 (Tue, 30 Nov 2004)
New Revision: 179

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeImage.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java
Log:


Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeImage.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeImage.java	2004-11-29 21:33:03 UTC (rev 178)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeImage.java	2004-11-30 16:49:51 UTC (rev 179)
@@ -49,18 +49,15 @@
 import de.hsharz.provirent.persistence.Database;
 
 /**
- * This code was generated using CloudGarden's Jigloo
- * SWT/Swing GUI Builder, which is free for non-commercial
- * use. If Jigloo is being used commercially (ie, by a corporation,
- * company or business for any purpose whatever) then you
- * should purchase a license for each developer using Jigloo.
- * Please visit www.cloudgarden.com for details.
- * Use of Jigloo implies acceptance of these licensing terms.
+ * This code was generated using CloudGarden's Jigloo SWT/Swing GUI Builder,
+ * which is free for non-commercial use. If Jigloo is being used commercially
+ * (ie, by a corporation, company or business for any purpose whatever) then you
+ * should purchase a license for each developer using Jigloo. Please visit
+ * www.cloudgarden.com for details. Use of Jigloo implies acceptance of these
+ * licensing terms. ************************************* A COMMERCIAL LICENSE
+ * HAS NOT BEEN PURCHASED for this machine, so Jigloo or this code cannot be
+ * used legally for any corporate or commercial purpose.
  * *************************************
- * A COMMERCIAL LICENSE HAS NOT BEEN PURCHASED
- * for this machine, so Jigloo or this code cannot be used legally
- * for any corporate or commercial purpose.
- * *************************************
  */
 public class CompositeImage extends AbstractComposite {
 
@@ -75,8 +72,6 @@
      */
     private static final Logger logger = Logger.getLogger(CompositeImage.class);
 
-
-
     private Label labelImagesResize;
 
     private Scale scaleResize;
@@ -91,9 +86,10 @@
 
     private SashForm sashForm2;
 
-    //private Image ideaImage, scaledImage;
-    //private byte[] imagebytedata;
-    private ImageData original_imagedata;    
+    private de.hsharz.provirent.objects.Image localImage;
+
+    private ImageData original_imagedata;
+
     private ImageData scaled_imagedata;
 
     private int iy, ix = 0;
@@ -171,8 +167,9 @@
 
     }
 
-    /* 
+    /*
      * Init die Sprache (properties Datei)
+     * 
      * @see de.hsharz.provirent.managment.gui.AbstractComposite#initLanguage(java.util.Locale)
      */
     public void initLanguage(Locale locale) {
@@ -183,7 +180,7 @@
     }
 
     /**
-     * Auto-generated main method to display this 
+     * Auto-generated main method to display this
      * org.eclipse.swt.widgets.Composite inside a new Shell.
      */
     public static void main(String[] args) {
@@ -191,8 +188,8 @@
     }
 
     /**
-     * Auto-generated method to display this 
-     * org.eclipse.swt.widgets.Composite inside a new Shell.
+     * Auto-generated method to display this org.eclipse.swt.widgets.Composite
+     * inside a new Shell.
      */
     public static void showGUI() {
         Display display = Display.getDefault();
@@ -266,7 +263,7 @@
     }
 
     private void initImagesOverview() {
-        //	  Group Images Overview 
+        //	  Group Images Overview
 
         groupImagesOverview = new Group(sashForm2, SWT.NONE);
         GridLayout group1Layout = new GridLayout();
@@ -295,14 +292,15 @@
 
                     int index = tableImagesOverview.getSelectionIndex();
 
-                    //es wurde ein Element aus Tabelle ausgewaehlt jetzt muss die
+                    //es wurde ein Element aus Tabelle ausgewaehlt jetzt muss
+                    // die
                     //Detailansicht aktualisiert werden
                     refreshImagesDetail(tableImagesOverview.getItem(index)
                             .getText(0));
 
                     buttonImageDelete.setEnabled(true);
                     buttonImageEdit.setEnabled(true);
-                    
+
                     if (logger.isDebugEnabled()) {
                         logger.debug("widgetSelected(SelectionEvent) - end");
                     }
@@ -383,7 +381,7 @@
             text2LData.horizontalSpan = 5;
             text2LData.grabExcessHorizontalSpace = true;
             textImagesSearch.setLayoutData(text2LData);
-        }// Search                    
+        }// Search
 
     }
 
@@ -471,7 +469,7 @@
             text1LData3.horizontalSpan = 4;
             text1LData3.grabExcessHorizontalSpace = true;
             textImagesDescription.setLayoutData(text1LData3);
-        }// label and buttons for detail      
+        }// label and buttons for detail
         {
             labelImagesFile = new Label(groupImagesDetail, SWT.NONE);
             labelImagesFile.setText(l
@@ -520,7 +518,8 @@
                     String selectedFile = fileDialog.open();
                     if (selectedFile != null) {
 
-                        original_imagedata = scaled_imagedata = new ImageData(selectedFile);
+                        original_imagedata = scaled_imagedata = new ImageData(
+                                selectedFile);
 
                         canvasImg.redraw();
                         textFileUrl.setText(fileDialog.getFilterPath()
@@ -533,7 +532,7 @@
                                         0,
                                         fileDialog.getFileName().lastIndexOf(
                                                 ".")));
-                        //save the selected dir 
+                        //save the selected dir
                         currentDir = fileDialog.getFilterPath();
 
                         //set the resizescale enable
@@ -565,7 +564,7 @@
             canvasImg.setLayoutData(canvasImgLData);
             canvasImg.addPaintListener(new PaintListener() {
                 public void paintControl(PaintEvent e) {
-                    if (scaled_imagedata != null ) {
+                    if (scaled_imagedata != null) {
                         paintImage(e);
                         //e.gc.drawImage(scaledImage, 0, 0);
                         e.gc.dispose();
@@ -624,10 +623,10 @@
                     int newwidth = (int) (original_imagedata.width * scaleFaktor);
                     int newheight = (int) (original_imagedata.height * scaleFaktor);
 
-                    if(newwidth== 0){
+                    if (newwidth == 0) {
                         newwidth = 1;
                     }
-                    if (newheight == 0){
+                    if (newheight == 0) {
                         newheight = 1;
                     }
                     if (logger.isDebugEnabled()) {
@@ -635,10 +634,9 @@
                                 .debug("widgetSelected(SelectionEvent) - newwidth: "
                                         + newwidth + " newheight: " + newheight);
                     }
-                    scaled_imagedata = original_imagedata.scaledTo(
-                            newwidth, newheight);
+                    scaled_imagedata = original_imagedata.scaledTo(newwidth,
+                            newheight);
 
-
                     //redraw the image
                     canvasImg.redraw();
                     resizeScrollBars();
@@ -737,7 +735,6 @@
                         //reset and resize the scrollbars
                         resetScrollBars();
                         resizeScrollBars();
-                        
 
                     }
                 });
@@ -750,95 +747,8 @@
                     public void widgetSelected(SelectionEvent evt) {
                         logger.debug("buttonImageDelete.widgetSelected, event="
                                 + evt);
+                        deleteImage();
 
-                        String msg = MessageFormat
-                                .format(
-                                        l
-                                                .getString("images.groupdetail.deletebutton.question.text"),
-                                        new Object[] { textImagesName.getText() });
-
-                        int question = showMsg(
-                                msg,
-                                l
-                                        .getString("images.groupdetail.deletebutton.question.header"),
-                                SWT.ICON_QUESTION | SWT.YES | SWT.NO);
-                        
-                        if (question != SWT.YES) {
-                            return;
-                        }
-
-                        de.hsharz.provirent.objects.Image o = new de.hsharz.provirent.objects.Image();
-                        o.setImageId(new Integer(Integer.parseInt(textImagesID
-                                .getText())));
-                        o.setImageFileName(textImagesName.getText());
-                        o.setImageFileDescription(textImagesDescription
-                                .getText());
-
-                        /**@todo BildDatei holen */
-                        /*
-                         try {
-                         //object speichern
-                         // Fehlerbehandlung
-                         Database.deleteObject(o);
-
-                         //?bersichtsTabelle aktualisieren
-                         refreshImageOverviewTable(textImageSearch
-                         .getText());
-
-                         //Detailansicht leeren
-                         textImageID.setText("");
-                         textImageFName.setText("");
-                         textImageLName.setText("");
-
-                         //in Tabelle n?chsten ausw?hlen
-                         try {
-                         tableImageOverview.select(0);
-                         } catch (Exception ex) {
-                         }
-
-                         //Statusline Nachricht sezten
-                         statusLine
-                         .setStatus(
-                         1,
-                         l
-                         .getString("images.groupdetail.deletebutton.newok"));
-
-                         } catch (DataBaseException e) {
-                         if (e.getMessage().equalsIgnoreCase("1")) {
-                         //Fehler beim Speichern des Objectes
-
-                         statusLine
-                         .setStatus(
-                         3,
-                         l
-                         .getString("images.groupdetail.deletebutton.errorsave"));
-                         showMsg(
-                         l
-                         .getString("images.groupdetail.deletebutton.errorsave"),
-                         l.getString("error"),
-                         SWT.ICON_ERROR | SWT.OK);
-
-                         } else if (e.getMessage().equalsIgnoreCase("2")) {
-                         //fehler beim db aufbau
-                         statusLine
-                         .setStatus(
-                         3,
-                         l
-                         .getString("images.groupdetail.deletebutton.errordb"));
-                         showMsg(
-                         l
-                         .getString("images.groupdetail.deletebutton.errordb"),
-                         l.getString("error"),
-                         SWT.ICON_ERROR | SWT.OK);
-
-                         } else {
-                         //@todo
-                         e.printStackTrace();
-                         }
-
-                         }
-                         */
-
                     }
                 });
             }
@@ -892,9 +802,10 @@
                         if (mode_image == ManagementGui.MODE_ADD) {
 
                             /**
-                             * @todo eine Exception bekommen wieder leider NOCH nicht mit
-                             * d.h. es muss noch ein r?ckgabewert kommen oder eine Exception 
-                             * ?bermitteln werden (aus der DB Klasse)
+                             * @todo eine Exception bekommen wieder leider NOCH
+                             *       nicht mit d.h. es muss noch ein
+                             *       r?ckgabewert kommen oder eine Exception
+                             *       ?bermitteln werden (aus der DB Klasse)
                              */
                             //neues Objekt erzeugen
                             de.hsharz.provirent.objects.Image tmp = new de.hsharz.provirent.objects.Image();
@@ -915,8 +826,7 @@
                                         + SWT.IMAGE_JPEG);
                             }
 
-                            imageLoader.save(bos,
-                                    scaled_imagedata.type);
+                            imageLoader.save(bos, scaled_imagedata.type);
 
                             tmp.setImageFile(bos.toByteArray());
 
@@ -988,18 +898,24 @@
                             //setImagesGroupButtonSaveCancel();
 
                         } else if (mode_image == ManagementGui.MODE_EDIT) {
-                            /*
-                             Actor tmp = new Actor(
-                             textImageFName.getText(),
-                             textImageLName.getText());
-                             tmp.setActorId(new Integer(Integer
-                             .parseInt(textImageID.getText())));
+                            
+
+                             localImage.setImageFileName(textImagesName.getText());
+                             localImage.setImageId(new Integer(Integer.parseInt(textImagesID.getText())));
+                             localImage.setImageFileDescription(textImagesDescription.getText());
+                             
+                             ImageLoader imageLoader = new ImageLoader();
+                             imageLoader.data = new ImageData[] { scaled_imagedata };
+                             ByteArrayOutputStream bos = new ByteArrayOutputStream();
+                             localImage.setImageFile( bos.toByteArray() );
+                             
+                             
                              try {
                              //object speichern
                              // Fehlerbehandlung
-                             Database.saveObject(tmp);
+                             Database.saveObject(localImage);
                              //?bersichtstabelle aktualisieren
-                             refreshImageOverviewTable(textImageSearch
+                             refreshImageOverviewTable(textImagesSearch
                              .getText());
 
                              //Statusline Nachricht sezten
@@ -1045,16 +961,9 @@
 
                              }
 
-                             //alle Buttons auf aktiv setzen
-                             setImageGroupButtonSaveCancel();
-
                              }
-                             */
-                            /**
-                             * @todo Exception werfen, da nur die zwei Modes sein d?rfen
-                             */
                         }
-                    }
+                    
                 });
             }
             {
@@ -1067,10 +976,10 @@
 
                         tableImagesOverview.setEnabled(true);
                         textImagesSearch.setEnabled(true);
-                        
+
                         textImagesDescription.setEnabled(false);
                         textImagesName.setEnabled(false);
-                        
+
                         buttonImageCancel.setEnabled(false);
                         buttonImageDelete.setEnabled(false);
                         buttonImageEdit.setEnabled(false);
@@ -1078,8 +987,7 @@
                         buttonImageSave.setEnabled(false);
                         buttonImageNew.setEnabled(true);
                         scaleResize.setEnabled(false);
-                        
-                        
+
                     }
                 });
             }
@@ -1088,7 +996,79 @@
         // buttons for detail
     }
 
-    void resizeScrollBars() {
+    private void deleteImage() {
+
+        String msg = MessageFormat.format(l
+                .getString("images.groupdetail.deletebutton.question.text"),
+                new Object[] { textImagesName.getText() });
+
+        int question = showMsg(msg, l
+                .getString("images.groupdetail.deletebutton.question.header"),
+                SWT.ICON_QUESTION | SWT.YES | SWT.NO);
+
+        if (question != SWT.YES) {
+            return;
+        }
+
+        try {
+            //object speichern
+            // Fehlerbehandlung
+            Database.deleteObject(localImage);
+
+            //?bersichtsTabelle aktualisieren
+            refreshImageOverviewTable("");
+
+            //Detailansicht leeren
+            textImagesID.setText("");
+            textImagesName.setText("");
+            textImagesDescription.setText("");
+            
+            localImage= null;
+            scaled_imagedata = null;
+            original_imagedata = null;
+            
+
+            //in Tabelle n?chsten ausw?hlen
+            try {
+                tableImagesOverview.setSelection(0);
+            } catch (Exception ex) {
+            }
+
+            //Statusline Nachricht sezten
+            statusLine.setStatus(1, l
+                    .getString("images.groupdetail.deletebutton.newok"));
+
+        } catch (DataBaseException e) {
+            if (e.getMessage().equalsIgnoreCase("1")) {
+                //Fehler beim Speichern des Objectes
+
+                statusLine
+                        .setStatus(
+                                3,
+                                l
+                                        .getString("images.groupdetail.deletebutton.errorsave"));
+                showMsg(
+                        l
+                                .getString("images.groupdetail.deletebutton.errorsave"),
+                        l.getString("error"), SWT.ICON_ERROR | SWT.OK);
+
+            } else if (e.getMessage().equalsIgnoreCase("2")) {
+                //fehler beim db aufbau
+                statusLine.setStatus(3, l
+                        .getString("images.groupdetail.deletebutton.errordb"));
+                showMsg(l.getString("images.groupdetail.deletebutton.errordb"),
+                        l.getString("error"), SWT.ICON_ERROR | SWT.OK);
+
+            } else {
+                //@todo
+                e.printStackTrace();
+            }
+
+        }
+
+    }
+
+    private void resizeScrollBars() {
         // Set the max and thumb for the image canvas scroll bars.
         ScrollBar horizontal = canvasImg.getHorizontalBar();
         ScrollBar vertical = canvasImg.getVerticalBar();
@@ -1121,7 +1101,7 @@
         }
     }
 
-    void scrollHorizontally(ScrollBar scrollBar) {
+    private void scrollHorizontally(ScrollBar scrollBar) {
         if (scaled_imagedata == null)
             return;
         Rectangle canvasBounds = canvasImg.getClientArea();
@@ -1140,7 +1120,7 @@
         }
     }
 
-    void scrollVertically(ScrollBar scrollBar) {
+    private void scrollVertically(ScrollBar scrollBar) {
         if (scaled_imagedata == null)
             return;
         Rectangle canvasBounds = canvasImg.getClientArea();
@@ -1159,7 +1139,7 @@
     }
 
     // Reset the scroll bars to 0.
-    void resetScrollBars() {
+    private void resetScrollBars() {
         ix = 0;
         iy = 0;
         resizeScrollBars();
@@ -1168,14 +1148,13 @@
 
     }
 
-    void paintImage(PaintEvent event) {
-        Image paintImage = new Image(getDisplay(),scaled_imagedata);
+    private void paintImage(PaintEvent event) {
+        Image paintImage = new Image(getDisplay(), scaled_imagedata);
 
         int w = Math.round(scaled_imagedata.width);
         int h = Math.round(scaled_imagedata.height);
         event.gc.drawImage(paintImage, 0, 0, scaled_imagedata.width,
-                scaled_imagedata.height, ix
-                        + scaled_imagedata.x, iy
+                scaled_imagedata.height, ix + scaled_imagedata.x, iy
                         + scaled_imagedata.y, w, h);
         event.gc.dispose();
     }
@@ -1204,7 +1183,7 @@
             //id ist keine Zahl
             return;
         }
-
+        localImage = object;
         textImagesID.setText(object.getImageId() + "");
         textImagesName.setText(object.getImageFileName());
         textImagesDescription.setText(object.getImageFileDescription());
@@ -1217,7 +1196,8 @@
                 logger
                         .debug("refreshImagesDetail(String) - Versuche zu zeichnen");
             }
-            scaled_imagedata = original_imagedata = new ImageData(new ByteArrayInputStream(object.getImageFile()));
+            scaled_imagedata = original_imagedata = new ImageData(
+                    new ByteArrayInputStream(object.getImageFile()));
             canvasImg.redraw();
         } else {
             statusLine.setStatus(StatusLineStyledText.STATUS_WARN,
@@ -1235,7 +1215,7 @@
     }
 
     /**
-     * 
+     *  
      */
 
     protected void insertIntoImagesOverviewTable(
@@ -1284,9 +1264,9 @@
 
         int maxheight = 75;
         int maxwidth = 75;
-        
+
         final ImageData imgdata = new ImageData(new ByteArrayInputStream(data));
-        
+
         final int width = imgdata.width;
         final int height = imgdata.height;
         float scalefactor = 1;
@@ -1301,9 +1281,8 @@
 
         }
 
-        return new Image(getDisplay(), imgdata
-                .scaledTo((int) (width * scalefactor),
-                        (int) (height * scalefactor)));
+        return new Image(getDisplay(), imgdata.scaledTo(
+                (int) (width * scalefactor), (int) (height * scalefactor)));
 
     }
 }
\ No newline at end of file

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java	2004-11-29 21:33:03 UTC (rev 178)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java	2004-11-30 16:49:51 UTC (rev 179)
@@ -227,7 +227,75 @@
         return o;
     }
     
+    public static void deleteObjectWithId(final Class deleteclass, final Integer id) throws DataBaseException{
+        if (logger.isDebugEnabled()) {
+            logger.debug("deleteObjectWithId(Class = " + deleteclass.getName()+" Id: "+id+ ") - start");
+        }
+        int exception =0;
+        
+        Session s = null;
+        Transaction tx = null;
   
+            try {
+                //get new Session and begin Transaction
+                s = HibernateUtil.currentSession();
+                tx = s.beginTransaction();
+                
+                try{
+                    s.delete("");
+                
+                } catch (HibernateException e) {
+                    logger.error("deleteObjectWithId(). Fehler beim Speichern/Updaten "
+                            + "des Objectes:" + deleteclass.getName() + " ID: "+id+" Exception: " + e);
+                    exception = 1;
+                }
+               
+                
+
+                //s.flush();
+                
+                tx.commit();
+                
+                
+            } catch (HibernateException e) {
+                exception = 2;
+                logger.error("Message "+  e.getMessages().toString()); 
+                logger
+                        .error(
+                                "deleteObjectWithId(Object) - Something went wrong here; discard all partial changes",
+                                e);
+                if (tx != null) {
+                    try {
+                        // Something went wrong; discard all partial changes
+                        tx.rollback();
+                    } catch (HibernateException e1) {
+                        e1.printStackTrace();
+                    }
+                }    
+
+            } finally {
+                try {
+                    // No matter what, close the session
+                    HibernateUtil.closeSession();
+                } catch (HibernateException e1) {
+                    
+                    logger
+                            .error(
+                                    "deleteObjectWithId(Object) - Could not Close the Session",
+                                    e1);
+                    
+                }
+            }
+
+            if (exception > 0) {
+                throw new DataBaseException("exception");
+            }
+            
+        if (logger.isDebugEnabled()) {
+            logger.debug("deleteObjectWithId(Object) - end");
+        }
+    }
+  
     
     public static void deleteObject(Object o) throws DataBaseException{
         if (logger.isDebugEnabled()) {
@@ -247,7 +315,7 @@
                     s.delete(o);
                 
                 } catch (HibernateException e) {
-                    logger.error("saveObject(). Fehler beim Speichern/Updaten "
+                    logger.error("deleteObject(). Fehler beim Speichern/Updaten "
                             + "des Objectes:" + o + " Exception: " + e);
                     exception = 1;
                 }
@@ -1539,7 +1607,7 @@
 	 * This method gets all Movies from the database.
 	 * searches for ID,Title,Date,Description,Actor,Director...
 	 * @param filter 
-	 * @return List of Payment objects, or an empty List
+	 * @return List of Movie objects, or an empty List
 	 */
 	public static List getMovie(final String filter){
 	    if (logger.isDebugEnabled()) {
@@ -1559,14 +1627,6 @@
 	            //any of the criteria 
 	            Disjunction any = Expression.disjunction();
 	          
-	            /*
-	            any.add(Expression.sql("Select * from PAYMENT where name like '" + 
-	                    		name + 
-	                    		"' and startdate = (select startdate from PAYMENT where name like '" + 
-	                    		name +
-	                    						   "')"));
-	            
-	            */
 	
 	            //if filter not empty
 	            if (filter != null && !filter.equalsIgnoreCase("")) {



From pschneider at sheep.berlios.de  Tue Nov 30 18:21:28 2004
From: pschneider at sheep.berlios.de (Philipp Schneider at BerliOS)
Date: Tue, 30 Nov 2004 18:21:28 +0100
Subject: [Provirent-svn-commit] r180 - in project_src/provirent_hibernate/src/de/hsharz/provirent: management/gui persistence
Message-ID: <200411301721.iAUHLS6c013998@sheep.berlios.de>

Author: pschneider
Date: 2004-11-30 18:21:23 +0100 (Tue, 30 Nov 2004)
New Revision: 180

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeImage.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java
Log:
- Image fertig gestellt

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeImage.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeImage.java	2004-11-30 16:49:51 UTC (rev 179)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeImage.java	2004-11-30 17:21:23 UTC (rev 180)
@@ -906,7 +906,10 @@
                              
                              ImageLoader imageLoader = new ImageLoader();
                              imageLoader.data = new ImageData[] { scaled_imagedata };
+
                              ByteArrayOutputStream bos = new ByteArrayOutputStream();
+                             imageLoader.save(bos, scaled_imagedata.type);
+
                              localImage.setImageFile( bos.toByteArray() );
                              
                              
@@ -962,6 +965,19 @@
                              }
 
                              }
+                        tableImagesOverview.setEnabled(true);
+                        textImagesSearch.setEnabled(true);
+
+                        textImagesDescription.setEnabled(false);
+                        textImagesName.setEnabled(false);
+
+                        buttonImageCancel.setEnabled(false);
+                        buttonImageDelete.setEnabled(false);
+                        buttonImageEdit.setEnabled(false);
+                        buttonSelectFile.setEnabled(false);
+                        buttonImageSave.setEnabled(false);
+                        buttonImageNew.setEnabled(true);
+                        scaleResize.setEnabled(false);
                         }
                     
                 });

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java	2004-11-30 16:49:51 UTC (rev 179)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java	2004-11-30 17:21:23 UTC (rev 180)
@@ -810,7 +810,7 @@
 	                } catch (Exception e) {
 	                }
 	            }
-	            logger.debug("Anzahl der Images:"+images.size());
+
 	            for (int i = 0; i < images.size(); i++) {
                     Image tmp = (Image)images.get(i);
                     criteria.add(Expression.not(Expression.eq("imageId",tmp.getImageId())));



From rgriesch at sheep.berlios.de  Tue Nov 30 18:24:40 2004
From: rgriesch at sheep.berlios.de (Remo Griesch at BerliOS)
Date: Tue, 30 Nov 2004 18:24:40 +0100
Subject: [Provirent-svn-commit] r181 - project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui
Message-ID: <200411301724.iAUHOefN014241@sheep.berlios.de>

Author: rgriesch
Date: 2004-11-30 18:24:39 +0100 (Tue, 30 Nov 2004)
New Revision: 181

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java
Log:
fullfilled phils wishes
CompositeMovie   - Listen in Tabellen umgewnadelt
                 - Id versteckt
                 - Tabellen sind f?\195?\188llbar mit den Dialogen


Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java	2004-11-30 17:21:23 UTC (rev 180)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java	2004-11-30 17:24:39 UTC (rev 181)
@@ -28,6 +28,7 @@
 import org.eclipse.swt.widgets.Shell;
 import org.eclipse.swt.widgets.Table;
 import org.eclipse.swt.widgets.TableColumn;
+import org.eclipse.swt.widgets.TableItem;
 import org.eclipse.swt.widgets.Text;
 
 import com.cloudgarden.resource.SWTResourceManager;
@@ -75,6 +76,12 @@
     
     private Table tableMoviesOverview;
     private Table tableMoviesOverviewDetail;
+    private Table tableMoviesDirectorsDetail;
+    private Table tableMoviesActorsDetail;
+    private Table tableMoviesGenresDetail;
+    private Table tableMoviesImagesDetail;
+    private TableColumn tableMoviesDetail_ColumnID;
+    private TableColumn tableMoviesDetail_ColumnName;
     private TableColumn tableMoviesOverview_ColumnID;
     private TableColumn tableMoviesOverview_ColumnTitle;
     private TableColumn tableMoviesOverview_ColumnSubtitles;
@@ -128,12 +135,7 @@
     private Composite compositeMoviesEditActors;
     private Composite compositeMoviesEditGenres;
     private Composite compositeMoviesEditImages;
-    private List listMoviesImages;
-    private List listMoviesGenres;
-    private List listMoviesActors;
-    private List listMoviesDirectors;
     
-
     protected int mode_movie;
     
     private StatusLineStyledText statusLine;
@@ -648,9 +650,12 @@
         	            DialogMovie dialog = new DialogMovie(getShell(),0,locale,movie,DialogMovie.TYPE_DIRECTOR);
         	            dialog.open();
                     
-        	            listMoviesDirectors.removeAll();
+        	            tableMoviesDirectorsDetail.removeAll();
+        	            TableItem item;
         	            for(int i =0; i< movie.getDirector().size(); i++){
-        	                listMoviesDirectors.add( ((Director)movie.getDirector().get(i)).getLastName() );
+        	                item = new TableItem(tableMoviesDirectorsDetail, SWT.NONE);
+        	                item.setText(new String[] { ((Director)movie.getDirector().get(i)).getDirectorId()+ ""
+        	                        ,((Director)movie.getDirector().get(i)).getLastName() + ""});
         	            }                    
         	            
         	        }
@@ -674,12 +679,32 @@
         	    });  
         	}
         {
-            listMoviesDirectors = new List(groupMoviesDetail, SWT.BORDER);
-            GridData listMoviesDirectorsLData = new GridData();
-            listMoviesDirectorsLData.horizontalAlignment = GridData.FILL;
-            listMoviesDirectorsLData.horizontalSpan = 5;
-            listMoviesDirectorsLData.verticalSpan = 1;
-            listMoviesDirectors.setLayoutData(listMoviesDirectorsLData);
+            tableMoviesDirectorsDetail = new Table(groupMoviesDetail,SWT.SINGLE
+                    | SWT.V_SCROLL | SWT.BORDER);
+            tableMoviesDirectorsDetail.setHeaderVisible(true);
+            tableMoviesDirectorsDetail.setLinesVisible(true);
+            GridData tableMoviesDirectorsDetailLData = new GridData();
+            tableMoviesDirectorsDetailLData.horizontalAlignment = GridData.FILL;
+            tableMoviesDirectorsDetailLData.horizontalSpan = 5;
+            tableMoviesDirectorsDetailLData.grabExcessVerticalSpace = true;
+            tableMoviesDirectorsDetailLData.verticalAlignment = GridData.FILL;
+            tableMoviesDirectorsDetail.setLayoutData(tableMoviesDirectorsDetailLData);
+            
+            {
+                tableMoviesDetail_ColumnID = new TableColumn(
+                        tableMoviesDirectorsDetail,
+                     SWT.CENTER);
+                tableMoviesDetail_ColumnID.setWidth(0);
+                tableMoviesDetail_ColumnID.setResizable(false);
+            }
+            {
+                tableMoviesDetail_ColumnName = new TableColumn(
+                        tableMoviesDirectorsDetail,
+                     SWT.CENTER);              
+                tableMoviesDetail_ColumnName.setText(
+                        l.getString("movies.groupoverviewdetail.columndirectors"));
+                tableMoviesDetail_ColumnName.setWidth(200);            
+            }
         }// EditDirectors
         // Edit Actors
         {
@@ -717,9 +742,12 @@
         	            DialogMovie dialog = new DialogMovie(getShell(),0,locale,movie,DialogMovie.TYPE_ACTOR);
         	            dialog.open();
 
-        	            listMoviesActors.removeAll();
+        	            tableMoviesActorsDetail.removeAll();
+        	            TableItem item;
         	            for(int i =0; i< movie.getActors().size(); i++){
-        	                listMoviesActors.add( ((Actor)movie.getActors().get(i)).getLastName() );
+        	                item = new TableItem(tableMoviesActorsDetail, SWT.NONE);
+        	                item.setText(new String[] { ((Actor)movie.getActors().get(i)).getActorId() + ""
+        	                        , ((Actor)movie.getActors().get(i)).getLastName() + ""});
         	            }                    
         	        }
         	    });  
@@ -741,15 +769,33 @@
         	        }
         	    });  
         	}
-        {
-            listMoviesActors = new List(groupMoviesDetail, SWT.BORDER);
-            GridData listMoviesActorsLData = new GridData();
-            listMoviesActorsLData.horizontalAlignment = GridData.FILL;
-            listMoviesActorsLData.horizontalSpan = 5;
-            listMoviesActorsLData.verticalSpan = 1;
-            listMoviesActorsLData.grabExcessHorizontalSpace = true;
-            listMoviesActorsLData.verticalAlignment = GridData.FILL;
-            listMoviesActors.setLayoutData(listMoviesActorsLData);
+        	{
+                tableMoviesActorsDetail = new Table(groupMoviesDetail,SWT.SINGLE
+                        | SWT.V_SCROLL | SWT.BORDER);
+                tableMoviesActorsDetail.setHeaderVisible(true);
+                tableMoviesActorsDetail.setLinesVisible(true);
+                GridData tableMoviesActorsDetailLData = new GridData();
+                tableMoviesActorsDetailLData.horizontalAlignment = GridData.FILL;
+                tableMoviesActorsDetailLData.horizontalSpan = 5;
+                tableMoviesActorsDetailLData.grabExcessVerticalSpace = true;
+                tableMoviesActorsDetailLData.verticalAlignment = GridData.FILL;
+                tableMoviesActorsDetail.setLayoutData(tableMoviesActorsDetailLData);
+                
+                {
+                    tableMoviesDetail_ColumnID = new TableColumn(
+                            tableMoviesActorsDetail,
+                         SWT.CENTER);
+                    tableMoviesDetail_ColumnID.setWidth(0);
+                    tableMoviesDetail_ColumnID.setResizable(false);              
+                }
+                {
+                    tableMoviesDetail_ColumnName = new TableColumn(
+                            tableMoviesActorsDetail,
+                         SWT.CENTER);              
+                    tableMoviesDetail_ColumnName.setText(
+                            l.getString("movies.groupoverviewdetail.columnactors"));
+                    tableMoviesDetail_ColumnName.setWidth(200);            
+                }
         }//Edit Actors
         //Edit Genres
         {
@@ -787,13 +833,13 @@
         	            DialogMovie dialog = new DialogMovie(getShell(),0,locale,movie,DialogMovie.TYPE_GENRE);
         	            dialog.open();
 
-        	            listMoviesGenres.removeAll();
+        	            tableMoviesGenresDetail.removeAll();
+        	            TableItem item;
         	            for(int i =0; i< movie.getGenres().size(); i++){
-        	                listMoviesGenres.add( ((Genre)movie.getGenres().get(i)).getName() );
-        	            }
-        	            
-
-                    
+        	                item = new TableItem(tableMoviesGenresDetail, SWT.NONE);
+        	                item.setText(new String[] { ((Genre)movie.getGenres().get(i)).getGenreId() + ""
+        	                        , ((Genre)movie.getGenres().get(i)).getName() + ""});
+        	            }         	                           
         	        }
         	    });  
         	}
@@ -814,14 +860,33 @@
         	        }
         	    });  
         	}
-        {
-            listMoviesGenres = new List(groupMoviesDetail, SWT.BORDER);
-            GridData listMoviesGenresLData = new GridData();
-
-            listMoviesGenresLData.horizontalAlignment = GridData.FILL;
-            listMoviesGenresLData.horizontalSpan = 5;
-            listMoviesGenresLData.verticalSpan = 1;
-            listMoviesGenres.setLayoutData(listMoviesGenresLData);
+        	{
+                tableMoviesGenresDetail = new Table(groupMoviesDetail,SWT.SINGLE
+                        | SWT.V_SCROLL | SWT.BORDER);
+                tableMoviesGenresDetail.setHeaderVisible(true);
+                tableMoviesGenresDetail.setLinesVisible(true);
+                GridData tableMoviesGenresDetailLData = new GridData();
+                tableMoviesGenresDetailLData.horizontalAlignment = GridData.FILL;
+                tableMoviesGenresDetailLData.horizontalSpan = 5;
+                tableMoviesGenresDetailLData.grabExcessVerticalSpace = true;
+                tableMoviesGenresDetailLData.verticalAlignment = GridData.FILL;
+                tableMoviesGenresDetail.setLayoutData(tableMoviesGenresDetailLData);
+                
+                {
+                    tableMoviesDetail_ColumnID = new TableColumn(
+                            tableMoviesGenresDetail,
+                         SWT.CENTER);
+                    tableMoviesDetail_ColumnID.setWidth(0);
+                    tableMoviesDetail_ColumnID.setResizable(false);              
+                }
+                {
+                    tableMoviesDetail_ColumnName = new TableColumn(
+                            tableMoviesGenresDetail,
+                         SWT.CENTER);              
+                    tableMoviesDetail_ColumnName.setText(
+                            l.getString("movies.groupoverviewdetail.columngenres"));
+                    tableMoviesDetail_ColumnName.setWidth(200);            
+                }
         }// Edit Genre
         // Edit Images
         {
@@ -859,9 +924,12 @@
         	            DialogMovie dialog = new DialogMovie(getShell(),0,locale,movie,DialogMovie.TYPE_IMAGE);
         	            dialog.open();
 
-        	            listMoviesImages.removeAll();
+        	            tableMoviesActorsDetail.removeAll();
+        	            TableItem item;
         	            for(int i =0; i< movie.getImages().size(); i++){
-        	                listMoviesImages.add( ((Image)movie.getImages().get(i)).getImageFileName() );
+        	                item = new TableItem(tableMoviesImagesDetail, SWT.NONE);
+        	                item.setText(new String[] { ((Image)movie.getImages().get(i)).getImageId() + ""
+        	                        , ((Image)movie.getImages().get(i)).getImageFileName() + ""});
         	            }
         	        }
         	    });  
@@ -883,13 +951,33 @@
         	        }
         	    });  
         	}
-        {
-            listMoviesImages = new List(groupMoviesDetail, SWT.BORDER);
-            GridData listMoviesImagesLData = new GridData();
-            listMoviesImagesLData.horizontalAlignment = GridData.FILL;
-            listMoviesImagesLData.horizontalSpan = 5;
-            listMoviesImagesLData.verticalSpan = 1;
-            listMoviesImages.setLayoutData(listMoviesImagesLData);
+        	{
+                tableMoviesImagesDetail = new Table(groupMoviesDetail,SWT.SINGLE
+                        | SWT.V_SCROLL | SWT.BORDER);
+                tableMoviesImagesDetail.setHeaderVisible(true);
+                tableMoviesImagesDetail.setLinesVisible(true);
+                GridData tableMoviesImagesDetailLData = new GridData();
+                tableMoviesImagesDetailLData.horizontalAlignment = GridData.FILL;
+                tableMoviesImagesDetailLData.horizontalSpan = 5;
+                tableMoviesImagesDetailLData.grabExcessVerticalSpace = true;
+                tableMoviesImagesDetailLData.verticalAlignment = GridData.FILL;
+                tableMoviesImagesDetail.setLayoutData(tableMoviesImagesDetailLData);
+                
+                {
+                    tableMoviesDetail_ColumnID = new TableColumn(
+                            tableMoviesImagesDetail,
+                         SWT.CENTER);
+                    tableMoviesDetail_ColumnID.setWidth(0);
+                    tableMoviesDetail_ColumnID.setResizable(false);              
+                }
+                {
+                    tableMoviesDetail_ColumnName = new TableColumn(
+                            tableMoviesImagesDetail,
+                         SWT.CENTER);              
+                    tableMoviesDetail_ColumnName.setText(
+                            l.getString("movies.groupoverviewdetail.columnimages"));
+                    tableMoviesDetail_ColumnName.setWidth(200);            
+                }
         }// Edit Images
 
         {
@@ -939,7 +1027,11 @@
                 
                 textMoviesSearch.setEditable(false);
                 tableMoviesOverview.setEnabled(false);
-
+                tableMoviesDirectorsDetail.removeAll();
+                tableMoviesActorsDetail.removeAll();
+                tableMoviesImagesDetail.removeAll();
+                tableMoviesGenresDetail.removeAll();
+                
                 movie = new Movie();
                 movie.setActors(new ArrayList());
                 movie.setDirector(new ArrayList());



From sforstner at sheep.berlios.de  Tue Nov 30 18:26:43 2004
From: sforstner at sheep.berlios.de (Stefan at BerliOS)
Date: Tue, 30 Nov 2004 18:26:43 +0100
Subject: [Provirent-svn-commit] r182 - in project_src/provirent_hibernate/src/de/hsharz/provirent: management/gui persistence
Message-ID: <200411301726.iAUHQhBG014568@sheep.berlios.de>

Author: sforstner
Date: 2004-11-30 18:26:42 +0100 (Tue, 30 Nov 2004)
New Revision: 182

Added:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeCustomer.java
Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java
Log:


Added: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeCustomer.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeCustomer.java	2004-11-30 17:24:39 UTC (rev 181)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeCustomer.java	2004-11-30 17:26:42 UTC (rev 182)
@@ -0,0 +1,1552 @@
+package de.hsharz.provirent.management.gui;
+
+import java.text.DateFormat;
+import java.text.MessageFormat;
+import java.text.ParseException;
+import java.util.Calendar;
+import java.util.Enumeration;
+import java.util.Hashtable;
+import java.util.Locale;
+import java.util.PropertyResourceBundle;
+import java.util.ResourceBundle;
+import java.util.Vector;
+
+import org.apache.log4j.Logger;
+import org.eclipse.swt.SWT;
+import org.eclipse.swt.custom.SashForm;
+import org.eclipse.swt.events.FocusAdapter;
+import org.eclipse.swt.events.FocusEvent;
+import org.eclipse.swt.events.SelectionAdapter;
+import org.eclipse.swt.events.SelectionEvent;
+import org.eclipse.swt.layout.FormAttachment;
+import org.eclipse.swt.layout.FormData;
+import org.eclipse.swt.layout.FormLayout;
+import org.eclipse.swt.layout.GridData;
+import org.eclipse.swt.layout.GridLayout;
+import org.eclipse.swt.widgets.Button;
+import org.eclipse.swt.widgets.Composite;
+import org.eclipse.swt.widgets.Display;
+import org.eclipse.swt.widgets.Event;
+import org.eclipse.swt.widgets.Group;
+import org.eclipse.swt.widgets.Label;
+import org.eclipse.swt.widgets.Listener;
+import org.eclipse.swt.widgets.Shell;
+import org.eclipse.swt.widgets.Table;
+import org.eclipse.swt.widgets.TableColumn;
+import org.eclipse.swt.widgets.TableItem;
+import org.eclipse.swt.widgets.Text;
+import org.vafada.swtcalendar.SWTCalendarEvent;
+import org.vafada.swtcalendar.SWTCalendarListener;
+
+import com.cloudgarden.resource.SWTResourceManager;
+
+import de.hsharz.provirent.Util;
+import de.hsharz.provirent.objects.Customer;
+import de.hsharz.provirent.persistence.DataBaseException;
+import de.hsharz.provirent.persistence.Database;
+
+/**
+* This code was generated using CloudGarden's Jigloo
+* SWT/Swing GUI Builder, which is free for non-commercial
+* use. If Jigloo is being used commercially (ie, by a corporation,
+* company or business for any purpose whatever) then you
+* should purchase a license for each developer using Jigloo.
+* Please visit www.cloudgarden.com for details.
+* Use of Jigloo implies acceptance of these licensing terms.
+* *************************************
+* A COMMERCIAL LICENSE HAS NOT BEEN PURCHASED
+* for this machine, so Jigloo or this code cannot be used legally
+* for any corporate or commercial purpose.
+* *************************************
+*/
+public class CompositeCustomer extends AbstractComposite{
+
+    {
+        //Register as a resource user - SWTResourceManager will
+        //handle the obtaining and disposing of resources
+        SWTResourceManager.registerResourceUser(this);
+    }
+
+
+    /**
+     * Logger for this class
+     */
+    private static final Logger logger = Logger
+            .getLogger(CompositeCustomer.class);
+    
+    
+    private final static int MODE_VIEW = 0;
+
+    private final static int MODE_ADD = 1;
+    
+    private SashForm sashForm1;
+    private SashForm sashFormCustomer;
+    
+    private Composite parent;
+    private Composite compositeButtons;
+    private Button changeStartDateButton;
+
+    private Group groupCustomer;
+
+    private Group groupCustomerOverview;
+
+    private Group groupCustomerDetail;
+
+    private Label labelCustomerId;   
+    private Label labelCustomerName;
+    private Label labelduration1;
+    private Label labelduration2;
+    private Label labelduration3;
+    private Label labelstartdate;
+    
+    private Text textCustomerID;
+    private Text textCustomerName;
+    private Text textduration1;
+    private Text textduration2;
+    private Text textduration3;
+    private Text textstartdate;
+    
+    private Text textCustomerSearch;
+    private Label labelCustomerSearch;
+    
+    private Button buttonCustomerCancel;
+    private Button buttonCustomerSave;
+    private Button buttonCustomerFill;
+    private Button buttonCustomerDelete;
+    private Button buttonCustomerEdit;
+    private Button buttonCustomerNew;
+           
+    private Table tableCustomer;
+    private TableColumn tableColumn;
+
+    Hashtable list = null;
+
+    private final static int MODE_EDIT = 2;
+    
+    private StatusLineStyledText statusLine;
+
+    private ResourceBundle l;
+    
+    protected int mode_Customer;
+
+
+    private Label labelUserName;
+
+
+    private Text textUserName;
+
+
+    private Label labelLastName;
+
+
+    private Text textLastName;
+
+
+    private Label labelFirstName;
+
+
+    private Text textFirstName;
+
+
+    private Label labelMiddleName;
+
+
+    private Text textMiddleName;
+
+
+    private Label labelPassword;
+
+
+    private Text textPassword;
+
+
+    private Label labelRegistrationDate;
+
+
+    private Text textRegistrationDate;
+
+
+    private Button changeRegistrationDateButton;
+
+
+    private Label labelBirthday;
+
+
+    private Text textBirthday;
+
+
+    private Label labelSalutation;
+
+
+    private Text textSalutation;
+
+
+    private Label labelTitle;
+
+
+    private Text textTitle;
+
+
+    private Label labelStreet;
+
+
+    private Text textStreet;
+
+
+    private Label labelNumber;
+
+
+    private Text textNumber;
+
+
+    private Label labelZipCode;
+
+
+    private Text textZipCode;
+
+
+    private Label labelCountry;
+
+
+    private Text textCountry;
+
+
+    private Label labelCityr;
+
+
+    private Label labelCity;
+
+
+    private Text textCity;
+
+
+    private Label labelEmail;
+
+
+    private Text textEmail;
+
+
+    private Label labelQuestion;
+
+
+    private Text textQuestion;
+
+
+    private Label labelAnswer;
+
+
+    private Text textAnswer;
+ 
+    /*
+     * ?ndert die Sprache aller Elemente
+     * 
+     * @see de.hsharz.provirent.managment.gui.AbstractComposite#changeLanguage(java.util.Locale)
+     */
+    public void changeLanguage(Locale locale) {
+
+    }
+
+    /* 
+     * Init die Sprache (properties Datei)
+     * @see de.hsharz.provirent.managment.gui.AbstractComposite#initLanguage(java.util.Locale)
+     */
+    public void initLanguage(Locale locale) {
+
+        l = PropertyResourceBundle.getBundle(
+                "de.hsharz.provirent.management.gui.language.Customer", locale);
+
+    }
+    
+    
+	/**
+	* Auto-generated main method to display this 
+	* org.eclipse.swt.widgets.Composite inside a new Shell.
+	*/
+	public static void main(String[] args) {
+		showGUI();
+	}
+		
+	/**
+	* Auto-generated method to display this 
+	* org.eclipse.swt.widgets.Composite inside a new Shell.
+	*/
+	public static void showGUI() {
+		Display display = Display.getDefault();
+		Shell shell = new Shell(display);
+
+		shell.open();
+		while (!shell.isDisposed()) {
+			if (!display.readAndDispatch())
+				display.sleep();
+		}
+	}
+
+	public CompositeCustomer(Composite p, int style,
+            StatusLineStyledText status, Locale l) {
+	    super(p, style, status, l);
+        parent = p;
+        //Statusline wird gestzt
+        statusLine = status;
+        
+        //sprache wird init
+        initLanguage(l);
+	    
+	    
+		initGUI();
+	}
+
+	private void initGUI() {
+	    if (logger.isDebugEnabled()) {
+            logger.debug("initGUI() - start");
+        }
+
+        this.setLayout(new GridLayout());
+        this.setSize(816, 540);
+        {
+            sashForm1 = new SashForm(this, SWT.VERTICAL | SWT.V_SCROLL);
+            GridData sashForm1LData1 = new GridData();
+            sashForm1LData1.grabExcessHorizontalSpace = true;
+            sashForm1LData1.horizontalAlignment = GridData.FILL;
+            sashForm1LData1.grabExcessVerticalSpace = true;
+            sashForm1LData1.verticalAlignment = GridData.FILL;
+            sashForm1.setLayoutData(sashForm1LData1);
+
+            initCustomerGroup();
+            try {
+                refreshCustomerTable(textCustomerSearch.getText());
+            } catch (DataBaseException e) {
+                // TODO Auto-generated catch block
+                e.printStackTrace();
+            }
+
+        }
+        this.layout();
+
+        if (logger.isDebugEnabled()) {
+            logger.debug("initGUI() - end");
+        }
+    } 
+	
+	/**
+     * 
+     */
+    private void initCustomerGroup() {
+        {
+            //init a group for the Customer
+            groupCustomer = new Group(sashForm1, SWT.NONE);
+            GridLayout group2Layout = new GridLayout();
+            group2Layout.makeColumnsEqualWidth = true;
+            groupCustomer.setText(l.getString("Customer.group.label"));
+            groupCustomer.setSize(758, 284);
+            FormData group2LData = new FormData();
+            groupCustomer.addFocusListener(new FocusAdapter() {
+                public void focusLost(FocusEvent evt) {
+                    System.out.println("groupCustomer.focusLost, event="
+                        + evt);
+                    buttonCustomerCancel.setEnabled(false);
+                    buttonCustomerDelete.setEnabled(false);
+                    buttonCustomerEdit.setEnabled(false);
+                    buttonCustomerNew.setEnabled(false);
+                    buttonCustomerSave.setEnabled(false);
+                }
+            });
+            groupCustomer.setLayout(group2Layout);
+            groupCustomer.setLayoutData(group2LData);
+            {
+                sashFormCustomer = new SashForm(groupCustomer, SWT.NONE);
+                FormLayout sashForm2Layout = new FormLayout();
+                sashFormCustomer.setSize(748, 300);
+                GridData sashForm2LData = new GridData();
+                sashFormCustomer.setLayout(sashForm2Layout);
+                sashForm2LData.verticalAlignment = GridData.FILL;
+                sashForm2LData.horizontalAlignment = GridData.FILL;
+                sashForm2LData.grabExcessHorizontalSpace = true;
+                sashForm2LData.grabExcessVerticalSpace = true;
+                sashFormCustomer.setLayoutData(sashForm2LData);
+
+                //init die Gruppe f?r Customere ?berblick
+                initCustomerGroupOverview();
+                //init die Detailansicht
+                initCustomerGroupDetail();
+
+            }
+        }
+
+	}
+
+    /**
+     * 
+     */
+    private void initCustomerGroupDetail() {
+        groupCustomerDetail = new Group(sashFormCustomer, SWT.NONE);
+        GridLayout groupCustomerDetailLayout = new GridLayout();
+        groupCustomerDetailLayout.marginHeight = 25;
+        groupCustomerDetailLayout.numColumns = 6;
+        groupCustomerDetailLayout.verticalSpacing = 15;
+        groupCustomerDetail.setText(l
+                .getString("Customer.groupdetail.label"));
+        FormData formData = new FormData();
+        groupCustomerDetail.setLayout(groupCustomerDetailLayout);
+        formData.right = new FormAttachment(100, 100, -5);
+        formData.top = new FormAttachment(0, 100, 5);
+        formData.bottom = new FormAttachment(100, 100, -5);
+        groupCustomerDetail.setLayoutData(formData);
+        {
+            labelCustomerId = new Label(groupCustomerDetail, SWT.NONE);
+            labelCustomerId.setText(l
+                    .getString("Customer.groupdetail.idlabel")
+                    + ":");
+            labelCustomerId.setSize(125, 15);
+            GridData formData2 = new GridData();
+            formData2.widthHint = 125;
+            formData2.heightHint = 15;
+            formData2.horizontalSpan = 2;
+            labelCustomerId.setLayoutData(formData2);
+        }        
+        {
+            textCustomerID = new Text(groupCustomerDetail, SWT.READ_ONLY
+                    | SWT.BORDER);
+            GridData text1LData1 = new GridData();
+            text1LData1.horizontalAlignment = GridData.FILL;
+            text1LData1.heightHint = 13;
+            text1LData1.horizontalSpan = 4;
+            text1LData1.grabExcessHorizontalSpace = true;
+            textCustomerID.setLayoutData(text1LData1);
+        }
+        {
+            labelUserName = new Label(groupCustomerDetail, SWT.NONE);
+            labelUserName.setText(l
+                    .getString("Customer.groupdetail.usernamelabel")
+                    + ":");
+            labelUserName.setSize(125, 15);
+            GridData formData2 = new GridData();
+            formData2.widthHint = 125;
+            formData2.heightHint = 15;
+            formData2.horizontalSpan = 2;
+            labelUserName.setLayoutData(formData2);
+        }
+        {
+            textUserName = new Text(groupCustomerDetail, SWT.READ_ONLY
+                    | SWT.BORDER);
+            GridData text1LData1 = new GridData();
+            text1LData1.horizontalAlignment = GridData.FILL;
+            text1LData1.heightHint = 13;
+            text1LData1.horizontalSpan = 4;
+            text1LData1.grabExcessHorizontalSpace = true;
+            textUserName.setLayoutData(text1LData1);
+        }
+        {
+            labelLastName = new Label(groupCustomerDetail, SWT.NONE);
+            labelLastName.setText(l
+                    .getString("Customer.groupdetail.lastnamelabel")
+                    + ":");
+            labelLastName.setSize(125, 15);
+            GridData labelLastNameLData = new GridData();
+            labelLastNameLData.widthHint = 125;
+            labelLastNameLData.heightHint = 15;
+            labelLastNameLData.horizontalSpan = 2;
+            labelLastName.setLayoutData(labelLastNameLData);
+        }
+        {
+            textLastName = new Text(groupCustomerDetail,
+                    SWT.READ_ONLY | SWT.BORDER);
+            GridData text1LData2 = new GridData();
+            text1LData2.horizontalAlignment = GridData.FILL;
+            text1LData2.heightHint = 13;
+            text1LData2.horizontalSpan = 4;
+            text1LData2.grabExcessHorizontalSpace = true;
+            textLastName.setLayoutData(text1LData2);
+        }
+        {
+            labelFirstName = new Label(groupCustomerDetail,
+                    SWT.NONE);
+            labelFirstName.setText(l
+                    .getString("Customer.groupdetail.firstnamelabel")
+                    + ":");
+            labelFirstName.setSize(125, 15);
+            GridData label2LData1 = new GridData();
+            label2LData1.widthHint = 125;
+            label2LData1.heightHint = 15;
+            label2LData1.horizontalSpan = 2;
+            labelFirstName.setLayoutData(label2LData1);
+        }
+        {
+            textFirstName = new Text(groupCustomerDetail,
+                    SWT.READ_ONLY | SWT.BORDER);
+            GridData text1LData3 = new GridData();
+            text1LData3.horizontalAlignment = GridData.FILL;
+            text1LData3.heightHint = 13;
+            text1LData3.horizontalSpan = 4;
+            text1LData3.grabExcessHorizontalSpace = true;
+            textFirstName.setLayoutData(text1LData3);
+        }
+        {
+            labelMiddleName = new Label(groupCustomerDetail,
+                    SWT.NONE);
+            labelMiddleName.setText(l
+                    .getString("Customer.groupdetail.middlenamelabel")
+                    + ":");
+            labelMiddleName.setSize(125, 15);
+            GridData label1LData1 = new GridData();
+            label1LData1.widthHint = 125;
+            label1LData1.heightHint = 15;
+            label1LData1.horizontalSpan = 2;
+            labelMiddleName.setLayoutData(label1LData1);
+        }
+        {
+            textMiddleName = new Text(groupCustomerDetail,
+                    SWT.READ_ONLY | SWT.BORDER);
+            GridData text1LData3 = new GridData();
+            text1LData3.horizontalAlignment = GridData.FILL;
+            text1LData3.heightHint = 13;
+            text1LData3.horizontalSpan = 4;
+            text1LData3.grabExcessHorizontalSpace = true;
+            textMiddleName.setLayoutData(text1LData3);
+        }
+        {
+            labelSalutation = new Label(groupCustomerDetail,
+                    SWT.NONE);
+            labelSalutation.setText(l
+                    .getString("Customer.groupdetail.salutationlabel")
+                    + ":");
+            labelSalutation.setSize(125, 15);
+            GridData label1LData1 = new GridData();
+            label1LData1.widthHint = 125;
+            label1LData1.heightHint = 15;
+            label1LData1.horizontalSpan = 2;
+            labelSalutation.setLayoutData(label1LData1);
+        }
+        {
+            textSalutation = new Text(groupCustomerDetail,
+                    SWT.READ_ONLY | SWT.BORDER);
+            GridData text1LData3 = new GridData();
+            text1LData3.horizontalAlignment = GridData.FILL;
+            text1LData3.heightHint = 13;
+            text1LData3.horizontalSpan = 4;
+            text1LData3.grabExcessHorizontalSpace = true;
+            textSalutation.setLayoutData(text1LData3);
+        }
+        {
+            labelTitle = new Label(groupCustomerDetail,
+                    SWT.NONE);
+            labelTitle.setText(l
+                    .getString("Customer.groupdetail.titlelabel")
+                    + ":");
+            labelTitle.setSize(125, 15);
+            GridData label1LData1 = new GridData();
+            label1LData1.widthHint = 125;
+            label1LData1.heightHint = 15;
+            label1LData1.horizontalSpan = 2;
+            labelTitle.setLayoutData(label1LData1);
+        }
+        {
+            textTitle = new Text(groupCustomerDetail,
+                    SWT.READ_ONLY | SWT.BORDER);
+            GridData text1LData3 = new GridData();
+            text1LData3.horizontalAlignment = GridData.FILL;
+            text1LData3.heightHint = 13;
+            text1LData3.horizontalSpan = 4;
+            text1LData3.grabExcessHorizontalSpace = true;
+            textTitle.setLayoutData(text1LData3);
+        }
+        {
+            labelStreet = new Label(groupCustomerDetail,
+                    SWT.NONE);
+            labelStreet.setText(l
+                    .getString("Customer.groupdetail.streetlabel")
+                    + ":");
+            labelStreet.setSize(125, 15);
+            GridData label1LData1 = new GridData();
+            label1LData1.widthHint = 125;
+            label1LData1.heightHint = 15;
+            label1LData1.horizontalSpan = 2;
+            labelStreet.setLayoutData(label1LData1);
+        }
+        {
+            textStreet = new Text(groupCustomerDetail,
+                    SWT.READ_ONLY | SWT.BORDER);
+            GridData text1LData3 = new GridData();
+            text1LData3.horizontalAlignment = GridData.FILL;
+            text1LData3.heightHint = 13;
+            text1LData3.horizontalSpan = 4;
+            text1LData3.grabExcessHorizontalSpace = true;
+            textStreet.setLayoutData(text1LData3);
+        }
+        {
+            labelNumber = new Label(groupCustomerDetail,
+                    SWT.NONE);
+            labelNumber.setText(l
+                    .getString("Customer.groupdetail.numberlabel")
+                    + ":");
+            labelNumber.setSize(125, 15);
+            GridData label1LData1 = new GridData();
+            label1LData1.widthHint = 125;
+            label1LData1.heightHint = 15;
+            label1LData1.horizontalSpan = 2;
+            labelNumber.setLayoutData(label1LData1);
+        }
+        {
+            textNumber = new Text(groupCustomerDetail,
+                    SWT.READ_ONLY | SWT.BORDER);
+            GridData text1LData3 = new GridData();
+            text1LData3.horizontalAlignment = GridData.FILL;
+            text1LData3.heightHint = 13;
+            text1LData3.horizontalSpan = 4;
+            text1LData3.grabExcessHorizontalSpace = true;
+            textNumber.setLayoutData(text1LData3);
+        }
+        {
+            labelCity = new Label(groupCustomerDetail,
+                    SWT.NONE);
+            labelCity.setText(l
+                    .getString("Customer.groupdetail.citylabel")
+                    + ":");
+            labelCity.setSize(125, 15);
+            GridData label1LData1 = new GridData();
+            label1LData1.widthHint = 125;
+            label1LData1.heightHint = 15;
+            label1LData1.horizontalSpan = 2;
+            labelCity.setLayoutData(label1LData1);
+        }
+        {
+            textCity = new Text(groupCustomerDetail,
+                    SWT.READ_ONLY | SWT.BORDER);
+            GridData text1LData3 = new GridData();
+            text1LData3.horizontalAlignment = GridData.FILL;
+            text1LData3.heightHint = 13;
+            text1LData3.horizontalSpan = 4;
+            text1LData3.grabExcessHorizontalSpace = true;
+            textCity.setLayoutData(text1LData3);
+        }
+        {
+            labelZipCode = new Label(groupCustomerDetail,
+                    SWT.NONE);
+            labelZipCode.setText(l
+                    .getString("Customer.groupdetail.zipcodelabel")
+                    + ":");
+            labelZipCode.setSize(125, 15);
+            GridData label1LData1 = new GridData();
+            label1LData1.widthHint = 125;
+            label1LData1.heightHint = 15;
+            label1LData1.horizontalSpan = 2;
+            labelZipCode.setLayoutData(label1LData1);
+        }
+        {
+            textZipCode = new Text(groupCustomerDetail,
+                    SWT.READ_ONLY | SWT.BORDER);
+            GridData text1LData3 = new GridData();
+            text1LData3.horizontalAlignment = GridData.FILL;
+            text1LData3.heightHint = 13;
+            text1LData3.horizontalSpan = 4;
+            text1LData3.grabExcessHorizontalSpace = true;
+            textZipCode.setLayoutData(text1LData3);
+        }
+        {
+            labelCountry = new Label(groupCustomerDetail,
+                    SWT.NONE);
+            labelCountry.setText(l
+                    .getString("Customer.groupdetail.countrylabel")
+                    + ":");
+            labelCountry.setSize(125, 15);
+            GridData label1LData1 = new GridData();
+            label1LData1.widthHint = 125;
+            label1LData1.heightHint = 15;
+            label1LData1.horizontalSpan = 2;
+            labelCountry.setLayoutData(label1LData1);
+        }
+        {
+            textCountry = new Text(groupCustomerDetail,
+                    SWT.READ_ONLY | SWT.BORDER);
+            GridData text1LData3 = new GridData();
+            text1LData3.horizontalAlignment = GridData.FILL;
+            text1LData3.heightHint = 13;
+            text1LData3.horizontalSpan = 4;
+            text1LData3.grabExcessHorizontalSpace = true;
+            textCountry.setLayoutData(text1LData3);
+        }
+        {
+            labelPassword = new Label(groupCustomerDetail,
+                    SWT.NONE);
+            labelPassword.setText(l
+                    .getString("Customer.groupdetail.passwordlabel")
+                    + ":");
+            labelPassword.setSize(125, 15);
+            GridData label1LData1 = new GridData();
+            label1LData1.widthHint = 125;
+            label1LData1.heightHint = 15;
+            label1LData1.horizontalSpan = 2;
+            labelPassword.setLayoutData(label1LData1);
+        }
+        {
+            textPassword = new Text(groupCustomerDetail,
+                    SWT.READ_ONLY | SWT.BORDER);
+            GridData text1LData3 = new GridData();
+            text1LData3.horizontalAlignment = GridData.FILL;
+            text1LData3.heightHint = 13;
+            text1LData3.horizontalSpan = 3;
+            text1LData3.grabExcessHorizontalSpace = true;
+            textPassword.setLayoutData(text1LData3);
+        }
+        {
+            labelEmail = new Label(groupCustomerDetail,
+                    SWT.NONE);
+            labelEmail.setText(l
+                    .getString("Customer.groupdetail.emaillabel")
+                    + ":");
+            labelEmail.setSize(125, 15);
+            GridData label1LData1 = new GridData();
+            label1LData1.widthHint = 125;
+            label1LData1.heightHint = 15;
+            label1LData1.horizontalSpan = 2;
+            labelEmail.setLayoutData(label1LData1);
+        }
+        {
+            textEmail = new Text(groupCustomerDetail,
+                    SWT.READ_ONLY | SWT.BORDER);
+            GridData text1LData3 = new GridData();
+            text1LData3.horizontalAlignment = GridData.FILL;
+            text1LData3.heightHint = 13;
+            text1LData3.horizontalSpan = 3;
+            text1LData3.grabExcessHorizontalSpace = true;
+            textEmail.setLayoutData(text1LData3);
+        }
+        {
+            labelQuestion = new Label(groupCustomerDetail,
+                    SWT.NONE);
+            labelQuestion.setText(l
+                    .getString("Customer.groupdetail.questionlabel")
+                    + ":");
+            labelQuestion.setSize(125, 15);
+            GridData label1LData1 = new GridData();
+            label1LData1.widthHint = 125;
+            label1LData1.heightHint = 15;
+            label1LData1.horizontalSpan = 2;
+            labelQuestion.setLayoutData(label1LData1);
+        }
+        {
+            textQuestion = new Text(groupCustomerDetail,
+                    SWT.READ_ONLY | SWT.BORDER);
+            GridData text1LData3 = new GridData();
+            text1LData3.horizontalAlignment = GridData.FILL;
+            text1LData3.heightHint = 13;
+            text1LData3.horizontalSpan = 3;
+            text1LData3.grabExcessHorizontalSpace = true;
+            textQuestion.setLayoutData(text1LData3);
+        }
+        {
+            labelAnswer = new Label(groupCustomerDetail,
+                    SWT.NONE);
+            labelAnswer.setText(l
+                    .getString("Customer.groupdetail.answerlabel")
+                    + ":");
+            labelAnswer.setSize(125, 15);
+            GridData label1LData1 = new GridData();
+            label1LData1.widthHint = 125;
+            label1LData1.heightHint = 15;
+            label1LData1.horizontalSpan = 2;
+            labelAnswer.setLayoutData(label1LData1);
+        }
+        {
+            textAnswer = new Text(groupCustomerDetail,
+                    SWT.READ_ONLY | SWT.BORDER);
+            GridData text1LData3 = new GridData();
+            text1LData3.horizontalAlignment = GridData.FILL;
+            text1LData3.heightHint = 13;
+            text1LData3.horizontalSpan = 3;
+            text1LData3.grabExcessHorizontalSpace = true;
+            textAnswer.setLayoutData(text1LData3);
+        }
+        {
+            labelBirthday = new Label(groupCustomerDetail,
+                    SWT.NONE);
+            labelBirthday.setText(l
+                    .getString("Customer.groupdetail.birthdaylabel")
+                    + ":");
+            labelBirthday.setSize(125, 15);
+            GridData label1LData1 = new GridData();
+            label1LData1.widthHint = 125;
+            label1LData1.heightHint = 15;
+            label1LData1.horizontalSpan = 2;
+            labelBirthday.setLayoutData(label1LData1);
+        }
+        {
+            textBirthday = new Text(groupCustomerDetail,
+                    SWT.READ_ONLY | SWT.BORDER);
+            GridData text1LData3 = new GridData();
+            text1LData3.horizontalAlignment = GridData.FILL;
+            text1LData3.heightHint = 13;
+            text1LData3.horizontalSpan = 3;
+            text1LData3.grabExcessHorizontalSpace = true;
+            textBirthday.setLayoutData(text1LData3);
+            textBirthday.setEnabled(false);
+        }
+        {
+            textRegistrationDate = new Text(groupCustomerDetail,
+                    SWT.READ_ONLY | SWT.BORDER);
+            GridData text1LData3 = new GridData();
+            text1LData3.horizontalAlignment = GridData.FILL;
+            text1LData3.heightHint = 13;
+            text1LData3.horizontalSpan = 3;
+            text1LData3.grabExcessHorizontalSpace = true;
+            textRegistrationDate.setLayoutData(text1LData3);
+            textRegistrationDate.setEnabled(false);
+        }
+        {
+            changeRegistrationDateButton = new Button(groupCustomerDetail, SWT.PUSH
+                | SWT.CENTER);
+            changeRegistrationDateButton.setText(l.getString("Customer.groupdetail.registrationdatebuttonchange"));
+            GridData text1LData3 = new GridData();
+            changeRegistrationDateButton.setEnabled(false);
+            changeRegistrationDateButton.addSelectionListener(new SelectionAdapter() {
+                public void widgetSelected(SelectionEvent evt) {
+
+                    final SWTCalendarDialog cal = new SWTCalendarDialog(getDisplay(),l.getString("Customer.groupdetail.registrationdatebuttonfinish"));
+
+                    cal.addDateChangedListener(new SWTCalendarListener() {
+
+                        public void dateChanged(SWTCalendarEvent calendarEvent) {
+
+                            textRegistrationDate.setText( DateFormat.getDateInstance(DateFormat.LONG).format(calendarEvent.getCalendar().getTime()));
+
+                        }
+
+                    });
+
+
+
+                    if (textRegistrationDate.getText() != null && textRegistrationDate.getText().length() > 0) {
+
+                        try {
+                               cal.setDate(DateFormat.getDateInstance(DateFormat.LONG).parse(textRegistrationDate.getText()));
+
+                        } catch (ParseException pe) {
+
+
+
+                        }
+
+                    }
+
+                    cal.open();                    
+                    
+                    
+                }
+            });
+            text1LData3.horizontalAlignment = GridData.FILL;
+            
+            text1LData3.horizontalSpan = 1;
+            text1LData3.grabExcessHorizontalSpace = true;
+            changeRegistrationDateButton.setLayoutData(text1LData3);
+        }
+        /*{
+
+            //die Buttons bekommen ein eigenes Composite
+            compositeButtons = new Composite(groupCustomerDetail, SWT.EMBEDDED);
+            GridLayout composite2Layout = new GridLayout();
+            composite2Layout.numColumns = 6;
+            GridData composite2LData = new GridData();
+            compositeButtons.setLayout(composite2Layout);
+            composite2LData.verticalAlignment = GridData.END;
+            composite2LData.horizontalAlignment = GridData.CENTER;
+            composite2LData.widthHint = 391;
+            composite2LData.horizontalSpan = 6;
+            composite2LData.grabExcessHorizontalSpace = true;
+            composite2LData.grabExcessVerticalSpace = true;
+            composite2LData.heightHint = 35;
+            compositeButtons.setLayoutData(composite2LData);
+
+            //init all the Buttons
+            initCustomerDetailButtons();
+
+        }*/
+
+        
+    }
+
+    /**
+     * 
+     */
+    /*private void initCustomerDetailButtons() {
+        buttonCustomerNew = new Button(compositeButtons, SWT.PUSH | SWT.CENTER);
+        buttonCustomerNew.setText(l.getString("button.new"));
+        buttonCustomerNew.addSelectionListener(new SelectionAdapter() {
+            
+
+            public void widgetSelected(SelectionEvent evt) {
+
+                textCustomerID.setText("");
+                textCustomerName.setText("");
+                textduration1.setText("");
+                textduration2.setText("");
+                textduration3.setText("");
+                textstartdate.setText("");
+
+                textCustomerName.setEditable(true);
+                textduration1.setEditable(true);
+                textduration2.setEditable(true);
+                textduration3.setEditable(true);
+                //textstartdate.setEditable(true);
+                changeStartDateButton.setEnabled(true);
+                
+                
+                buttonCustomerCancel.setEnabled(true);
+                buttonCustomerSave.setEnabled(true);
+                buttonCustomerNew.setEnabled(false);
+                buttonCustomerEdit.setEnabled(false);
+                buttonCustomerDelete.setEnabled(false);
+                
+                
+                textCustomerSearch.setEditable(false);
+                tableCustomer.setEnabled(false);
+
+                mode_Customer = ManagementGui.MODE_ADD;
+
+            }
+        });
+
+        buttonCustomerEdit = new Button(compositeButtons, SWT.PUSH | SWT.CENTER);
+        buttonCustomerEdit.setText(l.getString("button.edit"));
+        buttonCustomerEdit.setEnabled(false);
+        buttonCustomerEdit.addSelectionListener(new SelectionAdapter() {
+            public void widgetSelected(SelectionEvent evt) {
+
+                mode_Customer = ManagementGui.MODE_EDIT;
+
+                textCustomerID.setEditable(false);
+                textCustomerName.setEditable(true);
+                textduration1.setEditable(true);
+                textduration2.setEditable(true);                
+                textduration3.setEditable(true);
+                //textstartdate.setEditable(true);
+                changeStartDateButton.setEnabled(true);
+                
+                textduration1.setFocus();
+                
+                buttonCustomerCancel.setEnabled(true);
+                buttonCustomerSave.setEnabled(true);
+                buttonCustomerNew.setEnabled(false);
+                buttonCustomerEdit.setEnabled(false);
+                buttonCustomerDelete.setEnabled(false);
+
+
+                tableCustomer.setEnabled(false);
+                textCustomerSearch.setEnabled(false);
+                
+
+            }
+        });
+
+        buttonCustomerDelete = new Button(compositeButtons, SWT.PUSH | SWT.CENTER);
+        buttonCustomerDelete.setText(l.getString("button.delete"));
+        buttonCustomerDelete.setEnabled(false);
+        buttonCustomerDelete.addSelectionListener(new SelectionAdapter() {
+            public void widgetSelected(SelectionEvent evt) {
+                System.out
+                        .println("buttonCustomerDelete.widgetSelected, event="
+                                + evt);
+                
+                
+               String msg = MessageFormat.format(
+                       l.getString("Customer.groupdetail.deletebutton.question.text"),
+                               new Object[]{textCustomerName.getText() + " " + 
+                               				textduration1.getText() + " " + 
+                               				textduration2.getText() + " " + 
+                               				textduration3.getText() + " " +
+                               				textstartdate.getText()});
+                
+               int question = showMsg(msg,
+                       l.getString("Customer.groupdetail.deletebutton.question.header"), 
+                       SWT.ICON_QUESTION | SWT.YES | SWT.NO);
+               
+               if (question != SWT.YES){
+                   return;
+               }
+                try {
+	                Customer o = new Customer();
+	                o.setCustomerId(new Integer(Integer.parseInt(textCustomerID.getText())));
+	                o.setUserName(textCustomerName.getText());
+	                o.setDuration1(Float.parseFloat(textduration1.getText()));
+	                o.setDuration2(Float.parseFloat(textduration2.getText()));
+	                o.setDuration3(Float.parseFloat(textduration3.getText()));                
+	                o.setStartdate(Util.getDateByText(textstartdate.getText()));
+
+                    //object speichern
+                    // Fehlerbehandlung
+                    Database.deleteObject(o);
+
+                    //?bersichtsTabelle aktualisieren
+                    refreshCustomerTable(textCustomerSearch.getText());
+                    
+                    //Detailansicht leeren
+                    textCustomerID.setText("");
+                    textCustomerName.setText("");
+                    textduration1.setText("");
+                    textduration2.setText("");
+                    textduration3.setText("");
+                    textstartdate.setText("");
+                    buttonCustomerEdit.setEnabled(false);
+                    buttonCustomerDelete.setEnabled(false);
+                    //in Tabelle n?chsten ausw?hlen
+                    try {
+                        tableCustomer.deselectAll();
+                    } catch (Exception ex) {}
+                    
+                    //Statusline Nachricht sezten
+                    statusLine.setStatus(1,l.getString("Customer.groupdetail.deletebutton.newok"));
+
+                } catch (DataBaseException e) {
+                    if (e.getMessage().equalsIgnoreCase("1")) {
+                        //Fehler beim Speichern des Objectes
+
+                        statusLine.setStatus(3,l.getString("Customer.groupdetail.deletebutton.errorsave"));
+                        showMsg(l.getString("Customer.groupdetail.deletebutton.errorsave"),
+                                l.getString("error"), SWT.ICON_ERROR | SWT.OK);
+                        
+                    } else if (e.getMessage().equalsIgnoreCase("2")) {
+                        //fehler beim db aufbau
+                        statusLine.setStatus(3,l.getString("Customer.groupdetail.deletebutton.errordb"));
+                        showMsg(l.getString("Customer.groupdetail.deletebutton.errordb"),
+                                l.getString("error"), SWT.ICON_ERROR | SWT.OK);
+                        
+                    } else {
+                        //@todo
+                        e.printStackTrace();
+                    }
+                    
+                }                
+                
+
+                }
+
+            }
+        );
+
+        //leerer nicht sichtbarer Button
+        buttonCustomerFill = new Button(compositeButtons, SWT.PUSH | SWT.CENTER);
+        GridData buttonCustomerFillLData = new GridData();
+        buttonCustomerFill.setVisible(false);
+        buttonCustomerFill.setEnabled(false);
+        buttonCustomerFillLData.widthHint = 30;
+        buttonCustomerFillLData.heightHint = 23;
+        buttonCustomerFill.setLayoutData(buttonCustomerFillLData);
+
+        buttonCustomerSave = new Button(compositeButtons, SWT.PUSH | SWT.CENTER);
+        buttonCustomerSave.setText(l.getString("button.save"));
+        buttonCustomerSave.setEnabled(false);
+        buttonCustomerSave.addSelectionListener(new SelectionAdapter() {
+            public void widgetSelected(SelectionEvent evt) {
+    
+                //testen ob duration leer ist
+                if (   textCustomerName.getText().trim().equalsIgnoreCase("") ||
+                       textduration1.getText().trim().equalsIgnoreCase("") || 
+                       textduration2.getText().trim().equalsIgnoreCase("") || 
+                       textduration3.getText().trim().equalsIgnoreCase("") ||
+                       textstartdate.getText().trim().equalsIgnoreCase("")) {
+                    
+                    showMsg(l.getString("Customer.groupdetail.savebutton.warn.noname.msg"),
+                            l.getString("Customer.groupdetail.savebutton.warn.noname.title"),
+                            SWT.ICON_WARNING | SWT.YES);
+
+                    	return;
+                }
+                
+                buttonCustomerEdit.setEnabled(false);
+                buttonCustomerDelete.setEnabled(false);
+                
+                //testen welcher mode
+                
+                if (mode_Customer == ManagementGui.MODE_ADD) {
+                    
+                    /**
+                     * @todo eine Exception bekommen wieder leider NOCH nicht mit
+                     * d.h. es muss noch ein r?ckgabewert kommen oder eine Exception 
+                     * ?bermitteln werden (aus der DB Klasse)
+                     /
+	                    
+                    try {	
+                        
+                        Calendar tmp_cal = Calendar.getInstance();
+                        tmp_cal.setTime(DateFormat.getDateInstance(DateFormat.LONG).parse(textstartdate.getText()));
+                    	//neues Objekt erzeugen
+	                    Customer tmp = new Customer(textCustomerName.getText(), 
+                            			Float.parseFloat(textduration1.getText()),
+                            			Float.parseFloat(textduration2.getText()), 
+                            			Float.parseFloat(textduration3.getText()),
+                            			tmp_cal);
+                                        
+                        //object speichern
+                        // Fehlerbehandlung
+                        Object o = Database.saveObject(tmp);
+                        
+                        // in ?bersichtstabelle einf?gen
+                        insertIntoCustomerTable((Customer)o);                        
+                                                
+                        //Statusline Nachricht sezten
+                        statusLine.setStatus(1,l.getString("Customer.groupdetail.savebutton.newok"));
+
+                    } catch (DataBaseException e) {
+                        if (e.getMessage().equalsIgnoreCase("1")) {
+                            //Fehler beim Speichern des Objectes
+
+                            statusLine.setStatus(3,l.getString("Customer.groupdetail.savebutton.errorsave"));
+                            showMsg(l.getString("Customer.groupdetail.savebutton.errorsave"),"Fehler", SWT.ICON_ERROR | SWT.OK);
+                            
+                        } else if (e.getMessage().equalsIgnoreCase("2")) {
+                            //fehler beim db aufbau
+                            statusLine.setStatus(3,l.getString("Customer.groupdetail.savebutton.errordb"));
+                            showMsg(l.getString("Customer.groupdetail.savebutton.errordb"),"Fehler", SWT.ICON_ERROR | SWT.OK);
+                            
+                        } else {
+                            //@todo
+                            e.printStackTrace();
+                        }
+                        
+                    } catch (ParseException pex){
+                        statusLine.setStatus(3,l.getString("Customer.groupdetail.savebutton.errorsave"));
+                        showMsg(l.getString("Customer.groupdetail.savebutton.errorsave"),"Fehler", SWT.ICON_ERROR | SWT.OK);
+                        
+                    }
+                    
+                    
+//                  alle Buttons auf aktiv setzen
+                    setCustomerGroupButtonSaveCancel();
+                    buttonCustomerDelete.setEnabled(false);
+                    buttonCustomerEdit.setEnabled(false);
+                    
+                } else if (mode_Customer == ManagementGui.MODE_EDIT) {
+                    try {
+                        
+                        Calendar tmp_cal = Calendar.getInstance();
+                        tmp_cal.setTime(DateFormat.getDateInstance(DateFormat.LONG).parse(textstartdate.getText()));
+                        
+	                    Customer tmp = new Customer(textCustomerName.getText(), 
+	                            Float.parseFloat(textduration1.getText()),
+	                            Float.parseFloat(textduration2.getText()), 
+	                            Float.parseFloat(textduration3.getText()),
+	                            tmp_cal);
+	                    tmp.setCustomerId(new Integer(Integer.parseInt(textCustomerID.getText())));
+	                
+	                    //object speichern
+	                    // Fehlerbehandlung
+	                    Database.saveObject(tmp);
+	                    //?bersichtstabelle aktualisieren
+	                    refreshCustomerTable(textCustomerSearch.getText());
+	                    
+	                    //Statusline Nachricht sezten
+	                    statusLine.setStatus(1,l.getString("Customer.groupdetail.savebutton.editok"));
+	                   
+	
+	                } catch (DataBaseException e) {
+	                    if (e.getMessage().equalsIgnoreCase("1")) {
+	                        //Fehler beim Speichern des Objectes
+	
+	                        statusLine.setStatus(3,l.getString("Customer.groupdetail.savebutton.errorsave"));
+	                        showMsg(l.getString("Customer.groupdetail.savebutton.errorsave"),"Fehler", SWT.ICON_ERROR | SWT.OK);
+	                        
+	                    } else if (e.getMessage().equalsIgnoreCase("2")) {
+	                        //fehler beim db aufbau
+	                        statusLine.setStatus(3,l.getString("Customer.groupdetail.savebutton.errordb"));
+	                        showMsg(l.getString("Customer.groupdetail.savebutton.errordb"),"Fehler", SWT.ICON_ERROR | SWT.OK);
+	                        
+	                    } else {
+	                        //@todo
+	                        e.printStackTrace();
+	                    }
+                    
+                    } catch (ParseException pex){
+                        statusLine.setStatus(3,l.getString("Customer.groupdetail.savebutton.errorsave"));
+                        showMsg(l.getString("Customer.groupdetail.savebutton.errorsave"),"Fehler", SWT.ICON_ERROR | SWT.OK);
+                        
+                    }
+                    
+                    //alle Buttons auf aktiv setzen
+                    setCustomerGroupButtonSaveCancel();
+                    buttonCustomerDelete.setEnabled(false);
+                    buttonCustomerEdit.setEnabled(false);
+                }
+                
+                
+                
+                /**
+                 * @todo Exception werfen, da nur die zwei Modes sein d?rfen
+                 /
+                
+            }
+        });
+
+        buttonCustomerCancel = new Button(compositeButtons, SWT.PUSH | SWT.CENTER);
+        buttonCustomerCancel.setText(l.getString("button.cancel"));
+        buttonCustomerCancel.setEnabled(false);
+        buttonCustomerCancel.addSelectionListener(new SelectionAdapter() {
+            public void widgetSelected(SelectionEvent evt) {
+                System.out
+                        .println("buttonCustomerCancel.widgetSelected, event="
+                                + evt);
+                setCustomerGroupButtonSaveCancel();
+            }
+        });
+       
+    }*/
+
+    /**
+     * 
+     */
+    /*protected void setCustomerGroupButtonSaveCancel() {
+        buttonCustomerSave.setEnabled(false);
+        buttonCustomerCancel.setEnabled(false);
+        buttonCustomerEdit.setEnabled(true);
+        buttonCustomerNew.setEnabled(true);
+        buttonCustomerDelete.setEnabled(true);
+        textCustomerName.setEditable(false);
+        textduration1.setEditable(false);
+        textduration2.setEditable(false);
+        textduration3.setEditable(false);
+        //textstartdate.setEditable(false);
+        changeStartDateButton.setEnabled(false);
+        textCustomerSearch.setEditable(true);
+
+        // CustomerTabelle aktivieren
+        tableCustomer.setEnabled(true);
+
+        //CustomerSearch aktivieren
+        textCustomerSearch.setEnabled(true);
+        
+    }*/
+
+    /**
+     * @param Customer
+     * @throws DataBaseException
+     */
+    protected void insertIntoCustomerTable(Customer Customer) throws DataBaseException {
+        TableItem item = new TableItem(tableCustomer, SWT.NONE);
+        Calendar regdate = Calendar.getInstance();
+        regdate.setTime(Customer.getDayOfRegistration());
+        item.setText(new String[] { Customer.getCustomerId() + "", 
+                					Customer.getUserName(), 
+                					Customer.getPerson().getLastName(),
+                					Customer.getPerson().getFirstName(),
+                					Util.getTextByDate(Customer.getPerson().getDayOfBirth()),
+                					Util.getTextByDate(regdate),              					
+                					});
+        
+        tableCustomer.deselectAll();
+        refreshCustomerDetail("");
+        
+        try {
+            refreshCustomerTable(textCustomerSearch.getText());
+        } catch (DataBaseException e) {
+            // TODO Auto-generated catch block
+            e.printStackTrace();
+        }
+    }
+
+    /**
+     * @param text
+     * @throws DataBaseException
+     */
+    protected void refreshCustomerTable(final String filter) throws DataBaseException {
+        if (tableCustomer == null) {
+            System.out
+                    .println("Konnte Customertable nicht refreshen, da diese null ist!");
+            return;
+        }
+        System.out.println("Versuche nun CustomerListe zu refreshen. Filter: "
+                + filter);
+        tableCustomer.removeAll();
+        TableItem item;
+        java.util.List Customerlist = Database.getCustomer(filter);
+        
+        for (int i = 0; i < Customerlist.size(); i++) {
+
+            Customer o = (Customer) Customerlist.get(i);
+            item = new TableItem(tableCustomer, SWT.NONE);
+            Calendar regdate = Calendar.getInstance();
+            regdate.setTime(o.getDayOfRegistration());
+            item.setText(new String[] { o.getCustomerId() + "", 
+                    					o.getUserName(), 
+                    					o.getPerson().getLastName(),
+                    					o.getPerson().getFirstName(),
+                    					Util.getTextByDate(o.getPerson().getDayOfBirth()),
+                    					Util.getTextByDate(regdate),              					
+                    					});
+
+        }
+
+        
+    }
+
+    /**
+     * 
+     */
+    private void initCustomerGroupOverview() {
+        if (logger.isDebugEnabled()) {
+            logger.debug("initCustomerGroupOverview() - start");
+        }
+
+        groupCustomerOverview = new Group(sashFormCustomer, SWT.NONE);
+        GridLayout group5Layout = new GridLayout();
+        group5Layout.numColumns = 8;
+        groupCustomerOverview.setText(l
+                .getString("Customer.groupoverview.label"));
+        FormData group5LData = new FormData();
+        groupCustomerOverview.setLayout(group5Layout);
+        group5LData.left = new FormAttachment(0, 100, 0);
+        group5LData.top = new FormAttachment(0, 100, 0);
+        groupCustomerOverview.setLayoutData(group5LData);
+
+        //Tabelle anzeigen
+        initTableCustomer();
+        //Suche darunter anzeigen
+        initCustomerSearch();
+
+        if (logger.isDebugEnabled()) {
+            logger.debug("initCustomerGroupOverview() - end");
+        }
+        
+    }
+
+    /**
+     * 
+     */
+    private void initCustomerSearch() {
+        if (logger.isDebugEnabled()) {
+            logger.debug("initCustomerSearch() - start");
+        }
+
+        //label f?r die Suche
+        labelCustomerSearch = new Label(groupCustomerOverview, SWT.NONE);
+        labelCustomerSearch.setText(l
+                .getString("Customer.groupoverview.searchlabel")
+                + ":");
+        GridData label2LData = new GridData();
+        label2LData.horizontalSpan = 3;
+        labelCustomerSearch.setLayoutData(label2LData);
+
+        //das Suchfeld
+        textCustomerSearch = new Text(groupCustomerOverview, SWT.BORDER);
+        GridData text2LData = new GridData();
+        textCustomerSearch.addFocusListener(new FocusAdapter() {
+            public void focusLost(FocusEvent evt) {
+                if (logger.isDebugEnabled()) {
+                    logger.debug("focusLost(FocusEvent evt = " + evt + " "
+                            + textCustomerSearch.getText() + ") - start");
+                }
+
+                try {
+                    refreshCustomerTable(textCustomerSearch.getText());
+                } catch (DataBaseException e) {
+                    // TODO Auto-generated catch block
+                    e.printStackTrace();
+                }
+
+                if (logger.isDebugEnabled()) {
+                    logger.debug("focusLost(FocusEvent) - end");
+                }
+            }
+        });
+
+        textCustomerSearch.addListener(SWT.DefaultSelection, new Listener() {
+            public void handleEvent(Event e) {
+                if (logger.isDebugEnabled()) {
+                    logger.debug("handleEvent(Event e = " + e + " "
+                            + textCustomerSearch.getText() + ") - start");
+                }
+
+                try {
+                    refreshCustomerTable(textCustomerSearch.getText());
+                } catch (DataBaseException e1) {
+                    // TODO Auto-generated catch block
+                    e1.printStackTrace();
+                }
+
+                if (logger.isDebugEnabled()) {
+                    logger.debug("handleEvent(Event) - end");
+                }
+            }
+        });
+
+        text2LData.horizontalAlignment = GridData.FILL;
+        text2LData.horizontalSpan = 5;
+        text2LData.grabExcessHorizontalSpace = true;
+        textCustomerSearch.setLayoutData(text2LData);
+
+
+
+        if (logger.isDebugEnabled()) {
+            logger.debug("initCustomerSearch() - end");
+        }
+        
+    }
+
+    /**
+     * 
+     */
+    private void initTableCustomer() {
+        if (logger.isDebugEnabled()) {
+            logger.debug("initTableCustomer() - start");
+        }
+
+        tableCustomer = new Table(groupCustomerOverview, SWT.SINGLE
+                | SWT.FULL_SELECTION | SWT.V_SCROLL | SWT.BORDER);
+        tableCustomer.setHeaderVisible(true);
+        tableCustomer.setLinesVisible(true);
+        GridData table2LData = new GridData();
+        tableCustomer.addFocusListener(new FocusAdapter() {
+            public void focusLost(FocusEvent evt) {
+                System.out.println("tableCustomer.focusLost, event=" + evt);
+            }
+            public void focusGained(FocusEvent evt) {
+                System.out
+                    .println("tableCustomer.focusGained, event=" + evt);
+            }
+        });
+        tableCustomer.addSelectionListener(new SelectionAdapter() {
+            public void widgetSelected(SelectionEvent evt) {
+                if (logger.isDebugEnabled()) {
+                    logger.debug("widgetSelected(SelectionEvent evt = "
+                        + evt
+                        + ") - start");
+                }
+
+                int index = tableCustomer.getSelectionIndex();
+
+                System.out.println("Table select. id: "
+                    + index
+                    + " TableItem:"
+                    + tableCustomer.getItem(index)
+                    + " id: "
+                    + tableCustomer.getItem(index).getText(0));
+
+                //es wurde ein Element aus Tabelle ausgewaehlt jetzt muss die
+                //Detailansicht aktualisiert werden
+                refreshCustomerDetail(tableCustomer.getItem(index)
+                    .getText(0));
+
+                if (logger.isDebugEnabled()) {
+                    logger.debug("widgetSelected(SelectionEvent) - end");
+                }
+            }
+        });
+        table2LData.verticalAlignment = GridData.FILL;
+        table2LData.horizontalAlignment = GridData.FILL;
+        table2LData.horizontalSpan = 8;
+        table2LData.grabExcessHorizontalSpace = true;
+        table2LData.grabExcessVerticalSpace = true;
+        tableCustomer.setLayoutData(table2LData);
+
+        //einzelne Spalten hinzuf?gen
+        tableColumn = new TableColumn(tableCustomer, SWT.CENTER);
+        tableColumn.setText(l.getString("Customer.groupoverview.columnid"));
+        tableColumn.setWidth(50);
+        
+        tableColumn = new TableColumn(tableCustomer, SWT.CENTER);
+        tableColumn.setText(l.getString("Customer.groupoverview.columnusername"));
+        tableColumn.setWidth(50);
+
+        tableColumn = new TableColumn(tableCustomer, SWT.CENTER);
+        tableColumn.setText(l.getString("Customer.groupoverview.columnlastname"));
+        tableColumn.setWidth(70);
+
+        tableColumn = new TableColumn(tableCustomer, SWT.CENTER);
+        tableColumn.setText(l.getString("Customer.groupoverview.columnfirstname"));
+        tableColumn.setWidth(70);
+        
+        tableColumn = new TableColumn(tableCustomer, SWT.CENTER);
+        tableColumn.setText(l.getString("Customer.groupoverview.columnbirthday"));
+        tableColumn.setWidth(70);
+        tableColumn = new TableColumn(tableCustomer, SWT.CENTER);
+        tableColumn.setText(l.getString("Customer.groupoverview.columnregdate"));
+        tableColumn.setWidth(70);
+
+        if (logger.isDebugEnabled()) {
+            logger.debug("initTableCustomer() - end");
+        }
+        
+    }
+
+    /**
+     * @param text
+     */
+    protected void refreshCustomerDetail(final String id) {
+        if (!id.equals("") && id != null) {
+	        Customer object;
+	        try {
+	            //since we only can get a String value from the table, we
+	            //need to convert this
+	            object = Database.getSingleCustomer(Integer.parseInt(id));
+	
+	            if (object == null) {
+	
+	                /*
+	                 * 
+	                 * @TODO Statusbar aktualiseren
+	                 */
+	                return;
+	            }
+	        } catch (Exception e) {
+	            //id ist keine Zahl
+	            return;
+	        }
+	
+	        textCustomerID.setText(object.getCustomerId() + "");
+	        textUserName.setText(object.getUserName());
+	        textLastName.setText(object.getPerson().getLastName());
+	        textFirstName.setText(object.getPerson().getFirstName());
+	        textMiddleName.setText(object.getPerson().getMiddleName());
+	        textSalutation.setText(object.getPerson().getSalutation());
+	        textTitle.setText(object.getPerson().getTitle());
+	        textStreet.setText(object.getPerson().getStreet());
+	        textNumber.setText(object.getPerson().getStreetNumber());
+	        textCity.setText(object.getPerson().getCity());
+	        textZipCode.setText(object.getPerson().getZipCode());
+	        textCountry.setText(object.getPerson().getCountry());
+	        textPassword.setText(object.getUserPassword());
+	        textEmail.setText(object.getPerson().getEmailAddress());
+	        textQuestion.setText(object.getHiddenQuestion());
+	        textAnswer.setText(object.getHiddenAnswer());
+	        Calendar regdate = Calendar.getInstance();
+	        regdate.setTime(object.getDayOfRegistration());
+	        try {
+                textBirthday.setText(Util.getTextByDate(object.getPerson().getDayOfBirth()));
+            } catch (DataBaseException e1) {
+                // TODO Auto-generated catch block
+                e1.printStackTrace();
+            }
+	        
+	        //Buttons zum l?schen und editieren aktivieren
+	        /*
+	        buttonCustomerEdit.setEnabled(false);
+	        buttonCustomerDelete.setEnabled(true);
+	        Vector vec = (Vector) list.get(object.getName());
+	        
+	        for (int i = 0; i < vec.size(); i++) {
+	            Calendar date = (Calendar) vec.get(i);
+	            try {
+	                if (Util.getTextByDate(date).equals(Util.getTextByDate(object.getStartdate()))) {
+	                    buttonCustomerEdit.setEnabled(true);
+	                    
+	                }
+	            } catch (DataBaseException e1) {
+	                // TODO Auto-generated catch block
+	                e1.printStackTrace();
+	            }
+	        }*/
+        } else {
+            textCustomerID.setText("");
+            textCustomerName.setText("");
+            textduration1.setText("");
+            textduration2.setText("");
+            textduration3.setText("");
+            textstartdate.setText("");
+            buttonCustomerEdit.setEnabled(false);
+            buttonCustomerDelete.setEnabled(false);
+        }
+
+        //Mode auf view setzen
+        mode_Customer = ManagementGui.MODE_VIEW;
+        
+    }
+
+	
+
+}

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java	2004-11-30 17:24:39 UTC (rev 181)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java	2004-11-30 17:26:42 UTC (rev 182)
@@ -47,6 +47,7 @@
 import de.hsharz.provirent.objects.Actor;
 import de.hsharz.provirent.objects.AudioFormat;
 import de.hsharz.provirent.objects.Condition;
+import de.hsharz.provirent.objects.Customer;
 import de.hsharz.provirent.objects.Director;
 import de.hsharz.provirent.objects.Genre;
 import de.hsharz.provirent.objects.Image;
@@ -1602,7 +1603,117 @@
 	    
 	
 	}
+	
+	/**
+	 * This method gets all Customers from the database
+	 * @param filter 
+	 * @return List of Customer objects, or an empty List
+	 */
+	public static List getCustomer(final String filter){
+	    if (logger.isDebugEnabled()) {
+	        logger.debug("getCustomer() - start. String filter= "+filter);
+	    }
+	    //init the returnlist
+	    List returnlist = new ArrayList();
+	
+	    Session s = null;
+	    
+	    try {
+	        //get new Session and begin Transaction
+	        s = HibernateUtil.currentSession();
+	            
+	            //init the criteria
+	            Criteria criteria = s.createCriteria(Customer.class);
+	            //any of the criteria 
+	            Disjunction any = Expression.disjunction();
 
+<<<<<<< .mine
+	            if (filter != null && !filter.equalsIgnoreCase("")) {
+	                any.add(Expression.like("userName", "%"+filter+"%"));
+	                any.add(Expression.like("dayOfRegistration", "%"+filter+"%"));
+	                any.add(Expression.like("duration2", "%"+filter+"%"));
+	                any.add(Expression.like("duration3", "%"+filter+"%"));
+	                any.add(Expression.like("startdate", "%"+filter+"%"));
+	                //maybe we are searching for the id?
+	                try {
+	                    any.add(Expression.eq("CustomerId", new Integer(Integer.parseInt(filter))));
+	                } catch (Exception e) {
+	                }
+	                
+	            }
+	            
+	            //add all criteria
+	            criteria.add(any);
+	            //get the results
+	            returnlist = criteria.list();
+	            
+	            
+	            int i = 0;
+	
+	
+	
+	
+	    } catch (Exception e) {
+	        logger.error(
+	                "getCustomer() - Error while trying to do Transaction",
+	                e);
+	        returnlist = new ArrayList();
+	    } finally {
+	        try {
+	            // No matter what, close the session
+	            HibernateUtil.closeSession();
+	        } catch (HibernateException e1) {
+	            logger.error("getCustomer() - Could not Close the Session", e1);
+	        }
+	    }
+	
+	    if (logger.isDebugEnabled()) {
+	        logger.debug("getCustomer() - end");
+	    }
+	    return returnlist;
+	    
+	
+	}
+	
+	
+	public static Customer getSingleCustomer(final int id){
+	    if (logger.isDebugEnabled()) {
+	        logger.debug("getSingleCustomer() - start. int filter= "+id);
+	    }
+	    //init the returnlist
+	    Customer returnobject = null;
+	
+	    Session s = null;
+	    Transaction tx = null;
+	    try {
+	        //get new Session and begin Transaction
+	        s = HibernateUtil.currentSession();
+	
+	            returnobject = (Customer)s.get(Customer.class, new Integer(id));
+	
+	    } catch (Exception e) {
+	        logger.error(
+	                "getSingleCustomer() - Error while trying to do Transaction",
+	                e);
+	        
+	    } finally {
+	        try {
+	            // No matter what, close the session
+	            HibernateUtil.closeSession();
+	        } catch (HibernateException e1) {
+	            logger.error("getSingleCustomer() - Could not Close the Session", e1);
+	        }
+	    }
+	
+	    if (logger.isDebugEnabled()) {
+	        logger.debug("getSingleCustomer() - end");
+	    }
+	    return returnobject;
+	    
+	
+	}
+
+=======
 	/**
 	 * This method gets all Movies from the database.
 	 * searches for ID,Title,Date,Description,Actor,Director...
@@ -1710,5 +1821,6 @@
 	}
 
 
+>>>>>>> .r180
 }
 



From pschneider at sheep.berlios.de  Tue Nov 30 19:27:07 2004
From: pschneider at sheep.berlios.de (Philipp Schneider at BerliOS)
Date: Tue, 30 Nov 2004 19:27:07 +0100
Subject: [Provirent-svn-commit] r183 - in project_src/provirent_hibernate/src/de/hsharz/provirent: management/gui persistence
Message-ID: <200411301827.iAUIR7bk001238@sheep.berlios.de>

Author: pschneider
Date: 2004-11-30 19:27:06 +0100 (Tue, 30 Nov 2004)
New Revision: 183

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositePayment.java
   project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java
Log:


Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositePayment.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositePayment.java	2004-11-30 17:26:42 UTC (rev 182)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositePayment.java	2004-11-30 18:27:06 UTC (rev 183)
@@ -1141,7 +1141,7 @@
      * @param text
      */
     protected void refreshPaymentDetail(final String id) {
-        if (!id.equals("") && id != null) {
+        if (id != null && !id.equals("") ) {
 	        Payment object;
 	        try {
 	            //since we only can get a String value from the table, we

Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java	2004-11-30 17:26:42 UTC (rev 182)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/persistence/Database.java	2004-11-30 18:27:06 UTC (rev 183)
@@ -1627,7 +1627,7 @@
 	            //any of the criteria 
 	            Disjunction any = Expression.disjunction();
 
-<<<<<<< .mine
+
 	            if (filter != null && !filter.equalsIgnoreCase("")) {
 	                any.add(Expression.like("userName", "%"+filter+"%"));
 	                any.add(Expression.like("dayOfRegistration", "%"+filter+"%"));
@@ -1713,7 +1713,7 @@
 	
 	}
 
-=======
+
 	/**
 	 * This method gets all Movies from the database.
 	 * searches for ID,Title,Date,Description,Actor,Director...
@@ -1821,6 +1821,5 @@
 	}
 
 
->>>>>>> .r180
 }
 



From pschneider at sheep.berlios.de  Tue Nov 30 19:59:37 2004
From: pschneider at sheep.berlios.de (Philipp Schneider at BerliOS)
Date: Tue, 30 Nov 2004 19:59:37 +0100
Subject: [Provirent-svn-commit] r184 - project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui
Message-ID: <200411301859.iAUIxb8w002318@sheep.berlios.de>

Author: pschneider
Date: 2004-11-30 19:59:36 +0100 (Tue, 30 Nov 2004)
New Revision: 184

Modified:
   project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java
Log:


Modified: project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java
===================================================================
--- project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java	2004-11-30 18:27:06 UTC (rev 183)
+++ project_src/provirent_hibernate/src/de/hsharz/provirent/management/gui/CompositeMovie.java	2004-11-30 18:59:36 UTC (rev 184)
@@ -747,7 +747,7 @@
         	            for(int i =0; i< movie.getActors().size(); i++){
         	                item = new TableItem(tableMoviesActorsDetail, SWT.NONE);
         	                item.setText(new String[] { ((Actor)movie.getActors().get(i)).getActorId() + ""
-        	                        , ((Actor)movie.getActors().get(i)).getLastName() + ""});
+        	                        , ((Actor)movie.getActors().get(i)).getLastName() + ", "+((Actor)movie.getActors().get(i)).getFirstName()});
         	            }                    
         	        }
         	    });  
@@ -770,10 +770,9 @@
         	    });  
         	}
         	{
-                tableMoviesActorsDetail = new Table(groupMoviesDetail,SWT.SINGLE
-                        | SWT.V_SCROLL | SWT.BORDER);
-                tableMoviesActorsDetail.setHeaderVisible(true);
-                tableMoviesActorsDetail.setLinesVisible(true);
+                tableMoviesActorsDetail = new Table(groupMoviesDetail, SWT.SINGLE | SWT.FULL_SELECTION | SWT.V_SCROLL | SWT.BORDER);
+                //tableMoviesActorsDetail.setHeaderVisible(true);
+                //tableMoviesActorsDetail.setLinesVisible(true);
                 GridData tableMoviesActorsDetailLData = new GridData();
                 tableMoviesActorsDetailLData.horizontalAlignment = GridData.FILL;
                 tableMoviesActorsDetailLData.horizontalSpan = 5;
@@ -791,7 +790,7 @@
                 {
                     tableMoviesDetail_ColumnName = new TableColumn(
                             tableMoviesActorsDetail,
-                         SWT.CENTER);              
+                         SWT.LEFT);              
                     tableMoviesDetail_ColumnName.setText(
                             l.getString("movies.groupoverviewdetail.columnactors"));
                     tableMoviesDetail_ColumnName.setWidth(200);            



